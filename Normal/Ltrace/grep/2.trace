[0x401799] __libc_start_main(0x4037f0, 4, 0x7fff451388b8, 0x4189a0, 0x418a30 <unfinished ...>
[0x403839] strrchr("target5", '/')               = NULL
[0x4038b8] setlocale(6, "")                      = "en_US.UTF-8"
[0x4038c7] bindtextdomain("grep", "/nfs/spectre/u4/jin/research/exp"...) = "/nfs/spectre/u4/jin/research/exp"...
[0x4038d1] textdomain("grep")                    = "grep"
[0x4038db] getenv("GREP_OPTIONS")                = NULL
[0x403ed4] getopt_long(4, 0x7fff451388b8, "0123456789A:B:C::EFGHIUVX:abcd:e"..., 0x0061d1e0, NULL) = 110
[0x403ed4] getopt_long(4, 0x7fff451388b8, "0123456789A:B:C::EFGHIUVX:abcd:e"..., 0x0061d1e0, NULL) = -1
[0x403537] strcmp("grep", "default")             = 3
[0x403537] strcmp("grep", "grep")                = 0
[0x401911] malloc(1280)                          = 0x00f02090
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x40d513] __ctype_b_loc()                       = 0x7fce6d6516b8
[0x401911] malloc(32)                            = 0x00f025a0
[0x412e46] free(0x00f02090)                      = <void>
[0x4041de] malloc(32)                            = 0x00f02090
[0x4041de] malloc(4)                             = 0x00f020c0
[0x404224] realloc(0x00f020c0, 8)                = 0x00f020c0
[0x404224] realloc(0x00f020c0, 16)               = 0x00f020c0
[0x409e60] malloc(128)                           = 0x00f020e0
[0x409ef1] malloc(8)                             = 0x00f02170
[0x409f0e] malloc(2)                             = 0x00f02190
[0x409f2c] malloc(2)                             = 0x00f021b0
[0x409f4a] malloc(2)                             = 0x00f021d0
[0x409ef1] malloc(8)                             = 0x00f021f0
[0x409f0e] malloc(2)                             = 0x00f02210
[0x409f2c] malloc(2)                             = 0x00f02230
[0x409f4a] malloc(2)                             = 0x00f02250
[0x409ef1] malloc(8)                             = 0x00f02270
[0x409f0e] malloc(2)                             = 0x00f02290
[0x409f2c] malloc(2)                             = 0x00f022b0
[0x409f4a] malloc(2)                             = 0x00f022d0
[0x409ef1] malloc(8)                             = 0x00f022f0
[0x409f0e] malloc(2)                             = 0x00f02310
[0x409f2c] malloc(2)                             = 0x00f02330
[0x409f4a] malloc(2)                             = 0x00f02350
[0x409777] malloc(2)                             = 0x00f02370
[0x4097c7] strcpy(0x00f02370, "1")               = 0x00f02370
[0x409a75] realloc(0x00f02170, 16)               = 0x00f02170
[0x40a42a] strcmp("1", "1")                      = 0
[0x40a78f] malloc(24)                            = 0x00f02390
[0x40a7d5] malloc(2)                             = 0x00f023b0
[0x40a7f7] strcpy(0x00f023b0, "1")               = 0x00f023b0
[0x4098be] free(0x00f02370)                      = <void>
[0x409888] free(0x00f02170)                      = <void>
[0x409888] free(0x00f02190)                      = <void>
[0x409888] free(0x00f021b0)                      = <void>
[0x409888] free(0x00f021d0)                      = <void>
[0x409888] free(0x00f021f0)                      = <void>
[0x409888] free(0x00f02210)                      = <void>
[0x409888] free(0x00f02230)                      = <void>
[0x409888] free(0x00f02250)                      = <void>
[0x409888] free(0x00f02270)                      = <void>
[0x409888] free(0x00f02290)                      = <void>
[0x409888] free(0x00f022b0)                      = <void>
[0x409888] free(0x00f022d0)                      = <void>
[0x409888] free(0x00f022f0)                      = <void>
[0x409888] free(0x00f02310)                      = <void>
[0x409888] free(0x00f02330)                      = <void>
[0x409888] free(0x00f02350)                      = <void>
[0x40a8ce] free(0x00f020e0)                      = <void>
[0x4041de] malloc(8)                             = 0x00f02350
[0x4041de] malloc(8)                             = 0x00f02330
[0x4041de] malloc(16)                            = 0x00f02310
[0x4041de] malloc(8)                             = 0x00f022f0
[0x4041de] malloc(16)                            = 0x00f022d0
[0x4041de] malloc(12)                            = 0x00f022b0
[0x4041de] malloc(16)                            = 0x00f02290
[0x4041a3] calloc(3, 16)                         = 0x00f020e0
[0x4041de] malloc(8)                             = 0x00f02270
[0x4041de] malloc(8)                             = 0x00f02250
[0x4041de] malloc(12)                            = 0x00f02230
[0x406f30] free(0x00f02230)                      = <void>
[0x4041de] malloc(12)                            = 0x00f02230
[0x406f30] free(0x00f02230)                      = <void>
[0x4041de] malloc(12)                            = 0x00f02230
[0x406f30] free(0x00f02230)                      = <void>
[0x4041de] malloc(32)                            = 0x00f02120
[0x4041de] malloc(8)                             = 0x00f02230
[0x407a45] free(0x00f02350)                      = <void>
[0x407a51] free(0x00f02330)                      = <void>
[0x407a5d] free(0x00f02310)                      = <void>
[0x407a69] free(0x00f022f0)                      = <void>
[0x407a75] free(0x00f022d0)                      = <void>
[0x407a81] free(0x00f022b0)                      = <void>
[0x407a90] free(0x00f02290)                      = <void>
[0x401911] malloc(2440)                          = 0x00f025d0
[0x40a92b] _obstack_begin(0xf025d0, 0, 0, 0x4018f9, 0x401410 <unfinished ...>
[0x401911] malloc(4064)                          = 0x00f02f60
[0x40a92b] <... _obstack_begin resumed> )        = 1
[0x4040e7] strcmp("../inputs/grep1.dat", "-")    = 1
[0x402e37] open("../inputs/grep1.dat", 0, 00)    = 3
[0x401bd7] getpagesize()                         = 4096
[0x401a6f] malloc(45056)                         = 0x00f03f50
[0x401d33] __fxstat(1, 3, 0x0061d808)            = 0
[0x4020b3] memmove(0xf06000, 0xf04000, 0, 0xf04000, 3) = 0xf06000
[0x402213] read(3, "/* grep.c - main driver file for"..., 32768) = 32768
[0x402a9f] memchr("/* grep.c - main driver file for"..., '\000', 32768) = NULL
[0x40bc2b] memchr("/* grep.c - main driver file for"..., '1', 32740) = 0x00f06038
[0x40cdf3] memchr("1992 Free Software Foundation, I"..., '\n', 32684) = 0x00f0605b
[0x4022d1] memchr("/* grep.c - main driver file for"..., '\n', 39) = 0x00f06026
[0x4022d1] memchr("   Copyright (C) 1992 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("2:", 1, 2, 0x7fce6d444260)    = 2
[0x4024d9] fwrite("   Copyright (C) 1992 Free Softw"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., '1', 32648) = 0x00f062f9
[0x40cdf3] memchr("139, USA.\n\n   Written July 1992 "..., '\n', 31979) = 0x00f06302
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 618) = 0x00f0605c
[0x4022d1] memchr("   This program is free software"..., '\n', 617) = 0x00f060a4
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 545) = 0x00f060ec
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 473) = 0x00f06133
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 402) = 0x00f06149
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f0614a
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f0618d
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f061cf
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f06210
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f06240
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f06241
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f06286
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f062c5
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("16:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   Written July 1992 by Mike Ha"..., '1', 31969) = 0x00f06314
[0x40cdf3] memchr("1992 by Mike Haertel.  */\n\n\n/* I"..., '\n', 31952) = 0x00f0632d
[0x4022d1] memchr("\n   Written July 1992 by Mike Ha"..., '\n', 1) = 0x00f06303
[0x4022d1] memchr("   Written July 1992 by Mike Hae"..., '\n', 0) = NULL
[0x4023cc] fwrite("18:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("   Written July 1992 by Mike Hae"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n/* I added a series define fro"..., '1', 31926) = 0x00f06382
[0x40cdf3] memchr("1\n#define STDC_HEADERS 1\n#define"..., '\n', 31842) = 0x00f06383
[0x4022d1] memchr("\n\n/* I added a series define fro"..., '\n', 71) = 0x00f0632e
[0x4022d1] memchr("\n/* I added a series define from"..., '\n', 70) = 0x00f0632f
[0x4022d1] memchr("/* I added a series define from "..., '\n', 69) = 0x00f06374
[0x4022d1] memchr("#define GREP 1\n#define STDC_HEAD"..., '\n', 0) = NULL
[0x4023cc] fwrite("22:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define GREP 1\n#define STDC_HEAD"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define STDC_HEADERS 1\n#define H"..., '1', 31840) = 0x00f06399
[0x40cdf3] memchr("1\n#define HAVE_STRING_H 1\n#defin"..., '\n', 31819) = 0x00f0639a
[0x4022d1] memchr("#define STDC_HEADERS 1\n#define H"..., '\n', 0) = NULL
[0x4023cc] fwrite("23:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define STDC_HEADERS 1\n#define H"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_STRING_H 1\n#define "..., '1', 31817) = 0x00f063b1
[0x40cdf3] memchr("1\n#define HAVE_SYS_PARAM_H 1\n#de"..., '\n', 31795) = 0x00f063b2
[0x4022d1] memchr("#define HAVE_STRING_H 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("24:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_STRING_H 1\n#define "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_SYS_PARAM_H 1\n#defi"..., '1', 31793) = 0x00f063cc
[0x40cdf3] memchr("1\n#define HAVE_UNISTD_H 1\n#defin"..., '\n', 31768) = 0x00f063cd
[0x4022d1] memchr("#define HAVE_SYS_PARAM_H 1\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("25:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_SYS_PARAM_H 1\n#defi"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_UNISTD_H 1\n#define "..., '1', 31766) = 0x00f063e4
[0x40cdf3] memchr("1\n#define HAVE_ALLOCA_H 1\n#defin"..., '\n', 31744) = 0x00f063e5
[0x4022d1] memchr("#define HAVE_UNISTD_H 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("26:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_UNISTD_H 1\n#define "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_ALLOCA_H 1\n#define "..., '1', 31742) = 0x00f063fc
[0x40cdf3] memchr("1\n#define HAVE_GETPAGESIZE 1\n#de"..., '\n', 31720) = 0x00f063fd
[0x4022d1] memchr("#define HAVE_ALLOCA_H 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("27:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_ALLOCA_H 1\n#define "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_GETPAGESIZE 1\n#defi"..., '1', 31718) = 0x00f06417
[0x40cdf3] memchr("1\n#define HAVE_MEMCHR 1\n#define "..., '\n', 31693) = 0x00f06418
[0x4022d1] memchr("#define HAVE_GETPAGESIZE 1\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("28:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_GETPAGESIZE 1\n#defi"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_MEMCHR 1\n#define HA"..., '1', 31691) = 0x00f0642d
[0x40cdf3] memchr("1\n#define HAVE_STRERROR 1\n#defin"..., '\n', 31671) = 0x00f0642e
[0x4022d1] memchr("#define HAVE_MEMCHR 1\n#define HA"..., '\n', 0) = NULL
[0x4023cc] fwrite("29:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_MEMCHR 1\n#define HA"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_STRERROR 1\n#define "..., '1', 31669) = 0x00f06445
[0x40cdf3] memchr("1\n#define HAVE_VALLOC 1\n#define "..., '\n', 31647) = 0x00f06446
[0x4022d1] memchr("#define HAVE_STRERROR 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("30:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_STRERROR 1\n#define "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_VALLOC 1\n#define HA"..., '1', 31645) = 0x00f0645b
[0x40cdf3] memchr("1\n#define HAVE_WORKING_MMAP 1\n/*"..., '\n', 31625) = 0x00f0645c
[0x4022d1] memchr("#define HAVE_VALLOC 1\n#define HA"..., '\n', 0) = NULL
[0x4023cc] fwrite("31:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_VALLOC 1\n#define HA"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define HAVE_WORKING_MMAP 1\n/***"..., '1', 31623) = 0x00f06477
[0x40cdf3] memchr("1\n/*** end of cfe purpose **/\n\n#"..., '\n', 31597) = 0x00f06478
[0x4022d1] memchr("#define HAVE_WORKING_MMAP 1\n/***"..., '\n', 0) = NULL
[0x4023cc] fwrite("32:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define HAVE_WORKING_MMAP 1\n/***"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("/*** end of cfe purpose **/\n\n#in"..., '1', 31595) = 0x00f06521
[0x40cdf3] memchr("1\n#else\n#include <sys/types.h>\n#"..., '\n', 31427) = 0x00f06522
[0x4022d1] memchr("/*** end of cfe purpose **/\n\n#in"..., '\n', 148) = 0x00f06494
[0x4022d1] memchr("\n#include <errno.h>\n#include <st"..., '\n', 120) = 0x00f06495
[0x4022d1] memchr("#include <errno.h>\n#include <std"..., '\n', 119) = 0x00f064a8
[0x4022d1] memchr("#include <stdio.h>\n\n#ifndef errn"..., '\n', 100) = 0x00f064bb
[0x4022d1] memchr("\n#ifndef errno\nextern int errno;"..., '\n', 81) = 0x00f064bc
[0x4022d1] memchr("#ifndef errno\nextern int errno;\n"..., '\n', 80) = 0x00f064ca
[0x4022d1] memchr("extern int errno;\n#endif\n\n#ifdef"..., '\n', 66) = 0x00f064dc
[0x4022d1] memchr("#endif\n\n#ifdef STDC_HEADERS\n#inc"..., '\n', 48) = 0x00f064e3
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#include <s"..., '\n', 41) = 0x00f064e4
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#include <st"..., '\n', 40) = 0x00f064f8
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f0650c
[0x4022d1] memchr("#define flag_stdlib 1\n#else\n#inc"..., '\n', 0) = NULL
[0x4023cc] fwrite("44:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_stdlib 1\n#else\n#inc"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#else\n#include <sys/types.h>\n#de"..., '1', 31425) = 0x00f06556
[0x40cdf3] memchr("1\nextern char *malloc(), *reallo"..., '\n', 31374) = 0x00f06557
[0x4022d1] memchr("#else\n#include <sys/types.h>\n#de"..., '\n', 29) = 0x00f06528
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f0653f
[0x4022d1] memchr("#define flag_systypes 1\nextern c"..., '\n', 0) = NULL
[0x4023cc] fwrite("47:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_systypes 1\nextern c"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("extern char *malloc(), *realloc("..., '1', 31372) = 0x00f065f3
[0x40cdf3] memchr("1\n#ifdef NEED_MEMORY_H\n#include "..., '\n', 31217) = 0x00f065f4
[0x4022d1] memchr("extern char *malloc(), *realloc("..., '\n', 135) = 0x00f0657a
[0x4022d1] memchr("extern void free();\n#endif\n\n#if "..., '\n', 100) = 0x00f0658e
[0x4022d1] memchr("#endif\n\n#if defined(STDC_HEADERS"..., '\n', 80) = 0x00f06595
[0x4022d1] memchr("\n#if defined(STDC_HEADERS) || de"..., '\n', 73) = 0x00f06596
[0x4022d1] memchr("#if defined(STDC_HEADERS) || def"..., '\n', 72) = 0x00f065ca
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f065de
[0x4022d1] memchr("#define flag_string 1\n#ifdef NEE"..., '\n', 0) = NULL
[0x4023cc] fwrite("54:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_string 1\n#ifdef NEE"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef NEED_MEMORY_H\n#include <m"..., '1', 31215) = 0x00f06632
[0x40cdf3] memchr("1\n#endif\n#else\n#include <strings"..., '\n', 31154) = 0x00f06633
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#include <m"..., '\n', 41) = 0x00f06609
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 20) = 0x00f0661d
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("57:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_memory 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\n#include <strings.h"..., '1', 31152) = 0x00f0666b
[0x40cdf3] memchr("1\n#ifdef __STDC__\nextern void *m"..., '\n', 31097) = 0x00f0666c
[0x4022d1] memchr("#endif\n#else\n#include <strings.h"..., '\n', 34) = 0x00f0663a
[0x4022d1] memchr("#else\n#include <strings.h>\n#defi"..., '\n', 27) = 0x00f06640
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 21) = 0x00f06655
[0x4022d1] memchr("#define flag_strings 1\n#ifdef __"..., '\n', 0) = NULL
[0x4023cc] fwrite("61:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_strings 1\n#ifdef __"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef __STDC__\nextern void *mem"..., '1', 31095) = 0x00f0672e
[0x40cdf3] memchr("1\n#endif\n#include <fcntl.h>\n#inc"..., '\n', 30902) = 0x00f0672f
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 171) = 0x00f0667c
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 155) = 0x00f06693
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 132) = 0x00f06699
[0x4022d1] memchr("extern char *memchr();\n#endif\n#d"..., '\n', 126) = 0x00f066b0
[0x4022d1] memchr("#endif\n#define strrchr rindex\n#e"..., '\n', 103) = 0x00f066b7
[0x4022d1] memchr("#define strrchr rindex\n#endif\n\n#"..., '\n', 96) = 0x00f066ce
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_UNISTD_H\n#if"..., '\n', 73) = 0x00f066d5
[0x4022d1] memchr("\n#ifdef HAVE_UNISTD_H\n#if flag_s"..., '\n', 66) = 0x00f066d6
[0x4022d1] memchr("#ifdef HAVE_UNISTD_H\n#if flag_sy"..., '\n', 65) = 0x00f066eb
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 44) = 0x00f06700
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f06717
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("73:", 1, 3, 0x7fce6d444260)   = 3
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\n#"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#include <fcntl.h>\n#inclu"..., '1', 30900) = 0x00f06c67
[0x40cdf3] memchr("1;\n}\n\n/* Like error(), but die h"..., '\n', 29565) = 0x00f06c69
[0x4022d1] memchr("#endif\n#include <fcntl.h>\n#inclu"..., '\n', 1323) = 0x00f06736
[0x4022d1] memchr("#include <fcntl.h>\n#include <uni"..., '\n', 1316) = 0x00f06749
[0x4022d1] memchr("#include <unistd.h>\n#else\n#defin"..., '\n', 1297) = 0x00f0675d
[0x4022d1] memchr("#else\n#define O_RDONLY 0\nextern "..., '\n', 1277) = 0x00f06763
[0x4022d1] memchr("#define O_RDONLY 0\nextern int op"..., '\n', 1271) = 0x00f06776
[0x4022d1] memchr("extern int open(), read(), close"..., '\n', 1252) = 0x00f0679a
[0x4022d1] memchr("#endif\n\n#include "getpagesize.h""..., '\n', 1216) = 0x00f067a1
[0x4022d1] memchr("\n#include "getpagesize.h"\n#inclu"..., '\n', 1209) = 0x00f067a2
[0x4022d1] memchr("#include "getpagesize.h"\n#includ"..., '\n', 1208) = 0x00f067bb
[0x4022d1] memchr("#include "grep.h"\n\n#undef MAX\n#d"..., '\n', 1183) = 0x00f067cd
[0x4022d1] memchr("\n#undef MAX\n#define MAX(A,B) ((A"..., '\n', 1165) = 0x00f067ce
[0x4022d1] memchr("#undef MAX\n#define MAX(A,B) ((A)"..., '\n', 1164) = 0x00f067d9
[0x4022d1] memchr("#define MAX(A,B) ((A) > (B) ? (A"..., '\n', 1153) = 0x00f06802
[0x4022d1] memchr("\n/* Provide missing ANSI feature"..., '\n', 1112) = 0x00f06803
[0x4022d1] memchr("/* Provide missing ANSI features"..., '\n', 1111) = 0x00f06835
[0x4022d1] memchr("\n#ifndef HAVE_STRERROR\nextern in"..., '\n', 1061) = 0x00f06836
[0x4022d1] memchr("#ifndef HAVE_STRERROR\nextern int"..., '\n', 1060) = 0x00f0684c
[0x4022d1] memchr("extern int sys_nerr;\nextern char"..., '\n', 1038) = 0x00f06861
[0x4022d1] memchr("extern char *sys_errlist[];\n#def"..., '\n', 1017) = 0x00f0687d
[0x4022d1] memchr("#define strerror(E) ((E) < sys_n"..., '\n', 989) = 0x00f068cc
[0x4022d1] memchr("#endif\n\n#ifndef HAVE_MEMCHR\n#ifd"..., '\n', 910) = 0x00f068d3
[0x4022d1] memchr("\n#ifndef HAVE_MEMCHR\n#ifdef __ST"..., '\n', 903) = 0x00f068d4
[0x4022d1] memchr("#ifndef HAVE_MEMCHR\n#ifdef __STD"..., '\n', 902) = 0x00f068e8
[0x4022d1] memchr("#ifdef __STDC__\n#define VOID voi"..., '\n', 882) = 0x00f068f8
[0x4022d1] memchr("#define VOID void\n#else\n#define "..., '\n', 866) = 0x00f0690a
[0x4022d1] memchr("#else\n#define VOID char\n#endif\nV"..., '\n', 848) = 0x00f06910
[0x4022d1] memchr("#define VOID char\n#endif\nVOID *\n"..., '\n', 842) = 0x00f06922
[0x4022d1] memchr("#endif\nVOID *\nmemchr(vp, c, n)\n "..., '\n', 824) = 0x00f06929
[0x4022d1] memchr("VOID *\nmemchr(vp, c, n)\n     VOI"..., '\n', 817) = 0x00f06930
[0x4022d1] memchr("memchr(vp, c, n)\n     VOID *vp;\n"..., '\n', 810) = 0x00f06941
[0x4022d1] memchr("     VOID *vp;\n     int c;\n     "..., '\n', 793) = 0x00f06950
[0x4022d1] memchr("     int c;\n     size_t n;\n{\n  u"..., '\n', 778) = 0x00f0695c
[0x4022d1] memchr("     size_t n;\n{\n  unsigned char"..., '\n', 766) = 0x00f0696b
[0x4022d1] memchr("{\n  unsigned char *p;\n\n  for (p "..., '\n', 751) = 0x00f0696d
[0x4022d1] memchr("  unsigned char *p;\n\n  for (p = "..., '\n', 749) = 0x00f06981
[0x4022d1] memchr("\n  for (p = (unsigned char *) vp"..., '\n', 729) = 0x00f06982
[0x4022d1] memchr("  for (p = (unsigned char *) vp;"..., '\n', 728) = 0x00f069ad
[0x4022d1] memchr("    if (*p == c)\n      return (V"..., '\n', 685) = 0x00f069be
[0x4022d1] memchr("      return (VOID *) p;\n  retur"..., '\n', 668) = 0x00f069d7
[0x4022d1] memchr("  return 0;\n}\n#endif\n    \n/* Def"..., '\n', 643) = 0x00f069e3
[0x4022d1] memchr("}\n#endif\n    \n/* Define flags de"..., '\n', 631) = 0x00f069e5
[0x4022d1] memchr("#endif\n    \n/* Define flags decl"..., '\n', 629) = 0x00f069ec
[0x4022d1] memchr("    \n/* Define flags declared in"..., '\n', 622) = 0x00f069f1
[0x4022d1] memchr("/* Define flags declared in grep"..., '\n', 617) = 0x00f06a18
[0x4022d1] memchr("char *matcher;\nint match_icase;\n"..., '\n', 578) = 0x00f06a27
[0x4022d1] memchr("int match_icase;\nint match_words"..., '\n', 563) = 0x00f06a38
[0x4022d1] memchr("int match_words;\nint match_lines"..., '\n', 546) = 0x00f06a49
[0x4022d1] memchr("int match_lines;\n\n/* Functions w"..., '\n', 529) = 0x00f06a5a
[0x4022d1] memchr("\n/* Functions we'll use to searc"..., '\n', 512) = 0x00f06a5b
[0x4022d1] memchr("/* Functions we'll use to search"..., '\n', 511) = 0x00f06a80
[0x4022d1] memchr("static void (*compile)();\nstatic"..., '\n', 474) = 0x00f06a9a
[0x4022d1] memchr("static char *(*execute)();\n\n/* F"..., '\n', 448) = 0x00f06ab5
[0x4022d1] memchr("\n/* For error messages. */\nstati"..., '\n', 421) = 0x00f06ab6
[0x4022d1] memchr("/* For error messages. */\nstatic"..., '\n', 420) = 0x00f06ad0
[0x4022d1] memchr("static char *prog;\nstatic char *"..., '\n', 394) = 0x00f06ae3
[0x4022d1] memchr("static char *filename;\nstatic in"..., '\n', 375) = 0x00f06afa
[0x4022d1] memchr("static int errseen;\n\n/* Print a "..., '\n', 352) = 0x00f06b0e
[0x4022d1] memchr("\n/* Print a message and possibly"..., '\n', 332) = 0x00f06b0f
[0x4022d1] memchr("/* Print a message and possibly "..., '\n', 331) = 0x00f06b4a
[0x4022d1] memchr("   that something awful happened"..., '\n', 272) = 0x00f06b6f
[0x4022d1] memchr("static void\nerror(mesg, errnum)\n"..., '\n', 235) = 0x00f06b7b
[0x4022d1] memchr("error(mesg, errnum)\n#ifdef __STD"..., '\n', 223) = 0x00f06b8f
[0x4022d1] memchr("#ifdef __STDC__\n     const\n#endi"..., '\n', 203) = 0x00f06b9f
[0x4022d1] memchr("     const\n#endif\n     char *mes"..., '\n', 187) = 0x00f06baa
[0x4022d1] memchr("#endif\n     char *mesg;\n     int"..., '\n', 176) = 0x00f06bb1
[0x4022d1] memchr("     char *mesg;\n     int errnum"..., '\n', 169) = 0x00f06bc2
[0x4022d1] memchr("     int errnum;\n{\n  if (errnum)"..., '\n', 152) = 0x00f06bd3
[0x4022d1] memchr("{\n  if (errnum)\n    fprintf(stde"..., '\n', 135) = 0x00f06bd5
[0x4022d1] memchr("  if (errnum)\n    fprintf(stderr"..., '\n', 133) = 0x00f06be3
[0x4022d1] memchr("    fprintf(stderr, "%s: %s: %s\\"..., '\n', 119) = 0x00f06c26
[0x4022d1] memchr("  else\n    fprintf(stderr, "%s: "..., '\n', 52) = 0x00f06c2d
[0x4022d1] memchr("    fprintf(stderr, "%s: %s\\n", "..., '\n', 45) = 0x00f06c5a
[0x4022d1] memchr("  errseen = 1;\n}\n\n/* Like error("..., '\n', 0) = NULL
[0x4023cc] fwrite("146:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  errseen = 1;\n}\n\n/* Like error("..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n/* Like error(), but die horr"..., '1', 29562) = 0x00f071ed
[0x40cdf3] memchr("1\n#endif\n#include <sys/stat.h>\n#"..., '\n', 28151) = 0x00f071ee
[0x4022d1] memchr("}\n\n/* Like error(), but die horr"..., '\n', 1389) = 0x00f06c6b
[0x4022d1] memchr("\n/* Like error(), but die horrib"..., '\n', 1387) = 0x00f06c6c
[0x4022d1] memchr("/* Like error(), but die horribl"..., '\n', 1386) = 0x00f06ca1
[0x4022d1] memchr("void\nfatal(mesg, errnum)\n#ifdef "..., '\n', 1333) = 0x00f06ca6
[0x4022d1] memchr("fatal(mesg, errnum)\n#ifdef __STD"..., '\n', 1328) = 0x00f06cba
[0x4022d1] memchr("#ifdef __STDC__\n     const\n#endi"..., '\n', 1308) = 0x00f06cca
[0x4022d1] memchr("     const\n#endif\n     char *mes"..., '\n', 1292) = 0x00f06cd5
[0x4022d1] memchr("#endif\n     char *mesg;\n     int"..., '\n', 1281) = 0x00f06cdc
[0x4022d1] memchr("     char *mesg;\n     int errnum"..., '\n', 1274) = 0x00f06ced
[0x4022d1] memchr("     int errnum;\n{\n  error(mesg,"..., '\n', 1257) = 0x00f06cfe
[0x4022d1] memchr("{\n  error(mesg, errnum);\n  exit("..., '\n', 1240) = 0x00f06d00
[0x4022d1] memchr("  error(mesg, errnum);\n  exit(2)"..., '\n', 1238) = 0x00f06d17
[0x4022d1] memchr("  exit(2);\n}\n\n/* Interface to ha"..., '\n', 1215) = 0x00f06d22
[0x4022d1] memchr("}\n\n/* Interface to handle errors"..., '\n', 1204) = 0x00f06d24
[0x4022d1] memchr("\n/* Interface to handle errors a"..., '\n', 1202) = 0x00f06d25
[0x4022d1] memchr("/* Interface to handle errors an"..., '\n', 1201) = 0x00f06d5f
[0x4022d1] memchr("char *\nxmalloc(size)\n     size_t"..., '\n', 1143) = 0x00f06d66
[0x4022d1] memchr("xmalloc(size)\n     size_t size;\n"..., '\n', 1136) = 0x00f06d74
[0x4022d1] memchr("     size_t size;\n{\n  char *resu"..., '\n', 1122) = 0x00f06d86
[0x4022d1] memchr("{\n  char *result;\n\n  result = ma"..., '\n', 1104) = 0x00f06d88
[0x4022d1] memchr("  char *result;\n\n  result = mall"..., '\n', 1102) = 0x00f06d98
[0x4022d1] memchr("\n  result = malloc(size);\n  if ("..., '\n', 1086) = 0x00f06d99
[0x4022d1] memchr("  result = malloc(size);\n  if (s"..., '\n', 1085) = 0x00f06db2
[0x4022d1] memchr("  if (size && !result)\n    fatal"..., '\n', 1060) = 0x00f06dc9
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 1037) = 0x00f06deb
[0x4022d1] memchr("  return result;\n}\n\n/* Interface"..., '\n', 1003) = 0x00f06dfc
[0x4022d1] memchr("}\n\n/* Interface to handle errors"..., '\n', 986) = 0x00f06dfe
[0x4022d1] memchr("\n/* Interface to handle errors a"..., '\n', 984) = 0x00f06dff
[0x4022d1] memchr("/* Interface to handle errors an"..., '\n', 983) = 0x00f06e3e
[0x4022d1] memchr("char *\nxrealloc(ptr, size)\n     "..., '\n', 920) = 0x00f06e45
[0x4022d1] memchr("xrealloc(ptr, size)\n     char *p"..., '\n', 913) = 0x00f06e59
[0x4022d1] memchr("     char *ptr;\n     size_t size"..., '\n', 893) = 0x00f06e69
[0x4022d1] memchr("     size_t size;\n{\n  char *resu"..., '\n', 877) = 0x00f06e7b
[0x4022d1] memchr("{\n  char *result;\n\n  if (ptr)\n  "..., '\n', 859) = 0x00f06e7d
[0x4022d1] memchr("  char *result;\n\n  if (ptr)\n    "..., '\n', 857) = 0x00f06e8d
[0x4022d1] memchr("\n  if (ptr)\n    result = realloc"..., '\n', 841) = 0x00f06e8e
[0x4022d1] memchr("  if (ptr)\n    result = realloc("..., '\n', 840) = 0x00f06e99
[0x4022d1] memchr("    result = realloc(ptr, size);"..., '\n', 829) = 0x00f06eba
[0x4022d1] memchr("  else\n    result = malloc(size)"..., '\n', 796) = 0x00f06ec1
[0x4022d1] memchr("    result = malloc(size);\n  if "..., '\n', 789) = 0x00f06edc
[0x4022d1] memchr("  if (size && !result)\n    fatal"..., '\n', 762) = 0x00f06ef3
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 739) = 0x00f06f15
[0x4022d1] memchr("  return result;\n}\n\n#if !defined"..., '\n', 705) = 0x00f06f26
[0x4022d1] memchr("}\n\n#if !defined(HAVE_VALLOC)\n#de"..., '\n', 688) = 0x00f06f28
[0x4022d1] memchr("\n#if !defined(HAVE_VALLOC)\n#defi"..., '\n', 686) = 0x00f06f29
[0x4022d1] memchr("#if !defined(HAVE_VALLOC)\n#defin"..., '\n', 685) = 0x00f06f43
[0x4022d1] memchr("#define valloc malloc\n#else\n#ifd"..., '\n', 659) = 0x00f06f59
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 637) = 0x00f06f5f
[0x4022d1] memchr("#ifdef __STDC__\nextern void *val"..., '\n', 631) = 0x00f06f6f
[0x4022d1] memchr("extern void *valloc(size_t);\n#el"..., '\n', 615) = 0x00f06f8c
[0x4022d1] memchr("#else\nextern char *valloc();\n#en"..., '\n', 586) = 0x00f06f92
[0x4022d1] memchr("extern char *valloc();\n#endif\n#e"..., '\n', 580) = 0x00f06fa9
[0x4022d1] memchr("#endif\n#endif\n\n/* Hairy bufferin"..., '\n', 557) = 0x00f06fb0
[0x4022d1] memchr("#endif\n\n/* Hairy buffering mecha"..., '\n', 550) = 0x00f06fb7
[0x4022d1] memchr("\n/* Hairy buffering mechanism fo"..., '\n', 543) = 0x00f06fb8
[0x4022d1] memchr("/* Hairy buffering mechanism for"..., '\n', 542) = 0x00f06ff6
[0x4022d1] memchr("   all reads aligned on a page b"..., '\n', 480) = 0x00f07033
[0x4022d1] memchr("   page size. */\n\nstatic char *b"..., '\n', 419) = 0x00f07044
[0x4022d1] memchr("\nstatic char *buffer;\t\t/* Base o"..., '\n', 402) = 0x00f07045
[0x4022d1] memchr("static char *buffer;\t\t/* Base of"..., '\n', 401) = 0x00f07071
[0x4022d1] memchr("static size_t bufsalloc;\t/* Allo"..., '\n', 357) = 0x00f070b6
[0x4022d1] memchr("static size_t bufalloc;\t\t/* Tota"..., '\n', 288) = 0x00f070e8
[0x4022d1] memchr("static int bufdesc;\t\t/* File des"..., '\n', 238) = 0x00f07114
[0x4022d1] memchr("static char *bufbeg;\t\t/* Beginni"..., '\n', 194) = 0x00f07151
[0x4022d1] memchr("static char *buflim;\t\t/* Limit o"..., '\n', 133) = 0x00f0718a
[0x4022d1] memchr("\n#if defined(HAVE_WORKING_MMAP)\n"..., '\n', 76) = 0x00f0718b
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n#"..., '\n', 75) = 0x00f071aa
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 44) = 0x00f071bf
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f071d6
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("216:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\n#"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#include <sys/stat.h>\n#in"..., '1', 28149) = 0x00f07388
[0x40cdf3] memchr("1;\n#ifndef BUFSALLOC\n      bufsa"..., '\n', 27740) = 0x00f0738a
[0x4022d1] memchr("#endif\n#include <sys/stat.h>\n#in"..., '\n', 389) = 0x00f071f5
[0x4022d1] memchr("#include <sys/stat.h>\n#include <"..., '\n', 382) = 0x00f0720b
[0x4022d1] memchr("#include <sys/mman.h>\n\nstatic in"..., '\n', 360) = 0x00f07221
[0x4022d1] memchr("\nstatic int bufmapped;\t\t/* True "..., '\n', 338) = 0x00f07222
[0x4022d1] memchr("static int bufmapped;\t\t/* True f"..., '\n', 337) = 0x00f07258
[0x4022d1] memchr("static struct stat bufstat;\t/* F"..., '\n', 283) = 0x00f07288
[0x4022d1] memchr("static off_t bufoffset;\t\t/* What"..., '\n', 235) = 0x00f072c7
[0x4022d1] memchr("#endif\n\n/* Reset the buffer for "..., '\n', 172) = 0x00f072ce
[0x4022d1] memchr("\n/* Reset the buffer for a new f"..., '\n', 165) = 0x00f072cf
[0x4022d1] memchr("/* Reset the buffer for a new fi"..., '\n', 164) = 0x00f072ff
[0x4022d1] memchr("   on the first time through. */"..., '\n', 116) = 0x00f07320
[0x4022d1] memchr("void\nreset(fd)\n     int fd;\n{\n  "..., '\n', 83) = 0x00f07325
[0x4022d1] memchr("reset(fd)\n     int fd;\n{\n  stati"..., '\n', 78) = 0x00f0732f
[0x4022d1] memchr("     int fd;\n{\n  static int init"..., '\n', 68) = 0x00f0733c
[0x4022d1] memchr("{\n  static int initialized;\n\n  i"..., '\n', 55) = 0x00f0733e
[0x4022d1] memchr("  static int initialized;\n\n  if "..., '\n', 53) = 0x00f07358
[0x4022d1] memchr("\n  if (!initialized)\n    {\n     "..., '\n', 27) = 0x00f07359
[0x4022d1] memchr("  if (!initialized)\n    {\n      "..., '\n', 26) = 0x00f0736d
[0x4022d1] memchr("    {\n      initialized = 1;\n#if"..., '\n', 6) = 0x00f07373
[0x4022d1] memchr("      initialized = 1;\n#ifndef B"..., '\n', 0) = NULL
[0x4023cc] fwrite("236:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      initialized = 1;\n#ifndef B"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifndef BUFSALLOC\n      bufsallo"..., '1', 27737) = 0x00f073b4
[0x40cdf3] memchr("192, getpagesize());\n#else\n     "..., '\n', 27696) = 0x00f073c8
[0x4022d1] memchr("#ifndef BUFSALLOC\n      bufsallo"..., '\n', 18) = 0x00f0739c
[0x4022d1] memchr("      bufsalloc = MAX(8192, getp"..., '\n', 0) = NULL
[0x4023cc] fwrite("238:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      bufsalloc = MAX(8192, getp"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#else\n      bufsalloc = BUFSALLO"..., '1', 27675) = 0x00f07420
[0x40cdf3] memchr("1 byte of overflow is a kludge f"..., '\n', 27588) = 0x00f07453
[0x4022d1] memchr("#else\n      bufsalloc = BUFSALLO"..., '\n', 74) = 0x00f073ce
[0x4022d1] memchr("      bufsalloc = BUFSALLOC;\n#en"..., '\n', 68) = 0x00f073eb
[0x4022d1] memchr("#endif\n      bufalloc = 5 * bufs"..., '\n', 39) = 0x00f073f2
[0x4022d1] memchr("      bufalloc = 5 * bufsalloc;\n"..., '\n', 32) = 0x00f07412
[0x4022d1] memchr("      /* The 1 byte of overflow "..., '\n', 0) = NULL
[0x4023cc] fwrite("243:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      /* The 1 byte of overflow "..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t inserts a sentinel newline at "..., '1', 27536) = 0x00f074e2
[0x40cdf3] memchr("1);\n      if (!buffer)\n\tfatal("m"..., '\n', 27394) = 0x00f074e5
[0x4022d1] memchr("\t inserts a sentinel newline at "..., '\n', 109) = 0x00f07489
[0x4022d1] memchr("\t being searched.  There's gotta"..., '\n', 55) = 0x00f074c0
[0x4022d1] memchr("      buffer = valloc(bufalloc +"..., '\n', 0) = NULL
[0x4023cc] fwrite("246:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      buffer = valloc(bufalloc +"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (!buffer)\n\tfatal("memor"..., '1', 27390) = 0x00f075e9
[0x40cdf3] memchr("1;\n      bufoffset = lseek(fd, 0"..., '\n', 27131) = 0x00f075eb
[0x4022d1] memchr("      if (!buffer)\n\tfatal("memor"..., '\n', 241) = 0x00f074f8
[0x4022d1] memchr("\tfatal("memory exhausted", 0);\n "..., '\n', 222) = 0x00f07517
[0x4022d1] memchr("      bufbeg = buffer;\n      buf"..., '\n', 191) = 0x00f0752e
[0x4022d1] memchr("      buflim = buffer;\n    }\n  b"..., '\n', 168) = 0x00f07545
[0x4022d1] memchr("    }\n  bufdesc = fd;\n#if define"..., '\n', 145) = 0x00f0754b
[0x4022d1] memchr("  bufdesc = fd;\n#if defined(HAVE"..., '\n', 139) = 0x00f0755b
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 123) = 0x00f0757a
[0x4022d1] memchr("  if (fstat(fd, &bufstat) < 0 ||"..., '\n', 92) = 0x00f075b6
[0x4022d1] memchr("    bufmapped = 0;\n  else\n    {\n"..., '\n', 32) = 0x00f075c9
[0x4022d1] memchr("  else\n    {\n      bufmapped = 1"..., '\n', 13) = 0x00f075d0
[0x4022d1] memchr("    {\n      bufmapped = 1;\n     "..., '\n', 6) = 0x00f075d6
[0x4022d1] memchr("      bufmapped = 1;\n      bufof"..., '\n', 0) = NULL
[0x4023cc] fwrite("258:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      bufmapped = 1;\n      bufof"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      bufoffset = lseek(fd, 0, 1"..., '1', 27128) = 0x00f0760b
[0x40cdf3] memchr("1);\n    }\n#endif\n}\n\n/* Read new "..., '\n', 27097) = 0x00f0760e
[0x4022d1] memchr("      bufoffset = lseek(fd, 0, 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("259:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      bufoffset = lseek(fd, 0, 1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n#endif\n}\n\n/* Read new stuf"..., '1', 27093) = 0x00f0787e
[0x40cdf3] memchr("1);\n      if (!nbuffer)\n\tfatal(""..., '\n', 26470) = 0x00f07881
[0x4022d1] memchr("    }\n#endif\n}\n\n/* Read new stuf"..., '\n', 589) = 0x00f07614
[0x4022d1] memchr("#endif\n}\n\n/* Read new stuff into"..., '\n', 583) = 0x00f0761b
[0x4022d1] memchr("}\n\n/* Read new stuff into the bu"..., '\n', 576) = 0x00f0761d
[0x4022d1] memchr("\n/* Read new stuff into the buff"..., '\n', 574) = 0x00f0761e
[0x4022d1] memchr("/* Read new stuff into the buffe"..., '\n', 573) = 0x00f07656
[0x4022d1] memchr("   amount of old stuff.  When we"..., '\n', 517) = 0x00f07690
[0x4022d1] memchr("   to the beginning of the buffe"..., '\n', 459) = 0x00f076c9
[0x4022d1] memchr("   points just after the end.  R"..., '\n', 402) = 0x00f07706
[0x4022d1] memchr("static int\nfillbuf(save)\n     si"..., '\n', 341) = 0x00f07711
[0x4022d1] memchr("fillbuf(save)\n     size_t save;\n"..., '\n', 330) = 0x00f0771f
[0x4022d1] memchr("     size_t save;\n{\n  char *nbuf"..., '\n', 316) = 0x00f07731
[0x4022d1] memchr("{\n  char *nbuffer, *dp, *sp;\n  i"..., '\n', 298) = 0x00f07733
[0x4022d1] memchr("  char *nbuffer, *dp, *sp;\n  int"..., '\n', 296) = 0x00f0774e
[0x4022d1] memchr("  int cc;\n#if defined(HAVE_WORKI"..., '\n', 269) = 0x00f07758
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 259) = 0x00f07777
[0x4022d1] memchr("  caddr_t maddr;\n#endif\n  static"..., '\n', 228) = 0x00f07788
[0x4022d1] memchr("#endif\n  static int pagesize;\n\n "..., '\n', 211) = 0x00f0778f
[0x4022d1] memchr("  static int pagesize;\n\n  if (pa"..., '\n', 204) = 0x00f077a6
[0x4022d1] memchr("\n  if (pagesize == 0 && (pagesiz"..., '\n', 181) = 0x00f077a7
[0x4022d1] memchr("  if (pagesize == 0 && (pagesize"..., '\n', 180) = 0x00f077df
[0x4022d1] memchr("    abort();\n\n  if (save > bufsa"..., '\n', 124) = 0x00f077ec
[0x4022d1] memchr("\n  if (save > bufsalloc)\n    {\n "..., '\n', 111) = 0x00f077ed
[0x4022d1] memchr("  if (save > bufsalloc)\n    {\n  "..., '\n', 110) = 0x00f07805
[0x4022d1] memchr("    {\n      while (save > bufsal"..., '\n', 86) = 0x00f0780b
[0x4022d1] memchr("      while (save > bufsalloc)\n\t"..., '\n', 80) = 0x00f0782a
[0x4022d1] memchr("\tbufsalloc *= 2;\n      bufalloc "..., '\n', 49) = 0x00f0783b
[0x4022d1] memchr("      bufalloc = 5 * bufsalloc;\n"..., '\n', 32) = 0x00f0785b
[0x4022d1] memchr("      nbuffer = valloc(bufalloc "..., '\n', 0) = NULL
[0x4023cc] fwrite("287:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      nbuffer = valloc(bufalloc "..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (!nbuffer)\n\tfatal("memo"..., '1', 26466) = 0x00f07b3b
[0x40cdf3] memchr("1)\n\t{\n\t  fprintf(stderr, "%s: wa"..., '\n', 25769) = 0x00f07b3d
[0x4022d1] memchr("      if (!nbuffer)\n\tfatal("memo"..., '\n', 667) = 0x00f07895
[0x4022d1] memchr("\tfatal("memory exhausted", 0);\n "..., '\n', 647) = 0x00f078b4
[0x4022d1] memchr("    }\n  else\n    nbuffer = buffe"..., '\n', 616) = 0x00f078ba
[0x4022d1] memchr("  else\n    nbuffer = buffer;\n\n  "..., '\n', 610) = 0x00f078c1
[0x4022d1] memchr("    nbuffer = buffer;\n\n  sp = bu"..., '\n', 603) = 0x00f078d7
[0x4022d1] memchr("\n  sp = buflim - save;\n  dp = nb"..., '\n', 581) = 0x00f078d8
[0x4022d1] memchr("  sp = buflim - save;\n  dp = nbu"..., '\n', 580) = 0x00f078ee
[0x4022d1] memchr("  dp = nbuffer + bufsalloc - sav"..., '\n', 558) = 0x00f07911
[0x4022d1] memchr("  bufbeg = dp;\n  while (save--)\n"..., '\n', 523) = 0x00f07920
[0x4022d1] memchr("  while (save--)\n    *dp++ = *sp"..., '\n', 508) = 0x00f07931
[0x4022d1] memchr("    *dp++ = *sp++;\n\n  /* We may "..., '\n', 491) = 0x00f07944
[0x4022d1] memchr("\n  /* We may have allocated a ne"..., '\n', 472) = 0x00f07945
[0x4022d1] memchr("  /* We may have allocated a new"..., '\n', 471) = 0x00f0797d
[0x4022d1] memchr("     there is no portable vfree("..., '\n', 415) = 0x00f079b7
[0x4022d1] memchr("     about the old one.  Sorry. "..., '\n', 357) = 0x00f079da
[0x4022d1] memchr("  buffer = nbuffer;\n\n#if defined"..., '\n', 322) = 0x00f079ee
[0x4022d1] memchr("\n#if defined(HAVE_WORKING_MMAP)\n"..., '\n', 302) = 0x00f079ef
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 301) = 0x00f07a0e
[0x4022d1] memchr("  if (bufmapped && bufoffset % p"..., '\n', 270) = 0x00f07a3b
[0x4022d1] memchr("      && bufstat.st_size - bufof"..., '\n', 225) = 0x00f07a79
[0x4022d1] memchr("    {\n      maddr = buffer + buf"..., '\n', 163) = 0x00f07a7f
[0x4022d1] memchr("      maddr = buffer + bufsalloc"..., '\n', 157) = 0x00f07aa1
[0x4022d1] memchr("      maddr = mmap(maddr, bufall"..., '\n', 123) = 0x00f07ae9
[0x4022d1] memchr("\t\t   MAP_PRIVATE | MAP_FIXED, bu"..., '\n', 51) = 0x00f07b1c
[0x4022d1] memchr("      if (maddr == (caddr_t) -1)"..., '\n', 0) = NULL
[0x4023cc] fwrite("312:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      if (maddr == (caddr_t) -1)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  fprintf(stderr, "%s: warni"..., '1', 25766) = 0x00f07c16
[0x40cdf3] memchr("1.\n\t In fact, it actually slows "..., '\n', 25550) = 0x00f07c18
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, "%s: warni"..., '\n', 166) = 0x00f07b40
[0x4022d1] memchr("\t  fprintf(stderr, "%s: warning:"..., '\n', 163) = 0x00f07b76
[0x4022d1] memchr("\t\t  strerror(errno));\n\t  goto tr"..., '\n', 109) = 0x00f07b8c
[0x4022d1] memchr("\t  goto tryread;\n\t}\n#if 0\n      "..., '\n', 87) = 0x00f07b9d
[0x4022d1] memchr("\t}\n#if 0\n      /* You might thin"..., '\n', 70) = 0x00f07ba0
[0x4022d1] memchr("#if 0\n      /* You might thing t"..., '\n', 67) = 0x00f07ba6
[0x4022d1] memchr("      /* You might thing this (o"..., '\n', 61) = 0x00f07be3
[0x4022d1] memchr("\t but it doesn't, at least not o"..., '\n', 0) = NULL
[0x4023cc] fwrite("320:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t but it doesn't, at least not o"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t In fact, it actually slows us "..., '1', 25547) = 0x00f0841a
[0x40cdf3] memchr("1, lim - beg, stdout);\n  if (fer"..., '\n', 23498) = 0x00f08430
[0x4022d1] memchr("\t In fact, it actually slows us "..., '\n', 2035) = 0x00f07c4b
[0x4022d1] memchr("      madvise(maddr, bufalloc - "..., '\n', 1984) = 0x00f07c88
[0x4022d1] memchr("#endif\n      cc = bufalloc - buf"..., '\n', 1923) = 0x00f07c8f
[0x4022d1] memchr("      cc = bufalloc - bufsalloc;"..., '\n', 1916) = 0x00f07cb0
[0x4022d1] memchr("      bufoffset += cc;\n    }\n  e"..., '\n', 1883) = 0x00f07cc7
[0x4022d1] memchr("    }\n  else\n    {\n    tryread:\n"..., '\n', 1860) = 0x00f07ccd
[0x4022d1] memchr("  else\n    {\n    tryread:\n      "..., '\n', 1854) = 0x00f07cd4
[0x4022d1] memchr("    {\n    tryread:\n      /* We c"..., '\n', 1847) = 0x00f07cda
[0x4022d1] memchr("    tryread:\n      /* We come he"..., '\n', 1841) = 0x00f07ce7
[0x4022d1] memchr("      /* We come here when we're"..., '\n', 1828) = 0x00f07d2a
[0x4022d1] memchr("\t Note that we need to synchroni"..., '\n', 1761) = 0x00f07d61
[0x4022d1] memchr("\t first time through. */\n      i"..., '\n', 1706) = 0x00f07d7a
[0x4022d1] memchr("      if (bufmapped)\n\t{\n\t  bufma"..., '\n', 1681) = 0x00f07d8f
[0x4022d1] memchr("\t{\n\t  bufmapped = 0;\n\t  lseek(bu"..., '\n', 1660) = 0x00f07d92
[0x4022d1] memchr("\t  bufmapped = 0;\n\t  lseek(bufde"..., '\n', 1657) = 0x00f07da4
[0x4022d1] memchr("\t  lseek(bufdesc, bufoffset, 0);"..., '\n', 1639) = 0x00f07dc5
[0x4022d1] memchr("\t}\n      cc = read(bufdesc, buff"..., '\n', 1606) = 0x00f07dc8
[0x4022d1] memchr("      cc = read(bufdesc, buffer "..., '\n', 1603) = 0x00f07e0c
[0x4022d1] memchr("    }\n#else\n  cc = read(bufdesc,"..., '\n', 1535) = 0x00f07e12
[0x4022d1] memchr("#else\n  cc = read(bufdesc, buffe"..., '\n', 1529) = 0x00f07e18
[0x4022d1] memchr("  cc = read(bufdesc, buffer + bu"..., '\n', 1523) = 0x00f07e58
[0x4022d1] memchr("#endif\n  if (cc > 0)\n    buflim "..., '\n', 1459) = 0x00f07e5f
[0x4022d1] memchr("  if (cc > 0)\n    buflim = buffe"..., '\n', 1452) = 0x00f07e6d
[0x4022d1] memchr("    buflim = buffer + bufsalloc "..., '\n', 1438) = 0x00f07e93
[0x4022d1] memchr("  else\n    buflim = buffer + buf"..., '\n', 1400) = 0x00f07e9a
[0x4022d1] memchr("    buflim = buffer + bufsalloc;"..., '\n', 1393) = 0x00f07ebb
[0x4022d1] memchr("  return cc;\n}\n\n/* Flags control"..., '\n', 1360) = 0x00f07ec8
[0x4022d1] memchr("}\n\n/* Flags controlling the styl"..., '\n', 1347) = 0x00f07eca
[0x4022d1] memchr("\n/* Flags controlling the style "..., '\n', 1345) = 0x00f07ecb
[0x4022d1] memchr("/* Flags controlling the style o"..., '\n', 1344) = 0x00f07ef8
[0x4022d1] memchr("static int out_quiet;\t\t/* Suppre"..., '\n', 1299) = 0x00f07f31
[0x4022d1] memchr("static int out_invert;\t\t/* Print"..., '\n', 1242) = 0x00f07f68
[0x4022d1] memchr("static int out_file;\t\t/* Print f"..., '\n', 1187) = 0x00f07f95
[0x4022d1] memchr("static int out_line;\t\t/* Print l"..., '\n', 1142) = 0x00f07fc5
[0x4022d1] memchr("static int out_byte;\t\t/* Print b"..., '\n', 1094) = 0x00f07ff5
[0x4022d1] memchr("static int out_before;\t\t/* Lines"..., '\n', 1046) = 0x00f0802d
[0x4022d1] memchr("static int out_after;\t\t/* Lines "..., '\n', 990) = 0x00f08065
[0x4022d1] memchr("\n/* Internal variables to keep t"..., '\n', 934) = 0x00f08066
[0x4022d1] memchr("/* Internal variables to keep tr"..., '\n', 933) = 0x00f080aa
[0x4022d1] memchr("static size_t totalcc;\t\t/* Total"..., '\n', 865) = 0x00f080ed
[0x4022d1] memchr("static char *lastnl;\t\t/* Pointer"..., '\n', 798) = 0x00f0812d
[0x4022d1] memchr("static char *lastout;\t\t/* Pointe"..., '\n', 734) = 0x00f0816c
[0x4022d1] memchr("\t\t\t\t   NULL if no character has "..., '\n', 671) = 0x00f08198
[0x4022d1] memchr("\t\t\t\t   or if it's conceptually b"..., '\n', 627) = 0x00f081c9
[0x4022d1] memchr("static size_t totalnl;\t\t/* Total"..., '\n', 578) = 0x00f0820a
[0x4022d1] memchr("static int pending;\t\t/* Pending "..., '\n', 513) = 0x00f0823e
[0x4022d1] memchr("\nstatic void\nnlscan(lim)\n     ch"..., '\n', 461) = 0x00f0823f
[0x4022d1] memchr("static void\nnlscan(lim)\n     cha"..., '\n', 460) = 0x00f0824b
[0x4022d1] memchr("nlscan(lim)\n     char *lim;\n{\n  "..., '\n', 448) = 0x00f08257
[0x4022d1] memchr("     char *lim;\n{\n  char *beg;\n\n"..., '\n', 436) = 0x00f08267
[0x4022d1] memchr("{\n  char *beg;\n\n  for (beg = las"..., '\n', 420) = 0x00f08269
[0x4022d1] memchr("  char *beg;\n\n  for (beg = lastn"..., '\n', 418) = 0x00f08276
[0x4022d1] memchr("\n  for (beg = lastnl; beg < lim;"..., '\n', 405) = 0x00f08277
[0x4022d1] memchr("  for (beg = lastnl; beg < lim; "..., '\n', 404) = 0x00f0829e
[0x4022d1] memchr("    if (*beg == '\\n')\n      ++to"..., '\n', 365) = 0x00f082b4
[0x4022d1] memchr("      ++totalnl;\n  lastnl = beg;"..., '\n', 343) = 0x00f082c5
[0x4022d1] memchr("  lastnl = beg;\n}\n\nstatic void\np"..., '\n', 326) = 0x00f082d5
[0x4022d1] memchr("}\n\nstatic void\nprline(beg, lim, "..., '\n', 310) = 0x00f082d7
[0x4022d1] memchr("\nstatic void\nprline(beg, lim, se"..., '\n', 308) = 0x00f082d8
[0x4022d1] memchr("static void\nprline(beg, lim, sep"..., '\n', 307) = 0x00f082e4
[0x4022d1] memchr("prline(beg, lim, sep)\n     char "..., '\n', 295) = 0x00f082fa
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 273) = 0x00f0830a
[0x4022d1] memchr("     char *lim;\n     char sep;\n{"..., '\n', 257) = 0x00f0831a
[0x4022d1] memchr("     char sep;\n{\n  if (out_file)"..., '\n', 241) = 0x00f08329
[0x4022d1] memchr("{\n  if (out_file)\n    printf("%s"..., '\n', 226) = 0x00f0832b
[0x4022d1] memchr("  if (out_file)\n    printf("%s%c"..., '\n', 224) = 0x00f0833b
[0x4022d1] memchr("    printf("%s%c", filename, sep"..., '\n', 208) = 0x00f0835e
[0x4022d1] memchr("  if (out_line)\n    {\n      nlsc"..., '\n', 173) = 0x00f0836e
[0x4022d1] memchr("    {\n      nlscan(beg);\n      p"..., '\n', 157) = 0x00f08374
[0x4022d1] memchr("      nlscan(beg);\n      printf("..., '\n', 151) = 0x00f08387
[0x4022d1] memchr("      printf("%d%c", ++totalnl, "..., '\n', 132) = 0x00f083ad
[0x4022d1] memchr("      lastnl = lim;\n    }\n  if ("..., '\n', 94) = 0x00f083c1
[0x4022d1] memchr("    }\n  if (out_byte)\n    printf"..., '\n', 74) = 0x00f083c7
[0x4022d1] memchr("  if (out_byte)\n    printf("%lu%"..., '\n', 68) = 0x00f083d7
[0x4022d1] memchr("    printf("%lu%c", totalcc + (b"..., '\n', 52) = 0x00f0840b
[0x4022d1] memchr("  fwrite(beg, 1, lim - beg, stdo"..., '\n', 0) = NULL
[0x4023cc] fwrite("396:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  fwrite(beg, 1, lim - beg, stdo"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (ferror(stdout))\n    error("..., '1', 23475) = 0x00f0882c
[0x40cdf3] memchr("1] != '\\n');\n\n      /* We only p"..., '\n', 22456) = 0x00f08838
[0x4022d1] memchr("  if (ferror(stdout))\n    error("..., '\n', 996) = 0x00f08446
[0x4022d1] memchr("    error("writing output", errn"..., '\n', 974) = 0x00f0846a
[0x4022d1] memchr("  lastout = lim;\n}\n\n/* Print pen"..., '\n', 938) = 0x00f0847b
[0x4022d1] memchr("}\n\n/* Print pending lines of tra"..., '\n', 921) = 0x00f0847d
[0x4022d1] memchr("\n/* Print pending lines of trail"..., '\n', 919) = 0x00f0847e
[0x4022d1] memchr("/* Print pending lines of traili"..., '\n', 918) = 0x00f084ba
[0x4022d1] memchr("static void\nprpending(lim)\n     "..., '\n', 858) = 0x00f084c6
[0x4022d1] memchr("prpending(lim)\n     char *lim;\n{"..., '\n', 846) = 0x00f084d5
[0x4022d1] memchr("     char *lim;\n{\n  char *nl;\n\n "..., '\n', 831) = 0x00f084e5
[0x4022d1] memchr("{\n  char *nl;\n\n  if (!lastout)\n "..., '\n', 815) = 0x00f084e7
[0x4022d1] memchr("  char *nl;\n\n  if (!lastout)\n   "..., '\n', 813) = 0x00f084f3
[0x4022d1] memchr("\n  if (!lastout)\n    lastout = b"..., '\n', 801) = 0x00f084f4
[0x4022d1] memchr("  if (!lastout)\n    lastout = bu"..., '\n', 800) = 0x00f08504
[0x4022d1] memchr("    lastout = bufbeg;\n  while (p"..., '\n', 784) = 0x00f0851a
[0x4022d1] memchr("  while (pending > 0 && lastout "..., '\n', 762) = 0x00f08541
[0x4022d1] memchr("    {\n      --pending;\n      if "..., '\n', 723) = 0x00f08547
[0x4022d1] memchr("      --pending;\n      if ((nl ="..., '\n', 717) = 0x00f08558
[0x4022d1] memchr("      if ((nl = memchr(lastout, "..., '\n', 700) = 0x00f08594
[0x4022d1] memchr("\t++nl;\n      else\n\tnl = lim;\n   "..., '\n', 640) = 0x00f0859b
[0x4022d1] memchr("      else\n\tnl = lim;\n      prli"..., '\n', 633) = 0x00f085a6
[0x4022d1] memchr("\tnl = lim;\n      prline(lastout,"..., '\n', 622) = 0x00f085b1
[0x4022d1] memchr("      prline(lastout, nl, '-');\n"..., '\n', 611) = 0x00f085d1
[0x4022d1] memchr("    }\n}\n\n/* Print the lines betw"..., '\n', 579) = 0x00f085d7
[0x4022d1] memchr("}\n\n/* Print the lines between BE"..., '\n', 573) = 0x00f085d9
[0x4022d1] memchr("\n/* Print the lines between BEG "..., '\n', 571) = 0x00f085da
[0x4022d1] memchr("/* Print the lines between BEG a"..., '\n', 570) = 0x00f0861b
[0x4022d1] memchr("   If NLINESP is non-null, store"..., '\n', 505) = 0x00f08665
[0x4022d1] memchr("static void\nprtext(beg, lim, nli"..., '\n', 431) = 0x00f08671
[0x4022d1] memchr("prtext(beg, lim, nlinesp)\n     c"..., '\n', 419) = 0x00f0868b
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 393) = 0x00f0869b
[0x4022d1] memchr("     char *lim;\n     int *nlines"..., '\n', 377) = 0x00f086ab
[0x4022d1] memchr("     int *nlinesp;\n{\n  static in"..., '\n', 361) = 0x00f086be
[0x4022d1] memchr("{\n  static int used;\t\t/* avoid p"..., '\n', 342) = 0x00f086c0
[0x4022d1] memchr("  static int used;\t\t/* avoid pri"..., '\n', 340) = 0x00f08700
[0x4022d1] memchr("  char *bp, *p, *nl;\n  int i, n;"..., '\n', 276) = 0x00f08715
[0x4022d1] memchr("  int i, n;\n\n  if (!out_quiet &&"..., '\n', 255) = 0x00f08721
[0x4022d1] memchr("\n  if (!out_quiet && pending > 0"..., '\n', 243) = 0x00f08722
[0x4022d1] memchr("  if (!out_quiet && pending > 0)"..., '\n', 242) = 0x00f08743
[0x4022d1] memchr("    prpending(beg);\n\n  p = beg;\n"..., '\n', 209) = 0x00f08757
[0x4022d1] memchr("\n  p = beg;\n\n  if (!out_quiet)\n "..., '\n', 189) = 0x00f08758
[0x4022d1] memchr("  p = beg;\n\n  if (!out_quiet)\n  "..., '\n', 188) = 0x00f08763
[0x4022d1] memchr("\n  if (!out_quiet)\n    {\n      /"..., '\n', 177) = 0x00f08764
[0x4022d1] memchr("  if (!out_quiet)\n    {\n      /*"..., '\n', 176) = 0x00f08776
[0x4022d1] memchr("    {\n      /* Deal with leading"..., '\n', 158) = 0x00f0877c
[0x4022d1] memchr("      /* Deal with leading conte"..., '\n', 152) = 0x00f087a8
[0x4022d1] memchr("\n      bp = lastout ? lastout : "..., '\n', 108) = 0x00f087a9
[0x4022d1] memchr("      bp = lastout ? lastout : b"..., '\n', 107) = 0x00f087d0
[0x4022d1] memchr("      for (i = 0; i < out_before"..., '\n', 68) = 0x00f087f7
[0x4022d1] memchr("\tif (p > bp)\n\t  do\n\t    --p;\n\t  "..., '\n', 29) = 0x00f08804
[0x4022d1] memchr("\t  do\n\t    --p;\n\t  while (p > bp"..., '\n', 16) = 0x00f0880a
[0x4022d1] memchr("\t    --p;\n\t  while (p > bp && p["..., '\n', 10) = 0x00f08814
[0x4022d1] memchr("\t  while (p > bp && p[-1] != '\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("448:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  while (p > bp && p[-1] != '\\n"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      /* We only print the "--""..., '1', 22443) = 0x00f08942
[0x40cdf3] memchr("1, '-');\n\t  p = nl + 1;\n\t}\n    }"..., '\n', 22178) = 0x00f0894a
[0x4022d1] memchr("\n      /* We only print the "--""..., '\n', 247) = 0x00f08839
[0x4022d1] memchr("      /* We only print the "--" "..., '\n', 246) = 0x00f08874
[0x4022d1] memchr("\t discontiguous from the last ou"..., '\n', 187) = 0x00f088a9
[0x4022d1] memchr("      if ((out_before || out_aft"..., '\n', 134) = 0x00f088e6
[0x4022d1] memchr("\tputs("--");\n\n      while (p < b"..., '\n', 73) = 0x00f088f3
[0x4022d1] memchr("\n      while (p < beg)\n\t{\n\t  nl "..., '\n', 60) = 0x00f088f4
[0x4022d1] memchr("      while (p < beg)\n\t{\n\t  nl ="..., '\n', 59) = 0x00f0890a
[0x4022d1] memchr("\t{\n\t  nl = memchr(p, '\\n', beg -"..., '\n', 37) = 0x00f0890d
[0x4022d1] memchr("\t  nl = memchr(p, '\\n', beg - p)"..., '\n', 34) = 0x00f0892f
[0x4022d1] memchr("\t  prline(p, nl + 1, '-');\n\t  p "..., '\n', 0) = NULL
[0x4023cc] fwrite("458:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  prline(p, nl + 1, '-');\n\t  p "..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  p = nl + 1;\n\t}\n    }\n\n  if (n"..., '1', 22169) = 0x00f08957
[0x40cdf3] memchr("1;\n\t}\n    }\n\n  if (nlinesp)\n    "..., '\n', 22157) = 0x00f08959
[0x4022d1] memchr("\t  p = nl + 1;\n\t}\n    }\n\n  if (n"..., '\n', 0) = NULL
[0x4023cc] fwrite("459:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  p = nl + 1;\n\t}\n    }\n\n  if (n"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n    }\n\n  if (nlinesp)\n    {\n "..., '1', 22154) = 0x00f08abf
[0x40cdf3] memchr("1;\n}\n\n/* Scan the specified port"..., '\n', 21797) = 0x00f08ac1
[0x4022d1] memchr("\t}\n    }\n\n  if (nlinesp)\n    {\n "..., '\n', 348) = 0x00f0895c
[0x4022d1] memchr("    }\n\n  if (nlinesp)\n    {\n    "..., '\n', 345) = 0x00f08962
[0x4022d1] memchr("\n  if (nlinesp)\n    {\n      /* C"..., '\n', 339) = 0x00f08963
[0x4022d1] memchr("  if (nlinesp)\n    {\n      /* Ca"..., '\n', 338) = 0x00f08972
[0x4022d1] memchr("    {\n      /* Caller wants a li"..., '\n', 323) = 0x00f08978
[0x4022d1] memchr("      /* Caller wants a line cou"..., '\n', 317) = 0x00f0899f
[0x4022d1] memchr("      for (n = 0; p < lim; ++n)\n"..., '\n', 278) = 0x00f089bf
[0x4022d1] memchr("\t{\n\t  if ((nl = memchr(p, '\\n', "..., '\n', 246) = 0x00f089c2
[0x4022d1] memchr("\t  if ((nl = memchr(p, '\\n', lim"..., '\n', 243) = 0x00f089ef
[0x4022d1] memchr("\t    ++nl;\n\t  else\n\t    nl = lim"..., '\n', 198) = 0x00f089fa
[0x4022d1] memchr("\t  else\n\t    nl = lim;\n\t  if (!o"..., '\n', 187) = 0x00f08a02
[0x4022d1] memchr("\t    nl = lim;\n\t  if (!out_quiet"..., '\n', 179) = 0x00f08a11
[0x4022d1] memchr("\t  if (!out_quiet)\n\t    prline(p"..., '\n', 164) = 0x00f08a24
[0x4022d1] memchr("\t    prline(p, nl, ':');\n\t  p = "..., '\n', 145) = 0x00f08a3d
[0x4022d1] memchr("\t  p = nl;\n\t}\n      *nlinesp = n"..., '\n', 120) = 0x00f08a48
[0x4022d1] memchr("\t}\n      *nlinesp = n;\n    }\n  e"..., '\n', 109) = 0x00f08a4b
[0x4022d1] memchr("      *nlinesp = n;\n    }\n  else"..., '\n', 106) = 0x00f08a5f
[0x4022d1] memchr("    }\n  else\n    if (!out_quiet)"..., '\n', 86) = 0x00f08a65
[0x4022d1] memchr("  else\n    if (!out_quiet)\n     "..., '\n', 80) = 0x00f08a6c
[0x4022d1] memchr("    if (!out_quiet)\n      prline"..., '\n', 73) = 0x00f08a80
[0x4022d1] memchr("      prline(beg, lim, ':');\n\n  "..., '\n', 53) = 0x00f08a9d
[0x4022d1] memchr("\n  pending = out_after;\n  used ="..., '\n', 24) = 0x00f08a9e
[0x4022d1] memchr("  pending = out_after;\n  used = "..., '\n', 23) = 0x00f08ab5
[0x4022d1] memchr("  used = 1;\n}\n\n/* Scan the speci"..., '\n', 0) = NULL
[0x4023cc] fwrite("483:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  used = 1;\n}\n\n/* Scan the speci"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n/* Scan the specified portion"..., '1', 21794) = 0x00f08c92
[0x40cdf3] memchr("1] == '\\n') || b == beg))\n\tbreak"..., '\n', 21330) = 0x00f08cab
[0x4022d1] memchr("}\n\n/* Scan the specified portion"..., '\n', 426) = 0x00f08ac3
[0x4022d1] memchr("\n/* Scan the specified portion o"..., '\n', 424) = 0x00f08ac4
[0x4022d1] memchr("/* Scan the specified portion of"..., '\n', 423) = 0x00f08b04
[0x4022d1] memchr("   between matching lines if OUT"..., '\n', 359) = 0x00f08b49
[0x4022d1] memchr("   lines printed. */\nstatic int\n"..., '\n', 290) = 0x00f08b5e
[0x4022d1] memchr("static int\ngrepbuf(beg, lim)\n   "..., '\n', 269) = 0x00f08b69
[0x4022d1] memchr("grepbuf(beg, lim)\n     char *beg"..., '\n', 258) = 0x00f08b7b
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 240) = 0x00f08b8b
[0x4022d1] memchr("     char *lim;\n{\n  int nlines, "..., '\n', 224) = 0x00f08b9b
[0x4022d1] memchr("{\n  int nlines, n;\n  register ch"..., '\n', 208) = 0x00f08b9d
[0x4022d1] memchr("  int nlines, n;\n  register char"..., '\n', 206) = 0x00f08bae
[0x4022d1] memchr("  register char *p, *b;\n  char *"..., '\n', 189) = 0x00f08bc6
[0x4022d1] memchr("  char *endp;\n\n  nlines = 0;\n  p"..., '\n', 165) = 0x00f08bd4
[0x4022d1] memchr("\n  nlines = 0;\n  p = beg;\n  whil"..., '\n', 151) = 0x00f08bd5
[0x4022d1] memchr("  nlines = 0;\n  p = beg;\n  while"..., '\n', 150) = 0x00f08be3
[0x4022d1] memchr("  p = beg;\n  while ((b = (*execu"..., '\n', 136) = 0x00f08bee
[0x4022d1] memchr("  while ((b = (*execute)(p, lim "..., '\n', 125) = 0x00f08c21
[0x4022d1] memchr("    {\n      /* Avoid matching th"..., '\n', 74) = 0x00f08c27
[0x4022d1] memchr("      /* Avoid matching the empt"..., '\n', 68) = 0x00f08c6b
[0x4022d1] memchr("      if (b == lim && ((b > beg "..., '\n', 0) = NULL
[0x4023cc] fwrite("503:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      if (b == lim && ((b > beg "..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      if (!out_invert)\n\t"..., '1', 21304) = 0x00f08cfa
[0x40cdf3] memchr("1;\n\t}\n      else if (p < b)\n\t{\n\t"..., '\n', 21226) = 0x00f08cfc
[0x4022d1] memchr("\tbreak;\n      if (!out_invert)\n\t"..., '\n', 65) = 0x00f08cb3
[0x4022d1] memchr("      if (!out_invert)\n\t{\n\t  prt"..., '\n', 57) = 0x00f08cca
[0x4022d1] memchr("\t{\n\t  prtext(b, endp, (int *) 0)"..., '\n', 34) = 0x00f08ccd
[0x4022d1] memchr("\t  prtext(b, endp, (int *) 0);\n\t"..., '\n', 31) = 0x00f08cec
[0x4022d1] memchr("\t  nlines += 1;\n\t}\n      else if"..., '\n', 0) = NULL
[0x4023cc] fwrite("508:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  nlines += 1;\n\t}\n      else if"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n      else if (p < b)\n\t{\n\t  p"..., '1', 21223) = 0x00f08fec
[0x40cdf3] memchr("1] != '\\n'; --lim)\n\t;\n      resi"..., '\n', 20472) = 0x00f08ffe
[0x4022d1] memchr("\t}\n      else if (p < b)\n\t{\n\t  p"..., '\n', 708) = 0x00f08cff
[0x4022d1] memchr("      else if (p < b)\n\t{\n\t  prte"..., '\n', 705) = 0x00f08d15
[0x4022d1] memchr("\t{\n\t  prtext(p, b, &n);\n\t  nline"..., '\n', 683) = 0x00f08d18
[0x4022d1] memchr("\t  prtext(p, b, &n);\n\t  nlines +"..., '\n', 680) = 0x00f08d2d
[0x4022d1] memchr("\t  nlines += n;\n\t}\n      p = end"..., '\n', 659) = 0x00f08d3d
[0x4022d1] memchr("\t}\n      p = endp;\n    }\n  if (o"..., '\n', 643) = 0x00f08d40
[0x4022d1] memchr("      p = endp;\n    }\n  if (out_"..., '\n', 640) = 0x00f08d50
[0x4022d1] memchr("    }\n  if (out_invert && p < li"..., '\n', 624) = 0x00f08d56
[0x4022d1] memchr("  if (out_invert && p < lim)\n   "..., '\n', 618) = 0x00f08d73
[0x4022d1] memchr("    {\n      prtext(p, lim, &n);\n"..., '\n', 589) = 0x00f08d79
[0x4022d1] memchr("      prtext(p, lim, &n);\n      "..., '\n', 583) = 0x00f08d93
[0x4022d1] memchr("      nlines += n;\n    }\n  retur"..., '\n', 557) = 0x00f08da6
[0x4022d1] memchr("    }\n  return nlines;\n}\n\n/* Sea"..., '\n', 538) = 0x00f08dac
[0x4022d1] memchr("  return nlines;\n}\n\n/* Search a "..., '\n', 532) = 0x00f08dbd
[0x4022d1] memchr("}\n\n/* Search a given file.  Retu"..., '\n', 515) = 0x00f08dbf
[0x4022d1] memchr("\n/* Search a given file.  Return"..., '\n', 513) = 0x00f08dc0
[0x4022d1] memchr("/* Search a given file.  Return "..., '\n', 512) = 0x00f08dfd
[0x4022d1] memchr("static int\ngrep(fd)\n     int fd;"..., '\n', 451) = 0x00f08e08
[0x4022d1] memchr("grep(fd)\n     int fd;\n{\n  int nl"..., '\n', 440) = 0x00f08e11
[0x4022d1] memchr("     int fd;\n{\n  int nlines, i;\n"..., '\n', 431) = 0x00f08e1e
[0x4022d1] memchr("{\n  int nlines, i;\n  size_t resi"..., '\n', 418) = 0x00f08e20
[0x4022d1] memchr("  int nlines, i;\n  size_t residu"..., '\n', 416) = 0x00f08e31
[0x4022d1] memchr("  size_t residue, save;\n  char *"..., '\n', 399) = 0x00f08e49
[0x4022d1] memchr("  char *beg, *lim;\n\n  reset(fd);"..., '\n', 375) = 0x00f08e5c
[0x4022d1] memchr("\n  reset(fd);\n\n  totalcc = 0;\n  "..., '\n', 356) = 0x00f08e5d
[0x4022d1] memchr("  reset(fd);\n\n  totalcc = 0;\n  l"..., '\n', 355) = 0x00f08e6a
[0x4022d1] memchr("\n  totalcc = 0;\n  lastout = 0;\n "..., '\n', 342) = 0x00f08e6b
[0x4022d1] memchr("  totalcc = 0;\n  lastout = 0;\n  "..., '\n', 341) = 0x00f08e7a
[0x4022d1] memchr("  lastout = 0;\n  totalnl = 0;\n  "..., '\n', 326) = 0x00f08e89
[0x4022d1] memchr("  totalnl = 0;\n  pending = 0;\n\n "..., '\n', 311) = 0x00f08e98
[0x4022d1] memchr("  pending = 0;\n\n  nlines = 0;\n  "..., '\n', 296) = 0x00f08ea7
[0x4022d1] memchr("\n  nlines = 0;\n  residue = 0;\n  "..., '\n', 281) = 0x00f08ea8
[0x4022d1] memchr("  nlines = 0;\n  residue = 0;\n  s"..., '\n', 280) = 0x00f08eb6
[0x4022d1] memchr("  residue = 0;\n  save = 0;\n\n  fo"..., '\n', 266) = 0x00f08ec5
[0x4022d1] memchr("  save = 0;\n\n  for (;;)\n    {\n  "..., '\n', 251) = 0x00f08ed1
[0x4022d1] memchr("\n  for (;;)\n    {\n      if (fill"..., '\n', 239) = 0x00f08ed2
[0x4022d1] memchr("  for (;;)\n    {\n      if (fillb"..., '\n', 238) = 0x00f08edd
[0x4022d1] memchr("    {\n      if (fillbuf(save) < "..., '\n', 227) = 0x00f08ee3
[0x4022d1] memchr("      if (fillbuf(save) < 0)\n\t{\n"..., '\n', 221) = 0x00f08f00
[0x4022d1] memchr("\t{\n\t  error(filename, errno);\n\t "..., '\n', 192) = 0x00f08f03
[0x4022d1] memchr("\t  error(filename, errno);\n\t  re"..., '\n', 189) = 0x00f08f1e
[0x4022d1] memchr("\t  return nlines;\n\t}\n      lastn"..., '\n', 162) = 0x00f08f30
[0x4022d1] memchr("\t}\n      lastnl = bufbeg;\n      "..., '\n', 144) = 0x00f08f33
[0x4022d1] memchr("      lastnl = bufbeg;\n      if "..., '\n', 141) = 0x00f08f4a
[0x4022d1] memchr("      if (lastout)\n\tlastout = bu"..., '\n', 118) = 0x00f08f5d
[0x4022d1] memchr("\tlastout = bufbeg;\n      if (buf"..., '\n', 99) = 0x00f08f70
[0x4022d1] memchr("      if (buflim - bufbeg == sav"..., '\n', 80) = 0x00f08f93
[0x4022d1] memchr("\tbreak;\n      beg = bufbeg + sav"..., '\n', 45) = 0x00f08f9b
[0x4022d1] memchr("      beg = bufbeg + save - resi"..., '\n', 37) = 0x00f08fc0
[0x4022d1] memchr("      for (lim = buflim; lim > b"..., '\n', 0) = NULL
[0x4023cc] fwrite("558:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      for (lim = buflim; lim > b"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t;\n      residue = buflim - lim;"..., '1', 20453) = 0x00f09119
[0x40cdf3] memchr("1] != '\\n');\n\t}\n      if (beg !="..., '\n', 20171) = 0x00f09125
[0x4022d1] memchr("\t;\n      residue = buflim - lim;"..., '\n', 251) = 0x00f09001
[0x4022d1] memchr("      residue = buflim - lim;\n  "..., '\n', 248) = 0x00f0901f
[0x4022d1] memchr("      if (beg < lim)\n\t{\n\t  nline"..., '\n', 218) = 0x00f09034
[0x4022d1] memchr("\t{\n\t  nlines += grepbuf(beg, lim"..., '\n', 197) = 0x00f09037
[0x4022d1] memchr("\t  nlines += grepbuf(beg, lim);\n"..., '\n', 194) = 0x00f09057
[0x4022d1] memchr("\t  if (pending)\n\t    prpending(l"..., '\n', 162) = 0x00f09067
[0x4022d1] memchr("\t    prpending(lim);\n\t}\n      i "..., '\n', 146) = 0x00f0907c
[0x4022d1] memchr("\t}\n      i = 0;\n      beg = lim;"..., '\n', 125) = 0x00f0907f
[0x4022d1] memchr("      i = 0;\n      beg = lim;\n  "..., '\n', 122) = 0x00f0908c
[0x4022d1] memchr("      beg = lim;\n      while (i "..., '\n', 109) = 0x00f0909d
[0x4022d1] memchr("      while (i < out_before && b"..., '\n', 92) = 0x00f090dc
[0x4022d1] memchr("\t{\n\t  ++i;\n\t  do\n\t    --beg;\n\t  "..., '\n', 29) = 0x00f090df
[0x4022d1] memchr("\t  ++i;\n\t  do\n\t    --beg;\n\t  whi"..., '\n', 26) = 0x00f090e7
[0x4022d1] memchr("\t  do\n\t    --beg;\n\t  while (beg "..., '\n', 18) = 0x00f090ed
[0x4022d1] memchr("\t    --beg;\n\t  while (beg > bufb"..., '\n', 12) = 0x00f090f9
[0x4022d1] memchr("\t  while (beg > bufbeg && beg[-1"..., '\n', 0) = NULL
[0x4023cc] fwrite("574:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  while (beg > bufbeg && beg[-1"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n      if (beg != lastout)\n\tla"..., '1', 20158) = 0x00f093b1
[0x40cdf3] memchr("1.  */\nint\nsetmatcher(name)\n    "..., '\n', 19507) = 0x00f093b7
[0x4022d1] memchr("\t}\n      if (beg != lastout)\n\tla"..., '\n', 587) = 0x00f09128
[0x4022d1] memchr("      if (beg != lastout)\n\tlasto"..., '\n', 584) = 0x00f09142
[0x4022d1] memchr("\tlastout = 0;\n      save = resid"..., '\n', 558) = 0x00f09150
[0x4022d1] memchr("      save = residue + lim - beg"..., '\n', 544) = 0x00f09172
[0x4022d1] memchr("      totalcc += buflim - bufbeg"..., '\n', 510) = 0x00f0919b
[0x4022d1] memchr("      if (out_line)\n\tnlscan(beg)"..., '\n', 469) = 0x00f091af
[0x4022d1] memchr("\tnlscan(beg);\n    }\n  if (residu"..., '\n', 449) = 0x00f091bd
[0x4022d1] memchr("    }\n  if (residue)\n    {\n     "..., '\n', 435) = 0x00f091c3
[0x4022d1] memchr("  if (residue)\n    {\n      nline"..., '\n', 429) = 0x00f091d2
[0x4022d1] memchr("    {\n      nlines += grepbuf(bu"..., '\n', 414) = 0x00f091d8
[0x4022d1] memchr("      nlines += grepbuf(bufbeg +"..., '\n', 408) = 0x00f09212
[0x4022d1] memchr("      if (pending)\n\tprpending(bu"..., '\n', 350) = 0x00f09225
[0x4022d1] memchr("\tprpending(buflim);\n    }\n  retu"..., '\n', 331) = 0x00f09239
[0x4022d1] memchr("    }\n  return nlines;\n}\n\nstatic"..., '\n', 311) = 0x00f0923f
[0x4022d1] memchr("  return nlines;\n}\n\nstatic char "..., '\n', 305) = 0x00f09250
[0x4022d1] memchr("}\n\nstatic char version[] = "GNU "..., '\n', 288) = 0x00f09252
[0x4022d1] memchr("\nstatic char version[] = "GNU gr"..., '\n', 286) = 0x00f09253
[0x4022d1] memchr("static char version[] = "GNU gre"..., '\n', 285) = 0x00f09283
[0x4022d1] memchr("\n#define USAGE \\\n  "usage: %s [-"..., '\n', 237) = 0x00f09284
[0x4022d1] memchr("#define USAGE \\\n  "usage: %s [-["..., '\n', 236) = 0x00f09294
[0x4022d1] memchr("  "usage: %s [-[[AB] ]<num>] [-["..., '\n', 220) = 0x00f092e5
[0x4022d1] memchr("\nstatic void\nusage()\n{\n  fprintf"..., '\n', 139) = 0x00f092e6
[0x4022d1] memchr("static void\nusage()\n{\n  fprintf("..., '\n', 138) = 0x00f092f2
[0x4022d1] memchr("usage()\n{\n  fprintf(stderr, USAG"..., '\n', 126) = 0x00f092fa
[0x4022d1] memchr("{\n  fprintf(stderr, USAGE, prog)"..., '\n', 118) = 0x00f092fc
[0x4022d1] memchr("  fprintf(stderr, USAGE, prog);\n"..., '\n', 116) = 0x00f0931c
[0x4022d1] memchr("  exit(2);\n}\n\n/* Go through the "..., '\n', 84) = 0x00f09327
[0x4022d1] memchr("}\n\n/* Go through the matchers ve"..., '\n', 73) = 0x00f09329
[0x4022d1] memchr("\n/* Go through the matchers vect"..., '\n', 71) = 0x00f0932a
[0x4022d1] memchr("/* Go through the matchers vecto"..., '\n', 70) = 0x00f09370
[0x4022d1] memchr("   If we find it, install it in "..., '\n', 0) = NULL
[0x4023cc] fwrite("605:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("   If we find it, install it in "..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("int\nsetmatcher(name)\n     char *"..., '1', 19500) = 0x00f0948c
[0x40cdf3] memchr("1;\n      }\n  return 0;\n}  \n\nint\n"..., '\n', 19288) = 0x00f0948e
[0x4022d1] memchr("int\nsetmatcher(name)\n     char *"..., '\n', 204) = 0x00f093bb
[0x4022d1] memchr("setmatcher(name)\n     char *name"..., '\n', 200) = 0x00f093cc
[0x4022d1] memchr("     char *name;\n{\n  int i;\n\n  f"..., '\n', 183) = 0x00f093dd
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; matche"..., '\n', 166) = 0x00f093df
[0x4022d1] memchr("  int i;\n\n  for (i = 0; matchers"..., '\n', 164) = 0x00f093e8
[0x4022d1] memchr("\n  for (i = 0; matchers[i].name;"..., '\n', 155) = 0x00f093e9
[0x4022d1] memchr("  for (i = 0; matchers[i].name; "..., '\n', 154) = 0x00f0940e
[0x4022d1] memchr("    if (strcmp(name, matchers[i]"..., '\n', 117) = 0x00f0943b
[0x4022d1] memchr("      {\n\tcompile = matchers[i].c"..., '\n', 72) = 0x00f09443
[0x4022d1] memchr("\tcompile = matchers[i].compile;\n"..., '\n', 64) = 0x00f09463
[0x4022d1] memchr("\texecute = matchers[i].execute;\n"..., '\n', 32) = 0x00f09483
[0x4022d1] memchr("\treturn 1;\n      }\n  return 0;\n}"..., '\n', 0) = NULL
[0x4023cc] fwrite("617:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\treturn 1;\n      }\n  return 0;\n}"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      }\n  return 0;\n}  \n\nint\nmai"..., '1', 19285) = 0x00f0960b
[0x40cdf3] memchr("1;\n\n  keys = NULL;\n  keycc = 0;\n"..., '\n', 18905) = 0x00f0960d
[0x4022d1] memchr("      }\n  return 0;\n}  \n\nint\nmai"..., '\n', 348) = 0x00f09496
[0x4022d1] memchr("  return 0;\n}  \n\nint\nmain(argc, "..., '\n', 340) = 0x00f094a2
[0x4022d1] memchr("}  \n\nint\nmain(argc, argv)\n     i"..., '\n', 328) = 0x00f094a6
[0x4022d1] memchr("\nint\nmain(argc, argv)\n     int a"..., '\n', 324) = 0x00f094a7
[0x4022d1] memchr("int\nmain(argc, argv)\n     int ar"..., '\n', 323) = 0x00f094ab
[0x4022d1] memchr("main(argc, argv)\n     int argc;\n"..., '\n', 319) = 0x00f094bc
[0x4022d1] memchr("     int argc;\n     char *argv[]"..., '\n', 302) = 0x00f094cb
[0x4022d1] memchr("     char *argv[];\n{\n  char *key"..., '\n', 287) = 0x00f094de
[0x4022d1] memchr("{\n  char *keys;\n  size_t keycc, "..., '\n', 268) = 0x00f094e0
[0x4022d1] memchr("  char *keys;\n  size_t keycc, ol"..., '\n', 266) = 0x00f094ee
[0x4022d1] memchr("  size_t keycc, oldcc, keyalloc;"..., '\n', 252) = 0x00f0950f
[0x4022d1] memchr("  int keyfound, count_matches, n"..., '\n', 219) = 0x00f09559
[0x4022d1] memchr("  int opt, cc, desc, count, stat"..., '\n', 145) = 0x00f0957d
[0x4022d1] memchr("  FILE *fp;\n  extern char *optar"..., '\n', 109) = 0x00f09589
[0x4022d1] memchr("  extern char *optarg;\n  extern "..., '\n', 97) = 0x00f095a0
[0x4022d1] memchr("  extern int optind;\n\n  prog = a"..., '\n', 74) = 0x00f095b5
[0x4022d1] memchr("\n  prog = argv[0];\n  if (prog &&"..., '\n', 53) = 0x00f095b6
[0x4022d1] memchr("  prog = argv[0];\n  if (prog && "..., '\n', 52) = 0x00f095c8
[0x4022d1] memchr("  if (prog && strrchr(prog, '/')"..., '\n', 34) = 0x00f095ea
[0x4022d1] memchr("    prog = strrchr(prog, '/') + "..., '\n', 0) = NULL
[0x4023cc] fwrite("637:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("    prog = strrchr(prog, '/') + "..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  keys = NULL;\n  keycc = 0;\n  k"..., '1', 18902) = 0x00f096c5
[0x40cdf3] memchr("123456789A:B:CEFGVX:bce:f:hiLlnq"..., '\n', 18719) = 0x00f096ed
[0x4022d1] memchr("\n  keys = NULL;\n  keycc = 0;\n  k"..., '\n', 146) = 0x00f0960e
[0x4022d1] memchr("  keys = NULL;\n  keycc = 0;\n  ke"..., '\n', 145) = 0x00f0961d
[0x4022d1] memchr("  keycc = 0;\n  keyfound = 0;\n  c"..., '\n', 130) = 0x00f0962a
[0x4022d1] memchr("  keyfound = 0;\n  count_matches "..., '\n', 117) = 0x00f0963a
[0x4022d1] memchr("  count_matches = 0;\n  no_filena"..., '\n', 101) = 0x00f0964f
[0x4022d1] memchr("  no_filenames = 0;\n  list_files"..., '\n', 80) = 0x00f09663
[0x4022d1] memchr("  list_files = 0;\n  suppress_err"..., '\n', 60) = 0x00f09675
[0x4022d1] memchr("  suppress_errors = 0;\n  matcher"..., '\n', 42) = 0x00f0968c
[0x4022d1] memchr("  matcher = NULL;\n\n  while ((opt"..., '\n', 19) = 0x00f0969e
[0x4022d1] memchr("\n  while ((opt = getopt(argc, ar"..., '\n', 1) = 0x00f0969f
[0x4022d1] memchr("  while ((opt = getopt(argc, arg"..., '\n', 0) = NULL
[0x4023cc] fwrite("648:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  while ((opt = getopt(argc, arg"..., 1, 78, 0x7fce6d444260) = 78
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t != EOF)\n    switch (opt)\n     "..., '1', 18678) = 0x00f0972d
[0x40cdf3] memchr("1':\n      case '2':\n      case '"..., '\n', 18615) = 0x00f09730
[0x4022d1] memchr("\t != EOF)\n    switch (opt)\n     "..., '\n', 51) = 0x00f096f7
[0x4022d1] memchr("    switch (opt)\n      {\n      c"..., '\n', 41) = 0x00f09708
[0x4022d1] memchr("      {\n      case '0':\n      ca"..., '\n', 24) = 0x00f09710
[0x4022d1] memchr("      case '0':\n      case '1':\n"..., '\n', 16) = 0x00f09720
[0x4022d1] memchr("      case '1':\n      case '2':\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("653:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      case '1':\n      case '2':\n"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      case '2':\n      case '3':\n"..., '1', 18611) = 0x00f097bf
[0x40cdf3] memchr("10 * out_before + opt - '0';\n\tou"..., '\n', 18469) = 0x00f097db
[0x4022d1] memchr("      case '2':\n      case '3':\n"..., '\n', 128) = 0x00f09740
[0x4022d1] memchr("      case '3':\n      case '4':\n"..., '\n', 112) = 0x00f09750
[0x4022d1] memchr("      case '4':\n      case '5':\n"..., '\n', 96) = 0x00f09760
[0x4022d1] memchr("      case '5':\n      case '6':\n"..., '\n', 80) = 0x00f09770
[0x4022d1] memchr("      case '6':\n      case '7':\n"..., '\n', 64) = 0x00f09780
[0x4022d1] memchr("      case '7':\n      case '8':\n"..., '\n', 48) = 0x00f09790
[0x4022d1] memchr("      case '8':\n      case '9':\n"..., '\n', 32) = 0x00f097a0
[0x4022d1] memchr("      case '9':\n\tout_before = 10"..., '\n', 16) = 0x00f097b0
[0x4022d1] memchr("\tout_before = 10 * out_before + "..., '\n', 0) = NULL
[0x4023cc] fwrite("662:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_before = 10 * out_before + "..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tout_after = 10 * out_after + op"..., '1', 18440) = 0x00f097e9
[0x40cdf3] memchr("10 * out_after + opt - '0';\n\tbre"..., '\n', 18427) = 0x00f09804
[0x4022d1] memchr("\tout_after = 10 * out_after + op"..., '\n', 0) = NULL
[0x4023cc] fwrite("663:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_after = 10 * out_after + op"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'A':\n\tout_aft"..., '1', 18399) = 0x00f09b68
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'c':\n\tout_"..., '\n', 17532) = 0x00f09b6a
[0x4022d1] memchr("\tbreak;\n      case 'A':\n\tout_aft"..., '\n', 855) = 0x00f0980c
[0x4022d1] memchr("      case 'A':\n\tout_after = ato"..., '\n', 847) = 0x00f0981c
[0x4022d1] memchr("\tout_after = atoi(optarg);\n\tif ("..., '\n', 831) = 0x00f09837
[0x4022d1] memchr("\tif (out_after < 0)\n\t  usage();\n"..., '\n', 804) = 0x00f0984b
[0x4022d1] memchr("\t  usage();\n\tbreak;\n      case '"..., '\n', 784) = 0x00f09857
[0x4022d1] memchr("\tbreak;\n      case 'B':\n\tout_bef"..., '\n', 772) = 0x00f0985f
[0x4022d1] memchr("      case 'B':\n\tout_before = at"..., '\n', 764) = 0x00f0986f
[0x4022d1] memchr("\tout_before = atoi(optarg);\n\tif "..., '\n', 748) = 0x00f0988b
[0x4022d1] memchr("\tif (out_before < 0)\n\t  usage();"..., '\n', 720) = 0x00f098a0
[0x4022d1] memchr("\t  usage();\n\tbreak;\n      case '"..., '\n', 699) = 0x00f098ac
[0x4022d1] memchr("\tbreak;\n      case 'C':\n\tout_bef"..., '\n', 687) = 0x00f098b4
[0x4022d1] memchr("      case 'C':\n\tout_before = ou"..., '\n', 679) = 0x00f098c4
[0x4022d1] memchr("\tout_before = out_after = 2;\n\tbr"..., '\n', 663) = 0x00f098e1
[0x4022d1] memchr("\tbreak;\n      case 'E':\n\tif (mat"..., '\n', 634) = 0x00f098e9
[0x4022d1] memchr("      case 'E':\n\tif (matcher && "..., '\n', 626) = 0x00f098f9
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 610) = 0x00f09928
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 563) = 0x00f09962
[0x4022d1] memchr("\tmatcher = "posix-egrep";\n\tbreak"..., '\n', 505) = 0x00f0997c
[0x4022d1] memchr("\tbreak;\n      case 'F':\n\tif (mat"..., '\n', 479) = 0x00f09984
[0x4022d1] memchr("      case 'F':\n\tif (matcher && "..., '\n', 471) = 0x00f09994
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 455) = 0x00f099c3
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 408) = 0x00f099fe
[0x4022d1] memchr("\tmatcher = "fgrep";\n\tbreak;\n    "..., '\n', 349) = 0x00f09a12
[0x4022d1] memchr("\tbreak;\n      case 'G':\n\tif (mat"..., '\n', 329) = 0x00f09a1a
[0x4022d1] memchr("      case 'G':\n\tif (matcher && "..., '\n', 321) = 0x00f09a2a
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 305) = 0x00f09a58
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 259) = 0x00f09a92
[0x4022d1] memchr("\tmatcher = "grep";\n\tbreak;\n     "..., '\n', 201) = 0x00f09aa5
[0x4022d1] memchr("\tbreak;\n      case 'V':\n\tfprintf"..., '\n', 182) = 0x00f09aad
[0x4022d1] memchr("      case 'V':\n\tfprintf(stderr,"..., '\n', 174) = 0x00f09abd
[0x4022d1] memchr("\tfprintf(stderr, "%s\\n", version"..., '\n', 158) = 0x00f09ae0
[0x4022d1] memchr("\tbreak;\n      case 'X':\n\tif (mat"..., '\n', 123) = 0x00f09ae8
[0x4022d1] memchr("      case 'X':\n\tif (matcher)\n\t "..., '\n', 115) = 0x00f09af8
[0x4022d1] memchr("\tif (matcher)\n\t  fatal("matcher "..., '\n', 99) = 0x00f09b06
[0x4022d1] memchr("\t  fatal("matcher already specif"..., '\n', 85) = 0x00f09b30
[0x4022d1] memchr("\tmatcher = optarg;\n\tbreak;\n     "..., '\n', 43) = 0x00f09b43
[0x4022d1] memchr("\tbreak;\n      case 'b':\n\tout_byt"..., '\n', 24) = 0x00f09b4b
[0x4022d1] memchr("      case 'b':\n\tout_byte = 1;\n\t"..., '\n', 16) = 0x00f09b5b
[0x4022d1] memchr("\tout_byte = 1;\n\tbreak;\n      cas"..., '\n', 0) = NULL
[0x4023cc] fwrite("702:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_byte = 1;\n\tbreak;\n      cas"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'c':\n\tout_qui"..., '1', 17529) = 0x00f09b90
[0x40cdf3] memchr("1;\n\tcount_matches = 1;\n\tbreak;\n "..., '\n', 17492) = 0x00f09b92
[0x4022d1] memchr("\tbreak;\n      case 'c':\n\tout_qui"..., '\n', 24) = 0x00f09b72
[0x4022d1] memchr("      case 'c':\n\tout_quiet = 1;\n"..., '\n', 16) = 0x00f09b82
[0x4022d1] memchr("\tout_quiet = 1;\n\tcount_matches ="..., '\n', 0) = NULL
[0x4023cc] fwrite("705:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_quiet = 1;\n\tcount_matches ="..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tcount_matches = 1;\n\tbreak;\n    "..., '1', 17489) = 0x00f09ba4
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'e':\n\tcc ="..., '\n', 17472) = 0x00f09ba6
[0x4022d1] memchr("\tcount_matches = 1;\n\tbreak;\n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("706:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tcount_matches = 1;\n\tbreak;\n    "..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'e':\n\tcc = st"..., '1', 17469) = 0x00f09bf9
[0x40cdf3] memchr("1);\n\tif (keyfound)\n\t  keys[keycc"..., '\n', 17387) = 0x00f09bfc
[0x4022d1] memchr("\tbreak;\n      case 'e':\n\tcc = st"..., '\n', 46) = 0x00f09bae
[0x4022d1] memchr("      case 'e':\n\tcc = strlen(opt"..., '\n', 38) = 0x00f09bbe
[0x4022d1] memchr("\tcc = strlen(optarg);\n\tkeys = xr"..., '\n', 22) = 0x00f09bd4
[0x4022d1] memchr("\tkeys = xrealloc(keys, keycc + c"..., '\n', 0) = NULL
[0x4023cc] fwrite("710:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tkeys = xrealloc(keys, keycc + c"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tif (keyfound)\n\t  keys[keycc++] "..., '1', 17383) = 0x00f09c5e
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'f':\n\tfp ="..., '\n', 17286) = 0x00f09c60
[0x4022d1] memchr("\tif (keyfound)\n\t  keys[keycc++] "..., '\n', 85) = 0x00f09c0b
[0x4022d1] memchr("\t  keys[keycc++] = '\\n';\n\tstrcpy"..., '\n', 70) = 0x00f09c24
[0x4022d1] memchr("\tstrcpy(&keys[keycc], optarg);\n\t"..., '\n', 45) = 0x00f09c43
[0x4022d1] memchr("\tkeycc += cc;\n\tkeyfound = 1;\n\tbr"..., '\n', 14) = 0x00f09c51
[0x4022d1] memchr("\tkeyfound = 1;\n\tbreak;\n      cas"..., '\n', 0) = NULL
[0x4023cc] fwrite("715:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tkeyfound = 1;\n\tbreak;\n      cas"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'f':\n\tfp = st"..., '1', 17283) = 0x00f09cea
[0x40cdf3] memchr("1; keyalloc <= keycc; keyalloc *"..., '\n', 17146) = 0x00f09d0e
[0x4022d1] memchr("\tbreak;\n      case 'f':\n\tfp = st"..., '\n', 120) = 0x00f09c68
[0x4022d1] memchr("      case 'f':\n\tfp = strcmp(opt"..., '\n', 112) = 0x00f09c78
[0x4022d1] memchr("\tfp = strcmp(optarg, "-") != 0 ?"..., '\n', 96) = 0x00f09cb5
[0x4022d1] memchr("\tif (!fp)\n\t  fatal(optarg, errno"..., '\n', 35) = 0x00f09cbf
[0x4022d1] memchr("\t  fatal(optarg, errno);\n\tfor (k"..., '\n', 25) = 0x00f09cd8
[0x4022d1] memchr("\tfor (keyalloc = 1; keyalloc <= "..., '\n', 0) = NULL
[0x4023cc] fwrite("721:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tfor (keyalloc = 1; keyalloc <= "..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  ;\n\tkeys = xrealloc(keys, keya"..., '1', 17109) = 0x00f09da5
[0x40cdf3] memchr("1, keyalloc - keycc, fp)) > 0)\n\t"..., '\n', 16959) = 0x00f09dc3
[0x4022d1] memchr("\t  ;\n\tkeys = xrealloc(keys, keya"..., '\n', 113) = 0x00f09d13
[0x4022d1] memchr("\tkeys = xrealloc(keys, keyalloc)"..., '\n', 108) = 0x00f09d35
[0x4022d1] memchr("\toldcc = keycc;\n\tif (keyfound)\n\t"..., '\n', 74) = 0x00f09d45
[0x4022d1] memchr("\tif (keyfound)\n\t  keys[keycc++] "..., '\n', 58) = 0x00f09d54
[0x4022d1] memchr("\t  keys[keycc++] = '\\n';\n\twhile "..., '\n', 43) = 0x00f09d6d
[0x4022d1] memchr("\twhile (!feof(fp)\n\t       && (cc"..., '\n', 18) = 0x00f09d7f
[0x4022d1] memchr("\t       && (cc = fread(keys + ke"..., '\n', 0) = NULL
[0x4023cc] fwrite("728:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t       && (cc = fread(keys + ke"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  {\n\t    keycc += cc;\n\t    if ("..., '1', 16928) = 0x00f09eb0
[0x40cdf3] memchr("1] == '\\n')\n\t  --keycc;\n\tkeyfoun"..., '\n', 16692) = 0x00f09ebb
[0x4022d1] memchr("\t  {\n\t    keycc += cc;\n\t    if ("..., '\n', 197) = 0x00f09dc8
[0x4022d1] memchr("\t    keycc += cc;\n\t    if (keycc"..., '\n', 192) = 0x00f09dda
[0x4022d1] memchr("\t    if (keycc == keyalloc)\n\t   "..., '\n', 174) = 0x00f09df6
[0x4022d1] memchr("\t      keys = xrealloc(keys, key"..., '\n', 146) = 0x00f09e23
[0x4022d1] memchr("\t  }\n\tif (fp != stdin)\n\t  fclose"..., '\n', 101) = 0x00f09e28
[0x4022d1] memchr("\tif (fp != stdin)\n\t  fclose(fp);"..., '\n', 96) = 0x00f09e3a
[0x4022d1] memchr("\t  fclose(fp);\n\t/* Nuke the fina"..., '\n', 78) = 0x00f09e49
[0x4022d1] memchr("\t/* Nuke the final newline to av"..., '\n', 63) = 0x00f09e88
[0x4022d1] memchr("\tif (keycc - oldcc > 0 && keys[k"..., '\n', 0) = NULL
[0x4023cc] fwrite("737:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tif (keycc - oldcc > 0 && keys[k"..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  --keycc;\n\tkeyfound = 1;\n\tbrea"..., '1', 16680) = 0x00f09ed4
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'h':\n\tno_f"..., '\n', 16656) = 0x00f09ed6
[0x4022d1] memchr("\t  --keycc;\n\tkeyfound = 1;\n\tbrea"..., '\n', 12) = 0x00f09ec7
[0x4022d1] memchr("\tkeyfound = 1;\n\tbreak;\n      cas"..., '\n', 0) = NULL
[0x4023cc] fwrite("739:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tkeyfound = 1;\n\tbreak;\n      cas"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'h':\n\tno_file"..., '1', 16653) = 0x00f09eff
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'i':\n     "..., '\n', 16613) = 0x00f09f01
[0x4022d1] memchr("\tbreak;\n      case 'h':\n\tno_file"..., '\n', 24) = 0x00f09ede
[0x4022d1] memchr("      case 'h':\n\tno_filenames = "..., '\n', 16) = 0x00f09eee
[0x4022d1] memchr("\tno_filenames = 1;\n\tbreak;\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("742:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tno_filenames = 1;\n\tbreak;\n     "..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'i':\n      ca"..., '1', 16610) = 0x00f09f56
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'L':\n\t/* L"..., '\n', 16526) = 0x00f09f58
[0x4022d1] memchr("\tbreak;\n      case 'i':\n      ca"..., '\n', 69) = 0x00f09f09
[0x4022d1] memchr("      case 'i':\n      case 'y':\t"..., '\n', 61) = 0x00f09f19
[0x4022d1] memchr("      case 'y':\t\t\t/* For old-tim"..., '\n', 45) = 0x00f09f46
[0x4022d1] memchr("\tmatch_icase = 1;\n\tbreak;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("746:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tmatch_icase = 1;\n\tbreak;\n      "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'L':\n\t/* Like"..., '1', 16523) = 0x00f09feb
[0x40cdf3] memchr("1;\n\tlist_files = -1;\n\tbreak;\n   "..., '\n', 16377) = 0x00f09fed
[0x4022d1] memchr("\tbreak;\n      case 'L':\n\t/* Like"..., '\n', 133) = 0x00f09f60
[0x4022d1] memchr("      case 'L':\n\t/* Like -l, exc"..., '\n', 125) = 0x00f09f70
[0x4022d1] memchr("\t/* Like -l, except list files t"..., '\n', 109) = 0x00f09fab
[0x4022d1] memchr("\t   Inspired by the same option "..., '\n', 50) = 0x00f09fdd
[0x4022d1] memchr("\tout_quiet = 1;\n\tlist_files = -1"..., '\n', 0) = NULL
[0x4023cc] fwrite("751:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_quiet = 1;\n\tlist_files = -1"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tlist_files = -1;\n\tbreak;\n      "..., '1', 16374) = 0x00f09ffd
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'l':\n\tout_"..., '\n', 16359) = 0x00f09fff
[0x4022d1] memchr("\tlist_files = -1;\n\tbreak;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("752:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tlist_files = -1;\n\tbreak;\n      "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'l':\n\tout_qui"..., '1', 16356) = 0x00f0a025
[0x40cdf3] memchr("1;\n\tlist_files = 1;\n\tbreak;\n    "..., '\n', 16319) = 0x00f0a027
[0x4022d1] memchr("\tbreak;\n      case 'l':\n\tout_qui"..., '\n', 24) = 0x00f0a007
[0x4022d1] memchr("      case 'l':\n\tout_quiet = 1;\n"..., '\n', 16) = 0x00f0a017
[0x4022d1] memchr("\tout_quiet = 1;\n\tlist_files = 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("755:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_quiet = 1;\n\tlist_files = 1;"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tlist_files = 1;\n\tbreak;\n      c"..., '1', 16316) = 0x00f0a036
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'n':\n\tout_"..., '\n', 16302) = 0x00f0a038
[0x4022d1] memchr("\tlist_files = 1;\n\tbreak;\n      c"..., '\n', 0) = NULL
[0x4023cc] fwrite("756:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tlist_files = 1;\n\tbreak;\n      c"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'n':\n\tout_lin"..., '1', 16299) = 0x00f0a05d
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'q':\n\tout_"..., '\n', 16263) = 0x00f0a05f
[0x4022d1] memchr("\tbreak;\n      case 'n':\n\tout_lin"..., '\n', 24) = 0x00f0a040
[0x4022d1] memchr("      case 'n':\n\tout_line = 1;\n\t"..., '\n', 16) = 0x00f0a050
[0x4022d1] memchr("\tout_line = 1;\n\tbreak;\n      cas"..., '\n', 0) = NULL
[0x4023cc] fwrite("759:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_line = 1;\n\tbreak;\n      cas"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'q':\n\tout_qui"..., '1', 16260) = 0x00f0a085
[0x40cdf3] memchr("1;\n\tbreak;\n      case 's':\n\tsupp"..., '\n', 16223) = 0x00f0a087
[0x4022d1] memchr("\tbreak;\n      case 'q':\n\tout_qui"..., '\n', 24) = 0x00f0a067
[0x4022d1] memchr("      case 'q':\n\tout_quiet = 1;\n"..., '\n', 16) = 0x00f0a077
[0x4022d1] memchr("\tout_quiet = 1;\n\tbreak;\n      ca"..., '\n', 0) = NULL
[0x4023cc] fwrite("762:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_quiet = 1;\n\tbreak;\n      ca"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 's':\n\tsuppres"..., '1', 16220) = 0x00f0a0b3
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'v':\n\tout_"..., '\n', 16177) = 0x00f0a0b5
[0x4022d1] memchr("\tbreak;\n      case 's':\n\tsuppres"..., '\n', 24) = 0x00f0a08f
[0x4022d1] memchr("      case 's':\n\tsuppress_errors"..., '\n', 16) = 0x00f0a09f
[0x4022d1] memchr("\tsuppress_errors = 1;\n\tbreak;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("765:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tsuppress_errors = 1;\n\tbreak;\n  "..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'v':\n\tout_inv"..., '1', 16174) = 0x00f0a0dc
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'w':\n\tmatc"..., '\n', 16136) = 0x00f0a0de
[0x4022d1] memchr("\tbreak;\n      case 'v':\n\tout_inv"..., '\n', 24) = 0x00f0a0bd
[0x4022d1] memchr("      case 'v':\n\tout_invert = 1;"..., '\n', 16) = 0x00f0a0cd
[0x4022d1] memchr("\tout_invert = 1;\n\tbreak;\n      c"..., '\n', 0) = NULL
[0x4023cc] fwrite("768:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tout_invert = 1;\n\tbreak;\n      c"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'w':\n\tmatch_w"..., '1', 16133) = 0x00f0a106
[0x40cdf3] memchr("1;\n\tbreak;\n      case 'x':\n\tmatc"..., '\n', 16094) = 0x00f0a108
[0x4022d1] memchr("\tbreak;\n      case 'w':\n\tmatch_w"..., '\n', 24) = 0x00f0a0e6
[0x4022d1] memchr("      case 'w':\n\tmatch_words = 1"..., '\n', 16) = 0x00f0a0f6
[0x4022d1] memchr("\tmatch_words = 1;\n\tbreak;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("771:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tmatch_words = 1;\n\tbreak;\n      "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      case 'x':\n\tmatch_l"..., '1', 16091) = 0x00f0a130
[0x40cdf3] memchr("1;\n\tbreak;\n      default:\n\tusage"..., '\n', 16052) = 0x00f0a132
[0x4022d1] memchr("\tbreak;\n      case 'x':\n\tmatch_l"..., '\n', 24) = 0x00f0a110
[0x4022d1] memchr("      case 'x':\n\tmatch_lines = 1"..., '\n', 16) = 0x00f0a120
[0x4022d1] memchr("\tmatch_lines = 1;\n\tbreak;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("774:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\tmatch_lines = 1;\n\tbreak;\n      "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n      default:\n\tusage();"..., '1', 16049) = 0x00f0a280
[0x40cdf3] memchr("1 && !no_filenames)\n    out_file"..., '\n', 15716) = 0x00f0a293
[0x4022d1] memchr("\tbreak;\n      default:\n\tusage();"..., '\n', 311) = 0x00f0a13a
[0x4022d1] memchr("      default:\n\tusage();\n\tbreak;"..., '\n', 303) = 0x00f0a149
[0x4022d1] memchr("\tusage();\n\tbreak;\n      }\n\n  if "..., '\n', 288) = 0x00f0a153
[0x4022d1] memchr("\tbreak;\n      }\n\n  if (!keyfound"..., '\n', 278) = 0x00f0a15b
[0x4022d1] memchr("      }\n\n  if (!keyfound)\n    if"..., '\n', 270) = 0x00f0a163
[0x4022d1] memchr("\n  if (!keyfound)\n    if (optind"..., '\n', 262) = 0x00f0a164
[0x4022d1] memchr("  if (!keyfound)\n    if (optind "..., '\n', 261) = 0x00f0a175
[0x4022d1] memchr("    if (optind < argc)\n      {\n\t"..., '\n', 244) = 0x00f0a18c
[0x4022d1] memchr("      {\n\tkeys = argv[optind++];\n"..., '\n', 221) = 0x00f0a194
[0x4022d1] memchr("\tkeys = argv[optind++];\n\tkeycc ="..., '\n', 213) = 0x00f0a1ac
[0x4022d1] memchr("\tkeycc = strlen(keys);\n      }\n "..., '\n', 189) = 0x00f0a1c3
[0x4022d1] memchr("      }\n    else\n      usage();\n"..., '\n', 166) = 0x00f0a1cb
[0x4022d1] memchr("    else\n      usage();\n\n  if (!"..., '\n', 158) = 0x00f0a1d4
[0x4022d1] memchr("      usage();\n\n  if (!matcher)\n"..., '\n', 149) = 0x00f0a1e3
[0x4022d1] memchr("\n  if (!matcher)\n    matcher = p"..., '\n', 134) = 0x00f0a1e4
[0x4022d1] memchr("  if (!matcher)\n    matcher = pr"..., '\n', 133) = 0x00f0a1f4
[0x4022d1] memchr("    matcher = prog;\n\n  if (!setm"..., '\n', 117) = 0x00f0a208
[0x4022d1] memchr("\n  if (!setmatcher(matcher) && !"..., '\n', 97) = 0x00f0a209
[0x4022d1] memchr("  if (!setmatcher(matcher) && !s"..., '\n', 96) = 0x00f0a23f
[0x4022d1] memchr("    abort();\n\n  (*compile)(keys,"..., '\n', 42) = 0x00f0a24c
[0x4022d1] memchr("\n  (*compile)(keys, keycc);\n\n  i"..., '\n', 29) = 0x00f0a24d
[0x4022d1] memchr("  (*compile)(keys, keycc);\n\n  if"..., '\n', 28) = 0x00f0a268
[0x4022d1] memchr("\n  if (argc - optind > 1 && !no_"..., '\n', 1) = 0x00f0a269
[0x4022d1] memchr("  if (argc - optind > 1 && !no_f"..., '\n', 0) = NULL
[0x4023cc] fwrite("798:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  if (argc - optind > 1 && !no_f"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    out_file = 1;\n\n  status = 1;"..., '1', 15696) = 0x00f0a2a3
[0x40cdf3] memchr("1;\n\n  status = 1;\n\n  if (optind "..., '\n', 15681) = 0x00f0a2a5
[0x4022d1] memchr("    out_file = 1;\n\n  status = 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("799:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("    out_file = 1;\n\n  status = 1;"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  status = 1;\n\n  if (optind < a"..., '1', 15678) = 0x00f0a2b2
[0x40cdf3] memchr("1;\n\n  if (optind < argc)\n    whi"..., '\n', 15666) = 0x00f0a2b4
[0x4022d1] memchr("\n  status = 1;\n\n  if (optind < a"..., '\n', 1) = 0x00f0a2a6
[0x4022d1] memchr("  status = 1;\n\n  if (optind < ar"..., '\n', 0) = NULL
[0x4023cc] fwrite("801:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("  status = 1;\n\n  if (optind < ar"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  if (optind < argc)\n    while "..., '1', 15663) = 0x00f0a498
[0x40cdf3] memchr("1)\n\t\t  printf("%s\\n", filename);"..., '\n', 15180) = 0x00f0a49a
[0x4022d1] memchr("\n  if (optind < argc)\n    while "..., '\n', 463) = 0x00f0a2b5
[0x4022d1] memchr("  if (optind < argc)\n    while ("..., '\n', 462) = 0x00f0a2ca
[0x4022d1] memchr("    while (optind < argc)\n      "..., '\n', 441) = 0x00f0a2e4
[0x4022d1] memchr("      {\n\tdesc = strcmp(argv[opti"..., '\n', 415) = 0x00f0a2ec
[0x4022d1] memchr("\tdesc = strcmp(argv[optind], "-""..., '\n', 407) = 0x00f0a332
[0x4022d1] memchr("\tif (desc < 0)\n\t  {\n\t    if (!su"..., '\n', 337) = 0x00f0a341
[0x4022d1] memchr("\t  {\n\t    if (!suppress_errors)\n"..., '\n', 322) = 0x00f0a346
[0x4022d1] memchr("\t    if (!suppress_errors)\n\t    "..., '\n', 317) = 0x00f0a361
[0x4022d1] memchr("\t      error(argv[optind], errno"..., '\n', 290) = 0x00f0a384
[0x4022d1] memchr("\t  }\n\telse\n\t  {\n\t    filename = "..., '\n', 255) = 0x00f0a389
[0x4022d1] memchr("\telse\n\t  {\n\t    filename = desc "..., '\n', 250) = 0x00f0a38f
[0x4022d1] memchr("\t  {\n\t    filename = desc == 0 ?"..., '\n', 244) = 0x00f0a394
[0x4022d1] memchr("\t    filename = desc == 0 ? "(st"..., '\n', 239) = 0x00f0a3d3
[0x4022d1] memchr("\t    count = grep(desc);\n\t    if"..., '\n', 176) = 0x00f0a3ec
[0x4022d1] memchr("\t    if (count_matches)\n\t      {"..., '\n', 151) = 0x00f0a404
[0x4022d1] memchr("\t      {\n\t\tif (out_file)\n\t\t  pri"..., '\n', 127) = 0x00f0a40d
[0x4022d1] memchr("\t\tif (out_file)\n\t\t  printf("%s:""..., '\n', 118) = 0x00f0a41d
[0x4022d1] memchr("\t\t  printf("%s:", filename);\n\t\tp"..., '\n', 102) = 0x00f0a43a
[0x4022d1] memchr("\t\tprintf("%d\\n", count);\n\t      "..., '\n', 73) = 0x00f0a453
[0x4022d1] memchr("\t      }\n\t    if (count)\n\t      "..., '\n', 48) = 0x00f0a45c
[0x4022d1] memchr("\t    if (count)\n\t      {\n\t\tstatu"..., '\n', 39) = 0x00f0a46c
[0x4022d1] memchr("\t      {\n\t\tstatus = 0;\n\t\tif (lis"..., '\n', 23) = 0x00f0a475
[0x4022d1] memchr("\t\tstatus = 0;\n\t\tif (list_files ="..., '\n', 14) = 0x00f0a483
[0x4022d1] memchr("\t\tif (list_files == 1)\n\t\t  print"..., '\n', 0) = NULL
[0x4023cc] fwrite("825:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t\tif (list_files == 1)\n\t\t  print"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  printf("%s\\n", filename);\n\t "..., '1', 15177) = 0x00f0a4df
[0x40cdf3] memchr("1)\n\t      printf("%s\\n", filenam"..., '\n', 15109) = 0x00f0a4e1
[0x4022d1] memchr("\t\t  printf("%s\\n", filename);\n\t "..., '\n', 39) = 0x00f0a4b8
[0x4022d1] memchr("\t      }\n\t    else if (list_file"..., '\n', 9) = 0x00f0a4c1
[0x4022d1] memchr("\t    else if (list_files == -1)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("828:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t    else if (list_files == -1)\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      printf("%s\\n", filename);"..., '1', 15106) = 0x00f0a5ed
[0x40cdf3] memchr("1)\n\t    printf("(standard input)"..., '\n', 14839) = 0x00f0a5ef
[0x4022d1] memchr("\t      printf("%s\\n", filename);"..., '\n', 246) = 0x00f0a502
[0x4022d1] memchr("\t  }\n\tif (desc != 0)\n\t  close(de"..., '\n', 213) = 0x00f0a507
[0x4022d1] memchr("\tif (desc != 0)\n\t  close(desc);\n"..., '\n', 208) = 0x00f0a517
[0x4022d1] memchr("\t  close(desc);\n\t++optind;\n     "..., '\n', 192) = 0x00f0a527
[0x4022d1] memchr("\t++optind;\n      }\n  else\n    {\n"..., '\n', 176) = 0x00f0a532
[0x4022d1] memchr("      }\n  else\n    {\n      filen"..., '\n', 165) = 0x00f0a53a
[0x4022d1] memchr("  else\n    {\n      filename = "("..., '\n', 157) = 0x00f0a541
[0x4022d1] memchr("    {\n      filename = "(standar"..., '\n', 150) = 0x00f0a547
[0x4022d1] memchr("      filename = "(standard inpu"..., '\n', 144) = 0x00f0a56c
[0x4022d1] memchr("      count = grep(0);\n      if "..., '\n', 107) = 0x00f0a583
[0x4022d1] memchr("      if (count_matches)\n\tprintf"..., '\n', 84) = 0x00f0a59c
[0x4022d1] memchr("\tprintf("%d\\n", count);\n      if"..., '\n', 59) = 0x00f0a5b4
[0x4022d1] memchr("      if (count)\n\t{\n\t  status = "..., '\n', 35) = 0x00f0a5c5
[0x4022d1] memchr("\t{\n\t  status = 0;\n\t  if (list_fi"..., '\n', 18) = 0x00f0a5c8
[0x4022d1] memchr("\t  status = 0;\n\t  if (list_files"..., '\n', 15) = 0x00f0a5d7
[0x4022d1] memchr("\t  if (list_files == 1)\n\t    pri"..., '\n', 0) = NULL
[0x4023cc] fwrite("844:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("\t  if (list_files == 1)\n\t    pri"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    printf("(standard input)\\n""..., '1', 14836) = 0x00f0a634
[0x40cdf3] memchr("1)\n\tprintf("(standard input)\\n")"..., '\n', 14768) = 0x00f0a636
[0x4022d1] memchr("\t    printf("(standard input)\\n""..., '\n', 38) = 0x00f0a612
[0x4022d1] memchr("\t}\n      else if (list_files == "..., '\n', 3) = 0x00f0a615
[0x4022d1] memchr("      else if (list_files == -1)"..., '\n', 0) = NULL
[0x4023cc] fwrite("847:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("      else if (list_files == -1)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tprintf("(standard input)\\n");\n "..., '1', 14765) = 0x00f0a74b
[0x40cdf3] memchr("1987, 88, 89, 90, 91, 92, 1993\n "..., '\n', 14489) = 0x00f0a769
[0x4022d1] memchr("\tprintf("(standard input)\\n");\n "..., '\n', 259) = 0x00f0a655
[0x4022d1] memchr("    }\n\n  exit(errseen ? 2 : stat"..., '\n', 228) = 0x00f0a65b
[0x4022d1] memchr("\n  exit(errseen ? 2 : status);\n}"..., '\n', 222) = 0x00f0a65c
[0x4022d1] memchr("  exit(errseen ? 2 : status);\n}\n"..., '\n', 221) = 0x00f0a67a
[0x4022d1] memchr("}\n/* Getopt for GNU.\n   NOTE: ge"..., '\n', 191) = 0x00f0a67c
[0x4022d1] memchr("/* Getopt for GNU.\n   NOTE: geto"..., '\n', 189) = 0x00f0a68f
[0x4022d1] memchr("   NOTE: getopt is now part of t"..., '\n', 170) = 0x00f0a6d7
[0x4022d1] memchr("   "Keep this file name-space cl"..., '\n', 98) = 0x00f0a721
[0x4022d1] memchr("   before changing it!\n\n   Copyr"..., '\n', 24) = 0x00f0a738
[0x4022d1] memchr("\n   Copyright (C) 1987, 88, 89, "..., '\n', 1) = 0x00f0a739
[0x4022d1] memchr("   Copyright (C) 1987, 88, 89, 9"..., '\n', 0) = NULL
[0x4023cc] fwrite("858:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("   Copyright (C) 1987, 88, 89, 9"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   \tFree Software Foundation, In"..., '1', 14458) = 0x00f0aa24
[0x40cdf3] memchr("139, USA.  */\n\014\n/* NOTE!!!  AIX "..., '\n', 13760) = 0x00f0aa31
[0x4022d1] memchr("   \tFree Software Foundation, In"..., '\n', 653) = 0x00f0a78c
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 618) = 0x00f0a78d
[0x4022d1] memchr("   This program is free software"..., '\n', 617) = 0x00f0a7d8
[0x4022d1] memchr("   under the terms of the GNU Ge"..., '\n', 542) = 0x00f0a821
[0x4022d1] memchr("   Free Software Foundation; eit"..., '\n', 469) = 0x00f0a868
[0x4022d1] memchr("   later version.\n\n   This progr"..., '\n', 398) = 0x00f0a87a
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f0a87b
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f0a8be
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f0a900
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f0a941
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f0a971
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f0a972
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f0a9b7
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f0a9f6
[0x4022d1] memchr("   Foundation, 675 Mass Ave, Cam"..., '\n', 0) = NULL
[0x4023cc] fwrite("873:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("   Foundation, 675 Mass Ave, Cam"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\014\n/* NOTE!!!  AIX requires this "..., '1', 13746) = 0x00f0ab1a
[0x40cdf3] memchr("1\n#endif\n\n#ifdef __GNUC__\n#defin"..., '\n', 13514) = 0x00f0ab1b
[0x4022d1] memchr("\014\n/* NOTE!!!  AIX requires this "..., '\n', 212) = 0x00f0aa33
[0x4022d1] memchr("/* NOTE!!!  AIX requires this to"..., '\n', 210) = 0x00f0aa74
[0x4022d1] memchr("   Do not put ANYTHING before it"..., '\n', 145) = 0x00f0aa9a
[0x4022d1] memchr("#if !defined (__GNUC__) && defin"..., '\n', 107) = 0x00f0aac4
[0x4022d1] memchr(" #pragma alloca\n#endif\n\n#ifdef H"..., '\n', 65) = 0x00f0aad4
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_CONFIG_H\n#in"..., '\n', 49) = 0x00f0aadb
[0x4022d1] memchr("\n#ifdef HAVE_CONFIG_H\n#include ""..., '\n', 42) = 0x00f0aadc
[0x4022d1] memchr("#ifdef HAVE_CONFIG_H\n#include "c"..., '\n', 41) = 0x00f0aaf1
[0x4022d1] memchr("#include "config.h"\n#define flag"..., '\n', 20) = 0x00f0ab05
[0x4022d1] memchr("#define flag_config 1\n#endif\n\n#i"..., '\n', 0) = NULL
[0x4023cc] fwrite("883:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("#define flag_config 1\n#endif\n\n#i"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n\n#ifdef __GNUC__\n#define "..., '1', 13512) = 0x00f0ac12
[0x40cdf3] memchr("1\n#else\n#ifndef _AIX\nchar *alloc"..., '\n', 13266) = 0x00f0ac13
[0x4022d1] memchr("#endif\n\n#ifdef __GNUC__\n#define "..., '\n', 226) = 0x00f0ab22
[0x4022d1] memchr("\n#ifdef __GNUC__\n#define alloca "..., '\n', 219) = 0x00f0ab23
[0x4022d1] memchr("#ifdef __GNUC__\n#define alloca _"..., '\n', 218) = 0x00f0ab33
[0x4022d1] memchr("#define alloca __builtin_alloca\n"..., '\n', 202) = 0x00f0ab53
[0x4022d1] memchr("#else /* not __GNUC__ */\n#if def"..., '\n', 170) = 0x00f0ab6c
[0x4022d1] memchr("#if defined (HAVE_ALLOCA_H) || ("..., '\n', 145) = 0x00f0abe9
[0x4022d1] memchr("#include <alloca.h>\n#define flag"..., '\n', 20) = 0x00f0abfd
[0x4022d1] memchr("#define flag_alloca 1\n#else\n#ifn"..., '\n', 0) = NULL
[0x4023cc] fwrite("891:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("#define flag_alloca 1\n#else\n#ifn"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#else\n#ifndef _AIX\nchar *alloca "..., '1', 13264) = 0x00f0acc9
[0x40cdf3] memchr("1 not to define a getopt prototy"..., '\n', 13083) = 0x00f0acfd
[0x4022d1] memchr("#else\n#ifndef _AIX\nchar *alloca "..., '\n', 157) = 0x00f0ac19
[0x4022d1] memchr("#ifndef _AIX\nchar *alloca ();\n#e"..., '\n', 151) = 0x00f0ac26
[0x4022d1] memchr("char *alloca ();\n#endif\n#endif /"..., '\n', 138) = 0x00f0ac37
[0x4022d1] memchr("#endif\n#endif /* alloca.h */\n#en"..., '\n', 121) = 0x00f0ac3e
[0x4022d1] memchr("#endif /* alloca.h */\n#endif /* "..., '\n', 114) = 0x00f0ac54
[0x4022d1] memchr("#endif /* not __GNUC__ */\n\n#if !"..., '\n', 92) = 0x00f0ac6e
[0x4022d1] memchr("\n#if !__STDC__ && !defined(const"..., '\n', 66) = 0x00f0ac6f
[0x4022d1] memchr("#if !__STDC__ && !defined(const)"..., '\n', 65) = 0x00f0ac9a
[0x4022d1] memchr("#define const\n#endif\n\n/* This te"..., '\n', 22) = 0x00f0aca8
[0x4022d1] memchr("#endif\n\n/* This tells Alpha OSF/"..., '\n', 8) = 0x00f0acaf
[0x4022d1] memchr("\n/* This tells Alpha OSF/1 not t"..., '\n', 1) = 0x00f0acb0
[0x4022d1] memchr("/* This tells Alpha OSF/1 not to"..., '\n', 0) = NULL
[0x4023cc] fwrite("903:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("/* This tells Alpha OSF/1 not to"..., 1, 77, 0x7fce6d444260) = 77
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifndef _NO_PROTO\n#define _NO_PR"..., '1', 13030) = 0x00f0b0ae
[0x40cdf3] memchr("1\n#endif\n#else\t/* Not GNU C libr"..., '\n', 12086) = 0x00f0b0af
[0x4022d1] memchr("#ifndef _NO_PROTO\n#define _NO_PR"..., '\n', 924) = 0x00f0ad0f
[0x4022d1] memchr("#define _NO_PROTO\n#endif\n\n/*#inc"..., '\n', 906) = 0x00f0ad21
[0x4022d1] memchr("#endif\n\n/*#include <stdio.h> */\n"..., '\n', 888) = 0x00f0ad28
[0x4022d1] memchr("\n/*#include <stdio.h> */\n\n/* Com"..., '\n', 881) = 0x00f0ad29
[0x4022d1] memchr("/*#include <stdio.h> */\n\n/* Comm"..., '\n', 880) = 0x00f0ad41
[0x4022d1] memchr("\n/* Comment out all this code if"..., '\n', 856) = 0x00f0ad42
[0x4022d1] memchr("/* Comment out all this code if "..., '\n', 855) = 0x00f0ad8e
[0x4022d1] memchr("   actually compiling the librar"..., '\n', 779) = 0x00f0add8
[0x4022d1] memchr("   Library, but also included in"..., '\n', 705) = 0x00f0ae22
[0x4022d1] memchr("   and linking in this code is a"..., '\n', 631) = 0x00f0ae66
[0x4022d1] memchr("   (especially if it is a shared"..., '\n', 563) = 0x00f0aeaf
[0x4022d1] memchr("   program understand `configure"..., '\n', 490) = 0x00f0aefc
[0x4022d1] memchr("   it is simpler to just do this"..., '\n', 413) = 0x00f0af43
[0x4022d1] memchr("\n#if defined (_LIBC) || !defined"..., '\n', 342) = 0x00f0af44
[0x4022d1] memchr("#if defined (_LIBC) || !defined "..., '\n', 341) = 0x00f0af76
[0x4022d1] memchr("\n\n/* This needs to come after so"..., '\n', 291) = 0x00f0af77
[0x4022d1] memchr("\n/* This needs to come after som"..., '\n', 290) = 0x00f0af78
[0x4022d1] memchr("/* This needs to come after some"..., '\n', 289) = 0x00f0afaa
[0x4022d1] memchr("   to get __GNU_LIBRARY__ define"..., '\n', 239) = 0x00f0afd1
[0x4022d1] memchr("#ifdef\t__GNU_LIBRARY__\n#undef\tal"..., '\n', 200) = 0x00f0afe8
[0x4022d1] memchr("#undef\talloca\n/* Don't include s"..., '\n', 177) = 0x00f0aff6
[0x4022d1] memchr("/* Don't include stdlib.h for no"..., '\n', 163) = 0x00f0b03d
[0x4022d1] memchr("   contain conflicting prototype"..., '\n', 92) = 0x00f0b06f
[0x4022d1] memchr("#if flag_stdlib==0   \n#include <"..., '\n', 42) = 0x00f0b085
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f0b099
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("929:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("#define flag_stdlib 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\t/* Not GNU C librar"..., '1', 12084) = 0x00f0b781
[0x40cdf3] memchr("1003.2 says this must be 1 befor"..., '\n', 10339) = 0x00f0b7b0
[0x4022d1] memchr("#endif\n#else\t/* Not GNU C librar"..., '\n', 1738) = 0x00f0b0b6
[0x4022d1] memchr("#else\t/* Not GNU C library.  */\n"..., '\n', 1731) = 0x00f0b0d6
[0x4022d1] memchr("#define\t__alloca\talloca\n#endif\t/"..., '\n', 1699) = 0x00f0b0ee
[0x4022d1] memchr("#endif\t/* GNU C library.  */\n\n/*"..., '\n', 1675) = 0x00f0b10b
[0x4022d1] memchr("\n/* If GETOPT_COMPAT is defined,"..., '\n', 1646) = 0x00f0b10c
[0x4022d1] memchr("/* If GETOPT_COMPAT is defined, "..., '\n', 1645) = 0x00f0b150
[0x4022d1] memchr("   long-named option.  Because t"..., '\n', 1577) = 0x00f0b194
[0x4022d1] memchr("   being phased out.  */\n/* #def"..., '\n', 1509) = 0x00f0b1ad
[0x4022d1] memchr("/* #define GETOPT_COMPAT */\n\n/* "..., '\n', 1484) = 0x00f0b1c9
[0x4022d1] memchr("\n/* This version of `getopt' app"..., '\n', 1456) = 0x00f0b1ca
[0x4022d1] memchr("/* This version of `getopt' appe"..., '\n', 1455) = 0x00f0b218
[0x4022d1] memchr("   but it behaves differently fo"..., '\n', 1377) = 0x00f0b25d
[0x4022d1] memchr("   to intersperse the options wi"..., '\n', 1308) = 0x00f0b295
[0x4022d1] memchr("\n   As `getopt' works, it permut"..., '\n', 1252) = 0x00f0b296
[0x4022d1] memchr("   As `getopt' works, it permute"..., '\n', 1251) = 0x00f0b2d6
[0x4022d1] memchr("   when it is done, all the opti"..., '\n', 1187) = 0x00f0b319
[0x4022d1] memchr("   all application programs are "..., '\n', 1120) = 0x00f0b365
[0x4022d1] memchr("\n   Setting the environment vari"..., '\n', 1044) = 0x00f0b366
[0x4022d1] memchr("   Setting the environment varia"..., '\n', 1043) = 0x00f0b3b0
[0x4022d1] memchr("   Then the behavior is complete"..., '\n', 969) = 0x00f0b3dd
[0x4022d1] memchr("\n   GNU application programs can"..., '\n', 924) = 0x00f0b3de
[0x4022d1] memchr("   GNU application programs can "..., '\n', 923) = 0x00f0b424
[0x4022d1] memchr("   they can distinguish the rela"..., '\n', 853) = 0x00f0b473
[0x4022d1] memchr("\n#include "getopt.h"\n\n/* For com"..., '\n', 774) = 0x00f0b474
[0x4022d1] memchr("#include "getopt.h"\n\n/* For comm"..., '\n', 773) = 0x00f0b488
[0x4022d1] memchr("\n/* For communication from `geto"..., '\n', 753) = 0x00f0b489
[0x4022d1] memchr("/* For communication from `getop"..., '\n', 752) = 0x00f0b4bb
[0x4022d1] memchr("   When `getopt' finds an option"..., '\n', 702) = 0x00f0b4f4
[0x4022d1] memchr("   the argument value is returne"..., '\n', 645) = 0x00f0b51c
[0x4022d1] memchr("   Also, when `ordering' is RETU"..., '\n', 605) = 0x00f0b549
[0x4022d1] memchr("   each non-option ARGV-element "..., '\n', 560) = 0x00f0b57f
[0x4022d1] memchr("\nchar *optarg = 0;\n\n/* Index in "..., '\n', 506) = 0x00f0b580
[0x4022d1] memchr("char *optarg = 0;\n\n/* Index in A"..., '\n', 505) = 0x00f0b592
[0x4022d1] memchr("\n/* Index in ARGV of the next el"..., '\n', 487) = 0x00f0b593
[0x4022d1] memchr("/* Index in ARGV of the next ele"..., '\n', 486) = 0x00f0b5c7
[0x4022d1] memchr("   This is used for communicatio"..., '\n', 434) = 0x00f0b600
[0x4022d1] memchr("   and for communication between"..., '\n', 377) = 0x00f0b63f
[0x4022d1] memchr("\n   On entry to `getopt', zero m"..., '\n', 314) = 0x00f0b640
[0x4022d1] memchr("   On entry to `getopt', zero me"..., '\n', 313) = 0x00f0b688
[0x4022d1] memchr("\n   When `getopt' returns EOF, t"..., '\n', 241) = 0x00f0b689
[0x4022d1] memchr("   When `getopt' returns EOF, th"..., '\n', 240) = 0x00f0b6cd
[0x4022d1] memchr("   non-option elements that the "..., '\n', 172) = 0x00f0b708
[0x4022d1] memchr("\n   Otherwise, `optind' communic"..., '\n', 113) = 0x00f0b709
[0x4022d1] memchr("   Otherwise, `optind' communica"..., '\n', 112) = 0x00f0b747
[0x4022d1] memchr("   how much of ARGV has been sca"..., '\n', 50) = 0x00f0b778
[0x4022d1] memchr("\n/* XXX 1003.2 says this must be"..., '\n', 1) = 0x00f0b779
[0x4022d1] memchr("/* XXX 1003.2 says this must be "..., '\n', 0) = NULL
[0x4023cc] fwrite("976:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("/* XXX 1003.2 says this must be "..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("int optind = 0;\n\n/* The next cha"..., '1', 10291) = 0x00f0b95b
[0x40cdf3] memchr("1;\n\n/* Set to an option characte"..., '\n', 9865) = 0x00f0b95d
[0x4022d1] memchr("int optind = 0;\n\n/* The next cha"..., '\n', 413) = 0x00f0b7c0
[0x4022d1] memchr("\n/* The next char to be scanned "..., '\n', 397) = 0x00f0b7c1
[0x4022d1] memchr("/* The next char to be scanned i"..., '\n', 396) = 0x00f0b7f6
[0x4022d1] memchr("   in which the last option char"..., '\n', 343) = 0x00f0b833
[0x4022d1] memchr("   This allows us to pick up the"..., '\n', 282) = 0x00f0b86c
[0x4022d1] memchr("\n   If this is zero, or a null s"..., '\n', 225) = 0x00f0b86d
[0x4022d1] memchr("   If this is zero, or a null st"..., '\n', 224) = 0x00f0b8ac
[0x4022d1] memchr("   by advancing to the next ARGV"..., '\n', 161) = 0x00f0b8da
[0x4022d1] memchr("\nstatic char *nextchar;\n\n/* Call"..., '\n', 115) = 0x00f0b8db
[0x4022d1] memchr("static char *nextchar;\n\n/* Calle"..., '\n', 114) = 0x00f0b8f2
[0x4022d1] memchr("\n/* Callers store zero here to i"..., '\n', 91) = 0x00f0b8f3
[0x4022d1] memchr("/* Callers store zero here to in"..., '\n', 90) = 0x00f0b92b
[0x4022d1] memchr("   for unrecognized options.  */"..., '\n', 34) = 0x00f0b94c
[0x4022d1] memchr("\nint opterr = 1;\n\n/* Set to an o"..., '\n', 1) = 0x00f0b94d
[0x4022d1] memchr("int opterr = 1;\n\n/* Set to an op"..., '\n', 0) = NULL
[0x4023cc] fwrite("991:", 1, 4, 0x7fce6d444260)  = 4
[0x4024d9] fwrite("int opterr = 1;\n\n/* Set to an op"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Set to an option character w"..., '1', 9862) = 0x00f0be49
[0x40cdf3] memchr("1.\n   Using `-' as the first cha"..., '\n', 8603) = 0x00f0be4b
[0x4022d1] memchr("\n/* Set to an option character w"..., '\n', 1196) = 0x00f0b95e
[0x4022d1] memchr("/* Set to an option character wh"..., '\n', 1195) = 0x00f0b994
[0x4022d1] memchr("   This must be initialized on s"..., '\n', 1141) = 0x00f0b9d8
[0x4022d1] memchr("   system's own getopt implement"..., '\n', 1073) = 0x00f0ba03
[0x4022d1] memchr("\nint optopt = '?';\n\n/* Describe "..., '\n', 1030) = 0x00f0ba04
[0x4022d1] memchr("int optopt = '?';\n\n/* Describe h"..., '\n', 1029) = 0x00f0ba16
[0x4022d1] memchr("\n/* Describe how to deal with op"..., '\n', 1011) = 0x00f0ba17
[0x4022d1] memchr("/* Describe how to deal with opt"..., '\n', 1010) = 0x00f0ba62
[0x4022d1] memchr("\n   If the caller did not specif"..., '\n', 935) = 0x00f0ba63
[0x4022d1] memchr("   If the caller did not specify"..., '\n', 934) = 0x00f0ba8e
[0x4022d1] memchr("   the default is REQUIRE_ORDER "..., '\n', 891) = 0x00f0baca
[0x4022d1] memchr("   POSIXLY_CORRECT is defined, P"..., '\n', 831) = 0x00f0bafc
[0x4022d1] memchr("\n   REQUIRE_ORDER means don't re"..., '\n', 781) = 0x00f0bafd
[0x4022d1] memchr("   REQUIRE_ORDER means don't rec"..., '\n', 780) = 0x00f0bb35
[0x4022d1] memchr("   stop option processing when t"..., '\n', 724) = 0x00f0bb72
[0x4022d1] memchr("   This is what Unix does.\n   Th"..., '\n', 663) = 0x00f0bb8d
[0x4022d1] memchr("   This mode of operation is sel"..., '\n', 636) = 0x00f0bbd5
[0x4022d1] memchr("   variable POSIXLY_CORRECT, or "..., '\n', 564) = 0x00f0bc16
[0x4022d1] memchr("   of the list of option charact"..., '\n', 499) = 0x00f0bc3b
[0x4022d1] memchr("\n   PERMUTE is the default.  We "..., '\n', 462) = 0x00f0bc3c
[0x4022d1] memchr("   PERMUTE is the default.  We p"..., '\n', 461) = 0x00f0bc84
[0x4022d1] memchr("   so that eventually all the no"..., '\n', 389) = 0x00f0bcd3
[0x4022d1] memchr("   to be given in any order, eve"..., '\n', 310) = 0x00f0bd1c
[0x4022d1] memchr("   expect this.\n\n   RETURN_IN_OR"..., '\n', 237) = 0x00f0bd2c
[0x4022d1] memchr("\n   RETURN_IN_ORDER is an option"..., '\n', 221) = 0x00f0bd2d
[0x4022d1] memchr("   RETURN_IN_ORDER is an option "..., '\n', 220) = 0x00f0bd75
[0x4022d1] memchr("   to expect options and other A"..., '\n', 148) = 0x00f0bdc3
[0x4022d1] memchr("   the ordering of the two.  We "..., '\n', 70) = 0x00f0be09
[0x4022d1] memchr("   as if it were the argument of"..., '\n', 0) = NULL
[0x4023cc] fwrite("1020:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   as if it were the argument of"..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   Using `-' as the first charac"..., '1', 8600) = 0x00f0c0ed
[0x40cdf3] memchr("1\n#endif\n#define\tmy_index\tstrchr"..., '\n', 7927) = 0x00f0c0ee
[0x4022d1] memchr("   Using `-' as the first charac"..., '\n', 653) = 0x00f0be90
[0x4022d1] memchr("   selects this mode of operatio"..., '\n', 584) = 0x00f0beb3
[0x4022d1] memchr("\n   The special argument `--' fo"..., '\n', 549) = 0x00f0beb4
[0x4022d1] memchr("   The special argument `--' for"..., '\n', 548) = 0x00f0befd
[0x4022d1] memchr("   of the value of `ordering'.  "..., '\n', 475) = 0x00f0bf42
[0x4022d1] memchr("   `--' can cause `getopt' to re"..., '\n', 406) = 0x00f0bf86
[0x4022d1] memchr("\nstatic enum\n{\n  REQUIRE_ORDER, "..., '\n', 338) = 0x00f0bf87
[0x4022d1] memchr("static enum\n{\n  REQUIRE_ORDER, P"..., '\n', 337) = 0x00f0bf93
[0x4022d1] memchr("{\n  REQUIRE_ORDER, PERMUTE, RETU"..., '\n', 325) = 0x00f0bf95
[0x4022d1] memchr("  REQUIRE_ORDER, PERMUTE, RETURN"..., '\n', 323) = 0x00f0bfbf
[0x4022d1] memchr("} ordering;\n\014\n#ifdef\t__GNU_LIBRA"..., '\n', 281) = 0x00f0bfcb
[0x4022d1] memchr("\014\n#ifdef\t__GNU_LIBRARY__\n/* We w"..., '\n', 269) = 0x00f0bfcd
[0x4022d1] memchr("#ifdef\t__GNU_LIBRARY__\n/* We wan"..., '\n', 267) = 0x00f0bfe4
[0x4022d1] memchr("/* We want to avoid inclusion of"..., '\n', 244) = 0x00f0c025
[0x4022d1] memchr("   because there are many ways i"..., '\n', 179) = 0x00f0c05a
[0x4022d1] memchr("   On some systems, it contains "..., '\n', 126) = 0x00f0c09f
[0x4022d1] memchr("   in GCC.  */\n#if flag_string=="..., '\n', 57) = 0x00f0c0ae
[0x4022d1] memchr("#if flag_string==0   \n#include <"..., '\n', 42) = 0x00f0c0c4
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f0c0d8
[0x4022d1] memchr("#define flag_string 1\n#endif\n#de"..., '\n', 0) = NULL
[0x4023cc] fwrite("1040:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_string 1\n#endif\n#de"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#define\tmy_index\tstrchr\n#"..., '1', 7925) = 0x00f0d4bb
[0x40cdf3] memchr("1 (since ARGV-element 0\n     is "..., '\n', 2857) = 0x00f0d4d2
[0x4022d1] memchr("#endif\n#define\tmy_index\tstrchr\n#"..., '\n', 5020) = 0x00f0c0f5
[0x4022d1] memchr("#define\tmy_index\tstrchr\n#define\t"..., '\n', 5013) = 0x00f0c10d
[0x4022d1] memchr("#define\tmy_bcopy(src, dst, n)\tme"..., '\n', 4989) = 0x00f0c146
[0x4022d1] memchr("#else\n\n/* Avoid depending on lib"..., '\n', 4932) = 0x00f0c14c
[0x4022d1] memchr("\n/* Avoid depending on library f"..., '\n', 4926) = 0x00f0c14d
[0x4022d1] memchr("/* Avoid depending on library fu"..., '\n', 4925) = 0x00f0c17e
[0x4022d1] memchr("   whose names are inconsistent."..., '\n', 4876) = 0x00f0c1a3
[0x4022d1] memchr("\nchar *getenv ();\n\nstatic char *"..., '\n', 4839) = 0x00f0c1a4
[0x4022d1] memchr("char *getenv ();\n\nstatic char *\n"..., '\n', 4838) = 0x00f0c1b5
[0x4022d1] memchr("\nstatic char *\nmy_index (str, ch"..., '\n', 4821) = 0x00f0c1b6
[0x4022d1] memchr("static char *\nmy_index (str, chr"..., '\n', 4820) = 0x00f0c1c4
[0x4022d1] memchr("my_index (str, chr)\n     const c"..., '\n', 4806) = 0x00f0c1d8
[0x4022d1] memchr("     const char *str;\n     int c"..., '\n', 4786) = 0x00f0c1ee
[0x4022d1] memchr("     int chr;\n{\n  while (*str)\n "..., '\n', 4764) = 0x00f0c1fc
[0x4022d1] memchr("{\n  while (*str)\n    {\n      if "..., '\n', 4750) = 0x00f0c1fe
[0x4022d1] memchr("  while (*str)\n    {\n      if (*"..., '\n', 4748) = 0x00f0c20d
[0x4022d1] memchr("    {\n      if (*str == chr)\n\tre"..., '\n', 4733) = 0x00f0c213
[0x4022d1] memchr("      if (*str == chr)\n\treturn ("..., '\n', 4727) = 0x00f0c22a
[0x4022d1] memchr("\treturn (char *) str;\n      str+"..., '\n', 4704) = 0x00f0c240
[0x4022d1] memchr("      str++;\n    }\n  return 0;\n}"..., '\n', 4682) = 0x00f0c24d
[0x4022d1] memchr("    }\n  return 0;\n}\n\nstatic void"..., '\n', 4669) = 0x00f0c253
[0x4022d1] memchr("  return 0;\n}\n\nstatic void\nmy_bc"..., '\n', 4663) = 0x00f0c25f
[0x4022d1] memchr("}\n\nstatic void\nmy_bcopy (from, t"..., '\n', 4651) = 0x00f0c261
[0x4022d1] memchr("\nstatic void\nmy_bcopy (from, to,"..., '\n', 4649) = 0x00f0c262
[0x4022d1] memchr("static void\nmy_bcopy (from, to, "..., '\n', 4648) = 0x00f0c26e
[0x4022d1] memchr("my_bcopy (from, to, size)\n     c"..., '\n', 4636) = 0x00f0c288
[0x4022d1] memchr("     const char *from;\n     char"..., '\n', 4610) = 0x00f0c29f
[0x4022d1] memchr("     char *to;\n     int size;\n{\n"..., '\n', 4587) = 0x00f0c2ae
[0x4022d1] memchr("     int size;\n{\n  int i;\n  for "..., '\n', 4572) = 0x00f0c2bd
[0x4022d1] memchr("{\n  int i;\n  for (i = 0; i < siz"..., '\n', 4557) = 0x00f0c2bf
[0x4022d1] memchr("  int i;\n  for (i = 0; i < size;"..., '\n', 4555) = 0x00f0c2c8
[0x4022d1] memchr("  for (i = 0; i < size; i++)\n   "..., '\n', 4546) = 0x00f0c2e5
[0x4022d1] memchr("    to[i] = from[i];\n}\n#endif\t\t\t"..., '\n', 4517) = 0x00f0c2fa
[0x4022d1] memchr("}\n#endif\t\t\t\t/* GNU C library.  *"..., '\n', 4496) = 0x00f0c2fc
[0x4022d1] memchr("#endif\t\t\t\t/* GNU C library.  */\n"..., '\n', 4494) = 0x00f0c31c
[0x4022d1] memchr("\014\n/* Handle permutation of argum"..., '\n', 4462) = 0x00f0c31e
[0x4022d1] memchr("/* Handle permutation of argumen"..., '\n', 4460) = 0x00f0c346
[0x4022d1] memchr("\n/* Describe the part of ARGV th"..., '\n', 4420) = 0x00f0c347
[0x4022d1] memchr("/* Describe the part of ARGV tha"..., '\n', 4419) = 0x00f0c388
[0x4022d1] memchr("   been skipped.  `first_nonopt'"..., '\n', 4354) = 0x00f0c3d4
[0x4022d1] memchr("   `last_nonopt' is the index af"..., '\n', 4278) = 0x00f0c40e
[0x4022d1] memchr("\nstatic int first_nonopt;\nstatic"..., '\n', 4220) = 0x00f0c40f
[0x4022d1] memchr("static int first_nonopt;\nstatic "..., '\n', 4219) = 0x00f0c428
[0x4022d1] memchr("static int last_nonopt;\n\n/* Exch"..., '\n', 4194) = 0x00f0c440
[0x4022d1] memchr("\n/* Exchange two adjacent subseq"..., '\n', 4170) = 0x00f0c441
[0x4022d1] memchr("/* Exchange two adjacent subsequ"..., '\n', 4169) = 0x00f0c470
[0x4022d1] memchr("   One subsequence is elements ["..., '\n', 4122) = 0x00f0c4aa
[0x4022d1] memchr("   which contains all the non-op"..., '\n', 4064) = 0x00f0c4ef
[0x4022d1] memchr("   The other is elements [last_n"..., '\n', 3995) = 0x00f0c531
[0x4022d1] memchr("   the options processed since t"..., '\n', 3929) = 0x00f0c570
[0x4022d1] memchr("\n   `first_nonopt' and `last_non"..., '\n', 3866) = 0x00f0c571
[0x4022d1] memchr("   `first_nonopt' and `last_nono"..., '\n', 3865) = 0x00f0c5b9
[0x4022d1] memchr("   the new indices of the non-op"..., '\n', 3793) = 0x00f0c601
[0x4022d1] memchr("\nstatic void\nexchange (argv)\n   "..., '\n', 3721) = 0x00f0c602
[0x4022d1] memchr("static void\nexchange (argv)\n    "..., '\n', 3720) = 0x00f0c60e
[0x4022d1] memchr("exchange (argv)\n     char **argv"..., '\n', 3708) = 0x00f0c61e
[0x4022d1] memchr("     char **argv;\n{\n  int nonopt"..., '\n', 3692) = 0x00f0c630
[0x4022d1] memchr("{\n  int nonopts_size = (last_non"..., '\n', 3674) = 0x00f0c632
[0x4022d1] memchr("  int nonopts_size = (last_nonop"..., '\n', 3672) = 0x00f0c677
[0x4022d1] memchr("  char **temp = (char **) __allo"..., '\n', 3603) = 0x00f0c6aa
[0x4022d1] memchr("\n  /* Interchange the two blocks"..., '\n', 3552) = 0x00f0c6ab
[0x4022d1] memchr("  /* Interchange the two blocks "..., '\n', 3551) = 0x00f0c6e0
[0x4022d1] memchr("\n  my_bcopy ((char *) &argv[firs"..., '\n', 3498) = 0x00f0c6e1
[0x4022d1] memchr("  my_bcopy ((char *) &argv[first"..., '\n', 3497) = 0x00f0c729
[0x4022d1] memchr("  my_bcopy ((char *) &argv[last_"..., '\n', 3425) = 0x00f0c770
[0x4022d1] memchr("\t    (optind - last_nonopt) * si"..., '\n', 3354) = 0x00f0c7a0
[0x4022d1] memchr("  my_bcopy ((char *) temp,\n\t    "..., '\n', 3306) = 0x00f0c7bb
[0x4022d1] memchr("\t    (char *) &argv[first_nonopt"..., '\n', 3279) = 0x00f0c7f5
[0x4022d1] memchr("\t    nonopts_size);\n\n  /* Update"..., '\n', 3221) = 0x00f0c809
[0x4022d1] memchr("\n  /* Update records for the slo"..., '\n', 3201) = 0x00f0c80a
[0x4022d1] memchr("  /* Update records for the slot"..., '\n', 3200) = 0x00f0c84c
[0x4022d1] memchr("\n  first_nonopt += (optind - las"..., '\n', 3134) = 0x00f0c84d
[0x4022d1] memchr("  first_nonopt += (optind - last"..., '\n', 3133) = 0x00f0c877
[0x4022d1] memchr("  last_nonopt = optind;\n}\n\014\n/* S"..., '\n', 3091) = 0x00f0c88f
[0x4022d1] memchr("}\n\014\n/* Scan elements of ARGV (wh"..., '\n', 3067) = 0x00f0c891
[0x4022d1] memchr("\014\n/* Scan elements of ARGV (whos"..., '\n', 3065) = 0x00f0c893
[0x4022d1] memchr("/* Scan elements of ARGV (whose "..., '\n', 3063) = 0x00f0c8d9
[0x4022d1] memchr("   given in OPTSTRING.\n\n   If an"..., '\n', 2993) = 0x00f0c8f0
[0x4022d1] memchr("\n   If an element of ARGV starts"..., '\n', 2970) = 0x00f0c8f1
[0x4022d1] memchr("   If an element of ARGV starts "..., '\n', 2969) = 0x00f0c93b
[0x4022d1] memchr("   then it is an option element."..., '\n', 2895) = 0x00f0c97c
[0x4022d1] memchr("   (aside from the initial '-') "..., '\n', 2830) = 0x00f0c9c0
[0x4022d1] memchr("   is called repeatedly, it retu"..., '\n', 2762) = 0x00f0ca0f
[0x4022d1] memchr("   from each of the option eleme"..., '\n', 2683) = 0x00f0ca34
[0x4022d1] memchr("\n   If `getopt' finds another op"..., '\n', 2646) = 0x00f0ca35
[0x4022d1] memchr("   If `getopt' finds another opt"..., '\n', 2645) = 0x00f0ca7f
[0x4022d1] memchr("   updating `optind' and `nextch"..., '\n', 2571) = 0x00f0cac9
[0x4022d1] memchr("   resume the scan with the foll"..., '\n', 2497) = 0x00f0cb11
[0x4022d1] memchr("\n   If there are no more option "..., '\n', 2425) = 0x00f0cb12
[0x4022d1] memchr("   If there are no more option c"..., '\n', 2424) = 0x00f0cb55
[0x4022d1] memchr("   Then `optind' is the index in"..., '\n', 2357) = 0x00f0cb95
[0x4022d1] memchr("   that is not an option.  (The "..., '\n', 2293) = 0x00f0cbd6
[0x4022d1] memchr("   so that those that are not op"..., '\n', 2228) = 0x00f0cc0c
[0x4022d1] memchr("\n   OPTSTRING is a string contai"..., '\n', 2174) = 0x00f0cc0d
[0x4022d1] memchr("   OPTSTRING is a string contain"..., '\n', 2173) = 0x00f0cc53
[0x4022d1] memchr("   If an option character is see"..., '\n', 2103) = 0x00f0cc96
[0x4022d1] memchr("   return '?' after printing an "..., '\n', 2036) = 0x00f0ccdd
[0x4022d1] memchr("   zero, the error message is su"..., '\n', 1965) = 0x00f0cd1f
[0x4022d1] memchr("\n   If a char in OPTSTRING is fo"..., '\n', 1899) = 0x00f0cd20
[0x4022d1] memchr("   If a char in OPTSTRING is fol"..., '\n', 1898) = 0x00f0cd6e
[0x4022d1] memchr("   so the following text in the "..., '\n', 1820) = 0x00f0cdbe
[0x4022d1] memchr("   ARGV-element, is returned in "..., '\n', 1740) = 0x00f0ce08
[0x4022d1] memchr("   wants an optional arg; if the"..., '\n', 1666) = 0x00f0ce50
[0x4022d1] memchr("   it is returned in `optarg', o"..., '\n', 1594) = 0x00f0ce92
[0x4022d1] memchr("\n   If OPTSTRING starts with `-'"..., '\n', 1528) = 0x00f0ce93
[0x4022d1] memchr("   If OPTSTRING starts with `-' "..., '\n', 1527) = 0x00f0cedc
[0x4022d1] memchr("   handling the non-option ARGV-"..., '\n', 1454) = 0x00f0cf06
[0x4022d1] memchr("   See the comments about RETURN"..., '\n', 1412) = 0x00f0cf4a
[0x4022d1] memchr("\n   Long-named options begin wit"..., '\n', 1344) = 0x00f0cf4b
[0x4022d1] memchr("   Long-named options begin with"..., '\n', 1343) = 0x00f0cf81
[0x4022d1] memchr("   Their names may be abbreviate"..., '\n', 1289) = 0x00f0cfc9
[0x4022d1] memchr("   or is an exact match for some"..., '\n', 1217) = 0x00f0d00b
[0x4022d1] memchr("   argument, it follows the opti"..., '\n', 1151) = 0x00f0d057
[0x4022d1] memchr("   from the option name by a `='"..., '\n', 1075) = 0x00f0d09b
[0x4022d1] memchr("   When `getopt' finds a long-na"..., '\n', 1007) = 0x00f0d0e5
[0x4022d1] memchr("   `flag' field is nonzero, the "..., '\n', 933) = 0x00f0d127
[0x4022d1] memchr("   if the `flag' field is zero.\n"..., '\n', 867) = 0x00f0d147
[0x4022d1] memchr("\n   The elements of ARGV aren't "..., '\n', 835) = 0x00f0d148
[0x4022d1] memchr("   The elements of ARGV aren't r"..., '\n', 834) = 0x00f0d18e
[0x4022d1] memchr("   But we pretend they're const "..., '\n', 764) = 0x00f0d1d0
[0x4022d1] memchr("   with other systems.\n\n   LONGO"..., '\n', 698) = 0x00f0d1e7
[0x4022d1] memchr("\n   LONGOPTS is a vector of `str"..., '\n', 675) = 0x00f0d1e8
[0x4022d1] memchr("   LONGOPTS is a vector of `stru"..., '\n', 674) = 0x00f0d224
[0x4022d1] memchr("   element containing a name whi"..., '\n', 614) = 0x00f0d250
[0x4022d1] memchr("\n   LONGIND returns the index in"..., '\n', 570) = 0x00f0d251
[0x4022d1] memchr("   LONGIND returns the index in "..., '\n', 569) = 0x00f0d299
[0x4022d1] memchr("   It is only valid when a long-"..., '\n', 497) = 0x00f0d2e1
[0x4022d1] memchr("   recent call.\n\n   If LONG_ONLY"..., '\n', 425) = 0x00f0d2f1
[0x4022d1] memchr("\n   If LONG_ONLY is nonzero, '-'"..., '\n', 409) = 0x00f0d2f2
[0x4022d1] memchr("   If LONG_ONLY is nonzero, '-' "..., '\n', 408) = 0x00f0d330
[0x4022d1] memchr("   long-named options.  */\n\nint\n"..., '\n', 346) = 0x00f0d34b
[0x4022d1] memchr("\nint\n_getopt_internal (argc, arg"..., '\n', 319) = 0x00f0d34c
[0x4022d1] memchr("int\n_getopt_internal (argc, argv"..., '\n', 318) = 0x00f0d350
[0x4022d1] memchr("_getopt_internal (argc, argv, op"..., '\n', 314) = 0x00f0d397
[0x4022d1] memchr("     int argc;\n     char *const "..., '\n', 243) = 0x00f0d3a6
[0x4022d1] memchr("     char *const *argv;\n     con"..., '\n', 228) = 0x00f0d3be
[0x4022d1] memchr("     const char *optstring;\n    "..., '\n', 204) = 0x00f0d3da
[0x4022d1] memchr("     const struct option *longop"..., '\n', 176) = 0x00f0d3fe
[0x4022d1] memchr("     int *longind;\n     int long"..., '\n', 140) = 0x00f0d411
[0x4022d1] memchr("     int long_only;\n{\n  int opti"..., '\n', 121) = 0x00f0d425
[0x4022d1] memchr("{\n  int option_index;\n\n  optarg "..., '\n', 101) = 0x00f0d427
[0x4022d1] memchr("  int option_index;\n\n  optarg = "..., '\n', 99) = 0x00f0d43b
[0x4022d1] memchr("\n  optarg = 0;\n\n  /* Initialize "..., '\n', 79) = 0x00f0d43c
[0x4022d1] memchr("  optarg = 0;\n\n  /* Initialize t"..., '\n', 78) = 0x00f0d44a
[0x4022d1] memchr("\n  /* Initialize the internal da"..., '\n', 64) = 0x00f0d44b
[0x4022d1] memchr("  /* Initialize the internal dat"..., '\n', 63) = 0x00f0d48a
[0x4022d1] memchr("     Start processing options wi"..., '\n', 0) = NULL
[0x4023cc] fwrite("1187:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     Start processing options wi"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     is the program name); the s"..., '1', 2833) = 0x00f0d583
[0x40cdf3] memchr("1;\n\n      nextchar = NULL;\n\n    "..., '\n', 2657) = 0x00f0d585
[0x4022d1] memchr("     is the program name); the s"..., '\n', 132) = 0x00f0d510
[0x4022d1] memchr("     non-option ARGV-elements is"..., '\n', 70) = 0x00f0d53c
[0x4022d1] memchr("\n  if (optind == 0)\n    {\n      "..., '\n', 26) = 0x00f0d53d
[0x4022d1] memchr("  if (optind == 0)\n    {\n      f"..., '\n', 25) = 0x00f0d550
[0x4022d1] memchr("    {\n      first_nonopt = last_"..., '\n', 6) = 0x00f0d556
[0x4022d1] memchr("      first_nonopt = last_nonopt"..., '\n', 0) = NULL
[0x4023cc] fwrite("1193:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      first_nonopt = last_nonopt"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      nextchar = NULL;\n\n      /"..., '1', 2654) = 0x00f0d934
[0x40cdf3] memchr("1] == '\\0')\n#ifdef GETOPT_COMPAT"..., '\n', 1712) = 0x00f0d93f
[0x4022d1] memchr("\n      nextchar = NULL;\n\n      /"..., '\n', 896) = 0x00f0d586
[0x4022d1] memchr("      nextchar = NULL;\n\n      /*"..., '\n', 895) = 0x00f0d59d
[0x4022d1] memchr("\n      /* Determine how to handl"..., '\n', 872) = 0x00f0d59e
[0x4022d1] memchr("      /* Determine how to handle"..., '\n', 871) = 0x00f0d5eb
[0x4022d1] memchr("\n      if (optstring[0] == '-')\n"..., '\n', 794) = 0x00f0d5ec
[0x4022d1] memchr("      if (optstring[0] == '-')\n\t"..., '\n', 793) = 0x00f0d60b
[0x4022d1] memchr("\t{\n\t  ordering = RETURN_IN_ORDER"..., '\n', 762) = 0x00f0d60e
[0x4022d1] memchr("\t  ordering = RETURN_IN_ORDER;\n\t"..., '\n', 759) = 0x00f0d62d
[0x4022d1] memchr("\t  ++optstring;\n\t}\n      else if"..., '\n', 728) = 0x00f0d63d
[0x4022d1] memchr("\t}\n      else if (optstring[0] ="..., '\n', 712) = 0x00f0d640
[0x4022d1] memchr("      else if (optstring[0] == '"..., '\n', 709) = 0x00f0d664
[0x4022d1] memchr("\t{\n\t  ordering = REQUIRE_ORDER;\n"..., '\n', 673) = 0x00f0d667
[0x4022d1] memchr("\t  ordering = REQUIRE_ORDER;\n\t  "..., '\n', 670) = 0x00f0d684
[0x4022d1] memchr("\t  ++optstring;\n\t}\n      else if"..., '\n', 641) = 0x00f0d694
[0x4022d1] memchr("\t}\n      else if (getenv ("POSIX"..., '\n', 625) = 0x00f0d697
[0x4022d1] memchr("      else if (getenv ("POSIXLY_"..., '\n', 622) = 0x00f0d6ca
[0x4022d1] memchr("\tordering = REQUIRE_ORDER;\n     "..., '\n', 571) = 0x00f0d6e5
[0x4022d1] memchr("      else\n\tordering = PERMUTE;\n"..., '\n', 544) = 0x00f0d6f0
[0x4022d1] memchr("\tordering = PERMUTE;\n    }\n\n  if"..., '\n', 533) = 0x00f0d705
[0x4022d1] memchr("    }\n\n  if (nextchar == NULL ||"..., '\n', 512) = 0x00f0d70b
[0x4022d1] memchr("\n  if (nextchar == NULL || *next"..., '\n', 506) = 0x00f0d70c
[0x4022d1] memchr("  if (nextchar == NULL || *nextc"..., '\n', 505) = 0x00f0d739
[0x4022d1] memchr("    {\n      if (ordering == PERM"..., '\n', 460) = 0x00f0d73f
[0x4022d1] memchr("      if (ordering == PERMUTE)\n\t"..., '\n', 454) = 0x00f0d75e
[0x4022d1] memchr("\t{\n\t  /* If we have just process"..., '\n', 423) = 0x00f0d761
[0x4022d1] memchr("\t  /* If we have just processed "..., '\n', 420) = 0x00f0d7aa
[0x4022d1] memchr("\t     exchange them so that the "..., '\n', 347) = 0x00f0d7e2
[0x4022d1] memchr("\n\t  if (first_nonopt != last_non"..., '\n', 291) = 0x00f0d7e3
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 290) = 0x00f0d820
[0x4022d1] memchr("\t    exchange ((char **) argv);\n"..., '\n', 229) = 0x00f0d840
[0x4022d1] memchr("\t  else if (last_nonopt != optin"..., '\n', 197) = 0x00f0d863
[0x4022d1] memchr("\t    first_nonopt = optind;\n\n\t  "..., '\n', 162) = 0x00f0d87f
[0x4022d1] memchr("\n\t  /* Now skip any additional n"..., '\n', 134) = 0x00f0d880
[0x4022d1] memchr("\t  /* Now skip any additional no"..., '\n', 133) = 0x00f0d8aa
[0x4022d1] memchr("\t     and extend the range of no"..., '\n', 91) = 0x00f0d8ec
[0x4022d1] memchr("\n\t  while (optind < argc\n\t\t && ("..., '\n', 25) = 0x00f0d8ed
[0x4022d1] memchr("\t  while (optind < argc\n\t\t && (a"..., '\n', 24) = 0x00f0d905
[0x4022d1] memchr("\t\t && (argv[optind][0] != '-' ||"..., '\n', 0) = NULL
[0x4023cc] fwrite("1231:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t && (argv[optind][0] != '-' ||"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef GETOPT_COMPAT\n\t\t && (long"..., '1', 1700) = 0x00f0d99e
[0x40cdf3] memchr("1] == '\\0')\n#endif\t\t\t\t/* GETOPT_"..., '\n', 1606) = 0x00f0d9a9
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t\t && (long"..., '\n', 45) = 0x00f0d954
[0x4022d1] memchr("\t\t && (longopts == NULL\n\t\t     |"..., '\n', 24) = 0x00f0d96c
[0x4022d1] memchr("\t\t     || argv[optind][0] != '+'"..., '\n', 0) = NULL
[0x4023cc] fwrite("1234:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t     || argv[optind][0] != '+'"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t\t"..., '1', 1594) = 0x00f0de18
[0x40cdf3] memchr("1] == '\\0')\n#ifdef GETOPT_COMPAT"..., '\n', 460) = 0x00f0de23
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t\t"..., '\n', 1084) = 0x00f0d9c7
[0x4022d1] memchr("\t\t )\n\t    optind++;\n\t  last_nono"..., '\n', 1054) = 0x00f0d9cc
[0x4022d1] memchr("\t    optind++;\n\t  last_nonopt = "..., '\n', 1049) = 0x00f0d9db
[0x4022d1] memchr("\t  last_nonopt = optind;\n\t}\n\n   "..., '\n', 1034) = 0x00f0d9f4
[0x4022d1] memchr("\t}\n\n      /* Special ARGV-elemen"..., '\n', 1009) = 0x00f0d9f7
[0x4022d1] memchr("\n      /* Special ARGV-element `"..., '\n', 1006) = 0x00f0d9f8
[0x4022d1] memchr("      /* Special ARGV-element `-"..., '\n', 1005) = 0x00f0da3b
[0x4022d1] memchr("\t Skip it like a null option,\n\t "..., '\n', 938) = 0x00f0da59
[0x4022d1] memchr("\t then exchange with previous no"..., '\n', 908) = 0x00f0da9c
[0x4022d1] memchr("\t then skip everything else like"..., '\n', 841) = 0x00f0dacf
[0x4022d1] memchr("\n      if (optind != argc && !st"..., '\n', 790) = 0x00f0dad0
[0x4022d1] memchr("      if (optind != argc && !str"..., '\n', 789) = 0x00f0db0a
[0x4022d1] memchr("\t{\n\t  optind++;\n\n\t  if (first_no"..., '\n', 731) = 0x00f0db0d
[0x4022d1] memchr("\t  optind++;\n\n\t  if (first_nonop"..., '\n', 728) = 0x00f0db1a
[0x4022d1] memchr("\n\t  if (first_nonopt != last_non"..., '\n', 715) = 0x00f0db1b
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 714) = 0x00f0db58
[0x4022d1] memchr("\t    exchange ((char **) argv);\n"..., '\n', 653) = 0x00f0db78
[0x4022d1] memchr("\t  else if (first_nonopt == last"..., '\n', 621) = 0x00f0dba1
[0x4022d1] memchr("\t    first_nonopt = optind;\n\t  l"..., '\n', 580) = 0x00f0dbbd
[0x4022d1] memchr("\t  last_nonopt = argc;\n\n\t  optin"..., '\n', 552) = 0x00f0dbd4
[0x4022d1] memchr("\n\t  optind = argc;\n\t}\n\n      /* "..., '\n', 529) = 0x00f0dbd5
[0x4022d1] memchr("\t  optind = argc;\n\t}\n\n      /* I"..., '\n', 528) = 0x00f0dbe7
[0x4022d1] memchr("\t}\n\n      /* If we have done all"..., '\n', 510) = 0x00f0dbea
[0x4022d1] memchr("\n      /* If we have done all th"..., '\n', 507) = 0x00f0dbeb
[0x4022d1] memchr("      /* If we have done all the"..., '\n', 506) = 0x00f0dc29
[0x4022d1] memchr("\t and back over any non-options "..., '\n', 444) = 0x00f0dc6b
[0x4022d1] memchr("\n      if (optind == argc)\n\t{\n\t "..., '\n', 378) = 0x00f0dc6c
[0x4022d1] memchr("      if (optind == argc)\n\t{\n\t  "..., '\n', 377) = 0x00f0dc86
[0x4022d1] memchr("\t{\n\t  /* Set the next-arg-index "..., '\n', 351) = 0x00f0dc89
[0x4022d1] memchr("\t  /* Set the next-arg-index to "..., '\n', 348) = 0x00f0dcc2
[0x4022d1] memchr("\t     that we previously skipped"..., '\n', 291) = 0x00f0dd08
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 221) = 0x00f0dd2c
[0x4022d1] memchr("\t    optind = first_nonopt;\n\t  r"..., '\n', 185) = 0x00f0dd48
[0x4022d1] memchr("\t  return EOF;\n\t}\n\n      /* If w"..., '\n', 157) = 0x00f0dd57
[0x4022d1] memchr("\t}\n\n      /* If we have come to "..., '\n', 142) = 0x00f0dd5a
[0x4022d1] memchr("\n      /* If we have come to a n"..., '\n', 139) = 0x00f0dd5b
[0x4022d1] memchr("      /* If we have come to a no"..., '\n', 138) = 0x00f0dd9c
[0x4022d1] memchr("\t either stop the scan or descri"..., '\n', 73) = 0x00f0dde4
[0x4022d1] memchr("\n      if ((argv[optind][0] != '"..., '\n', 1) = 0x00f0dde5
[0x4022d1] memchr("      if ((argv[optind][0] != '-"..., '\n', 0) = NULL
[0x4023cc] fwrite("1274:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if ((argv[optind][0] != '-"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef GETOPT_COMPAT\n\t  && (long"..., '1', 448) = 0x00f0de82
[0x40cdf3] memchr("1] == '\\0')\n#endif\t\t\t\t/* GETOPT_"..., '\n', 354) = 0x00f0de8d
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  && (long"..., '\n', 45) = 0x00f0de38
[0x4022d1] memchr("\t  && (longopts == NULL\n\t      |"..., '\n', 24) = 0x00f0de50
[0x4022d1] memchr("\t      || argv[optind][0] != '+'"..., '\n', 0) = NULL
[0x4023cc] fwrite("1277:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      || argv[optind][0] != '+'"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '1', 342) = 0x00f0df0d
[0x40cdf3] memchr("1;\n\t}\n\n      /* We have found an"..., '\n', 215) = 0x00f0df0f
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 117) = 0x00f0deab
[0x4022d1] memchr("\t  )\n\t{\n\t  if (ordering == REQUI"..., '\n', 87) = 0x00f0deb0
[0x4022d1] memchr("\t{\n\t  if (ordering == REQUIRE_OR"..., '\n', 82) = 0x00f0deb3
[0x4022d1] memchr("\t  if (ordering == REQUIRE_ORDER"..., '\n', 79) = 0x00f0ded5
[0x4022d1] memchr("\t    return EOF;\n\t  optarg = arg"..., '\n', 45) = 0x00f0dee6
[0x4022d1] memchr("\t  optarg = argv[optind++];\n\t  r"..., '\n', 28) = 0x00f0df02
[0x4022d1] memchr("\t  return 1;\n\t}\n\n      /* We hav"..., '\n', 0) = NULL
[0x4023cc] fwrite("1284:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  return 1;\n\t}\n\n      /* We hav"..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n\n      /* We have found anoth"..., '1', 212) = 0x00f0df8f
[0x40cdf3] memchr("1\n\t\t  + (longopts != NULL && arg"..., '\n', 85) = 0x00f0df90
[0x4022d1] memchr("\t}\n\n      /* We have found anoth"..., '\n', 94) = 0x00f0df12
[0x4022d1] memchr("\n      /* We have found another "..., '\n', 91) = 0x00f0df13
[0x4022d1] memchr("      /* We have found another o"..., '\n', 90) = 0x00f0df47
[0x4022d1] memchr("\t Start decoding its characters."..., '\n', 38) = 0x00f0df6c
[0x4022d1] memchr("\n      nextchar = (argv[optind] "..., '\n', 1) = 0x00f0df6d
[0x4022d1] memchr("      nextchar = (argv[optind] +"..., '\n', 0) = NULL
[0x4023cc] fwrite("1290:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      nextchar = (argv[optind] +"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  + (longopts != NULL && argv["..., '1', 83) = 0x00f0dfb9
[0x40cdf3] memchr("1] == '-'));\n    }\n\n  if (longop"..., '\n', 43) = 0x00f0dfc5
[0x4022d1] memchr("\t\t  + (longopts != NULL && argv["..., '\n', 0) = NULL
[0x4023cc] fwrite("1291:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  + (longopts != NULL && argv["..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n\n  if (longopts != NULL\n  "..., '1', 30) = NULL
[0x4022d1] memchr("    }\n\n  if (longopts != NULL\n  "..., '\n', 30) = 0x00f0dfcb
[0x4022d1] memchr("\n  if (longopts != NULL\n      &&"..., '\n', 24) = 0x00f0dfcc
[0x4022d1] memchr("  if (longopts != NULL\n      && "..., '\n', 23) = 0x00f0dfe3
[0x4022d1] memchr("      && ((argv[optind][0] =", '\n', 0) = NULL
[0x4020b3] memmove(0xf05fe4, 0xf0dfe4, 28, 0xf0dfe4, 0x7fce6d444260) = 0xf05fe4
[0x402213] read(3, "= '-'\n\t   && (argv[optind][1] =="..., 32768) = 32768
[0x40bc2b] memchr("      && ((argv[optind][0] == '-"..., '1', 32789) = 0x00f0601b
[0x40cdf3] memchr("1] == '-' || long_only))\n#ifdef "..., '\n', 32734) = 0x00f06033
[0x4022d1] memchr("      && ((argv[optind][0] == '-"..., '\n', 34) = 0x00f06005
[0x4022d1] memchr("\t   && (argv[optind][1] == '-' |"..., '\n', 0) = NULL
[0x4023cc] fwrite("1296:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t   && (argv[optind][1] == '-' |"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '1', 32709) = 0x00f062a9
[0x40cdf3] memchr("1;\n\t\tbreak;\n\t      }\n\t    else i"..., '\n', 32080) = 0x00f062ab
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '\n', 619) = 0x00f06048
[0x4022d1] memchr("\t  || argv[optind][0] == '+'\n#en"..., '\n', 598) = 0x00f06065
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 569) = 0x00f06083
[0x4022d1] memchr("\t  ))\n    {\n      const struct o"..., '\n', 539) = 0x00f06089
[0x4022d1] memchr("    {\n      const struct option "..., '\n', 533) = 0x00f0608f
[0x4022d1] memchr("      const struct option *p;\n  "..., '\n', 527) = 0x00f060ad
[0x4022d1] memchr("      char *s = nextchar;\n      "..., '\n', 497) = 0x00f060c7
[0x4022d1] memchr("      int exact = 0;\n      int a"..., '\n', 471) = 0x00f060dc
[0x4022d1] memchr("      int ambig = 0;\n      const"..., '\n', 450) = 0x00f060f1
[0x4022d1] memchr("      const struct option *pfoun"..., '\n', 429) = 0x00f0611b
[0x4022d1] memchr("      int indfound;\n\n      while"..., '\n', 387) = 0x00f0612f
[0x4022d1] memchr("\n      while (*s && *s != '=')\n\t"..., '\n', 367) = 0x00f06130
[0x4022d1] memchr("      while (*s && *s != '=')\n\ts"..., '\n', 366) = 0x00f0614e
[0x4022d1] memchr("\ts++;\n\n      /* Test all options"..., '\n', 336) = 0x00f06154
[0x4022d1] memchr("\n      /* Test all options for e"..., '\n', 330) = 0x00f06155
[0x4022d1] memchr("      /* Test all options for ei"..., '\n', 329) = 0x00f061a2
[0x4022d1] memchr("      for (p = longopts, option_"..., '\n', 252) = 0x00f061d6
[0x4022d1] memchr("\t   p++, option_index++)\n\tif (!s"..., '\n', 200) = 0x00f061ef
[0x4022d1] memchr("\tif (!strncmp (p->name, nextchar"..., '\n', 175) = 0x00f06220
[0x4022d1] memchr("\t  {\n\t    if (s - nextchar == st"..., '\n', 126) = 0x00f06225
[0x4022d1] memchr("\t    if (s - nextchar == strlen "..., '\n', 121) = 0x00f06250
[0x4022d1] memchr("\t      {\n\t\t/* Exact match found."..., '\n', 78) = 0x00f06259
[0x4022d1] memchr("\t\t/* Exact match found.  */\n\t\tpf"..., '\n', 69) = 0x00f06275
[0x4022d1] memchr("\t\tpfound = p;\n\t\tindfound = optio"..., '\n', 41) = 0x00f06283
[0x4022d1] memchr("\t\tindfound = option_index;\n\t\texa"..., '\n', 27) = 0x00f0629e
[0x4022d1] memchr("\t\texact = 1;\n\t\tbreak;\n\t      }\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("1322:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\texact = 1;\n\t\tbreak;\n\t      }\n\t"..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\tbreak;\n\t      }\n\t    else if ("..., '1', 32077) = 0x00f06380
[0x40cdf3] memchr("1;\n\t  }\n\n      if (ambig && !exa"..., '\n', 31865) = 0x00f06382
[0x4022d1] memchr("\t\tbreak;\n\t      }\n\t    else if ("..., '\n', 197) = 0x00f062b4
[0x4022d1] memchr("\t      }\n\t    else if (pfound =="..., '\n', 188) = 0x00f062bd
[0x4022d1] memchr("\t    else if (pfound == NULL)\n\t "..., '\n', 179) = 0x00f062db
[0x4022d1] memchr("\t      {\n\t\t/* First nonexact mat"..., '\n', 149) = 0x00f062e4
[0x4022d1] memchr("\t\t/* First nonexact match found."..., '\n', 140) = 0x00f06309
[0x4022d1] memchr("\t\tpfound = p;\n\t\tindfound = optio"..., '\n', 103) = 0x00f06317
[0x4022d1] memchr("\t\tindfound = option_index;\n\t    "..., '\n', 89) = 0x00f06332
[0x4022d1] memchr("\t      }\n\t    else\n\t      /* Sec"..., '\n', 62) = 0x00f0633b
[0x4022d1] memchr("\t    else\n\t      /* Second nonex"..., '\n', 53) = 0x00f06345
[0x4022d1] memchr("\t      /* Second nonexact match "..., '\n', 43) = 0x00f06370
[0x4022d1] memchr("\t      ambig = 1;\n\t  }\n\n      if"..., '\n', 0) = NULL
[0x4023cc] fwrite("1333:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      ambig = 1;\n\t  }\n\n      if"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  }\n\n      if (ambig && !exact)"..., '1', 31862) = 0x00f0653b
[0x40cdf3] memchr("1;\n\t      else\n\t\t{\n\t\t  if (opter"..., '\n', 31422) = 0x00f0653d
[0x4022d1] memchr("\t  }\n\n      if (ambig && !exact)"..., '\n', 425) = 0x00f06387
[0x4022d1] memchr("\n      if (ambig && !exact)\n\t{\n\t"..., '\n', 420) = 0x00f06388
[0x4022d1] memchr("      if (ambig && !exact)\n\t{\n\t "..., '\n', 419) = 0x00f063a3
[0x4022d1] memchr("\t{\n\t  if (opterr)\n\t    fprintf ("..., '\n', 392) = 0x00f063a6
[0x4022d1] memchr("\t  if (opterr)\n\t    fprintf (std"..., '\n', 389) = 0x00f063b5
[0x4022d1] memchr("\t    fprintf (stderr, "%s: optio"..., '\n', 374) = 0x00f063ed
[0x4022d1] memchr("\t\t     argv[0], argv[optind]);\n\t"..., '\n', 318) = 0x00f0640c
[0x4022d1] memchr("\t  nextchar += strlen (nextchar)"..., '\n', 287) = 0x00f0642e
[0x4022d1] memchr("\t  optind++;\n\t  return '?';\n\t}\n\n"..., '\n', 253) = 0x00f0643b
[0x4022d1] memchr("\t  return '?';\n\t}\n\n      if (pfo"..., '\n', 240) = 0x00f0644a
[0x4022d1] memchr("\t}\n\n      if (pfound != NULL)\n\t{"..., '\n', 225) = 0x00f0644d
[0x4022d1] memchr("\n      if (pfound != NULL)\n\t{\n\t "..., '\n', 222) = 0x00f0644e
[0x4022d1] memchr("      if (pfound != NULL)\n\t{\n\t  "..., '\n', 221) = 0x00f06468
[0x4022d1] memchr("\t{\n\t  option_index = indfound;\n\t"..., '\n', 195) = 0x00f0646b
[0x4022d1] memchr("\t  option_index = indfound;\n\t  o"..., '\n', 192) = 0x00f06487
[0x4022d1] memchr("\t  optind++;\n\t  if (*s)\n\t    {\n\t"..., '\n', 164) = 0x00f06494
[0x4022d1] memchr("\t  if (*s)\n\t    {\n\t      /* Don'"..., '\n', 151) = 0x00f0649f
[0x4022d1] memchr("\t    {\n\t      /* Don't test has_"..., '\n', 140) = 0x00f064a6
[0x4022d1] memchr("\t      /* Don't test has_arg wit"..., '\n', 133) = 0x00f064ea
[0x4022d1] memchr("\t\t allow it to be used on enums."..., '\n', 65) = 0x00f0650f
[0x4022d1] memchr("\t      if (pfound->has_arg)\n\t\top"..., '\n', 28) = 0x00f0652b
[0x4022d1] memchr("\t\toptarg = s + 1;\n\t      else\n\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("1355:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\toptarg = s + 1;\n\t      else\n\t\t"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      else\n\t\t{\n\t\t  if (opterr)\n"..., '1', 31419) = 0x00f06580
[0x40cdf3] memchr("1][1] == '-')\n\t\t\t/* --option */\n"..., '\n', 31353) = 0x00f0658d
[0x4022d1] memchr("\t      else\n\t\t{\n\t\t  if (opterr)\n"..., '\n', 40) = 0x00f06549
[0x4022d1] memchr("\t\t{\n\t\t  if (opterr)\n\t\t    {\n\t\t  "..., '\n', 28) = 0x00f0654d
[0x4022d1] memchr("\t\t  if (opterr)\n\t\t    {\n\t\t      "..., '\n', 24) = 0x00f0655d
[0x4022d1] memchr("\t\t    {\n\t\t      if (argv[optind "..., '\n', 8) = 0x00f06565
[0x4022d1] memchr("\t\t      if (argv[optind - 1][1] "..., '\n', 0) = NULL
[0x4023cc] fwrite("1360:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      if (argv[optind - 1][1] "..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t/* --option */\n\t\t\tfprintf (st"..., '1', 31339) = 0x00f0669c
[0x40cdf3] memchr("1][0], pfound->name);\n\t\t    }\n\t\t"..., '\n', 31069) = 0x00f066b1
[0x4022d1] memchr("\t\t\t/* --option */\n\t\t\tfprintf (st"..., '\n', 239) = 0x00f0659f
[0x4022d1] memchr("\t\t\tfprintf (stderr,\n\t\t\t\t "%s: op"..., '\n', 221) = 0x00f065b3
[0x4022d1] memchr("\t\t\t\t "%s: option `--%s' doesn't "..., '\n', 201) = 0x00f065e9
[0x4022d1] memchr("\t\t\t\t argv[0], pfound->name);\n\t\t "..., '\n', 147) = 0x00f06606
[0x4022d1] memchr("\t\t      else\n\t\t\t/* +option or -o"..., '\n', 118) = 0x00f06613
[0x4022d1] memchr("\t\t\t/* +option or -option */\n\t\t\tf"..., '\n', 105) = 0x00f0662f
[0x4022d1] memchr("\t\t\tfprintf (stderr,\n\t\t\t     "%s:"..., '\n', 77) = 0x00f06643
[0x4022d1] memchr("\t\t\t     "%s: option `%c%s' doesn"..., '\n', 57) = 0x00f0667c
[0x4022d1] memchr("\t\t\t     argv[0], argv[optind - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("1369:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t     argv[0], argv[optind - 1"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    }\n\t\t  nextchar += strlen ("..., '1', 31047) = 0x00f06717
[0x40cdf3] memchr("1)\n\t    {\n\t      if (optind < ar"..., '\n', 30946) = 0x00f06719
[0x4022d1] memchr("\t\t    }\n\t\t  nextchar += strlen ("..., '\n', 70) = 0x00f066b9
[0x4022d1] memchr("\t\t  nextchar += strlen (nextchar"..., '\n', 62) = 0x00f066dc
[0x4022d1] memchr("\t\t  return '?';\n\t\t}\n\t    }\n\t  el"..., '\n', 27) = 0x00f066ec
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else if (pfound->h"..., '\n', 11) = 0x00f066f0
[0x4022d1] memchr("\t    }\n\t  else if (pfound->has_a"..., '\n', 7) = 0x00f066f7
[0x4022d1] memchr("\t  else if (pfound->has_arg == 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("1375:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  else if (pfound->has_arg == 1"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    {\n\t      if (optind < argc)"..., '1', 30943) = 0x00f067d6
[0x40cdf3] memchr("1]);\n\t\t  nextchar += strlen (nex"..., '\n', 30755) = 0x00f067da
[0x4022d1] memchr("\t    {\n\t      if (optind < argc)"..., '\n', 157) = 0x00f06720
[0x4022d1] memchr("\t      if (optind < argc)\n\t\topta"..., '\n', 150) = 0x00f0673a
[0x4022d1] memchr("\t\toptarg = argv[optind++];\n\t    "..., '\n', 124) = 0x00f06755
[0x4022d1] memchr("\t      else\n\t\t{\n\t\t  if (opterr)\n"..., '\n', 97) = 0x00f06761
[0x4022d1] memchr("\t\t{\n\t\t  if (opterr)\n\t\t    fprint"..., '\n', 85) = 0x00f06765
[0x4022d1] memchr("\t\t  if (opterr)\n\t\t    fprintf (s"..., '\n', 81) = 0x00f06775
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 65) = 0x00f067b6
[0x4022d1] memchr("\t\t\t     argv[0], argv[optind - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("1383:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t     argv[0], argv[optind - 1"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  nextchar += strlen (nextchar"..., '1', 30750) = 0x00f069f8
[0x40cdf3] memchr("1] == '-'\n#ifdef GETOPT_COMPAT\n\t"..., '\n', 30209) = 0x00f06a01
[0x4022d1] memchr("\t\t  nextchar += strlen (nextchar"..., '\n', 504) = 0x00f067fd
[0x4022d1] memchr("\t\t  return optstring[0] == ':' ?"..., '\n', 469) = 0x00f06829
[0x4022d1] memchr("\t\t}\n\t    }\n\t  nextchar += strlen"..., '\n', 425) = 0x00f0682d
[0x4022d1] memchr("\t    }\n\t  nextchar += strlen (ne"..., '\n', 421) = 0x00f06834
[0x4022d1] memchr("\t  nextchar += strlen (nextchar)"..., '\n', 414) = 0x00f06856
[0x4022d1] memchr("\t  if (longind != NULL)\n\t    *lo"..., '\n', 380) = 0x00f0686e
[0x4022d1] memchr("\t    *longind = option_index;\n\t "..., '\n', 356) = 0x00f0688c
[0x4022d1] memchr("\t  if (pfound->flag)\n\t    {\n\t   "..., '\n', 326) = 0x00f068a1
[0x4022d1] memchr("\t    {\n\t      *(pfound->flag) = "..., '\n', 305) = 0x00f068a8
[0x4022d1] memchr("\t      *(pfound->flag) = pfound-"..., '\n', 298) = 0x00f068ce
[0x4022d1] memchr("\t      return 0;\n\t    }\n\t  retur"..., '\n', 260) = 0x00f068df
[0x4022d1] memchr("\t    }\n\t  return pfound->val;\n\t}"..., '\n', 243) = 0x00f068e6
[0x4022d1] memchr("\t  return pfound->val;\n\t}\n      "..., '\n', 236) = 0x00f068fd
[0x4022d1] memchr("\t}\n      /* Can't find it as a l"..., '\n', 213) = 0x00f06900
[0x4022d1] memchr("      /* Can't find it as a long"..., '\n', 210) = 0x00f0694b
[0x4022d1] memchr("\t or the option starts with '--'"..., '\n', 135) = 0x00f06984
[0x4022d1] memchr("\t option, then it's an error.\n\t "..., '\n', 78) = 0x00f069a2
[0x4022d1] memchr("\t Otherwise interpret it as a sh"..., '\n', 48) = 0x00f069d2
[0x4022d1] memchr("      if (!long_only || argv[opt"..., '\n', 0) = NULL
[0x4023cc] fwrite("1402:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if (!long_only || argv[opt"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '1', 30199) = 0x00f06ab2
[0x40cdf3] memchr("1] == '-')\n\t\t/* --option */\n\t\tfp"..., '\n', 30023) = 0x00f06abc
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '\n', 152) = 0x00f06a16
[0x4022d1] memchr("\t  || argv[optind][0] == '+'\n#en"..., '\n', 131) = 0x00f06a33
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 102) = 0x00f06a51
[0x4022d1] memchr("\t  || my_index (optstring, *next"..., '\n', 72) = 0x00f06a80
[0x4022d1] memchr("\t{\n\t  if (opterr)\n\t    {\n\t      "..., '\n', 25) = 0x00f06a83
[0x4022d1] memchr("\t  if (opterr)\n\t    {\n\t      if "..., '\n', 22) = 0x00f06a92
[0x4022d1] memchr("\t    {\n\t      if (argv[optind][1"..., '\n', 7) = 0x00f06a99
[0x4022d1] memchr("\t      if (argv[optind][1] == '-"..., '\n', 0) = NULL
[0x4023cc] fwrite("1410:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      if (argv[optind][1] == '-"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t/* --option */\n\t\tfprintf (stde"..., '1', 30012) = 0x00f06d40
[0x40cdf3] memchr("177)\n\t      fprintf (stderr, "%s"..., '\n', 29369) = 0x00f06d44
[0x4022d1] memchr("\t\t/* --option */\n\t\tfprintf (stde"..., '\n', 617) = 0x00f06acd
[0x4022d1] memchr("\t\tfprintf (stderr, "%s: unrecogn"..., '\n', 600) = 0x00f06b04
[0x4022d1] memchr("\t\t\t argv[0], nextchar);\n\t      e"..., '\n', 545) = 0x00f06b1c
[0x4022d1] memchr("\t      else\n\t\t/* +option or -opt"..., '\n', 521) = 0x00f06b28
[0x4022d1] memchr("\t\t/* +option or -option */\n\t\tfpr"..., '\n', 509) = 0x00f06b43
[0x4022d1] memchr("\t\tfprintf (stderr, "%s: unrecogn"..., '\n', 482) = 0x00f06b7a
[0x4022d1] memchr("\t\t\t argv[0], argv[optind][0], ne"..., '\n', 427) = 0x00f06ba3
[0x4022d1] memchr("\t    }\n\t  nextchar = (char *) """..., '\n', 386) = 0x00f06baa
[0x4022d1] memchr("\t  nextchar = (char *) "";\n\t  op"..., '\n', 379) = 0x00f06bc5
[0x4022d1] memchr("\t  optind++;\n\t  return '?';\n\t}\n "..., '\n', 352) = 0x00f06bd2
[0x4022d1] memchr("\t  return '?';\n\t}\n    }\n\n  /* Lo"..., '\n', 339) = 0x00f06be1
[0x4022d1] memchr("\t}\n    }\n\n  /* Look at and handl"..., '\n', 324) = 0x00f06be4
[0x4022d1] memchr("    }\n\n  /* Look at and handle t"..., '\n', 321) = 0x00f06bea
[0x4022d1] memchr("\n  /* Look at and handle the nex"..., '\n', 315) = 0x00f06beb
[0x4022d1] memchr("  /* Look at and handle the next"..., '\n', 314) = 0x00f06c22
[0x4022d1] memchr("\n  {\n    char c = *nextchar++;\n "..., '\n', 259) = 0x00f06c23
[0x4022d1] memchr("  {\n    char c = *nextchar++;\n  "..., '\n', 258) = 0x00f06c27
[0x4022d1] memchr("    char c = *nextchar++;\n    ch"..., '\n', 254) = 0x00f06c41
[0x4022d1] memchr("    char *temp = my_index (optst"..., '\n', 228) = 0x00f06c6b
[0x4022d1] memchr("\n    /* Increment `optind' when "..., '\n', 186) = 0x00f06c6c
[0x4022d1] memchr("    /* Increment `optind' when w"..., '\n', 185) = 0x00f06cb7
[0x4022d1] memchr("    if (*nextchar == '\\0')\n     "..., '\n', 110) = 0x00f06cd2
[0x4022d1] memchr("      ++optind;\n\n    if (temp =="..., '\n', 83) = 0x00f06ce2
[0x4022d1] memchr("\n    if (temp == NULL || c == ':"..., '\n', 67) = 0x00f06ce3
[0x4022d1] memchr("    if (temp == NULL || c == ':'"..., '\n', 66) = 0x00f06d05
[0x4022d1] memchr("      {\n\tif (opterr)\n\t  {\n#if 0\n"..., '\n', 32) = 0x00f06d0d
[0x4022d1] memchr("\tif (opterr)\n\t  {\n#if 0\n\t    if "..., '\n', 24) = 0x00f06d1a
[0x4022d1] memchr("\t  {\n#if 0\n\t    if (c < 040 || c"..., '\n', 11) = 0x00f06d1f
[0x4022d1] memchr("#if 0\n\t    if (c < 040 || c >= 0"..., '\n', 6) = 0x00f06d25
[0x4022d1] memchr("\t    if (c < 040 || c >= 0177)\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("1440:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    if (c < 040 || c >= 0177)\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      fprintf (stderr, "%s: unr"..., '1', 29364) = 0x00f06e04
[0x40cdf3] memchr("1003.2 specifies the format of t"..., '\n', 29173) = 0x00f06e34
[0x4022d1] memchr("\t      fprintf (stderr, "%s: unr"..., '\n', 183) = 0x00f06d8d
[0x4022d1] memchr("\t\t       argv[0], c);\n\t    else\n"..., '\n', 110) = 0x00f06da3
[0x4022d1] memchr("\t    else\n\t      fprintf (stderr"..., '\n', 88) = 0x00f06dad
[0x4022d1] memchr("\t      fprintf (stderr, "%s: unr"..., '\n', 78) = 0x00f06df5
[0x4022d1] memchr("#else\n\t    /* 1003.2 specifies t"..., '\n', 6) = 0x00f06dfb
[0x4022d1] memchr("\t    /* 1003.2 specifies the for"..., '\n', 0) = NULL
[0x4023cc] fwrite("1446:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    /* 1003.2 specifies the for"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    fprintf (stderr, "%s: illeg"..., '1', 29124) = 0x00f06eb1
[0x40cdf3] memchr("1] == ':')\n      {\n\tif (temp[2] "..., '\n', 29000) = 0x00f06ebb
[0x4022d1] memchr("\t    fprintf (stderr, "%s: illeg"..., '\n', 111) = 0x00f06e75
[0x4022d1] memchr("#endif\n\t  }\n\toptopt = c;\n\treturn"..., '\n', 46) = 0x00f06e7c
[0x4022d1] memchr("\t  }\n\toptopt = c;\n\treturn '?';\n "..., '\n', 39) = 0x00f06e81
[0x4022d1] memchr("\toptopt = c;\n\treturn '?';\n      "..., '\n', 34) = 0x00f06e8e
[0x4022d1] memchr("\treturn '?';\n      }\n    if (tem"..., '\n', 21) = 0x00f06e9b
[0x4022d1] memchr("      }\n    if (temp[1] == ':')\n"..., '\n', 8) = 0x00f06ea3
[0x4022d1] memchr("    if (temp[1] == ':')\n      {\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("1453:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    if (temp[1] == ':')\n      {\n"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      {\n\tif (temp[2] == ':')\n\t  "..., '1', 28989) = 0x00f07153
[0x40cdf3] memchr("1003.2 specifies the format of t"..., '\n', 28326) = 0x00f07183
[0x4022d1] memchr("      {\n\tif (temp[2] == ':')\n\t  "..., '\n', 654) = 0x00f06ec3
[0x4022d1] memchr("\tif (temp[2] == ':')\n\t  {\n\t    /"..., '\n', 646) = 0x00f06ed8
[0x4022d1] memchr("\t  {\n\t    /* This is an option t"..., '\n', 625) = 0x00f06edd
[0x4022d1] memchr("\t    /* This is an option that a"..., '\n', 620) = 0x00f06f20
[0x4022d1] memchr("\t    if (*nextchar != '\\0')\n\t   "..., '\n', 553) = 0x00f06f3c
[0x4022d1] memchr("\t      {\n\t\toptarg = nextchar;\n\t\t"..., '\n', 525) = 0x00f06f45
[0x4022d1] memchr("\t\toptarg = nextchar;\n\t\toptind++;"..., '\n', 516) = 0x00f06f5a
[0x4022d1] memchr("\t\toptind++;\n\t      }\n\t    else\n\t"..., '\n', 495) = 0x00f06f66
[0x4022d1] memchr("\t      }\n\t    else\n\t      optarg"..., '\n', 483) = 0x00f06f6f
[0x4022d1] memchr("\t    else\n\t      optarg = 0;\n\t  "..., '\n', 474) = 0x00f06f79
[0x4022d1] memchr("\t      optarg = 0;\n\t    nextchar"..., '\n', 464) = 0x00f06f8c
[0x4022d1] memchr("\t    nextchar = NULL;\n\t  }\n\telse"..., '\n', 445) = 0x00f06fa2
[0x4022d1] memchr("\t  }\n\telse\n\t  {\n\t    /* This is "..., '\n', 423) = 0x00f06fa7
[0x4022d1] memchr("\telse\n\t  {\n\t    /* This is an op"..., '\n', 418) = 0x00f06fad
[0x4022d1] memchr("\t  {\n\t    /* This is an option t"..., '\n', 412) = 0x00f06fb2
[0x4022d1] memchr("\t    /* This is an option that r"..., '\n', 407) = 0x00f06feb
[0x4022d1] memchr("\t    if (*nextchar != '\\0')\n\t   "..., '\n', 350) = 0x00f07007
[0x4022d1] memchr("\t      {\n\t\toptarg = nextchar;\n\t\t"..., '\n', 322) = 0x00f07010
[0x4022d1] memchr("\t\toptarg = nextchar;\n\t\t/* If we "..., '\n', 313) = 0x00f07025
[0x4022d1] memchr("\t\t/* If we end this ARGV-element"..., '\n', 292) = 0x00f07064
[0x4022d1] memchr("\t\t   we must advance to the next"..., '\n', 229) = 0x00f07096
[0x4022d1] memchr("\t\toptind++;\n\t      }\n\t    else i"..., '\n', 179) = 0x00f070a2
[0x4022d1] memchr("\t      }\n\t    else if (optind =="..., '\n', 167) = 0x00f070ab
[0x4022d1] memchr("\t    else if (optind == argc)\n\t "..., '\n', 158) = 0x00f070c9
[0x4022d1] memchr("\t      {\n\t\tif (opterr)\n\t\t  {\n#if"..., '\n', 128) = 0x00f070d2
[0x4022d1] memchr("\t\tif (opterr)\n\t\t  {\n#if 0\n\t\t    "..., '\n', 119) = 0x00f070e0
[0x4022d1] memchr("\t\t  {\n#if 0\n\t\t    fprintf (stder"..., '\n', 105) = 0x00f070e6
[0x4022d1] memchr("#if 0\n\t\t    fprintf (stderr, "%s"..., '\n', 99) = 0x00f070ec
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 93) = 0x00f0712e
[0x4022d1] memchr("\t\t\t     argv[0], c);\n#else\n\t\t   "..., '\n', 27) = 0x00f07143
[0x4022d1] memchr("#else\n\t\t    /* 1003.2 specifies "..., '\n', 6) = 0x00f07149
[0x4022d1] memchr("\t\t    /* 1003.2 specifies the fo"..., '\n', 0) = NULL
[0x4023cc] fwrite("1485:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t    /* 1003.2 specifies the fo"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    fprintf (stderr, "%s: opti"..., '1', 28277) = 0x00f074f0
[0x40cdf3] memchr("1)\n    {\n      int this_option_o"..., '\n', 27401) = 0x00f074f2
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 867) = 0x00f071c5
[0x4022d1] memchr("\t\t\t     argv[0], c);\n#endif\n\t\t  "..., '\n', 801) = 0x00f071da
[0x4022d1] memchr("#endif\n\t\t  }\n\t\toptopt = c;\n\t\tif "..., '\n', 780) = 0x00f071e1
[0x4022d1] memchr("\t\t  }\n\t\toptopt = c;\n\t\tif (optstr"..., '\n', 773) = 0x00f071e7
[0x4022d1] memchr("\t\toptopt = c;\n\t\tif (optstring[0]"..., '\n', 767) = 0x00f071f5
[0x4022d1] memchr("\t\tif (optstring[0] == ':')\n\t\t  c"..., '\n', 753) = 0x00f07210
[0x4022d1] memchr("\t\t  c = ':';\n\t\telse\n\t\t  c = '?';"..., '\n', 726) = 0x00f0721d
[0x4022d1] memchr("\t\telse\n\t\t  c = '?';\n\t      }\n\t  "..., '\n', 713) = 0x00f07224
[0x4022d1] memchr("\t\t  c = '?';\n\t      }\n\t    else\n"..., '\n', 706) = 0x00f07231
[0x4022d1] memchr("\t      }\n\t    else\n\t      /* We "..., '\n', 693) = 0x00f0723a
[0x4022d1] memchr("\t    else\n\t      /* We already i"..., '\n', 684) = 0x00f07244
[0x4022d1] memchr("\t      /* We already incremented"..., '\n', 674) = 0x00f07274
[0x4022d1] memchr("\t\t increment it again when takin"..., '\n', 626) = 0x00f072b5
[0x4022d1] memchr("\t      optarg = argv[optind++];\n"..., '\n', 561) = 0x00f072d5
[0x4022d1] memchr("\t    nextchar = NULL;\n\t  }\n     "..., '\n', 529) = 0x00f072eb
[0x4022d1] memchr("\t  }\n      }\n    return c;\n  }\n}"..., '\n', 507) = 0x00f072f0
[0x4022d1] memchr("      }\n    return c;\n  }\n}\n\nint"..., '\n', 502) = 0x00f072f8
[0x4022d1] memchr("    return c;\n  }\n}\n\nint\ngetopt "..., '\n', 494) = 0x00f07306
[0x4022d1] memchr("  }\n}\n\nint\ngetopt (argc, argv, o"..., '\n', 480) = 0x00f0730a
[0x4022d1] memchr("}\n\nint\ngetopt (argc, argv, optst"..., '\n', 476) = 0x00f0730c
[0x4022d1] memchr("\nint\ngetopt (argc, argv, optstri"..., '\n', 474) = 0x00f0730d
[0x4022d1] memchr("int\ngetopt (argc, argv, optstrin"..., '\n', 473) = 0x00f07311
[0x4022d1] memchr("getopt (argc, argv, optstring)\n "..., '\n', 469) = 0x00f07330
[0x4022d1] memchr("     int argc;\n     char *const "..., '\n', 438) = 0x00f0733f
[0x4022d1] memchr("     char *const *argv;\n     con"..., '\n', 423) = 0x00f07357
[0x4022d1] memchr("     const char *optstring;\n{\n  "..., '\n', 399) = 0x00f07373
[0x4022d1] memchr("{\n  return _getopt_internal (arg"..., '\n', 371) = 0x00f07375
[0x4022d1] memchr("  return _getopt_internal (argc,"..., '\n', 369) = 0x00f073a7
[0x4022d1] memchr("\t\t\t   (const struct option *) 0,"..., '\n', 319) = 0x00f073c8
[0x4022d1] memchr("\t\t\t   (int *) 0,\n\t\t\t   0);\n}\n\n#e"..., '\n', 286) = 0x00f073d9
[0x4022d1] memchr("\t\t\t   0);\n}\n\n#endif\t/* _LIBC or "..., '\n', 269) = 0x00f073e3
[0x4022d1] memchr("}\n\n#endif\t/* _LIBC or not __GNU_"..., '\n', 259) = 0x00f073e5
[0x4022d1] memchr("\n#endif\t/* _LIBC or not __GNU_LI"..., '\n', 257) = 0x00f073e6
[0x4022d1] memchr("#endif\t/* _LIBC or not __GNU_LIB"..., '\n', 256) = 0x00f07412
[0x4022d1] memchr("\014\n#ifdef TEST\n\n/* Compile with -"..., '\n', 212) = 0x00f07414
[0x4022d1] memchr("#ifdef TEST\n\n/* Compile with -DT"..., '\n', 210) = 0x00f07420
[0x4022d1] memchr("\n/* Compile with -DTEST to make "..., '\n', 198) = 0x00f07421
[0x4022d1] memchr("/* Compile with -DTEST to make a"..., '\n', 197) = 0x00f07461
[0x4022d1] memchr("   the above definition of `geto"..., '\n', 133) = 0x00f0748a
[0x4022d1] memchr("\nint\nmain (argc, argv)\n     int "..., '\n', 92) = 0x00f0748b
[0x4022d1] memchr("int\nmain (argc, argv)\n     int a"..., '\n', 91) = 0x00f0748f
[0x4022d1] memchr("main (argc, argv)\n     int argc;"..., '\n', 87) = 0x00f074a1
[0x4022d1] memchr("     int argc;\n     char **argv;"..., '\n', 69) = 0x00f074b0
[0x4022d1] memchr("     char **argv;\n{\n  int c;\n  i"..., '\n', 54) = 0x00f074c2
[0x4022d1] memchr("{\n  int c;\n  int digit_optind = "..., '\n', 36) = 0x00f074c4
[0x4022d1] memchr("  int c;\n  int digit_optind = 0;"..., '\n', 34) = 0x00f074cd
[0x4022d1] memchr("  int digit_optind = 0;\n\n  while"..., '\n', 25) = 0x00f074e5
[0x4022d1] memchr("\n  while (1)\n    {\n      int thi"..., '\n', 1) = 0x00f074e6
[0x4022d1] memchr("  while (1)\n    {\n      int this"..., '\n', 0) = NULL
[0x4023cc] fwrite("1534:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (1)\n    {\n      int this"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      int this_option_opti"..., '1', 27398) = 0x00f0752a
[0x40cdf3] memchr("1;\n\n      c = getopt (argc, argv"..., '\n', 27343) = 0x00f0752c
[0x4022d1] memchr("    {\n      int this_option_opti"..., '\n', 6) = 0x00f074f8
[0x4022d1] memchr("      int this_option_optind = o"..., '\n', 0) = NULL
[0x4023cc] fwrite("1536:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      int this_option_optind = o"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      c = getopt (argc, argv, ""..., '1', 27340) = 0x00f07554
[0x40cdf3] memchr("123456789");\n      if (c == EOF)"..., '\n', 27301) = 0x00f07560
[0x4022d1] memchr("\n      c = getopt (argc, argv, ""..., '\n', 1) = 0x00f0752d
[0x4022d1] memchr("      c = getopt (argc, argv, "a"..., '\n', 0) = NULL
[0x4023cc] fwrite("1538:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      c = getopt (argc, argv, "a"..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (c == EOF)\n\tbreak;\n\n   "..., '1', 27288) = 0x00f075a4
[0x40cdf3] memchr("1':\n\tcase '2':\n\tcase '3':\n\tcase "..., '\n', 27221) = 0x00f075a7
[0x4022d1] memchr("      if (c == EOF)\n\tbreak;\n\n   "..., '\n', 60) = 0x00f07574
[0x4022d1] memchr("\tbreak;\n\n      switch (c)\n\t{\n\tca"..., '\n', 40) = 0x00f0757c
[0x4022d1] memchr("\n      switch (c)\n\t{\n\tcase '0':\n"..., '\n', 32) = 0x00f0757d
[0x4022d1] memchr("      switch (c)\n\t{\n\tcase '0':\n\t"..., '\n', 31) = 0x00f0758e
[0x4022d1] memchr("\t{\n\tcase '0':\n\tcase '1':\n\tcase '"..., '\n', 14) = 0x00f07591
[0x4022d1] memchr("\tcase '0':\n\tcase '1':\n\tcase '2':"..., '\n', 11) = 0x00f0759c
[0x4022d1] memchr("\tcase '1':\n\tcase '2':\n\tcase '3':"..., '\n', 0) = NULL
[0x4023cc] fwrite("1545:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tcase '1':\n\tcase '2':\n\tcase '3':"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '1', 27217) = 0x00f078e9
[0x40cdf3] memchr("12.\n   (Implements POSIX draft P"..., '\n', 26384) = 0x00f078ec
[0x4022d1] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '\n', 820) = 0x00f075b2
[0x4022d1] memchr("\tcase '3':\n\tcase '4':\n\tcase '5':"..., '\n', 809) = 0x00f075bd
[0x4022d1] memchr("\tcase '4':\n\tcase '5':\n\tcase '6':"..., '\n', 798) = 0x00f075c8
[0x4022d1] memchr("\tcase '5':\n\tcase '6':\n\tcase '7':"..., '\n', 787) = 0x00f075d3
[0x4022d1] memchr("\tcase '6':\n\tcase '7':\n\tcase '8':"..., '\n', 776) = 0x00f075de
[0x4022d1] memchr("\tcase '7':\n\tcase '8':\n\tcase '9':"..., '\n', 765) = 0x00f075e9
[0x4022d1] memchr("\tcase '8':\n\tcase '9':\n\t  if (dig"..., '\n', 754) = 0x00f075f4
[0x4022d1] memchr("\tcase '9':\n\t  if (digit_optind !"..., '\n', 743) = 0x00f075ff
[0x4022d1] memchr("\t  if (digit_optind != 0 && digi"..., '\n', 732) = 0x00f0763f
[0x4022d1] memchr("\t    printf ("digits occur in tw"..., '\n', 668) = 0x00f0767f
[0x4022d1] memchr("\t  digit_optind = this_option_op"..., '\n', 604) = 0x00f076a5
[0x4022d1] memchr("\t  printf ("option %c\\n", c);\n\t "..., '\n', 566) = 0x00f076c3
[0x4022d1] memchr("\t  break;\n\n\tcase 'a':\n\t  printf "..., '\n', 536) = 0x00f076cd
[0x4022d1] memchr("\n\tcase 'a':\n\t  printf ("option a"..., '\n', 526) = 0x00f076ce
[0x4022d1] memchr("\tcase 'a':\n\t  printf ("option a\\"..., '\n', 525) = 0x00f076d9
[0x4022d1] memchr("\t  printf ("option a\\n");\n\t  bre"..., '\n', 514) = 0x00f076f3
[0x4022d1] memchr("\t  break;\n\n\tcase 'b':\n\t  printf "..., '\n', 488) = 0x00f076fd
[0x4022d1] memchr("\n\tcase 'b':\n\t  printf ("option b"..., '\n', 478) = 0x00f076fe
[0x4022d1] memchr("\tcase 'b':\n\t  printf ("option b\\"..., '\n', 477) = 0x00f07709
[0x4022d1] memchr("\t  printf ("option b\\n");\n\t  bre"..., '\n', 466) = 0x00f07723
[0x4022d1] memchr("\t  break;\n\n\tcase 'c':\n\t  printf "..., '\n', 440) = 0x00f0772d
[0x4022d1] memchr("\n\tcase 'c':\n\t  printf ("option c"..., '\n', 430) = 0x00f0772e
[0x4022d1] memchr("\tcase 'c':\n\t  printf ("option c "..., '\n', 429) = 0x00f07739
[0x4022d1] memchr("\t  printf ("option c with value "..., '\n', 418) = 0x00f0776b
[0x4022d1] memchr("\t  break;\n\n\tcase '?':\n\t  break;\n"..., '\n', 368) = 0x00f07775
[0x4022d1] memchr("\n\tcase '?':\n\t  break;\n\n\tdefault:"..., '\n', 358) = 0x00f07776
[0x4022d1] memchr("\tcase '?':\n\t  break;\n\n\tdefault:\n"..., '\n', 357) = 0x00f07781
[0x4022d1] memchr("\t  break;\n\n\tdefault:\n\t  printf ("..., '\n', 346) = 0x00f0778b
[0x4022d1] memchr("\n\tdefault:\n\t  printf ("?? getopt"..., '\n', 336) = 0x00f0778c
[0x4022d1] memchr("\tdefault:\n\t  printf ("?? getopt "..., '\n', 335) = 0x00f07796
[0x4022d1] memchr("\t  printf ("?? getopt returned c"..., '\n', 325) = 0x00f077d3
[0x4022d1] memchr("\t}\n    }\n\n  if (optind < argc)\n "..., '\n', 264) = 0x00f077d6
[0x4022d1] memchr("    }\n\n  if (optind < argc)\n    "..., '\n', 261) = 0x00f077dc
[0x4022d1] memchr("\n  if (optind < argc)\n    {\n    "..., '\n', 255) = 0x00f077dd
[0x4022d1] memchr("  if (optind < argc)\n    {\n     "..., '\n', 254) = 0x00f077f2
[0x4022d1] memchr("    {\n      printf ("non-option "..., '\n', 233) = 0x00f077f8
[0x4022d1] memchr("      printf ("non-option ARGV-e"..., '\n', 227) = 0x00f07825
[0x4022d1] memchr("      while (optind < argc)\n\tpri"..., '\n', 182) = 0x00f07841
[0x4022d1] memchr("\tprintf ("%s ", argv[optind++]);"..., '\n', 154) = 0x00f07862
[0x4022d1] memchr("      printf ("\\n");\n    }\n\n  ex"..., '\n', 121) = 0x00f07877
[0x4022d1] memchr("    }\n\n  exit (0);\n}\n\n#endif /* "..., '\n', 100) = 0x00f0787d
[0x4022d1] memchr("\n  exit (0);\n}\n\n#endif /* TEST *"..., '\n', 94) = 0x00f0787e
[0x4022d1] memchr("  exit (0);\n}\n\n#endif /* TEST */"..., '\n', 93) = 0x00f0788a
[0x4022d1] memchr("}\n\n#endif /* TEST */\n/* Extended"..., '\n', 81) = 0x00f0788c
[0x4022d1] memchr("\n#endif /* TEST */\n/* Extended r"..., '\n', 79) = 0x00f0788d
[0x4022d1] memchr("#endif /* TEST */\n/* Extended re"..., '\n', 78) = 0x00f0789f
[0x4022d1] memchr("/* Extended regular expression m"..., '\n', 60) = 0x00f078db
[0x4022d1] memchr("   version 0.12.\n   (Implements "..., '\n', 0) = NULL
[0x4023cc] fwrite("1593:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   version 0.12.\n   (Implements "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   (Implements POSIX draft P1000"..., '1', 26380) = 0x00f07909
[0x40cdf3] memchr("10003.2/D11.2, except for\n   int"..., '\n', 26352) = 0x00f07922
[0x4022d1] memchr("   (Implements POSIX draft P1000"..., '\n', 0) = NULL
[0x4023cc] fwrite("1594:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   (Implements POSIX draft P1000"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   internationalization features"..., '1', 26326) = 0x00f07958
[0x40cdf3] memchr("1993 Free Software Foundation, I"..., '\n', 26273) = 0x00f0797b
[0x4022d1] memchr("   internationalization features"..., '\n', 36) = 0x00f07945
[0x4022d1] memchr("\n   Copyright (C) 1993 Free Soft"..., '\n', 1) = 0x00f07946
[0x4022d1] memchr("   Copyright (C) 1993 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("1597:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Copyright (C) 1993 Free Softw"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., '1', 26237) = 0x00f07c19
[0x40cdf3] memchr("139, USA.  */\n\n/* AIX requires t"..., '\n', 25568) = 0x00f07c26
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 618) = 0x00f0797c
[0x4022d1] memchr("   This program is free software"..., '\n', 617) = 0x00f079c4
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 545) = 0x00f07a0c
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 473) = 0x00f07a53
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 402) = 0x00f07a69
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f07a6a
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f07aad
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f07aef
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f07b30
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f07b60
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f07b61
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f07ba6
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f07be5
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("1611:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* AIX requires this to be the "..., '1', 25554) = 0x00f07d4d
[0x40cdf3] memchr("1\n#endif\n\n#ifdef HAVE_CONFIG_H\n#"..., '\n', 25260) = 0x00f07d4e
[0x4022d1] memchr("\n/* AIX requires this to be the "..., '\n', 272) = 0x00f07c27
[0x4022d1] memchr("/* AIX requires this to be the f"..., '\n', 271) = 0x00f07c62
[0x4022d1] memchr("#if defined (_AIX) && !defined ("..., '\n', 212) = 0x00f07c90
[0x4022d1] memchr("  #pragma alloca\n#endif\n\n#define"..., '\n', 166) = 0x00f07ca1
[0x4022d1] memchr("#endif\n\n#define _GNU_SOURCE\n\n/* "..., '\n', 149) = 0x00f07ca8
[0x4022d1] memchr("\n#define _GNU_SOURCE\n\n/* We need"..., '\n', 142) = 0x00f07ca9
[0x4022d1] memchr("#define _GNU_SOURCE\n\n/* We need "..., '\n', 141) = 0x00f07cbd
[0x4022d1] memchr("\n/* We need this for `regex.h', "..., '\n', 121) = 0x00f07cbe
[0x4022d1] memchr("/* We need this for `regex.h', a"..., '\n', 120) = 0x00f07d0a
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 44) = 0x00f07d1f
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f07d36
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("1623:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\n\n"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n\n#ifdef HAVE_CONFIG_H\n#if"..., '1', 25258) = 0x00f07da7
[0x40cdf3] memchr("1\n#endif\n#endif\n\n/* The `emacs' "..., '\n', 25170) = 0x00f07da8
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_CONFIG_H\n#if"..., '\n', 68) = 0x00f07d55
[0x4022d1] memchr("\n#ifdef HAVE_CONFIG_H\n#if flag_c"..., '\n', 61) = 0x00f07d56
[0x4022d1] memchr("#ifdef HAVE_CONFIG_H\n#if flag_co"..., '\n', 60) = 0x00f07d6b
[0x4022d1] memchr("#if flag_config==0\n#include "con"..., '\n', 39) = 0x00f07d7e
[0x4022d1] memchr("#include "config.h"\n#define flag"..., '\n', 20) = 0x00f07d92
[0x4022d1] memchr("#define flag_config 1\n#endif\n#en"..., '\n', 0) = NULL
[0x4023cc] fwrite("1629:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_config 1\n#endif\n#en"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\n\n/* The `emacs' sw"..., '1', 25168) = 0x00f07f96
[0x40cdf3] memchr("1\n#endif\n#ifndef bcmp\n#define bc"..., '\n', 24675) = 0x00f07f97
[0x4022d1] memchr("#endif\n#endif\n\n/* The `emacs' sw"..., '\n', 473) = 0x00f07daf
[0x4022d1] memchr("#endif\n\n/* The `emacs' switch tu"..., '\n', 466) = 0x00f07db6
[0x4022d1] memchr("\n/* The `emacs' switch turns on "..., '\n', 459) = 0x00f07db7
[0x4022d1] memchr("/* The `emacs' switch turns on c"..., '\n', 458) = 0x00f07df0
[0x4022d1] memchr("   that make sense only in Emacs"..., '\n', 401) = 0x00f07e15
[0x4022d1] memchr("#ifdef emacs\n\n#include "lisp.h"\n"..., '\n', 364) = 0x00f07e22
[0x4022d1] memchr("\n#include "lisp.h"\n#include "buf"..., '\n', 351) = 0x00f07e23
[0x4022d1] memchr("#include "lisp.h"\n#include "buff"..., '\n', 350) = 0x00f07e35
[0x4022d1] memchr("#include "buffer.h"\n#include "sy"..., '\n', 332) = 0x00f07e49
[0x4022d1] memchr("#include "syntax.h"\n\n/* Emacs us"..., '\n', 312) = 0x00f07e5d
[0x4022d1] memchr("\n/* Emacs uses `NULL' as a predi"..., '\n', 292) = 0x00f07e5e
[0x4022d1] memchr("/* Emacs uses `NULL' as a predic"..., '\n', 291) = 0x00f07e87
[0x4022d1] memchr("#undef NULL\n\n#else  /* not emacs"..., '\n', 250) = 0x00f07e93
[0x4022d1] memchr("\n#else  /* not emacs */\n\n/* We u"..., '\n', 238) = 0x00f07e94
[0x4022d1] memchr("#else  /* not emacs */\n\n/* We us"..., '\n', 237) = 0x00f07eab
[0x4022d1] memchr("\n/* We used to test for `BSTRING"..., '\n', 214) = 0x00f07eac
[0x4022d1] memchr("/* We used to test for `BSTRING'"..., '\n', 213) = 0x00f07ef1
[0x4022d1] memchr("   `BSTRING', as far as I know, "..., '\n', 144) = 0x00f07f38
[0x4022d1] memchr("#if HAVE_STRING_H || STDC_HEADER"..., '\n', 73) = 0x00f07f5a
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 39) = 0x00f07f6d
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f07f81
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 0) = NULL
[0x4023cc] fwrite("1651:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_string 1\n#endif\n#if"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#ifndef bcmp\n#define bcmp"..., '1', 24673) = 0x00f07fba
[0x40cdf3] memchr("1, s2, n)\tmemcmp ((s1), (s2), (n"..., '\n', 24639) = 0x00f07fdc
[0x4022d1] memchr("#endif\n#ifndef bcmp\n#define bcmp"..., '\n', 20) = 0x00f07f9e
[0x4022d1] memchr("#ifndef bcmp\n#define bcmp(s1, s2"..., '\n', 13) = 0x00f07fab
[0x4022d1] memchr("#define bcmp(s1, s2, n)\tmemcmp ("..., '\n', 0) = NULL
[0x4023cc] fwrite("1654:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define bcmp(s1, s2, n)\tmemcmp ("..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#ifndef bcopy\n#define bco"..., '1', 24604) = 0x00f080a9
[0x40cdf3] memchr("1\n#endif\n#endif\n\n#ifdef STDC_HEA"..., '\n', 24400) = 0x00f080aa
[0x4022d1] memchr("#endif\n#ifndef bcopy\n#define bco"..., '\n', 183) = 0x00f07fe3
[0x4022d1] memchr("#ifndef bcopy\n#define bcopy(s, d"..., '\n', 176) = 0x00f07ff1
[0x4022d1] memchr("#define bcopy(s, d, n)\tmemcpy (("..., '\n', 162) = 0x00f0801f
[0x4022d1] memchr("#endif\n#ifndef bzero\n#define bze"..., '\n', 116) = 0x00f08026
[0x4022d1] memchr("#ifndef bzero\n#define bzero(s, n"..., '\n', 109) = 0x00f08034
[0x4022d1] memchr("#define bzero(s, n)\tmemset ((s),"..., '\n', 95) = 0x00f0805d
[0x4022d1] memchr("#endif\n#else\n#if flag_strings==0"..., '\n', 54) = 0x00f08064
[0x4022d1] memchr("#else\n#if flag_strings==0\n#inclu"..., '\n', 47) = 0x00f0806a
[0x4022d1] memchr("#if flag_strings==0\n#include <st"..., '\n', 41) = 0x00f0807e
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 21) = 0x00f08093
[0x4022d1] memchr("#define flag_strings 1\n#endif\n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("1665:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_strings 1\n#endif\n#e"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\n\n#ifdef STDC_HEADE"..., '1', 24398) = 0x00f0810a
[0x40cdf3] memchr("1\n#endif\n#else\nchar *malloc ();\n"..., '\n', 24303) = 0x00f0810b
[0x4022d1] memchr("#endif\n#endif\n\n#ifdef STDC_HEADE"..., '\n', 75) = 0x00f080b1
[0x4022d1] memchr("#endif\n\n#ifdef STDC_HEADERS\n#if "..., '\n', 68) = 0x00f080b8
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_st"..., '\n', 61) = 0x00f080b9
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_std"..., '\n', 60) = 0x00f080cd
[0x4022d1] memchr("#if flag_stdlib==0 \n#include <st"..., '\n', 40) = 0x00f080e1
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f080f5
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("1672:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_stdlib 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\nchar *malloc ();\nch"..., '1', 24301) = 0x00f081f3
[0x40cdf3] memchr("1\n#endif\n\n#ifdef SYNTAX_TABLE\n\ne"..., '\n', 24070) = 0x00f081f4
[0x4022d1] memchr("#endif\n#else\nchar *malloc ();\nch"..., '\n', 217) = 0x00f08112
[0x4022d1] memchr("#else\nchar *malloc ();\nchar *rea"..., '\n', 210) = 0x00f08118
[0x4022d1] memchr("char *malloc ();\nchar *realloc ("..., '\n', 204) = 0x00f08129
[0x4022d1] memchr("char *realloc ();\n#endif\n\n\n/* De"..., '\n', 187) = 0x00f0813b
[0x4022d1] memchr("#endif\n\n\n/* Define the syntax st"..., '\n', 169) = 0x00f08142
[0x4022d1] memchr("\n\n/* Define the syntax stuff for"..., '\n', 162) = 0x00f08143
[0x4022d1] memchr("\n/* Define the syntax stuff for "..., '\n', 161) = 0x00f08144
[0x4022d1] memchr("/* Define the syntax stuff for \\"..., '\n', 160) = 0x00f08174
[0x4022d1] memchr("\n/* This must be nonzero for the"..., '\n', 112) = 0x00f08175
[0x4022d1] memchr("/* This must be nonzero for the "..., '\n', 111) = 0x00f081b6
[0x4022d1] memchr("   commands in re_match_2.  */\n#"..., '\n', 46) = 0x00f081d5
[0x4022d1] memchr("#ifndef Sword \n#define Sword 1\n#"..., '\n', 15) = 0x00f081e4
[0x4022d1] memchr("#define Sword 1\n#endif\n\n#ifdef S"..., '\n', 0) = NULL
[0x4023cc] fwrite("1685:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define Sword 1\n#endif\n\n#ifdef S"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n\n#ifdef SYNTAX_TABLE\n\next"..., '1', 24068) = 0x00f08458
[0x40cdf3] memchr("1;\n}\n\n#endif /* not SYNTAX_TABLE"..., '\n', 23457) = 0x00f0845a
[0x4022d1] memchr("#endif\n\n#ifdef SYNTAX_TABLE\n\next"..., '\n', 601) = 0x00f081fb
[0x4022d1] memchr("\n#ifdef SYNTAX_TABLE\n\nextern cha"..., '\n', 594) = 0x00f081fc
[0x4022d1] memchr("#ifdef SYNTAX_TABLE\n\nextern char"..., '\n', 593) = 0x00f08210
[0x4022d1] memchr("\nextern char *re_syntax_table;\n\n"..., '\n', 573) = 0x00f08211
[0x4022d1] memchr("extern char *re_syntax_table;\n\n#"..., '\n', 572) = 0x00f0822f
[0x4022d1] memchr("\n#else /* not SYNTAX_TABLE */\n\n/"..., '\n', 542) = 0x00f08230
[0x4022d1] memchr("#else /* not SYNTAX_TABLE */\n\n/*"..., '\n', 541) = 0x00f0824d
[0x4022d1] memchr("\n/* How many characters in the c"..., '\n', 512) = 0x00f0824e
[0x4022d1] memchr("/* How many characters in the ch"..., '\n', 511) = 0x00f0827f
[0x4022d1] memchr("#define CHAR_SET_SIZE 256\n\nstati"..., '\n', 462) = 0x00f08299
[0x4022d1] memchr("\nstatic char re_syntax_table[CHA"..., '\n', 436) = 0x00f0829a
[0x4022d1] memchr("static char re_syntax_table[CHAR"..., '\n', 435) = 0x00f082c6
[0x4022d1] memchr("\nstatic void\ninit_syntax_once ()"..., '\n', 391) = 0x00f082c7
[0x4022d1] memchr("static void\ninit_syntax_once ()\n"..., '\n', 390) = 0x00f082d3
[0x4022d1] memchr("init_syntax_once ()\n{\n   registe"..., '\n', 378) = 0x00f082e7
[0x4022d1] memchr("{\n   register int c;\n   static i"..., '\n', 358) = 0x00f082e9
[0x4022d1] memchr("   register int c;\n   static int"..., '\n', 356) = 0x00f082fc
[0x4022d1] memchr("   static int done = 0;\n\n   if ("..., '\n', 337) = 0x00f08314
[0x4022d1] memchr("\n   if (done)\n     return;\n\n   b"..., '\n', 313) = 0x00f08315
[0x4022d1] memchr("   if (done)\n     return;\n\n   bz"..., '\n', 312) = 0x00f08322
[0x4022d1] memchr("     return;\n\n   bzero (re_synta"..., '\n', 299) = 0x00f0832f
[0x4022d1] memchr("\n   bzero (re_syntax_table, size"..., '\n', 286) = 0x00f08330
[0x4022d1] memchr("   bzero (re_syntax_table, sizeo"..., '\n', 285) = 0x00f08364
[0x4022d1] memchr("\n   for (c = 'a'; c <= 'z'; c++)"..., '\n', 233) = 0x00f08365
[0x4022d1] memchr("   for (c = 'a'; c <= 'z'; c++)\n"..., '\n', 232) = 0x00f08385
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 200) = 0x00f083a6
[0x4022d1] memchr("\n   for (c = 'A'; c <= 'Z'; c++)"..., '\n', 167) = 0x00f083a7
[0x4022d1] memchr("   for (c = 'A'; c <= 'Z'; c++)\n"..., '\n', 166) = 0x00f083c7
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 134) = 0x00f083e8
[0x4022d1] memchr("\n   for (c = '0'; c <= '9'; c++)"..., '\n', 101) = 0x00f083e9
[0x4022d1] memchr("   for (c = '0'; c <= '9'; c++)\n"..., '\n', 100) = 0x00f08409
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 68) = 0x00f0842a
[0x4022d1] memchr("\n   re_syntax_table['_'] = Sword"..., '\n', 35) = 0x00f0842b
[0x4022d1] memchr("   re_syntax_table['_'] = Sword;"..., '\n', 34) = 0x00f0844c
[0x4022d1] memchr("\n   done = 1;\n}\n\n#endif /* not S"..., '\n', 1) = 0x00f0844d
[0x4022d1] memchr("   done = 1;\n}\n\n#endif /* not SY"..., '\n', 0) = NULL
[0x4023cc] fwrite("1721:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   done = 1;\n}\n\n#endif /* not SY"..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n#endif /* not SYNTAX_TABLE */"..., '1', 23454) = 0x00f08712
[0x40cdf3] memchr("1 should let any compiler worth "..., '\n', 22759) = 0x00f0873a
[0x4022d1] memchr("}\n\n#endif /* not SYNTAX_TABLE */"..., '\n', 672) = 0x00f0845c
[0x4022d1] memchr("\n#endif /* not SYNTAX_TABLE */\n\n"..., '\n', 670) = 0x00f0845d
[0x4022d1] memchr("#endif /* not SYNTAX_TABLE */\n\n#"..., '\n', 669) = 0x00f0847b
[0x4022d1] memchr("\n#define SYNTAX(c) re_syntax_tab"..., '\n', 639) = 0x00f0847c
[0x4022d1] memchr("#define SYNTAX(c) re_syntax_tabl"..., '\n', 638) = 0x00f084a1
[0x4022d1] memchr("\n#endif /* not emacs */\n\014\n/* Get"..., '\n', 601) = 0x00f084a2
[0x4022d1] memchr("#endif /* not emacs */\n\014\n/* Get "..., '\n', 600) = 0x00f084b9
[0x4022d1] memchr("\014\n/* Get the interface, includin"..., '\n', 577) = 0x00f084bb
[0x4022d1] memchr("/* Get the interface, including "..., '\n', 575) = 0x00f084f0
[0x4022d1] memchr("#include "regex.h"\n\n/* isalpha e"..., '\n', 522) = 0x00f08503
[0x4022d1] memchr("\n/* isalpha etc. are used for th"..., '\n', 503) = 0x00f08504
[0x4022d1] memchr("/* isalpha etc. are used for the"..., '\n', 502) = 0x00f0853c
[0x4022d1] memchr("#include <ctype.h>\n\n/* Jim Meyer"..., '\n', 446) = 0x00f0854f
[0x4022d1] memchr("\n/* Jim Meyering writes:\n\n   ".."..., '\n', 427) = 0x00f08550
[0x4022d1] memchr("/* Jim Meyering writes:\n\n   "..."..., '\n', 426) = 0x00f08568
[0x4022d1] memchr("\n   "... Some ctype macros are v"..., '\n', 402) = 0x00f08569
[0x4022d1] memchr("   "... Some ctype macros are va"..., '\n', 401) = 0x00f085ab
[0x4022d1] memchr("   isascii says are ASCII (SGI's"..., '\n', 335) = 0x00f085f1
[0x4022d1] memchr("   using /bin/cc or gcc but with"..., '\n', 265) = 0x00f08636
[0x4022d1] memchr("   ctype uses should be through "..., '\n', 196) = 0x00f08671
[0x4022d1] memchr("   STDC_HEADERS is defined, then"..., '\n', 137) = 0x00f086b7
[0x4022d1] memchr("   macros don't need to be guard"..., '\n', 67) = 0x00f086fa
[0x4022d1] memchr("   Defining isascii to 1 should "..., '\n', 0) = NULL
[0x4023cc] fwrite("1744:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Defining isascii to 1 should "..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   eliminate the && through cons"..., '1', 22718) = 0x00f087c2
[0x40cdf3] memchr("1\n#endif\n\n#ifdef isblank\n#define"..., '\n', 22583) = 0x00f087c3
[0x4022d1] memchr("   eliminate the && through cons"..., '\n', 116) = 0x00f0876d
[0x4022d1] memchr("#if ! defined (isascii) || defin"..., '\n', 65) = 0x00f0879f
[0x4022d1] memchr("#undef isascii\n#define isascii(c"..., '\n', 15) = 0x00f087ae
[0x4022d1] memchr("#define isascii(c) 1\n#endif\n\n#if"..., '\n', 0) = NULL
[0x4023cc] fwrite("1748:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define isascii(c) 1\n#endif\n\n#if"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n\n#ifdef isblank\n#define I"..., '1', 22581) = 0x00f08c94
[0x40cdf3] memchr("128) - 128)\n#endif\n\014\n/* Should w"..., '\n', 21349) = 0x00f08c9f
[0x4022d1] memchr("#endif\n\n#ifdef isblank\n#define I"..., '\n', 1178) = 0x00f087ca
[0x4022d1] memchr("\n#ifdef isblank\n#define ISBLANK("..., '\n', 1171) = 0x00f087cb
[0x4022d1] memchr("#ifdef isblank\n#define ISBLANK(c"..., '\n', 1170) = 0x00f087da
[0x4022d1] memchr("#define ISBLANK(c) (isascii (c) "..., '\n', 1155) = 0x00f0880a
[0x4022d1] memchr("#else\n#define ISBLANK(c) ((c) =="..., '\n', 1107) = 0x00f08810
[0x4022d1] memchr("#define ISBLANK(c) ((c) == ' ' |"..., '\n', 1101) = 0x00f0883f
[0x4022d1] memchr("#endif\n#ifdef isgraph\n#define IS"..., '\n', 1054) = 0x00f08846
[0x4022d1] memchr("#ifdef isgraph\n#define ISGRAPH(c"..., '\n', 1047) = 0x00f08855
[0x4022d1] memchr("#define ISGRAPH(c) (isascii (c) "..., '\n', 1032) = 0x00f08885
[0x4022d1] memchr("#else\n#define ISGRAPH(c) (isasci"..., '\n', 984) = 0x00f0888b
[0x4022d1] memchr("#define ISGRAPH(c) (isascii (c) "..., '\n', 978) = 0x00f088cb
[0x4022d1] memchr("#endif\n\n#define ISPRINT(c) (isas"..., '\n', 914) = 0x00f088d2
[0x4022d1] memchr("\n#define ISPRINT(c) (isascii (c)"..., '\n', 907) = 0x00f088d3
[0x4022d1] memchr("#define ISPRINT(c) (isascii (c) "..., '\n', 906) = 0x00f08903
[0x4022d1] memchr("#define ISDIGIT(c) (isascii (c) "..., '\n', 858) = 0x00f08933
[0x4022d1] memchr("#define ISALNUM(c) (isascii (c) "..., '\n', 810) = 0x00f08963
[0x4022d1] memchr("#define ISALPHA(c) (isascii (c) "..., '\n', 762) = 0x00f08993
[0x4022d1] memchr("#define ISCNTRL(c) (isascii (c) "..., '\n', 714) = 0x00f089c3
[0x4022d1] memchr("#define ISLOWER(c) (isascii (c) "..., '\n', 666) = 0x00f089f3
[0x4022d1] memchr("#define ISPUNCT(c) (isascii (c) "..., '\n', 618) = 0x00f08a23
[0x4022d1] memchr("#define ISSPACE(c) (isascii (c) "..., '\n', 570) = 0x00f08a53
[0x4022d1] memchr("#define ISUPPER(c) (isascii (c) "..., '\n', 522) = 0x00f08a83
[0x4022d1] memchr("#define ISXDIGIT(c) (isascii (c)"..., '\n', 474) = 0x00f08ab5
[0x4022d1] memchr("\n#ifndef NULL\n#define NULL 0\n#en"..., '\n', 424) = 0x00f08ab6
[0x4022d1] memchr("#ifndef NULL\n#define NULL 0\n#end"..., '\n', 423) = 0x00f08ac3
[0x4022d1] memchr("#define NULL 0\n#endif\n\n/* We rem"..., '\n', 410) = 0x00f08ad2
[0x4022d1] memchr("#endif\n\n/* We remove any previou"..., '\n', 395) = 0x00f08ad9
[0x4022d1] memchr("\n/* We remove any previous defin"..., '\n', 388) = 0x00f08ada
[0x4022d1] memchr("/* We remove any previous defini"..., '\n', 387) = 0x00f08b16
[0x4022d1] memchr("   since ours (we hope) works pr"..., '\n', 327) = 0x00f08b56
[0x4022d1] memchr("   machines, compilers, `char' a"..., '\n', 263) = 0x00f08b99
[0x4022d1] memchr("   (Per Bothner suggested the ba"..., '\n', 196) = 0x00f08bcc
[0x4022d1] memchr("#undef SIGN_EXTEND_CHAR\n#if __ST"..., '\n', 145) = 0x00f08be4
[0x4022d1] memchr("#if __STDC__\n#define SIGN_EXTEND"..., '\n', 121) = 0x00f08bf1
[0x4022d1] memchr("#define SIGN_EXTEND_CHAR(c) ((si"..., '\n', 108) = 0x00f08c21
[0x4022d1] memchr("#else  /* not __STDC__ */\n/* As "..., '\n', 60) = 0x00f08c3b
[0x4022d1] memchr("/* As in Harbison and Steele.  *"..., '\n', 34) = 0x00f08c5d
[0x4022d1] memchr("#define SIGN_EXTEND_CHAR(c) (((("..., '\n', 0) = NULL
[0x4023cc] fwrite("1786:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define SIGN_EXTEND_CHAR(c) (((("..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n\014\n/* Should we use malloc"..., '1', 21337) = 0x00f0905c
[0x40cdf3] memchr("1\n#endif \n#else /* not __GNUC__ "..., '\n', 20381) = 0x00f0905d
[0x4022d1] memchr("#endif\n\014\n/* Should we use malloc"..., '\n', 936) = 0x00f08ca6
[0x4022d1] memchr("\014\n/* Should we use malloc or all"..., '\n', 929) = 0x00f08ca8
[0x4022d1] memchr("/* Should we use malloc or alloc"..., '\n', 927) = 0x00f08cef
[0x4022d1] memchr("   use `alloca' instead of `mall"..., '\n', 856) = 0x00f08d35
[0x4022d1] memchr("   re_search* or re_match* could"..., '\n', 786) = 0x00f08d7d
[0x4022d1] memchr("   Emacs; also, malloc is slower"..., '\n', 714) = 0x00f08dc4
[0x4022d1] memchr("   the other hand, malloc is mor"..., '\n', 643) = 0x00f08e07
[0x4022d1] memchr("   \n   Because we sometimes use "..., '\n', 576) = 0x00f08e0b
[0x4022d1] memchr("   Because we sometimes use allo"..., '\n', 572) = 0x00f08e50
[0x4022d1] memchr("   not functions -- `alloca'-all"..., '\n', 503) = 0x00f08e9a
[0x4022d1] memchr("   function it is called in.  */"..., '\n', 429) = 0x00f08ebb
[0x4022d1] memchr("\n#ifdef REGEX_MALLOC\n\n#define RE"..., '\n', 396) = 0x00f08ebc
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n\n#define REG"..., '\n', 395) = 0x00f08ed0
[0x4022d1] memchr("\n#define REGEX_ALLOCATE malloc\n#"..., '\n', 375) = 0x00f08ed1
[0x4022d1] memchr("#define REGEX_ALLOCATE malloc\n#d"..., '\n', 374) = 0x00f08eef
[0x4022d1] memchr("#define REGEX_REALLOCATE(source,"..., '\n', 344) = 0x00f08f36
[0x4022d1] memchr("\n#else /* not REGEX_MALLOC  */\n\n"..., '\n', 273) = 0x00f08f37
[0x4022d1] memchr("#else /* not REGEX_MALLOC  */\n\n/"..., '\n', 272) = 0x00f08f55
[0x4022d1] memchr("\n/* Emacs already defines alloca"..., '\n', 242) = 0x00f08f56
[0x4022d1] memchr("/* Emacs already defines alloca,"..., '\n', 241) = 0x00f08f86
[0x4022d1] memchr("#ifndef alloca\n\n/* Make alloca w"..., '\n', 193) = 0x00f08f95
[0x4022d1] memchr("\n/* Make alloca work the best po"..., '\n', 178) = 0x00f08f96
[0x4022d1] memchr("/* Make alloca work the best pos"..., '\n', 177) = 0x00f08fc5
[0x4022d1] memchr("#ifdef __GNUC__\n#define alloca _"..., '\n', 130) = 0x00f08fd5
[0x4022d1] memchr("#define alloca __builtin_alloca\n"..., '\n', 114) = 0x00f08ff5
[0x4022d1] memchr("#else /* not __GNUC__ */\n#if HAV"..., '\n', 82) = 0x00f0900e
[0x4022d1] memchr("#if HAVE_ALLOCA_H\n#if flag_alloc"..., '\n', 57) = 0x00f09020
[0x4022d1] memchr("#if flag_alloca==0\n#include <all"..., '\n', 39) = 0x00f09033
[0x4022d1] memchr("#include <alloca.h>\n#define flag"..., '\n', 20) = 0x00f09047
[0x4022d1] memchr("#define flag_alloca 1\n#endif \n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("1816:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_alloca 1\n#endif \n#e"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif \n#else /* not __GNUC__ or"..., '1', 20379) = 0x00f0925e
[0x40cdf3] memchr("1' is non-NULL and PTR is pointi"..., '\n', 19867) = 0x00f09290
[0x4022d1] memchr("#endif \n#else /* not __GNUC__ or"..., '\n', 496) = 0x00f09065
[0x4022d1] memchr("#else /* not __GNUC__ or HAVE_AL"..., '\n', 488) = 0x00f0908f
[0x4022d1] memchr("#ifndef _AIX /* Already did AIX,"..., '\n', 446) = 0x00f090c3
[0x4022d1] memchr("char *alloca ();\n#endif /* not _"..., '\n', 394) = 0x00f090d4
[0x4022d1] memchr("#endif /* not _AIX */\n#endif /* "..., '\n', 377) = 0x00f090ea
[0x4022d1] memchr("#endif /* not HAVE_ALLOCA_H */ \n"..., '\n', 355) = 0x00f0910a
[0x4022d1] memchr("#endif /* not __GNUC__ */\n\n#endi"..., '\n', 323) = 0x00f09124
[0x4022d1] memchr("\n#endif /* not alloca */\n\n#defin"..., '\n', 297) = 0x00f09125
[0x4022d1] memchr("#endif /* not alloca */\n\n#define"..., '\n', 296) = 0x00f0913d
[0x4022d1] memchr("\n#define REGEX_ALLOCATE alloca\n\n"..., '\n', 272) = 0x00f0913e
[0x4022d1] memchr("#define REGEX_ALLOCATE alloca\n\n/"..., '\n', 271) = 0x00f0915c
[0x4022d1] memchr("\n/* Assumes a `char *destination"..., '\n', 241) = 0x00f0915d
[0x4022d1] memchr("/* Assumes a `char *destination'"..., '\n', 240) = 0x00f0918c
[0x4022d1] memchr("#define REGEX_REALLOCATE(source,"..., '\n', 193) = 0x00f091c0
[0x4022d1] memchr("  (destination = (char *) alloca"..., '\n', 141) = 0x00f091ef
[0x4022d1] memchr("   bcopy (source, destination, o"..., '\n', 94) = 0x00f0921c
[0x4022d1] memchr("   destination)\n\n#endif /* not R"..., '\n', 49) = 0x00f0922c
[0x4022d1] memchr("\n#endif /* not REGEX_MALLOC */\n\n"..., '\n', 33) = 0x00f0922d
[0x4022d1] memchr("#endif /* not REGEX_MALLOC */\n\n\n"..., '\n', 32) = 0x00f0924b
[0x4022d1] memchr("\n\n/* True if `size1' is non-NULL"..., '\n', 2) = 0x00f0924c
[0x4022d1] memchr("\n/* True if `size1' is non-NULL "..., '\n', 1) = 0x00f0924d
[0x4022d1] memchr("/* True if `size1' is non-NULL a"..., '\n', 0) = NULL
[0x4023cc] fwrite("1838:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* True if `size1' is non-NULL a"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   `string1' or just past its en"..., '1', 19816) = 0x00f0929b
[0x40cdf3] memchr("1' or just past its end.  This w"..., '\n', 19806) = 0x00f092d8
[0x4022d1] memchr("   `string1' or just past its en"..., '\n', 0) = NULL
[0x4023cc] fwrite("1839:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   `string1' or just past its en"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   a good thing.  */\n#define FIR"..., '1', 19744) = 0x00f09318
[0x40cdf3] memchr("1 && string1 <= (ptr) && (ptr) <"..., '\n', 19681) = 0x00f0934a
[0x4022d1] memchr("   a good thing.  */\n#define FIR"..., '\n', 56) = 0x00f092ed
[0x4022d1] memchr("#define FIRST_STRING_P(ptr) \t\t\t\t"..., '\n', 35) = 0x00f09310
[0x4022d1] memchr("  (size1 && string1 <= (ptr) && "..., '\n', 0) = NULL
[0x4023cc] fwrite("1842:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  (size1 && string1 <= (ptr) && "..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* (Re)Allocate N items of type"..., '1', 19630) = 0x00f09489
[0x40cdf3] memchr("1, s2) ((strcmp (s1, s2) == 0))\n"..., '\n', 19312) = 0x00f094a8
[0x4022d1] memchr("\n/* (Re)Allocate N items of type"..., '\n', 303) = 0x00f0934b
[0x4022d1] memchr("/* (Re)Allocate N items of type "..., '\n', 302) = 0x00f09388
[0x4022d1] memchr("#define TALLOC(n, t) ((t *) mall"..., '\n', 241) = 0x00f093bf
[0x4022d1] memchr("#define RETALLOC(addr, n, t) ((a"..., '\n', 186) = 0x00f0940e
[0x4022d1] memchr("#define REGEX_TALLOC(n, t) ((t *"..., '\n', 107) = 0x00f09453
[0x4022d1] memchr("\n#define BYTEWIDTH 8 /* In bits."..., '\n', 38) = 0x00f09454
[0x4022d1] memchr("#define BYTEWIDTH 8 /* In bits. "..., '\n', 37) = 0x00f09478
[0x4022d1] memchr("\n#define STREQ(s1, s2) ((strcmp "..., '\n', 1) = 0x00f09479
[0x4022d1] memchr("#define STREQ(s1, s2) ((strcmp ("..., '\n', 0) = NULL
[0x4023cc] fwrite("1851:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define STREQ(s1, s2) ((strcmp ("..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n#undef MAX               /*****"..., '1', 19280) = 0x00f09568
[0x40cdf3] memchr("1\n\014\n/* These are the command cod"..., '\n', 19089) = 0x00f09569
[0x4022d1] memchr("\n#undef MAX               /*****"..., '\n', 178) = 0x00f094a9
[0x4022d1] memchr("#undef MAX               /******"..., '\n', 177) = 0x00f094df
[0x4022d1] memchr("#define MAX(a, b) ((a) > (b) ? ("..., '\n', 123) = 0x00f09509
[0x4022d1] memchr("#define MIN(a, b) ((a) < (b) ? ("..., '\n', 81) = 0x00f09533
[0x4022d1] memchr("\ntypedef char boolean;\n#define f"..., '\n', 39) = 0x00f09534
[0x4022d1] memchr("typedef char boolean;\n#define fa"..., '\n', 38) = 0x00f0954a
[0x4022d1] memchr("#define false 0\n#define true 1\n\014"..., '\n', 16) = 0x00f0955a
[0x4022d1] memchr("#define true 1\n\014\n/* These are th"..., '\n', 0) = NULL
[0x4023cc] fwrite("1859:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define true 1\n\014\n/* These are th"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\014\n/* These are the command codes"..., '1', 19087) = 0x00f096f8
[0x40cdf3] memchr("1; the value of\n   `exactn' we u"..., '\n', 18689) = 0x00f09707
[0x4022d1] memchr("\014\n/* These are the command codes"..., '\n', 343) = 0x00f0956b
[0x4022d1] memchr("/* These are the command codes t"..., '\n', 341) = 0x00f095aa
[0x4022d1] memchr("   expressions.  Some opcodes ar"..., '\n', 278) = 0x00f095eb
[0x4022d1] memchr("   command code can specify any "..., '\n', 213) = 0x00f0962d
[0x4022d1] memchr("   arguments.  Zero bytes may ap"..., '\n', 147) = 0x00f09676
[0x4022d1] memchr("\n   The value of `exactn' is nee"..., '\n', 74) = 0x00f09677
[0x4022d1] memchr("   The value of `exactn' is need"..., '\n', 73) = 0x00f096c0
[0x4022d1] memchr("   So regex.h defines a symbol `"..., '\n', 0) = NULL
[0x4023cc] fwrite("1867:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   So regex.h defines a symbol `"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   `exactn' we use here must als"..., '1', 18673) = 0x00f0972d
[0x40cdf3] memchr("1.  */\n\ntypedef enum\n{\n  no_op ="..., '\n', 18636) = 0x00f09733
[0x4022d1] memchr("   `exactn' we use here must als"..., '\n', 0) = NULL
[0x4023cc] fwrite("1868:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   `exactn' we use here must als"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\ntypedef enum\n{\n  no_op = 0,\n\n  "..., '1', 18629) = 0x00f097a4
[0x40cdf3] memchr("1,\n\n        /* Matches any (more"..., '\n', 18517) = 0x00f097a6
[0x4022d1] memchr("\ntypedef enum\n{\n  no_op = 0,\n\n  "..., '\n', 101) = 0x00f09734
[0x4022d1] memchr("typedef enum\n{\n  no_op = 0,\n\n   "..., '\n', 100) = 0x00f09741
[0x4022d1] memchr("{\n  no_op = 0,\n\n        /* Follo"..., '\n', 87) = 0x00f09743
[0x4022d1] memchr("  no_op = 0,\n\n        /* Followe"..., '\n', 85) = 0x00f09750
[0x4022d1] memchr("\n        /* Followed by one byte"..., '\n', 72) = 0x00f09751
[0x4022d1] memchr("        /* Followed by one byte "..., '\n', 71) = 0x00f09798
[0x4022d1] memchr("  exactn = 1,\n\n        /* Matche"..., '\n', 0) = NULL
[0x4023cc] fwrite("1875:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  exactn = 1,\n\n        /* Matche"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n        /* Matches any (more or"..., '1', 18514) = 0x00f09912
[0x40cdf3] memchr("1.  A character too large to hav"..., '\n', 18151) = 0x00f09947
[0x4022d1] memchr("\n        /* Matches any (more or"..., '\n', 345) = 0x00f097a7
[0x4022d1] memchr("        /* Matches any (more or "..., '\n', 344) = 0x00f097dc
[0x4022d1] memchr("  anychar,\n\n        /* Matches a"..., '\n', 291) = 0x00f097e7
[0x4022d1] memchr("\n        /* Matches any one char"..., '\n', 280) = 0x00f097e8
[0x4022d1] memchr("        /* Matches any one char "..., '\n', 279) = 0x00f0982b
[0x4022d1] memchr("           following byte is num"..., '\n', 212) = 0x00f09871
[0x4022d1] memchr("           for a bitmap saying w"..., '\n', 142) = 0x00f098b7
[0x4022d1] memchr("           are ordered low-bit-f"..., '\n', 72) = 0x00f098ff
[0x4022d1] memchr("           bit is 1.  A characte"..., '\n', 0) = NULL
[0x4023cc] fwrite("1884:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("           bit is 1.  A characte"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("           automatically not in "..., '1', 18097) = 0x00f0ab5b
[0x40cdf3] memchr("1] = (number) >> 8;\t\t\t\t\t\\\n  } wh"..., '\n', 13470) = 0x00f0ab74
[0x4022d1] memchr("           automatically not in "..., '\n', 4609) = 0x00f09974
[0x4022d1] memchr("  charset,\n\n        /* Same para"..., '\n', 4564) = 0x00f0997f
[0x4022d1] memchr("\n        /* Same parameters as c"..., '\n', 4553) = 0x00f09980
[0x4022d1] memchr("        /* Same parameters as ch"..., '\n', 4552) = 0x00f099c7
[0x4022d1] memchr("           not one of those spec"..., '\n', 4481) = 0x00f099f2
[0x4022d1] memchr("  charset_not,\n\n        /* Start"..., '\n', 4438) = 0x00f09a01
[0x4022d1] memchr("\n        /* Start remembering th"..., '\n', 4423) = 0x00f09a02
[0x4022d1] memchr("        /* Start remembering the"..., '\n', 4422) = 0x00f09a4a
[0x4022d1] memchr("           register.  Followed b"..., '\n', 4350) = 0x00f09a92
[0x4022d1] memchr("           the range 0 to one le"..., '\n', 4278) = 0x00f09ad7
[0x4022d1] memchr("           field.  Then followed"..., '\n', 4209) = 0x00f09b1e
[0x4022d1] memchr("           inner to this one.  ("..., '\n', 4138) = 0x00f09b5e
[0x4022d1] memchr("           start_memory only bec"..., '\n', 4074) = 0x00f09ba5
[0x4022d1] memchr("           of re_match_2.)  */\n "..., '\n', 4003) = 0x00f09bc4
[0x4022d1] memchr("  start_memory,\n\n        /* Stop"..., '\n', 3972) = 0x00f09bd4
[0x4022d1] memchr("\n        /* Stop remembering the"..., '\n', 3956) = 0x00f09bd5
[0x4022d1] memchr("        /* Stop remembering the "..., '\n', 3955) = 0x00f09c1c
[0x4022d1] memchr("           memory register.  Fol"..., '\n', 3884) = 0x00f09c60
[0x4022d1] memchr("           number, in the range "..., '\n', 3816) = 0x00f09ca4
[0x4022d1] memchr("           pattern buffer, and o"..., '\n', 3748) = 0x00f09ced
[0x4022d1] memchr("           just like `start_memo"..., '\n', 3675) = 0x00f09d30
[0x4022d1] memchr("           groups here because w"..., '\n', 3608) = 0x00f09d79
[0x4022d1] memchr("           corresponding start_m"..., '\n', 3535) = 0x00f09dc1
[0x4022d1] memchr("  stop_memory,\n\n        /* Match"..., '\n', 3463) = 0x00f09dd0
[0x4022d1] memchr("\n        /* Match a duplicate of"..., '\n', 3448) = 0x00f09dd1
[0x4022d1] memchr("        /* Match a duplicate of "..., '\n', 3447) = 0x00f09e17
[0x4022d1] memchr("           byte containing the r"..., '\n', 3377) = 0x00f09e4b
[0x4022d1] memchr("  duplicate,\n\n        /* Fail un"..., '\n', 3325) = 0x00f09e58
[0x4022d1] memchr("\n        /* Fail unless at begin"..., '\n', 3312) = 0x00f09e59
[0x4022d1] memchr("        /* Fail unless at beginn"..., '\n', 3311) = 0x00f09e8a
[0x4022d1] memchr("  begline,\n\n        /* Fail unle"..., '\n', 3262) = 0x00f09e95
[0x4022d1] memchr("\n        /* Fail unless at end o"..., '\n', 3251) = 0x00f09e96
[0x4022d1] memchr("        /* Fail unless at end of"..., '\n', 3250) = 0x00f09ec1
[0x4022d1] memchr("  endline,\n\n        /* Succeeds "..., '\n', 3207) = 0x00f09ecc
[0x4022d1] memchr("\n        /* Succeeds if at begin"..., '\n', 3196) = 0x00f09ecd
[0x4022d1] memchr("        /* Succeeds if at beginn"..., '\n', 3195) = 0x00f09f16
[0x4022d1] memchr("           of string to be match"..., '\n', 3122) = 0x00f09f47
[0x4022d1] memchr("  begbuf,\n\n        /* Analogousl"..., '\n', 3073) = 0x00f09f51
[0x4022d1] memchr("\n        /* Analogously, for end"..., '\n', 3063) = 0x00f09f52
[0x4022d1] memchr("        /* Analogously, for end "..., '\n', 3062) = 0x00f09f88
[0x4022d1] memchr("  endbuf,\n \n        /* Followed "..., '\n', 3008) = 0x00f09f92
[0x4022d1] memchr(" \n        /* Followed by two byt"..., '\n', 2998) = 0x00f09f94
[0x4022d1] memchr("        /* Followed by two byte "..., '\n', 2996) = 0x00f09fdb
[0x4022d1] memchr("  jump, \n\n\t/* Same as jump, but "..., '\n', 2925) = 0x00f09fe4
[0x4022d1] memchr("\n\t/* Same as jump, but marks the"..., '\n', 2916) = 0x00f09fe5
[0x4022d1] memchr("\t/* Same as jump, but marks the "..., '\n', 2915) = 0x00f0a020
[0x4022d1] memchr("  jump_past_alt,\n\n        /* Fol"..., '\n', 2856) = 0x00f0a031
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 2839) = 0x00f0a032
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 2838) = 0x00f0a079
[0x4022d1] memchr("           in case of failure.  "..., '\n', 2767) = 0x00f0a09c
[0x4022d1] memchr("  on_failure_jump,\n\t\n        /* "..., '\n', 2732) = 0x00f0a0af
[0x4022d1] memchr("\t\n        /* Like on_failure_jum"..., '\n', 2713) = 0x00f0a0b1
[0x4022d1] memchr("        /* Like on_failure_jump,"..., '\n', 2711) = 0x00f0a0fa
[0x4022d1] memchr("           current string positi"..., '\n', 2638) = 0x00f0a130
[0x4022d1] memchr("  on_failure_keep_string_jump,\n "..., '\n', 2584) = 0x00f0a14f
[0x4022d1] memchr("  \n        /* Throw away latest "..., '\n', 2553) = 0x00f0a152
[0x4022d1] memchr("        /* Throw away latest fai"..., '\n', 2550) = 0x00f0a198
[0x4022d1] memchr("           two-byte relative add"..., '\n', 2480) = 0x00f0a1c2
[0x4022d1] memchr("  pop_failure_jump,\n\n        /* "..., '\n', 2438) = 0x00f0a1d6
[0x4022d1] memchr("\n        /* Change to pop_failur"..., '\n', 2418) = 0x00f0a1d7
[0x4022d1] memchr("        /* Change to pop_failure"..., '\n', 2417) = 0x00f0a220
[0x4022d1] memchr("           match; otherwise chan"..., '\n', 2344) = 0x00f0a262
[0x4022d1] memchr("           back to the beginning"..., '\n', 2278) = 0x00f0a2ab
[0x4022d1] memchr("           clearly won't match w"..., '\n', 2205) = 0x00f0a2f4
[0x4022d1] memchr("           sure that there is no"..., '\n', 2132) = 0x00f0a339
[0x4022d1] memchr("           already matched, then"..., '\n', 2063) = 0x00f0a37e
[0x4022d1] memchr("           Followed by two-byte "..., '\n', 1994) = 0x00f0a3ab
[0x4022d1] memchr("  maybe_pop_jump,\n\n        /* Ju"..., '\n', 1949) = 0x00f0a3bd
[0x4022d1] memchr("\n        /* Jump to following tw"..., '\n', 1931) = 0x00f0a3be
[0x4022d1] memchr("        /* Jump to following two"..., '\n', 1930) = 0x00f0a406
[0x4022d1] memchr("           point. This failure p"..., '\n', 1858) = 0x00f0a44d
[0x4022d1] memchr("           is made to use it for"..., '\n', 1787) = 0x00f0a495
[0x4022d1] memchr("           before the first repe"..., '\n', 1715) = 0x00f0a4dc
[0x4022d1] memchr("           of jump when compilin"..., '\n', 1644) = 0x00f0a512
[0x4022d1] memchr("  dummy_failure_jump,\n\n\t/* Push "..., '\n', 1590) = 0x00f0a528
[0x4022d1] memchr("\n\t/* Push a dummy failure point "..., '\n', 1568) = 0x00f0a529
[0x4022d1] memchr("\t/* Push a dummy failure point a"..., '\n', 1567) = 0x00f0a56a
[0x4022d1] memchr("\t   alternatives.  */\n  push_dum"..., '\n', 1502) = 0x00f0a580
[0x4022d1] memchr("  push_dummy_failure,\n\n        /"..., '\n', 1480) = 0x00f0a596
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 1458) = 0x00f0a597
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 1457) = 0x00f0a5df
[0x4022d1] memchr("           After matching N time"..., '\n', 1385) = 0x00f0a628
[0x4022d1] memchr("  succeed_n,\n\n        /* Followe"..., '\n', 1312) = 0x00f0a635
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 1299) = 0x00f0a636
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 1298) = 0x00f0a67f
[0x4022d1] memchr("           Jump to the address N"..., '\n', 1225) = 0x00f0a6b6
[0x4022d1] memchr("  jump_n,\n\n        /* Set the fo"..., '\n', 1170) = 0x00f0a6c0
[0x4022d1] memchr("\n        /* Set the following tw"..., '\n', 1160) = 0x00f0a6c1
[0x4022d1] memchr("        /* Set the following two"..., '\n', 1159) = 0x00f0a6ff
[0x4022d1] memchr("           subsequent two-byte n"..., '\n', 1097) = 0x00f0a746
[0x4022d1] memchr("           bytes of number.  */\n"..., '\n', 1026) = 0x00f0a766
[0x4022d1] memchr("  set_number_at,\n\n  wordchar,\t/*"..., '\n', 994) = 0x00f0a777
[0x4022d1] memchr("\n  wordchar,\t/* Matches any word"..., '\n', 977) = 0x00f0a778
[0x4022d1] memchr("  wordchar,\t/* Matches any word-"..., '\n', 976) = 0x00f0a7b3
[0x4022d1] memchr("  notwordchar,\t/* Matches any ch"..., '\n', 917) = 0x00f0a7fa
[0x4022d1] memchr("\n  wordbeg,\t/* Succeeds if at wo"..., '\n', 846) = 0x00f0a7fb
[0x4022d1] memchr("  wordbeg,\t/* Succeeds if at wor"..., '\n', 845) = 0x00f0a82c
[0x4022d1] memchr("  wordend,\t/* Succeeds if at wor"..., '\n', 796) = 0x00f0a857
[0x4022d1] memchr("\n  wordbound,\t/* Succeeds if at "..., '\n', 753) = 0x00f0a858
[0x4022d1] memchr("  wordbound,\t/* Succeeds if at a"..., '\n', 752) = 0x00f0a88c
[0x4022d1] memchr("  notwordbound\t/* Succeeds if no"..., '\n', 700) = 0x00f0a8c6
[0x4022d1] memchr("\n#ifdef emacs\n  ,before_dot,\t/* "..., '\n', 642) = 0x00f0a8c7
[0x4022d1] memchr("#ifdef emacs\n  ,before_dot,\t/* S"..., '\n', 641) = 0x00f0a8d4
[0x4022d1] memchr("  ,before_dot,\t/* Succeeds if be"..., '\n', 628) = 0x00f0a904
[0x4022d1] memchr("  at_dot,\t/* Succeeds if at poin"..., '\n', 580) = 0x00f0a92b
[0x4022d1] memchr("  after_dot,\t/* Succeeds if afte"..., '\n', 541) = 0x00f0a958
[0x4022d1] memchr("\n\t/* Matches any character whose"..., '\n', 496) = 0x00f0a959
[0x4022d1] memchr("\t/* Matches any character whose "..., '\n', 495) = 0x00f0a99b
[0x4022d1] memchr("           a byte which contains"..., '\n', 429) = 0x00f0a9dc
[0x4022d1] memchr("  syntaxspec,\n\n\t/* Matches any c"..., '\n', 364) = 0x00f0a9ea
[0x4022d1] memchr("\n\t/* Matches any character whose"..., '\n', 350) = 0x00f0a9eb
[0x4022d1] memchr("\t/* Matches any character whose "..., '\n', 349) = 0x00f0aa2d
[0x4022d1] memchr("  notsyntaxspec\n#endif /* emacs "..., '\n', 283) = 0x00f0aa3d
[0x4022d1] memchr("#endif /* emacs */\n} re_opcode_t"..., '\n', 267) = 0x00f0aa50
[0x4022d1] memchr("} re_opcode_t;\n\014\n/* Common opera"..., '\n', 248) = 0x00f0aa5f
[0x4022d1] memchr("\014\n/* Common operations on the co"..., '\n', 233) = 0x00f0aa61
[0x4022d1] memchr("/* Common operations on the comp"..., '\n', 231) = 0x00f0aa93
[0x4022d1] memchr("\n/* Store NUMBER in two contiguo"..., '\n', 181) = 0x00f0aa94
[0x4022d1] memchr("/* Store NUMBER in two contiguou"..., '\n', 180) = 0x00f0aad9
[0x4022d1] memchr("\n#define STORE_NUMBER(destinatio"..., '\n', 111) = 0x00f0aada
[0x4022d1] memchr("#define STORE_NUMBER(destination"..., '\n', 110) = 0x00f0ab09
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    (destinatio"..., '\n', 63) = 0x00f0ab1a
[0x4022d1] memchr("    (destination)[0] = (number) "..., '\n', 46) = 0x00f0ab48
[0x4022d1] memchr("    (destination)[1] = (number) "..., '\n', 0) = NULL
[0x4023cc] fwrite("2008:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    (destination)[1] = (number) "..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  } while (0)\n\n/* Same as STORE_"..., '1', 13444) = 0x00f0adc1
[0x40cdf3] memchr("1)) << 8;\t\t\\\n  } while (0)\n\n#ifd"..., '\n', 12856) = 0x00f0adcd
[0x4022d1] memchr("  } while (0)\n\n/* Same as STORE_"..., '\n', 536) = 0x00f0ab82
[0x4022d1] memchr("\n/* Same as STORE_NUMBER, except"..., '\n', 522) = 0x00f0ab83
[0x4022d1] memchr("/* Same as STORE_NUMBER, except "..., '\n', 521) = 0x00f0abbc
[0x4022d1] memchr("   the byte after where the numb"..., '\n', 464) = 0x00f0ac02
[0x4022d1] memchr("   must be an lvalue.  */\n\n#defi"..., '\n', 394) = 0x00f0ac1c
[0x4022d1] memchr("\n#define STORE_NUMBER_AND_INCR(d"..., '\n', 368) = 0x00f0ac1d
[0x4022d1] memchr("#define STORE_NUMBER_AND_INCR(de"..., '\n', 367) = 0x00f0ac54
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    STORE_NUMBE"..., '\n', 312) = 0x00f0ac65
[0x4022d1] memchr("    STORE_NUMBER (destination, n"..., '\n', 295) = 0x00f0ac93
[0x4022d1] memchr("    (destination) += 2;\t\t\t\t\t\t\t\\\n"..., '\n', 249) = 0x00f0acb3
[0x4022d1] memchr("  } while (0)\n\n/* Put into DESTI"..., '\n', 217) = 0x00f0acc1
[0x4022d1] memchr("\n/* Put into DESTINATION a numbe"..., '\n', 203) = 0x00f0acc2
[0x4022d1] memchr("/* Put into DESTINATION a number"..., '\n', 202) = 0x00f0ad0b
[0x4022d1] memchr("   at SOURCE.  */\n\n#define EXTRA"..., '\n', 129) = 0x00f0ad1d
[0x4022d1] memchr("\n#define EXTRACT_NUMBER(destinat"..., '\n', 111) = 0x00f0ad1e
[0x4022d1] memchr("#define EXTRACT_NUMBER(destinati"..., '\n', 110) = 0x00f0ad4f
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    (destinatio"..., '\n', 61) = 0x00f0ad60
[0x4022d1] memchr("    (destination) = *(source) & "..., '\n', 44) = 0x00f0ad8c
[0x4022d1] memchr("    (destination) += SIGN_EXTEND"..., '\n', 0) = NULL
[0x4023cc] fwrite("2027:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    (destination) += SIGN_EXTEND"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., '1', 12843) = 0x00f0ae6a
[0x40cdf3] memchr("1)); \n  *dest = *source & 0377;\n"..., '\n', 12687) = 0x00f0ae6f
[0x4022d1] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., '\n', 114) = 0x00f0addb
[0x4022d1] memchr("\n#ifdef DEBUG\nstatic void\nextrac"..., '\n', 100) = 0x00f0addc
[0x4022d1] memchr("#ifdef DEBUG\nstatic void\nextract"..., '\n', 99) = 0x00f0ade9
[0x4022d1] memchr("static void\nextract_number (dest"..., '\n', 86) = 0x00f0adf5
[0x4022d1] memchr("extract_number (dest, source)\n  "..., '\n', 74) = 0x00f0ae13
[0x4022d1] memchr("    int *dest;\n    unsigned char"..., '\n', 44) = 0x00f0ae22
[0x4022d1] memchr("    unsigned char *source;\n{\n  i"..., '\n', 29) = 0x00f0ae3d
[0x4022d1] memchr("{\n  int temp = SIGN_EXTEND_CHAR "..., '\n', 2) = 0x00f0ae3f
[0x4022d1] memchr("  int temp = SIGN_EXTEND_CHAR (*"..., '\n', 0) = NULL
[0x4023cc] fwrite("2036:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  int temp = SIGN_EXTEND_CHAR (*"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  *dest = *source & 0377;\n  *des"..., '1', 12681) = 0x00f0b43b
[0x40cdf3] memchr("1(x) if (debug) printf (x)\n#defi"..., '\n', 11198) = 0x00f0b455
[0x4022d1] memchr("  *dest = *source & 0377;\n  *des"..., '\n', 1464) = 0x00f0ae89
[0x4022d1] memchr("  *dest += temp << 8;\n}\n\n#ifndef"..., '\n', 1438) = 0x00f0ae9f
[0x4022d1] memchr("}\n\n#ifndef EXTRACT_MACROS /* To "..., '\n', 1416) = 0x00f0aea1
[0x4022d1] memchr("\n#ifndef EXTRACT_MACROS /* To de"..., '\n', 1414) = 0x00f0aea2
[0x4022d1] memchr("#ifndef EXTRACT_MACROS /* To deb"..., '\n', 1413) = 0x00f0aed5
[0x4022d1] memchr("#undef EXTRACT_NUMBER\n#define EX"..., '\n', 1362) = 0x00f0aeeb
[0x4022d1] memchr("#define EXTRACT_NUMBER(dest, src"..., '\n', 1340) = 0x00f0af29
[0x4022d1] memchr("#endif /* not EXTRACT_MACROS */\n"..., '\n', 1278) = 0x00f0af49
[0x4022d1] memchr("\n#endif /* DEBUG */\n\n/* Same as "..., '\n', 1246) = 0x00f0af4a
[0x4022d1] memchr("#endif /* DEBUG */\n\n/* Same as E"..., '\n', 1245) = 0x00f0af5d
[0x4022d1] memchr("\n/* Same as EXTRACT_NUMBER, exce"..., '\n', 1226) = 0x00f0af5e
[0x4022d1] memchr("/* Same as EXTRACT_NUMBER, excep"..., '\n', 1225) = 0x00f0afa6
[0x4022d1] memchr("   SOURCE must be an lvalue.  */"..., '\n', 1153) = 0x00f0afc7
[0x4022d1] memchr("\n#define EXTRACT_NUMBER_AND_INCR"..., '\n', 1120) = 0x00f0afc8
[0x4022d1] memchr("#define EXTRACT_NUMBER_AND_INCR("..., '\n', 1119) = 0x00f0b001
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    EXTRACT_NUM"..., '\n', 1062) = 0x00f0b012
[0x4022d1] memchr("    EXTRACT_NUMBER (destination,"..., '\n', 1045) = 0x00f0b041
[0x4022d1] memchr("    (source) += 2; \t\t\t\t\t\t\t\\\n  } "..., '\n', 998) = 0x00f0b05d
[0x4022d1] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., '\n', 970) = 0x00f0b06b
[0x4022d1] memchr("\n#ifdef DEBUG\nstatic void\nextrac"..., '\n', 956) = 0x00f0b06c
[0x4022d1] memchr("#ifdef DEBUG\nstatic void\nextract"..., '\n', 955) = 0x00f0b079
[0x4022d1] memchr("static void\nextract_number_and_i"..., '\n', 942) = 0x00f0b085
[0x4022d1] memchr("extract_number_and_incr (destina"..., '\n', 930) = 0x00f0b0b3
[0x4022d1] memchr("    int *destination;\n    unsign"..., '\n', 884) = 0x00f0b0c9
[0x4022d1] memchr("    unsigned char **source;\n{ \n "..., '\n', 862) = 0x00f0b0e5
[0x4022d1] memchr("{ \n  extract_number (destination"..., '\n', 834) = 0x00f0b0e8
[0x4022d1] memchr("  extract_number (destination, *"..., '\n', 831) = 0x00f0b111
[0x4022d1] memchr("  *source += 2;\n}\n\n#ifndef EXTRA"..., '\n', 790) = 0x00f0b121
[0x4022d1] memchr("}\n\n#ifndef EXTRACT_MACROS\n#undef"..., '\n', 774) = 0x00f0b123
[0x4022d1] memchr("\n#ifndef EXTRACT_MACROS\n#undef E"..., '\n', 772) = 0x00f0b124
[0x4022d1] memchr("#ifndef EXTRACT_MACROS\n#undef EX"..., '\n', 771) = 0x00f0b13b
[0x4022d1] memchr("#undef EXTRACT_NUMBER_AND_INCR\n#"..., '\n', 748) = 0x00f0b15a
[0x4022d1] memchr("#define EXTRACT_NUMBER_AND_INCR("..., '\n', 717) = 0x00f0b187
[0x4022d1] memchr("  extract_number_and_incr (&dest"..., '\n', 672) = 0x00f0b1af
[0x4022d1] memchr("#endif /* not EXTRACT_MACROS */\n"..., '\n', 632) = 0x00f0b1cf
[0x4022d1] memchr("\n#endif /* DEBUG */\n\014\n/* If DEBU"..., '\n', 600) = 0x00f0b1d0
[0x4022d1] memchr("#endif /* DEBUG */\n\014\n/* If DEBUG"..., '\n', 599) = 0x00f0b1e3
[0x4022d1] memchr("\014\n/* If DEBUG is defined, Regex "..., '\n', 580) = 0x00f0b1e5
[0x4022d1] memchr("/* If DEBUG is defined, Regex pr"..., '\n', 578) = 0x00f0b22e
[0x4022d1] memchr("   it is doing (if the variable "..., '\n', 505) = 0x00f0b277
[0x4022d1] memchr("   main program in `iregex.c', y"..., '\n', 432) = 0x00f0b2b9
[0x4022d1] memchr("   interactively.  And if linked"..., '\n', 366) = 0x00f0b300
[0x4022d1] memchr("   the other test files, you can"..., '\n', 295) = 0x00f0b344
[0x4022d1] memchr("\n#ifdef DEBUG\n\n/* We use standar"..., '\n', 227) = 0x00f0b345
[0x4022d1] memchr("#ifdef DEBUG\n\n/* We use standard"..., '\n', 226) = 0x00f0b352
[0x4022d1] memchr("\n/* We use standard I/O for debu"..., '\n', 213) = 0x00f0b353
[0x4022d1] memchr("/* We use standard I/O for debug"..., '\n', 212) = 0x00f0b37d
[0x4022d1] memchr("/*#include <stdio.h>*/\n\n/* It is"..., '\n', 170) = 0x00f0b394
[0x4022d1] memchr("\n/* It is useful to test things "..., '\n', 147) = 0x00f0b395
[0x4022d1] memchr("/* It is useful to test things t"..., '\n', 146) = 0x00f0b3de
[0x4022d1] memchr("#include <assert.h>\n\nstatic int "..., '\n', 73) = 0x00f0b3f2
[0x4022d1] memchr("\nstatic int debug = 0;\n\n#define "..., '\n', 53) = 0x00f0b3f3
[0x4022d1] memchr("static int debug = 0;\n\n#define D"..., '\n', 52) = 0x00f0b409
[0x4022d1] memchr("\n#define DEBUG_STATEMENT(e) e\n#d"..., '\n', 30) = 0x00f0b40a
[0x4022d1] memchr("#define DEBUG_STATEMENT(e) e\n#de"..., '\n', 29) = 0x00f0b427
[0x4022d1] memchr("#define DEBUG_PRINT1(x) if (debu"..., '\n', 0) = NULL
[0x4023cc] fwrite("2092:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT1(x) if (debu"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT2(x1, x2) if "..., '1', 11171) = 0x00f0b46c
[0x40cdf3] memchr("1, x2) if (debug) printf (x1, x2"..., '\n', 11149) = 0x00f0b48d
[0x4022d1] memchr("#define DEBUG_PRINT2(x1, x2) if "..., '\n', 0) = NULL
[0x4023cc] fwrite("2093:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT2(x1, x2) if "..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '1', 11115) = 0x00f0b4a4
[0x40cdf3] memchr("1, x2, x3) if (debug) printf (x1"..., '\n', 11093) = 0x00f0b4cd
[0x4022d1] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2094:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT3(x1, x2, x3)"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '1', 11051) = 0x00f0b4e4
[0x40cdf3] memchr("1, x2, x3, x4) if (debug) printf"..., '\n', 11029) = 0x00f0b515
[0x4022d1] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '\n', 0) = NULL
[0x4023cc] fwrite("2095:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT4(x1, x2, x3,"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '1', 10979) = 0x00f0b5a3
[0x40cdf3] memchr("1, sz1, s2, sz2)\t\t\t\\\n  if (debug"..., '\n', 10838) = 0x00f0b5b7
[0x4022d1] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '\n', 103) = 0x00f0b549
[0x4022d1] memchr("  if (debug) print_partial_compi"..., '\n', 51) = 0x00f0b57c
[0x4022d1] memchr("#define DEBUG_PRINT_DOUBLE_STRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("2098:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_DOUBLE_STRIN"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (debug) print_double_string"..., '1', 10817) = 0x00f0b5de
[0x40cdf3] memchr("1, sz1, s2, sz2)\n\n\nextern void p"..., '\n', 10779) = 0x00f0b5ee
[0x4022d1] memchr("  if (debug) print_double_string"..., '\n', 0) = NULL
[0x4023cc] fwrite("2099:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (debug) print_double_string"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\nextern void printchar ();\n\n/* "..., '1', 10762) = 0x00f0b6b1
[0x40cdf3] memchr("1 << BYTEWIDTH))\n    {\n      if "..., '\n', 10568) = 0x00f0b6c1
[0x4022d1] memchr("\n\nextern void printchar ();\n\n/* "..., '\n', 180) = 0x00f0b5ef
[0x4022d1] memchr("\nextern void printchar ();\n\n/* P"..., '\n', 179) = 0x00f0b5f0
[0x4022d1] memchr("extern void printchar ();\n\n/* Pr"..., '\n', 178) = 0x00f0b60a
[0x4022d1] memchr("\n/* Print the fastmap in human-r"..., '\n', 152) = 0x00f0b60b
[0x4022d1] memchr("/* Print the fastmap in human-re"..., '\n', 151) = 0x00f0b63c
[0x4022d1] memchr("\nvoid\nprint_fastmap (fastmap)\n  "..., '\n', 102) = 0x00f0b63d
[0x4022d1] memchr("void\nprint_fastmap (fastmap)\n   "..., '\n', 101) = 0x00f0b642
[0x4022d1] memchr("print_fastmap (fastmap)\n    char"..., '\n', 96) = 0x00f0b65a
[0x4022d1] memchr("    char *fastmap;\n{\n  unsigned "..., '\n', 72) = 0x00f0b66d
[0x4022d1] memchr("{\n  unsigned was_a_range = 0;\n  "..., '\n', 53) = 0x00f0b66f
[0x4022d1] memchr("  unsigned was_a_range = 0;\n  un"..., '\n', 51) = 0x00f0b68b
[0x4022d1] memchr("  unsigned i = 0;  \n  \n  while ("..., '\n', 23) = 0x00f0b69f
[0x4022d1] memchr("  \n  while (i < (1 << BYTEWIDTH)"..., '\n', 3) = 0x00f0b6a2
[0x4022d1] memchr("  while (i < (1 << BYTEWIDTH))\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("2113:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (i < (1 << BYTEWIDTH))\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      if (fastmap[i++])\n\t{"..., '1', 10551) = 0x00f0b710
[0x40cdf3] memchr("1);\n          while (i < (1 << B"..., '\n', 10473) = 0x00f0b713
[0x4022d1] memchr("    {\n      if (fastmap[i++])\n\t{"..., '\n', 53) = 0x00f0b6c7
[0x4022d1] memchr("      if (fastmap[i++])\n\t{\n\t  wa"..., '\n', 47) = 0x00f0b6df
[0x4022d1] memchr("\t{\n\t  was_a_range = 0;\n         "..., '\n', 23) = 0x00f0b6e2
[0x4022d1] memchr("\t  was_a_range = 0;\n          pr"..., '\n', 20) = 0x00f0b6f6
[0x4022d1] memchr("          printchar (i - 1);\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("2118:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          printchar (i - 1);\n   "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          while (i < (1 << BYTEW"..., '1', 10469) = 0x00f0b72a
[0x40cdf3] memchr("1 << BYTEWIDTH)  &&  fastmap[i])"..., '\n', 10447) = 0x00f0b74a
[0x4022d1] memchr("          while (i < (1 << BYTEW"..., '\n', 0) = NULL
[0x4023cc] fwrite("2119:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          while (i < (1 << BYTEW"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            {\n              was_"..., '1', 10414) = 0x00f0b775
[0x40cdf3] memchr("1;\n              i++;\n          "..., '\n', 10372) = 0x00f0b777
[0x4022d1] memchr("            {\n              was_"..., '\n', 14) = 0x00f0b758
[0x4022d1] memchr("              was_a_range = 1;\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("2121:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              was_a_range = 1;\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              i++;\n            }"..., '1', 10369) = 0x00f0b7f4
[0x40cdf3] memchr("1);\n            }\n        }\n    "..., '\n', 10245) = 0x00f0b7f7
[0x4022d1] memchr("              i++;\n            }"..., '\n', 95) = 0x00f0b78a
[0x4022d1] memchr("            }\n\t  if (was_a_range"..., '\n', 76) = 0x00f0b798
[0x4022d1] memchr("\t  if (was_a_range)\n            "..., '\n', 62) = 0x00f0b7ac
[0x4022d1] memchr("            {\n              prin"..., '\n', 42) = 0x00f0b7ba
[0x4022d1] memchr("              printf ("-");\n    "..., '\n', 28) = 0x00f0b7d6
[0x4022d1] memchr("              printchar (i - 1);"..., '\n', 0) = NULL
[0x4023cc] fwrite("2127:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              printchar (i - 1);"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            }\n        }\n    }\n  "..., '1', 10241) = 0x00f0bcf9
[0x40cdf3] memchr("100;\n\t    register int in_range "..., '\n', 8960) = 0x00f0bcfd
[0x4022d1] memchr("            }\n        }\n    }\n  "..., '\n', 1245) = 0x00f0b805
[0x4022d1] memchr("        }\n    }\n  putchar ('\\n')"..., '\n', 1231) = 0x00f0b80f
[0x4022d1] memchr("    }\n  putchar ('\\n'); \n}\n\n\n/* "..., '\n', 1221) = 0x00f0b815
[0x4022d1] memchr("  putchar ('\\n'); \n}\n\n\n/* Print "..., '\n', 1215) = 0x00f0b828
[0x4022d1] memchr("}\n\n\n/* Print a compiled pattern "..., '\n', 1196) = 0x00f0b82a
[0x4022d1] memchr("\n\n/* Print a compiled pattern st"..., '\n', 1194) = 0x00f0b82b
[0x4022d1] memchr("\n/* Print a compiled pattern str"..., '\n', 1193) = 0x00f0b82c
[0x4022d1] memchr("/* Print a compiled pattern stri"..., '\n', 1192) = 0x00f0b873
[0x4022d1] memchr("   the START pointer into it and"..., '\n', 1121) = 0x00f0b8bc
[0x4022d1] memchr("\nvoid\nprint_partial_compiled_pat"..., '\n', 1048) = 0x00f0b8bd
[0x4022d1] memchr("void\nprint_partial_compiled_patt"..., '\n', 1047) = 0x00f0b8c2
[0x4022d1] memchr("print_partial_compiled_pattern ("..., '\n', 1042) = 0x00f0b8ee
[0x4022d1] memchr("    unsigned char *start;\n    un"..., '\n', 998) = 0x00f0b908
[0x4022d1] memchr("    unsigned char *end;\n{\n  int "..., '\n', 972) = 0x00f0b920
[0x4022d1] memchr("{\n  int mcnt, mcnt2;\n  unsigned "..., '\n', 948) = 0x00f0b922
[0x4022d1] memchr("  int mcnt, mcnt2;\n  unsigned ch"..., '\n', 946) = 0x00f0b935
[0x4022d1] memchr("  unsigned char *p = start;\n  un"..., '\n', 927) = 0x00f0b951
[0x4022d1] memchr("  unsigned char *pend = end;\n\n  "..., '\n', 899) = 0x00f0b96e
[0x4022d1] memchr("\n  if (start == NULL)\n    {\n    "..., '\n', 870) = 0x00f0b96f
[0x4022d1] memchr("  if (start == NULL)\n    {\n     "..., '\n', 869) = 0x00f0b984
[0x4022d1] memchr("    {\n      printf ("(null)\\n");"..., '\n', 848) = 0x00f0b98a
[0x4022d1] memchr("      printf ("(null)\\n");\n     "..., '\n', 842) = 0x00f0b9a5
[0x4022d1] memchr("      return;\n    }\n    \n  /* Lo"..., '\n', 815) = 0x00f0b9b3
[0x4022d1] memchr("    }\n    \n  /* Loop over patter"..., '\n', 801) = 0x00f0b9b9
[0x4022d1] memchr("    \n  /* Loop over pattern comm"..., '\n', 795) = 0x00f0b9be
[0x4022d1] memchr("  /* Loop over pattern commands."..., '\n', 790) = 0x00f0b9e3
[0x4022d1] memchr("  while (p < pend)\n    {\n      p"..., '\n', 753) = 0x00f0b9f6
[0x4022d1] memchr("    {\n      printf ("%d:\\t", p -"..., '\n', 734) = 0x00f0b9fc
[0x4022d1] memchr("      printf ("%d:\\t", p - start"..., '\n', 728) = 0x00f0ba1f
[0x4022d1] memchr("\n      switch ((re_opcode_t) *p+"..., '\n', 693) = 0x00f0ba20
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 692) = 0x00f0ba42
[0x4022d1] memchr("\t{\n        case no_op:\n         "..., '\n', 658) = 0x00f0ba45
[0x4022d1] memchr("        case no_op:\n          pr"..., '\n', 655) = 0x00f0ba59
[0x4022d1] memchr("          printf ("/no_op");\n   "..., '\n', 635) = 0x00f0ba76
[0x4022d1] memchr("          break;\n\n\tcase exactn:\n"..., '\n', 606) = 0x00f0ba87
[0x4022d1] memchr("\n\tcase exactn:\n\t  mcnt = *p++;\n "..., '\n', 589) = 0x00f0ba88
[0x4022d1] memchr("\tcase exactn:\n\t  mcnt = *p++;\n  "..., '\n', 588) = 0x00f0ba96
[0x4022d1] memchr("\t  mcnt = *p++;\n          printf"..., '\n', 574) = 0x00f0baa6
[0x4022d1] memchr("          printf ("/exactn/%d", "..., '\n', 558) = 0x00f0bacd
[0x4022d1] memchr("          do\n\t    {\n            "..., '\n', 519) = 0x00f0bada
[0x4022d1] memchr("\t    {\n              putchar ('/"..., '\n', 506) = 0x00f0bae1
[0x4022d1] memchr("              putchar ('/');\n\t  "..., '\n', 499) = 0x00f0bafe
[0x4022d1] memchr("\t      printchar (*p++);\n       "..., '\n', 470) = 0x00f0bb17
[0x4022d1] memchr("            }\n          while (-"..., '\n', 445) = 0x00f0bb25
[0x4022d1] memchr("          while (--mcnt);\n      "..., '\n', 431) = 0x00f0bb3f
[0x4022d1] memchr("          break;\n\n\tcase start_me"..., '\n', 405) = 0x00f0bb50
[0x4022d1] memchr("\n\tcase start_memory:\n          m"..., '\n', 388) = 0x00f0bb51
[0x4022d1] memchr("\tcase start_memory:\n          mc"..., '\n', 387) = 0x00f0bb65
[0x4022d1] memchr("          mcnt = *p++;\n         "..., '\n', 367) = 0x00f0bb7c
[0x4022d1] memchr("          printf ("/start_memory"..., '\n', 344) = 0x00f0bbb2
[0x4022d1] memchr("          break;\n\n\tcase stop_mem"..., '\n', 290) = 0x00f0bbc3
[0x4022d1] memchr("\n\tcase stop_memory:\n          mc"..., '\n', 273) = 0x00f0bbc4
[0x4022d1] memchr("\tcase stop_memory:\n          mcn"..., '\n', 272) = 0x00f0bbd7
[0x4022d1] memchr("          mcnt = *p++;\n\t  printf"..., '\n', 253) = 0x00f0bbee
[0x4022d1] memchr("\t  printf ("/stop_memory/%d/%d","..., '\n', 230) = 0x00f0bc1c
[0x4022d1] memchr("          break;\n\n\tcase duplicat"..., '\n', 184) = 0x00f0bc2d
[0x4022d1] memchr("\n\tcase duplicate:\n\t  printf ("/d"..., '\n', 167) = 0x00f0bc2e
[0x4022d1] memchr("\tcase duplicate:\n\t  printf ("/du"..., '\n', 166) = 0x00f0bc3f
[0x4022d1] memchr("\t  printf ("/duplicate/%d", *p++"..., '\n', 149) = 0x00f0bc62
[0x4022d1] memchr("\t  break;\n\n\tcase anychar:\n\t  pri"..., '\n', 114) = 0x00f0bc6c
[0x4022d1] memchr("\n\tcase anychar:\n\t  printf ("/any"..., '\n', 104) = 0x00f0bc6d
[0x4022d1] memchr("\tcase anychar:\n\t  printf ("/anyc"..., '\n', 103) = 0x00f0bc7c
[0x4022d1] memchr("\t  printf ("/anychar");\n\t  break"..., '\n', 88) = 0x00f0bc94
[0x4022d1] memchr("\t  break;\n\n\tcase charset:\n      "..., '\n', 64) = 0x00f0bc9e
[0x4022d1] memchr("\n\tcase charset:\n        case cha"..., '\n', 54) = 0x00f0bc9f
[0x4022d1] memchr("\tcase charset:\n        case char"..., '\n', 53) = 0x00f0bcae
[0x4022d1] memchr("        case charset_not:\n      "..., '\n', 38) = 0x00f0bcc8
[0x4022d1] memchr("          {\n            register"..., '\n', 12) = 0x00f0bcd4
[0x4022d1] memchr("            register int c, last"..., '\n', 0) = NULL
[0x4023cc] fwrite("2196:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            register int c, last"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    register int in_range = 0;\n"..., '1', 8955) = 0x00f0bd5d
[0x40cdf3] memchr("1) == charset_not ? "^" : "");\n "..., '\n', 8860) = 0x00f0bd7b
[0x4022d1] memchr("\t    register int in_range = 0;\n"..., '\n', 62) = 0x00f0bd1d
[0x4022d1] memchr("\n\t    printf ("/charset [%s",\n\t "..., '\n', 30) = 0x00f0bd1e
[0x4022d1] memchr("\t    printf ("/charset [%s",\n\t  "..., '\n', 29) = 0x00f0bd3b
[0x4022d1] memchr("\t            (re_opcode_t) *(p -"..., '\n', 0) = NULL
[0x4023cc] fwrite("2200:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t            (re_opcode_t) *(p -"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            \n            assert "..., '1', 8829) = 0x00f0bdf4
[0x40cdf3] memchr("1 + (c/8)] & (1 << (c % 8))))\n\t\t"..., '\n', 8709) = 0x00f0be11
[0x4022d1] memchr("            \n            assert "..., '\n', 110) = 0x00f0bd88
[0x4022d1] memchr("            assert (p + *p < pen"..., '\n', 97) = 0x00f0bdac
[0x4022d1] memchr("\n            for (c = 0; c < 256"..., '\n', 61) = 0x00f0bdad
[0x4022d1] memchr("            for (c = 0; c < 256;"..., '\n', 60) = 0x00f0bdd3
[0x4022d1] memchr("\t      if (c / 8 < *p\n\t\t  && (p["..., '\n', 22) = 0x00f0bde9
[0x4022d1] memchr("\t\t  && (p[1 + (c/8)] & (1 << (c "..., '\n', 0) = NULL
[0x4023cc] fwrite("2206:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  && (p[1 + (c/8)] & (1 << (c "..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t{\n\t\t  /* Are we starting a ran"..., '1', 8679) = 0x00f0be49
[0x40cdf3] memchr("1 == c && ! in_range)\n\t\t    {\n\t\t"..., '\n', 8624) = 0x00f0be5e
[0x4022d1] memchr("\t\t{\n\t\t  /* Are we starting a ran"..., '\n', 40) = 0x00f0be15
[0x4022d1] memchr("\t\t  /* Are we starting a range? "..., '\n', 36) = 0x00f0be39
[0x4022d1] memchr("\t\t  if (last + 1 == c && ! in_ra"..., '\n', 0) = NULL
[0x4023cc] fwrite("2209:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  if (last + 1 == c && ! in_ra"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t      putchar ('-');\n\t"..., '1', 8602) = 0x00f0be91
[0x40cdf3] memchr("1;\n\t\t    }\n\t\t  /* Have we broken"..., '\n', 8552) = 0x00f0be93
[0x4022d1] memchr("\t\t    {\n\t\t      putchar ('-');\n\t"..., '\n', 31) = 0x00f0be66
[0x4022d1] memchr("\t\t      putchar ('-');\n\t\t      i"..., '\n', 23) = 0x00f0be7d
[0x4022d1] memchr("\t\t      in_range = 1;\n\t\t    }\n\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2212:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      in_range = 1;\n\t\t    }\n\t\t"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    }\n\t\t  /* Have we broken a "..., '1', 8549) = 0x00f0bed3
[0x40cdf3] memchr("1 != c && in_range)\n            "..., '\n', 8486) = 0x00f0bee6
[0x4022d1] memchr("\t\t    }\n\t\t  /* Have we broken a "..., '\n', 43) = 0x00f0be9b
[0x4022d1] memchr("\t\t  /* Have we broken a range?  "..., '\n', 35) = 0x00f0bebe
[0x4022d1] memchr("\t\t  else if (last + 1 != c && in"..., '\n', 0) = NULL
[0x4023cc] fwrite("2215:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  else if (last + 1 != c && in"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              {\n\t\t      printcha"..., '1', 8466) = 0x00f0bfd5
[0x40cdf3] memchr("1 + *p;\n\t  }\n\t  break;\n\n\tcase be"..., '\n', 8228) = 0x00f0bfdc
[0x4022d1] memchr("              {\n\t\t      printcha"..., '\n', 228) = 0x00f0bef6
[0x4022d1] memchr("\t\t      printchar (last);\n\t\t    "..., '\n', 212) = 0x00f0bf10
[0x4022d1] memchr("\t\t      in_range = 0;\n\t\t    }\n  "..., '\n', 186) = 0x00f0bf26
[0x4022d1] memchr("\t\t    }\n                \n\t\t  if "..., '\n', 164) = 0x00f0bf2e
[0x4022d1] memchr("                \n\t\t  if (! in_ra"..., '\n', 156) = 0x00f0bf3f
[0x4022d1] memchr("\t\t  if (! in_range)\n\t\t    printc"..., '\n', 139) = 0x00f0bf53
[0x4022d1] memchr("\t\t    printchar (c);\n\n\t\t  last ="..., '\n', 119) = 0x00f0bf68
[0x4022d1] memchr("\n\t\t  last = c;\n              }\n\n"..., '\n', 98) = 0x00f0bf69
[0x4022d1] memchr("\t\t  last = c;\n              }\n\n\t"..., '\n', 97) = 0x00f0bf77
[0x4022d1] memchr("              }\n\n\t    if (in_ran"..., '\n', 83) = 0x00f0bf87
[0x4022d1] memchr("\n\t    if (in_range)\n\t      print"..., '\n', 67) = 0x00f0bf88
[0x4022d1] memchr("\t    if (in_range)\n\t      printc"..., '\n', 66) = 0x00f0bf9b
[0x4022d1] memchr("\t      printchar (last);\n\n\t    p"..., '\n', 47) = 0x00f0bfb4
[0x4022d1] memchr("\n\t    putchar (']');\n\n\t    p += "..., '\n', 22) = 0x00f0bfb5
[0x4022d1] memchr("\t    putchar (']');\n\n\t    p += 1"..., '\n', 21) = 0x00f0bfc9
[0x4022d1] memchr("\n\t    p += 1 + *p;\n\t  }\n\t  break"..., '\n', 1) = 0x00f0bfca
[0x4022d1] memchr("\t    p += 1 + *p;\n\t  }\n\t  break;"..., '\n', 0) = NULL
[0x4023cc] fwrite("2232:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    p += 1 + *p;\n\t  }\n\t  break;"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  }\n\t  break;\n\n\tcase begline:\n\t"..., '1', 8220) = 0x00f0cb1a
[0x40cdf3] memchr("1));\n\t}\n\n      putchar ('\\n');\n "..., '\n', 5343) = 0x00f0cb1e
[0x4022d1] memchr("\t  }\n\t  break;\n\n\tcase begline:\n\t"..., '\n', 2848) = 0x00f0bfe1
[0x4022d1] memchr("\t  break;\n\n\tcase begline:\n\t  pri"..., '\n', 2843) = 0x00f0bfeb
[0x4022d1] memchr("\n\tcase begline:\n\t  printf ("/beg"..., '\n', 2833) = 0x00f0bfec
[0x4022d1] memchr("\tcase begline:\n\t  printf ("/begl"..., '\n', 2832) = 0x00f0bffb
[0x4022d1] memchr("\t  printf ("/begline");\n        "..., '\n', 2817) = 0x00f0c013
[0x4022d1] memchr("          break;\n\n\tcase endline:"..., '\n', 2793) = 0x00f0c024
[0x4022d1] memchr("\n\tcase endline:\n          printf"..., '\n', 2776) = 0x00f0c025
[0x4022d1] memchr("\tcase endline:\n          printf "..., '\n', 2775) = 0x00f0c034
[0x4022d1] memchr("          printf ("/endline");\n "..., '\n', 2760) = 0x00f0c053
[0x4022d1] memchr("          break;\n\n\tcase on_failu"..., '\n', 2729) = 0x00f0c064
[0x4022d1] memchr("\n\tcase on_failure_jump:\n        "..., '\n', 2712) = 0x00f0c065
[0x4022d1] memchr("\tcase on_failure_jump:\n         "..., '\n', 2711) = 0x00f0c07c
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2688) = 0x00f0c0ab
[0x4022d1] memchr("  \t  printf ("/on_failure_jump t"..., '\n', 2641) = 0x00f0c0e5
[0x4022d1] memchr("          break;\n\n\tcase on_failu"..., '\n', 2583) = 0x00f0c0f6
[0x4022d1] memchr("\n\tcase on_failure_keep_string_ju"..., '\n', 2566) = 0x00f0c0f7
[0x4022d1] memchr("\tcase on_failure_keep_string_jum"..., '\n', 2565) = 0x00f0c11a
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2530) = 0x00f0c149
[0x4022d1] memchr("  \t  printf ("/on_failure_keep_s"..., '\n', 2483) = 0x00f0c18f
[0x4022d1] memchr("          break;\n\n\tcase dummy_fa"..., '\n', 2413) = 0x00f0c1a0
[0x4022d1] memchr("\n\tcase dummy_failure_jump:\n     "..., '\n', 2396) = 0x00f0c1a1
[0x4022d1] memchr("\tcase dummy_failure_jump:\n      "..., '\n', 2395) = 0x00f0c1bb
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2369) = 0x00f0c1ea
[0x4022d1] memchr("  \t  printf ("/dummy_failure_jum"..., '\n', 2322) = 0x00f0c227
[0x4022d1] memchr("          break;\n\n\tcase push_dum"..., '\n', 2261) = 0x00f0c238
[0x4022d1] memchr("\n\tcase push_dummy_failure:\n     "..., '\n', 2244) = 0x00f0c239
[0x4022d1] memchr("\tcase push_dummy_failure:\n      "..., '\n', 2243) = 0x00f0c253
[0x4022d1] memchr("          printf ("/push_dummy_f"..., '\n', 2217) = 0x00f0c27d
[0x4022d1] memchr("          break;\n          \n    "..., '\n', 2175) = 0x00f0c28e
[0x4022d1] memchr("          \n        case maybe_po"..., '\n', 2158) = 0x00f0c299
[0x4022d1] memchr("        case maybe_pop_jump:\n   "..., '\n', 2147) = 0x00f0c2b6
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2118) = 0x00f0c2e5
[0x4022d1] memchr("  \t  printf ("/maybe_pop_jump to"..., '\n', 2071) = 0x00f0c31e
[0x4022d1] memchr("\t  break;\n\n        case pop_fail"..., '\n', 2014) = 0x00f0c328
[0x4022d1] memchr("\n        case pop_failure_jump:\n"..., '\n', 2004) = 0x00f0c329
[0x4022d1] memchr("        case pop_failure_jump:\n\t"..., '\n', 2003) = 0x00f0c348
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 1972) = 0x00f0c370
[0x4022d1] memchr("  \t  printf ("/pop_failure_jump "..., '\n', 1932) = 0x00f0c3ab
[0x4022d1] memchr("\t  break;          \n          \n "..., '\n', 1873) = 0x00f0c3bf
[0x4022d1] memchr("          \n        case jump_pas"..., '\n', 1853) = 0x00f0c3ca
[0x4022d1] memchr("        case jump_past_alt:\n\t  e"..., '\n', 1842) = 0x00f0c3e6
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 1814) = 0x00f0c40e
[0x4022d1] memchr("  \t  printf ("/jump_past_alt to "..., '\n', 1774) = 0x00f0c446
[0x4022d1] memchr("\t  break;          \n          \n "..., '\n', 1718) = 0x00f0c45a
[0x4022d1] memchr("          \n        case jump:\n\t "..., '\n', 1698) = 0x00f0c465
[0x4022d1] memchr("        case jump:\n\t  extract_nu"..., '\n', 1687) = 0x00f0c478
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 1668) = 0x00f0c4a0
[0x4022d1] memchr("  \t  printf ("/jump to %d", p + "..., '\n', 1628) = 0x00f0c4cf
[0x4022d1] memchr("\t  break;\n\n        case succeed_"..., '\n', 1581) = 0x00f0c4d9
[0x4022d1] memchr("\n        case succeed_n: \n      "..., '\n', 1571) = 0x00f0c4da
[0x4022d1] memchr("        case succeed_n: \n       "..., '\n', 1570) = 0x00f0c4f3
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1545) = 0x00f0c522
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1498) = 0x00f0c552
[0x4022d1] memchr("\t  printf ("/succeed_n to %d, %d"..., '\n', 1450) = 0x00f0c595
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 1383) = 0x00f0c5a6
[0x4022d1] memchr("        \n        case jump_n: \n "..., '\n', 1366) = 0x00f0c5af
[0x4022d1] memchr("        case jump_n: \n          "..., '\n', 1357) = 0x00f0c5c5
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1335) = 0x00f0c5f4
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1288) = 0x00f0c624
[0x4022d1] memchr("\t  printf ("/jump_n to %d, %d ti"..., '\n', 1240) = 0x00f0c664
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 1176) = 0x00f0c675
[0x4022d1] memchr("        \n        case set_number"..., '\n', 1159) = 0x00f0c67e
[0x4022d1] memchr("        case set_number_at: \n   "..., '\n', 1150) = 0x00f0c69b
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1121) = 0x00f0c6ca
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 1074) = 0x00f0c6fa
[0x4022d1] memchr("\t  printf ("/set_number_at locat"..., '\n', 1026) = 0x00f0c743
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 953) = 0x00f0c754
[0x4022d1] memchr("        \n        case wordbound:"..., '\n', 936) = 0x00f0c75d
[0x4022d1] memchr("        case wordbound:\n\t  print"..., '\n', 927) = 0x00f0c775
[0x4022d1] memchr("\t  printf ("/wordbound");\n\t  bre"..., '\n', 903) = 0x00f0c78f
[0x4022d1] memchr("\t  break;\n\n\tcase notwordbound:\n\t"..., '\n', 877) = 0x00f0c799
[0x4022d1] memchr("\n\tcase notwordbound:\n\t  printf ("..., '\n', 867) = 0x00f0c79a
[0x4022d1] memchr("\tcase notwordbound:\n\t  printf (""..., '\n', 866) = 0x00f0c7ae
[0x4022d1] memchr("\t  printf ("/notwordbound");\n   "..., '\n', 846) = 0x00f0c7cb
[0x4022d1] memchr("          break;\n\n\tcase wordbeg:"..., '\n', 817) = 0x00f0c7dc
[0x4022d1] memchr("\n\tcase wordbeg:\n\t  printf ("/wor"..., '\n', 800) = 0x00f0c7dd
[0x4022d1] memchr("\tcase wordbeg:\n\t  printf ("/word"..., '\n', 799) = 0x00f0c7ec
[0x4022d1] memchr("\t  printf ("/wordbeg");\n\t  break"..., '\n', 784) = 0x00f0c804
[0x4022d1] memchr("\t  break;\n          \n\tcase worde"..., '\n', 760) = 0x00f0c80e
[0x4022d1] memchr("          \n\tcase wordend:\n\t  pri"..., '\n', 750) = 0x00f0c819
[0x4022d1] memchr("\tcase wordend:\n\t  printf ("/word"..., '\n', 739) = 0x00f0c828
[0x4022d1] memchr("\t  printf ("/wordend");\n        "..., '\n', 724) = 0x00f0c840
[0x4022d1] memchr("          \n#ifdef emacs\n\tcase be"..., '\n', 700) = 0x00f0c84b
[0x4022d1] memchr("#ifdef emacs\n\tcase before_dot:\n\t"..., '\n', 689) = 0x00f0c858
[0x4022d1] memchr("\tcase before_dot:\n\t  printf ("/b"..., '\n', 676) = 0x00f0c86a
[0x4022d1] memchr("\t  printf ("/before_dot");\n     "..., '\n', 658) = 0x00f0c885
[0x4022d1] memchr("          break;\n\n\tcase at_dot:\n"..., '\n', 631) = 0x00f0c896
[0x4022d1] memchr("\n\tcase at_dot:\n\t  printf ("/at_d"..., '\n', 614) = 0x00f0c897
[0x4022d1] memchr("\tcase at_dot:\n\t  printf ("/at_do"..., '\n', 613) = 0x00f0c8a5
[0x4022d1] memchr("\t  printf ("/at_dot");\n         "..., '\n', 599) = 0x00f0c8bc
[0x4022d1] memchr("          break;\n\n\tcase after_do"..., '\n', 576) = 0x00f0c8cd
[0x4022d1] memchr("\n\tcase after_dot:\n\t  printf ("/a"..., '\n', 559) = 0x00f0c8ce
[0x4022d1] memchr("\tcase after_dot:\n\t  printf ("/af"..., '\n', 558) = 0x00f0c8df
[0x4022d1] memchr("\t  printf ("/after_dot");\n      "..., '\n', 541) = 0x00f0c8f9
[0x4022d1] memchr("          break;\n\n\tcase syntaxsp"..., '\n', 515) = 0x00f0c90a
[0x4022d1] memchr("\n\tcase syntaxspec:\n          pri"..., '\n', 498) = 0x00f0c90b
[0x4022d1] memchr("\tcase syntaxspec:\n          prin"..., '\n', 497) = 0x00f0c91d
[0x4022d1] memchr("          printf ("/syntaxspec")"..., '\n', 479) = 0x00f0c93f
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  printf ("/%d""..., '\n', 445) = 0x00f0c94f
[0x4022d1] memchr("\t  printf ("/%d", mcnt);\n       "..., '\n', 429) = 0x00f0c968
[0x4022d1] memchr("          break;\n\t  \n\tcase notsy"..., '\n', 404) = 0x00f0c979
[0x4022d1] memchr("\t  \n\tcase notsyntaxspec:\n       "..., '\n', 387) = 0x00f0c97d
[0x4022d1] memchr("\tcase notsyntaxspec:\n          p"..., '\n', 383) = 0x00f0c992
[0x4022d1] memchr("          printf ("/notsyntaxspe"..., '\n', 362) = 0x00f0c9b7
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  printf ("/%d""..., '\n', 325) = 0x00f0c9c7
[0x4022d1] memchr("\t  printf ("/%d", mcnt);\n\t  brea"..., '\n', 309) = 0x00f0c9e0
[0x4022d1] memchr("\t  break;\n#endif /* emacs */\n\n\tc"..., '\n', 284) = 0x00f0c9ea
[0x4022d1] memchr("#endif /* emacs */\n\n\tcase wordch"..., '\n', 274) = 0x00f0c9fd
[0x4022d1] memchr("\n\tcase wordchar:\n\t  printf ("/wo"..., '\n', 255) = 0x00f0c9fe
[0x4022d1] memchr("\tcase wordchar:\n\t  printf ("/wor"..., '\n', 254) = 0x00f0ca0e
[0x4022d1] memchr("\t  printf ("/wordchar");\n       "..., '\n', 238) = 0x00f0ca27
[0x4022d1] memchr("          break;\n\t  \n\tcase notwo"..., '\n', 213) = 0x00f0ca38
[0x4022d1] memchr("\t  \n\tcase notwordchar:\n\t  printf"..., '\n', 196) = 0x00f0ca3c
[0x4022d1] memchr("\tcase notwordchar:\n\t  printf ("/"..., '\n', 192) = 0x00f0ca4f
[0x4022d1] memchr("\t  printf ("/notwordchar");\n    "..., '\n', 173) = 0x00f0ca6b
[0x4022d1] memchr("          break;\n\n\tcase begbuf:\n"..., '\n', 145) = 0x00f0ca7c
[0x4022d1] memchr("\n\tcase begbuf:\n\t  printf ("/begb"..., '\n', 128) = 0x00f0ca7d
[0x4022d1] memchr("\tcase begbuf:\n\t  printf ("/begbu"..., '\n', 127) = 0x00f0ca8b
[0x4022d1] memchr("\t  printf ("/begbuf");\n         "..., '\n', 113) = 0x00f0caa2
[0x4022d1] memchr("          break;\n\n\tcase endbuf:\n"..., '\n', 90) = 0x00f0cab3
[0x4022d1] memchr("\n\tcase endbuf:\n\t  printf ("/endb"..., '\n', 73) = 0x00f0cab4
[0x4022d1] memchr("\tcase endbuf:\n\t  printf ("/endbu"..., '\n', 72) = 0x00f0cac2
[0x4022d1] memchr("\t  printf ("/endbuf");\n         "..., '\n', 58) = 0x00f0cad9
[0x4022d1] memchr("          break;\n\n        defaul"..., '\n', 35) = 0x00f0caea
[0x4022d1] memchr("\n        default:\n          prin"..., '\n', 18) = 0x00f0caeb
[0x4022d1] memchr("        default:\n          print"..., '\n', 17) = 0x00f0cafc
[0x4022d1] memchr("          printf ("?%d", *(p-1))"..., '\n', 0) = NULL
[0x4023cc] fwrite("2359:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          printf ("?%d", *(p-1))"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n\n      putchar ('\\n');\n    }\n"..., '1', 5338) = 0x00f0cec8
[0x40cdf3] memchr("1, size1, string2, size2)\n    co"..., '\n', 4401) = 0x00f0cee1
[0x4022d1] memchr("\t}\n\n      putchar ('\\n');\n    }\n"..., '\n', 903) = 0x00f0cb21
[0x4022d1] memchr("\n      putchar ('\\n');\n    }\n\n  "..., '\n', 900) = 0x00f0cb22
[0x4022d1] memchr("      putchar ('\\n');\n    }\n\n  p"..., '\n', 899) = 0x00f0cb38
[0x4022d1] memchr("    }\n\n  printf ("%d:\\tend of pa"..., '\n', 877) = 0x00f0cb3e
[0x4022d1] memchr("\n  printf ("%d:\\tend of pattern."..., '\n', 871) = 0x00f0cb3f
[0x4022d1] memchr("  printf ("%d:\\tend of pattern.\\"..., '\n', 870) = 0x00f0cb6f
[0x4022d1] memchr("}\n\n\nvoid\nprint_compiled_pattern "..., '\n', 822) = 0x00f0cb71
[0x4022d1] memchr("\n\nvoid\nprint_compiled_pattern (b"..., '\n', 820) = 0x00f0cb72
[0x4022d1] memchr("\nvoid\nprint_compiled_pattern (bu"..., '\n', 819) = 0x00f0cb73
[0x4022d1] memchr("void\nprint_compiled_pattern (buf"..., '\n', 818) = 0x00f0cb78
[0x4022d1] memchr("print_compiled_pattern (bufp)\n  "..., '\n', 813) = 0x00f0cb96
[0x4022d1] memchr("    struct re_pattern_buffer *bu"..., '\n', 783) = 0x00f0cbba
[0x4022d1] memchr("{\n  unsigned char *buffer = bufp"..., '\n', 747) = 0x00f0cbbc
[0x4022d1] memchr("  unsigned char *buffer = bufp->"..., '\n', 745) = 0x00f0cbe4
[0x4022d1] memchr("\n  print_partial_compiled_patter"..., '\n', 705) = 0x00f0cbe5
[0x4022d1] memchr("  print_partial_compiled_pattern"..., '\n', 704) = 0x00f0cc25
[0x4022d1] memchr("  printf ("%d bytes used/%d byte"..., '\n', 640) = 0x00f0cc74
[0x4022d1] memchr("\n  if (bufp->fastmap_accurate &&"..., '\n', 561) = 0x00f0cc75
[0x4022d1] memchr("  if (bufp->fastmap_accurate && "..., '\n', 560) = 0x00f0cca4
[0x4022d1] memchr("    {\n      printf ("fastmap: ")"..., '\n', 513) = 0x00f0ccaa
[0x4022d1] memchr("      printf ("fastmap: ");\n    "..., '\n', 507) = 0x00f0ccc6
[0x4022d1] memchr("      print_fastmap (bufp->fastm"..., '\n', 479) = 0x00f0cceb
[0x4022d1] memchr("    }\n\n  printf ("re_nsub: %d\\t""..., '\n', 442) = 0x00f0ccf1
[0x4022d1] memchr("\n  printf ("re_nsub: %d\\t", bufp"..., '\n', 436) = 0x00f0ccf2
[0x4022d1] memchr("  printf ("re_nsub: %d\\t", bufp-"..., '\n', 435) = 0x00f0cd1d
[0x4022d1] memchr("  printf ("regs_alloc: %d\\t", bu"..., '\n', 392) = 0x00f0cd52
[0x4022d1] memchr("  printf ("can_be_null: %d\\t", b"..., '\n', 339) = 0x00f0cd85
[0x4022d1] memchr("  printf ("newline_anchor: %d\\n""..., '\n', 288) = 0x00f0cdbe
[0x4022d1] memchr("  printf ("no_sub: %d\\t", bufp->"..., '\n', 231) = 0x00f0cde7
[0x4022d1] memchr("  printf ("not_bol: %d\\t", bufp-"..., '\n', 190) = 0x00f0ce12
[0x4022d1] memchr("  printf ("not_eol: %d\\t", bufp-"..., '\n', 147) = 0x00f0ce3d
[0x4022d1] memchr("  printf ("syntax: %d\\n", bufp->"..., '\n', 104) = 0x00f0ce66
[0x4022d1] memchr("  /* Perhaps we should print the"..., '\n', 63) = 0x00f0ce9c
[0x4022d1] memchr("}\n\n\nvoid\nprint_double_string (wh"..., '\n', 9) = 0x00f0ce9e
[0x4022d1] memchr("\n\nvoid\nprint_double_string (wher"..., '\n', 7) = 0x00f0ce9f
[0x4022d1] memchr("\nvoid\nprint_double_string (where"..., '\n', 6) = 0x00f0cea0
[0x4022d1] memchr("void\nprint_double_string (where,"..., '\n', 5) = 0x00f0cea5
[0x4022d1] memchr("print_double_string (where, stri"..., '\n', 0) = NULL
[0x4023cc] fwrite("2397:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("print_double_string (where, stri"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    const char *where;\n    const"..., '1', 4375) = 0x00f0cf0f
[0x40cdf3] memchr("1;\n    const char *string2;\n    "..., '\n', 4330) = 0x00f0cf11
[0x4022d1] memchr("    const char *where;\n    const"..., '\n', 23) = 0x00f0cef8
[0x4022d1] memchr("    const char *string1;\n    con"..., '\n', 0) = NULL
[0x4023cc] fwrite("2399:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    const char *string1;\n    con"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    const char *string2;\n    int"..., '1', 4327) = 0x00f0cf37
[0x40cdf3] memchr("1;\n    int size2;\n{\n  unsigned t"..., '\n', 4290) = 0x00f0cf39
[0x4022d1] memchr("    const char *string2;\n    int"..., '\n', 25) = 0x00f0cf2a
[0x4022d1] memchr("    int size1;\n    int size2;\n{\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("2401:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    int size1;\n    int size2;\n{\n"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    int size2;\n{\n  unsigned this"..., '1', 4287) = 0x00f0cff2
[0x40cdf3] memchr("1; this_char < size1; this_char+"..., '\n', 4103) = 0x00f0d014
[0x4022d1] memchr("    int size2;\n{\n  unsigned this"..., '\n', 143) = 0x00f0cf48
[0x4022d1] memchr("{\n  unsigned this_char;\n  \n  if "..., '\n', 128) = 0x00f0cf4a
[0x4022d1] memchr("  unsigned this_char;\n  \n  if (w"..., '\n', 126) = 0x00f0cf60
[0x4022d1] memchr("  \n  if (where == NULL)\n    prin"..., '\n', 104) = 0x00f0cf63
[0x4022d1] memchr("  if (where == NULL)\n    printf "..., '\n', 101) = 0x00f0cf78
[0x4022d1] memchr("    printf ("(null)");\n  else\n  "..., '\n', 80) = 0x00f0cf8f
[0x4022d1] memchr("  else\n    {\n      if (FIRST_STR"..., '\n', 57) = 0x00f0cf96
[0x4022d1] memchr("    {\n      if (FIRST_STRING_P ("..., '\n', 50) = 0x00f0cf9c
[0x4022d1] memchr("      if (FIRST_STRING_P (where)"..., '\n', 44) = 0x00f0cfbe
[0x4022d1] memchr("        {\n          for (this_ch"..., '\n', 10) = 0x00f0cfc8
[0x4022d1] memchr("          for (this_char = where"..., '\n', 0) = NULL
[0x4023cc] fwrite("2412:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          for (this_char = where"..., 1, 76, 0x7fce6d444260) = 76
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            printchar (string1[t"..., '1', 4068) = 0x00f0d032
[0x40cdf3] memchr("1[this_char]);\n\n          where "..., '\n', 4039) = 0x00f0d040
[0x4022d1] memchr("            printchar (string1[t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2413:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            printchar (string1[t"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          where = string2;    \n"..., '1', 4024) = 0x00f0d14b
[0x40cdf3] memchr("1(x)\n#define DEBUG_PRINT2(x1, x2"..., '\n', 3758) = 0x00f0d14f
[0x4022d1] memchr("\n          where = string2;    \n"..., '\n', 247) = 0x00f0d041
[0x4022d1] memchr("          where = string2;    \n "..., '\n', 246) = 0x00f0d060
[0x4022d1] memchr("        }\n\n      for (this_char "..., '\n', 215) = 0x00f0d06a
[0x4022d1] memchr("\n      for (this_char = where - "..., '\n', 205) = 0x00f0d06b
[0x4022d1] memchr("      for (this_char = where - s"..., '\n', 204) = 0x00f0d0b3
[0x4022d1] memchr("        printchar (string2[this_"..., '\n', 132) = 0x00f0d0db
[0x4022d1] memchr("    }\n}\n\n#else /* not DEBUG */\n\n"..., '\n', 92) = 0x00f0d0e1
[0x4022d1] memchr("}\n\n#else /* not DEBUG */\n\n#undef"..., '\n', 86) = 0x00f0d0e3
[0x4022d1] memchr("\n#else /* not DEBUG */\n\n#undef a"..., '\n', 84) = 0x00f0d0e4
[0x4022d1] memchr("#else /* not DEBUG */\n\n#undef as"..., '\n', 83) = 0x00f0d0fa
[0x4022d1] memchr("\n#undef assert\n#define assert(e)"..., '\n', 61) = 0x00f0d0fb
[0x4022d1] memchr("#undef assert\n#define assert(e)\n"..., '\n', 60) = 0x00f0d109
[0x4022d1] memchr("#define assert(e)\n\n#define DEBUG"..., '\n', 46) = 0x00f0d11b
[0x4022d1] memchr("\n#define DEBUG_STATEMENT(e)\n#def"..., '\n', 28) = 0x00f0d11c
[0x4022d1] memchr("#define DEBUG_STATEMENT(e)\n#defi"..., '\n', 27) = 0x00f0d137
[0x4022d1] memchr("#define DEBUG_PRINT1(x)\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("2429:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT1(x)\n#define "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT2(x1, x2)\n#de"..., '1', 3753) = 0x00f0d166
[0x40cdf3] memchr("1, x2)\n#define DEBUG_PRINT3(x1, "..., '\n', 3731) = 0x00f0d16c
[0x4022d1] memchr("#define DEBUG_PRINT2(x1, x2)\n#de"..., '\n', 0) = NULL
[0x4023cc] fwrite("2430:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT2(x1, x2)\n#de"..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '1', 3724) = 0x00f0d183
[0x40cdf3] memchr("1, x2, x3)\n#define DEBUG_PRINT4("..., '\n', 3702) = 0x00f0d18d
[0x4022d1] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2431:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT3(x1, x2, x3)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '1', 3691) = 0x00f0d1a4
[0x40cdf3] memchr("1, x2, x3, x4)\n#define DEBUG_PRI"..., '\n', 3669) = 0x00f0d1b2
[0x4022d1] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '\n', 0) = NULL
[0x4023cc] fwrite("2432:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT4(x1, x2, x3,"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '1', 3654) = 0x00f0d207
[0x40cdf3] memchr("1, sz1, s2, sz2)\n\n#endif /* not "..., '\n', 3570) = 0x00f0d217
[0x4022d1] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '\n', 46) = 0x00f0d1e0
[0x4022d1] memchr("#define DEBUG_PRINT_DOUBLE_STRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("2434:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_DOUBLE_STRIN"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n#endif /* not DEBUG */\n\014\n/* Set"..., '1', 3553) = 0x00f0d934
[0x40cdf3] memchr("1 (), store_op2 ();\nstatic void "..., '\n', 1733) = 0x00f0d947
[0x4022d1] memchr("\n#endif /* not DEBUG */\n\014\n/* Set"..., '\n', 1800) = 0x00f0d218
[0x4022d1] memchr("#endif /* not DEBUG */\n\014\n/* Set "..., '\n', 1799) = 0x00f0d22f
[0x4022d1] memchr("\014\n/* Set by `re_set_syntax' to t"..., '\n', 1776) = 0x00f0d231
[0x4022d1] memchr("/* Set by `re_set_syntax' to the"..., '\n', 1774) = 0x00f0d27b
[0x4022d1] memchr("   also be assigned to arbitrari"..., '\n', 1700) = 0x00f0d2c2
[0x4022d1] memchr("   syntax, so it can be changed "..., '\n', 1629) = 0x00f0d302
[0x4022d1] memchr("reg_syntax_t re_syntax_options ="..., '\n', 1565) = 0x00f0d334
[0x4022d1] memchr("\n\n/* Specify the precise syntax "..., '\n', 1515) = 0x00f0d335
[0x4022d1] memchr("\n/* Specify the precise syntax o"..., '\n', 1514) = 0x00f0d336
[0x4022d1] memchr("/* Specify the precise syntax of"..., '\n', 1513) = 0x00f0d37f
[0x4022d1] memchr("   for compatibility for various"..., '\n', 1440) = 0x00f0d3c2
[0x4022d1] memchr("   different, incompatible synta"..., '\n', 1373) = 0x00f0d3e7
[0x4022d1] memchr("\n   The argument SYNTAX is a bit"..., '\n', 1336) = 0x00f0d3e8
[0x4022d1] memchr("   The argument SYNTAX is a bit "..., '\n', 1335) = 0x00f0d42b
[0x4022d1] memchr("   defined in regex.h.  We retur"..., '\n', 1268) = 0x00f0d461
[0x4022d1] memchr("\nreg_syntax_t\nre_set_syntax (syn"..., '\n', 1214) = 0x00f0d462
[0x4022d1] memchr("reg_syntax_t\nre_set_syntax (synt"..., '\n', 1213) = 0x00f0d46f
[0x4022d1] memchr("re_set_syntax (syntax)\n    reg_s"..., '\n', 1200) = 0x00f0d486
[0x4022d1] memchr("    reg_syntax_t syntax;\n{\n  reg"..., '\n', 1177) = 0x00f0d49f
[0x4022d1] memchr("{\n  reg_syntax_t ret = re_syntax"..., '\n', 1152) = 0x00f0d4a1
[0x4022d1] memchr("  reg_syntax_t ret = re_syntax_o"..., '\n', 1150) = 0x00f0d4c9
[0x4022d1] memchr("  \n  re_syntax_options = syntax;"..., '\n', 1110) = 0x00f0d4cc
[0x4022d1] memchr("  re_syntax_options = syntax;\n  "..., '\n', 1107) = 0x00f0d4ea
[0x4022d1] memchr("  return ret;\n}\n\014\n/* This table "..., '\n', 1077) = 0x00f0d4f8
[0x4022d1] memchr("}\n\014\n/* This table gives an error"..., '\n', 1063) = 0x00f0d4fa
[0x4022d1] memchr("\014\n/* This table gives an error m"..., '\n', 1061) = 0x00f0d4fc
[0x4022d1] memchr("/* This table gives an error mes"..., '\n', 1059) = 0x00f0d544
[0x4022d1] memchr("   in regex.h.  Obviously the or"..., '\n', 987) = 0x00f0d58a
[0x4022d1] memchr("\nstatic const char *re_error_msg"..., '\n', 917) = 0x00f0d58b
[0x4022d1] memchr("static const char *re_error_msg["..., '\n', 916) = 0x00f0d5af
[0x4022d1] memchr("  { NULL,\t\t\t\t\t/* REG_NOERROR */\n"..., '\n', 880) = 0x00f0d5cf
[0x4022d1] memchr("    "No match",\t\t\t\t\t/* REG_NOMAT"..., '\n', 848) = 0x00f0d5f5
[0x4022d1] memchr("    "Invalid regular expression""..., '\n', 810) = 0x00f0d629
[0x4022d1] memchr("    "Invalid collation character"..., '\n', 758) = 0x00f0d660
[0x4022d1] memchr("    "Invalid character class nam"..., '\n', 703) = 0x00f0d696
[0x4022d1] memchr("    "Trailing backslash",\t\t\t/* R"..., '\n', 649) = 0x00f0d6c4
[0x4022d1] memchr("    "Invalid back reference",\t\t\t"..., '\n', 603) = 0x00f0d6f6
[0x4022d1] memchr("    "Unmatched [ or [^",\t\t\t/* RE"..., '\n', 553) = 0x00f0d722
[0x4022d1] memchr("    "Unmatched ( or \\\\(",\t\t\t/* R"..., '\n', 509) = 0x00f0d74f
[0x4022d1] memchr("    "Unmatched \\\\{",\t\t\t\t/* REG_E"..., '\n', 464) = 0x00f0d778
[0x4022d1] memchr("    "Invalid content of \\\\{\\\\}","..., '\n', 423) = 0x00f0d7aa
[0x4022d1] memchr("    "Invalid range end",\t\t\t/* RE"..., '\n', 373) = 0x00f0d7d6
[0x4022d1] memchr("    "Memory exhausted",\t\t\t\t/* RE"..., '\n', 329) = 0x00f0d802
[0x4022d1] memchr("    "Invalid preceding regular e"..., '\n', 285) = 0x00f0d83f
[0x4022d1] memchr("    "Premature end of regular ex"..., '\n', 224) = 0x00f0d879
[0x4022d1] memchr("    "Regular expression too big""..., '\n', 166) = 0x00f0d8ac
[0x4022d1] memchr("    "Unmatched ) or \\\\)",\t\t\t/* R"..., '\n', 115) = 0x00f0d8da
[0x4022d1] memchr("  };\n\014\n/* Subroutine declaration"..., '\n', 69) = 0x00f0d8df
[0x4022d1] memchr("\014\n/* Subroutine declarations and"..., '\n', 64) = 0x00f0d8e1
[0x4022d1] memchr("/* Subroutine declarations and m"..., '\n', 62) = 0x00f0d91e
[0x4022d1] memchr("\nstatic void store_op1 (), store"..., '\n', 1) = 0x00f0d91f
[0x4022d1] memchr("static void store_op1 (), store_"..., '\n', 0) = NULL
[0x4023cc] fwrite("2486:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("static void store_op1 (), store_"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("static void insert_op1 (), inser"..., '1', 1713) = 0x00f0d95d
[0x40cdf3] memchr("1 (), insert_op2 ();\nstatic bool"..., '\n', 1692) = 0x00f0d971
[0x4022d1] memchr("static void insert_op1 (), inser"..., '\n', 0) = NULL
[0x4023cc] fwrite("2487:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("static void insert_op1 (), inser"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("static boolean at_begline_loc_p "..., '1', 1671) = NULL
[0x4022d1] memchr("static boolean at_begline_loc_p "..., '\n', 1671) = 0x00f0d9aa
[0x4022d1] memchr("static boolean group_in_compile_"..., '\n', 1614) = 0x00f0d9d4
[0x4022d1] memchr("static reg_errcode_t compile_ran"..., '\n', 1572) = 0x00f0d9fb
[0x4022d1] memchr("\n/* Fetch the next character in "..., '\n', 1533) = 0x00f0d9fc
[0x4022d1] memchr("/* Fetch the next character in t"..., '\n', 1532) = 0x00f0da44
[0x4022d1] memchr("   if necessary.  Also cast from"..., '\n', 1460) = 0x00f0da88
[0x4022d1] memchr("   string passed to us by the us"..., '\n', 1392) = 0x00f0dacf
[0x4022d1] memchr("   as an array index (in, e.g., "..., '\n', 1321) = 0x00f0db01
[0x4022d1] memchr("#define PATFETCH(c)\t\t\t\t\t\t\t\\\n  do"..., '\n', 1271) = 0x00f0db1d
[0x4022d1] memchr("  do {if (p == pend) return REG_"..., '\n', 1243) = 0x00f0db49
[0x4022d1] memchr("    c = (unsigned char) *p++;\t\t\t"..., '\n', 1199) = 0x00f0db6e
[0x4022d1] memchr("    if (translate) c = translate"..., '\n', 1162) = 0x00f0db9a
[0x4022d1] memchr("  } while (0)\n\n/* Fetch the next"..., '\n', 1118) = 0x00f0dba8
[0x4022d1] memchr("\n/* Fetch the next character in "..., '\n', 1104) = 0x00f0dba9
[0x4022d1] memchr("/* Fetch the next character in t"..., '\n', 1103) = 0x00f0dbe8
[0x4022d1] memchr("   translation.  */\n#define PATF"..., '\n', 1040) = 0x00f0dbfc
[0x4022d1] memchr("#define PATFETCH_RAW(c)\t\t\t\t\t\t\t\\\n"..., '\n', 1020) = 0x00f0dc1c
[0x4022d1] memchr("  do {if (p == pend) return REG_"..., '\n', 988) = 0x00f0dc48
[0x4022d1] memchr("    c = (unsigned char) *p++; \t\t"..., '\n', 944) = 0x00f0dc6e
[0x4022d1] memchr("  } while (0)\n\n/* Go backwards o"..., '\n', 906) = 0x00f0dc7c
[0x4022d1] memchr("\n/* Go backwards one character i"..., '\n', 892) = 0x00f0dc7d
[0x4022d1] memchr("/* Go backwards one character in"..., '\n', 891) = 0x00f0dcaf
[0x4022d1] memchr("#define PATUNFETCH p--\n\n\n/* If `"..., '\n', 841) = 0x00f0dcc6
[0x4022d1] memchr("\n\n/* If `translate' is non-null,"..., '\n', 818) = 0x00f0dcc7
[0x4022d1] memchr("\n/* If `translate' is non-null, "..., '\n', 817) = 0x00f0dcc8
[0x4022d1] memchr("/* If `translate' is non-null, r"..., '\n', 816) = 0x00f0dd0d
[0x4022d1] memchr("   cast the subscript to transla"..., '\n', 747) = 0x00f0dd51
[0x4022d1] memchr("   `char *', to avoid warnings w"..., '\n', 679) = 0x00f0dd97
[0x4022d1] memchr("   when we use a character as a "..., '\n', 609) = 0x00f0dddf
[0x4022d1] memchr("#define TRANSLATE(d) (translate "..., '\n', 537) = 0x00f0de27
[0x4022d1] memchr("\n\n/* Macros for outputting the c"..., '\n', 465) = 0x00f0de28
[0x4022d1] memchr("\n/* Macros for outputting the co"..., '\n', 464) = 0x00f0de29
[0x4022d1] memchr("/* Macros for outputting the com"..., '\n', 463) = 0x00f0de6a
[0x4022d1] memchr("\n/* If the buffer isn't allocate"..., '\n', 398) = 0x00f0de6b
[0x4022d1] memchr("/* If the buffer isn't allocated"..., '\n', 397) = 0x00f0deac
[0x4022d1] memchr("#define INIT_BUF_SIZE  32\n\n/* Ma"..., '\n', 332) = 0x00f0dec6
[0x4022d1] memchr("\n/* Make sure we have at least N"..., '\n', 306) = 0x00f0dec7
[0x4022d1] memchr("/* Make sure we have at least N "..., '\n', 305) = 0x00f0df0a
[0x4022d1] memchr("#define GET_BUFFER_SPACE(n)\t\t\t\t\t"..., '\n', 238) = 0x00f0df2d
[0x4022d1] memchr("    while (b - bufp->buffer + (n"..., '\n', 203) = 0x00f0df66
[0x4022d1] memchr("      EXTEND_BUFFER ()\n\n/* Make "..., '\n', 146) = 0x00f0df7d
[0x4022d1] memchr("\n/* Make sure we have one more b"..., '\n', 123) = 0x00f0df7e
[0x4022d1] memchr("/* Make sure we have one more by"..., '\n', 122) = 0x00f0dfcb
[0x4022d1] memchr("#define BUF_PUSH(c)\t\t\t\t\t\t\t\\\n  do"..., '\n', 45) = 0x00f0dfe7
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET", '\n', 17) = 0x00f0dff8
[0x4022d1] memchr("    GET", '\n', 0)            = NULL
[0x4020b3] memmove(0xf05ff9, 0xf0dff9, 7, 0xf0dff9, 0x7fce6d444260) = 0xf05ff9
[0x402213] read(3, "_BUFFER_SPACE (1);\t\t\t\t\t\t\\\n    *b"..., 32768) = 32768
[0x40bc2b] memchr("    GET_BUFFER_SPACE (1);\t\t\t\t\t\t\\"..., '1', 32737) = 0x00f0600f
[0x40cdf3] memchr("1);\t\t\t\t\t\t\\\n    *b++ = (unsigned "..., '\n', 32715) = 0x00f06019
[0x4022d1] memchr("    GET_BUFFER_SPACE (1);\t\t\t\t\t\t\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("2533:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    GET_BUFFER_SPACE (1);\t\t\t\t\t\t\\"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    *b++ = (unsigned char) (c);\t"..., '1', 32704) = 0x00f06093
[0x40cdf3] memchr("1 and C2.  */\n#define BUF_PUSH_2"..., '\n', 32583) = 0x00f060a0
[0x4022d1] memchr("    *b++ = (unsigned char) (c);\t"..., '\n', 55) = 0x00f06040
[0x4022d1] memchr("  } while (0)\n\n\n/* Ensure we hav"..., '\n', 16) = 0x00f0604e
[0x4022d1] memchr("\n\n/* Ensure we have two more byt"..., '\n', 2) = 0x00f0604f
[0x4022d1] memchr("\n/* Ensure we have two more byte"..., '\n', 1) = 0x00f06050
[0x4022d1] memchr("/* Ensure we have two more bytes"..., '\n', 0) = NULL
[0x4023cc] fwrite("2538:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* Ensure we have two more bytes"..., 1, 80, 0x7fce6d444260) = 80
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define BUF_PUSH_2(c1, c2)\t\t\t\t\t\t"..., '1', 32569) = 0x00f060b5
[0x40cdf3] memchr("1, c2)\t\t\t\t\t\t\\\n  do {\t\t\t\t\t\t\t\t\t\\\n "..., '\n', 32549) = 0x00f060c2
[0x4022d1] memchr("#define BUF_PUSH_2(c1, c2)\t\t\t\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2539:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define BUF_PUSH_2(c1, c2)\t\t\t\t\t\t"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '1', 32535) = 0x00f06112
[0x40cdf3] memchr("1);\t\t\t\t\t\\\n    *b++ = (unsigned c"..., '\n', 32456) = 0x00f0611b
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '\n', 50) = 0x00f060d3
[0x4022d1] memchr("    GET_BUFFER_SPACE (2);\t\t\t\t\t\t\\"..., '\n', 33) = 0x00f060f4
[0x4022d1] memchr("    *b++ = (unsigned char) (c1);"..., '\n', 0) = NULL
[0x4023cc] fwrite("2542:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    *b++ = (unsigned char) (c1);"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    *b++ = (unsigned char) (c2);"..., '1', 32446) = 0x00f0619a
[0x40cdf3] memchr("1, c2, c3)\t\t\t\t\t\t\\\n  do {\t\t\t\t\t\t\t\t"..., '\n', 32320) = 0x00f061ab
[0x4022d1] memchr("    *b++ = (unsigned char) (c2);"..., '\n', 106) = 0x00f06142
[0x4022d1] memchr("  } while (0)\n\n\n/* As with BUF_P"..., '\n', 67) = 0x00f06150
[0x4022d1] memchr("\n\n/* As with BUF_PUSH_2, except "..., '\n', 53) = 0x00f06151
[0x4022d1] memchr("\n/* As with BUF_PUSH_2, except f"..., '\n', 52) = 0x00f06152
[0x4022d1] memchr("/* As with BUF_PUSH_2, except fo"..., '\n', 51) = 0x00f06185
[0x4022d1] memchr("#define BUF_PUSH_3(c1, c2, c3)\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2548:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define BUF_PUSH_3(c1, c2, c3)\t\t"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '1', 32302) = 0x00f061fb
[0x40cdf3] memchr("1);\t\t\t\t\t\\\n    *b++ = (unsigned c"..., '\n', 32223) = 0x00f06204
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '\n', 50) = 0x00f061bc
[0x4022d1] memchr("    GET_BUFFER_SPACE (3);\t\t\t\t\t\t\\"..., '\n', 33) = 0x00f061dd
[0x4022d1] memchr("    *b++ = (unsigned char) (c1);"..., '\n', 0) = NULL
[0x4023cc] fwrite("2551:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    *b++ = (unsigned char) (c1);"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    *b++ = (unsigned char) (c2);"..., '1', 32213) = 0x00f0631d
[0x40cdf3] memchr("1 (op, loc, (to) - (loc) - 3)\n\n/"..., '\n', 31933) = 0x00f0633a
[0x4022d1] memchr("    *b++ = (unsigned char) (c2);"..., '\n', 270) = 0x00f0622b
[0x4022d1] memchr("    *b++ = (unsigned char) (c3);"..., '\n', 231) = 0x00f06252
[0x4022d1] memchr("  } while (0)\n\n\n/* Store a jump "..., '\n', 192) = 0x00f06260
[0x4022d1] memchr("\n\n/* Store a jump with opcode OP"..., '\n', 178) = 0x00f06261
[0x4022d1] memchr("\n/* Store a jump with opcode OP "..., '\n', 177) = 0x00f06262
[0x4022d1] memchr("/* Store a jump with opcode OP a"..., '\n', 176) = 0x00f062a4
[0x4022d1] memchr("   relative address offset by th"..., '\n', 110) = 0x00f062f0
[0x4022d1] memchr("#define STORE_JUMP(op, loc, to) "..., '\n', 34) = 0x00f06312
[0x4022d1] memchr("  store_op1 (op, loc, (to) - (lo"..., '\n', 0) = NULL
[0x4023cc] fwrite("2560:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  store_op1 (op, loc, (to) - (lo"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Likewise, for a two-argument"..., '1', 31903) = 0x00f06436
[0x40cdf3] memchr("1 (op, loc, (to) - (loc) - 3, b)"..., '\n', 31652) = 0x00f06456
[0x4022d1] memchr("\n/* Likewise, for a two-argument"..., '\n', 240) = 0x00f0633b
[0x4022d1] memchr("/* Likewise, for a two-argument "..., '\n', 239) = 0x00f06365
[0x4022d1] memchr("#define STORE_JUMP2(op, loc, to,"..., '\n', 197) = 0x00f0638d
[0x4022d1] memchr("  store_op2 (op, loc, (to) - (lo"..., '\n', 157) = 0x00f063ba
[0x4022d1] memchr("\n/* Like `STORE_JUMP', but for i"..., '\n', 112) = 0x00f063bb
[0x4022d1] memchr("/* Like `STORE_JUMP', but for in"..., '\n', 111) = 0x00f06407
[0x4022d1] memchr("#define INSERT_JUMP(op, loc, to)"..., '\n', 35) = 0x00f0642a
[0x4022d1] memchr("  insert_op1 (op, loc, (to) - (l"..., '\n', 0) = NULL
[0x4023cc] fwrite("2568:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  insert_op1 (op, loc, (to) - (l"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Like `STORE_JUMP2', but for "..., '1', 31619) = 0x00f0657b
[0x40cdf3] memchr("16 bytes turns out to\n   be too "..., '\n', 31327) = 0x00f06590
[0x4022d1] memchr("\n/* Like `STORE_JUMP2', but for "..., '\n', 243) = 0x00f06457
[0x4022d1] memchr("/* Like `STORE_JUMP2', but for i"..., '\n', 242) = 0x00f064a4
[0x4022d1] memchr("#define INSERT_JUMP2(op, loc, to"..., '\n', 165) = 0x00f064cd
[0x4022d1] memchr("  insert_op2 (op, loc, (to) - (l"..., '\n', 124) = 0x00f064fe
[0x4022d1] memchr("\n\n/* This is not an arbitrary li"..., '\n', 75) = 0x00f064ff
[0x4022d1] memchr("\n/* This is not an arbitrary lim"..., '\n', 74) = 0x00f06500
[0x4022d1] memchr("/* This is not an arbitrary limi"..., '\n', 73) = 0x00f06549
[0x4022d1] memchr("   into the pattern are two byte"..., '\n', 0) = NULL
[0x4023cc] fwrite("2576:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   into the pattern are two byte"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   be too small, many things wou"..., '1', 31305) = 0x00f065de
[0x40cdf3] memchr("1L << 16)\n\n\n/* Extend the buffer"..., '\n', 31228) = 0x00f065e7
[0x4022d1] memchr("   be too small, many things wou"..., '\n', 55) = 0x00f065c7
[0x4022d1] memchr("#define MAX_BUF_SIZE (1L << 16)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("2578:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define MAX_BUF_SIZE (1L << 16)\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n/* Extend the buffer by twice "..., '1', 31218) = 0x00f067c7
[0x40cdf3] memchr("1;\t\t\t\t\t\t\\\n    if (bufp->allocate"..., '\n', 30739) = 0x00f067d0
[0x4022d1] memchr("\n\n/* Extend the buffer by twice "..., '\n', 455) = 0x00f065e8
[0x4022d1] memchr("\n/* Extend the buffer by twice i"..., '\n', 454) = 0x00f065e9
[0x4022d1] memchr("/* Extend the buffer by twice it"..., '\n', 453) = 0x00f06628
[0x4022d1] memchr("   reset the pointers that point"..., '\n', 390) = 0x00f0666e
[0x4022d1] memchr("   correct places in the new one"..., '\n', 320) = 0x00f066b7
[0x4022d1] memchr("   being larger than MAX_BUF_SIZ"..., '\n', 247) = 0x00f066fa
[0x4022d1] memchr("#define EXTEND_BUFFER()\t\t\t\t\t\t\t\\\n"..., '\n', 180) = 0x00f0671a
[0x4022d1] memchr("  do { \t\t\t\t\t\t\t\t\t\\\n    unsigned c"..., '\n', 148) = 0x00f0672c
[0x4022d1] memchr("    unsigned char *old_buffer = "..., '\n', 130) = 0x00f0675f
[0x4022d1] memchr("    if (bufp->allocated == MAX_B"..., '\n', 79) = 0x00f0678e
[0x4022d1] memchr("      return REG_ESIZE;\t\t\t\t\t\t\t\\\n"..., '\n', 32) = 0x00f067ae
[0x4022d1] memchr("    bufp->allocated <<= 1;\t\t\t\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2590:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    bufp->allocated <<= 1;\t\t\t\t\t\t"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    if (bufp->allocated > MAX_BU"..., '1', 30729) = 0x00f06cf1
[0x40cdf3] memchr("1) to MAX_BUF_SIZE - 1.  */\ntype"..., '\n', 29417) = 0x00f06d0c
[0x4022d1] memchr("    if (bufp->allocated > MAX_BU"..., '\n', 1264) = 0x00f067fe
[0x4022d1] memchr("      bufp->allocated = MAX_BUF_"..., '\n', 1218) = 0x00f0682b
[0x4022d1] memchr("    bufp->buffer = (unsigned cha"..., '\n', 1173) = 0x00f0687a
[0x4022d1] memchr("    if (bufp->buffer == NULL)\t\t\t"..., '\n', 1094) = 0x00f0689f
[0x4022d1] memchr("      return REG_ESPACE;\t\t\t\t\t\t\\\n"..., '\n', 1057) = 0x00f068bf
[0x4022d1] memchr("    /* If the buffer moved, move"..., '\n', 1025) = 0x00f06901
[0x4022d1] memchr("    if (old_buffer != bufp->buff"..., '\n', 959) = 0x00f0692b
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n        b = (b"..., '\n', 917) = 0x00f0693d
[0x4022d1] memchr("        b = (b - old_buffer) + b"..., '\n', 899) = 0x00f0696f
[0x4022d1] memchr("        begalt = (begalt - old_b"..., '\n', 849) = 0x00f069aa
[0x4022d1] memchr("        if (fixup_alt_jump)\t\t\t\t\t"..., '\n', 790) = 0x00f069cd
[0x4022d1] memchr("          fixup_alt_jump = (fixu"..., '\n', 755) = 0x00f06a17
[0x4022d1] memchr("        if (laststart)\t\t\t\t\t\t\t\\\n "..., '\n', 681) = 0x00f06a36
[0x4022d1] memchr("          laststart = (laststart"..., '\n', 650) = 0x00f06a78
[0x4022d1] memchr("        if (pending_exact)\t\t\t\t\t\t"..., '\n', 584) = 0x00f06a9a
[0x4022d1] memchr("          pending_exact = (pendi"..., '\n', 550) = 0x00f06ae3
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n  } while (0)\n"..., '\n', 477) = 0x00f06af5
[0x4022d1] memchr("  } while (0)\n\n\n/* Since we have"..., '\n', 459) = 0x00f06b03
[0x4022d1] memchr("\n\n/* Since we have one byte rese"..., '\n', 445) = 0x00f06b04
[0x4022d1] memchr("\n/* Since we have one byte reser"..., '\n', 444) = 0x00f06b05
[0x4022d1] memchr("/* Since we have one byte reserv"..., '\n', 443) = 0x00f06b4c
[0x4022d1] memchr("   {start,stop}_memory, the maxi"..., '\n', 372) = 0x00f06b8f
[0x4022d1] memchr("   things about is what fits in "..., '\n', 305) = 0x00f06bbe
[0x4022d1] memchr("#define MAX_REGNUM 255\n\n/* But p"..., '\n', 258) = 0x00f06bd5
[0x4022d1] memchr("\n/* But patterns can have more t"..., '\n', 235) = 0x00f06bd6
[0x4022d1] memchr("/* But patterns can have more th"..., '\n', 234) = 0x00f06c1a
[0x4022d1] memchr("   ignore the excess.  */\ntypede"..., '\n', 166) = 0x00f06c34
[0x4022d1] memchr("typedef unsigned regnum_t;\n\n\n/* "..., '\n', 140) = 0x00f06c4f
[0x4022d1] memchr("\n\n/* Macros for the compile stac"..., '\n', 113) = 0x00f06c50
[0x4022d1] memchr("\n/* Macros for the compile stack"..., '\n', 112) = 0x00f06c51
[0x4022d1] memchr("/* Macros for the compile stack."..., '\n', 111) = 0x00f06c76
[0x4022d1] memchr("\n/* Since offsets can go either "..., '\n', 74) = 0x00f06c77
[0x4022d1] memchr("/* Since offsets can go either f"..., '\n', 73) = 0x00f06cc0
[0x4022d1] memchr("   be able to hold values from -"..., '\n', 0) = NULL
[0x4023cc] fwrite("2624:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   be able to hold values from -"..., 1, 76, 0x7fce6d444260) = 76
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("typedef int pattern_offset_t;\n\nt"..., '1', 29389) = 0x00f07040
[0x40cdf3] memchr("1 << (((unsigned char) c) % BYTE"..., '\n', 28570) = 0x00f07067
[0x4022d1] memchr("typedef int pattern_offset_t;\n\nt"..., '\n', 813) = 0x00f06d2a
[0x4022d1] memchr("\ntypedef struct\n{\n  pattern_offs"..., '\n', 783) = 0x00f06d2b
[0x4022d1] memchr("typedef struct\n{\n  pattern_offse"..., '\n', 782) = 0x00f06d3a
[0x4022d1] memchr("{\n  pattern_offset_t begalt_offs"..., '\n', 767) = 0x00f06d3c
[0x4022d1] memchr("  pattern_offset_t begalt_offset"..., '\n', 765) = 0x00f06d5e
[0x4022d1] memchr("  pattern_offset_t fixup_alt_jum"..., '\n', 731) = 0x00f06d81
[0x4022d1] memchr("  pattern_offset_t inner_group_o"..., '\n', 696) = 0x00f06da8
[0x4022d1] memchr("  pattern_offset_t laststart_off"..., '\n', 657) = 0x00f06dcf
[0x4022d1] memchr("  regnum_t regnum;\n} compile_sta"..., '\n', 618) = 0x00f06de2
[0x4022d1] memchr("} compile_stack_elt_t;\n\n\ntypedef"..., '\n', 599) = 0x00f06df9
[0x4022d1] memchr("\n\ntypedef struct\n{\n  compile_sta"..., '\n', 576) = 0x00f06dfa
[0x4022d1] memchr("\ntypedef struct\n{\n  compile_stac"..., '\n', 575) = 0x00f06dfb
[0x4022d1] memchr("typedef struct\n{\n  compile_stack"..., '\n', 574) = 0x00f06e0a
[0x4022d1] memchr("{\n  compile_stack_elt_t *stack;\n"..., '\n', 559) = 0x00f06e0c
[0x4022d1] memchr("  compile_stack_elt_t *stack;\n  "..., '\n', 557) = 0x00f06e2a
[0x4022d1] memchr("  unsigned size;\n  unsigned avai"..., '\n', 527) = 0x00f06e3b
[0x4022d1] memchr("  unsigned avail;\t\t\t/* Offset of"..., '\n', 510) = 0x00f06e74
[0x4022d1] memchr("} compile_stack_type;\n\n\n#define "..., '\n', 453) = 0x00f06e8a
[0x4022d1] memchr("\n\n#define INIT_COMPILE_STACK_SIZ"..., '\n', 431) = 0x00f06e8b
[0x4022d1] memchr("\n#define INIT_COMPILE_STACK_SIZE"..., '\n', 430) = 0x00f06e8c
[0x4022d1] memchr("#define INIT_COMPILE_STACK_SIZE "..., '\n', 429) = 0x00f06eaf
[0x4022d1] memchr("\n#define COMPILE_STACK_EMPTY  (c"..., '\n', 394) = 0x00f06eb0
[0x4022d1] memchr("#define COMPILE_STACK_EMPTY  (co"..., '\n', 393) = 0x00f06ee8
[0x4022d1] memchr("#define COMPILE_STACK_FULL  (com"..., '\n', 337) = 0x00f06f30
[0x4022d1] memchr("\n/* The next available element. "..., '\n', 265) = 0x00f06f31
[0x4022d1] memchr("/* The next available element.  "..., '\n', 264) = 0x00f06f54
[0x4022d1] memchr("#define COMPILE_STACK_TOP (compi"..., '\n', 229) = 0x00f06f99
[0x4022d1] memchr("\n\n/* Set the bit for character C"..., '\n', 160) = 0x00f06f9a
[0x4022d1] memchr("\n/* Set the bit for character C "..., '\n', 159) = 0x00f06f9b
[0x4022d1] memchr("/* Set the bit for character C i"..., '\n', 158) = 0x00f06fc9
[0x4022d1] memchr("#define SET_LIST_BIT(c)         "..., '\n', 112) = 0x00f07001
[0x4022d1] memchr("  (b[((unsigned char) (c)) / BYT"..., '\n', 56) = 0x00f07039
[0x4022d1] memchr("   |= 1 << (((unsigned char) c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("2657:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   |= 1 << (((unsigned char) c) "..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n/* Get the next unsigned numbe"..., '1', 28530) = 0x00f071a9
[0x40cdf3] memchr("10 + c - '0'; \t\t\t\t\t\\\n           "..., '\n', 28209) = 0x00f071bd
[0x4022d1] memchr("\n\n/* Get the next unsigned numbe"..., '\n', 298) = 0x00f07068
[0x4022d1] memchr("\n/* Get the next unsigned number"..., '\n', 297) = 0x00f07069
[0x4022d1] memchr("/* Get the next unsigned number "..., '\n', 296) = 0x00f070a8
[0x4022d1] memchr("#define GET_UNSIGNED_NUMBER(num)"..., '\n', 233) = 0x00f070d0
[0x4022d1] memchr("  { if (p != pend)\t\t\t\t\t\t\t\\\n     "..., '\n', 193) = 0x00f070eb
[0x4022d1] memchr("     {\t\t\t\t\t\t\t\t\t\\\n       PATFETCH"..., '\n', 166) = 0x00f070fc
[0x4022d1] memchr("       PATFETCH (c); \t\t\t\t\t\t\t\\\n  "..., '\n', 149) = 0x00f0711a
[0x4022d1] memchr("       while (ISDIGIT (c)) \t\t\t\t\t"..., '\n', 119) = 0x00f0713d
[0x4022d1] memchr("         { \t\t\t\t\t\t\t\t\\\n           "..., '\n', 84) = 0x00f07152
[0x4022d1] memchr("           if (num < 0)\t\t\t\t\t\t\t\\\n"..., '\n', 63) = 0x00f07172
[0x4022d1] memchr("              num = 0;\t\t\t\t\t\t\t\\\n "..., '\n', 31) = 0x00f07191
[0x4022d1] memchr("           num = num * 10 + c - "..., '\n', 0) = NULL
[0x4023cc] fwrite("2669:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("           num = num * 10 + c - "..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("           if (p == pend) \t\t\t\t\t\t"..., '1', 28188) = 0x00f07868
[0x40cdf3] memchr("1;\n  \n  /* A random tempory spot"..., '\n', 26482) = 0x00f0786a
[0x4022d1] memchr("           if (p == pend) \t\t\t\t\t\t"..., '\n', 1677) = 0x00f071df
[0x4022d1] memchr("              break; \t\t\t\t\t\t\t\\\n  "..., '\n', 1643) = 0x00f071fd
[0x4022d1] memchr("           PATFETCH (c);\t\t\t\t\t\t\\\n"..., '\n', 1613) = 0x00f0721d
[0x4022d1] memchr("         } \t\t\t\t\t\t\t\t\\\n       } \t\t"..., '\n', 1581) = 0x00f07232
[0x4022d1] memchr("       } \t\t\t\t\t\t\t\t\\\n    }\t\t\n\n#def"..., '\n', 1560) = 0x00f07245
[0x4022d1] memchr("    }\t\t\n\n#define CHAR_CLASS_MAX_"..., '\n', 1541) = 0x00f0724d
[0x4022d1] memchr("\n#define CHAR_CLASS_MAX_LENGTH  "..., '\n', 1533) = 0x00f0724e
[0x4022d1] memchr("#define CHAR_CLASS_MAX_LENGTH  6"..., '\n', 1532) = 0x00f07288
[0x4022d1] memchr("\n#define IS_CHAR_CLASS(string)\t\t"..., '\n', 1474) = 0x00f07289
[0x4022d1] memchr("#define IS_CHAR_CLASS(string)\t\t\t"..., '\n', 1473) = 0x00f072ae
[0x4022d1] memchr("   (STREQ (string, "alpha") || S"..., '\n', 1436) = 0x00f072e9
[0x4022d1] memchr("    || STREQ (string, "lower") |"..., '\n', 1377) = 0x00f07326
[0x4022d1] memchr("    || STREQ (string, "alnum") |"..., '\n', 1316) = 0x00f07364
[0x4022d1] memchr("    || STREQ (string, "space") |"..., '\n', 1254) = 0x00f073a1
[0x4022d1] memchr("    || STREQ (string, "punct") |"..., '\n', 1193) = 0x00f073de
[0x4022d1] memchr("    || STREQ (string, "cntrl") |"..., '\n', 1132) = 0x00f07419
[0x4022d1] memchr("\014\n/* `regex_compile' compiles PA"..., '\n', 1073) = 0x00f0741b
[0x4022d1] memchr("/* `regex_compile' compiles PATT"..., '\n', 1071) = 0x00f07465
[0x4022d1] memchr("   Returns one of error codes de"..., '\n', 997) = 0x00f074ae
[0x4022d1] memchr("\n   Assumes the `allocated' (and"..., '\n', 924) = 0x00f074af
[0x4022d1] memchr("   Assumes the `allocated' (and "..., '\n', 923) = 0x00f074f1
[0x4022d1] memchr("   fields are set in BUFP on ent"..., '\n', 857) = 0x00f07515
[0x4022d1] memchr("\n   If it succeeds, results are "..., '\n', 821) = 0x00f07516
[0x4022d1] memchr("   If it succeeds, results are p"..., '\n', 820) = 0x00f0755e
[0x4022d1] memchr("   contents of BUFP are undefine"..., '\n', 748) = 0x00f07582
[0x4022d1] memchr("     `buffer' is the compiled pa"..., '\n', 712) = 0x00f075a9
[0x4022d1] memchr("     `syntax' is set to SYNTAX;\n"..., '\n', 673) = 0x00f075c9
[0x4022d1] memchr("     `used' is set to the length"..., '\n', 641) = 0x00f07603
[0x4022d1] memchr("     `fastmap_accurate' is zero;"..., '\n', 583) = 0x00f07624
[0x4022d1] memchr("     `re_nsub' is the number of "..., '\n', 550) = 0x00f0765f
[0x4022d1] memchr("     `not_bol' and `not_eol' are"..., '\n', 491) = 0x00f07686
[0x4022d1] memchr("   \n   The `fastmap' and `newlin"..., '\n', 452) = 0x00f0768a
[0x4022d1] memchr("   The `fastmap' and `newline_an"..., '\n', 448) = 0x00f076c3
[0x4022d1] memchr("   examined nor set.  */\n\nstatic"..., '\n', 391) = 0x00f076dc
[0x4022d1] memchr("\nstatic reg_errcode_t\nregex_comp"..., '\n', 366) = 0x00f076dd
[0x4022d1] memchr("static reg_errcode_t\nregex_compi"..., '\n', 365) = 0x00f076f2
[0x4022d1] memchr("regex_compile (pattern, size, sy"..., '\n', 344) = 0x00f0771e
[0x4022d1] memchr("     const char *pattern;\n     i"..., '\n', 300) = 0x00f07738
[0x4022d1] memchr("     int size;\n     reg_syntax_t"..., '\n', 274) = 0x00f07747
[0x4022d1] memchr("     reg_syntax_t syntax;\n     s"..., '\n', 259) = 0x00f07761
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 233) = 0x00f07786
[0x4022d1] memchr("{\n  /* We fetch characters from "..., '\n', 196) = 0x00f07788
[0x4022d1] memchr("  /* We fetch characters from PA"..., '\n', 194) = 0x00f077cc
[0x4022d1] memchr("     `char *' (i.e., signed), we"..., '\n', 126) = 0x00f07815
[0x4022d1] memchr("     they can be reliably used a"..., '\n', 53) = 0x00f0784a
[0x4022d1] memchr("  register unsigned char c, c1;\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("2715:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  register unsigned char c, c1;\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  /* A random tempory spot in"..., '1', 26479) = 0x00f078a8
[0x40cdf3] memchr("1;\n\n  /* Points to the end of th"..., '\n', 26418) = 0x00f078aa
[0x4022d1] memchr("  \n  /* A random tempory spot in"..., '\n', 46) = 0x00f0786d
[0x4022d1] memchr("  /* A random tempory spot in PA"..., '\n', 43) = 0x00f07898
[0x4022d1] memchr("  const char *p1;\n\n  /* Points t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2718:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  const char *p1;\n\n  /* Points t"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* Points to the end of the b"..., '1', 26415) = 0x00f07f1e
[0x40cdf3] memchr("1 ("\\nCompiling pattern: ");\n  i"..., '\n', 24764) = 0x00f07f3a
[0x4022d1] memchr("\n  /* Points to the end of the b"..., '\n', 1638) = 0x00f078ab
[0x4022d1] memchr("  /* Points to the end of the bu"..., '\n', 1637) = 0x00f078ed
[0x4022d1] memchr("  register unsigned char *b;\n  \n"..., '\n', 1571) = 0x00f0790a
[0x4022d1] memchr("  \n  /* Keeps track of unclosed "..., '\n', 1542) = 0x00f0790d
[0x4022d1] memchr("  /* Keeps track of unclosed gro"..., '\n', 1539) = 0x00f07936
[0x4022d1] memchr("  compile_stack_type compile_sta"..., '\n', 1498) = 0x00f0795a
[0x4022d1] memchr("\n  /* Points to the current (end"..., '\n', 1462) = 0x00f0795b
[0x4022d1] memchr("  /* Points to the current (endi"..., '\n', 1461) = 0x00f0799c
[0x4022d1] memchr("  const char *p = pattern;\n  con"..., '\n', 1396) = 0x00f079b7
[0x4022d1] memchr("  const char *pend = pattern + s"..., '\n', 1369) = 0x00f079dc
[0x4022d1] memchr("  \n  /* How to translate the cha"..., '\n', 1332) = 0x00f079df
[0x4022d1] memchr("  /* How to translate the charac"..., '\n', 1329) = 0x00f07a18
[0x4022d1] memchr("  char *translate = bufp->transl"..., '\n', 1272) = 0x00f07a3d
[0x4022d1] memchr("\n  /* Address of the count-byte "..., '\n', 1235) = 0x00f07a3e
[0x4022d1] memchr("  /* Address of the count-byte o"..., '\n', 1234) = 0x00f07a84
[0x4022d1] memchr("     command.  This makes it pos"..., '\n', 1164) = 0x00f07ac7
[0x4022d1] memchr("     character can be added to t"..., '\n', 1097) = 0x00f07b10
[0x4022d1] memchr("     a new `exactn' command.  */"..., '\n', 1024) = 0x00f07b31
[0x4022d1] memchr("  unsigned char *pending_exact ="..., '\n', 991) = 0x00f07b55
[0x4022d1] memchr("\n  /* Address of start of the mo"..., '\n', 955) = 0x00f07b56
[0x4022d1] memchr("  /* Address of start of the mos"..., '\n', 954) = 0x00f07b96
[0x4022d1] memchr("     This tells, e.g., postfix *"..., '\n', 890) = 0x00f07bd6
[0x4022d1] memchr("     operand.  Reset at the begi"..., '\n', 826) = 0x00f07c1c
[0x4022d1] memchr("  unsigned char *laststart = 0;\n"..., '\n', 756) = 0x00f07c3c
[0x4022d1] memchr("\n  /* Address of beginning of re"..., '\n', 724) = 0x00f07c3d
[0x4022d1] memchr("  /* Address of beginning of reg"..., '\n', 723) = 0x00f07c7f
[0x4022d1] memchr("  unsigned char *begalt;\n\n  /* P"..., '\n', 657) = 0x00f07c98
[0x4022d1] memchr("\n  /* Place in the uncompiled pa"..., '\n', 632) = 0x00f07c99
[0x4022d1] memchr("  /* Place in the uncompiled pat"..., '\n', 631) = 0x00f07ccf
[0x4022d1] memchr("     which to go back if the int"..., '\n', 577) = 0x00f07d05
[0x4022d1] memchr("  const char *beg_interval;\n    "..., '\n', 523) = 0x00f07d21
[0x4022d1] memchr("                \n  /* Address of"..., '\n', 495) = 0x00f07d32
[0x4022d1] memchr("  /* Address of the place where "..., '\n', 478) = 0x00f07d79
[0x4022d1] memchr("     the containing expression. "..., '\n', 407) = 0x00f07dc4
[0x4022d1] memchr("     last -- ends with a forward"..., '\n', 332) = 0x00f07dfc
[0x4022d1] memchr("  unsigned char *fixup_alt_jump "..., '\n', 276) = 0x00f07e21
[0x4022d1] memchr("\n  /* Counts open-groups as they"..., '\n', 239) = 0x00f07e22
[0x4022d1] memchr("  /* Counts open-groups as they "..., '\n', 238) = 0x00f07e67
[0x4022d1] memchr("     matching close-group on the"..., '\n', 169) = 0x00f07eac
[0x4022d1] memchr("     number is put in the stop_m"..., '\n', 100) = 0x00f07eeb
[0x4022d1] memchr("  regnum_t regnum = 0;\n\n#ifdef D"..., '\n', 37) = 0x00f07f02
[0x4022d1] memchr("\n#ifdef DEBUG\n  DEBUG_PRINT1 ("\\"..., '\n', 14) = 0x00f07f03
[0x4022d1] memchr("#ifdef DEBUG\n  DEBUG_PRINT1 ("\\n"..., '\n', 13) = 0x00f07f10
[0x4022d1] memchr("  DEBUG_PRINT1 ("\\nCompiling pat"..., '\n', 0) = NULL
[0x4023cc] fwrite("2762:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("\\nCompiling pat"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (debug)\n    {\n      unsigne"..., '1', 24735) = 0x00f0867c
[0x40cdf3] memchr("1\n                   /* If conte"..., '\n', 22878) = 0x00f0867d
[0x4022d1] memchr("  if (debug)\n    {\n      unsigne"..., '\n', 1823) = 0x00f07f47
[0x4022d1] memchr("    {\n      unsigned debug_count"..., '\n', 1810) = 0x00f07f4d
[0x4022d1] memchr("      unsigned debug_count;\n    "..., '\n', 1804) = 0x00f07f69
[0x4022d1] memchr("      \n      for (debug_count = "..., '\n', 1776) = 0x00f07f70
[0x4022d1] memchr("      for (debug_count = 0; debu"..., '\n', 1769) = 0x00f07faf
[0x4022d1] memchr("        printchar (pattern[debug"..., '\n', 1706) = 0x00f07fd9
[0x4022d1] memchr("      putchar ('\\n');\n    }\n#end"..., '\n', 1664) = 0x00f07fef
[0x4022d1] memchr("    }\n#endif /* DEBUG */\n\n  /* I"..., '\n', 1642) = 0x00f07ff5
[0x4022d1] memchr("#endif /* DEBUG */\n\n  /* Initial"..., '\n', 1636) = 0x00f08008
[0x4022d1] memchr("\n  /* Initialize the compile sta"..., '\n', 1617) = 0x00f08009
[0x4022d1] memchr("  /* Initialize the compile stac"..., '\n', 1616) = 0x00f08030
[0x4022d1] memchr("  compile_stack.stack = TALLOC ("..., '\n', 1577) = 0x00f0807f
[0x4022d1] memchr("  if (compile_stack.stack == NUL"..., '\n', 1498) = 0x00f080a2
[0x4022d1] memchr("    return REG_ESPACE;\n\n  compil"..., '\n', 1463) = 0x00f080b9
[0x4022d1] memchr("\n  compile_stack.size = INIT_COM"..., '\n', 1440) = 0x00f080ba
[0x4022d1] memchr("  compile_stack.size = INIT_COMP"..., '\n', 1439) = 0x00f080ea
[0x4022d1] memchr("  compile_stack.avail = 0;\n\n  /*"..., '\n', 1391) = 0x00f08105
[0x4022d1] memchr("\n  /* Initialize the pattern buf"..., '\n', 1364) = 0x00f08106
[0x4022d1] memchr("  /* Initialize the pattern buff"..., '\n', 1363) = 0x00f0812e
[0x4022d1] memchr("  bufp->syntax = syntax;\n  bufp-"..., '\n', 1323) = 0x00f08147
[0x4022d1] memchr("  bufp->fastmap_accurate = 0;\n  "..., '\n', 1298) = 0x00f08165
[0x4022d1] memchr("  bufp->not_bol = bufp->not_eol "..., '\n', 1268) = 0x00f0818a
[0x4022d1] memchr("\n  /* Set `used' to zero, so tha"..., '\n', 1231) = 0x00f0818b
[0x4022d1] memchr("  /* Set `used' to zero, so that"..., '\n', 1230) = 0x00f081cf
[0x4022d1] memchr("     printer (for debugging) wil"..., '\n', 1162) = 0x00f08218
[0x4022d1] memchr("     at the end.  */\n  bufp->use"..., '\n', 1089) = 0x00f0822d
[0x4022d1] memchr("  bufp->used = 0;\n  \n  /* Always"..., '\n', 1068) = 0x00f0823f
[0x4022d1] memchr("  \n  /* Always count groups, whe"..., '\n', 1050) = 0x00f08242
[0x4022d1] memchr("  /* Always count groups, whethe"..., '\n', 1047) = 0x00f08284
[0x4022d1] memchr("  bufp->re_nsub = 0;\t\t\t\t\n\n#if !d"..., '\n', 981) = 0x00f0829d
[0x4022d1] memchr("\n#if !defined (emacs) && !define"..., '\n', 956) = 0x00f0829e
[0x4022d1] memchr("#if !defined (emacs) && !defined"..., '\n', 955) = 0x00f082ce
[0x4022d1] memchr("  /* Initialize the syntax table"..., '\n', 907) = 0x00f082f4
[0x4022d1] memchr("   init_syntax_once ();\n#endif\n\n"..., '\n', 869) = 0x00f0830c
[0x4022d1] memchr("#endif\n\n  if (bufp->allocated =="..., '\n', 845) = 0x00f08313
[0x4022d1] memchr("\n  if (bufp->allocated == 0)\n   "..., '\n', 838) = 0x00f08314
[0x4022d1] memchr("  if (bufp->allocated == 0)\n    "..., '\n', 837) = 0x00f08330
[0x4022d1] memchr("    {\n      if (bufp->buffer)\n\t{"..., '\n', 809) = 0x00f08336
[0x4022d1] memchr("      if (bufp->buffer)\n\t{ /* If"..., '\n', 803) = 0x00f0834e
[0x4022d1] memchr("\t{ /* If zero allocated, but buf"..., '\n', 779) = 0x00f0838e
[0x4022d1] memchr("             enough space.  This"..., '\n', 715) = 0x00f083d7
[0x4022d1] memchr("             that is the user's "..., '\n', 642) = 0x00f0840b
[0x4022d1] memchr("          RETALLOC (bufp->buffer"..., '\n', 590) = 0x00f0844c
[0x4022d1] memchr("        }\n      else\n        { /"..., '\n', 525) = 0x00f08456
[0x4022d1] memchr("      else\n        { /* Caller d"..., '\n', 515) = 0x00f08461
[0x4022d1] memchr("        { /* Caller did not allo"..., '\n', 504) = 0x00f084a5
[0x4022d1] memchr("          bufp->buffer = TALLOC "..., '\n', 436) = 0x00f084e5
[0x4022d1] memchr("        }\n      if (!bufp->buffe"..., '\n', 372) = 0x00f084ef
[0x4022d1] memchr("      if (!bufp->buffer) return "..., '\n', 362) = 0x00f0851b
[0x4022d1] memchr("\n      bufp->allocated = INIT_BU"..., '\n', 318) = 0x00f0851c
[0x4022d1] memchr("      bufp->allocated = INIT_BUF"..., '\n', 317) = 0x00f08543
[0x4022d1] memchr("    }\n\n  begalt = b = bufp->buff"..., '\n', 278) = 0x00f08549
[0x4022d1] memchr("\n  begalt = b = bufp->buffer;\n\n "..., '\n', 272) = 0x00f0854a
[0x4022d1] memchr("  begalt = b = bufp->buffer;\n\n  "..., '\n', 271) = 0x00f08567
[0x4022d1] memchr("\n  /* Loop through the uncompile"..., '\n', 242) = 0x00f08568
[0x4022d1] memchr("  /* Loop through the uncompiled"..., '\n', 241) = 0x00f085ad
[0x4022d1] memchr("  while (p != pend)\n    {\n      "..., '\n', 172) = 0x00f085c1
[0x4022d1] memchr("    {\n      PATFETCH (c);\n\n     "..., '\n', 152) = 0x00f085c7
[0x4022d1] memchr("      PATFETCH (c);\n\n      switc"..., '\n', 146) = 0x00f085db
[0x4022d1] memchr("\n      switch (c)\n        {\n    "..., '\n', 126) = 0x00f085dc
[0x4022d1] memchr("      switch (c)\n        {\n     "..., '\n', 125) = 0x00f085ed
[0x4022d1] memchr("        {\n        case '^':\n    "..., '\n', 108) = 0x00f085f7
[0x4022d1] memchr("        case '^':\n          {\n  "..., '\n', 98) = 0x00f08609
[0x4022d1] memchr("          {\n            if (   /"..., '\n', 80) = 0x00f08615
[0x4022d1] memchr("            if (   /* If at star"..., '\n', 68) = 0x00f08659
[0x4022d1] memchr("                   p == pattern "..., '\n', 0) = NULL
[0x4023cc] fwrite("2828:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                   p == pattern "..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                   /* If context"..., '1', 22876) = 0x00f08c1c
[0x40cdf3] memchr("1 means zero (many) matches is a"..., '\n', 21438) = 0x00f08c47
[0x4022d1] memchr("                   /* If context"..., '\n', 1423) = 0x00f086c1
[0x4022d1] memchr("                || syntax & RE_C"..., '\n', 1355) = 0x00f086f6
[0x4022d1] memchr("                   /* Otherwise,"..., '\n', 1302) = 0x00f0873a
[0x4022d1] memchr("                || at_begline_lo"..., '\n', 1234) = 0x00f08774
[0x4022d1] memchr("              BUF_PUSH (begline)"..., '\n', 1176) = 0x00f08796
[0x4022d1] memchr("            else\n              g"..., '\n', 1142) = 0x00f087a7
[0x4022d1] memchr("              goto normal_char;\n"..., '\n', 1125) = 0x00f087c7
[0x4022d1] memchr("          }\n          break;\n\n\n "..., '\n', 1093) = 0x00f087d3
[0x4022d1] memchr("          break;\n\n\n        case "..., '\n', 1081) = 0x00f087e4
[0x4022d1] memchr("\n\n        case '$':\n          {\n"..., '\n', 1064) = 0x00f087e5
[0x4022d1] memchr("\n        case '$':\n          {\n "..., '\n', 1063) = 0x00f087e6
[0x4022d1] memchr("        case '$':\n          {\n  "..., '\n', 1062) = 0x00f087f8
[0x4022d1] memchr("          {\n            if (   /"..., '\n', 1044) = 0x00f08804
[0x4022d1] memchr("            if (   /* If at end "..., '\n', 1032) = 0x00f08846
[0x4022d1] memchr("                   p == pend \n  "..., '\n', 966) = 0x00f08864
[0x4022d1] memchr("                   /* If context"..., '\n', 936) = 0x00f088a8
[0x4022d1] memchr("                || syntax & RE_C"..., '\n', 868) = 0x00f088dd
[0x4022d1] memchr("                   /* Otherwise,"..., '\n', 815) = 0x00f0891a
[0x4022d1] memchr("                || at_endline_lo"..., '\n', 754) = 0x00f08951
[0x4022d1] memchr("               BUF_PUSH (endline"..., '\n', 699) = 0x00f08974
[0x4022d1] memchr("             else\n              "..., '\n', 664) = 0x00f08986
[0x4022d1] memchr("               goto normal_char;"..., '\n', 646) = 0x00f089a7
[0x4022d1] memchr("           }\n           break;\n\n"..., '\n', 613) = 0x00f089b4
[0x4022d1] memchr("           break;\n\n\n\tcase '+':\n "..., '\n', 600) = 0x00f089c6
[0x4022d1] memchr("\n\n\tcase '+':\n        case '?':\n "..., '\n', 582) = 0x00f089c7
[0x4022d1] memchr("\n\tcase '+':\n        case '?':\n  "..., '\n', 581) = 0x00f089c8
[0x4022d1] memchr("\tcase '+':\n        case '?':\n   "..., '\n', 580) = 0x00f089d3
[0x4022d1] memchr("        case '?':\n          if ("..., '\n', 569) = 0x00f089e5
[0x4022d1] memchr("          if ((syntax & RE_BK_PL"..., '\n', 551) = 0x00f08a0c
[0x4022d1] memchr("              || (syntax & RE_LI"..., '\n', 512) = 0x00f08a38
[0x4022d1] memchr("            goto normal_char;\n  "..., '\n', 468) = 0x00f08a56
[0x4022d1] memchr("        handle_plus:\n        cas"..., '\n', 438) = 0x00f08a6b
[0x4022d1] memchr("        case '*':\n          /* I"..., '\n', 417) = 0x00f08a7d
[0x4022d1] memchr("          /* If there is no prev"..., '\n', 399) = 0x00f08ab0
[0x4022d1] memchr("          if (!laststart)\n      "..., '\n', 348) = 0x00f08aca
[0x4022d1] memchr("            {\n              if ("..., '\n', 322) = 0x00f08ad8
[0x4022d1] memchr("              if (syntax & RE_CO"..., '\n', 308) = 0x00f08b0b
[0x4022d1] memchr("                return REG_BADRP"..., '\n', 257) = 0x00f08b2e
[0x4022d1] memchr("              else if (!(syntax "..., '\n', 222) = 0x00f08b67
[0x4022d1] memchr("                goto normal_char"..., '\n', 165) = 0x00f08b89
[0x4022d1] memchr("            }\n\n          {\n     "..., '\n', 131) = 0x00f08b97
[0x4022d1] memchr("\n          {\n            /* Are "..., '\n', 117) = 0x00f08b98
[0x4022d1] memchr("          {\n            /* Are w"..., '\n', 116) = 0x00f08ba4
[0x4022d1] memchr("            /* Are we optimizing"..., '\n', 104) = 0x00f08bd4
[0x4022d1] memchr("            boolean keep_string_"..., '\n', 56) = 0x00f08bff
[0x4022d1] memchr("            \n            /* 1 me"..., '\n', 13) = 0x00f08c0c
[0x4022d1] memchr("            /* 1 means zero (man"..., '\n', 0) = NULL
[0x4023cc] fwrite("2875:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            /* 1 means zero (man"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            char zero_times_ok ="..., '1', 21394) = 0x00f08f95
[0x40cdf3] memchr("1);\n                    if (!(c1"..., '\n', 20549) = 0x00f08f98
[0x4022d1] memchr("            char zero_times_ok ="..., '\n', 814) = 0x00f08c7e
[0x4022d1] memchr("\n            /* If there is a se"..., '\n', 759) = 0x00f08c7f
[0x4022d1] memchr("            /* If there is a seq"..., '\n', 758) = 0x00f08cc6
[0x4022d1] memchr("               down to just one "..., '\n', 687) = 0x00f08d09
[0x4022d1] memchr("               interval operator"..., '\n', 620) = 0x00f08d51
[0x4022d1] memchr("               which should only"..., '\n', 548) = 0x00f08d94
[0x4022d1] memchr("\n            for (;;)\n          "..., '\n', 481) = 0x00f08d95
[0x4022d1] memchr("            for (;;)\n           "..., '\n', 480) = 0x00f08daa
[0x4022d1] memchr("              {\n                "..., '\n', 459) = 0x00f08dba
[0x4022d1] memchr("                zero_times_ok |="..., '\n', 443) = 0x00f08de5
[0x4022d1] memchr("                many_times_ok |="..., '\n', 400) = 0x00f08e10
[0x4022d1] memchr("\n                if (p == pend)\n"..., '\n', 357) = 0x00f08e11
[0x4022d1] memchr("                if (p == pend)\n "..., '\n', 356) = 0x00f08e30
[0x4022d1] memchr("                  break;\n\n      "..., '\n', 325) = 0x00f08e49
[0x4022d1] memchr("\n                PATFETCH (c);\n\n"..., '\n', 300) = 0x00f08e4a
[0x4022d1] memchr("                PATFETCH (c);\n\n "..., '\n', 299) = 0x00f08e68
[0x4022d1] memchr("\n                if (c == '*'\n  "..., '\n', 269) = 0x00f08e69
[0x4022d1] memchr("                if (c == '*'\n   "..., '\n', 268) = 0x00f08e86
[0x4022d1] memchr("                    || (!(syntax"..., '\n', 239) = 0x00f08ed4
[0x4022d1] memchr("                  ;\n\n           "..., '\n', 161) = 0x00f08ee8
[0x4022d1] memchr("\n                else if (syntax"..., '\n', 141) = 0x00f08ee9
[0x4022d1] memchr("                else if (syntax "..., '\n', 140) = 0x00f08f29
[0x4022d1] memchr("                  {\n            "..., '\n', 76) = 0x00f08f3d
[0x4022d1] memchr("                    if (p == pen"..., '\n', 56) = 0x00f08f74
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 1) = 0x00f08f75
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 0) = NULL
[0x4023cc] fwrite("2901:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    PATFETCH (c1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    if (!(c1 == "..., '1', 20545) = 0x00f08fb4
[0x40cdf3] memchr("1 == '+' || c1 == '?'))\n        "..., '\n', 20518) = 0x00f08fcb
[0x4022d1] memchr("                    if (!(c1 == "..., '\n', 0) = NULL
[0x4023cc] fwrite("2902:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    if (!(c1 == "..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      {\n        "..., '1', 20494) = 0x00f0907d
[0x40cdf3] memchr("1;\n                  }\n         "..., '\n', 20317) = 0x00f0907f
[0x4022d1] memchr("                      {\n        "..., '\n', 152) = 0x00f08fe3
[0x4022d1] memchr("                        PATUNFET"..., '\n', 128) = 0x00f09007
[0x4022d1] memchr("                        PATUNFET"..., '\n', 92) = 0x00f0902b
[0x4022d1] memchr("                        break;\n "..., '\n', 56) = 0x00f0904a
[0x4022d1] memchr("                      }\n\n       "..., '\n', 25) = 0x00f09062
[0x4022d1] memchr("\n                    c = c1;\n   "..., '\n', 1) = 0x00f09063
[0x4022d1] memchr("                    c = c1;\n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("2909:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    c = c1;\n    "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  }\n            "..., '1', 20314) = 0x00f09527
[0x40cdf3] memchr("1 > pattern);\n\n                /"..., '\n', 19123) = 0x00f09534
[0x4022d1] memchr("                  }\n            "..., '\n', 1163) = 0x00f09093
[0x4022d1] memchr("                else\n           "..., '\n', 1143) = 0x00f090a8
[0x4022d1] memchr("                  {\n            "..., '\n', 1122) = 0x00f090bc
[0x4022d1] memchr("                    PATUNFETCH;\n"..., '\n', 1102) = 0x00f090dc
[0x4022d1] memchr("                    break;\n     "..., '\n', 1070) = 0x00f090f7
[0x4022d1] memchr("                  }\n\n           "..., '\n', 1043) = 0x00f0910b
[0x4022d1] memchr("\n                /* If we get he"..., '\n', 1023) = 0x00f0910c
[0x4022d1] memchr("                /* If we get her"..., '\n', 1022) = 0x00f09156
[0x4022d1] memchr("               }\n\n            /*"..., '\n', 948) = 0x00f09167
[0x4022d1] memchr("\n            /* Star, etc. appli"..., '\n', 931) = 0x00f09168
[0x4022d1] memchr("            /* Star, etc. applie"..., '\n', 930) = 0x00f091ac
[0x4022d1] memchr("               to an empty patte"..., '\n', 862) = 0x00f091d4
[0x4022d1] memchr("            if (!laststart)  \n  "..., '\n', 822) = 0x00f091f2
[0x4022d1] memchr("              break;\n\n          "..., '\n', 792) = 0x00f09207
[0x4022d1] memchr("\n            /* Now we know whet"..., '\n', 771) = 0x00f09208
[0x4022d1] memchr("            /* Now we know wheth"..., '\n', 770) = 0x00f0924a
[0x4022d1] memchr("               and also whether "..., '\n', 704) = 0x00f09295
[0x4022d1] memchr("            if (many_times_ok)\n "..., '\n', 629) = 0x00f092b4
[0x4022d1] memchr("              { /* More than one"..., '\n', 598) = 0x00f092fd
[0x4022d1] memchr("                   end a backwar"..., '\n', 525) = 0x00f09349
[0x4022d1] memchr("                   jump we're go"..., '\n', 449) = 0x00f0938f
[0x4022d1] memchr("                   laststart to "..., '\n', 379) = 0x00f093c3
[0x4022d1] memchr("\n                   But if we ar"..., '\n', 327) = 0x00f093c4
[0x4022d1] memchr("                   But if we are"..., '\n', 326) = 0x00f0940e
[0x4022d1] memchr("                   insert an unc"..., '\n', 252) = 0x00f09452
[0x4022d1] memchr("                   instead of th"..., '\n', 184) = 0x00f0949d
[0x4022d1] memchr("                   push a failur"..., '\n', 109) = 0x00f094e1
[0x4022d1] memchr("                   through the l"..., '\n', 41) = 0x00f0950a
[0x4022d1] memchr("                assert (p - 1 > "..., '\n', 0) = NULL
[0x4023cc] fwrite("2938:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                assert (p - 1 > "..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                /* Allocate the"..., '1', 19109) = 0x00f09fc6
[0x40cdf3] memchr("1 = p;\n\n            /* Push the "..., '\n', 16404) = 0x00f09fcc
[0x4022d1] memchr("\n                /* Allocate the"..., '\n', 2692) = 0x00f09535
[0x4022d1] memchr("                /* Allocate the "..., '\n', 2691) = 0x00f0956d
[0x4022d1] memchr("                GET_BUFFER_SPACE"..., '\n', 2635) = 0x00f09593
[0x4022d1] memchr("\n                /* We know we a"..., '\n', 2597) = 0x00f09594
[0x4022d1] memchr("                /* We know we ar"..., '\n', 2596) = 0x00f095e1
[0x4022d1] memchr("                   because lasts"..., '\n', 2519) = 0x00f09626
[0x4022d1] memchr("                   incremented `"..., '\n', 2450) = 0x00f09670
[0x4022d1] memchr("                   the `*'.  Do "..., '\n', 2376) = 0x00f096b7
[0x4022d1] memchr("                   for null byte"..., '\n', 2305) = 0x00f096fa
[0x4022d1] memchr("                if (TRANSLATE (*"..., '\n', 2238) = 0x00f09736
[0x4022d1] memchr("\t\t    && zero_times_ok\n         "..., '\n', 2178) = 0x00f0974d
[0x4022d1] memchr("                    && p < pend "..., '\n', 2155) = 0x00f09793
[0x4022d1] memchr("                    && !(syntax "..., '\n', 2085) = 0x00f097c6
[0x4022d1] memchr("                  { /* We have ."..., '\n', 2034) = 0x00f097ef
[0x4022d1] memchr("                    STORE_JUMP ("..., '\n', 1993) = 0x00f09824
[0x4022d1] memchr("                    keep_string_"..., '\n', 1940) = 0x00f0984e
[0x4022d1] memchr("                  }\n            "..., '\n', 1898) = 0x00f09862
[0x4022d1] memchr("                else\n           "..., '\n', 1878) = 0x00f09877
[0x4022d1] memchr("                  /* Anything el"..., '\n', 1857) = 0x00f0989f
[0x4022d1] memchr("                  STORE_JUMP (ma"..., '\n', 1817) = 0x00f098e0
[0x4022d1] memchr("\n                /* We've added "..., '\n', 1752) = 0x00f098e1
[0x4022d1] memchr("                /* We've added m"..., '\n', 1751) = 0x00f0991e
[0x4022d1] memchr("                b += 3;\n        "..., '\n', 1690) = 0x00f09936
[0x4022d1] memchr("              }\n\n            /* "..., '\n', 1666) = 0x00f09946
[0x4022d1] memchr("\n            /* On failure, jump"..., '\n', 1650) = 0x00f09947
[0x4022d1] memchr("            /* On failure, jump "..., '\n', 1649) = 0x00f09992
[0x4022d1] memchr("               end of the buffer"..., '\n', 1574) = 0x00f099d4
[0x4022d1] memchr("            GET_BUFFER_SPACE (3)"..., '\n', 1508) = 0x00f099f6
[0x4022d1] memchr("            INSERT_JUMP (keep_st"..., '\n', 1474) = 0x00f09a3b
[0x4022d1] memchr("                                "..., '\n', 1405) = 0x00f09a75
[0x4022d1] memchr("                         laststa"..., '\n', 1347) = 0x00f09aa1
[0x4022d1] memchr("            pending_exact = 0;\n "..., '\n', 1303) = 0x00f09ac0
[0x4022d1] memchr("            b += 3;\n\n           "..., '\n', 1272) = 0x00f09ad4
[0x4022d1] memchr("\n            if (!zero_times_ok)"..., '\n', 1252) = 0x00f09ad5
[0x4022d1] memchr("            if (!zero_times_ok)\n"..., '\n', 1251) = 0x00f09af5
[0x4022d1] memchr("              {\n                "..., '\n', 1219) = 0x00f09b05
[0x4022d1] memchr("                /* At least one "..., '\n', 1203) = 0x00f09b49
[0x4022d1] memchr("                   `dummy_failur"..., '\n', 1135) = 0x00f09b84
[0x4022d1] memchr("                   `on_failure_j"..., '\n', 1076) = 0x00f09bc7
[0x4022d1] memchr("                   effects a ski"..., '\n', 1009) = 0x00f09c0e
[0x4022d1] memchr("                   we hit that l"..., '\n', 938) = 0x00f09c37
[0x4022d1] memchr("                GET_BUFFER_SPACE"..., '\n', 897) = 0x00f09c5d
[0x4022d1] memchr("                INSERT_JUMP (dum"..., '\n', 859) = 0x00f09ca9
[0x4022d1] memchr("                b += 3;\n        "..., '\n', 783) = 0x00f09cc1
[0x4022d1] memchr("              }\n            }\n\t "..., '\n', 759) = 0x00f09cd1
[0x4022d1] memchr("            }\n\t  break;\n\n\n\tcase "..., '\n', 743) = 0x00f09cdf
[0x4022d1] memchr("\t  break;\n\n\n\tcase '.':\n         "..., '\n', 729) = 0x00f09ce9
[0x4022d1] memchr("\n\n\tcase '.':\n          laststart"..., '\n', 719) = 0x00f09cea
[0x4022d1] memchr("\n\tcase '.':\n          laststart "..., '\n', 718) = 0x00f09ceb
[0x4022d1] memchr("\tcase '.':\n          laststart ="..., '\n', 717) = 0x00f09cf6
[0x4022d1] memchr("          laststart = b;\n       "..., '\n', 706) = 0x00f09d0f
[0x4022d1] memchr("          BUF_PUSH (anychar);\n  "..., '\n', 681) = 0x00f09d2d
[0x4022d1] memchr("          break;\n\n\n        case "..., '\n', 651) = 0x00f09d3e
[0x4022d1] memchr("\n\n        case '[':\n          {\n"..., '\n', 634) = 0x00f09d3f
[0x4022d1] memchr("\n        case '[':\n          {\n "..., '\n', 633) = 0x00f09d40
[0x4022d1] memchr("        case '[':\n          {\n  "..., '\n', 632) = 0x00f09d52
[0x4022d1] memchr("          {\n            boolean "..., '\n', 614) = 0x00f09d5e
[0x4022d1] memchr("            boolean had_char_cla"..., '\n', 602) = 0x00f09d8a
[0x4022d1] memchr("\n            if (p == pend) retu"..., '\n', 558) = 0x00f09d8b
[0x4022d1] memchr("            if (p == pend) retur"..., '\n', 557) = 0x00f09db9
[0x4022d1] memchr("\n            /* Ensure that we h"..., '\n', 511) = 0x00f09dba
[0x4022d1] memchr("            /* Ensure that we ha"..., '\n', 510) = 0x00f09e01
[0x4022d1] memchr("               opcode, the lengt"..., '\n', 439) = 0x00f09e4f
[0x4022d1] memchr("\t    GET_BUFFER_SPACE (34);\n\n   "..., '\n', 361) = 0x00f09e6b
[0x4022d1] memchr("\n            laststart = b;\n\n   "..., '\n', 333) = 0x00f09e6c
[0x4022d1] memchr("            laststart = b;\n\n    "..., '\n', 332) = 0x00f09e87
[0x4022d1] memchr("\n            /* We test `*p == '"..., '\n', 305) = 0x00f09e88
[0x4022d1] memchr("            /* We test `*p == '^"..., '\n', 304) = 0x00f09ec8
[0x4022d1] memchr("               statement, so we "..., '\n', 240) = 0x00f09f04
[0x4022d1] memchr("            BUF_PUSH (*p == '^' "..., '\n', 180) = 0x00f09f3f
[0x4022d1] memchr("            if (*p == '^')\n     "..., '\n', 121) = 0x00f09f5a
[0x4022d1] memchr("              p++;\n\n            "..., '\n', 94) = 0x00f09f6d
[0x4022d1] memchr("\n            /* Remember the fir"..., '\n', 75) = 0x00f09f6e
[0x4022d1] memchr("            /* Remember the firs"..., '\n', 74) = 0x00f09fb8
[0x4022d1] memchr("            p1 = p;\n\n           "..., '\n', 0) = NULL
[0x4023cc] fwrite("3013:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            p1 = p;\n\n           "..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n            /* Push the number "..., '1', 16397) = 0x00f0a020
[0x40cdf3] memchr("1 << BYTEWIDTH) / BYTEWIDTH);\n\n "..., '\n', 16314) = 0x00f0a03d
[0x4022d1] memchr("\n            /* Push the number "..., '\n', 60) = 0x00f09fcd
[0x4022d1] memchr("            /* Push the number o"..., '\n', 59) = 0x00f0a008
[0x4022d1] memchr("            BUF_PUSH ((1 << BYTE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3016:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            BUF_PUSH ((1 << BYTE"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n            /* Clear the whole "..., '1', 16284) = 0x00f0a07e
[0x40cdf3] memchr("1 << BYTEWIDTH) / BYTEWIDTH);\n\n "..., '\n', 16220) = 0x00f0a09b
[0x4022d1] memchr("\n            /* Clear the whole "..., '\n', 41) = 0x00f0a03e
[0x4022d1] memchr("            /* Clear the whole m"..., '\n', 40) = 0x00f0a066
[0x4022d1] memchr("            bzero (b, (1 << BYTE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3019:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            bzero (b, (1 << BYTE"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n            /* charset_not matc"..., '1', 16190) = 0x00f0a330
[0x40cdf3] memchr("1);\n                    SET_LIST"..., '\n', 15530) = 0x00f0a333
[0x4022d1] memchr("\n            /* charset_not matc"..., '\n', 629) = 0x00f0a09c
[0x4022d1] memchr("            /* charset_not match"..., '\n', 628) = 0x00f0a0e6
[0x4022d1] memchr("            if ((re_opcode_t) b["..., '\n', 554) = 0x00f0a119
[0x4022d1] memchr("                && (syntax & RE_"..., '\n', 503) = 0x00f0a151
[0x4022d1] memchr("              SET_LIST_BIT ('\\n'"..., '\n', 447) = 0x00f0a174
[0x4022d1] memchr("\n            /* Read in characte"..., '\n', 412) = 0x00f0a175
[0x4022d1] memchr("            /* Read in character"..., '\n', 411) = 0x00f0a1b9
[0x4022d1] memchr("            for (;;)\n           "..., '\n', 343) = 0x00f0a1ce
[0x4022d1] memchr("              {\n                "..., '\n', 322) = 0x00f0a1de
[0x4022d1] memchr("                if (p == pend) r"..., '\n', 306) = 0x00f0a210
[0x4022d1] memchr("\n                PATFETCH (c);\n\n"..., '\n', 256) = 0x00f0a211
[0x4022d1] memchr("                PATFETCH (c);\n\n "..., '\n', 255) = 0x00f0a22f
[0x4022d1] memchr("\n                /* \\ might esca"..., '\n', 225) = 0x00f0a230
[0x4022d1] memchr("                /* \\ might escap"..., '\n', 224) = 0x00f0a27a
[0x4022d1] memchr("                if ((syntax & RE"..., '\n', 150) = 0x00f0a2c4
[0x4022d1] memchr("                  {\n            "..., '\n', 76) = 0x00f0a2d8
[0x4022d1] memchr("                    if (p == pen"..., '\n', 56) = 0x00f0a30f
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 1) = 0x00f0a310
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 0) = NULL
[0x4023cc] fwrite("3038:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    PATFETCH (c1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    SET_LIST_BIT"..., '1', 15526) = 0x00f0a357
[0x40cdf3] memchr("1);\n                    continue"..., '\n', 15491) = 0x00f0a35a
[0x4022d1] memchr("                    SET_LIST_BIT"..., '\n', 0) = NULL
[0x4023cc] fwrite("3039:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    SET_LIST_BIT"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    continue;\n  "..., '1', 15487) = 0x00f0a488
[0x40cdf3] memchr("1 + 1)\n                  break;\n"..., '\n', 15186) = 0x00f0a48e
[0x4022d1] memchr("                    continue;\n  "..., '\n', 263) = 0x00f0a378
[0x4022d1] memchr("                  }\n\n           "..., '\n', 233) = 0x00f0a38c
[0x4022d1] memchr("\n                /* Could be the"..., '\n', 213) = 0x00f0a38d
[0x4022d1] memchr("                /* Could be the "..., '\n', 212) = 0x00f0a3d5
[0x4022d1] memchr("                   not (i.e., wh"..., '\n', 140) = 0x00f0a41a
[0x4022d1] memchr("                   far), the ']'"..., '\n', 71) = 0x00f0a461
[0x4022d1] memchr("                if (c == ']' && "..., '\n', 0) = NULL
[0x4023cc] fwrite("3046:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                if (c == ']' && "..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  break;\n\n      "..., '1', 15179) = 0x00f0a837
[0x40cdf3] memchr("1] != ']')\n                  { /"..., '\n', 14243) = 0x00f0a841
[0x4022d1] memchr("                  break;\n\n      "..., '\n', 894) = 0x00f0a4a7
[0x4022d1] memchr("\n                /* Look ahead t"..., '\n', 869) = 0x00f0a4a8
[0x4022d1] memchr("                /* Look ahead to"..., '\n', 868) = 0x00f0a4f1
[0x4022d1] memchr("                   was a charact"..., '\n', 795) = 0x00f0a51f
[0x4022d1] memchr("                if (had_char_cla"..., '\n', 749) = 0x00f0a55c
[0x4022d1] memchr("                  return REG_ERA"..., '\n', 688) = 0x00f0a581
[0x4022d1] memchr("\n                /* Look ahead t"..., '\n', 651) = 0x00f0a582
[0x4022d1] memchr("                /* Look ahead to"..., '\n', 650) = 0x00f0a5cb
[0x4022d1] memchr("                   was a charact"..., '\n', 577) = 0x00f0a60e
[0x4022d1] memchr("                   beginning or "..., '\n', 510) = 0x00f0a655
[0x4022d1] memchr("                   operator.  */"..., '\n', 439) = 0x00f0a676
[0x4022d1] memchr("                if (c == '-' \n  "..., '\n', 406) = 0x00f0a694
[0x4022d1] memchr("                    && !(p - 2 >"..., '\n', 376) = 0x00f0a6d0
[0x4022d1] memchr("                    && !(p - 3 >"..., '\n', 316) = 0x00f0a71b
[0x4022d1] memchr("                    && *p != ']'"..., '\n', 241) = 0x00f0a73d
[0x4022d1] memchr("                  {\n            "..., '\n', 207) = 0x00f0a751
[0x4022d1] memchr("                    reg_errcode_"..., '\n', 187) = 0x00f0a777
[0x4022d1] memchr("                      = compile_"..., '\n', 149) = 0x00f0a7bf
[0x4022d1] memchr("                    if (ret != R"..., '\n', 77) = 0x00f0a7f7
[0x4022d1] memchr("                  }\n\n           "..., '\n', 21) = 0x00f0a80b
[0x4022d1] memchr("\n                else if (p[0] ="..., '\n', 1) = 0x00f0a80c
[0x4022d1] memchr("                else if (p[0] =="..., '\n', 0) = NULL
[0x4023cc] fwrite("3068:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                else if (p[0] =="..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  { /* This hand"..., '1', 14232) = 0x00f0a8f4
[0x40cdf3] memchr("1);\n                    \n       "..., '\n', 14054) = 0x00f0a8f7
[0x4022d1] memchr("                  { /* This hand"..., '\n', 147) = 0x00f0a88c
[0x4022d1] memchr("                    reg_errcode_"..., '\n', 72) = 0x00f0a8b3
[0x4022d1] memchr("\n\t\t    /* Move past the `-'.  */"..., '\n', 33) = 0x00f0a8b4
[0x4022d1] memchr("\t\t    /* Move past the `-'.  */\n"..., '\n', 32) = 0x00f0a8d4
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 0) = NULL
[0x4023cc] fwrite("3073:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    PATFETCH (c1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    \n           "..., '1', 14050) = 0x00f0aac1
[0x40cdf3] memchr("1];\n\n                    PATFETC"..., '\n', 13593) = 0x00f0aac4
[0x4022d1] memchr("                    \n           "..., '\n', 404) = 0x00f0a90c
[0x4022d1] memchr("                    ret = compil"..., '\n', 383) = 0x00f0a956
[0x4022d1] memchr("                    if (ret != R"..., '\n', 309) = 0x00f0a98e
[0x4022d1] memchr("                  }\n\n           "..., '\n', 253) = 0x00f0a9a2
[0x4022d1] memchr("\n                /* See if we're"..., '\n', 233) = 0x00f0a9a3
[0x4022d1] memchr("                /* See if we're "..., '\n', 232) = 0x00f0a9ec
[0x4022d1] memchr("                   class.  */\n\n "..., '\n', 159) = 0x00f0aa0a
[0x4022d1] memchr("\n                else if (syntax"..., '\n', 129) = 0x00f0aa0b
[0x4022d1] memchr("                else if (syntax "..., '\n', 128) = 0x00f0aa57
[0x4022d1] memchr("                  { /* Leave roo"..., '\n', 52) = 0x00f0aa8b
[0x4022d1] memchr("                    char str[CHA"..., '\n', 0) = NULL
[0x4023cc] fwrite("3084:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    char str[CHA"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                    PATFETCH (c"..., '1', 13589) = 0x00f0aafd
[0x40cdf3] memchr("1 = 0;\n\n                    /* I"..., '\n', 13533) = 0x00f0ab03
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 35) = 0x00f0aac5
[0x4022d1] memchr("                    PATFETCH (c)"..., '\n', 34) = 0x00f0aae7
[0x4022d1] memchr("                    c1 = 0;\n\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("3087:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    c1 = 0;\n\n   "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                    /* If patte"..., '1', 13526) = 0x00f0ac25
[0x40cdf3] memchr("1 == CHAR_CLASS_MAX_LENGTH)\n    "..., '\n', 13237) = 0x00f0ac40
[0x4022d1] memchr("\n                    /* If patte"..., '\n', 257) = 0x00f0ab04
[0x4022d1] memchr("                    /* If patter"..., '\n', 256) = 0x00f0ab34
[0x4022d1] memchr("                    if (p == pen"..., '\n', 208) = 0x00f0ab6a
[0x4022d1] memchr("\n                    for (;;)\n  "..., '\n', 154) = 0x00f0ab6b
[0x4022d1] memchr("                    for (;;)\n   "..., '\n', 153) = 0x00f0ab88
[0x4022d1] memchr("                      {\n        "..., '\n', 124) = 0x00f0aba0
[0x4022d1] memchr("                        PATFETCH"..., '\n', 100) = 0x00f0abc6
[0x4022d1] memchr("                        if (c =="..., '\n', 62) = 0x00f0ac04
[0x4022d1] memchr("                            || c"..., '\n', 0) = NULL
[0x4023cc] fwrite("3096:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                            || c"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                          break;"..., '1', 13209) = 0x00f0ac7f
[0x40cdf3] memchr("1++] = c;\n                      "..., '\n', 13147) = 0x00f0ac88
[0x4022d1] memchr("                          break;"..., '\n', 33) = 0x00f0ac61
[0x4022d1] memchr("                        str[c1++"..., '\n', 0) = NULL
[0x4023cc] fwrite("3098:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                        str[c1++"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      }\n        "..., '1', 13137) = 0x00f0acba
[0x40cdf3] memchr("1] = '\\0';\n\n                    "..., '\n', 13088) = 0x00f0acc4
[0x4022d1] memchr("                      }\n        "..., '\n', 24) = 0x00f0aca0
[0x4022d1] memchr("                    str[c1] = '\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("3100:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    str[c1] = '\\"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                    /* If isn't"..., '1', 13077) = 0x00f0b271
[0x40cdf3] memchr("1 << BYTEWIDTH; ch++)\n          "..., '\n', 11625) = 0x00f0b286
[0x4022d1] memchr("\n                    /* If isn't"..., '\n', 1410) = 0x00f0acc5
[0x4022d1] memchr("                    /* If isn't "..., '\n', 1409) = 0x00f0ad07
[0x4022d1] memchr("                       undo the "..., '\n', 1343) = 0x00f0ad51
[0x4022d1] memchr("                       the leadi"..., '\n', 1269) = 0x00f0ad9d
[0x4022d1] memchr("                    if (c == ':'"..., '\n', 1193) = 0x00f0adcc
[0x4022d1] memchr("                      {\n        "..., '\n', 1146) = 0x00f0ade4
[0x4022d1] memchr("                        int ch;\n"..., '\n', 1122) = 0x00f0ae04
[0x4022d1] memchr("                        boolean "..., '\n', 1090) = 0x00f0ae45
[0x4022d1] memchr("                        boolean "..., '\n', 1025) = 0x00f0ae86
[0x4022d1] memchr("                        boolean "..., '\n', 960) = 0x00f0aec7
[0x4022d1] memchr("                        boolean "..., '\n', 895) = 0x00f0af08
[0x4022d1] memchr("                        boolean "..., '\n', 830) = 0x00f0af49
[0x4022d1] memchr("                        boolean "..., '\n', 765) = 0x00f0af8a
[0x4022d1] memchr("                        boolean "..., '\n', 700) = 0x00f0afcb
[0x4022d1] memchr("                        boolean "..., '\n', 635) = 0x00f0b00c
[0x4022d1] memchr("                        boolean "..., '\n', 570) = 0x00f0b04d
[0x4022d1] memchr("                        boolean "..., '\n', 505) = 0x00f0b08e
[0x4022d1] memchr("                        boolean "..., '\n', 440) = 0x00f0b0cf
[0x4022d1] memchr("                        boolean "..., '\n', 375) = 0x00f0b112
[0x4022d1] memchr("                        \n       "..., '\n', 308) = 0x00f0b12b
[0x4022d1] memchr("                        if (!IS_"..., '\n', 283) = 0x00f0b170
[0x4022d1] memchr("\n                        /* Thro"..., '\n', 214) = 0x00f0b171
[0x4022d1] memchr("                        /* Throw"..., '\n', 213) = 0x00f0b1b9
[0x4022d1] memchr("                           class"..., '\n', 141) = 0x00f0b1df
[0x4022d1] memchr("                        PATFETCH"..., '\n', 103) = 0x00f0b20a
[0x4022d1] memchr("\n                        if (p ="..., '\n', 60) = 0x00f0b20b
[0x4022d1] memchr("                        if (p =="..., '\n', 59) = 0x00f0b245
[0x4022d1] memchr("\n                        for (ch"..., '\n', 1) = 0x00f0b246
[0x4022d1] memchr("                        for (ch "..., '\n', 0) = NULL
[0x4023cc] fwrite("3129:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                        for (ch "..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                          {\n    "..., '1', 11603) = 0x00f0b675
[0x40cdf3] memchr("1++;\n                        whi"..., '\n', 10597) = 0x00f0b679
[0x4022d1] memchr("                          {\n    "..., '\n', 981) = 0x00f0b2a2
[0x4022d1] memchr("                            if ("..., '\n', 953) = 0x00f0b2e1
[0x4022d1] memchr("                                "..., '\n', 890) = 0x00f0b320
[0x4022d1] memchr("                                "..., '\n', 827) = 0x00f0b35f
[0x4022d1] memchr("                                "..., '\n', 764) = 0x00f0b39e
[0x4022d1] memchr("                                "..., '\n', 701) = 0x00f0b3dd
[0x4022d1] memchr("                                "..., '\n', 638) = 0x00f0b41c
[0x4022d1] memchr("                                "..., '\n', 575) = 0x00f0b45b
[0x4022d1] memchr("                                "..., '\n', 512) = 0x00f0b49a
[0x4022d1] memchr("                                "..., '\n', 449) = 0x00f0b4d9
[0x4022d1] memchr("                                "..., '\n', 386) = 0x00f0b518
[0x4022d1] memchr("                                "..., '\n', 323) = 0x00f0b557
[0x4022d1] memchr("                                "..., '\n', 260) = 0x00f0b598
[0x4022d1] memchr("                            SET_"..., '\n', 195) = 0x00f0b5c7
[0x4022d1] memchr("                          }\n    "..., '\n', 148) = 0x00f0b5e3
[0x4022d1] memchr("                        had_char"..., '\n', 120) = 0x00f0b612
[0x4022d1] memchr("                      }\n        "..., '\n', 73) = 0x00f0b62a
[0x4022d1] memchr("                    else\n       "..., '\n', 49) = 0x00f0b643
[0x4022d1] memchr("                      {\n        "..., '\n', 24) = 0x00f0b65b
[0x4022d1] memchr("                        c1++;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("3149:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                        c1++;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                        while (c"..., '1', 10592) = 0x00f0b69a
[0x40cdf3] memchr("1--)    \n                       "..., '\n', 10560) = 0x00f0b6a2
[0x4022d1] memchr("                        while (c"..., '\n', 0) = NULL
[0x4023cc] fwrite("3150:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                        while (c"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                          PATUNF"..., '1', 10551) = 0x00f0b8c9
[0x40cdf3] memchr("1] > 0 && b[b[-1] - 1] == 0) \n  "..., '\n', 10001) = 0x00f0b8e6
[0x4022d1] memchr("                          PATUNF"..., '\n', 522) = 0x00f0b6c8
[0x4022d1] memchr("                        SET_LIST"..., '\n', 484) = 0x00f0b6f4
[0x4022d1] memchr("                        SET_LIST"..., '\n', 440) = 0x00f0b720
[0x4022d1] memchr("                        had_char"..., '\n', 396) = 0x00f0b750
[0x4022d1] memchr("                      }\n        "..., '\n', 348) = 0x00f0b768
[0x4022d1] memchr("                  }\n            "..., '\n', 324) = 0x00f0b77c
[0x4022d1] memchr("                else\n           "..., '\n', 304) = 0x00f0b791
[0x4022d1] memchr("                  {\n            "..., '\n', 283) = 0x00f0b7a5
[0x4022d1] memchr("                    had_char_cla"..., '\n', 263) = 0x00f0b7d1
[0x4022d1] memchr("                    SET_LIST_BIT"..., '\n', 219) = 0x00f0b7f7
[0x4022d1] memchr("                  }\n            "..., '\n', 181) = 0x00f0b80b
[0x4022d1] memchr("              }\n\n            /* "..., '\n', 161) = 0x00f0b81b
[0x4022d1] memchr("\n            /* Discard any (non"..., '\n', 145) = 0x00f0b81c
[0x4022d1] memchr("            /* Discard any (non)"..., '\n', 144) = 0x00f0b866
[0x4022d1] memchr("               end of the map.  "..., '\n', 70) = 0x00f0b8ac
[0x4022d1] memchr("            while ((int) b[-1] >"..., '\n', 0) = NULL
[0x4023cc] fwrite("3166:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            while ((int) b[-1] >"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              b[-1]--; \n        "..., '1', 9971) = 0x00f0b8f8
[0x40cdf3] memchr("1]--; \n            b += b[-1];\n "..., '\n', 9954) = 0x00f0b8fe
[0x4022d1] memchr("              b[-1]--; \n        "..., '\n', 0) = NULL
[0x4023cc] fwrite("3167:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              b[-1]--; \n        "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            b += b[-1];\n        "..., '1', 9947) = 0x00f0b913
[0x40cdf3] memchr("1];\n          }\n          break;"..., '\n', 9927) = 0x00f0b916
[0x4022d1] memchr("            b += b[-1];\n        "..., '\n', 0) = NULL
[0x4023cc] fwrite("3168:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            b += b[-1];\n        "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          }\n          break;\n\n\n\t"..., '1', 9923) = 0x00f0be5d
[0x40cdf3] memchr("1,\n                            c"..., '\n', 8573) = 0x00f0be5f
[0x4022d1] memchr("          }\n          break;\n\n\n\t"..., '\n', 1279) = 0x00f0b922
[0x4022d1] memchr("          break;\n\n\n\tcase '(':\n  "..., '\n', 1267) = 0x00f0b933
[0x4022d1] memchr("\n\n\tcase '(':\n          if (synta"..., '\n', 1250) = 0x00f0b934
[0x4022d1] memchr("\n\tcase '(':\n          if (syntax"..., '\n', 1249) = 0x00f0b935
[0x4022d1] memchr("\tcase '(':\n          if (syntax "..., '\n', 1248) = 0x00f0b940
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 1237) = 0x00f0b968
[0x4022d1] memchr("            goto handle_open;\n  "..., '\n', 1197) = 0x00f0b986
[0x4022d1] memchr("          else\n            goto "..., '\n', 1167) = 0x00f0b995
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 1152) = 0x00f0b9b3
[0x4022d1] memchr("\n\n        case ')':\n          if"..., '\n', 1122) = 0x00f0b9b4
[0x4022d1] memchr("\n        case ')':\n          if "..., '\n', 1121) = 0x00f0b9b5
[0x4022d1] memchr("        case ')':\n          if ("..., '\n', 1120) = 0x00f0b9c7
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 1102) = 0x00f0b9ef
[0x4022d1] memchr("            goto handle_close;\n "..., '\n', 1062) = 0x00f0ba0e
[0x4022d1] memchr("          else\n            goto "..., '\n', 1031) = 0x00f0ba1d
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 1016) = 0x00f0ba3b
[0x4022d1] memchr("\n\n        case '\\n':\n          i"..., '\n', 986) = 0x00f0ba3c
[0x4022d1] memchr("\n        case '\\n':\n          if"..., '\n', 985) = 0x00f0ba3d
[0x4022d1] memchr("        case '\\n':\n          if "..., '\n', 984) = 0x00f0ba50
[0x4022d1] memchr("          if (syntax & RE_NEWLIN"..., '\n', 965) = 0x00f0ba77
[0x4022d1] memchr("            goto handle_alt;\n   "..., '\n', 926) = 0x00f0ba94
[0x4022d1] memchr("          else\n            goto "..., '\n', 897) = 0x00f0baa3
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 882) = 0x00f0bac1
[0x4022d1] memchr("\n\n\tcase '|':\n          if (synta"..., '\n', 852) = 0x00f0bac2
[0x4022d1] memchr("\n\tcase '|':\n          if (syntax"..., '\n', 851) = 0x00f0bac3
[0x4022d1] memchr("\tcase '|':\n          if (syntax "..., '\n', 850) = 0x00f0bace
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 839) = 0x00f0baf4
[0x4022d1] memchr("            goto handle_alt;\n   "..., '\n', 801) = 0x00f0bb11
[0x4022d1] memchr("          else\n            goto "..., '\n', 772) = 0x00f0bb20
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 757) = 0x00f0bb3e
[0x4022d1] memchr("\n\n        case '{':\n           i"..., '\n', 727) = 0x00f0bb3f
[0x4022d1] memchr("\n        case '{':\n           if"..., '\n', 726) = 0x00f0bb40
[0x4022d1] memchr("        case '{':\n           if "..., '\n', 725) = 0x00f0bb52
[0x4022d1] memchr("           if (syntax & RE_INTER"..., '\n', 707) = 0x00f0bb94
[0x4022d1] memchr("             goto handle_interva"..., '\n', 641) = 0x00f0bbb7
[0x4022d1] memchr("           else\n             got"..., '\n', 606) = 0x00f0bbc7
[0x4022d1] memchr("             goto normal_char;\n\n"..., '\n', 590) = 0x00f0bbe6
[0x4022d1] memchr("\n\n        case '\\\\':\n          i"..., '\n', 559) = 0x00f0bbe7
[0x4022d1] memchr("\n        case '\\\\':\n          if"..., '\n', 558) = 0x00f0bbe8
[0x4022d1] memchr("        case '\\\\':\n          if "..., '\n', 557) = 0x00f0bbfb
[0x4022d1] memchr("          if (p == pend) return "..., '\n', 538) = 0x00f0bc28
[0x4022d1] memchr("\n          /* Do not translate t"..., '\n', 493) = 0x00f0bc29
[0x4022d1] memchr("          /* Do not translate th"..., '\n', 492) = 0x00f0bc71
[0x4022d1] memchr("             distinguish, e.g., "..., '\n', 420) = 0x00f0bcb7
[0x4022d1] memchr("             translate, e.g., B "..., '\n', 350) = 0x00f0bce1
[0x4022d1] memchr("          PATFETCH_RAW (c);\n\n   "..., '\n', 308) = 0x00f0bcfd
[0x4022d1] memchr("\n          switch (c)\n          "..., '\n', 280) = 0x00f0bcfe
[0x4022d1] memchr("          switch (c)\n           "..., '\n', 279) = 0x00f0bd13
[0x4022d1] memchr("            {\n            case '"..., '\n', 258) = 0x00f0bd21
[0x4022d1] memchr("            case '(':\n          "..., '\n', 244) = 0x00f0bd37
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 222) = 0x00f0bd63
[0x4022d1] memchr("                goto normal_back"..., '\n', 178) = 0x00f0bd8a
[0x4022d1] memchr("\n            handle_open:\n      "..., '\n', 139) = 0x00f0bd8b
[0x4022d1] memchr("            handle_open:\n       "..., '\n', 138) = 0x00f0bda4
[0x4022d1] memchr("              bufp->re_nsub++;\n "..., '\n', 113) = 0x00f0bdc3
[0x4022d1] memchr("              regnum++;\n\n       "..., '\n', 82) = 0x00f0bddb
[0x4022d1] memchr("\n              if (COMPILE_STACK"..., '\n', 58) = 0x00f0bddc
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 57) = 0x00f0be02
[0x4022d1] memchr("                { \n             "..., '\n', 19) = 0x00f0be15
[0x4022d1] memchr("                  RETALLOC (comp"..., '\n', 0) = NULL
[0x4023cc] fwrite("3228:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  RETALLOC (comp"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                            comp"..., '1', 8570) = 0x00f0bf02
[0x40cdf3] memchr("1;\n                }\n\n          "..., '\n', 8408) = 0x00f0bf04
[0x4022d1] memchr("                            comp"..., '\n', 121) = 0x00f0be91
[0x4022d1] memchr("                  if (compile_st"..., '\n', 71) = 0x00f0bed7
[0x4022d1] memchr("\n                  compile_stack"..., '\n', 1) = 0x00f0bed8
[0x4022d1] memchr("                  compile_stack."..., '\n', 0) = NULL
[0x4023cc] fwrite("3232:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  compile_stack."..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                }\n\n             "..., '1', 8405) = 0x00f0c0ca
[0x40cdf3] memchr("1 : 0;\n              COMPILE_STA"..., '\n', 7952) = 0x00f0c0d0
[0x4022d1] memchr("                }\n\n             "..., '\n', 386) = 0x00f0bf16
[0x4022d1] memchr("\n              /* These are the "..., '\n', 368) = 0x00f0bf17
[0x4022d1] memchr("              /* These are the v"..., '\n', 367) = 0x00f0bf60
[0x4022d1] memchr("                 group.  They ar"..., '\n', 294) = 0x00f0bfa7
[0x4022d1] memchr("                 whole pattern m"..., '\n', 223) = 0x00f0bff0
[0x4022d1] memchr("                 be valid.  */\n "..., '\n', 150) = 0x00f0c00f
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 119) = 0x00f0c056
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 48) = 0x00f0c086
[0x4022d1] memchr("                = fixup_alt_jump"..., '\n', 0) = NULL
[0x4023cc] fwrite("3241:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                = fixup_alt_jump"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              COMPILE_STACK_TOP."..., '1', 7945) = 0x00f0c7e5
[0x40cdf3] memchr("1);\n                }\n\n         "..., '\n', 6133) = 0x00f0c7e8
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 1747) = 0x00f0c115
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 1678) = 0x00f0c146
[0x4022d1] memchr("\n              /* We will eventu"..., '\n', 1629) = 0x00f0c147
[0x4022d1] memchr("              /* We will eventua"..., '\n', 1628) = 0x00f0c18c
[0x4022d1] memchr("                 groups inner to"..., '\n', 1559) = 0x00f0c1ca
[0x4022d1] memchr("                 start_memory fo"..., '\n', 1497) = 0x00f0c20e
[0x4022d1] memchr("                 represent in th"..., '\n', 1429) = 0x00f0c246
[0x4022d1] memchr("              if (regnum <= MAX_"..., '\n', 1373) = 0x00f0c26e
[0x4022d1] memchr("                {\n              "..., '\n', 1333) = 0x00f0c280
[0x4022d1] memchr("                  COMPILE_STACK_"..., '\n', 1315) = 0x00f0c2cf
[0x4022d1] memchr("                  BUF_PUSH_3 (st"..., '\n', 1236) = 0x00f0c307
[0x4022d1] memchr("                }\n              "..., '\n', 1180) = 0x00f0c319
[0x4022d1] memchr("                \n              c"..., '\n', 1162) = 0x00f0c32a
[0x4022d1] memchr("              compile_stack.avai"..., '\n', 1145) = 0x00f0c34f
[0x4022d1] memchr("\n              fixup_alt_jump = "..., '\n', 1108) = 0x00f0c350
[0x4022d1] memchr("              fixup_alt_jump = 0"..., '\n', 1107) = 0x00f0c372
[0x4022d1] memchr("              laststart = 0;\n   "..., '\n', 1073) = 0x00f0c38f
[0x4022d1] memchr("              begalt = b;\n\t     "..., '\n', 1044) = 0x00f0c3a9
[0x4022d1] memchr("\t      /* If we've reached MAX_R"..., '\n', 1018) = 0x00f0c3e6
[0x4022d1] memchr("\t\t won't actually generate any c"..., '\n', 957) = 0x00f0c41c
[0x4022d1] memchr("\t\t clear pending_exact explicitl"..., '\n', 903) = 0x00f0c443
[0x4022d1] memchr("\t      pending_exact = 0;\n      "..., '\n', 864) = 0x00f0c45d
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 838) = 0x00f0c472
[0x4022d1] memchr("\n\n            case ')':\n        "..., '\n', 817) = 0x00f0c473
[0x4022d1] memchr("\n            case ')':\n         "..., '\n', 816) = 0x00f0c474
[0x4022d1] memchr("            case ')':\n          "..., '\n', 815) = 0x00f0c48a
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 793) = 0x00f0c4cd
[0x4022d1] memchr("\n              if (COMPILE_STACK"..., '\n', 726) = 0x00f0c4ce
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 725) = 0x00f0c4f5
[0x4022d1] memchr("                if (syntax & RE_"..., '\n', 686) = 0x00f0c530
[0x4022d1] memchr("                  goto normal_ba"..., '\n', 627) = 0x00f0c559
[0x4022d1] memchr("                else\n           "..., '\n', 586) = 0x00f0c56e
[0x4022d1] memchr("                  return REG_ERP"..., '\n', 565) = 0x00f0c594
[0x4022d1] memchr("\n            handle_close:\n     "..., '\n', 527) = 0x00f0c595
[0x4022d1] memchr("            handle_close:\n      "..., '\n', 526) = 0x00f0c5af
[0x4022d1] memchr("              if (fixup_alt_jump"..., '\n', 500) = 0x00f0c5d1
[0x4022d1] memchr("                { /* Push a dumm"..., '\n', 466) = 0x00f0c613
[0x4022d1] memchr("                     alternative"..., '\n', 400) = 0x00f0c64a
[0x4022d1] memchr("                     `pop_failur"..., '\n', 345) = 0x00f0c68b
[0x4022d1] memchr("                     `push_dummy"..., '\n', 280) = 0x00f0c6ca
[0x4022d1] memchr("                  BUF_PUSH (push"..., '\n', 217) = 0x00f0c6fb
[0x4022d1] memchr("                  \n             "..., '\n', 168) = 0x00f0c70e
[0x4022d1] memchr("                  /* We allocate"..., '\n', 149) = 0x00f0c755
[0x4022d1] memchr("                     to `fixup_a"..., '\n', 78) = 0x00f0c7a3
[0x4022d1] memchr("                  STORE_JUMP (ju"..., '\n', 0) = NULL
[0x4023cc] fwrite("3286:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  STORE_JUMP (ju"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                }\n\n             "..., '1', 6129) = 0x00f0cbc2
[0x40cdf3] memchr("1 \n                    : 0;\n    "..., '\n', 5144) = 0x00f0cbc4
[0x4022d1] memchr("                }\n\n             "..., '\n', 913) = 0x00f0c7fa
[0x4022d1] memchr("\n              /* See similar co"..., '\n', 895) = 0x00f0c7fb
[0x4022d1] memchr("              /* See similar cod"..., '\n', 894) = 0x00f0c843
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 822) = 0x00f0c86a
[0x4022d1] memchr("                if (syntax & RE_"..., '\n', 783) = 0x00f0c8a5
[0x4022d1] memchr("                  goto normal_ch"..., '\n', 724) = 0x00f0c8c9
[0x4022d1] memchr("                else\n           "..., '\n', 688) = 0x00f0c8de
[0x4022d1] memchr("                  return REG_ERP"..., '\n', 667) = 0x00f0c904
[0x4022d1] memchr("\n              /* Since we just "..., '\n', 629) = 0x00f0c905
[0x4022d1] memchr("              /* Since we just c"..., '\n', 628) = 0x00f0c94b
[0x4022d1] memchr("                 ``can't happen'"..., '\n', 558) = 0x00f0c972
[0x4022d1] memchr("              assert (compile_st"..., '\n', 519) = 0x00f0c9a3
[0x4022d1] memchr("              {\n                "..., '\n', 470) = 0x00f0c9b3
[0x4022d1] memchr("                /* We don't just"..., '\n', 454) = 0x00f0c9fb
[0x4022d1] memchr("                   later groups "..., '\n', 382) = 0x00f0ca42
[0x4022d1] memchr("                   as in `(ab)c("..., '\n', 311) = 0x00f0ca86
[0x4022d1] memchr("                regnum_t this_gr"..., '\n', 243) = 0x00f0cab2
[0x4022d1] memchr("\n                compile_stack.a"..., '\n', 199) = 0x00f0cab3
[0x4022d1] memchr("                compile_stack.av"..., '\n', 198) = 0x00f0cadc
[0x4022d1] memchr("                begalt = bufp->b"..., '\n', 157) = 0x00f0cb25
[0x4022d1] memchr("                fixup_alt_jump\n "..., '\n', 84) = 0x00f0cb44
[0x4022d1] memchr("                  = COMPILE_STAC"..., '\n', 53) = 0x00f0cb79
[0x4022d1] memchr("                    ? bufp->buff"..., '\n', 0) = NULL
[0x4023cc] fwrite("3309:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    ? bufp->buff"..., 1, 75, 0x7fce6d444260) = 75
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    : 0;\n       "..., '1', 5141) = 0x00f0d950
[0x40cdf3] memchr("1, upper_bound = -1;\n\n          "..., '\n', 1674) = 0x00f0d964
[0x4022d1] memchr("                    : 0;\n       "..., '\n', 3432) = 0x00f0cbdd
[0x4022d1] memchr("                laststart = bufp"..., '\n', 3407) = 0x00f0cc2c
[0x4022d1] memchr("                this_group_regnu"..., '\n', 3328) = 0x00f0cc6a
[0x4022d1] memchr("\t\t/* If we've reached MAX_REGNUM"..., '\n', 3266) = 0x00f0cca2
[0x4022d1] memchr("\t\t   won't actually generate any"..., '\n', 3210) = 0x00f0ccda
[0x4022d1] memchr("\t\t   clear pending_exact explici"..., '\n', 3154) = 0x00f0cd03
[0x4022d1] memchr("\t\tpending_exact = 0;\n\n          "..., '\n', 3113) = 0x00f0cd18
[0x4022d1] memchr("\n                /* We're at the"..., '\n', 3092) = 0x00f0cd19
[0x4022d1] memchr("                /* We're at the "..., '\n', 3091) = 0x00f0cd63
[0x4022d1] memchr("                   groups were i"..., '\n', 3017) = 0x00f0cd97
[0x4022d1] memchr("                if (this_group_r"..., '\n', 2965) = 0x00f0cdcc
[0x4022d1] memchr("                  {\n            "..., '\n', 2912) = 0x00f0cde0
[0x4022d1] memchr("                    unsigned cha"..., '\n', 2892) = 0x00f0ce13
[0x4022d1] memchr("                      = bufp->bu"..., '\n', 2841) = 0x00f0ce60
[0x4022d1] memchr("                    \n           "..., '\n', 2764) = 0x00f0ce75
[0x4022d1] memchr("                    *inner_group"..., '\n', 2743) = 0x00f0ceb8
[0x4022d1] memchr("                    BUF_PUSH_3 ("..., '\n', 2676) = 0x00f0cef8
[0x4022d1] memchr("                                "..., '\n', 2612) = 0x00f0cf35
[0x4022d1] memchr("                  }\n            "..., '\n', 2551) = 0x00f0cf49
[0x4022d1] memchr("              }\n              br"..., '\n', 2531) = 0x00f0cf59
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 2515) = 0x00f0cf6e
[0x4022d1] memchr("\n\n            case '|':\t\t\t\t\t/* `"..., '\n', 2494) = 0x00f0cf6f
[0x4022d1] memchr("\n            case '|':\t\t\t\t\t/* `\\"..., '\n', 2493) = 0x00f0cf70
[0x4022d1] memchr("            case '|':\t\t\t\t\t/* `\\|"..., '\n', 2492) = 0x00f0cf97
[0x4022d1] memchr("              if (syntax & RE_LI"..., '\n', 2453) = 0x00f0cfdc
[0x4022d1] memchr("                goto normal_back"..., '\n', 2384) = 0x00f0d003
[0x4022d1] memchr("            handle_alt:\n        "..., '\n', 2345) = 0x00f0d01b
[0x4022d1] memchr("              if (syntax & RE_LI"..., '\n', 2321) = 0x00f0d046
[0x4022d1] memchr("                goto normal_char"..., '\n', 2278) = 0x00f0d068
[0x4022d1] memchr("\n              /* Insert before "..., '\n', 2244) = 0x00f0d069
[0x4022d1] memchr("              /* Insert before t"..., '\n', 2243) = 0x00f0d0ae
[0x4022d1] memchr("                 jumps to this a"..., '\n', 2174) = 0x00f0d0f2
[0x4022d1] memchr("              GET_BUFFER_SPACE ("..., '\n', 2106) = 0x00f0d116
[0x4022d1] memchr("              INSERT_JUMP (on_fa"..., '\n', 2070) = 0x00f0d152
[0x4022d1] memchr("              pending_exact = 0;"..., '\n', 2010) = 0x00f0d173
[0x4022d1] memchr("              b += 3;\n\n         "..., '\n', 1977) = 0x00f0d189
[0x4022d1] memchr("\n              /* The alternativ"..., '\n', 1955) = 0x00f0d18a
[0x4022d1] memchr("              /* The alternative"..., '\n', 1954) = 0x00f0d1cf
[0x4022d1] memchr("                 which gets exec"..., '\n', 1885) = 0x00f0d215
[0x4022d1] memchr("                 jump so it will"..., '\n', 1815) = 0x00f0d25b
[0x4022d1] memchr("                 jump (put in be"..., '\n', 1745) = 0x00f0d2a4
[0x4022d1] memchr("                 (if any) altern"..., '\n', 1672) = 0x00f0d2ed
[0x4022d1] memchr("                 jump jumps to t"..., '\n', 1599) = 0x00f0d337
[0x4022d1] memchr("                          _____ "..., '\n', 1525) = 0x00f0d35e
[0x4022d1] memchr("                          |   | "..., '\n', 1486) = 0x00f0d387
[0x4022d1] memchr("                          |   v "..., '\n', 1445) = 0x00f0d3ae
[0x4022d1] memchr("                         a | b  "..., '\n', 1406) = 0x00f0d3d6
[0x4022d1] memchr("\n                 If we are at `"..., '\n', 1366) = 0x00f0d3d7
[0x4022d1] memchr("                 If we are at `b"..., '\n', 1365) = 0x00f0d424
[0x4022d1] memchr("                 three-byte spac"..., '\n', 1288) = 0x00f0d46d
[0x4022d1] memchr("                 fixup_alt_jump "..., '\n', 1215) = 0x00f0d4b8
[0x4022d1] memchr("                 bytes which we'"..., '\n', 1140) = 0x00f0d501
[0x4022d1] memchr("\n              if (fixup_alt_jum"..., '\n', 1067) = 0x00f0d502
[0x4022d1] memchr("              if (fixup_alt_jump"..., '\n', 1066) = 0x00f0d524
[0x4022d1] memchr("                STORE_JUMP (jump"..., '\n', 1032) = 0x00f0d563
[0x4022d1] memchr("\n              /* Mark and leave"..., '\n', 969) = 0x00f0d564
[0x4022d1] memchr("              /* Mark and leave "..., '\n', 968) = 0x00f0d5ad
[0x4022d1] memchr("                 to be filled in"..., '\n', 895) = 0x00f0d5f2
[0x4022d1] memchr("                 when know we're"..., '\n', 826) = 0x00f0d63f
[0x4022d1] memchr("              fixup_alt_jump = b"..., '\n', 749) = 0x00f0d661
[0x4022d1] memchr("              GET_BUFFER_SPACE ("..., '\n', 715) = 0x00f0d685
[0x4022d1] memchr("              b += 3;\n\n         "..., '\n', 679) = 0x00f0d69b
[0x4022d1] memchr("\n              laststart = 0;\n  "..., '\n', 657) = 0x00f0d69c
[0x4022d1] memchr("              laststart = 0;\n   "..., '\n', 656) = 0x00f0d6b9
[0x4022d1] memchr("              begalt = b;\n      "..., '\n', 627) = 0x00f0d6d3
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 601) = 0x00f0d6e8
[0x4022d1] memchr("\n\n            case '{': \n       "..., '\n', 580) = 0x00f0d6e9
[0x4022d1] memchr("\n            case '{': \n        "..., '\n', 579) = 0x00f0d6ea
[0x4022d1] memchr("            case '{': \n         "..., '\n', 578) = 0x00f0d701
[0x4022d1] memchr("              /* If \\{ is a lite"..., '\n', 555) = 0x00f0d72a
[0x4022d1] memchr("              if (!(syntax & RE_"..., '\n', 514) = 0x00f0d755
[0x4022d1] memchr("                     /* If we're"..., '\n', 471) = 0x00f0d79e
[0x4022d1] memchr("                        operator"..., '\n', 398) = 0x00f0d7c4
[0x4022d1] memchr("                  || ((syntax & "..., '\n', 360) = 0x00f0d811
[0x4022d1] memchr("                  || (p - 2 == p"..., '\n', 283) = 0x00f0d849
[0x4022d1] memchr("                goto normal_back"..., '\n', 227) = 0x00f0d870
[0x4022d1] memchr("\n            handle_interval:\n  "..., '\n', 188) = 0x00f0d871
[0x4022d1] memchr("            handle_interval:\n   "..., '\n', 187) = 0x00f0d88e
[0x4022d1] memchr("              {\n                "..., '\n', 158) = 0x00f0d89e
[0x4022d1] memchr("                /* If got here, "..., '\n', 142) = 0x00f0d8e4
[0x4022d1] memchr("\n                /* At least (mo"..., '\n', 72) = 0x00f0d8e5
[0x4022d1] memchr("                /* At least (mos"..., '\n', 71) = 0x00f0d92c
[0x4022d1] memchr("                int lower_bound "..., '\n', 0) = NULL
[0x4023cc] fwrite("3392:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                int lower_bound "..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                beg_interval = "..., '1', 1653) = 0x00f0d989
[0x40cdf3] memchr("1;\n\n                if (p == pen"..., '\n', 1617) = 0x00f0d98b
[0x4022d1] memchr("\n                beg_interval = "..., '\n', 1) = 0x00f0d965
[0x4022d1] memchr("                beg_interval = p"..., '\n', 0) = NULL
[0x4023cc] fwrite("3394:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                beg_interval = p"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                if (p == pend)\n"..., '1', 1614) = 0x00f0dba7
[0x40cdf3] memchr("1}' => match exactly once. */\n  "..., '\n', 1075) = 0x00f0dbc4
[0x4022d1] memchr("\n                if (p == pend)\n"..., '\n', 499) = 0x00f0d98c
[0x4022d1] memchr("                if (p == pend)\n "..., '\n', 498) = 0x00f0d9ab
[0x4022d1] memchr("                  {\n            "..., '\n', 467) = 0x00f0d9bf
[0x4022d1] memchr("                    if (syntax &"..., '\n', 447) = 0x00f0d9f1
[0x4022d1] memchr("                      goto unfet"..., '\n', 397) = 0x00f0da1e
[0x4022d1] memchr("                    else\n       "..., '\n', 352) = 0x00f0da37
[0x4022d1] memchr("                      return REG"..., '\n', 327) = 0x00f0da60
[0x4022d1] memchr("                  }\n\n           "..., '\n', 286) = 0x00f0da74
[0x4022d1] memchr("\n                GET_UNSIGNED_NU"..., '\n', 266) = 0x00f0da75
[0x4022d1] memchr("                GET_UNSIGNED_NUM"..., '\n', 265) = 0x00f0daa8
[0x4022d1] memchr("\n                if (c == ',')\n "..., '\n', 214) = 0x00f0daa9
[0x4022d1] memchr("                if (c == ',')\n  "..., '\n', 213) = 0x00f0dac7
[0x4022d1] memchr("                  {\n            "..., '\n', 183) = 0x00f0dadb
[0x4022d1] memchr("                    GET_UNSIGNED"..., '\n', 163) = 0x00f0db12
[0x4022d1] memchr("                    if (upper_bo"..., '\n', 108) = 0x00f0db55
[0x4022d1] memchr("                  }\n            "..., '\n', 41) = 0x00f0db69
[0x4022d1] memchr("                else\n           "..., '\n', 21) = 0x00f0db7e
[0x4022d1] memchr("                  /* Interval su"..., '\n', 0) = NULL
[0x4023cc] fwrite("3412:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  /* Interval su"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  upper_bound = "..., '1', 1045) = NULL
[0x4022d1] memchr("                  upper_bound = "..., '\n', 1045) = 0x00f0dbf1
[0x4022d1] memchr("\n                if (lower_bound"..., '\n', 1000) = 0x00f0dbf2
[0x4022d1] memchr("                if (lower_bound "..., '\n', 999) = 0x00f0dc32
[0x4022d1] memchr("                    || lower_bou"..., '\n', 935) = 0x00f0dc64
[0x4022d1] memchr("                  {\n            "..., '\n', 885) = 0x00f0dc78
[0x4022d1] memchr("                    if (syntax &"..., '\n', 865) = 0x00f0dcaa
[0x4022d1] memchr("                      goto unfet"..., '\n', 815) = 0x00f0dcd7
[0x4022d1] memchr("                    else \n      "..., '\n', 770) = 0x00f0dcf1
[0x4022d1] memchr("                      return REG"..., '\n', 744) = 0x00f0dd19
[0x4022d1] memchr("                  }\n\n           "..., '\n', 704) = 0x00f0dd2d
[0x4022d1] memchr("\n                if (!(syntax & "..., '\n', 684) = 0x00f0dd2e
[0x4022d1] memchr("                if (!(syntax & R"..., '\n', 683) = 0x00f0dd60
[0x4022d1] memchr("                  {\n            "..., '\n', 633) = 0x00f0dd74
[0x4022d1] memchr("                    if (c != '\\\\"..., '\n', 613) = 0x00f0ddaa
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 559) = 0x00f0ddab
[0x4022d1] memchr("                    PATFETCH (c)"..., '\n', 558) = 0x00f0ddcd
[0x4022d1] memchr("                  }\n\n           "..., '\n', 524) = 0x00f0dde1
[0x4022d1] memchr("\n                if (c != '}')\n "..., '\n', 504) = 0x00f0dde2
[0x4022d1] memchr("                if (c != '}')\n  "..., '\n', 503) = 0x00f0de00
[0x4022d1] memchr("                  {\n            "..., '\n', 473) = 0x00f0de14
[0x4022d1] memchr("                    if (syntax &"..., '\n', 453) = 0x00f0de46
[0x4022d1] memchr("                      goto unfet"..., '\n', 403) = 0x00f0de73
[0x4022d1] memchr("                    else \n      "..., '\n', 358) = 0x00f0de8d
[0x4022d1] memchr("                      return REG"..., '\n', 332) = 0x00f0deb5
[0x4022d1] memchr("                  }\n\n           "..., '\n', 292) = 0x00f0dec9
[0x4022d1] memchr("\n                /* We just pars"..., '\n', 272) = 0x00f0deca
[0x4022d1] memchr("                /* We just parse"..., '\n', 271) = 0x00f0df02
[0x4022d1] memchr("\n                /* If it's inva"..., '\n', 215) = 0x00f0df03
[0x4022d1] memchr("                /* If it's inval"..., '\n', 214) = 0x00f0df43
[0x4022d1] memchr("                if (!laststart)\n"..., '\n', 150) = 0x00f0df63
[0x4022d1] memchr("                  {\n            "..., '\n', 118) = 0x00f0df77
[0x4022d1] memchr("                    if (syntax &"..., '\n', 98) = 0x00f0dfb0
[0x4022d1] memchr("                      return REG"..., '\n', 41) = 0x00f0dfd9
[0x4022d1] memchr("                    else if (syn"..., '\n', 0) = NULL
[0x4020b3] memmove(0xf05fda, 0xf0dfda, 38, 0xf0dfda, 0x7fce6d444260) = 0xf05fda
[0x402213] read(3, "RE_CONTEXT_INDEP_OPS)\n          "..., 32768) = 32768
[0x40bc2b] memchr("                    else if (syn"..., '1', 32802) = 0x00f06452
[0x40cdf3] memchr("1, though.)  */\n                "..., '\n', 31658) = 0x00f06461
[0x4022d1] memchr("                    else if (syn"..., '\n', 1107) = 0x00f06015
[0x4022d1] memchr("                      laststart "..., '\n', 1047) = 0x00f0603a
[0x4022d1] memchr("                    else\n       "..., '\n', 1010) = 0x00f06053
[0x4022d1] memchr("                      goto unfet"..., '\n', 985) = 0x00f06080
[0x4022d1] memchr("                  }\n\n           "..., '\n', 940) = 0x00f06094
[0x4022d1] memchr("\n                /* If the upper"..., '\n', 920) = 0x00f06095
[0x4022d1] memchr("                /* If the upper "..., '\n', 919) = 0x00f060dd
[0x4022d1] memchr("                   all; jump fro"..., '\n', 847) = 0x00f06125
[0x4022d1] memchr("                   the end of th"..., '\n', 775) = 0x00f0616c
[0x4022d1] memchr("                 if (upper_bound"..., '\n', 704) = 0x00f06193
[0x4022d1] memchr("                   {\n           "..., '\n', 665) = 0x00f061a8
[0x4022d1] memchr("                     GET_BUFFER_"..., '\n', 644) = 0x00f061d3
[0x4022d1] memchr("                     INSERT_JUMP"..., '\n', 601) = 0x00f0620e
[0x4022d1] memchr("                     b += 3;\n   "..., '\n', 542) = 0x00f0622b
[0x4022d1] memchr("                   }\n\n          "..., '\n', 513) = 0x00f06240
[0x4022d1] memchr("\n                 /* Otherwise, "..., '\n', 492) = 0x00f06241
[0x4022d1] memchr("                 /* Otherwise, w"..., '\n', 491) = 0x00f06285
[0x4022d1] memchr("                    we're all do"..., '\n', 423) = 0x00f062c5
[0x4022d1] memchr("                      set_number"..., '\n', 359) = 0x00f06304
[0x4022d1] memchr("                      set_number"..., '\n', 296) = 0x00f06348
[0x4022d1] memchr("                      succeed_n "..., '\n', 228) = 0x00f0638b
[0x4022d1] memchr("                      <body of l"..., '\n', 161) = 0x00f063b0
[0x4022d1] memchr("                      jump_n <su"..., '\n', 124) = 0x00f063eb
[0x4022d1] memchr("                    (The upper b"..., '\n', 65) = 0x00f0642c
[0x4022d1] memchr("                    `upper_bound"..., '\n', 0) = NULL
[0x4023cc] fwrite("3470:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    `upper_bound"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 else \n         "..., '1', 31642) = 0x00f064a9
[0x40cdf3] memchr("1, we need to insert\n           "..., '\n', 31571) = 0x00f064bd
[0x4022d1] memchr("                 else \n         "..., '\n', 23) = 0x00f06478
[0x4022d1] memchr("                   { /* If the u"..., '\n', 0) = NULL
[0x4023cc] fwrite("3472:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                   { /* If the u"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                        more at "..., '1', 31550) = 0x00f0651e
[0x40cdf3] memchr("10 + (upper_bound > 1) * 10;\n\n  "..., '\n', 31454) = 0x00f0653a
[0x4022d1] memchr("                        more at "..., '\n', 57) = 0x00f064f6
[0x4022d1] memchr("                     unsigned nb"..., '\n', 0) = NULL
[0x4023cc] fwrite("3474:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                     unsigned nb"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                     GET_BUFFER"..., '1', 31425) = 0x00f0673c
[0x40cdf3] memchr("1) * 5,\n                        "..., '\n', 30912) = 0x00f06743
[0x4022d1] memchr("\n                     GET_BUFFER"..., '\n', 455) = 0x00f0653b
[0x4022d1] memchr("                     GET_BUFFER_"..., '\n', 454) = 0x00f0656b
[0x4022d1] memchr("\n                     /* Initial"..., '\n', 406) = 0x00f0656c
[0x4022d1] memchr("                     /* Initiali"..., '\n', 405) = 0x00f065b4
[0x4022d1] memchr("                        though i"..., '\n', 333) = 0x00f065f9
[0x4022d1] memchr("                        attendan"..., '\n', 264) = 0x00f0663c
[0x4022d1] memchr("                        because "..., '\n', 197) = 0x00f06680
[0x4022d1] memchr("                        Jump to "..., '\n', 129) = 0x00f066c8
[0x4022d1] memchr("                     INSERT_JUMP"..., '\n', 57) = 0x00f06701
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3484:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                                "..., '1', 30904) = 0x00f06933
[0x40cdf3] memchr("1)\n                       { /* M"..., '\n', 30409) = 0x00f06935
[0x4022d1] memchr("                                "..., '\n', 456) = 0x00f06774
[0x4022d1] memchr("                     b += 5;\n\n  "..., '\n', 407) = 0x00f06791
[0x4022d1] memchr("\n                     /* Code to"..., '\n', 378) = 0x00f06792
[0x4022d1] memchr("                     /* Code to "..., '\n', 377) = 0x00f067d7
[0x4022d1] memchr("                        before t"..., '\n', 308) = 0x00f06820
[0x4022d1] memchr("                        bytes of"..., '\n', 235) = 0x00f06867
[0x4022d1] memchr("                        the foll"..., '\n', 164) = 0x00f0689e
[0x4022d1] memchr("                     insert_op2 "..., '\n', 109) = 0x00f068ed
[0x4022d1] memchr("                     b += 5;\n\n  "..., '\n', 30) = 0x00f0690a
[0x4022d1] memchr("\n                     if (upper_"..., '\n', 1) = 0x00f0690b
[0x4022d1] memchr("                     if (upper_b"..., '\n', 0) = NULL
[0x4023cc] fwrite("3495:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                     if (upper_b"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                       { /* More"..., '1', 30406) = 0x00f06ad8
[0x40cdf3] memchr("1' times.  */\n                  "..., '\n', 29988) = 0x00f06ae5
[0x4022d1] memchr("                       { /* More"..., '\n', 360) = 0x00f06979
[0x4022d1] memchr("                            appe"..., '\n', 292) = 0x00f069bf
[0x4022d1] memchr("                            that"..., '\n', 222) = 0x00f069f6
[0x4022d1] memchr("                            \n   "..., '\n', 167) = 0x00f06a13
[0x4022d1] memchr("                            When"..., '\n', 138) = 0x00f06a58
[0x4022d1] memchr("                            we'l"..., '\n', 69) = 0x00f06a9d
[0x4022d1] memchr("                            jump"..., '\n', 0) = NULL
[0x4023cc] fwrite("3502:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                            jump"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                         STORE_J"..., '1', 29974) = 0x00f06b5a
[0x40cdf3] memchr("1);\n                         b +"..., '\n', 29858) = 0x00f06b5d
[0x4022d1] memchr("                         STORE_J"..., '\n', 64) = 0x00f06b25
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3504:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                         b += 5;"..., '1', 29854) = 0x00f06f8e
[0x40cdf3] memchr("1, b);\n                         "..., '\n', 28782) = 0x00f06f94
[0x4022d1] memchr("                         b += 5;"..., '\n', 1021) = 0x00f06b7e
[0x4022d1] memchr("\n                         /* The"..., '\n', 988) = 0x00f06b7f
[0x4022d1] memchr("                         /* The "..., '\n', 987) = 0x00f06bc5
[0x4022d1] memchr("                            para"..., '\n', 917) = 0x00f06c0d
[0x4022d1] memchr("                            an a"..., '\n', 845) = 0x00f06c53
[0x4022d1] memchr("                            the "..., '\n', 775) = 0x00f06c9a
[0x4022d1] memchr("                            `las"..., '\n', 704) = 0x00f06ce2
[0x4022d1] memchr("                            for "..., '\n', 632) = 0x00f06d24
[0x4022d1] memchr("                            inse"..., '\n', 566) = 0x00f06d6c
[0x4022d1] memchr("                            so e"..., '\n', 494) = 0x00f06db0
[0x4022d1] memchr("                            Conc"..., '\n', 426) = 0x00f06df7
[0x4022d1] memchr("                            i.e."..., '\n', 355) = 0x00f06e28
[0x4022d1] memchr("                            \n   "..., '\n', 306) = 0x00f06e45
[0x4022d1] memchr("                            We i"..., '\n', 277) = 0x00f06e8d
[0x4022d1] memchr("                            so t"..., '\n', 205) = 0x00f06ed3
[0x4022d1] memchr("                            rein"..., '\n', 135) = 0x00f06f0c
[0x4022d1] memchr("                         insert_"..., '\n', 78) = 0x00f06f5a
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3522:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                         b += 5;"..., '1', 28775) = 0x00f071f9
[0x40cdf3] memchr("1] == '\\\\')\n                    "..., '\n', 28163) = 0x00f07204
[0x4022d1] memchr("                         b += 5;"..., '\n', 569) = 0x00f06fb5
[0x4022d1] memchr("                       }\n       "..., '\n', 536) = 0x00f06fce
[0x4022d1] memchr("                   }\n           "..., '\n', 511) = 0x00f06fe3
[0x4022d1] memchr("                pending_exact = "..., '\n', 490) = 0x00f07006
[0x4022d1] memchr("                beg_interval = N"..., '\n', 455) = 0x00f0702b
[0x4022d1] memchr("              }\n              br"..., '\n', 418) = 0x00f0703b
[0x4022d1] memchr("              break;\n\n          "..., '\n', 402) = 0x00f07050
[0x4022d1] memchr("\n            unfetch_interval:\n "..., '\n', 381) = 0x00f07051
[0x4022d1] memchr("            unfetch_interval:\n  "..., '\n', 380) = 0x00f0706f
[0x4022d1] memchr("              /* If an invalid i"..., '\n', 350) = 0x00f070be
[0x4022d1] memchr("               assert (beg_inter"..., '\n', 271) = 0x00f070e4
[0x4022d1] memchr("               p = beg_interval;"..., '\n', 233) = 0x00f07105
[0x4022d1] memchr("               beg_interval = NU"..., '\n', 200) = 0x00f07129
[0x4022d1] memchr("\n               /* normal_char a"..., '\n', 164) = 0x00f0712a
[0x4022d1] memchr("               /* normal_char an"..., '\n', 163) = 0x00f0716b
[0x4022d1] memchr("               PATFETCH (c);\t\n\n "..., '\n', 98) = 0x00f07189
[0x4022d1] memchr("\n               if (!(syntax & R"..., '\n', 68) = 0x00f0718a
[0x4022d1] memchr("               if (!(syntax & RE"..., '\n', 67) = 0x00f071ba
[0x4022d1] memchr("                 {\n             "..., '\n', 19) = 0x00f071cd
[0x4022d1] memchr("                   if (p > patte"..., '\n', 0) = NULL
[0x4023cc] fwrite("3542:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                   if (p > patte"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                     goto normal"..., '1', 28151) = 0x00f07766
[0x40cdf3] memchr("1': case '2': case '3': case '4'"..., '\n', 26774) = 0x00f07791
[0x4022d1] memchr("                     goto normal"..., '\n', 1359) = 0x00f07230
[0x4022d1] memchr("                 }\n             "..., '\n', 1315) = 0x00f07243
[0x4022d1] memchr("               goto normal_char;"..., '\n', 1296) = 0x00f07264
[0x4022d1] memchr("\n#ifdef emacs\n            /* The"..., '\n', 1263) = 0x00f07265
[0x4022d1] memchr("#ifdef emacs\n            /* Ther"..., '\n', 1262) = 0x00f07272
[0x4022d1] memchr("            /* There is no way t"..., '\n', 1249) = 0x00f072b9
[0x4022d1] memchr("               operators.  rms s"..., '\n', 1178) = 0x00f072f5
[0x4022d1] memchr("            case '=':\n          "..., '\n', 1118) = 0x00f0730b
[0x4022d1] memchr("              BUF_PUSH (at_dot);"..., '\n', 1096) = 0x00f0732c
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1063) = 0x00f07341
[0x4022d1] memchr("\n            case 's':\t\n        "..., '\n', 1042) = 0x00f07342
[0x4022d1] memchr("            case 's':\t\n         "..., '\n', 1041) = 0x00f07359
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 1018) = 0x00f07376
[0x4022d1] memchr("              PATFETCH (c);\n    "..., '\n', 989) = 0x00f07392
[0x4022d1] memchr("              BUF_PUSH_2 (syntax"..., '\n', 961) = 0x00f073ce
[0x4022d1] memchr("              break;\n\n          "..., '\n', 901) = 0x00f073e3
[0x4022d1] memchr("\n            case 'S':\n         "..., '\n', 880) = 0x00f073e4
[0x4022d1] memchr("            case 'S':\n          "..., '\n', 879) = 0x00f073fa
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 857) = 0x00f07417
[0x4022d1] memchr("              PATFETCH (c);\n    "..., '\n', 828) = 0x00f07433
[0x4022d1] memchr("              BUF_PUSH_2 (notsyn"..., '\n', 800) = 0x00f07472
[0x4022d1] memchr("              break;\n#endif /* e"..., '\n', 737) = 0x00f07487
[0x4022d1] memchr("#endif /* emacs */\n\n\n           "..., '\n', 716) = 0x00f0749a
[0x4022d1] memchr("\n\n            case 'w':\n        "..., '\n', 697) = 0x00f0749b
[0x4022d1] memchr("\n            case 'w':\n         "..., '\n', 696) = 0x00f0749c
[0x4022d1] memchr("            case 'w':\n          "..., '\n', 695) = 0x00f074b2
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 673) = 0x00f074cf
[0x4022d1] memchr("              BUF_PUSH (wordchar"..., '\n', 644) = 0x00f074f2
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 609) = 0x00f07507
[0x4022d1] memchr("\n\n            case 'W':\n        "..., '\n', 588) = 0x00f07508
[0x4022d1] memchr("\n            case 'W':\n         "..., '\n', 587) = 0x00f07509
[0x4022d1] memchr("            case 'W':\n          "..., '\n', 586) = 0x00f0751f
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 564) = 0x00f0753c
[0x4022d1] memchr("              BUF_PUSH (notwordc"..., '\n', 535) = 0x00f07562
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 497) = 0x00f07577
[0x4022d1] memchr("\n\n            case '<':\n        "..., '\n', 476) = 0x00f07578
[0x4022d1] memchr("\n            case '<':\n         "..., '\n', 475) = 0x00f07579
[0x4022d1] memchr("            case '<':\n          "..., '\n', 474) = 0x00f0758f
[0x4022d1] memchr("              BUF_PUSH (wordbeg)"..., '\n', 452) = 0x00f075b1
[0x4022d1] memchr("              break;\n\n          "..., '\n', 418) = 0x00f075c6
[0x4022d1] memchr("\n            case '>':\n         "..., '\n', 397) = 0x00f075c7
[0x4022d1] memchr("            case '>':\n          "..., '\n', 396) = 0x00f075dd
[0x4022d1] memchr("              BUF_PUSH (wordend)"..., '\n', 374) = 0x00f075ff
[0x4022d1] memchr("              break;\n\n          "..., '\n', 340) = 0x00f07614
[0x4022d1] memchr("\n            case 'b':\n         "..., '\n', 319) = 0x00f07615
[0x4022d1] memchr("            case 'b':\n          "..., '\n', 318) = 0x00f0762b
[0x4022d1] memchr("              BUF_PUSH (wordboun"..., '\n', 296) = 0x00f0764f
[0x4022d1] memchr("              break;\n\n          "..., '\n', 260) = 0x00f07664
[0x4022d1] memchr("\n            case 'B':\n         "..., '\n', 239) = 0x00f07665
[0x4022d1] memchr("            case 'B':\n          "..., '\n', 238) = 0x00f0767b
[0x4022d1] memchr("              BUF_PUSH (notwordb"..., '\n', 216) = 0x00f076a2
[0x4022d1] memchr("              break;\n\n          "..., '\n', 177) = 0x00f076b7
[0x4022d1] memchr("\n            case '`':\n         "..., '\n', 156) = 0x00f076b8
[0x4022d1] memchr("            case '`':\n          "..., '\n', 155) = 0x00f076ce
[0x4022d1] memchr("              BUF_PUSH (begbuf);"..., '\n', 133) = 0x00f076ef
[0x4022d1] memchr("              break;\n\n          "..., '\n', 100) = 0x00f07704
[0x4022d1] memchr("\n            case '\\'':\n        "..., '\n', 79) = 0x00f07705
[0x4022d1] memchr("            case '\\'':\n         "..., '\n', 78) = 0x00f0771c
[0x4022d1] memchr("              BUF_PUSH (endbuf);"..., '\n', 55) = 0x00f0773d
[0x4022d1] memchr("              break;\n\n          "..., '\n', 22) = 0x00f07752
[0x4022d1] memchr("\n            case '1': case '2':"..., '\n', 1) = 0x00f07753
[0x4022d1] memchr("            case '1': case '2': "..., '\n', 0) = NULL
[0x4023cc] fwrite("3604:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            case '1': case '2': "..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            case '6': case '7': "..., '1', 26730) = 0x00f07822
[0x40cdf3] memchr("1 = c - '0';\n\n              if ("..., '\n', 26586) = 0x00f0782e
[0x4022d1] memchr("            case '6': case '7': "..., '\n', 129) = 0x00f077c5
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 77) = 0x00f077ef
[0x4022d1] memchr("                goto normal_char"..., '\n', 35) = 0x00f07811
[0x4022d1] memchr("\n              c1 = c - '0';\n\n  "..., '\n', 1) = 0x00f07812
[0x4022d1] memchr("              c1 = c - '0';\n\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("3609:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              c1 = c - '0';\n\n   "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n              if (c1 > regnum)\n"..., '1', 26573) = 0x00f07843
[0x40cdf3] memchr("1 > regnum)\n                retu"..., '\n', 26553) = 0x00f0784e
[0x4022d1] memchr("\n              if (c1 > regnum)\n"..., '\n', 1) = 0x00f0782f
[0x4022d1] memchr("              if (c1 > regnum)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("3611:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              if (c1 > regnum)\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                return REG_ESUBR"..., '1', 26541) = 0x00f078fc
[0x40cdf3] memchr("1))\n                goto normal_"..., '\n', 26368) = 0x00f078ff
[0x4022d1] memchr("                return REG_ESUBR"..., '\n', 115) = 0x00f07872
[0x4022d1] memchr("\n              /* Can't back ref"..., '\n', 79) = 0x00f07873
[0x4022d1] memchr("              /* Can't back refe"..., '\n', 78) = 0x00f078c1
[0x4022d1] memchr("              if (group_in_compi"..., '\n', 0) = NULL
[0x4023cc] fwrite("3615:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              if (group_in_compi"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                goto normal_char"..., '1', 26364) = 0x00f07966
[0x40cdf3] memchr("1);\n              break;\n\n\n     "..., '\n', 26262) = 0x00f07969
[0x4022d1] memchr("                goto normal_char"..., '\n', 64) = 0x00f07921
[0x4022d1] memchr("\n              laststart = b;\n  "..., '\n', 30) = 0x00f07922
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 29) = 0x00f0793f
[0x4022d1] memchr("              BUF_PUSH_2 (duplic"..., '\n', 0) = NULL
[0x4023cc] fwrite("3619:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              BUF_PUSH_2 (duplic"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              break;\n\n\n         "..., '1', 26258) = 0x00f07c83
[0x40cdf3] memchr("1 != b\n              \n          "..., '\n', 25465) = 0x00f07c89
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 743) = 0x00f0797e
[0x4022d1] memchr("\n\n            case '+':\n        "..., '\n', 722) = 0x00f0797f
[0x4022d1] memchr("\n            case '+':\n         "..., '\n', 721) = 0x00f07980
[0x4022d1] memchr("            case '+':\n          "..., '\n', 720) = 0x00f07996
[0x4022d1] memchr("            case '?':\n          "..., '\n', 698) = 0x00f079ac
[0x4022d1] memchr("              if (syntax & RE_BK"..., '\n', 676) = 0x00f079d6
[0x4022d1] memchr("                goto handle_plus"..., '\n', 634) = 0x00f079f8
[0x4022d1] memchr("              else\n             "..., '\n', 600) = 0x00f07a0b
[0x4022d1] memchr("                goto normal_back"..., '\n', 581) = 0x00f07a32
[0x4022d1] memchr("\n            default:\n          "..., '\n', 542) = 0x00f07a33
[0x4022d1] memchr("            default:\n           "..., '\n', 541) = 0x00f07a48
[0x4022d1] memchr("            normal_backslash:\n  "..., '\n', 520) = 0x00f07a66
[0x4022d1] memchr("              /* You might think"..., '\n', 490) = 0x00f07aa8
[0x4022d1] memchr("                 not to translat"..., '\n', 424) = 0x00f07ae8
[0x4022d1] memchr("                 it will never m"..., '\n', 360) = 0x00f07b1b
[0x4022d1] memchr("              c = TRANSLATE (c);"..., '\n', 309) = 0x00f07b3c
[0x4022d1] memchr("              goto normal_char;\n"..., '\n', 276) = 0x00f07b5c
[0x4022d1] memchr("            }\n          break;\n\n"..., '\n', 244) = 0x00f07b6a
[0x4022d1] memchr("          break;\n\n\n\tdefault:\n   "..., '\n', 230) = 0x00f07b7b
[0x4022d1] memchr("\n\n\tdefault:\n        /* Expects t"..., '\n', 213) = 0x00f07b7c
[0x4022d1] memchr("\n\tdefault:\n        /* Expects th"..., '\n', 212) = 0x00f07b7d
[0x4022d1] memchr("\tdefault:\n        /* Expects the"..., '\n', 211) = 0x00f07b87
[0x4022d1] memchr("        /* Expects the character"..., '\n', 201) = 0x00f07bb4
[0x4022d1] memchr("\tnormal_char:\n\t      /* If no ex"..., '\n', 156) = 0x00f07bc2
[0x4022d1] memchr("\t      /* If no exactn currently"..., '\n', 142) = 0x00f07bf4
[0x4022d1] memchr("          if (!pending_exact \n\n "..., '\n', 92) = 0x00f07c12
[0x4022d1] memchr("\n              /* If last exactn"..., '\n', 62) = 0x00f07c13
[0x4022d1] memchr("              /* If last exactn "..., '\n', 61) = 0x00f07c50
[0x4022d1] memchr("              || pending_exact +"..., '\n', 0) = NULL
[0x4023cc] fwrite("3648:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              || pending_exact +"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              \n              /* "..., '1', 25458) = 0x00f07d05
[0x40cdf3] memchr("1 << BYTEWIDTH) - 1\n\n           "..., '\n', 25335) = 0x00f07d18
[0x4022d1] memchr("              \n              /* "..., '\n', 94) = 0x00f07c98
[0x4022d1] memchr("              /* We have only on"..., '\n', 79) = 0x00f07ce7
[0x4022d1] memchr("\t      || *pending_exact == (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("3651:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      || *pending_exact == (1 <"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n              /* If followed by"..., '1', 25315) = 0x00f07db8
[0x40cdf3] memchr("1] == '+' || p[1] == '?')\n\t\t  : "..., '\n', 25156) = 0x00f07dd1
[0x4022d1] memchr("\n              /* If followed by"..., '\n', 136) = 0x00f07d19
[0x4022d1] memchr("              /* If followed by "..., '\n', 135) = 0x00f07d54
[0x4022d1] memchr("              || *p == '*' || *p"..., '\n', 76) = 0x00f07d7c
[0x4022d1] memchr("\t      || ((syntax & RE_BK_PLUS_"..., '\n', 36) = 0x00f07da0
[0x4022d1] memchr("\t\t  ? *p == '\\\\' && (p[1] == '+'"..., '\n', 0) = NULL
[0x4023cc] fwrite("3656:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  ? *p == '\\\\' && (p[1] == '+'"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  : (*p == '+' || *p == '?'))\n"..., '1', 25130) = 0x00f07e85
[0x40cdf3] memchr("1] == '{'))))\n\t    {\n\t      /* S"..., '\n', 24951) = 0x00f07e92
[0x4022d1] memchr("\t\t  : (*p == '+' || *p == '?'))\n"..., '\n', 136) = 0x00f07df1
[0x4022d1] memchr("\t      || ((syntax & RE_INTERVAL"..., '\n', 104) = 0x00f07e14
[0x4022d1] memchr("                  && ((syntax & "..., '\n', 69) = 0x00f07e45
[0x4022d1] memchr("\t\t      ? *p == '{'\n            "..., '\n', 20) = 0x00f07e59
[0x4022d1] memchr("                      : (p[0] =="..., '\n', 0) = NULL
[0x4023cc] fwrite("3661:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      : (p[0] =="..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    {\n\t      /* Start building "..., '1', 24937) = 0x00f07f2c
[0x40cdf3] memchr("1;\n            }\n            \n\t "..., '\n', 24784) = 0x00f07f2e
[0x4022d1] memchr("\t    {\n\t      /* Start building "..., '\n', 126) = 0x00f07e99
[0x4022d1] memchr("\t      /* Start building a new e"..., '\n', 119) = 0x00f07ec4
[0x4022d1] memchr("              \n              las"..., '\n', 76) = 0x00f07ed3
[0x4022d1] memchr("              laststart = b;\n\n\t "..., '\n', 61) = 0x00f07ef0
[0x4022d1] memchr("\n\t      BUF_PUSH_2 (exactn, 0);\n"..., '\n', 32) = 0x00f07ef1
[0x4022d1] memchr("\t      BUF_PUSH_2 (exactn, 0);\n\t"..., '\n', 31) = 0x00f07f10
[0x4022d1] memchr("\t      pending_exact = b - 1;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("3668:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      pending_exact = b - 1;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            }\n            \n\t  BU"..., '1', 24781) = 0x00f0810e
[0x40cdf3] memchr("1 ("\\nCompiled pattern: \\n");\n  "..., '\n', 24302) = 0x00f0812b
[0x4022d1] memchr("            }\n            \n\t  BU"..., '\n', 462) = 0x00f07f3c
[0x4022d1] memchr("            \n\t  BUF_PUSH (c);\n  "..., '\n', 448) = 0x00f07f49
[0x4022d1] memchr("\t  BUF_PUSH (c);\n          (*pen"..., '\n', 435) = 0x00f07f5a
[0x4022d1] memchr("          (*pending_exact)++;\n\t "..., '\n', 418) = 0x00f07f78
[0x4022d1] memchr("\t  break;\n        } /* switch (c"..., '\n', 388) = 0x00f07f82
[0x4022d1] memchr("        } /* switch (c) */\n    }"..., '\n', 378) = 0x00f07f9d
[0x4022d1] memchr("    } /* while p != pend */\n\n  \n"..., '\n', 351) = 0x00f07fb9
[0x4022d1] memchr("\n  \n  /* Through the pattern now"..., '\n', 323) = 0x00f07fba
[0x4022d1] memchr("  \n  /* Through the pattern now."..., '\n', 322) = 0x00f07fbd
[0x4022d1] memchr("  /* Through the pattern now.  *"..., '\n', 319) = 0x00f07fdf
[0x4022d1] memchr("  \n  if (fixup_alt_jump)\n    STO"..., '\n', 285) = 0x00f07fe2
[0x4022d1] memchr("  if (fixup_alt_jump)\n    STORE_"..., '\n', 282) = 0x00f07ff8
[0x4022d1] memchr("    STORE_JUMP (jump_past_alt, f"..., '\n', 260) = 0x00f0802b
[0x4022d1] memchr("\n  if (!COMPILE_STACK_EMPTY) \n  "..., '\n', 209) = 0x00f0802c
[0x4022d1] memchr("  if (!COMPILE_STACK_EMPTY) \n   "..., '\n', 208) = 0x00f08049
[0x4022d1] memchr("    return REG_EPAREN;\n\n  free ("..., '\n', 179) = 0x00f08060
[0x4022d1] memchr("\n  free (compile_stack.stack);\n\n"..., '\n', 156) = 0x00f08061
[0x4022d1] memchr("  free (compile_stack.stack);\n\n "..., '\n', 155) = 0x00f0807f
[0x4022d1] memchr("\n  /* We have succeeded; set the"..., '\n', 125) = 0x00f08080
[0x4022d1] memchr("  /* We have succeeded; set the "..., '\n', 124) = 0x00f080ba
[0x4022d1] memchr("  bufp->used = b - bufp->buffer;"..., '\n', 66) = 0x00f080db
[0x4022d1] memchr("\n#ifdef DEBUG\n  if (debug)\n    {"..., '\n', 33) = 0x00f080dc
[0x4022d1] memchr("#ifdef DEBUG\n  if (debug)\n    {\n"..., '\n', 32) = 0x00f080e9
[0x4022d1] memchr("  if (debug)\n    {\n      DEBUG_P"..., '\n', 19) = 0x00f080f6
[0x4022d1] memchr("    {\n      DEBUG_PRINT1 ("\\nCom"..., '\n', 6) = 0x00f080fc
[0x4022d1] memchr("      DEBUG_PRINT1 ("\\nCompiled "..., '\n', 0) = NULL
[0x4023cc] fwrite("3694:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT1 ("\\nCompiled "..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      print_compiled_pattern (bu"..., '1', 24272) = 0x00f0821a
[0x40cdf3] memchr("1 (op, loc, arg)\n    re_opcode_t"..., '\n', 24034) = 0x00f0822a
[0x4022d1] memchr("      print_compiled_pattern (bu"..., '\n', 230) = 0x00f08150
[0x4022d1] memchr("    }\n#endif /* DEBUG */\n\n  retu"..., '\n', 193) = 0x00f08156
[0x4022d1] memchr("#endif /* DEBUG */\n\n  return REG"..., '\n', 187) = 0x00f08169
[0x4022d1] memchr("\n  return REG_NOERROR;\n} /* rege"..., '\n', 168) = 0x00f0816a
[0x4022d1] memchr("  return REG_NOERROR;\n} /* regex"..., '\n', 167) = 0x00f08180
[0x4022d1] memchr("} /* regex_compile */\n\014\n/* Subro"..., '\n', 145) = 0x00f08196
[0x4022d1] memchr("\014\n/* Subroutines for `regex_comp"..., '\n', 123) = 0x00f08198
[0x4022d1] memchr("/* Subroutines for `regex_compil"..., '\n', 121) = 0x00f081c0
[0x4022d1] memchr("\n/* Store OP at LOC followed by "..., '\n', 81) = 0x00f081c1
[0x4022d1] memchr("/* Store OP at LOC followed by t"..., '\n', 80) = 0x00f08204
[0x4022d1] memchr("\nstatic void\nstore_op1 (op, loc,"..., '\n', 13) = 0x00f08205
[0x4022d1] memchr("static void\nstore_op1 (op, loc, "..., '\n', 12) = 0x00f08211
[0x4022d1] memchr("store_op1 (op, loc, arg)\n    re_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3707:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("store_op1 (op, loc, arg)\n    re_"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    re_opcode_t op;\n    unsigned"..., '1', 24017) = 0x00f08299
[0x40cdf3] memchr("1, arg);\n}\n\n\n/* Like `store_op1'"..., '\n', 23907) = 0x00f082a1
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 88) = 0x00f0823e
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 68) = 0x00f08256
[0x4022d1] memchr("    int arg;\n{\n  *loc = (unsigne"..., '\n', 44) = 0x00f08263
[0x4022d1] memchr("{\n  *loc = (unsigned char) op;\n "..., '\n', 31) = 0x00f08265
[0x4022d1] memchr("  *loc = (unsigned char) op;\n  S"..., '\n', 29) = 0x00f08282
[0x4022d1] memchr("  STORE_NUMBER (loc + 1, arg);\n}"..., '\n', 0) = NULL
[0x4023cc] fwrite("3713:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  STORE_NUMBER (loc + 1, arg);\n}"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n\n/* Like `store_op1', but" fo"..., '1', 23898) = 0x00f082b7
[0x40cdf3] memchr("1', but" for 'two two-byte param"..., '\n', 23877) = 0x00f082ef
[0x4022d1] memchr("}\n\n\n/* Like `store_op1', but" fo"..., '\n', 4) = 0x00f082a3
[0x4022d1] memchr("\n\n/* Like `store_op1', but" for "..., '\n', 2) = 0x00f082a4
[0x4022d1] memchr("\n/* Like `store_op1', but" for '"..., '\n', 1) = 0x00f082a5
[0x4022d1] memchr("/* Like `store_op1', but" for 't"..., '\n', 0) = NULL
[0x4023cc] fwrite("3717:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* Like `store_op1', but" for 't"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\nstatic void\nstore_op2 (op, loc,"..., '1', 23820) = 0x00f08314
[0x40cdf3] memchr("1, arg2)\n    re_opcode_t op;\n   "..., '\n', 23784) = 0x00f0831c
[0x4022d1] memchr("\nstatic void\nstore_op2 (op, loc,"..., '\n', 13) = 0x00f082f0
[0x4022d1] memchr("static void\nstore_op2 (op, loc, "..., '\n', 12) = 0x00f082fc
[0x4022d1] memchr("store_op2 (op, loc, arg1, arg2)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("3720:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("store_op2 (op, loc, arg1, arg2)\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    re_opcode_t op;\n    unsigned"..., '1', 23775) = 0x00f08354
[0x40cdf3] memchr("1, arg2;\n{\n  *loc = (unsigned ch"..., '\n', 23720) = 0x00f0835c
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 44) = 0x00f08330
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 24) = 0x00f08348
[0x4022d1] memchr("    int arg1, arg2;\n{\n  *loc = ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3723:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    int arg1, arg2;\n{\n  *loc = ("..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("{\n  *loc = (unsigned char) op;\n "..., '1', 23711) = 0x00f08392
[0x40cdf3] memchr("1, arg1);\n  STORE_NUMBER (loc + "..., '\n', 23658) = 0x00f0839b
[0x4022d1] memchr("{\n  *loc = (unsigned char) op;\n "..., '\n', 31) = 0x00f0835e
[0x4022d1] memchr("  *loc = (unsigned char) op;\n  S"..., '\n', 29) = 0x00f0837b
[0x4022d1] memchr("  STORE_NUMBER (loc + 1, arg1);\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("3726:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  STORE_NUMBER (loc + 1, arg1);\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  STORE_NUMBER (loc + 3, arg2);\n"..., '1', 23648) = 0x00f08459
[0x40cdf3] memchr("1 (op, loc, arg, end)\n    re_opc"..., '\n', 23459) = 0x00f0846e
[0x4022d1] memchr("  STORE_NUMBER (loc + 3, arg2);\n"..., '\n', 180) = 0x00f083bb
[0x4022d1] memchr("}\n\n\n/* Copy the bytes from LOC t"..., '\n', 148) = 0x00f083bd
[0x4022d1] memchr("\n\n/* Copy the bytes from LOC to "..., '\n', 146) = 0x00f083be
[0x4022d1] memchr("\n/* Copy the bytes from LOC to E"..., '\n', 145) = 0x00f083bf
[0x4022d1] memchr("/* Copy the bytes from LOC to EN"..., '\n', 144) = 0x00f08408
[0x4022d1] memchr("   for OP followed by two-byte i"..., '\n', 71) = 0x00f08442
[0x4022d1] memchr("\nstatic void\ninsert_op1 (op, loc"..., '\n', 13) = 0x00f08443
[0x4022d1] memchr("static void\ninsert_op1 (op, loc,"..., '\n', 12) = 0x00f0844f
[0x4022d1] memchr("insert_op1 (op, loc, arg, end)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("3735:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("insert_op1 (op, loc, arg, end)\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    re_opcode_t op;\n    unsigned"..., '1', 23437) = 0x00f08554
[0x40cdf3] memchr("1 (op, loc, arg);\n}\n\n\n/* Like `i"..., '\n', 23208) = 0x00f08565
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 219) = 0x00f08482
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 199) = 0x00f0849a
[0x4022d1] memchr("    int arg;\n    unsigned char *"..., '\n', 175) = 0x00f084a7
[0x4022d1] memchr("    unsigned char *end;    \n{\n  "..., '\n', 162) = 0x00f084c3
[0x4022d1] memchr("{\n  register unsigned char *pfro"..., '\n', 134) = 0x00f084c5
[0x4022d1] memchr("  register unsigned char *pfrom "..., '\n', 132) = 0x00f084ec
[0x4022d1] memchr("  register unsigned char *pto = "..., '\n', 93) = 0x00f08515
[0x4022d1] memchr("\n  while (pfrom != loc)\n    *--p"..., '\n', 52) = 0x00f08516
[0x4022d1] memchr("  while (pfrom != loc)\n    *--pt"..., '\n', 51) = 0x00f0852d
[0x4022d1] memchr("    *--pto = *--pfrom;\n    \n  st"..., '\n', 28) = 0x00f08544
[0x4022d1] memchr("    \n  store_op1 (op, loc, arg);"..., '\n', 5) = 0x00f08549
[0x4022d1] memchr("  store_op1 (op, loc, arg);\n}\n\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("3747:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  store_op1 (op, loc, arg);\n}\n\n\n"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n\n/* Like `insert_op1', but fo"..., '1', 23190) = 0x00f0857c
[0x40cdf3] memchr("1', but for two two-byte paramet"..., '\n', 23168) = 0x00f085b2
[0x4022d1] memchr("}\n\n\n/* Like `insert_op1', but fo"..., '\n', 4) = 0x00f08567
[0x4022d1] memchr("\n\n/* Like `insert_op1', but for "..., '\n', 2) = 0x00f08568
[0x4022d1] memchr("\n/* Like `insert_op1', but for t"..., '\n', 1) = 0x00f08569
[0x4022d1] memchr("/* Like `insert_op1', but for tw"..., '\n', 0) = NULL
[0x4023cc] fwrite("3751:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* Like `insert_op1', but for tw"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\nstatic void\ninsert_op2 (op, loc"..., '1', 23113) = 0x00f085d8
[0x40cdf3] memchr("1, arg2, end)\n    re_opcode_t op"..., '\n', 23076) = 0x00f085e5
[0x4022d1] memchr("\nstatic void\ninsert_op2 (op, loc"..., '\n', 13) = 0x00f085b3
[0x4022d1] memchr("static void\ninsert_op2 (op, loc,"..., '\n', 12) = 0x00f085bf
[0x4022d1] memchr("insert_op2 (op, loc, arg1, arg2,"..., '\n', 0) = NULL
[0x4023cc] fwrite("3754:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("insert_op2 (op, loc, arg1, arg2,"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    re_opcode_t op;\n    unsigned"..., '1', 23062) = 0x00f0861d
[0x40cdf3] memchr("1, arg2;\n    unsigned char *end;"..., '\n', 23007) = 0x00f08625
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 44) = 0x00f085f9
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 24) = 0x00f08611
[0x4022d1] memchr("    int arg1, arg2;\n    unsigned"..., '\n', 0) = NULL
[0x4023cc] fwrite("3757:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    int arg1, arg2;\n    unsigned"..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    unsigned char *end;    \n{\n  "..., '1', 22998) = 0x00f086e1
[0x40cdf3] memchr("1, arg2);\n}\n\n\n/* P points to jus"..., '\n', 22811) = 0x00f086ea
[0x4022d1] memchr("    unsigned char *end;    \n{\n  "..., '\n', 162) = 0x00f08641
[0x4022d1] memchr("{\n  register unsigned char *pfro"..., '\n', 134) = 0x00f08643
[0x4022d1] memchr("  register unsigned char *pfrom "..., '\n', 132) = 0x00f0866a
[0x4022d1] memchr("  register unsigned char *pto = "..., '\n', 93) = 0x00f08693
[0x4022d1] memchr("\n  while (pfrom != loc)\n    *--p"..., '\n', 52) = 0x00f08694
[0x4022d1] memchr("  while (pfrom != loc)\n    *--pt"..., '\n', 51) = 0x00f086ab
[0x4022d1] memchr("    *--pto = *--pfrom;\n    \n  st"..., '\n', 28) = 0x00f086c2
[0x4022d1] memchr("    \n  store_op2 (op, loc, arg1,"..., '\n', 5) = 0x00f086c7
[0x4022d1] memchr("  store_op2 (op, loc, arg1, arg2"..., '\n', 0) = NULL
[0x4023cc] fwrite("3766:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  store_op2 (op, loc, arg1, arg2"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n\n/* P points to just after a "..., '1', 22801) = 0x00f0886a
[0x40cdf3] memchr("1] == '\\\\';\n  \n  return\n       /"..., '\n', 22418) = 0x00f08875
[0x4022d1] memchr("}\n\n\n/* P points to just after a "..., '\n', 327) = 0x00f086ec
[0x4022d1] memchr("\n\n/* P points to just after a ^ "..., '\n', 325) = 0x00f086ed
[0x4022d1] memchr("\n/* P points to just after a ^ i"..., '\n', 324) = 0x00f086ee
[0x4022d1] memchr("/* P points to just after a ^ in"..., '\n', 323) = 0x00f08735
[0x4022d1] memchr("   after an alternative or a beg"..., '\n', 252) = 0x00f0877e
[0x4022d1] memchr("   least one character before th"..., '\n', 179) = 0x00f087a7
[0x4022d1] memchr("\nstatic boolean\nat_begline_loc_p"..., '\n', 138) = 0x00f087a8
[0x4022d1] memchr("static boolean\nat_begline_loc_p "..., '\n', 137) = 0x00f087b7
[0x4022d1] memchr("at_begline_loc_p (pattern, p, sy"..., '\n', 122) = 0x00f087dd
[0x4022d1] memchr("    const char *pattern, *p;\n   "..., '\n', 84) = 0x00f087fa
[0x4022d1] memchr("    reg_syntax_t syntax;\n{\n  con"..., '\n', 55) = 0x00f08813
[0x4022d1] memchr("{\n  const char *prev = p - 2;\n  "..., '\n', 30) = 0x00f08815
[0x4022d1] memchr("  const char *prev = p - 2;\n  bo"..., '\n', 28) = 0x00f08831
[0x4022d1] memchr("  boolean prev_prev_backslash = "..., '\n', 0) = NULL
[0x4023cc] fwrite("3780:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  boolean prev_prev_backslash = "..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  return\n       /* After a su"..., '1', 22406) = 0x00f08aa9
[0x40cdf3] memchr("1 < pend ? p + 1 : NULL;\n  \n  re"..., '\n', 21843) = 0x00f08ac1
[0x4022d1] memchr("  \n  return\n       /* After a su"..., '\n', 533) = 0x00f08878
[0x4022d1] memchr("  return\n       /* After a subex"..., '\n', 530) = 0x00f08881
[0x4022d1] memchr("       /* After a subexpression?"..., '\n', 521) = 0x00f088a6
[0x4022d1] memchr("       (*prev == '(' && (syntax "..., '\n', 484) = 0x00f088f1
[0x4022d1] memchr("       /* After an alternative? "..., '\n', 409) = 0x00f08915
[0x4022d1] memchr("    || (*prev == '|' && (syntax "..., '\n', 373) = 0x00f0895f
[0x4022d1] memchr("}\n\n\n/* The dual of at_begline_lo"..., '\n', 299) = 0x00f08961
[0x4022d1] memchr("\n\n/* The dual of at_begline_loc_"..., '\n', 297) = 0x00f08962
[0x4022d1] memchr("\n/* The dual of at_begline_loc_p"..., '\n', 296) = 0x00f08963
[0x4022d1] memchr("/* The dual of at_begline_loc_p."..., '\n', 295) = 0x00f089ac
[0x4022d1] memchr("   at least one character after "..., '\n', 222) = 0x00f089e9
[0x4022d1] memchr("\nstatic boolean\nat_endline_loc_p"..., '\n', 161) = 0x00f089ea
[0x4022d1] memchr("static boolean\nat_endline_loc_p "..., '\n', 160) = 0x00f089f9
[0x4022d1] memchr("at_endline_loc_p (p, pend, synta"..., '\n', 145) = 0x00f08a1c
[0x4022d1] memchr("    const char *p, *pend;\n    in"..., '\n', 110) = 0x00f08a36
[0x4022d1] memchr("    int syntax;\n{\n  const char *"..., '\n', 84) = 0x00f08a46
[0x4022d1] memchr("{\n  const char *next = p;\n  bool"..., '\n', 68) = 0x00f08a48
[0x4022d1] memchr("  const char *next = p;\n  boolea"..., '\n', 66) = 0x00f08a60
[0x4022d1] memchr("  boolean next_backslash = *next"..., '\n', 42) = 0x00f08a8a
[0x4022d1] memchr("  const char *next_next = p + 1 "..., '\n', 0) = NULL
[0x4023cc] fwrite("3800:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  const char *next_next = p + 1 "..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  return\n       /* Before a s"..., '1', 21818) = 0x00f08d10
[0x40cdf3] memchr("1;  \n       this_element >= 0; \n"..., '\n', 21228) = 0x00f08d14
[0x4022d1] memchr("  \n  return\n       /* Before a s"..., '\n', 546) = 0x00f08ac4
[0x4022d1] memchr("  return\n       /* Before a sube"..., '\n', 543) = 0x00f08acd
[0x4022d1] memchr("       /* Before a subexpression"..., '\n', 534) = 0x00f08af3
[0x4022d1] memchr("       (syntax & RE_NO_BK_PARENS"..., '\n', 496) = 0x00f08b23
[0x4022d1] memchr("        : next_backslash && next"..., '\n', 448) = 0x00f08b5f
[0x4022d1] memchr("       /* Before an alternative?"..., '\n', 388) = 0x00f08b84
[0x4022d1] memchr("    || (syntax & RE_NO_BK_VBAR ?"..., '\n', 351) = 0x00f08bb2
[0x4022d1] memchr("        : next_backslash && next"..., '\n', 305) = 0x00f08bef
[0x4022d1] memchr("}\n\n\n/* Returns true if REGNUM is"..., '\n', 244) = 0x00f08bf1
[0x4022d1] memchr("\n\n/* Returns true if REGNUM is i"..., '\n', 242) = 0x00f08bf2
[0x4022d1] memchr("\n/* Returns true if REGNUM is in"..., '\n', 241) = 0x00f08bf3
[0x4022d1] memchr("/* Returns true if REGNUM is in "..., '\n', 240) = 0x00f08c38
[0x4022d1] memchr("   false if it's not.  */\n\nstati"..., '\n', 171) = 0x00f08c52
[0x4022d1] memchr("\nstatic boolean\ngroup_in_compile"..., '\n', 145) = 0x00f08c53
[0x4022d1] memchr("static boolean\ngroup_in_compile_"..., '\n', 144) = 0x00f08c62
[0x4022d1] memchr("group_in_compile_stack (compile_"..., '\n', 129) = 0x00f08c91
[0x4022d1] memchr("    compile_stack_type compile_s"..., '\n', 82) = 0x00f08cb7
[0x4022d1] memchr("    regnum_t regnum;\n{\n  int thi"..., '\n', 44) = 0x00f08ccc
[0x4022d1] memchr("{\n  int this_element;\n\n  for (th"..., '\n', 23) = 0x00f08cce
[0x4022d1] memchr("  int this_element;\n\n  for (this"..., '\n', 21) = 0x00f08ce2
[0x4022d1] memchr("\n  for (this_element = compile_s"..., '\n', 1) = 0x00f08ce3
[0x4022d1] memchr("  for (this_element = compile_st"..., '\n', 0) = NULL
[0x4023cc] fwrite("3822:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  for (this_element = compile_st"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("       this_element >= 0; \n     "..., '1', 21223) = 0x00f08e63
[0x40cdf3] memchr("1]' is the character `-'.)\n   Th"..., '\n', 20889) = 0x00f08e7d
[0x4022d1] memchr("       this_element >= 0; \n     "..., '\n', 291) = 0x00f08d2f
[0x4022d1] memchr("       this_element--)\n    if (c"..., '\n', 264) = 0x00f08d46
[0x4022d1] memchr("    if (compile_stack.stack[this"..., '\n', 241) = 0x00f08d82
[0x4022d1] memchr("      return true;\n\n  return fal"..., '\n', 181) = 0x00f08d95
[0x4022d1] memchr("\n  return false;\n}\n\n\n/* Read the"..., '\n', 162) = 0x00f08d96
[0x4022d1] memchr("  return false;\n}\n\n\n/* Read the "..., '\n', 161) = 0x00f08da6
[0x4022d1] memchr("}\n\n\n/* Read the ending character"..., '\n', 145) = 0x00f08da8
[0x4022d1] memchr("\n\n/* Read the ending character o"..., '\n', 143) = 0x00f08da9
[0x4022d1] memchr("\n/* Read the ending character of"..., '\n', 142) = 0x00f08daa
[0x4022d1] memchr("/* Read the ending character of "..., '\n', 141) = 0x00f08df5
[0x4022d1] memchr("   uncompiled pattern *P_PTR (wh"..., '\n', 66) = 0x00f08e37
[0x4022d1] memchr("   starting character is in `P[-"..., '\n', 0) = NULL
[0x4023cc] fwrite("3834:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   starting character is in `P[-"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   Then we set the translation o"..., '1', 20862) = 0x00f09b8e
[0x40cdf3] memchr("1 if succeeds, and 0 if either r"..., '\n', 17518) = 0x00f09bbe
[0x4022d1] memchr("   Then we set the translation o"..., '\n', 3334) = 0x00f08ec1
[0x4022d1] memchr("   ending characters (inclusive)"..., '\n', 3266) = 0x00f08efd
[0x4022d1] memchr("   \n   Return an error code.\n   "..., '\n', 3206) = 0x00f08f01
[0x4022d1] memchr("   Return an error code.\n   \n   "..., '\n', 3202) = 0x00f08f1a
[0x4022d1] memchr("   \n   We use these short variab"..., '\n', 3177) = 0x00f08f1e
[0x4022d1] memchr("   We use these short variable n"..., '\n', 3173) = 0x00f08f64
[0x4022d1] memchr("   `regex_compile' itself.  */\n\n"..., '\n', 3103) = 0x00f08f83
[0x4022d1] memchr("\nstatic reg_errcode_t\ncompile_ra"..., '\n', 3072) = 0x00f08f84
[0x4022d1] memchr("static reg_errcode_t\ncompile_ran"..., '\n', 3071) = 0x00f08f99
[0x4022d1] memchr("compile_range (p_ptr, pend, tran"..., '\n', 3050) = 0x00f08fcb
[0x4022d1] memchr("    const char **p_ptr, *pend;\n "..., '\n', 3000) = 0x00f08fea
[0x4022d1] memchr("    char *translate;\n    reg_syn"..., '\n', 2969) = 0x00f08fff
[0x4022d1] memchr("    reg_syntax_t syntax;\n    uns"..., '\n', 2948) = 0x00f09018
[0x4022d1] memchr("    unsigned char *b;\n{\n  unsign"..., '\n', 2923) = 0x00f0902e
[0x4022d1] memchr("{\n  unsigned this_char;\n\n  const"..., '\n', 2901) = 0x00f09030
[0x4022d1] memchr("  unsigned this_char;\n\n  const c"..., '\n', 2899) = 0x00f09046
[0x4022d1] memchr("\n  const char *p = *p_ptr;\n  int"..., '\n', 2877) = 0x00f09047
[0x4022d1] memchr("  const char *p = *p_ptr;\n  int "..., '\n', 2876) = 0x00f09061
[0x4022d1] memchr("  int range_start, range_end;\n  "..., '\n', 2850) = 0x00f0907f
[0x4022d1] memchr("  \n  if (p == pend)\n    return R"..., '\n', 2820) = 0x00f09082
[0x4022d1] memchr("  if (p == pend)\n    return REG_"..., '\n', 2817) = 0x00f09093
[0x4022d1] memchr("    return REG_ERANGE;\n\n  /* Eve"..., '\n', 2800) = 0x00f090aa
[0x4022d1] memchr("\n  /* Even though the pattern is"..., '\n', 2777) = 0x00f090ab
[0x4022d1] memchr("  /* Even though the pattern is "..., '\n', 2776) = 0x00f090ef
[0x4022d1] memchr("     with unsigned char *'s; if "..., '\n', 2708) = 0x00f09135
[0x4022d1] memchr("     is set, the range endpoints"..., '\n', 2638) = 0x00f0917b
[0x4022d1] memchr("     signed char *.\n\n     We als"..., '\n', 2568) = 0x00f0918f
[0x4022d1] memchr("\n     We also want to fetch the "..., '\n', 2548) = 0x00f09190
[0x4022d1] memchr("     We also want to fetch the e"..., '\n', 2547) = 0x00f091d8
[0x4022d1] memchr("     appropriate translation is "..., '\n', 2475) = 0x00f09220
[0x4022d1] memchr("  range_start = ((unsigned char "..., '\n', 2403) = 0x00f0924b
[0x4022d1] memchr("  range_end   = ((unsigned char "..., '\n', 2360) = 0x00f09275
[0x4022d1] memchr("\n  /* Have to increment the poin"..., '\n', 2318) = 0x00f09276
[0x4022d1] memchr("  /* Have to increment the point"..., '\n', 2317) = 0x00f092b9
[0x4022d1] memchr("     caller isn't still at the e"..., '\n', 2250) = 0x00f092ee
[0x4022d1] memchr("  (*p_ptr)++;\n\n  /* If the start"..., '\n', 2197) = 0x00f092fc
[0x4022d1] memchr("\n  /* If the start is after the "..., '\n', 2183) = 0x00f092fd
[0x4022d1] memchr("  /* If the start is after the e"..., '\n', 2182) = 0x00f09339
[0x4022d1] memchr("  if (range_start > range_end)\n "..., '\n', 2122) = 0x00f09358
[0x4022d1] memchr("    return syntax & RE_NO_EMPTY_"..., '\n', 2091) = 0x00f0939b
[0x4022d1] memchr("\n  /* Here we see why `this_char"..., '\n', 2024) = 0x00f0939c
[0x4022d1] memchr("  /* Here we see why `this_char'"..., '\n', 2023) = 0x00f093e0
[0x4022d1] memchr("     char' -- the range is inclu"..., '\n', 1955) = 0x00f09420
[0x4022d1] memchr("     (assuming 8-bit characters)"..., '\n', 1891) = 0x00f09469
[0x4022d1] memchr("     loop, since all characters "..., '\n', 1818) = 0x00f09496
[0x4022d1] memchr("  for (this_char = range_start; "..., '\n', 1773) = 0x00f094db
[0x4022d1] memchr("    {\n      SET_LIST_BIT (TRANSL"..., '\n', 1704) = 0x00f094e1
[0x4022d1] memchr("      SET_LIST_BIT (TRANSLATE (t"..., '\n', 1698) = 0x00f0950d
[0x4022d1] memchr("    }\n  \n  return REG_NOERROR;\n}"..., '\n', 1654) = 0x00f09513
[0x4022d1] memchr("  \n  return REG_NOERROR;\n}\n\014\n/* "..., '\n', 1648) = 0x00f09516
[0x4022d1] memchr("  return REG_NOERROR;\n}\n\014\n/* Fai"..., '\n', 1645) = 0x00f0952c
[0x4022d1] memchr("}\n\014\n/* Failure stack declaration"..., '\n', 1623) = 0x00f0952e
[0x4022d1] memchr("\014\n/* Failure stack declarations "..., '\n', 1621) = 0x00f09530
[0x4022d1] memchr("/* Failure stack declarations an"..., '\n', 1619) = 0x00f09576
[0x4022d1] memchr("   re_match_2 use a failure stac"..., '\n', 1549) = 0x00f095bd
[0x4022d1] memchr("   REGEX_ALLOCATE.  */\n   \n\n/* N"..., '\n', 1478) = 0x00f095d4
[0x4022d1] memchr("   \n\n/* Number of failure points"..., '\n', 1455) = 0x00f095d8
[0x4022d1] memchr("\n/* Number of failure points for"..., '\n', 1451) = 0x00f095d9
[0x4022d1] memchr("/* Number of failure points for "..., '\n', 1450) = 0x00f0961b
[0x4022d1] memchr("   when matching.  If this numbe"..., '\n', 1384) = 0x00f0965b
[0x4022d1] memchr("   space, so it is not a hard li"..., '\n', 1320) = 0x00f09684
[0x4022d1] memchr("#ifndef INIT_FAILURE_ALLOC\n#defi"..., '\n', 1279) = 0x00f0969f
[0x4022d1] memchr("#define INIT_FAILURE_ALLOC 5\n#en"..., '\n', 1252) = 0x00f096bc
[0x4022d1] memchr("#endif\n\n/* Roughly the maximum n"..., '\n', 1223) = 0x00f096c3
[0x4022d1] memchr("\n/* Roughly the maximum number o"..., '\n', 1216) = 0x00f096c4
[0x4022d1] memchr("/* Roughly the maximum number of"..., '\n', 1215) = 0x00f0970c
[0x4022d1] memchr("   exactly that if always used M"..., '\n', 1143) = 0x00f09752
[0x4022d1] memchr("   This is a variable only so us"..., '\n', 1073) = 0x00f0979a
[0x4022d1] memchr("   change it ourselves.  */\nint "..., '\n', 1001) = 0x00f097b6
[0x4022d1] memchr("int re_max_failures = 2000;\n\ntyp"..., '\n', 973) = 0x00f097d2
[0x4022d1] memchr("\ntypedef const unsigned char *fa"..., '\n', 945) = 0x00f097d3
[0x4022d1] memchr("typedef const unsigned char *fai"..., '\n', 944) = 0x00f09802
[0x4022d1] memchr("\ntypedef struct\n{\n  fail_stack_e"..., '\n', 897) = 0x00f09803
[0x4022d1] memchr("typedef struct\n{\n  fail_stack_el"..., '\n', 896) = 0x00f09812
[0x4022d1] memchr("{\n  fail_stack_elt_t *stack;\n  u"..., '\n', 881) = 0x00f09814
[0x4022d1] memchr("  fail_stack_elt_t *stack;\n  uns"..., '\n', 879) = 0x00f0982f
[0x4022d1] memchr("  unsigned size;\n  unsigned avai"..., '\n', 852) = 0x00f09840
[0x4022d1] memchr("  unsigned avail;\t\t\t/* Offset of"..., '\n', 835) = 0x00f09879
[0x4022d1] memchr("} fail_stack_type;\n\n#define FAIL"..., '\n', 778) = 0x00f0988c
[0x4022d1] memchr("\n#define FAIL_STACK_EMPTY()     "..., '\n', 759) = 0x00f0988d
[0x4022d1] memchr("#define FAIL_STACK_EMPTY()     ("..., '\n', 758) = 0x00f098c4
[0x4022d1] memchr("#define FAIL_STACK_PTR_EMPTY() ("..., '\n', 703) = 0x00f09900
[0x4022d1] memchr("#define FAIL_STACK_FULL()      ("..., '\n', 643) = 0x00f09945
[0x4022d1] memchr("#define FAIL_STACK_TOP()       ("..., '\n', 574) = 0x00f09989
[0x4022d1] memchr("\n\n/* Initialize `fail_stack'.  D"..., '\n', 506) = 0x00f0998a
[0x4022d1] memchr("\n/* Initialize `fail_stack'.  Do"..., '\n', 505) = 0x00f0998b
[0x4022d1] memchr("/* Initialize `fail_stack'.  Do "..., '\n', 504) = 0x00f099cf
[0x4022d1] memchr("\n#define INIT_FAIL_STACK()\t\t\t\t\t\t"..., '\n', 436) = 0x00f099d0
[0x4022d1] memchr("#define INIT_FAIL_STACK()\t\t\t\t\t\t\\"..., '\n', 435) = 0x00f099f1
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    fail_stack."..., '\n', 402) = 0x00f09a02
[0x4022d1] memchr("    fail_stack.stack = (fail_sta"..., '\n', 385) = 0x00f09a33
[0x4022d1] memchr("      REGEX_ALLOCATE (INIT_FAILU"..., '\n', 336) = 0x00f09a7c
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    if (fail_stack.st"..., '\n', 263) = 0x00f09a87
[0x4022d1] memchr("    if (fail_stack.stack == NULL"..., '\n', 252) = 0x00f09aaf
[0x4022d1] memchr("      return -2;\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t"..., '\n', 212) = 0x00f09ac8
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    fail_stack.size ="..., '\n', 187) = 0x00f09ad3
[0x4022d1] memchr("    fail_stack.size = INIT_FAILU"..., '\n', 176) = 0x00f09b02
[0x4022d1] memchr("    fail_stack.avail = 0;\t\t\t\t\t\t\\"..., '\n', 129) = 0x00f09b23
[0x4022d1] memchr("  } while (0)\n\n\n/* Double the si"..., '\n', 96) = 0x00f09b31
[0x4022d1] memchr("\n\n/* Double the size of FAIL_STA"..., '\n', 82) = 0x00f09b32
[0x4022d1] memchr("\n/* Double the size of FAIL_STAC"..., '\n', 81) = 0x00f09b33
[0x4022d1] memchr("/* Double the size of FAIL_STACK"..., '\n', 80) = 0x00f09b82
[0x4022d1] memchr("\n   Return 1 if succeeds, and 0 "..., '\n', 1) = 0x00f09b83
[0x4022d1] memchr("   Return 1 if succeeds, and 0 i"..., '\n', 0) = NULL
[0x4023cc] fwrite("3938:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Return 1 if succeeds, and 0 i"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   allocating space for it or it"..., '1', 17469) = 0x00f09d7b
[0x40cdf3] memchr("1) * sizeof (fail_stack_elt_t)),"..., '\n', 17025) = 0x00f09d9d
[0x4022d1] memchr("   allocating space for it or it"..., '\n', 412) = 0x00f09bf8
[0x4022d1] memchr("   \n   REGEX_REALLOCATE requires"..., '\n', 354) = 0x00f09bfc
[0x4022d1] memchr("   REGEX_REALLOCATE requires `de"..., '\n', 350) = 0x00f09c39
[0x4022d1] memchr("\n#define DOUBLE_FAIL_STACK(fail_"..., '\n', 289) = 0x00f09c3a
[0x4022d1] memchr("#define DOUBLE_FAIL_STACK(fail_s"..., '\n', 288) = 0x00f09c66
[0x4022d1] memchr("  ((fail_stack).size > re_max_fa"..., '\n', 244) = 0x00f09ca4
[0x4022d1] memchr("   ? 0\t\t\t\t\t\t\t\t\t\\\n   : ((fail_sta"..., '\n', 182) = 0x00f09cb5
[0x4022d1] memchr("   : ((fail_stack).stack = (fail"..., '\n', 165) = 0x00f09cea
[0x4022d1] memchr("        REGEX_REALLOCATE ((fail_"..., '\n', 112) = 0x00f09d1e
[0x4022d1] memchr("          (fail_stack).size * si"..., '\n', 60) = 0x00f09d5a
[0x4022d1] memchr("          ((fail_stack).size << "..., '\n', 0) = NULL
[0x4023cc] fwrite("3949:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          ((fail_stack).size << "..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n      (fail_stack).st"..., '1', 16990) = 0x00f09e02
[0x40cdf3] memchr("1, \t\t\t\t\t\\\n         1)))\n\n\n/* Pus"..., '\n', 16890) = 0x00f09e0b
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      (fail_stack).st"..., '\n', 69) = 0x00f09da8
[0x4022d1] memchr("      (fail_stack).stack == NULL"..., '\n', 58) = 0x00f09dcf
[0x4022d1] memchr("      ? 0\t\t\t\t\t\t\t\t\\\n      : ((fai"..., '\n', 19) = 0x00f09de2
[0x4022d1] memchr("      : ((fail_stack).size <<= 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("3953:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      : ((fail_stack).size <<= 1"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("         1)))\n\n\n/* Push PATTERN_"..., '1', 16880) = 0x00f09e15
[0x40cdf3] memchr("1)))\n\n\n/* Push PATTERN_OP on FAI"..., '\n', 16871) = 0x00f09e19
[0x4022d1] memchr("         1)))\n\n\n/* Push PATTERN_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3954:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("         1)))\n\n\n/* Push PATTERN_"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n/* Push PATTERN_OP on FAIL_STA"..., '1', 16866) = 0x00f09e4a
[0x40cdf3] memchr("1 if was able to do so and 0 if "..., '\n', 16818) = 0x00f09e86
[0x4022d1] memchr("\n\n/* Push PATTERN_OP on FAIL_STA"..., '\n', 38) = 0x00f09e1a
[0x4022d1] memchr("\n/* Push PATTERN_OP on FAIL_STAC"..., '\n', 37) = 0x00f09e1b
[0x4022d1] memchr("/* Push PATTERN_OP on FAIL_STACK"..., '\n', 36) = 0x00f09e3e
[0x4022d1] memchr("\n   Return 1 if was able to do s"..., '\n', 1) = 0x00f09e3f
[0x4022d1] memchr("   Return 1 if was able to do so"..., '\n', 0) = NULL
[0x4023cc] fwrite("3959:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Return 1 if was able to do so"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   space to do so.  */\n#define P"..., '1', 16757) = 0x00f09f7a
[0x40cdf3] memchr("1))\n\n/* This pushes an item onto"..., '\n', 16514) = 0x00f09f7d
[0x4022d1] memchr("   space to do so.  */\n#define P"..., '\n', 236) = 0x00f09e9d
[0x4022d1] memchr("#define PUSH_PATTERN_OP(pattern_"..., '\n', 213) = 0x00f09ed2
[0x4022d1] memchr("  ((FAIL_STACK_FULL ()\t\t\t\t\t\t\t\\\n "..., '\n', 160) = 0x00f09ef1
[0x4022d1] memchr("    && !DOUBLE_FAIL_STACK (fail_"..., '\n', 129) = 0x00f09f1f
[0x4022d1] memchr("    ? 0\t\t\t\t\t\t\t\t\t\\\n    : ((fail_s"..., '\n', 83) = 0x00f09f31
[0x4022d1] memchr("    : ((fail_stack).stack[(fail_"..., '\n', 65) = 0x00f09f72
[0x4022d1] memchr("       1))\n\n/* This pushes an it"..., '\n', 0) = NULL
[0x4023cc] fwrite("3966:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("       1))\n\n/* This pushes an it"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* This pushes an item onto the"..., '1', 16510) = 0x00f0a426
[0x40cdf3] memchr("1 isn't done as unsigned.  */\t\t\t"..., '\n', 15318) = 0x00f0a448
[0x4022d1] memchr("\n/* This pushes an item onto the"..., '\n', 1177) = 0x00f09f7e
[0x4022d1] memchr("/* This pushes an item onto the "..., '\n', 1176) = 0x00f09fc2
[0x4022d1] memchr("   value.  Assumes the variable "..., '\n', 1108) = 0x00f0a006
[0x4022d1] memchr("   be called from within `PUSH_F"..., '\n', 1040) = 0x00f0a039
[0x4022d1] memchr("#define PUSH_FAILURE_ITEM(item)\t"..., '\n', 989) = 0x00f0a060
[0x4022d1] memchr("  fail_stack.stack[fail_stack.av"..., '\n', 950) = 0x00f0a0a1
[0x4022d1] memchr("\n/* The complement operation.  A"..., '\n', 885) = 0x00f0a0a2
[0x4022d1] memchr("/* The complement operation.  As"..., '\n', 884) = 0x00f0a0e6
[0x4022d1] memchr("#define POP_FAILURE_ITEM() fail_"..., '\n', 816) = 0x00f0a126
[0x4022d1] memchr("\n/* Used to omit pushing failure"..., '\n', 752) = 0x00f0a127
[0x4022d1] memchr("/* Used to omit pushing failure "..., '\n', 751) = 0x00f0a170
[0x4022d1] memchr("#ifdef DEBUG\n#define DEBUG_PUSH "..., '\n', 678) = 0x00f0a17d
[0x4022d1] memchr("#define DEBUG_PUSH PUSH_FAILURE_"..., '\n', 665) = 0x00f0a1a2
[0x4022d1] memchr("#define DEBUG_POP(item_addr) *(i"..., '\n', 628) = 0x00f0a1e2
[0x4022d1] memchr("#else\n#define DEBUG_PUSH(item)\n#"..., '\n', 564) = 0x00f0a1e8
[0x4022d1] memchr("#define DEBUG_PUSH(item)\n#define"..., '\n', 558) = 0x00f0a201
[0x4022d1] memchr("#define DEBUG_POP(item_addr)\n#en"..., '\n', 533) = 0x00f0a21e
[0x4022d1] memchr("#endif\n\n\n/* Push the information"..., '\n', 504) = 0x00f0a225
[0x4022d1] memchr("\n\n/* Push the information about "..., '\n', 497) = 0x00f0a226
[0x4022d1] memchr("\n/* Push the information about t"..., '\n', 496) = 0x00f0a227
[0x4022d1] memchr("/* Push the information about th"..., '\n', 495) = 0x00f0a25c
[0x4022d1] memchr("   if we ever fail back to it.  "..., '\n', 442) = 0x00f0a27d
[0x4022d1] memchr("   \n   Requires variables fail_s"..., '\n', 409) = 0x00f0a281
[0x4022d1] memchr("   Requires variables fail_stack"..., '\n', 405) = 0x00f0a2c3
[0x4022d1] memchr("   num_regs be declared.  DOUBLE"..., '\n', 339) = 0x00f0a309
[0x4022d1] memchr("   declared.\n   \n   Does `return"..., '\n', 269) = 0x00f0a316
[0x4022d1] memchr("   \n   Does `return FAILURE_CODE"..., '\n', 256) = 0x00f0a31a
[0x4022d1] memchr("   Does `return FAILURE_CODE' if"..., '\n', 252) = 0x00f0a353
[0x4022d1] memchr("\n#define PUSH_FAILURE_POINT(patt"..., '\n', 195) = 0x00f0a354
[0x4022d1] memchr("#define PUSH_FAILURE_POINT(patte"..., '\n', 194) = 0x00f0a39c
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    char *desti"..., '\n', 122) = 0x00f0a3ad
[0x4022d1] memchr("    char *destination;\t\t\t\t\t\t\t\\\n "..., '\n', 105) = 0x00f0a3cc
[0x4022d1] memchr("    /* Must be int, so when we d"..., '\n', 74) = 0x00f0a416
[0x4022d1] memchr("       of 0 + -1 isn't done as u"..., '\n', 0) = NULL
[0x4023cc] fwrite("4000:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("       of 0 + -1 isn't done as u"..., 1, 50, 0x7fce6d444260) = 50
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    int this_reg;\t\t\t\t\t\t\t\\\n    \t\t"..., '1', 15283) = 0x00f0a84b
[0x40cdf3] memchr("1 ("\\n");\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n    "..., '\n', 14257) = 0x00f0a85b
[0x4022d1] memchr("    int this_reg;\t\t\t\t\t\t\t\\\n    \t\t"..., '\n', 1011) = 0x00f0a462
[0x4022d1] memchr("    \t\t\t\t\t\t\t\t\t\\\n    DEBUG_STATEME"..., '\n', 985) = 0x00f0a471
[0x4022d1] memchr("    DEBUG_STATEMENT (failure_id+"..., '\n', 970) = 0x00f0a49b
[0x4022d1] memchr("    DEBUG_STATEMENT (nfailure_po"..., '\n', 928) = 0x00f0a4d0
[0x4022d1] memchr("    DEBUG_PRINT2 ("\\nPUSH_FAILUR"..., '\n', 875) = 0x00f0a511
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Before push"..., '\n', 810) = 0x00f0a55c
[0x4022d1] memchr("    DEBUG_PRINT2 ("             "..., '\n', 735) = 0x00f0a5a6
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 661) = 0x00f0a5b1
[0x4022d1] memchr("    DEBUG_PRINT2 ("  slots neede"..., '\n', 650) = 0x00f0a5f2
[0x4022d1] memchr("    DEBUG_PRINT2 ("     availabl"..., '\n', 585) = 0x00f0a636
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    /* Ensure we have"..., '\n', 517) = 0x00f0a641
[0x4022d1] memchr("    /* Ensure we have enough spa"..., '\n', 506) = 0x00f0a68b
[0x4022d1] memchr("    while (REMAINING_AVAIL_SLOTS"..., '\n', 432) = 0x00f0a6c5
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n        if (!D"..., '\n', 374) = 0x00f0a6d7
[0x4022d1] memchr("        if (!DOUBLE_FAIL_STACK ("..., '\n', 356) = 0x00f0a708
[0x4022d1] memchr("          return failure_code;\t\t"..., '\n', 307) = 0x00f0a72e
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n        DEBUG_PRINT2 "..., '\n', 269) = 0x00f0a739
[0x4022d1] memchr("        DEBUG_PRINT2 ("\\n  Doubl"..., '\n', 258) = 0x00f0a777
[0x4022d1] memchr("\t\t       (fail_stack).size);\t\t\t\t"..., '\n', 196) = 0x00f0a799
[0x4022d1] memchr("        DEBUG_PRINT2 ("  slots a"..., '\n', 162) = 0x00f0a7e3
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., '\n', 88) = 0x00f0a7f5
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    /* Push the info,"..., '\n', 70) = 0x00f0a800
[0x4022d1] memchr("    /* Push the info, starting w"..., '\n', 59) = 0x00f0a83b
[0x4022d1] memchr("    DEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4024:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    for (this_reg = l"..., '1', 14240) = 0x00f0ac75
[0x40cdf3] memchr("1 ("\\n");\t\t\t\t\t\t\\\n        PUSH_FA"..., '\n', 13191) = 0x00f0ac85
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    for (this_reg = l"..., '\n', 1037) = 0x00f0a866
[0x4022d1] memchr("    for (this_reg = lowest_activ"..., '\n', 1026) = 0x00f0a8af
[0x4022d1] memchr("         this_reg++)\t\t\t\t\t\t\t\\\n   "..., '\n', 953) = 0x00f0a8cc
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 "..., '\n', 924) = 0x00f0a8de
[0x4022d1] memchr("\tDEBUG_PRINT2 ("  Pushing reg: %"..., '\n', 906) = 0x00f0a913
[0x4022d1] memchr("        DEBUG_STATEMENT (num_reg"..., '\n', 853) = 0x00f0a945
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 ("    s"..., '\n', 803) = 0x00f0a950
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    start: 0x%x\\"..., '\n', 792) = 0x00f0a98c
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (regst"..., '\n', 732) = 0x00f0a9c1
[0x4022d1] memchr("                                "..., '\n', 679) = 0x00f0aa0b
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    end: 0x%x\\n""..., '\n', 605) = 0x00f0aa43
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (regen"..., '\n', 549) = 0x00f0aa76
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 ("    i"..., '\n', 498) = 0x00f0aa81
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    info: 0x%x\\n"..., '\n', 487) = 0x00f0aac1
[0x4022d1] memchr("        DEBUG_PRINT2 (" match_nu"..., '\n', 423) = 0x00f0aaef
[0x4022d1] memchr("                      REG_MATCH_"..., '\n', 377) = 0x00f0ab36
[0x4022d1] memchr("        DEBUG_PRINT2 (" active=%"..., '\n', 306) = 0x00f0ab7d
[0x4022d1] memchr("        DEBUG_PRINT2 (" matched_"..., '\n', 235) = 0x00f0abb1
[0x4022d1] memchr("                      MATCHED_SO"..., '\n', 183) = 0x00f0abf3
[0x4022d1] memchr("        DEBUG_PRINT2 (" ever_mat"..., '\n', 117) = 0x00f0ac22
[0x4022d1] memchr("                      EVER_MATCH"..., '\n', 70) = 0x00f0ac68
[0x4022d1] memchr("\tDEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("4046:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n   "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        PUSH_FAILURE_ITEM (reg_i"..., '1', 13174) = 0x00f0af15
[0x40cdf3] memchr("1, size1, string2,   \\\n\t\t\t\t size"..., '\n', 12519) = 0x00f0af2b
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (reg_i"..., '\n', 604) = 0x00f0acbe
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., '\n', 547) = 0x00f0acd0
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 529) = 0x00f0acdb
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing  lo"..., '\n', 518) = 0x00f0ad25
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (lowest_ac"..., '\n', 444) = 0x00f0ad55
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 396) = 0x00f0ad60
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing hig"..., '\n', 385) = 0x00f0adab
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (highest_a"..., '\n', 310) = 0x00f0addc
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 261) = 0x00f0ade7
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing pat"..., '\n', 250) = 0x00f0ae28
[0x4022d1] memchr("    DEBUG_PRINT_COMPILED_PATTERN"..., '\n', 185) = 0x00f0ae69
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (pattern_p"..., '\n', 120) = 0x00f0ae96
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 75) = 0x00f0aea1
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing str"..., '\n', 64) = 0x00f0aee1
[0x4022d1] memchr("    DEBUG_PRINT_DOUBLE_STRING (s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4061:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT_DOUBLE_STRING (s"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t\t size2);\t\t\t\t\\\n    DEBUG_PRIN"..., '1', 12496) = 0x00f0af4d
[0x40cdf3] memchr("1 ("'\\n");\t\t\t\t\t\t\\\n    PUSH_FAILU"..., '\n', 12463) = 0x00f0af5e
[0x4022d1] memchr("\t\t\t\t size2);\t\t\t\t\\\n    DEBUG_PRIN"..., '\n', 18) = 0x00f0af3d
[0x4022d1] memchr("    DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("4063:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\\"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    PUSH_FAILURE_ITEM (string_pl"..., '1', 12445) = 0x00f0b185
[0x40cdf3] memchr("1) * NUM_REG_ITEMS + NUM_NONREG_"..., '\n', 11895) = 0x00f0b1ab
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (string_pl"..., '\n', 511) = 0x00f0af8a
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 467) = 0x00f0af95
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing fai"..., '\n', 456) = 0x00f0afd5
[0x4022d1] memchr("    DEBUG_PUSH (failure_id);\t\t\t\t"..., '\n', 392) = 0x00f0aff9
[0x4022d1] memchr("  } while (0)\n\n/* This is the nu"..., '\n', 356) = 0x00f0b007
[0x4022d1] memchr("\n/* This is the number of items "..., '\n', 342) = 0x00f0b008
[0x4022d1] memchr("/* This is the number of items t"..., '\n', 341) = 0x00f0b04f
[0x4022d1] memchr("   for each register.  */\n#defin"..., '\n', 270) = 0x00f0b069
[0x4022d1] memchr("#define NUM_REG_ITEMS  3\n\n/* Ind"..., '\n', 244) = 0x00f0b082
[0x4022d1] memchr("\n/* Individual items aside from "..., '\n', 219) = 0x00f0b083
[0x4022d1] memchr("/* Individual items aside from t"..., '\n', 218) = 0x00f0b0b5
[0x4022d1] memchr("#ifdef DEBUG\n#define NUM_NONREG_"..., '\n', 168) = 0x00f0b0c2
[0x4022d1] memchr("#define NUM_NONREG_ITEMS 5 /* In"..., '\n', 155) = 0x00f0b0ff
[0x4022d1] memchr("#else\n#define NUM_NONREG_ITEMS 4"..., '\n', 94) = 0x00f0b105
[0x4022d1] memchr("#define NUM_NONREG_ITEMS 4\n#endi"..., '\n', 88) = 0x00f0b120
[0x4022d1] memchr("#endif\n\n/* We push at most this "..., '\n', 61) = 0x00f0b127
[0x4022d1] memchr("\n/* We push at most this many it"..., '\n', 54) = 0x00f0b128
[0x4022d1] memchr("/* We push at most this many ite"..., '\n', 53) = 0x00f0b15d
[0x4022d1] memchr("#define MAX_FAILURE_ITEMS ((num_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4082:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define MAX_FAILURE_ITEMS ((num_"..., 1, 78, 0x7fce6d444260) = 78
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* We actually push this many i"..., '1', 11856) = 0x00f0b224
[0x40cdf3] memchr("1) * NUM_REG_ITEMS \t\\\n    + NUM_"..., '\n', 11736) = 0x00f0b239
[0x4022d1] memchr("\n/* We actually push this many i"..., '\n', 75) = 0x00f0b1ac
[0x4022d1] memchr("/* We actually push this many it"..., '\n', 74) = 0x00f0b1d5
[0x4022d1] memchr("#define NUM_FAILURE_ITEMS\t\t\t\t\t\t\\"..., '\n', 33) = 0x00f0b1f6
[0x4022d1] memchr("  ((highest_active_reg - lowest_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4086:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  ((highest_active_reg - lowest_"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    + NUM_NONREG_ITEMS)\n\n/* How "..., '1', 11714) = 0x00f0b4b5
[0x40cdf3] memchr("1', `size1', `string2', and `siz"..., '\n', 11079) = 0x00f0b4dd
[0x4022d1] memchr("    + NUM_NONREG_ITEMS)\n\n/* How "..., '\n', 617) = 0x00f0b251
[0x4022d1] memchr("\n/* How many items can still be "..., '\n', 593) = 0x00f0b252
[0x4022d1] memchr("/* How many items can still be a"..., '\n', 592) = 0x00f0b2a0
[0x4022d1] memchr("#define REMAINING_AVAIL_SLOTS (("..., '\n', 514) = 0x00f0b2e7
[0x4022d1] memchr("\n\n/* Pops what PUSH_FAIL_STACK p"..., '\n', 443) = 0x00f0b2e8
[0x4022d1] memchr("\n/* Pops what PUSH_FAIL_STACK pu"..., '\n', 442) = 0x00f0b2e9
[0x4022d1] memchr("/* Pops what PUSH_FAIL_STACK pus"..., '\n', 441) = 0x00f0b30e
[0x4022d1] memchr("\n   We restore into the paramete"..., '\n', 404) = 0x00f0b30f
[0x4022d1] memchr("   We restore into the parameter"..., '\n', 403) = 0x00f0b352
[0x4022d1] memchr("     STR -- the saved data posit"..., '\n', 336) = 0x00f0b377
[0x4022d1] memchr("     PAT -- the saved pattern po"..., '\n', 299) = 0x00f0b39f
[0x4022d1] memchr("     LOW_REG, HIGH_REG -- the hi"..., '\n', 259) = 0x00f0b3e2
[0x4022d1] memchr("     REGSTART, REGEND -- arrays "..., '\n', 192) = 0x00f0b417
[0x4022d1] memchr("     REG_INFO -- array of inform"..., '\n', 139) = 0x00f0b457
[0x4022d1] memchr("   \n   Also assumes the variable"..., '\n', 75) = 0x00f0b45b
[0x4022d1] memchr("   Also assumes the variables `f"..., '\n', 71) = 0x00f0b4a2
[0x4022d1] memchr("   `pend', `string1', `size1', `"..., '\n', 0) = NULL
[0x4023cc] fwrite("4103:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   `pend', `string1', `size1', `"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n#define POP_FAILURE_POINT(str, "..., '1', 11038) = 0x00f0b645
[0x40cdf3] memchr("1 ("POP_FAILURE_POINT:\\n");\t\t\t\t\\"..., '\n', 10679) = 0x00f0b665
[0x4022d1] memchr("\n#define POP_FAILURE_POINT(str, "..., '\n', 346) = 0x00f0b4de
[0x4022d1] memchr("#define POP_FAILURE_POINT(str, p"..., '\n', 345) = 0x00f0b532
[0x4022d1] memchr("{\t\t\t\t\t\t\t\t\t\\\n  DEBUG_STATEMENT (f"..., '\n', 261) = 0x00f0b53e
[0x4022d1] memchr("  DEBUG_STATEMENT (fail_stack_el"..., '\n', 249) = 0x00f0b573
[0x4022d1] memchr("  int this_reg;\t\t\t\t\t\t\t\t\\\n  const"..., '\n', 196) = 0x00f0b58c
[0x4022d1] memchr("  const unsigned char *string_te"..., '\n', 171) = 0x00f0b5b6
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  assert (!FAIL_STACK"..., '\n', 129) = 0x00f0b5c1
[0x4022d1] memchr("  assert (!FAIL_STACK_EMPTY ());"..., '\n', 118) = 0x00f0b5e8
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Remove failure p"..., '\n', 79) = 0x00f0b5f3
[0x4022d1] memchr("  /* Remove failure points and p"..., '\n', 68) = 0x00f0b637
[0x4022d1] memchr("  DEBUG_PRINT1 ("POP_FAILURE_POI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4114:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("POP_FAILURE_POI"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("  Before pop, n"..., '1', 10646) = 0x00f0b95c
[0x40cdf3] memchr("1, size1, string2, size2);\t\\\n  D"..., '\n', 9888) = 0x00f0b978
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Before pop, n"..., '\n', 718) = 0x00f0b6ac
[0x4022d1] memchr("  DEBUG_PRINT2 ("               "..., '\n', 647) = 0x00f0b6f2
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  assert (fail_stack."..., '\n', 577) = 0x00f0b6fd
[0x4022d1] memchr("  assert (fail_stack.avail >= NU"..., '\n', 566) = 0x00f0b732
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_POP (&failure"..., '\n', 513) = 0x00f0b73d
[0x4022d1] memchr("  DEBUG_POP (&failure_id);\t\t\t\t\t\t"..., '\n', 502) = 0x00f0b75f
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping failu"..., '\n', 468) = 0x00f0b79d
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* If the saved str"..., '\n', 406) = 0x00f0b7a8
[0x4022d1] memchr("  /* If the saved string locatio"..., '\n', 395) = 0x00f0b7e6
[0x4022d1] memchr("     on_failure_keep_string_jump"..., '\n', 333) = 0x00f0b82f
[0x4022d1] memchr("     saved NULL, thus retaining "..., '\n', 260) = 0x00f0b879
[0x4022d1] memchr("  string_temp = POP_FAILURE_ITEM"..., '\n', 186) = 0x00f0b8a4
[0x4022d1] memchr("  if (string_temp != NULL)\t\t\t\t\t\t"..., '\n', 143) = 0x00f0b8c6
[0x4022d1] memchr("    str = (const char *) string_"..., '\n', 109) = 0x00f0b8f2
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_PRINT2 ("  Po"..., '\n', 65) = 0x00f0b8fd
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping strin"..., '\n', 54) = 0x00f0b933
[0x4022d1] memchr("  DEBUG_PRINT_DOUBLE_STRING (str"..., '\n', 0) = NULL
[0x4023cc] fwrite("4131:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_DOUBLE_STRING (str"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., '1', 9859) = 0x00f0b986
[0x40cdf3] memchr("1 ("'\\n");\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  "..., '\n', 9846) = 0x00f0b998
[0x4022d1] memchr("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4132:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  pat = (unsigned cha"..., '1', 9827) = 0x00f0be79
[0x40cdf3] memchr("1 << BYTEWIDTH) possible\n   char"..., '\n', 8579) = 0x00f0be91
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  pat = (unsigned cha"..., '\n', 1206) = 0x00f0b9a3
[0x4022d1] memchr("  pat = (unsigned char *) POP_FA"..., '\n', 1195) = 0x00f0b9d7
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping patte"..., '\n', 1143) = 0x00f0ba0d
[0x4022d1] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., '\n', 1089) = 0x00f0ba43
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Restore register"..., '\n', 1035) = 0x00f0ba4e
[0x4022d1] memchr("  /* Restore register info.  */\t"..., '\n', 1024) = 0x00f0ba75
[0x4022d1] memchr("  high_reg = (unsigned) POP_FAIL"..., '\n', 985) = 0x00f0baa7
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping high "..., '\n', 935) = 0x00f0bae8
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  low_reg = (unsigned"..., '\n', 870) = 0x00f0baf3
[0x4022d1] memchr("  low_reg = (unsigned) POP_FAILU"..., '\n', 859) = 0x00f0bb24
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping  low "..., '\n', 810) = 0x00f0bb64
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  for (this_reg = hig"..., '\n', 746) = 0x00f0bb6f
[0x4022d1] memchr("  for (this_reg = high_reg; this"..., '\n', 735) = 0x00f0bbaf
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      DEBUG_PRIN"..., '\n', 671) = 0x00f0bbbf
[0x4022d1] memchr("      DEBUG_PRINT2 ("    Popping"..., '\n', 655) = 0x00f0bbfb
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      reg_info[this_r"..., '\n', 595) = 0x00f0bc06
[0x4022d1] memchr("      reg_info[this_reg].word = "..., '\n', 584) = 0x00f0bc3f
[0x4022d1] memchr("      DEBUG_PRINT2 ("      info:"..., '\n', 527) = 0x00f0bc81
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      regend[this_reg"..., '\n', 461) = 0x00f0bc8c
[0x4022d1] memchr("      regend[this_reg] = (const "..., '\n', 450) = 0x00f0bccc
[0x4022d1] memchr("      DEBUG_PRINT2 ("      end: "..., '\n', 386) = 0x00f0bd0b
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      regstart[this_r"..., '\n', 323) = 0x00f0bd16
[0x4022d1] memchr("      regstart[this_reg] = (cons"..., '\n', 312) = 0x00f0bd58
[0x4022d1] memchr("      DEBUG_PRINT2 ("      start"..., '\n', 246) = 0x00f0bd9b
[0x4022d1] memchr("    }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  DEB"..., '\n', 179) = 0x00f0bdab
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_STATEMENT (nf"..., '\n', 163) = 0x00f0bdb6
[0x4022d1] memchr("  DEBUG_STATEMENT (nfailure_poin"..., '\n', 152) = 0x00f0bde9
[0x4022d1] memchr("} /* POP_FAILURE_POINT */\n\014\n/* r"..., '\n', 101) = 0x00f0be03
[0x4022d1] memchr("\014\n/* re_compile_fastmap computes"..., '\n', 75) = 0x00f0be05
[0x4022d1] memchr("/* re_compile_fastmap computes a"..., '\n', 73) = 0x00f0be4e
[0x4022d1] memchr("   BUFP.  A fastmap records whic"..., '\n', 0) = NULL
[0x4023cc] fwrite("4163:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   BUFP.  A fastmap records whic"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   characters can start a string"..., '1', 8554) = 0x00f0bf51
[0x40cdf3] memchr("1 << BYTEWIDTH)-byte data\n   are"..., '\n', 8363) = 0x00f0bf6a
[0x4022d1] memchr("   characters can start a string"..., '\n', 147) = 0x00f0beda
[0x4022d1] memchr("   is used by re_search to skip "..., '\n', 74) = 0x00f0bf23
[0x4022d1] memchr("\n   The caller must supply the a"..., '\n', 1) = 0x00f0bf24
[0x4022d1] memchr("   The caller must supply the ad"..., '\n', 0) = NULL
[0x4023cc] fwrite("4167:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   The caller must supply the ad"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   area as BUFP->fastmap.\n   \n  "..., '1', 8337) = 0x00f0c3a9
[0x40cdf3] memchr("1 << BYTEWIDTH);  /* Assume noth"..., '\n', 7251) = 0x00f0c3d9
[0x4022d1] memchr("   area as BUFP->fastmap.\n   \n  "..., '\n', 1068) = 0x00f0bf84
[0x4022d1] memchr("   \n   We set the `fastmap', `fa"..., '\n', 1042) = 0x00f0bf88
[0x4022d1] memchr("   We set the `fastmap', `fastma"..., '\n', 1038) = 0x00f0bfd1
[0x4022d1] memchr("   the pattern buffer.\n\n   Retur"..., '\n', 965) = 0x00f0bfe8
[0x4022d1] memchr("\n   Returns 0 if we succeed, -2 "..., '\n', 942) = 0x00f0bfe9
[0x4022d1] memchr("   Returns 0 if we succeed, -2 i"..., '\n', 941) = 0x00f0c023
[0x4022d1] memchr("\nint\nre_compile_fastmap (bufp)\n "..., '\n', 883) = 0x00f0c024
[0x4022d1] memchr("int\nre_compile_fastmap (bufp)\n  "..., '\n', 882) = 0x00f0c028
[0x4022d1] memchr("re_compile_fastmap (bufp)\n     s"..., '\n', 878) = 0x00f0c042
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 852) = 0x00f0c067
[0x4022d1] memchr("{\n  int j, k;\n  fail_stack_type "..., '\n', 815) = 0x00f0c069
[0x4022d1] memchr("  int j, k;\n  fail_stack_type fa"..., '\n', 813) = 0x00f0c075
[0x4022d1] memchr("  fail_stack_type fail_stack;\n#i"..., '\n', 801) = 0x00f0c093
[0x4022d1] memchr("#ifndef REGEX_MALLOC\n  char *des"..., '\n', 771) = 0x00f0c0a8
[0x4022d1] memchr("  char *destination;\n#endif\n  /*"..., '\n', 750) = 0x00f0c0bd
[0x4022d1] memchr("#endif\n  /* We don't push any re"..., '\n', 729) = 0x00f0c0c4
[0x4022d1] memchr("  /* We don't push any register "..., '\n', 722) = 0x00f0c10c
[0x4022d1] memchr("  unsigned num_regs = 0;\n  \n  re"..., '\n', 650) = 0x00f0c125
[0x4022d1] memchr("  \n  register char *fastmap = bu"..., '\n', 625) = 0x00f0c128
[0x4022d1] memchr("  register char *fastmap = bufp-"..., '\n', 622) = 0x00f0c152
[0x4022d1] memchr("  unsigned char *pattern = bufp-"..., '\n', 580) = 0x00f0c17b
[0x4022d1] memchr("  unsigned long size = bufp->use"..., '\n', 539) = 0x00f0c19e
[0x4022d1] memchr("  const unsigned char *p = patte"..., '\n', 504) = 0x00f0c1c2
[0x4022d1] memchr("  register unsigned char *pend ="..., '\n', 468) = 0x00f0c1f3
[0x4022d1] memchr("\n  /* Assume that each path thro"..., '\n', 419) = 0x00f0c1f4
[0x4022d1] memchr("  /* Assume that each path throu"..., '\n', 418) = 0x00f0c235
[0x4022d1] memchr("     proven otherwise.  We set t"..., '\n', 353) = 0x00f0c277
[0x4022d1] memchr("     statement, to which we get "..., '\n', 287) = 0x00f0c2b9
[0x4022d1] memchr("     match the empty string.  */"..., '\n', 221) = 0x00f0c2da
[0x4022d1] memchr("  boolean path_can_be_null = tru"..., '\n', 188) = 0x00f0c2fd
[0x4022d1] memchr("\n  /* We aren't doing a `succeed"..., '\n', 153) = 0x00f0c2fe
[0x4022d1] memchr("  /* We aren't doing a `succeed_"..., '\n', 152) = 0x00f0c334
[0x4022d1] memchr("  boolean succeed_n_p = false;\n\n"..., '\n', 98) = 0x00f0c353
[0x4022d1] memchr("\n  assert (fastmap != NULL && p "..., '\n', 67) = 0x00f0c354
[0x4022d1] memchr("  assert (fastmap != NULL && p !"..., '\n', 66) = 0x00f0c37d
[0x4022d1] memchr("  \n  INIT_FAIL_STACK ();\n  bzero"..., '\n', 25) = 0x00f0c380
[0x4022d1] memchr("  INIT_FAIL_STACK ();\n  bzero (f"..., '\n', 22) = 0x00f0c396
[0x4022d1] memchr("  bzero (fastmap, 1 << BYTEWIDTH"..., '\n', 0) = NULL
[0x4023cc] fwrite("4205:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  bzero (fastmap, 1 << BYTEWIDTH"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  bufp->fastmap_accurate = 1;\t  "..., '1', 7202) = 0x00f0c3f5
[0x40cdf3] memchr("1;\t    /* It will be when we're "..., '\n', 7175) = 0x00f0c41e
[0x4022d1] memchr("  bufp->fastmap_accurate = 1;\t  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4206:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  bufp->fastmap_accurate = 1;\t  "..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  bufp->can_be_null = 0;\n      \n"..., '1', 7133) = 0x00f0c797
[0x40cdf3] memchr("1;\n          return 0;\n\n\n      /"..., '\n', 6245) = 0x00f0c799
[0x4022d1] memchr("  bufp->can_be_null = 0;\n      \n"..., '\n', 865) = 0x00f0c437
[0x4022d1] memchr("      \n  while (p != pend || !FA"..., '\n', 840) = 0x00f0c43e
[0x4022d1] memchr("  while (p != pend || !FAIL_STAC"..., '\n', 833) = 0x00f0c46a
[0x4022d1] memchr("    {\n      if (p == pend)\n     "..., '\n', 789) = 0x00f0c470
[0x4022d1] memchr("      if (p == pend)\n        {\n "..., '\n', 783) = 0x00f0c485
[0x4022d1] memchr("        {\n          bufp->can_be"..., '\n', 762) = 0x00f0c48f
[0x4022d1] memchr("          bufp->can_be_null |= p"..., '\n', 752) = 0x00f0c4c0
[0x4022d1] memchr("          \n          /* Reset fo"..., '\n', 703) = 0x00f0c4cb
[0x4022d1] memchr("          /* Reset for next path"..., '\n', 692) = 0x00f0c4f1
[0x4022d1] memchr("          path_can_be_null = tru"..., '\n', 654) = 0x00f0c514
[0x4022d1] memchr("          \n          p = fail_st"..., '\n', 619) = 0x00f0c51f
[0x4022d1] memchr("          p = fail_stack.stack[-"..., '\n', 608) = 0x00f0c553
[0x4022d1] memchr("\t}\n\n      /* We should never be "..., '\n', 556) = 0x00f0c556
[0x4022d1] memchr("\n      /* We should never be abo"..., '\n', 553) = 0x00f0c557
[0x4022d1] memchr("      /* We should never be abou"..., '\n', 552) = 0x00f0c5a2
[0x4022d1] memchr("      assert (p < pend);\n      \n"..., '\n', 477) = 0x00f0c5bb
[0x4022d1] memchr("      \n#ifdef SWITCH_ENUM_BUG\n  "..., '\n', 452) = 0x00f0c5c2
[0x4022d1] memchr("#ifdef SWITCH_ENUM_BUG\n      swi"..., '\n', 445) = 0x00f0c5d9
[0x4022d1] memchr("      switch ((int) ((re_opcode_"..., '\n', 422) = 0x00f0c603
[0x4022d1] memchr("#else\n      switch ((re_opcode_t"..., '\n', 380) = 0x00f0c609
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 374) = 0x00f0c62b
[0x4022d1] memchr("#endif\n\t{\n\n        /* I guess th"..., '\n', 340) = 0x00f0c632
[0x4022d1] memchr("\t{\n\n        /* I guess the idea "..., '\n', 333) = 0x00f0c635
[0x4022d1] memchr("\n        /* I guess the idea her"..., '\n', 330) = 0x00f0c636
[0x4022d1] memchr("        /* I guess the idea here"..., '\n', 329) = 0x00f0c67e
[0x4022d1] memchr("           if a backreference is"..., '\n', 257) = 0x00f0c6c7
[0x4022d1] memchr("           the fastmap for the c"..., '\n', 184) = 0x00f0c704
[0x4022d1] memchr("           `can_be_null' stops `"..., '\n', 123) = 0x00f0c74c
[0x4022d1] memchr("           that is all we do.  *"..., '\n', 51) = 0x00f0c76e
[0x4022d1] memchr("\tcase duplicate:\n\t  bufp->can_be"..., '\n', 17) = 0x00f0c77f
[0x4022d1] memchr("\t  bufp->can_be_null = 1;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("4237:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  bufp->can_be_null = 1;\n      "..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          return 0;\n\n\n      /* F"..., '1', 6242) = 0x00f0c833
[0x40cdf3] memchr("1]] = 1;\n\t  break;\n\n\n        cas"..., '\n', 6089) = 0x00f0c83b
[0x4022d1] memchr("          return 0;\n\n\n      /* F"..., '\n', 133) = 0x00f0c7ad
[0x4022d1] memchr("\n\n      /* Following are the cas"..., '\n', 113) = 0x00f0c7ae
[0x4022d1] memchr("\n      /* Following are the case"..., '\n', 112) = 0x00f0c7af
[0x4022d1] memchr("      /* Following are the cases"..., '\n', 111) = 0x00f0c7f4
[0x4022d1] memchr("         with `break'.  */\n\n\tcas"..., '\n', 42) = 0x00f0c80f
[0x4022d1] memchr("\n\tcase exactn:\n          fastmap"..., '\n', 15) = 0x00f0c810
[0x4022d1] memchr("\tcase exactn:\n          fastmap["..., '\n', 14) = 0x00f0c81e
[0x4022d1] memchr("          fastmap[p[1]] = 1;\n\t  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4245:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          fastmap[p[1]] = 1;\n\t  "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n        case charset"..., '1', 6080) = 0x00f0c884
[0x40cdf3] memchr("1; j >= 0; j--)\n\t    if (p[j / B"..., '\n', 6008) = 0x00f0c893
[0x4022d1] memchr("\t  break;\n\n\n        case charset"..., '\n', 34) = 0x00f0c845
[0x4022d1] memchr("\n\n        case charset:\n        "..., '\n', 24) = 0x00f0c846
[0x4022d1] memchr("\n        case charset:\n         "..., '\n', 23) = 0x00f0c847
[0x4022d1] memchr("        case charset:\n          "..., '\n', 22) = 0x00f0c85d
[0x4022d1] memchr("          for (j = *p++ * BYTEWI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4250:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          for (j = *p++ * BYTEWI"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (p[j / BYTEWIDTH] & (1 <"..., '1', 5992) = 0x00f0c8b1
[0x40cdf3] memchr("1 << (j % BYTEWIDTH)))\n         "..., '\n', 5963) = 0x00f0c8c7
[0x4022d1] memchr("\t    if (p[j / BYTEWIDTH] & (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("4251:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    if (p[j / BYTEWIDTH] & (1 <"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              fastmap[j] = 1;\n\t "..., '1', 5940) = 0x00f0c8e3
[0x40cdf3] memchr("1;\n\t  break;\n\n\n\tcase charset_not"..., '\n', 5913) = 0x00f0c8e5
[0x4022d1] memchr("              fastmap[j] = 1;\n\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("4252:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              fastmap[j] = 1;\n\t "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n\tcase charset_not:\n\t"..., '1', 5910) = 0x00f0c959
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n          "..., '\n', 5795) = 0x00f0c96e
[0x4022d1] memchr("\t  break;\n\n\n\tcase charset_not:\n\t"..., '\n', 82) = 0x00f0c8ef
[0x4022d1] memchr("\n\n\tcase charset_not:\n\t  /* Chars"..., '\n', 72) = 0x00f0c8f0
[0x4022d1] memchr("\n\tcase charset_not:\n\t  /* Chars "..., '\n', 71) = 0x00f0c8f1
[0x4022d1] memchr("\tcase charset_not:\n\t  /* Chars b"..., '\n', 70) = 0x00f0c904
[0x4022d1] memchr("\t  /* Chars beyond end of map mu"..., '\n', 51) = 0x00f0c937
[0x4022d1] memchr("\t  for (j = *p * BYTEWIDTH; j < "..., '\n', 0) = NULL
[0x4023cc] fwrite("4258:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = *p * BYTEWIDTH; j < "..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            fastmap[j] = 1;\n\n\t  "..., '1', 5773) = 0x00f0c988
[0x40cdf3] memchr("1;\n\n\t  for (j = *p++ * BYTEWIDTH"..., '\n', 5748) = 0x00f0c98a
[0x4022d1] memchr("            fastmap[j] = 1;\n\n\t  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4259:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            fastmap[j] = 1;\n\n\t  "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t  for (j = *p++ * BYTEWIDTH - "..., '1', 5745) = 0x00f0c9ab
[0x40cdf3] memchr("1; j >= 0; j--)\n\t    if (!(p[j /"..., '\n', 5713) = 0x00f0c9ba
[0x4022d1] memchr("\n\t  for (j = *p++ * BYTEWIDTH - "..., '\n', 1) = 0x00f0c98b
[0x4022d1] memchr("\t  for (j = *p++ * BYTEWIDTH - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4261:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = *p++ * BYTEWIDTH - 1"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (!(p[j / BYTEWIDTH] & (1"..., '1', 5697) = 0x00f0c9da
[0x40cdf3] memchr("1 << (j % BYTEWIDTH))))\n        "..., '\n', 5666) = 0x00f0c9f1
[0x4022d1] memchr("\t    if (!(p[j / BYTEWIDTH] & (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4262:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    if (!(p[j / BYTEWIDTH] & (1"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              fastmap[j] = 1;\n  "..., '1', 5642) = 0x00f0ca0d
[0x40cdf3] memchr("1;\n          break;\n\n\n\tcase word"..., '\n', 5615) = 0x00f0ca0f
[0x4022d1] memchr("              fastmap[j] = 1;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4263:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              fastmap[j] = 1;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          break;\n\n\n\tcase wordcha"..., '1', 5612) = 0x00f0ca47
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n\t    if (S"..., '\n', 5557) = 0x00f0ca5c
[0x4022d1] memchr("          break;\n\n\n\tcase wordcha"..., '\n', 35) = 0x00f0ca20
[0x4022d1] memchr("\n\n\tcase wordchar:\n\t  for (j = 0;"..., '\n', 18) = 0x00f0ca21
[0x4022d1] memchr("\n\tcase wordchar:\n\t  for (j = 0; "..., '\n', 17) = 0x00f0ca22
[0x4022d1] memchr("\tcase wordchar:\n\t  for (j = 0; j"..., '\n', 16) = 0x00f0ca32
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4268:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) == Sword)\n\t "..., '1', 5535) = 0x00f0ca8f
[0x40cdf3] memchr("1;\n\t  break;\n\n\n\tcase notwordchar"..., '\n', 5485) = 0x00f0ca91
[0x4022d1] memchr("\t    if (SYNTAX (j) == Sword)\n\t "..., '\n', 30) = 0x00f0ca7a
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 0) = NULL
[0x4023cc] fwrite("4270:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      fastmap[j] = 1;\n\t  break;"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n\tcase notwordchar:\n\t"..., '1', 5482) = 0x00f0cac5
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n\t    if (S"..., '\n', 5431) = 0x00f0cada
[0x4022d1] memchr("\t  break;\n\n\n\tcase notwordchar:\n\t"..., '\n', 31) = 0x00f0ca9b
[0x4022d1] memchr("\n\n\tcase notwordchar:\n\t  for (j ="..., '\n', 21) = 0x00f0ca9c
[0x4022d1] memchr("\n\tcase notwordchar:\n\t  for (j = "..., '\n', 20) = 0x00f0ca9d
[0x4022d1] memchr("\tcase notwordchar:\n\t  for (j = 0"..., '\n', 19) = 0x00f0cab0
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4275:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) != Sword)\n\t "..., '1', 5409) = 0x00f0cb0d
[0x40cdf3] memchr("1;\n\t  break;\n\n\n        case anyc"..., '\n', 5359) = 0x00f0cb0f
[0x4022d1] memchr("\t    if (SYNTAX (j) != Sword)\n\t "..., '\n', 30) = 0x00f0caf8
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 0) = NULL
[0x4023cc] fwrite("4277:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      fastmap[j] = 1;\n\t  break;"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n        case anychar"..., '1', 5356) = 0x00f0cb70
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n          "..., '\n', 5260) = 0x00f0cb85
[0x4022d1] memchr("\t  break;\n\n\n        case anychar"..., '\n', 76) = 0x00f0cb19
[0x4022d1] memchr("\n\n        case anychar:\n        "..., '\n', 66) = 0x00f0cb1a
[0x4022d1] memchr("\n        case anychar:\n         "..., '\n', 65) = 0x00f0cb1b
[0x4022d1] memchr("        case anychar:\n          "..., '\n', 64) = 0x00f0cb31
[0x4022d1] memchr("          /* `.' matches anythin"..., '\n', 42) = 0x00f0cb5b
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4283:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            fastmap[j] = 1;\n\n   "..., '1', 5238) = 0x00f0cb9f
[0x40cdf3] memchr("1;\n\n          /* ... except perh"..., '\n', 5213) = 0x00f0cba1
[0x4022d1] memchr("            fastmap[j] = 1;\n\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("4284:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            fastmap[j] = 1;\n\n   "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          /* ... except perhaps"..., '1', 5210) = 0x00f0cd6f
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n\t    if (S"..., '\n', 4749) = 0x00f0cd84
[0x4022d1] memchr("\n          /* ... except perhaps"..., '\n', 441) = 0x00f0cba2
[0x4022d1] memchr("          /* ... except perhaps "..., '\n', 440) = 0x00f0cbcf
[0x4022d1] memchr("          if (!(bufp->syntax & R"..., '\n', 395) = 0x00f0cbff
[0x4022d1] memchr("            fastmap['\\n'] = 0;\n\n"..., '\n', 347) = 0x00f0cc1e
[0x4022d1] memchr("\n          /* Return if we have "..., '\n', 316) = 0x00f0cc1f
[0x4022d1] memchr("          /* Return if we have a"..., '\n', 315) = 0x00f0cc65
[0x4022d1] memchr("             then the fastmap is"..., '\n', 245) = 0x00f0ccaf
[0x4022d1] memchr("\t  else if (bufp->can_be_null)\n\t"..., '\n', 171) = 0x00f0ccce
[0x4022d1] memchr("\t    return 0;\n\n          /* Oth"..., '\n', 140) = 0x00f0ccdd
[0x4022d1] memchr("\n          /* Otherwise, have to"..., '\n', 125) = 0x00f0ccde
[0x4022d1] memchr("          /* Otherwise, have to "..., '\n', 124) = 0x00f0cd1b
[0x4022d1] memchr("\t  break;\n\n\n#ifdef emacs\n       "..., '\n', 63) = 0x00f0cd25
[0x4022d1] memchr("\n\n#ifdef emacs\n        case synt"..., '\n', 53) = 0x00f0cd26
[0x4022d1] memchr("\n#ifdef emacs\n        case synta"..., '\n', 52) = 0x00f0cd27
[0x4022d1] memchr("#ifdef emacs\n        case syntax"..., '\n', 51) = 0x00f0cd34
[0x4022d1] memchr("        case syntaxspec:\n\t  k = "..., '\n', 38) = 0x00f0cd4d
[0x4022d1] memchr("\t  k = *p++;\n\t  for (j = 0; j < "..., '\n', 13) = 0x00f0cd5a
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4302:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) == (enum syn"..., '1', 4727) = 0x00f0cdc5
[0x40cdf3] memchr("1;\n\t  break;\n\n\n\tcase notsyntaxsp"..., '\n', 4663) = 0x00f0cdc7
[0x4022d1] memchr("\t    if (SYNTAX (j) == (enum syn"..., '\n', 44) = 0x00f0cdb0
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 0) = NULL
[0x4023cc] fwrite("4304:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      fastmap[j] = 1;\n\t  break;"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n\tcase notsyntaxspec:"..., '1', 4660) = 0x00f0ce0a
[0x40cdf3] memchr("1 << BYTEWIDTH); j++)\n\t    if (S"..., '\n', 4594) = 0x00f0ce1f
[0x4022d1] memchr("\t  break;\n\n\n\tcase notsyntaxspec:"..., '\n', 46) = 0x00f0cdd1
[0x4022d1] memchr("\n\n\tcase notsyntaxspec:\n\t  k = *p"..., '\n', 36) = 0x00f0cdd2
[0x4022d1] memchr("\n\tcase notsyntaxspec:\n\t  k = *p+"..., '\n', 35) = 0x00f0cdd3
[0x4022d1] memchr("\tcase notsyntaxspec:\n\t  k = *p++"..., '\n', 34) = 0x00f0cde8
[0x4022d1] memchr("\t  k = *p++;\n\t  for (j = 0; j < "..., '\n', 13) = 0x00f0cdf5
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4310:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) != (enum syn"..., '1', 4572) = 0x00f0ce60
[0x40cdf3] memchr("1;\n\t  break;\n\n\n      /* All case"..., '\n', 4508) = 0x00f0ce62
[0x4022d1] memchr("\t    if (SYNTAX (j) != (enum syn"..., '\n', 44) = 0x00f0ce4b
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 0) = NULL
[0x4023cc] fwrite("4312:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      fastmap[j] = 1;\n\t  break;"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\n      /* All cases a"..., '1', 4505) = 0x00f0d392
[0x40cdf3] memchr("1] == p)\n            fail_stack."..., '\n', 3178) = 0x00f0d39a
[0x4022d1] memchr("\t  break;\n\n\n      /* All cases a"..., '\n', 1281) = 0x00f0ce6c
[0x4022d1] memchr("\n\n      /* All cases after this "..., '\n', 1271) = 0x00f0ce6d
[0x4022d1] memchr("\n      /* All cases after this m"..., '\n', 1270) = 0x00f0ce6e
[0x4022d1] memchr("      /* All cases after this ma"..., '\n', 1269) = 0x00f0ceb4
[0x4022d1] memchr("         `continue'.  */\n\n\n\tcase"..., '\n', 1199) = 0x00f0cecd
[0x4022d1] memchr("\n\n\tcase before_dot:\n\tcase at_dot"..., '\n', 1174) = 0x00f0cece
[0x4022d1] memchr("\n\tcase before_dot:\n\tcase at_dot:"..., '\n', 1173) = 0x00f0cecf
[0x4022d1] memchr("\tcase before_dot:\n\tcase at_dot:\n"..., '\n', 1172) = 0x00f0cee1
[0x4022d1] memchr("\tcase at_dot:\n\tcase after_dot:\n "..., '\n', 1154) = 0x00f0ceef
[0x4022d1] memchr("\tcase after_dot:\n          conti"..., '\n', 1140) = 0x00f0cf00
[0x4022d1] memchr("          continue;\n#endif /* no"..., '\n', 1123) = 0x00f0cf14
[0x4022d1] memchr("#endif /* not emacs */\n\n\n       "..., '\n', 1103) = 0x00f0cf2b
[0x4022d1] memchr("\n\n        case no_op:\n        ca"..., '\n', 1080) = 0x00f0cf2c
[0x4022d1] memchr("\n        case no_op:\n        cas"..., '\n', 1079) = 0x00f0cf2d
[0x4022d1] memchr("        case no_op:\n        case"..., '\n', 1078) = 0x00f0cf41
[0x4022d1] memchr("        case begline:\n        ca"..., '\n', 1058) = 0x00f0cf57
[0x4022d1] memchr("        case endline:\n\tcase begb"..., '\n', 1036) = 0x00f0cf6d
[0x4022d1] memchr("\tcase begbuf:\n\tcase endbuf:\n\tcas"..., '\n', 1014) = 0x00f0cf7b
[0x4022d1] memchr("\tcase endbuf:\n\tcase wordbound:\n\t"..., '\n', 1000) = 0x00f0cf89
[0x4022d1] memchr("\tcase wordbound:\n\tcase notwordbo"..., '\n', 986) = 0x00f0cf9a
[0x4022d1] memchr("\tcase notwordbound:\n\tcase wordbe"..., '\n', 969) = 0x00f0cfae
[0x4022d1] memchr("\tcase wordbeg:\n\tcase wordend:\n  "..., '\n', 949) = 0x00f0cfbd
[0x4022d1] memchr("\tcase wordend:\n        case push"..., '\n', 934) = 0x00f0cfcc
[0x4022d1] memchr("        case push_dummy_failure:"..., '\n', 919) = 0x00f0cfed
[0x4022d1] memchr("          continue;\n\n\n\tcase jump"..., '\n', 886) = 0x00f0d001
[0x4022d1] memchr("\n\n\tcase jump_n:\n        case pop"..., '\n', 866) = 0x00f0d002
[0x4022d1] memchr("\n\tcase jump_n:\n        case pop_"..., '\n', 865) = 0x00f0d003
[0x4022d1] memchr("\tcase jump_n:\n        case pop_f"..., '\n', 864) = 0x00f0d011
[0x4022d1] memchr("        case pop_failure_jump:\n\t"..., '\n', 850) = 0x00f0d030
[0x4022d1] memchr("\tcase maybe_pop_jump:\n\tcase jump"..., '\n', 819) = 0x00f0d046
[0x4022d1] memchr("\tcase jump:\n        case jump_pa"..., '\n', 797) = 0x00f0d052
[0x4022d1] memchr("        case jump_past_alt:\n\tcas"..., '\n', 785) = 0x00f0d06e
[0x4022d1] memchr("\tcase dummy_failure_jump:\n      "..., '\n', 757) = 0x00f0d088
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 731) = 0x00f0d0b2
[0x4022d1] memchr("\t  p += j;\t\n\t  if (j > 0)\n\t    c"..., '\n', 689) = 0x00f0d0be
[0x4022d1] memchr("\t  if (j > 0)\n\t    continue;\n   "..., '\n', 677) = 0x00f0d0cc
[0x4022d1] memchr("\t    continue;\n            \n    "..., '\n', 663) = 0x00f0d0db
[0x4022d1] memchr("            \n          /* Jump b"..., '\n', 648) = 0x00f0d0e8
[0x4022d1] memchr("          /* Jump backward impli"..., '\n', 635) = 0x00f0d12e
[0x4022d1] memchr("             loop and matched no"..., '\n', 565) = 0x00f0d171
[0x4022d1] memchr("             `on_failure_jump' o"..., '\n', 498) = 0x00f0d1b7
[0x4022d1] memchr("             ordinary jump.  For"..., '\n', 428) = 0x00f0d1fc
[0x4022d1] memchr("             point already; if s"..., '\n', 359) = 0x00f0d23e
[0x4022d1] memchr("          if ((re_opcode_t) *p !"..., '\n', 293) = 0x00f0d270
[0x4022d1] memchr("\t      && (re_opcode_t) *p != su"..., '\n', 243) = 0x00f0d299
[0x4022d1] memchr("\t    continue;\n\n          p++;\n "..., '\n', 202) = 0x00f0d2a8
[0x4022d1] memchr("\n          p++;\n          EXTRAC"..., '\n', 187) = 0x00f0d2a9
[0x4022d1] memchr("          p++;\n          EXTRACT"..., '\n', 186) = 0x00f0d2b8
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 171) = 0x00f0d2e2
[0x4022d1] memchr("          p += j;\t\t\n\t  \n        "..., '\n', 129) = 0x00f0d2f6
[0x4022d1] memchr("\t  \n          /* If what's on th"..., '\n', 109) = 0x00f0d2fa
[0x4022d1] memchr("          /* If what's on the st"..., '\n', 105) = 0x00f0d33f
[0x4022d1] memchr("          if (!FAIL_STACK_EMPTY "..., '\n', 36) = 0x00f0d363
[0x4022d1] memchr("\t      && fail_stack.stack[fail_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4366:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      && fail_stack.stack[fail_"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            fail_stack.avail--;\n"..., '1', 3169) = 0x00f0d6ec
[0x40cdf3] memchr("1;\n\n          if (succeed_n_p)\n "..., '\n', 2320) = 0x00f0d6ee
[0x4022d1] memchr("            fail_stack.avail--;\n"..., '\n', 817) = 0x00f0d3ba
[0x4022d1] memchr("\n          continue;\n\n\n        c"..., '\n', 785) = 0x00f0d3bb
[0x4022d1] memchr("          continue;\n\n\n        ca"..., '\n', 784) = 0x00f0d3cf
[0x4022d1] memchr("\n\n        case on_failure_jump:\n"..., '\n', 764) = 0x00f0d3d0
[0x4022d1] memchr("\n        case on_failure_jump:\n "..., '\n', 763) = 0x00f0d3d1
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 762) = 0x00f0d3ef
[0x4022d1] memchr("        case on_failure_keep_str"..., '\n', 732) = 0x00f0d419
[0x4022d1] memchr("\thandle_on_failure_jump:\n       "..., '\n', 690) = 0x00f0d432
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 665) = 0x00f0d45c
[0x4022d1] memchr("\n          /* For some patterns,"..., '\n', 623) = 0x00f0d45d
[0x4022d1] memchr("          /* For some patterns, "..., '\n', 622) = 0x00f0d4a5
[0x4022d1] memchr("             end of the pattern."..., '\n', 550) = 0x00f0d4eb
[0x4022d1] memchr("             since when we resto"..., '\n', 480) = 0x00f0d531
[0x4022d1] memchr("             increment `p' past "..., '\n', 410) = 0x00f0d578
[0x4022d1] memchr("             to push such a poin"..., '\n', 339) = 0x00f0d5c1
[0x4022d1] memchr("             fastmap entries bey"..., '\n', 266) = 0x00f0d607
[0x4022d1] memchr("             the null string, th"..., '\n', 196) = 0x00f0d631
[0x4022d1] memchr("          if (p + j < pend)\n    "..., '\n', 154) = 0x00f0d64d
[0x4022d1] memchr("            {\n              if ("..., '\n', 126) = 0x00f0d65b
[0x4022d1] memchr("              if (!PUSH_PATTERN_"..., '\n', 112) = 0x00f0d693
[0x4022d1] memchr("                return -2;\n     "..., '\n', 56) = 0x00f0d6ae
[0x4022d1] memchr("            }\n          else\n   "..., '\n', 29) = 0x00f0d6bc
[0x4022d1] memchr("          else\n            bufp-"..., '\n', 15) = 0x00f0d6cb
[0x4022d1] memchr("            bufp->can_be_null = "..., '\n', 0) = NULL
[0x4023cc] fwrite("4390:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            bufp->can_be_null = "..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          if (succeed_n_p)\n    "..., '1', 2317) = NULL
[0x4022d1] memchr("\n          if (succeed_n_p)\n    "..., '\n', 2317) = 0x00f0d6ef
[0x4022d1] memchr("          if (succeed_n_p)\n     "..., '\n', 2316) = 0x00f0d70a
[0x4022d1] memchr("            {\n              EXTR"..., '\n', 2289) = 0x00f0d718
[0x4022d1] memchr("              EXTRACT_NUMBER_AND"..., '\n', 2275) = 0x00f0d759
[0x4022d1] memchr("              succeed_n_p = fals"..., '\n', 2210) = 0x00f0d77c
[0x4022d1] memchr("\t    }\n\n          continue;\n\n\n\tc"..., '\n', 2175) = 0x00f0d783
[0x4022d1] memchr("\n          continue;\n\n\n\tcase suc"..., '\n', 2168) = 0x00f0d784
[0x4022d1] memchr("          continue;\n\n\n\tcase succ"..., '\n', 2167) = 0x00f0d798
[0x4022d1] memchr("\n\n\tcase succeed_n:\n          /* "..., '\n', 2147) = 0x00f0d799
[0x4022d1] memchr("\n\tcase succeed_n:\n          /* G"..., '\n', 2146) = 0x00f0d79a
[0x4022d1] memchr("\tcase succeed_n:\n          /* Ge"..., '\n', 2145) = 0x00f0d7ab
[0x4022d1] memchr("          /* Get to the number o"..., '\n', 2128) = 0x00f0d7e3
[0x4022d1] memchr("          p += 2;\t\t\n\n          /"..., '\n', 2072) = 0x00f0d7f7
[0x4022d1] memchr("\n          /* Increment p past t"..., '\n', 2052) = 0x00f0d7f8
[0x4022d1] memchr("          /* Increment p past th"..., '\n', 2051) = 0x00f0d831
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 1994) = 0x00f0d85b
[0x4022d1] memchr("          if (k == 0)\n\t    {\n   "..., '\n', 1952) = 0x00f0d871
[0x4022d1] memchr("\t    {\n              p -= 4;\n  \t"..., '\n', 1930) = 0x00f0d878
[0x4022d1] memchr("              p -= 4;\n  \t      s"..., '\n', 1923) = 0x00f0d88e
[0x4022d1] memchr("  \t      succeed_n_p = true;  /*"..., '\n', 1901) = 0x00f0d8c9
[0x4022d1] memchr("              goto handle_on_fai"..., '\n', 1842) = 0x00f0d8f4
[0x4022d1] memchr("            }\n          continue"..., '\n', 1799) = 0x00f0d902
[0x4022d1] memchr("          continue;\n\n\n\tcase set_"..., '\n', 1785) = 0x00f0d916
[0x4022d1] memchr("\n\n\tcase set_number_at:\n         "..., '\n', 1765) = 0x00f0d917
[0x4022d1] memchr("\n\tcase set_number_at:\n          "..., '\n', 1764) = 0x00f0d918
[0x4022d1] memchr("\tcase set_number_at:\n          p"..., '\n', 1763) = 0x00f0d92d
[0x4022d1] memchr("          p += 4;\n          cont"..., '\n', 1742) = 0x00f0d93f
[0x4022d1] memchr("          continue;\n\n\n\tcase star"..., '\n', 1724) = 0x00f0d953
[0x4022d1] memchr("\n\n\tcase start_memory:\n        ca"..., '\n', 1704) = 0x00f0d954
[0x4022d1] memchr("\n\tcase start_memory:\n        cas"..., '\n', 1703) = 0x00f0d955
[0x4022d1] memchr("\tcase start_memory:\n        case"..., '\n', 1702) = 0x00f0d969
[0x4022d1] memchr("        case stop_memory:\n\t  p +"..., '\n', 1682) = 0x00f0d983
[0x4022d1] memchr("\t  p += 2;\n\t  continue;\n\n\n\tdefau"..., '\n', 1656) = 0x00f0d98e
[0x4022d1] memchr("\t  continue;\n\n\n\tdefault:\n       "..., '\n', 1645) = 0x00f0d99b
[0x4022d1] memchr("\n\n\tdefault:\n          abort (); "..., '\n', 1632) = 0x00f0d99c
[0x4022d1] memchr("\n\tdefault:\n          abort (); /"..., '\n', 1631) = 0x00f0d99d
[0x4022d1] memchr("\tdefault:\n          abort (); /*"..., '\n', 1630) = 0x00f0d9a7
[0x4022d1] memchr("          abort (); /* We have l"..., '\n', 1620) = 0x00f0d9e0
[0x4022d1] memchr("        } /* switch *p++ */\n\n   "..., '\n', 1563) = 0x00f0d9fc
[0x4022d1] memchr("\n      /* Getting here means we "..., '\n', 1535) = 0x00f0d9fd
[0x4022d1] memchr("      /* Getting here means we h"..., '\n', 1534) = 0x00f0da3d
[0x4022d1] memchr("         characters for one path"..., '\n', 1470) = 0x00f0da83
[0x4022d1] memchr("         string does not match. "..., '\n', 1400) = 0x00f0daca
[0x4022d1] memchr("         Instead, look at the ne"..., '\n', 1329) = 0x00f0db0c
[0x4022d1] memchr("         stack), or quit if no m"..., '\n', 1263) = 0x00f0db52
[0x4022d1] memchr("         does these things.  */\n"..., '\n', 1193) = 0x00f0db72
[0x4022d1] memchr("      path_can_be_null = false;\n"..., '\n', 1161) = 0x00f0db92
[0x4022d1] memchr("      p = pend;\n    } /* while p"..., '\n', 1129) = 0x00f0dba2
[0x4022d1] memchr("    } /* while p */\n\n  /* Set `c"..., '\n', 1113) = 0x00f0dbb6
[0x4022d1] memchr("\n  /* Set `can_be_null' for the "..., '\n', 1093) = 0x00f0dbb7
[0x4022d1] memchr("  /* Set `can_be_null' for the l"..., '\n', 1092) = 0x00f0dbfd
[0x4022d1] memchr("     pattern is empty).  */\n  bu"..., '\n', 1022) = 0x00f0dc19
[0x4022d1] memchr("  bufp->can_be_null |= path_can_"..., '\n', 994) = 0x00f0dc42
[0x4022d1] memchr("  return 0;\n} /* re_compile_fast"..., '\n', 953) = 0x00f0dc4e
[0x4022d1] memchr("} /* re_compile_fastmap */\n\014\n/* "..., '\n', 941) = 0x00f0dc69
[0x4022d1] memchr("\014\n/* Set REGS to hold NUM_REGS r"..., '\n', 914) = 0x00f0dc6b
[0x4022d1] memchr("/* Set REGS to hold NUM_REGS reg"..., '\n', 912) = 0x00f0dcae
[0x4022d1] memchr("   ENDS.  Subsequent matches usi"..., '\n', 845) = 0x00f0dcf2
[0x4022d1] memchr("   this memory for recording reg"..., '\n', 777) = 0x00f0dd36
[0x4022d1] memchr("   must be allocated using the m"..., '\n', 709) = 0x00f0dd7b
[0x4022d1] memchr("   be at least NUM_REGS * sizeof"..., '\n', 640) = 0x00f0ddb3
[0x4022d1] memchr("\n   If NUM_REGS == 0, then subse"..., '\n', 584) = 0x00f0ddb4
[0x4022d1] memchr("   If NUM_REGS == 0, then subseq"..., '\n', 583) = 0x00f0ddfb
[0x4022d1] memchr("   register data.\n\n   Unless thi"..., '\n', 512) = 0x00f0de0d
[0x4022d1] memchr("\n   Unless this function is call"..., '\n', 494) = 0x00f0de0e
[0x4022d1] memchr("   Unless this function is calle"..., '\n', 493) = 0x00f0de51
[0x4022d1] memchr("   PATTERN_BUFFER will allocate "..., '\n', 426) = 0x00f0de90
[0x4022d1] memchr("   freeing the old data.  */\n\nvo"..., '\n', 363) = 0x00f0dead
[0x4022d1] memchr("\nvoid\nre_set_registers (bufp, re"..., '\n', 334) = 0x00f0deae
[0x4022d1] memchr("void\nre_set_registers (bufp, reg"..., '\n', 333) = 0x00f0deb3
[0x4022d1] memchr("re_set_registers (bufp, regs, nu"..., '\n', 328) = 0x00f0dee9
[0x4022d1] memchr("    struct re_pattern_buffer *bu"..., '\n', 274) = 0x00f0df0d
[0x4022d1] memchr("    struct re_registers *regs;\n "..., '\n', 238) = 0x00f0df2c
[0x4022d1] memchr("    unsigned num_regs;\n    regof"..., '\n', 207) = 0x00f0df43
[0x4022d1] memchr("    regoff_t *starts, *ends;\n{\n "..., '\n', 184) = 0x00f0df60
[0x4022d1] memchr("{\n  if (num_regs)\n    {\n      bu"..., '\n', 155) = 0x00f0df62
[0x4022d1] memchr("  if (num_regs)\n    {\n      bufp"..., '\n', 153) = 0x00f0df72
[0x4022d1] memchr("    {\n      bufp->regs_allocated"..., '\n', 137) = 0x00f0df78
[0x4022d1] memchr("      bufp->regs_allocated = REG"..., '\n', 131) = 0x00f0dfa6
[0x4022d1] memchr("      regs->num_regs = num_regs;"..., '\n', 85) = 0x00f0dfc7
[0x4022d1] memchr("      regs->start = starts;\n    "..., '\n', 52) = 0x00f0dfe3
[0x4022d1] memchr("      regs->end = ends;\n    ", '\n', 24) = 0x00f0dffb
[0x4022d1] memchr("    ", '\n', 0)               = NULL
[0x4020b3] memmove(0xf05ffc, 0xf0dffc, 4, 0xf0dffc, 0x7fce6d444260) = 0xf05ffc
[0x402213] read(3, "}\n  else\n    {\n      bufp->regs_"..., 32768) = 32768
[0x40bc2b] memchr("    }\n  else\n    {\n      bufp->r"..., '1', 32752) = 0x00f062a3
[0x40cdf3] memchr("1 and STRING2, starting first at"..., '\n', 32073) = 0x00f062c9
[0x4022d1] memchr("    }\n  else\n    {\n      bufp->r"..., '\n', 645) = 0x00f06001
[0x4022d1] memchr("  else\n    {\n      bufp->regs_al"..., '\n', 639) = 0x00f06008
[0x4022d1] memchr("    {\n      bufp->regs_allocated"..., '\n', 632) = 0x00f0600e
[0x4022d1] memchr("      bufp->regs_allocated = REG"..., '\n', 626) = 0x00f0603d
[0x4022d1] memchr("      regs->num_regs = 0;\n      "..., '\n', 579) = 0x00f06057
[0x4022d1] memchr("      regs->start = regs->end = "..., '\n', 553) = 0x00f06085
[0x4022d1] memchr("    }\n}\n\014\n/* Searching routines."..., '\n', 507) = 0x00f0608b
[0x4022d1] memchr("}\n\014\n/* Searching routines.  */\n\n"..., '\n', 501) = 0x00f0608d
[0x4022d1] memchr("\014\n/* Searching routines.  */\n\n/*"..., '\n', 499) = 0x00f0608f
[0x4022d1] memchr("/* Searching routines.  */\n\n/* L"..., '\n', 497) = 0x00f060aa
[0x4022d1] memchr("\n/* Like re_search_2, below, but"..., '\n', 470) = 0x00f060ab
[0x4022d1] memchr("/* Like re_search_2, below, but "..., '\n', 469) = 0x00f060ed
[0x4022d1] memchr("   doesn't let you say where to "..., '\n', 403) = 0x00f0611f
[0x4022d1] memchr("\nint\nre_search (bufp, string, si"..., '\n', 353) = 0x00f06120
[0x4022d1] memchr("int\nre_search (bufp, string, siz"..., '\n', 352) = 0x00f06124
[0x4022d1] memchr("re_search (bufp, string, size, s"..., '\n', 348) = 0x00f0615a
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 294) = 0x00f0617f
[0x4022d1] memchr("     const char *string;\n     in"..., '\n', 257) = 0x00f06198
[0x4022d1] memchr("     int size, startpos, range;\n"..., '\n', 232) = 0x00f061b8
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 200) = 0x00f061d8
[0x4022d1] memchr("{\n  return re_search_2 (bufp, NU"..., '\n', 168) = 0x00f061da
[0x4022d1] memchr("  return re_search_2 (bufp, NULL"..., '\n', 166) = 0x00f0621f
[0x4022d1] memchr("\t\t      regs, size);\n}\n\n\n/* Usin"..., '\n', 97) = 0x00f06234
[0x4022d1] memchr("}\n\n\n/* Using the compiled patter"..., '\n', 76) = 0x00f06236
[0x4022d1] memchr("\n\n/* Using the compiled pattern "..., '\n', 74) = 0x00f06237
[0x4022d1] memchr("\n/* Using the compiled pattern i"..., '\n', 73) = 0x00f06238
[0x4022d1] memchr("/* Using the compiled pattern in"..., '\n', 72) = 0x00f06280
[0x4022d1] memchr("   virtual concatenation of STRI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4500:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   virtual concatenation of STRI"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   STARTPOS, then at STARTPOS + "..., '1', 32034) = 0x00f062ea
[0x40cdf3] memchr("1, and so on.\n   \n   STRING1 and"..., '\n', 32002) = 0x00f062f7
[0x4022d1] memchr("   STARTPOS, then at STARTPOS + "..., '\n', 0) = NULL
[0x4023cc] fwrite("4501:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   STARTPOS, then at STARTPOS + "..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   \n   STRING1 and STRING2 have "..., '1', 31988) = 0x00f06305
[0x40cdf3] memchr("1 and STRING2 have length SIZE1 "..., '\n', 31975) = 0x00f0633d
[0x4022d1] memchr("   \n   STRING1 and STRING2 have "..., '\n', 4) = 0x00f062fb
[0x4022d1] memchr("   STRING1 and STRING2 have leng"..., '\n', 0) = NULL
[0x4023cc] fwrite("4503:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   STRING1 and STRING2 have leng"..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   \n   RANGE is how far to scan "..., '1', 31918) = 0x00f06421
[0x40cdf3] memchr("1\n   and STRING2 that matched th"..., '\n', 31691) = 0x00f06422
[0x4022d1] memchr("   \n   RANGE is how far to scan "..., '\n', 158) = 0x00f06341
[0x4022d1] memchr("   RANGE is how far to scan whil"..., '\n', 154) = 0x00f06389
[0x4022d1] memchr("   only at STARTPOS; in general,"..., '\n', 82) = 0x00f063cd
[0x4022d1] memchr("   RANGE.\n   \n   In REGS, return"..., '\n', 14) = 0x00f063d7
[0x4022d1] memchr("   \n   In REGS, return the indic"..., '\n', 4) = 0x00f063db
[0x4022d1] memchr("   In REGS, return the indices o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4509:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   In REGS, return the indices o"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   and STRING2 that matched the "..., '1', 31689) = 0x00f064dd
[0x40cdf3] memchr("1 and STRING2.\n\n   We return eit"..., '\n', 31503) = 0x00f064eb
[0x4022d1] memchr("   and STRING2 that matched the "..., '\n', 160) = 0x00f06468
[0x4022d1] memchr("   subexpressions.\n   \n   Do not"..., '\n', 90) = 0x00f0647b
[0x4022d1] memchr("   \n   Do not consider matching "..., '\n', 71) = 0x00f0647f
[0x4022d1] memchr("   Do not consider matching one "..., '\n', 67) = 0x00f064c2
[0x4022d1] memchr("   concatenation of STRING1 and "..., '\n', 0) = NULL
[0x4023cc] fwrite("4514:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   concatenation of STRING1 and "..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   We return either the positio"..., '1', 31488) = 0x00f0653f
[0x40cdf3] memchr("1 if no match, or -2 if error (s"..., '\n', 31405) = 0x00f0656d
[0x4022d1] memchr("\n   We return either the positio"..., '\n', 72) = 0x00f064ec
[0x4022d1] memchr("   We return either the position"..., '\n', 71) = 0x00f06533
[0x4022d1] memchr("   found, -1 if no match, or -2 "..., '\n', 0) = NULL
[0x4023cc] fwrite("4517:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   found, -1 if no match, or -2 "..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   stack overflow).  */\n\nint\nre_"..., '1', 31358) = 0x00f065a4
[0x40cdf3] memchr("1, size1, string2, size2, startp"..., '\n', 31304) = 0x00f065da
[0x4022d1] memchr("   stack overflow).  */\n\nint\nre_"..., '\n', 29) = 0x00f06585
[0x4022d1] memchr("\nint\nre_search_2 (bufp, string1,"..., '\n', 5) = 0x00f06586
[0x4022d1] memchr("int\nre_search_2 (bufp, string1, "..., '\n', 4) = 0x00f0658a
[0x4022d1] memchr("re_search_2 (bufp, string1, size"..., '\n', 0) = NULL
[0x4023cc] fwrite("4521:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("re_search_2 (bufp, string1, size"..., 1, 80, 0x7fce6d444260) = 80
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     struct re_pattern_buffer *b"..., '1', 31249) = 0x00f06617
[0x40cdf3] memchr("1, *string2;\n     int size1, siz"..., '\n', 31189) = 0x00f06623
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 37) = 0x00f065ff
[0x4022d1] memchr("     const char *string1, *strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("4523:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     const char *string1, *strin"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     int size1, size2;\n     int "..., '1', 31176) = 0x00f06631
[0x40cdf3] memchr("1, size2;\n     int startpos;\n   "..., '\n', 31163) = 0x00f0663a
[0x4022d1] memchr("     int size1, size2;\n     int "..., '\n', 0) = NULL
[0x4023cc] fwrite("4524:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     int size1, size2;\n     int "..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     int startpos;\n     int rang"..., '1', 31153) = 0x00f06709
[0x40cdf3] memchr("1 + size2;\n  int endpos = startp"..., '\n', 30947) = 0x00f06713
[0x4022d1] memchr("     int startpos;\n     int rang"..., '\n', 183) = 0x00f0664d
[0x4022d1] memchr("     int range;\n     struct re_r"..., '\n', 164) = 0x00f0665d
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 148) = 0x00f0667d
[0x4022d1] memchr("     int stop;\n{\n  int val;\n  re"..., '\n', 116) = 0x00f0668c
[0x4022d1] memchr("{\n  int val;\n  register char *fa"..., '\n', 101) = 0x00f0668e
[0x4022d1] memchr("  int val;\n  register char *fast"..., '\n', 99) = 0x00f06699
[0x4022d1] memchr("  register char *fastmap = bufp-"..., '\n', 88) = 0x00f066c3
[0x4022d1] memchr("  register char *translate = buf"..., '\n', 46) = 0x00f066f1
[0x4022d1] memchr("  int total_size = size1 + size2"..., '\n', 0) = NULL
[0x4023cc] fwrite("4533:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  int total_size = size1 + size2"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  int endpos = startpos + range;"..., '1', 30936) = 0x00f06799
[0x40cdf3] memchr("1;\n    \n  /* Fix up RANGE if it "..., '\n', 30803) = 0x00f0679b
[0x4022d1] memchr("  int endpos = startpos + range;"..., '\n', 121) = 0x00f06734
[0x4022d1] memchr("\n  /* Check for out-of-range STA"..., '\n', 88) = 0x00f06735
[0x4022d1] memchr("  /* Check for out-of-range STAR"..., '\n', 87) = 0x00f0675f
[0x4022d1] memchr("  if (startpos < 0 || startpos >"..., '\n', 45) = 0x00f0678c
[0x4022d1] memchr("    return -1;\n    \n  /* Fix up "..., '\n', 0) = NULL
[0x4023cc] fwrite("4538:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    return -1;\n    \n  /* Fix up "..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    \n  /* Fix up RANGE if it mig"..., '1', 30800) = 0x00f06802
[0x40cdf3] memchr("1 and STRING2.  */\n  if (endpos "..., '\n', 30698) = 0x00f06814
[0x4022d1] memchr("    \n  /* Fix up RANGE if it mig"..., '\n', 62) = 0x00f067a0
[0x4022d1] memchr("  /* Fix up RANGE if it might ev"..., '\n', 57) = 0x00f067d9
[0x4022d1] memchr("     the virtual concatenation o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4541:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     the virtual concatenation o"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (endpos < -1)\n    range = -"..., '1', 30679) = 0x00f06825
[0x40cdf3] memchr("1)\n    range = -1 - startpos;\n  "..., '\n', 30663) = 0x00f06827
[0x4022d1] memchr("  if (endpos < -1)\n    range = -"..., '\n', 0) = NULL
[0x4023cc] fwrite("4542:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (endpos < -1)\n    range = -"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    range = -1 - startpos;\n  els"..., '1', 30660) = 0x00f06835
[0x40cdf3] memchr("1 - startpos;\n  else if (endpos "..., '\n', 30647) = 0x00f06842
[0x4022d1] memchr("    range = -1 - startpos;\n  els"..., '\n', 0) = NULL
[0x4023cc] fwrite("4543:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    range = -1 - startpos;\n  els"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  else if (endpos > total_size)\n"..., '1', 30633) = 0x00f06977
[0x40cdf3] memchr("1;\n      else\n\trange = 1;\n    }\n"..., '\n', 30325) = 0x00f06979
[0x4022d1] memchr("  else if (endpos > total_size)\n"..., '\n', 299) = 0x00f06862
[0x4022d1] memchr("    range = total_size - startpo"..., '\n', 267) = 0x00f06885
[0x4022d1] memchr("\n  /* If the search isn't to be "..., '\n', 232) = 0x00f06886
[0x4022d1] memchr("  /* If the search isn't to be a"..., '\n', 231) = 0x00f068cc
[0x4022d1] memchr("     search for a pattern that m"..., '\n', 161) = 0x00f06901
[0x4022d1] memchr("  if (bufp->used > 0 && (re_opco"..., '\n', 108) = 0x00f0694f
[0x4022d1] memchr("    {\n      if (startpos > 0)\n\tr"..., '\n', 30) = 0x00f06955
[0x4022d1] memchr("      if (startpos > 0)\n\treturn "..., '\n', 24) = 0x00f0696d
[0x4022d1] memchr("\treturn -1;\n      else\n\trange = "..., '\n', 0) = NULL
[0x4023cc] fwrite("4552:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\treturn -1;\n      else\n\trange = "..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n\trange = 1;\n    }\n\n  "..., '1', 30322) = 0x00f0698e
[0x40cdf3] memchr("1;\n    }\n\n  /* Update the fastma"..., '\n', 30302) = 0x00f06990
[0x4022d1] memchr("      else\n\trange = 1;\n    }\n\n  "..., '\n', 11) = 0x00f06984
[0x4022d1] memchr("\trange = 1;\n    }\n\n  /* Update t"..., '\n', 0) = NULL
[0x4023cc] fwrite("4554:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\trange = 1;\n    }\n\n  /* Update t"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n\n  /* Update the fastmap n"..., '1', 30299) = 0x00f06c7d
[0x40cdf3] memchr("1 && startpos + range >= size1)\n"..., '\n', 29551) = 0x00f06c9c
[0x4022d1] memchr("    }\n\n  /* Update the fastmap n"..., '\n', 715) = 0x00f06996
[0x4022d1] memchr("\n  /* Update the fastmap now if "..., '\n', 709) = 0x00f06997
[0x4022d1] memchr("  /* Update the fastmap now if n"..., '\n', 708) = 0x00f069cf
[0x4022d1] memchr("  if (fastmap && !bufp->fastmap_"..., '\n', 652) = 0x00f069f9
[0x4022d1] memchr("    if (re_compile_fastmap (bufp"..., '\n', 610) = 0x00f06a22
[0x4022d1] memchr("      return -2;\n  \n  /* Loop th"..., '\n', 569) = 0x00f06a33
[0x4022d1] memchr("  \n  /* Loop through the string,"..., '\n', 552) = 0x00f06a36
[0x4022d1] memchr("  /* Loop through the string, lo"..., '\n', 549) = 0x00f06a7f
[0x4022d1] memchr("  for (;;)\n    { \n      /* If a "..., '\n', 476) = 0x00f06a8a
[0x4022d1] memchr("    { \n      /* If a fastmap is "..., '\n', 465) = 0x00f06a91
[0x4022d1] memchr("      /* If a fastmap is supplie"..., '\n', 458) = 0x00f06ad6
[0x4022d1] memchr("         cannot be the start of "..., '\n', 389) = 0x00f06b1d
[0x4022d1] memchr("         null string, however, w"..., '\n', 318) = 0x00f06b66
[0x4022d1] memchr("         the first null string. "..., '\n', 245) = 0x00f06b8a
[0x4022d1] memchr("      if (fastmap && startpos < "..., '\n', 209) = 0x00f06bcc
[0x4022d1] memchr("\t{\n\t  if (range > 0)\t/* Searchin"..., '\n', 143) = 0x00f06bcf
[0x4022d1] memchr("\t  if (range > 0)\t/* Searching f"..., '\n', 140) = 0x00f06bfc
[0x4022d1] memchr("\t    {\n\t      register const cha"..., '\n', 95) = 0x00f06c03
[0x4022d1] memchr("\t      register const char *d;\n\t"..., '\n', 88) = 0x00f06c22
[0x4022d1] memchr("\t      register int lim = 0;\n\t  "..., '\n', 57) = 0x00f06c3f
[0x4022d1] memchr("\t      int irange = range;\n\n    "..., '\n', 28) = 0x00f06c5a
[0x4022d1] memchr("\n              if (startpos < si"..., '\n', 1) = 0x00f06c5b
[0x4022d1] memchr("              if (startpos < siz"..., '\n', 0) = NULL
[0x4023cc] fwrite("4577:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              if (startpos < siz"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                lim = range - (s"..., '1', 29519) = 0x00f06cc0
[0x40cdf3] memchr("1 - startpos);\n\n\t      d = (star"..., '\n', 29484) = 0x00f06cce
[0x4022d1] memchr("                lim = range - (s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4578:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                lim = range - (s"..., 1, 50, 0x7fce6d444260) = 50
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t      d = (startpos >= size1 ?"..., '1', 29469) = 0x00f06cec
[0x40cdf3] memchr("1 ? string2 - size1 : string1) +"..., '\n', 29440) = 0x00f06d16
[0x4022d1] memchr("\n\t      d = (startpos >= size1 ?"..., '\n', 1) = 0x00f06ccf
[0x4022d1] memchr("\t      d = (startpos >= size1 ? "..., '\n', 0) = NULL
[0x4023cc] fwrite("4580:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      d = (startpos >= size1 ? "..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   \n              /* Written out"..., '1', 29397) = 0x00f06f1d
[0x40cdf3] memchr("1 == 0 || startpos >= size1\n    "..., '\n', 28879) = 0x00f06f38
[0x4022d1] memchr("   \n              /* Written out"..., '\n', 488) = 0x00f06d1a
[0x4022d1] memchr("              /* Written out as "..., '\n', 484) = 0x00f06d62
[0x4022d1] memchr("                 inside the loop"..., '\n', 412) = 0x00f06d88
[0x4022d1] memchr("\t      if (translate)\n          "..., '\n', 374) = 0x00f06d9e
[0x4022d1] memchr("                while (range > l"..., '\n', 352) = 0x00f06dc1
[0x4022d1] memchr("                       && !fastm"..., '\n', 317) = 0x00f06df4
[0x4022d1] memchr("\t\t\t\t   translate[(unsigned char)"..., '\n', 266) = 0x00f06e1d
[0x4022d1] memchr("                  range--;\n\t    "..., '\n', 225) = 0x00f06e38
[0x4022d1] memchr("\t      else\n                whil"..., '\n', 198) = 0x00f06e44
[0x4022d1] memchr("                while (range > l"..., '\n', 186) = 0x00f06e8a
[0x4022d1] memchr("                  range--;\n\n\t   "..., '\n', 116) = 0x00f06ea5
[0x4022d1] memchr("\n\t      startpos += irange - ran"..., '\n', 89) = 0x00f06ea6
[0x4022d1] memchr("\t      startpos += irange - rang"..., '\n', 88) = 0x00f06ec9
[0x4022d1] memchr("\t    }\n\t  else\t\t\t\t/* Searching b"..., '\n', 53) = 0x00f06ed0
[0x4022d1] memchr("\t  else\t\t\t\t/* Searching backward"..., '\n', 46) = 0x00f06ef7
[0x4022d1] memchr("\t    {\n\t      register char c = "..., '\n', 7) = 0x00f06efe
[0x4022d1] memchr("\t      register char c = (size1 "..., '\n', 0) = NULL
[0x4023cc] fwrite("4597:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      register char c = (size1 "..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                                "..., '1', 28851) = 0x00f06f73
[0x40cdf3] memchr("1] \n                            "..., '\n', 28793) = 0x00f06f76
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("4598:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                                "..., '1', 28789) = 0x00f06fa0
[0x40cdf3] memchr("1[startpos]);\n\n\t      if (!fastm"..., '\n', 28748) = 0x00f06fad
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("4599:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t      if (!fastmap[(unsigned c"..., '1', 28734) = 0x00f070b2
[0x40cdf3] memchr("1;\n\n      val = re_match_2 (bufp"..., '\n', 28474) = 0x00f070b4
[0x4022d1] memchr("\n\t      if (!fastmap[(unsigned c"..., '\n', 251) = 0x00f06fae
[0x4022d1] memchr("\t      if (!fastmap[(unsigned ch"..., '\n', 250) = 0x00f06fe2
[0x4022d1] memchr("\t\tgoto advance;\n\t    }\n\t}\n\n     "..., '\n', 198) = 0x00f06ff2
[0x4022d1] memchr("\t    }\n\t}\n\n      /* If can't mat"..., '\n', 182) = 0x00f06ff9
[0x4022d1] memchr("\t}\n\n      /* If can't match the "..., '\n', 175) = 0x00f06ffc
[0x4022d1] memchr("\n      /* If can't match the nul"..., '\n', 172) = 0x00f06ffd
[0x4022d1] memchr("      /* If can't match the null"..., '\n', 171) = 0x00f0704d
[0x4022d1] memchr("      if (range >= 0 && startpos"..., '\n', 91) = 0x00f07087
[0x4022d1] memchr("          && !bufp->can_be_null)"..., '\n', 33) = 0x00f070a8
[0x4022d1] memchr("\treturn -1;\n\n      val = re_matc"..., '\n', 0) = NULL
[0x4023cc] fwrite("4609:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\treturn -1;\n\n      val = re_matc"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      val = re_match_2 (bufp, s"..., '1', 28471) = 0x00f070da
[0x40cdf3] memchr("1, size1, string2, size2,\n\t     "..., '\n', 28434) = 0x00f070f3
[0x4022d1] memchr("\n      val = re_match_2 (bufp, s"..., '\n', 1) = 0x00f070b5
[0x4022d1] memchr("      val = re_match_2 (bufp, st"..., '\n', 0) = NULL
[0x4023cc] fwrite("4611:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      val = re_match_2 (bufp, st"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t                startpos, regs,"..., '1', 28408) = 0x00f0724e
[0x40cdf3] memchr("1;\n} /* re_search_2 */\n\014\n/* Decl"..., '\n', 28062) = 0x00f07250
[0x4022d1] memchr("\t                startpos, regs,"..., '\n', 336) = 0x00f0711b
[0x4022d1] memchr("      if (val >= 0)\n\treturn star"..., '\n', 296) = 0x00f0712f
[0x4022d1] memchr("\treturn startpos;\n        \n     "..., '\n', 276) = 0x00f07141
[0x4022d1] memchr("        \n      if (val == -2)\n\tr"..., '\n', 258) = 0x00f0714a
[0x4022d1] memchr("      if (val == -2)\n\treturn -2;"..., '\n', 249) = 0x00f0715f
[0x4022d1] memchr("\treturn -2;\n\n    advance:\n      "..., '\n', 228) = 0x00f0716b
[0x4022d1] memchr("\n    advance:\n      if (!range) "..., '\n', 216) = 0x00f0716c
[0x4022d1] memchr("    advance:\n      if (!range) \n"..., '\n', 215) = 0x00f07179
[0x4022d1] memchr("      if (!range) \n        break"..., '\n', 202) = 0x00f0718c
[0x4022d1] memchr("        break;\n      else if (ra"..., '\n', 183) = 0x00f0719b
[0x4022d1] memchr("      else if (range > 0) \n     "..., '\n', 168) = 0x00f071b6
[0x4022d1] memchr("        {\n          range--; \n  "..., '\n', 141) = 0x00f071c0
[0x4022d1] memchr("          range--; \n          st"..., '\n', 131) = 0x00f071d4
[0x4022d1] memchr("          startpos++;\n        }\n"..., '\n', 111) = 0x00f071ea
[0x4022d1] memchr("        }\n      else\n        {\n "..., '\n', 89) = 0x00f071f4
[0x4022d1] memchr("      else\n        {\n          r"..., '\n', 79) = 0x00f071ff
[0x4022d1] memchr("        {\n          range++; \n  "..., '\n', 68) = 0x00f07209
[0x4022d1] memchr("          range++; \n          st"..., '\n', 58) = 0x00f0721d
[0x4022d1] memchr("          startpos--;\n        }\n"..., '\n', 38) = 0x00f07233
[0x4022d1] memchr("        }\n    }\n  return -1;\n} /"..., '\n', 16) = 0x00f0723d
[0x4022d1] memchr("    }\n  return -1;\n} /* re_searc"..., '\n', 6) = 0x00f07243
[0x4022d1] memchr("  return -1;\n} /* re_search_2 */"..., '\n', 0) = NULL
[0x4023cc] fwrite("4633:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  return -1;\n} /* re_search_2 */"..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("} /* re_search_2 */\n\014\n/* Declara"..., '1', 28059) = 0x00f076bb
[0x40cdf3] memchr("1;\n    unsigned matched_somethin"..., '\n', 26929) = 0x00f076bd
[0x4022d1] memchr("} /* re_search_2 */\n\014\n/* Declara"..., '\n', 1105) = 0x00f07264
[0x4022d1] memchr("\014\n/* Declarations and macros for"..., '\n', 1085) = 0x00f07266
[0x4022d1] memchr("/* Declarations and macros for r"..., '\n', 1083) = 0x00f07295
[0x4022d1] memchr("\nstatic int bcmp_translate ();\ns"..., '\n', 1036) = 0x00f07296
[0x4022d1] memchr("static int bcmp_translate ();\nst"..., '\n', 1035) = 0x00f072b4
[0x4022d1] memchr("static boolean alt_match_null_st"..., '\n', 1005) = 0x00f072df
[0x4022d1] memchr("               common_op_match_n"..., '\n', 962) = 0x00f07310
[0x4022d1] memchr("               group_match_null_"..., '\n', 913) = 0x00f0733d
[0x4022d1] memchr("\n/* Structure for per-register ("..., '\n', 868) = 0x00f0733e
[0x4022d1] memchr("/* Structure for per-register (a"..., '\n', 867) = 0x00f0737c
[0x4022d1] memchr("   This must not be longer than "..., '\n', 805) = 0x00f073c1
[0x4022d1] memchr("   onto the failure stack.  Othe"..., '\n', 736) = 0x00f07405
[0x4022d1] memchr("   starting and ending positions"..., '\n', 668) = 0x00f0744d
[0x4022d1] memchr("   inner groups (which is a bits"..., '\n', 596) = 0x00f0748f
[0x4022d1] memchr("   variables.  \n   \n   We are ma"..., '\n', 530) = 0x00f0749f
[0x4022d1] memchr("   \n   We are making a (strictly"..., '\n', 514) = 0x00f074a3
[0x4022d1] memchr("   We are making a (strictly spe"..., '\n', 510) = 0x00f074ec
[0x4022d1] memchr("   the compiler will pack our bi"..., '\n', 437) = 0x00f07533
[0x4022d1] memchr("   the type of `word', i.e., is "..., '\n', 366) = 0x00f0757c
[0x4022d1] memchr("   failure stack.  */\ntypedef un"..., '\n', 293) = 0x00f07592
[0x4022d1] memchr("typedef union\n{\n  fail_stack_elt"..., '\n', 271) = 0x00f075a0
[0x4022d1] memchr("{\n  fail_stack_elt_t word;\n  str"..., '\n', 257) = 0x00f075a2
[0x4022d1] memchr("  fail_stack_elt_t word;\n  struc"..., '\n', 255) = 0x00f075bb
[0x4022d1] memchr("  struct\n  {\n      /* This field"..., '\n', 230) = 0x00f075c4
[0x4022d1] memchr("  {\n      /* This field is one i"..., '\n', 221) = 0x00f075c8
[0x4022d1] memchr("      /* This field is one if th"..., '\n', 217) = 0x00f0760d
[0x4022d1] memchr("         zero if not.  If not ye"..., '\n', 148) = 0x00f0765a
[0x4022d1] memchr("#define MATCH_NULL_UNSET_VALUE 3"..., '\n', 71) = 0x00f0767b
[0x4022d1] memchr("    unsigned match_null_string_p"..., '\n', 38) = 0x00f076a1
[0x4022d1] memchr("    unsigned is_active : 1;\n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("4663:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    unsigned is_active : 1;\n    "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    unsigned matched_something :"..., '1', 26926) = 0x00f076df
[0x40cdf3] memchr("1;\n    unsigned ever_matched_som"..., '\n', 26893) = 0x00f076e1
[0x4022d1] memchr("    unsigned matched_something :"..., '\n', 0) = NULL
[0x4023cc] fwrite("4664:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    unsigned matched_something :"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    unsigned ever_matched_someth"..., '1', 26890) = 0x00f07708
[0x40cdf3] memchr("1;\n  } bits;\n} register_info_typ"..., '\n', 26852) = 0x00f0770a
[0x4022d1] memchr("    unsigned ever_matched_someth"..., '\n', 0) = NULL
[0x4023cc] fwrite("4665:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    unsigned ever_matched_someth"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  } bits;\n} register_info_type;\n"..., '1', 26849) = 0x00f079fa
[0x40cdf3] memchr("1;\t\t\t\t\t\t\t\\\n        }\t\t\t\t\t\t\t\t\\\n  "..., '\n', 26098) = 0x00f07a04
[0x4022d1] memchr("  } bits;\n} register_info_type;\n"..., '\n', 737) = 0x00f07714
[0x4022d1] memchr("} register_info_type;\n\n#define R"..., '\n', 727) = 0x00f0772a
[0x4022d1] memchr("\n#define REG_MATCH_NULL_STRING_P"..., '\n', 705) = 0x00f0772b
[0x4022d1] memchr("#define REG_MATCH_NULL_STRING_P("..., '\n', 704) = 0x00f0776e
[0x4022d1] memchr("#define IS_ACTIVE(R)  ((R).bits."..., '\n', 637) = 0x00f07799
[0x4022d1] memchr("#define MATCHED_SOMETHING(R)  (("..., '\n', 594) = 0x00f077d4
[0x4022d1] memchr("#define EVER_MATCHED_SOMETHING(R"..., '\n', 535) = 0x00f07819
[0x4022d1] memchr("\n\n/* Call this when have matched"..., '\n', 466) = 0x00f0781a
[0x4022d1] memchr("\n/* Call this when have matched "..., '\n', 465) = 0x00f0781b
[0x4022d1] memchr("/* Call this when have matched a"..., '\n', 464) = 0x00f07864
[0x4022d1] memchr("   for the subexpressions which "..., '\n', 391) = 0x00f078ab
[0x4022d1] memchr("   that those subexprs have matc"..., '\n', 320) = 0x00f078d4
[0x4022d1] memchr("#define SET_REGS_MATCHED()\t\t\t\t\t\t"..., '\n', 279) = 0x00f078f6
[0x4022d1] memchr("  do\t\t\t\t\t\t\t\t\t\\\n    {\t\t\t\t\t\t\t\t\t\\\n "..., '\n', 245) = 0x00f07905
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      unsigned r"..., '\n', 230) = 0x00f07915
[0x4022d1] memchr("      unsigned r;\t\t\t\t\t\t\t\\\n      "..., '\n', 214) = 0x00f0792f
[0x4022d1] memchr("      for (r = lowest_active_reg"..., '\n', 188) = 0x00f07972
[0x4022d1] memchr("        {\t\t\t\t\t\t\t\t\\\n          MAT"..., '\n', 121) = 0x00f07985
[0x4022d1] memchr("          MATCHED_SOMETHING (reg"..., '\n', 102) = 0x00f079b4
[0x4022d1] memchr("            = EVER_MATCHED_SOMET"..., '\n', 55) = 0x00f079eb
[0x4022d1] memchr("            = 1;\t\t\t\t\t\t\t\\\n       "..., '\n', 0) = NULL
[0x4023cc] fwrite("4686:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            = 1;\t\t\t\t\t\t\t\\\n       "..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        }\t\t\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t"..., '1', 26087) = 0x00f07a7c
[0x40cdf3] memchr("1'\n   and `string2' into an offs"..., '\n', 25968) = 0x00f07a7e
[0x4022d1] memchr("        }\t\t\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t"..., '\n', 49) = 0x00f07a17
[0x4022d1] memchr("    }\t\t\t\t\t\t\t\t\t\\\n  while (0)\n\n\n/*"..., '\n', 30) = 0x00f07a27
[0x4022d1] memchr("  while (0)\n\n\n/* This converts P"..., '\n', 14) = 0x00f07a33
[0x4022d1] memchr("\n\n/* This converts PTR, a pointe"..., '\n', 2) = 0x00f07a34
[0x4022d1] memchr("\n/* This converts PTR, a pointer"..., '\n', 1) = 0x00f07a35
[0x4022d1] memchr("/* This converts PTR, a pointer "..., '\n', 0) = NULL
[0x4023cc] fwrite("4692:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* This converts PTR, a pointer "..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   and `string2' into an offset "..., '1', 25965) = 0x00f07b14
[0x40cdf3] memchr("1 : (ptr) - string2 + size1)\n\n/*"..., '\n', 25816) = 0x00f07b30
[0x4022d1] memchr("   and `string2' into an offset "..., '\n', 109) = 0x00f07ac5
[0x4022d1] memchr("#define POINTER_TO_OFFSET(ptr)\t\t"..., '\n', 38) = 0x00f07aeb
[0x4022d1] memchr("  (FIRST_STRING_P (ptr) ? (ptr) "..., '\n', 0) = NULL
[0x4023cc] fwrite("4695:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  (FIRST_STRING_P (ptr) ? (ptr) "..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Registers are set to a senti"..., '1', 25787) = 0x00f07b9b
[0x40cdf3] memchr("1)\n#define REG_UNSET(e) ((e) == "..., '\n', 25681) = 0x00f07b9d
[0x4022d1] memchr("\n/* Registers are set to a senti"..., '\n', 71) = 0x00f07b31
[0x4022d1] memchr("/* Registers are set to a sentin"..., '\n', 70) = 0x00f07b77
[0x4022d1] memchr("#define REG_UNSET_VALUE ((char *"..., '\n', 0) = NULL
[0x4023cc] fwrite("4698:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define REG_UNSET_VALUE ((char *"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define REG_UNSET(e) ((e) == REG"..., '1', 25678) = 0x00f07c44
[0x40cdf3] memchr("1)\n\n/* Call before fetching a ch"..., '\n', 25512) = 0x00f07c46
[0x4022d1] memchr("#define REG_UNSET(e) ((e) == REG"..., '\n', 113) = 0x00f07bcb
[0x4022d1] memchr("\n\n/* Macros for dealing with the"..., '\n', 67) = 0x00f07bcc
[0x4022d1] memchr("\n/* Macros for dealing with the "..., '\n', 66) = 0x00f07bcd
[0x4022d1] memchr("/* Macros for dealing with the s"..., '\n', 65) = 0x00f07c0d
[0x4022d1] memchr("\n#define MATCHING_IN_FIRST_STRIN"..., '\n', 1) = 0x00f07c0e
[0x4022d1] memchr("#define MATCHING_IN_FIRST_STRING"..., '\n', 0) = NULL
[0x4023cc] fwrite("4704:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define MATCHING_IN_FIRST_STRING"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Call before fetching a chara"..., '1', 25509) = 0x00f07d77
[0x40cdf3] memchr("1 => advance to string2.  */ \t\t\t"..., '\n', 25205) = 0x00f07d98
[0x4022d1] memchr("\n/* Call before fetching a chara"..., '\n', 282) = 0x00f07c47
[0x4022d1] memchr("/* Call before fetching a charac"..., '\n', 281) = 0x00f07c8b
[0x4022d1] memchr("   string2 if necessary.  */\n#de"..., '\n', 213) = 0x00f07ca8
[0x4022d1] memchr("#define PREFETCH()\t\t\t\t\t\t\t\\\n  whi"..., '\n', 184) = 0x00f07cc3
[0x4022d1] memchr("  while (d == dend)\t\t\t\t\t\t    \t\\\n"..., '\n', 157) = 0x00f07ce3
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      /* End of "..., '\n', 125) = 0x00f07cf3
[0x4022d1] memchr("      /* End of string2 => fail."..., '\n', 109) = 0x00f07d1e
[0x4022d1] memchr("      if (dend == end_match_2) \t"..., '\n', 66) = 0x00f07d45
[0x4022d1] memchr("        goto fail;\t\t\t\t\t\t\t\\\n     "..., '\n', 27) = 0x00f07d60
[0x4022d1] memchr("      /* End of string1 => advan"..., '\n', 0) = NULL
[0x4023cc] fwrite("4714:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      /* End of string1 => advan"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      d = string2;\t\t\t\t\t\t        "..., '1', 25171) = 0x00f07e3a
[0x40cdf3] memchr("1' and `string2'.  If only one s"..., '\n', 25010) = 0x00f07e74
[0x4022d1] memchr("      d = string2;\t\t\t\t\t\t        "..., '\n', 148) = 0x00f07dba
[0x4022d1] memchr("      dend = end_match_2;\t\t\t\t\t\t\\"..., '\n', 114) = 0x00f07ddb
[0x4022d1] memchr("    }\n\n\n/* Test if at very begin"..., '\n', 81) = 0x00f07de1
[0x4022d1] memchr("\n\n/* Test if at very beginning o"..., '\n', 75) = 0x00f07de2
[0x4022d1] memchr("\n/* Test if at very beginning or"..., '\n', 74) = 0x00f07de3
[0x4022d1] memchr("/* Test if at very beginning or "..., '\n', 73) = 0x00f07e2c
[0x4022d1] memchr("   of `string1' and `string2'.  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4721:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   of `string1' and `string2'.  "..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define AT_STRINGS_BEG(d) ((d) ="..., '1', 24951) = 0x00f07e9c
[0x40cdf3] memchr("1 ? string1 : string2) || !size2"..., '\n', 24912) = 0x00f07ebd
[0x4022d1] memchr("#define AT_STRINGS_BEG(d) ((d) ="..., '\n', 0) = NULL
[0x4023cc] fwrite("4722:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define AT_STRINGS_BEG(d) ((d) ="..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define AT_STRINGS_END(d) ((d) ="..., '1', 24878) = 0x00f07f6c
[0x40cdf3] memchr("1, look at\n   the first characte"..., '\n', 24704) = 0x00f07f76
[0x4022d1] memchr("#define AT_STRINGS_END(d) ((d) ="..., '\n', 114) = 0x00f07ee6
[0x4022d1] memchr("\n\n/* Test if D points to a chara"..., '\n', 73) = 0x00f07ee7
[0x4022d1] memchr("\n/* Test if D points to a charac"..., '\n', 72) = 0x00f07ee8
[0x4022d1] memchr("/* Test if D points to a charact"..., '\n', 71) = 0x00f07f2f
[0x4022d1] memchr("   two special cases to check fo"..., '\n', 0) = NULL
[0x4023cc] fwrite("4727:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   two special cases to check fo"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   the first character in string"..., '1', 24693) = 0x00f07fe9
[0x40cdf3] memchr("1.  */\n#define WORDCHAR_P(d)\t\t\t\t"..., '\n', 24579) = 0x00f07fef
[0x4022d1] memchr("   the first character in string"..., '\n', 66) = 0x00f07fb8
[0x4022d1] memchr("   string2, look at the last cha"..., '\n', 0) = NULL
[0x4023cc] fwrite("4729:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   string2, look at the last cha"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define WORDCHAR_P(d)\t\t\t\t\t\t\t\\\n  "..., '1', 24572) = 0x00f08023
[0x40cdf3] memchr("1 ? *string2\t\t\t\t\t\\\n           : "..., '\n', 24521) = 0x00f08035
[0x4022d1] memchr("#define WORDCHAR_P(d)\t\t\t\t\t\t\t\\\n  "..., '\n', 30) = 0x00f0800d
[0x4022d1] memchr("  (SYNTAX ((d) == end1 ? *string"..., '\n', 0) = NULL
[0x4023cc] fwrite("4731:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  (SYNTAX ((d) == end1 ? *string"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("           : (d) == string2 - 1 "..., '1', 24502) = 0x00f08054
[0x40cdf3] memchr("1 ? *(end1 - 1) : *(d))\t\t\t\\\n   ="..., '\n', 24472) = 0x00f0806f
[0x4022d1] memchr("           : (d) == string2 - 1 "..., '\n', 0) = NULL
[0x4023cc] fwrite("4732:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("           : (d) == string2 - 1 "..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   == Sword)\n\n/* Test if the cha"..., '1', 24444) = 0x00f08151
[0x40cdf3] memchr("1) != WORDCHAR_P (d))\n\n\n/* Free "..., '\n', 24219) = 0x00f08166
[0x4022d1] memchr("   == Sword)\n\n/* Test if the cha"..., '\n', 203) = 0x00f0807c
[0x4022d1] memchr("\n/* Test if the character before"..., '\n', 190) = 0x00f0807d
[0x4022d1] memchr("/* Test if the character before "..., '\n', 189) = 0x00f080c4
[0x4022d1] memchr("   to being word-constituent.  *"..., '\n', 118) = 0x00f080e6
[0x4022d1] memchr("#define AT_WORD_BOUNDARY(d)\t\t\t\t\t"..., '\n', 84) = 0x00f08109
[0x4022d1] memchr("  (AT_STRINGS_BEG (d) || AT_STRI"..., '\n', 49) = 0x00f0813a
[0x4022d1] memchr("   || WORDCHAR_P (d - 1) != WORD"..., '\n', 0) = NULL
[0x4023cc] fwrite("4739:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   || WORDCHAR_P (d - 1) != WORD"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n/* Free everything we malloc. "..., '1', 24197) = 0x00f08520
[0x40cdf3] memchr("1, because of\n   NUM_FAILURE_ITE"..., '\n', 23244) = 0x00f0852d
[0x4022d1] memchr("\n\n/* Free everything we malloc. "..., '\n', 900) = 0x00f08167
[0x4022d1] memchr("\n/* Free everything we malloc.  "..., '\n', 899) = 0x00f08168
[0x4022d1] memchr("/* Free everything we malloc.  *"..., '\n', 898) = 0x00f0818a
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n#define FREE"..., '\n', 864) = 0x00f0819e
[0x4022d1] memchr("#define FREE_VAR(var) if (var) f"..., '\n', 844) = 0x00f081d4
[0x4022d1] memchr("#define FREE_VARIABLES()\t\t\t\t\t\t\\\n"..., '\n', 790) = 0x00f081f4
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    FREE_VAR (f"..., '\n', 758) = 0x00f08205
[0x4022d1] memchr("    FREE_VAR (fail_stack.stack);"..., '\n', 741) = 0x00f0822c
[0x4022d1] memchr("    FREE_VAR (regstart);\t\t\t\t\t\t\\\n"..., '\n', 702) = 0x00f0824c
[0x4022d1] memchr("    FREE_VAR (regend);\t\t\t\t\t\t\t\\\n "..., '\n', 670) = 0x00f0826b
[0x4022d1] memchr("    FREE_VAR (old_regstart);\t\t\t\t"..., '\n', 639) = 0x00f0828f
[0x4022d1] memchr("    FREE_VAR (old_regend);\t\t\t\t\t\t"..., '\n', 603) = 0x00f082b1
[0x4022d1] memchr("    FREE_VAR (best_regstart);\t\t\t"..., '\n', 569) = 0x00f082d6
[0x4022d1] memchr("    FREE_VAR (best_regend);\t\t\t\t\t"..., '\n', 532) = 0x00f082f9
[0x4022d1] memchr("    FREE_VAR (reg_info);\t\t\t\t\t\t\\\n"..., '\n', 497) = 0x00f08319
[0x4022d1] memchr("    FREE_VAR (reg_dummy);\t\t\t\t\t\t\\"..., '\n', 465) = 0x00f0833a
[0x4022d1] memchr("    FREE_VAR (reg_info_dummy);\t\t"..., '\n', 432) = 0x00f08360
[0x4022d1] memchr("  } while (0)\n#else /* not REGEX"..., '\n', 394) = 0x00f0836e
[0x4022d1] memchr("#else /* not REGEX_MALLOC */\n/* "..., '\n', 380) = 0x00f0838b
[0x4022d1] memchr("/* Some MIPS systems (at least) "..., '\n', 351) = 0x00f083d3
[0x4022d1] memchr("#define FREE_VARIABLES() alloca "..., '\n', 279) = 0x00f083f7
[0x4022d1] memchr("#endif /* not REGEX_MALLOC */\n\n\n"..., '\n', 243) = 0x00f08415
[0x4022d1] memchr("\n\n/* These values must meet seve"..., '\n', 213) = 0x00f08416
[0x4022d1] memchr("\n/* These values must meet sever"..., '\n', 212) = 0x00f08417
[0x4022d1] memchr("/* These values must meet severa"..., '\n', 211) = 0x00f0845e
[0x4022d1] memchr("   register values; since we hav"..., '\n', 140) = 0x00f084a2
[0x4022d1] memchr("   we use only one byte in the p"..., '\n', 72) = 0x00f084ea
[0x4022d1] memchr("   use numbers larger than 255. "..., '\n', 0) = NULL
[0x4023cc] fwrite("4767:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   use numbers larger than 255. "..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   NUM_FAILURE_ITEMS above.  And"..., '1', 23230) = 0x00f08618
[0x40cdf3] memchr("1 << BYTEWIDTH)\n#define NO_LOWES"..., '\n', 22996) = 0x00f08627
[0x4022d1] memchr("   NUM_FAILURE_ITEMS above.  And"..., '\n', 203) = 0x00f08575
[0x4022d1] memchr("   be larger than the value for "..., '\n', 131) = 0x00f085bc
[0x4022d1] memchr("   to actually save any register"..., '\n', 60) = 0x00f085f8
[0x4022d1] memchr("#define NO_HIGHEST_ACTIVE_REG (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4771:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define NO_HIGHEST_ACTIVE_REG (1"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define NO_LOWEST_ACTIVE_REG (NO"..., '1', 22980) = 0x00f0865e
[0x40cdf3] memchr("1)\n\014\n/* Matching routines.  */\n\n"..., '\n', 22926) = 0x00f08660
[0x4022d1] memchr("#define NO_LOWEST_ACTIVE_REG (NO"..., '\n', 0) = NULL
[0x4023cc] fwrite("4772:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define NO_LOWEST_ACTIVE_REG (NO"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\014\n/* Matching routines.  */\n\n#if"..., '1', 22923) = 0x00f0885f
[0x40cdf3] memchr("1 and STRING2 (of length SIZE1\n "..., '\n', 22413) = 0x00f0887d
[0x4022d1] memchr("\014\n/* Matching routines.  */\n\n#if"..., '\n', 470) = 0x00f08662
[0x4022d1] memchr("/* Matching routines.  */\n\n#ifnd"..., '\n', 468) = 0x00f0867c
[0x4022d1] memchr("\n#ifndef emacs   /* Emacs never "..., '\n', 442) = 0x00f0867d
[0x4022d1] memchr("#ifndef emacs   /* Emacs never u"..., '\n', 441) = 0x00f086ab
[0x4022d1] memchr("/* re_match is like re_match_2 e"..., '\n', 395) = 0x00f086f4
[0x4022d1] memchr("\nint\nre_match (bufp, string, siz"..., '\n', 322) = 0x00f086f5
[0x4022d1] memchr("int\nre_match (bufp, string, size"..., '\n', 321) = 0x00f086f9
[0x4022d1] memchr("re_match (bufp, string, size, po"..., '\n', 317) = 0x00f08722
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 276) = 0x00f08747
[0x4022d1] memchr("     const char *string;\n     in"..., '\n', 239) = 0x00f08760
[0x4022d1] memchr("     int size, pos;\n     struct "..., '\n', 214) = 0x00f08774
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 194) = 0x00f08794
[0x4022d1] memchr(" {\n  return re_match_2 (bufp, NU"..., '\n', 162) = 0x00f08797
[0x4022d1] memchr("  return re_match_2 (bufp, NULL,"..., '\n', 159) = 0x00f087dc
[0x4022d1] memchr("}\n#endif /* not emacs */\n\n\n/* re"..., '\n', 90) = 0x00f087de
[0x4022d1] memchr("#endif /* not emacs */\n\n\n/* re_m"..., '\n', 88) = 0x00f087f5
[0x4022d1] memchr("\n\n/* re_match_2 matches the comp"..., '\n', 65) = 0x00f087f6
[0x4022d1] memchr("\n/* re_match_2 matches the compi"..., '\n', 64) = 0x00f087f7
[0x4022d1] memchr("/* re_match_2 matches the compil"..., '\n', 63) = 0x00f08836
[0x4022d1] memchr("   the (virtual) concatenation o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4792:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   the (virtual) concatenation o"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   and SIZE2, respectively).  We"..., '1', 22382) = 0x00f089aa
[0x40cdf3] memchr("1 if no match, -2 if an internal"..., '\n', 22082) = 0x00f089dd
[0x4022d1] memchr("   and SIZE2, respectively).  We"..., '\n', 286) = 0x00f088be
[0x4022d1] memchr("   matching at STOP.\n   \n   If R"..., '\n', 221) = 0x00f088d3
[0x4022d1] memchr("   \n   If REGS is non-null and t"..., '\n', 200) = 0x00f088d7
[0x4022d1] memchr("   If REGS is non-null and the `"..., '\n', 196) = 0x00f0891c
[0x4022d1] memchr("   store offsets for the substri"..., '\n', 127) = 0x00f08964
[0x4022d1] memchr("   documentation for exactly how"..., '\n', 55) = 0x00f0899a
[0x4022d1] memchr("\n   We return -1 if no match, -2"..., '\n', 1) = 0x00f0899b
[0x4022d1] memchr("   We return -1 if no match, -2 "..., '\n', 0) = NULL
[0x4023cc] fwrite("4800:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   We return -1 if no match, -2 "..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   failure stack overflowing).  "..., '1', 22030) = 0x00f08a5c
[0x40cdf3] memchr("1, size1, string2, size2, pos, r"..., '\n', 21904) = 0x00f08a86
[0x4022d1] memchr("   failure stack overflowing).  "..., '\n', 102) = 0x00f08a24
[0x4022d1] memchr("   matched substring.  */\n\nint\nr"..., '\n', 31) = 0x00f08a3e
[0x4022d1] memchr("\nint\nre_match_2 (bufp, string1, "..., '\n', 5) = 0x00f08a3f
[0x4022d1] memchr("int\nre_match_2 (bufp, string1, s"..., '\n', 4) = 0x00f08a43
[0x4022d1] memchr("re_match_2 (bufp, string1, size1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4805:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("re_match_2 (bufp, string1, size1"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     struct re_pattern_buffer *b"..., '1', 21861) = 0x00f08ac3
[0x40cdf3] memchr("1, *string2;\n     int size1, siz"..., '\n', 21801) = 0x00f08acf
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 37) = 0x00f08aab
[0x4022d1] memchr("     const char *string1, *strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("4807:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     const char *string1, *strin"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     int size1, size2;\n     int "..., '1', 21788) = 0x00f08add
[0x40cdf3] memchr("1, size2;\n     int pos;\n     str"..., '\n', 21775) = 0x00f08ae6
[0x4022d1] memchr("     int size1, size2;\n     int "..., '\n', 0) = NULL
[0x4023cc] fwrite("4808:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     int size1, size2;\n     int "..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     int pos;\n     struct re_reg"..., '1', 21765) = 0x00f08b62
[0x40cdf3] memchr("1;\n\n  /* Just past the end of th"..., '\n', 21642) = 0x00f08b64
[0x4022d1] memchr("     int pos;\n     struct re_reg"..., '\n', 105) = 0x00f08af4
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 91) = 0x00f08b14
[0x4022d1] memchr("     int stop;\n{\n  /* General te"..., '\n', 59) = 0x00f08b23
[0x4022d1] memchr("{\n  /* General temporaries.  */\n"..., '\n', 44) = 0x00f08b25
[0x4022d1] memchr("  /* General temporaries.  */\n  "..., '\n', 42) = 0x00f08b43
[0x4022d1] memchr("  int mcnt;\n  unsigned char *p1;"..., '\n', 12) = 0x00f08b4f
[0x4022d1] memchr("  unsigned char *p1;\n\n  /* Just "..., '\n', 0) = NULL
[0x4023cc] fwrite("4815:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  unsigned char *p1;\n\n  /* Just "..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* Just past the end of the c"..., '1', 21639) = 0x00f08baf
[0x40cdf3] memchr("1, *end2;\n\n  /* Pointers into st"..., '\n', 21565) = 0x00f08bb8
[0x4022d1] memchr("\n  /* Just past the end of the c"..., '\n', 57) = 0x00f08b65
[0x4022d1] memchr("  /* Just past the end of the co"..., '\n', 56) = 0x00f08b9d
[0x4022d1] memchr("  const char *end1, *end2;\n\n  /*"..., '\n', 0) = NULL
[0x4023cc] fwrite("4818:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  const char *end1, *end2;\n\n  /*"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* Pointers into string1 and "..., '1', 21555) = 0x00f08bd3
[0x40cdf3] memchr("1 and string2, just past the las"..., '\n', 21529) = 0x00f08c02
[0x4022d1] memchr("\n  /* Pointers into string1 and "..., '\n', 1) = 0x00f08bb9
[0x4022d1] memchr("  /* Pointers into string1 and s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4820:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  /* Pointers into string1 and s"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     each to consider matching. "..., '1', 21481) = 0x00f08c3f
[0x40cdf3] memchr("1, *end_match_2;\n\n  /* Where we "..., '\n', 21421) = 0x00f08c4f
[0x4022d1] memchr("     each to consider matching. "..., '\n', 36) = 0x00f08c26
[0x4022d1] memchr("  const char *end_match_1, *end_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4822:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  const char *end_match_1, *end_"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* Where we are in the data, "..., '1', 21404) = 0x00f0918c
[0x40cdf3] memchr("1;\n  \n  /* The currently active "..., '\n', 20064) = 0x00f0918e
[0x4022d1] memchr("\n  /* Where we are in the data, "..., '\n', 1302) = 0x00f08c50
[0x4022d1] memchr("  /* Where we are in the data, a"..., '\n', 1301) = 0x00f08c96
[0x4022d1] memchr("  const char *d, *dend;\n  \n  /* "..., '\n', 1231) = 0x00f08cae
[0x4022d1] memchr("  \n  /* Where we are in the patt"..., '\n', 1207) = 0x00f08cb1
[0x4022d1] memchr("  /* Where we are in the pattern"..., '\n', 1204) = 0x00f08cf3
[0x4022d1] memchr("  unsigned char *p = bufp->buffe"..., '\n', 1138) = 0x00f08d16
[0x4022d1] memchr("  register unsigned char *pend ="..., '\n', 1103) = 0x00f08d47
[0x4022d1] memchr("\n  /* We use this to map every c"..., '\n', 1054) = 0x00f08d48
[0x4022d1] memchr("  /* We use this to map every ch"..., '\n', 1053) = 0x00f08d83
[0x4022d1] memchr("  char *translate = bufp->transl"..., '\n', 994) = 0x00f08da8
[0x4022d1] memchr("\n  /* Failure point stack.  Each"..., '\n', 957) = 0x00f08da9
[0x4022d1] memchr("  /* Failure point stack.  Each "..., '\n', 956) = 0x00f08df1
[0x4022d1] memchr("     down the line pushes a fail"..., '\n', 884) = 0x00f08e3a
[0x4022d1] memchr("     restart, regend, and reg_in"..., '\n', 811) = 0x00f08e80
[0x4022d1] memchr("     the subexpressions we're cu"..., '\n', 741) = 0x00f08ec8
[0x4022d1] memchr("     registers, and, finally, tw"..., '\n', 669) = 0x00f08f0f
[0x4022d1] memchr("     to resume scanning the patt"..., '\n', 598) = 0x00f08f56
[0x4022d1] memchr("     scanning the strings.  If t"..., '\n', 527) = 0x00f08f9e
[0x4022d1] memchr("     a ``dummy''; if a failure h"..., '\n', 455) = 0x00f08fe7
[0x4022d1] memchr("     it gets discarded and the n"..., '\n', 382) = 0x00f09022
[0x4022d1] memchr("  fail_stack_type fail_stack;\n#i"..., '\n', 323) = 0x00f09040
[0x4022d1] memchr("#ifdef DEBUG\n  static unsigned f"..., '\n', 293) = 0x00f0904d
[0x4022d1] memchr("  static unsigned failure_id = 0"..., '\n', 280) = 0x00f0906f
[0x4022d1] memchr("  unsigned nfailure_points_pushe"..., '\n', 246) = 0x00f090b2
[0x4022d1] memchr("#endif\n\n  /* We fill all the reg"..., '\n', 179) = 0x00f090b9
[0x4022d1] memchr("\n  /* We fill all the registers "..., '\n', 172) = 0x00f090ba
[0x4022d1] memchr("  /* We fill all the registers i"..., '\n', 171) = 0x00f090fc
[0x4022d1] memchr("     return, for use in backrefe"..., '\n', 105) = 0x00f0913e
[0x4022d1] memchr("     an element for register zer"..., '\n', 39) = 0x00f09165
[0x4022d1] memchr("  unsigned num_regs = bufp->re_n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4852:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  unsigned num_regs = bufp->re_n"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  /* The currently active reg"..., '1', 20061) = 0x00f09bcf
[0x40cdf3] memchr("1 ("\\n\\nEntering re_match_2.\\n")"..., '\n', 17437) = 0x00f09bf0
[0x4022d1] memchr("  \n  /* The currently active reg"..., '\n', 2611) = 0x00f09191
[0x4022d1] memchr("  /* The currently active regist"..., '\n', 2608) = 0x00f091ba
[0x4022d1] memchr("  unsigned lowest_active_reg = N"..., '\n', 2567) = 0x00f091ef
[0x4022d1] memchr("  unsigned highest_active_reg = "..., '\n', 2514) = 0x00f09226
[0x4022d1] memchr("\n  /* Information on the content"..., '\n', 2459) = 0x00f09227
[0x4022d1] memchr("  /* Information on the contents"..., '\n', 2458) = 0x00f0926e
[0x4022d1] memchr("     the input strings; they rec"..., '\n', 2387) = 0x00f092b1
[0x4022d1] memchr("     attempt) by a subexpression"..., '\n', 2320) = 0x00f092f4
[0x4022d1] memchr("     regnum-th regstart pointer "..., '\n', 2253) = 0x00f0933c
[0x4022d1] memchr("     matching and the regnum-th "..., '\n', 2181) = 0x00f09382
[0x4022d1] memchr("     stopped matching the regnum"..., '\n', 2111) = 0x00f093cb
[0x4022d1] memchr("     keeps track of what the who"..., '\n', 2038) = 0x00f09404
[0x4022d1] memchr("  const char **regstart, **regen"..., '\n', 1981) = 0x00f09427
[0x4022d1] memchr("\n  /* If a group that's operated"..., '\n', 1946) = 0x00f09428
[0x4022d1] memchr("  /* If a group that's operated "..., '\n', 1945) = 0x00f0946f
[0x4022d1] memchr("     match anything, then the re"..., '\n', 1874) = 0x00f094b4
[0x4022d1] memchr("     restored because it will ha"..., '\n', 1805) = 0x00f094fd
[0x4022d1] memchr("     are when we last see its op"..., '\n', 1732) = 0x00f09541
[0x4022d1] memchr("     register's end.  */\n  const"..., '\n', 1664) = 0x00f0955a
[0x4022d1] memchr("  const char **old_regstart, **o"..., '\n', 1639) = 0x00f09585
[0x4022d1] memchr("\n  /* The is_active field of reg"..., '\n', 1596) = 0x00f09586
[0x4022d1] memchr("  /* The is_active field of reg_"..., '\n', 1595) = 0x00f095d2
[0x4022d1] memchr("     nested) subexpressions we a"..., '\n', 1519) = 0x00f09619
[0x4022d1] memchr("     field of reg_info[reg_num] "..., '\n', 1448) = 0x00f0965e
[0x4022d1] memchr("     matched any of the pattern "..., '\n', 1379) = 0x00f096a6
[0x4022d1] memchr("     subexpression.  These two f"..., '\n', 1307) = 0x00f096ec
[0x4022d1] memchr("     loop their register is in. "..., '\n', 1237) = 0x00f09710
[0x4022d1] memchr("  register_info_type *reg_info; "..., '\n', 1201) = 0x00f09731
[0x4022d1] memchr("\n  /* The following record the r"..., '\n', 1168) = 0x00f09732
[0x4022d1] memchr("  /* The following record the re"..., '\n', 1167) = 0x00f09774
[0x4022d1] memchr("     variables when we find a ma"..., '\n', 1101) = 0x00f097bc
[0x4022d1] memchr("     This happens as we backtrac"..., '\n', 1029) = 0x00f09803
[0x4022d1] memchr("     turn happens only if we hav"..., '\n', 958) = 0x00f0984b
[0x4022d1] memchr("  unsigned best_regs_set = false"..., '\n', 886) = 0x00f0986d
[0x4022d1] memchr("  const char **best_regstart, **"..., '\n', 852) = 0x00f0989a
[0x4022d1] memchr("  \n  /* Logically, this is `best"..., '\n', 807) = 0x00f0989d
[0x4022d1] memchr("  /* Logically, this is `best_re"..., '\n', 804) = 0x00f098e5
[0x4022d1] memchr("     allocate space for that if "..., '\n', 732) = 0x00f0992d
[0x4022d1] memchr("     else (see below).  Also, we"..., '\n', 660) = 0x00f09973
[0x4022d1] memchr("     any of the other register v"..., '\n', 590) = 0x00f099bb
[0x4022d1] memchr("     treat `best_regend' differe"..., '\n', 518) = 0x00f09a04
[0x4022d1] memchr("     the end of the best match s"..., '\n', 445) = 0x00f09a46
[0x4022d1] memchr("     initialize this to NULL so "..., '\n', 379) = 0x00f09a8c
[0x4022d1] memchr("     and need to test it, it's n"..., '\n', 309) = 0x00f09abc
[0x4022d1] memchr("  const char *match_end = NULL;\n"..., '\n', 261) = 0x00f09adc
[0x4022d1] memchr("\n  /* Used when we pop values we"..., '\n', 229) = 0x00f09add
[0x4022d1] memchr("  /* Used when we pop values we "..., '\n', 228) = 0x00f09b13
[0x4022d1] memchr("  const char **reg_dummy;\n  regi"..., '\n', 174) = 0x00f09b2d
[0x4022d1] memchr("  register_info_type *reg_info_d"..., '\n', 148) = 0x00f09b53
[0x4022d1] memchr("\n#ifdef DEBUG\n  /* Counts the to"..., '\n', 110) = 0x00f09b54
[0x4022d1] memchr("#ifdef DEBUG\n  /* Counts the tot"..., '\n', 109) = 0x00f09b61
[0x4022d1] memchr("  /* Counts the total number of "..., '\n', 96) = 0x00f09b97
[0x4022d1] memchr("  unsigned num_regs_pushed = 0; "..., '\n', 42) = 0x00f09bb9
[0x4022d1] memchr("#endif\n\n  DEBUG_PRINT1 ("\\n\\nEnt"..., '\n', 8) = 0x00f09bc0
[0x4022d1] memchr("\n  DEBUG_PRINT1 ("\\n\\nEntering r"..., '\n', 1) = 0x00f09bc1
[0x4022d1] memchr("  DEBUG_PRINT1 ("\\n\\nEntering re"..., '\n', 0) = NULL
[0x4023cc] fwrite("4908:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("\\n\\nEntering re"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  INIT_FAIL_STACK ();\n  \n  /*"..., '1', 17403) = 0x00f0a211
[0x40cdf3] memchr("1 + size2)\n    {\n      FREE_VARI"..., '\n', 15835) = 0x00f0a21b
[0x4022d1] memchr("  \n  INIT_FAIL_STACK ();\n  \n  /*"..., '\n', 1541) = 0x00f09bf3
[0x4022d1] memchr("  INIT_FAIL_STACK ();\n  \n  /* Do"..., '\n', 1538) = 0x00f09c09
[0x4022d1] memchr("  \n  /* Do not bother to initial"..., '\n', 1516) = 0x00f09c0c
[0x4022d1] memchr("  /* Do not bother to initialize"..., '\n', 1513) = 0x00f09c55
[0x4022d1] memchr("     no groups in the pattern, a"..., '\n', 1440) = 0x00f09c9b
[0x4022d1] memchr("     there are groups, we includ"..., '\n', 1370) = 0x00f09cdd
[0x4022d1] memchr("     pattern), even though we ne"..., '\n', 1304) = 0x00f09d21
[0x4022d1] memchr("     array indexing.  We should "..., '\n', 1236) = 0x00f09d4f
[0x4022d1] memchr("  if (bufp->re_nsub)\n    {\n     "..., '\n', 1190) = 0x00f09d64
[0x4022d1] memchr("    {\n      regstart = REGEX_TAL"..., '\n', 1169) = 0x00f09d6a
[0x4022d1] memchr("      regstart = REGEX_TALLOC (n"..., '\n', 1163) = 0x00f09da2
[0x4022d1] memchr("      regend = REGEX_TALLOC (num"..., '\n', 1107) = 0x00f09dd8
[0x4022d1] memchr("      old_regstart = REGEX_TALLO"..., '\n', 1053) = 0x00f09e14
[0x4022d1] memchr("      old_regend = REGEX_TALLOC "..., '\n', 993) = 0x00f09e4e
[0x4022d1] memchr("      best_regstart = REGEX_TALL"..., '\n', 935) = 0x00f09e8b
[0x4022d1] memchr("      best_regend = REGEX_TALLOC"..., '\n', 874) = 0x00f09ec6
[0x4022d1] memchr("      reg_info = REGEX_TALLOC (n"..., '\n', 815) = 0x00f09f04
[0x4022d1] memchr("      reg_dummy = REGEX_TALLOC ("..., '\n', 753) = 0x00f09f3d
[0x4022d1] memchr("      reg_info_dummy = REGEX_TAL"..., '\n', 696) = 0x00f09f81
[0x4022d1] memchr("\n      if (!(regstart && regend "..., '\n', 628) = 0x00f09f82
[0x4022d1] memchr("      if (!(regstart && regend &"..., '\n', 627) = 0x00f09fcc
[0x4022d1] memchr("            && best_regstart && "..., '\n', 553) = 0x00f0a01a
[0x4022d1] memchr("        {\n          FREE_VARIABL"..., '\n', 475) = 0x00f0a024
[0x4022d1] memchr("          FREE_VARIABLES ();\n   "..., '\n', 465) = 0x00f0a041
[0x4022d1] memchr("          return -2;\n        }\n "..., '\n', 436) = 0x00f0a056
[0x4022d1] memchr("        }\n    }\n#ifdef REGEX_MAL"..., '\n', 415) = 0x00f0a060
[0x4022d1] memchr("    }\n#ifdef REGEX_MALLOC\n  else"..., '\n', 405) = 0x00f0a066
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n  else\n    {"..., '\n', 399) = 0x00f0a07a
[0x4022d1] memchr("  else\n    {\n      /* We must in"..., '\n', 379) = 0x00f0a081
[0x4022d1] memchr("    {\n      /* We must initializ"..., '\n', 372) = 0x00f0a087
[0x4022d1] memchr("      /* We must initialize all "..., '\n', 366) = 0x00f0a0c6
[0x4022d1] memchr("         `FREE_VARIABLES' doesn'"..., '\n', 303) = 0x00f0a0fe
[0x4022d1] memchr("      regstart = regend = old_re"..., '\n', 247) = 0x00f0a142
[0x4022d1] memchr("        = best_regend = reg_dumm"..., '\n', 179) = 0x00f0a16c
[0x4022d1] memchr("      reg_info = reg_info_dummy "..., '\n', 137) = 0x00f0a1ab
[0x4022d1] memchr("    }\n#endif /* REGEX_MALLOC */\n"..., '\n', 74) = 0x00f0a1b1
[0x4022d1] memchr("#endif /* REGEX_MALLOC */\n\n  /* "..., '\n', 68) = 0x00f0a1cb
[0x4022d1] memchr("\n  /* The starting position is b"..., '\n', 42) = 0x00f0a1cc
[0x4022d1] memchr("  /* The starting position is bo"..., '\n', 41) = 0x00f0a1f5
[0x4022d1] memchr("  if (pos < 0 || pos > size1 + s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4948:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (pos < 0 || pos > size1 + s"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      FREE_VARIABLES ();\n "..., '1', 15824) = 0x00f0a249
[0x40cdf3] memchr("1;\n    }\n    \n  /* Initialize su"..., '\n', 15779) = 0x00f0a24b
[0x4022d1] memchr("    {\n      FREE_VARIABLES ();\n "..., '\n', 31) = 0x00f0a221
[0x4022d1] memchr("      FREE_VARIABLES ();\n      r"..., '\n', 25) = 0x00f0a23a
[0x4022d1] memchr("      return -1;\n    }\n    \n  /*"..., '\n', 0) = NULL
[0x4023cc] fwrite("4951:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      return -1;\n    }\n    \n  /*"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n    \n  /* Initialize subex"..., '1', 15776) = 0x00f0a288
[0x40cdf3] memchr("1 to mark ones that no\n     star"..., '\n', 15716) = 0x00f0a29e
[0x4022d1] memchr("    }\n    \n  /* Initialize subex"..., '\n', 11) = 0x00f0a251
[0x4022d1] memchr("    \n  /* Initialize subexpressi"..., '\n', 5) = 0x00f0a256
[0x4022d1] memchr("  /* Initialize subexpression te"..., '\n', 0) = NULL
[0x4023cc] fwrite("4954:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  /* Initialize subexpression te"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     start_memory/stop_memory ha"..., '1', 15693) = 0x00f0a318
[0x40cdf3] memchr("1; mcnt < num_regs; mcnt++)\n    "..., '\n', 15572) = 0x00f0a333
[0x4022d1] memchr("     start_memory/stop_memory ha"..., '\n', 107) = 0x00f0a2e3
[0x4022d1] memchr("     register information struct"..., '\n', 38) = 0x00f0a309
[0x4022d1] memchr("  for (mcnt = 1; mcnt < num_regs"..., '\n', 0) = NULL
[0x4023cc] fwrite("4957:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  for (mcnt = 1; mcnt < num_regs"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      regstart[mcnt] = reg"..., '1', 15544) = 0x00f0a498
[0x40cdf3] memchr("1' into `string2' if the latter'"..., '\n', 15188) = 0x00f0a4cd
[0x4022d1] memchr("    {\n      regstart[mcnt] = reg"..., '\n', 336) = 0x00f0a339
[0x4022d1] memchr("      regstart[mcnt] = regend[mc"..., '\n', 330) = 0x00f0a35e
[0x4022d1] memchr("        = old_regstart[mcnt] = o"..., '\n', 293) = 0x00f0a3a1
[0x4022d1] memchr("        \n      REG_MATCH_NULL_ST"..., '\n', 226) = 0x00f0a3aa
[0x4022d1] memchr("      REG_MATCH_NULL_STRING_P (r"..., '\n', 217) = 0x00f0a3f3
[0x4022d1] memchr("      IS_ACTIVE (reg_info[mcnt])"..., '\n', 144) = 0x00f0a419
[0x4022d1] memchr("      MATCHED_SOMETHING (reg_inf"..., '\n', 106) = 0x00f0a447
[0x4022d1] memchr("      EVER_MATCHED_SOMETHING (re"..., '\n', 60) = 0x00f0a47a
[0x4022d1] memchr("    }\n  \n  /* We move `string1' "..., '\n', 9) = 0x00f0a480
[0x4022d1] memchr("  \n  /* We move `string1' into `"..., '\n', 3) = 0x00f0a483
[0x4022d1] memchr("  /* We move `string1' into `str"..., '\n', 0) = NULL
[0x4023cc] fwrite("4968:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  /* We move `string1' into `str"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     `string1' is null.  */\n  if"..., '1', 15134) = 0x00f0a4da
[0x40cdf3] memchr("1' is null.  */\n  if (size2 == 0"..., '\n', 15122) = 0x00f0a4e9
[0x4022d1] memchr("     `string1' is null.  */\n  if"..., '\n', 0) = NULL
[0x4023cc] fwrite("4969:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     `string1' is null.  */\n  if"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (size2 == 0 && string1 != N"..., '1', 15106) = 0x00f0a504
[0x40cdf3] memchr("1 != NULL)\n    {\n      string2 ="..., '\n', 15080) = 0x00f0a50e
[0x4022d1] memchr("  if (size2 == 0 && string1 != N"..., '\n', 0) = NULL
[0x4023cc] fwrite("4970:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (size2 == 0 && string1 != N"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      string2 = string1;\n "..., '1', 15069) = 0x00f0a52b
[0x40cdf3] memchr("1;\n      size2 = size1;\n      st"..., '\n', 15041) = 0x00f0a52d
[0x4022d1] memchr("    {\n      string2 = string1;\n "..., '\n', 6) = 0x00f0a514
[0x4022d1] memchr("      string2 = string1;\n      s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4972:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      string2 = string1;\n      s"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      size2 = size1;\n      strin"..., '1', 15038) = 0x00f0a540
[0x40cdf3] memchr("1;\n      string1 = 0;\n      size"..., '\n', 15020) = 0x00f0a542
[0x4022d1] memchr("      size2 = size1;\n      strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("4973:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      size2 = size1;\n      strin"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      string1 = 0;\n      size1 ="..., '1', 15017) = 0x00f0a54f
[0x40cdf3] memchr("1 = 0;\n      size1 = 0;\n    }\n  "..., '\n', 15005) = 0x00f0a555
[0x4022d1] memchr("      string1 = 0;\n      size1 ="..., '\n', 0) = NULL
[0x4023cc] fwrite("4974:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      string1 = 0;\n      size1 ="..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      size1 = 0;\n    }\n  end1 = "..., '1', 14998) = 0x00f0a560
[0x40cdf3] memchr("1 = 0;\n    }\n  end1 = string1 + "..., '\n', 14988) = 0x00f0a566
[0x4022d1] memchr("      size1 = 0;\n    }\n  end1 = "..., '\n', 0) = NULL
[0x4023cc] fwrite("4975:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      size1 = 0;\n    }\n  end1 = "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  end1 = string1 + size1;\n"..., '1', 14981) = 0x00f0a572
[0x40cdf3] memchr("1 = string1 + size1;\n  end2 = st"..., '\n', 14970) = 0x00f0a586
[0x4022d1] memchr("    }\n  end1 = string1 + size1;\n"..., '\n', 6) = 0x00f0a56c
[0x4022d1] memchr("  end1 = string1 + size1;\n  end2"..., '\n', 0) = NULL
[0x4023cc] fwrite("4977:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  end1 = string1 + size1;\n  end2"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  end2 = string2 + size2;\n\n  /* "..., '1', 14949) = 0x00f0a5f5
[0x40cdf3] memchr("1)\n    {\n      end_match_1 = str"..., '\n', 14839) = 0x00f0a5f7
[0x4022d1] memchr("  end2 = string2 + size2;\n\n  /* "..., '\n', 92) = 0x00f0a5a0
[0x4022d1] memchr("\n  /* Compute where to stop matc"..., '\n', 66) = 0x00f0a5a1
[0x4022d1] memchr("  /* Compute where to stop match"..., '\n', 65) = 0x00f0a5e2
[0x4022d1] memchr("  if (stop <= size1)\n    {\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("4981:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (stop <= size1)\n    {\n     "..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      end_match_1 = string"..., '1', 14836) = 0x00f0a60e
[0x40cdf3] memchr("1 = string1 + stop;\n      end_ma"..., '\n', 14814) = 0x00f0a621
[0x4022d1] memchr("    {\n      end_match_1 = string"..., '\n', 6) = 0x00f0a5fd
[0x4022d1] memchr("      end_match_1 = string1 + st"..., '\n', 0) = NULL
[0x4023cc] fwrite("4983:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      end_match_1 = string1 + st"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      end_match_2 = string2;\n   "..., '1', 14794) = 0x00f0a662
[0x40cdf3] memchr("1 = end1;\n      end_match_2 = st"..., '\n', 14730) = 0x00f0a66b
[0x4022d1] memchr("      end_match_2 = string2;\n   "..., '\n', 48) = 0x00f0a63e
[0x4022d1] memchr("    }\n  else\n    {\n      end_mat"..., '\n', 19) = 0x00f0a644
[0x4022d1] memchr("  else\n    {\n      end_match_1 ="..., '\n', 13) = 0x00f0a64b
[0x4022d1] memchr("    {\n      end_match_1 = end1;\n"..., '\n', 6) = 0x00f0a651
[0x4022d1] memchr("      end_match_1 = end1;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("4988:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      end_match_1 = end1;\n      "..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      end_match_2 = string2 + st"..., '1', 14720) = 0x00f0a695
[0x40cdf3] memchr("1;\n    }\n\n  /* `p' scans through"..., '\n', 14679) = 0x00f0a697
[0x4022d1] memchr("      end_match_2 = string2 + st"..., '\n', 0) = NULL
[0x4023cc] fwrite("4989:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      end_match_2 = string2 + st"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n\n  /* `p' scans through th"..., '1', 14676) = 0x00f0a822
[0x40cdf3] memchr("1 > 0 && pos <= size1)\n    {\n   "..., '\n', 14282) = 0x00f0a838
[0x4022d1] memchr("    }\n\n  /* `p' scans through th"..., '\n', 384) = 0x00f0a69d
[0x4022d1] memchr("\n  /* `p' scans through the patt"..., '\n', 378) = 0x00f0a69e
[0x4022d1] memchr("  /* `p' scans through the patte"..., '\n', 377) = 0x00f0a6e1
[0x4022d1] memchr("     `dend' is the end of the in"..., '\n', 310) = 0x00f0a729
[0x4022d1] memchr("     is advanced into the follow"..., '\n', 238) = 0x00f0a772
[0x4022d1] memchr("     this happens before fetchin"..., '\n', 165) = 0x00f0a7b8
[0x4022d1] memchr("     loop, `d' can be pointing a"..., '\n', 95) = 0x00f0a7fd
[0x4022d1] memchr("     equal `string2'.  */\n  if ("..., '\n', 26) = 0x00f0a817
[0x4022d1] memchr("  if (size1 > 0 && pos <= size1)"..., '\n', 0) = NULL
[0x4023cc] fwrite("4998:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (size1 > 0 && pos <= size1)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      d = string1 + pos;\n "..., '1', 14259) = 0x00f0a84f
[0x40cdf3] memchr("1 + pos;\n      dend = end_match_"..., '\n', 14237) = 0x00f0a857
[0x4022d1] memchr("    {\n      d = string1 + pos;\n "..., '\n', 6) = 0x00f0a83e
[0x4022d1] memchr("      d = string1 + pos;\n      d"..., '\n', 0) = NULL
[0x4023cc] fwrite("5000:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      d = string1 + pos;\n      d"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      dend = end_match_1;\n    }\n"..., '1', 14228) = 0x00f0a86f
[0x40cdf3] memchr("1;\n    }\n  else\n    {\n      d = "..., '\n', 14205) = 0x00f0a871
[0x4022d1] memchr("      dend = end_match_1;\n    }\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("5001:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      dend = end_match_1;\n    }\n"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  else\n    {\n      d = str"..., '1', 14202) = 0x00f0a8a3
[0x40cdf3] memchr("1;\n      dend = end_match_2;\n   "..., '\n', 14153) = 0x00f0a8a5
[0x4022d1] memchr("    }\n  else\n    {\n      d = str"..., '\n', 19) = 0x00f0a877
[0x4022d1] memchr("  else\n    {\n      d = string2 +"..., '\n', 13) = 0x00f0a87e
[0x4022d1] memchr("    {\n      d = string2 + pos - "..., '\n', 6) = 0x00f0a884
[0x4022d1] memchr("      d = string2 + pos - size1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("5005:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      d = string2 + pos - size1;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      dend = end_match_2;\n    }\n"..., '1', 14150) = 0x00f0a8d4
[0x40cdf3] memchr("1 ("The compiled pattern is: ");"..., '\n', 14104) = 0x00f0a8f4
[0x4022d1] memchr("      dend = end_match_2;\n    }\n"..., '\n', 33) = 0x00f0a8bf
[0x4022d1] memchr("    }\n\n  DEBUG_PRINT1 ("The comp"..., '\n', 7) = 0x00f0a8c5
[0x4022d1] memchr("\n  DEBUG_PRINT1 ("The compiled p"..., '\n', 1) = 0x00f0a8c6
[0x4022d1] memchr("  DEBUG_PRINT1 ("The compiled pa"..., '\n', 0) = NULL
[0x4023cc] fwrite("5009:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("The compiled pa"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., '1', 14071) = 0x00f0a932
[0x40cdf3] memchr("1 ("The string to match is: `");"..., '\n', 14010) = 0x00f0a952
[0x4022d1] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., '\n', 48) = 0x00f0a924
[0x4022d1] memchr("  DEBUG_PRINT1 ("The string to m"..., '\n', 0) = NULL
[0x4023cc] fwrite("5011:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("The string to m"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_DOUBLE_STRING (d, "..., '1', 13977) = 0x00f0a979
[0x40cdf3] memchr("1, size1, string2, size2);\n  DEB"..., '\n', 13939) = 0x00f0a993
[0x4022d1] memchr("  DEBUG_PRINT_DOUBLE_STRING (d, "..., '\n', 0) = NULL
[0x4023cc] fwrite("5012:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_DOUBLE_STRING (d, "..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., '1', 13912) = 0x00f0a9a1
[0x40cdf3] memchr("1 ("'\\n");\n  \n  /* This loops ov"..., '\n', 13899) = 0x00f0a9ab
[0x4022d1] memchr("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., '\n', 0) = NULL
[0x4023cc] fwrite("5013:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  /* This loops over pattern "..., '1', 13888) = 0x00f0ab10
[0x40cdf3] memchr("1 ("end of pattern ... ");\n     "..., '\n', 13532) = 0x00f0ab2a
[0x4022d1] memchr("  \n  /* This loops over pattern "..., '\n', 335) = 0x00f0a9ae
[0x4022d1] memchr("  /* This loops over pattern com"..., '\n', 332) = 0x00f0a9f5
[0x4022d1] memchr("     function if the match is co"..., '\n', 261) = 0x00f0aa3e
[0x4022d1] memchr("     fails at this starting poin"..., '\n', 188) = 0x00f0aa77
[0x4022d1] memchr("  for (;;)\n    {\n      DEBUG_PRI"..., '\n', 131) = 0x00f0aa82
[0x4022d1] memchr("    {\n      DEBUG_PRINT2 ("\\n0x%"..., '\n', 120) = 0x00f0aa88
[0x4022d1] memchr("      DEBUG_PRINT2 ("\\n0x%x: ", "..., '\n', 114) = 0x00f0aaac
[0x4022d1] memchr("\n      if (p == pend)\n\t{ /* End "..., '\n', 78) = 0x00f0aaad
[0x4022d1] memchr("      if (p == pend)\n\t{ /* End o"..., '\n', 77) = 0x00f0aac2
[0x4022d1] memchr("\t{ /* End of pattern means we mi"..., '\n', 56) = 0x00f0aafa
[0x4022d1] memchr("          DEBUG_PRINT1 ("end of "..., '\n', 0) = NULL
[0x4023cc] fwrite("5024:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("end of "..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          \n\t  /* If we haven't m"..., '1', 13505) = 0x00f0abe7
[0x40cdf3] memchr("1 ("backtracking.\\n");\n         "..., '\n', 13317) = 0x00f0abfd
[0x4022d1] memchr("          \n\t  /* If we haven't m"..., '\n', 163) = 0x00f0ab35
[0x4022d1] memchr("\t  /* If we haven't matched the "..., '\n', 152) = 0x00f0ab74
[0x4022d1] memchr("             longest match, try "..., '\n', 89) = 0x00f0aba6
[0x4022d1] memchr("          if (d != end_match_2)\n"..., '\n', 39) = 0x00f0abc6
[0x4022d1] memchr("\t    {\n              DEBUG_PRINT"..., '\n', 7) = 0x00f0abcd
[0x4022d1] memchr("              DEBUG_PRINT1 ("bac"..., '\n', 0) = NULL
[0x4023cc] fwrite("5030:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              DEBUG_PRINT1 ("bac"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              \n              if "..., '1', 13294) = 0x00f0ae67
[0x40cdf3] memchr("1 ("\\nSAVING match as best so fa"..., '\n', 12677) = 0x00f0ae8e
[0x4022d1] memchr("              \n              if "..., '\n', 584) = 0x00f0ac0c
[0x4022d1] memchr("              if (!FAIL_STACK_EM"..., '\n', 569) = 0x00f0ac34
[0x4022d1] memchr("                { /* More failur"..., '\n', 529) = 0x00f0ac69
[0x4022d1] memchr("                  boolean same_s"..., '\n', 476) = 0x00f0acad
[0x4022d1] memchr("\t        \t                == MAT"..., '\n', 408) = 0x00f0ace5
[0x4022d1] memchr("\n                  /* If exceeds"..., '\n', 352) = 0x00f0ace6
[0x4022d1] memchr("                  /* If exceeds "..., '\n', 351) = 0x00f0ad26
[0x4022d1] memchr("                  if (!best_regs"..., '\n', 287) = 0x00f0ad4b
[0x4022d1] memchr("                      || (same_s"..., '\n', 250) = 0x00f0ad82
[0x4022d1] memchr("                      || (!same_"..., '\n', 195) = 0x00f0adc7
[0x4022d1] memchr("                    {\n          "..., '\n', 126) = 0x00f0addd
[0x4022d1] memchr("                      best_regs_"..., '\n', 104) = 0x00f0ae09
[0x4022d1] memchr("                      match_end "..., '\n', 60) = 0x00f0ae2e
[0x4022d1] memchr("                      \n         "..., '\n', 23) = 0x00f0ae45
[0x4022d1] memchr("                      DEBUG_PRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5045:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      DEBUG_PRIN"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      \n         "..., '1', 12637) = 0x00f0aec8
[0x40cdf3] memchr("1; mcnt < num_regs; mcnt++)\n    "..., '\n', 12580) = 0x00f0aee3
[0x4022d1] memchr("                      \n         "..., '\n', 23) = 0x00f0aea5
[0x4022d1] memchr("                      for (mcnt "..., '\n', 0) = NULL
[0x4023cc] fwrite("5047:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      for (mcnt "..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                        {\n      "..., '1', 12552) = 0x00f0b0e2
[0x40cdf3] memchr("1' while the restored d is in st"..., '\n', 12042) = 0x00f0b108
[0x4022d1] memchr("                        {\n      "..., '\n', 479) = 0x00f0aefd
[0x4022d1] memchr("                          best_r"..., '\n', 453) = 0x00f0af3d
[0x4022d1] memchr("                          best_r"..., '\n', 389) = 0x00f0af79
[0x4022d1] memchr("                        }\n      "..., '\n', 329) = 0x00f0af93
[0x4022d1] memchr("                    }\n          "..., '\n', 303) = 0x00f0afa9
[0x4022d1] memchr("                  goto fail;\t   "..., '\n', 281) = 0x00f0afce
[0x4022d1] memchr("                }\n\n             "..., '\n', 244) = 0x00f0afe0
[0x4022d1] memchr("\n              /* If no failure "..., '\n', 226) = 0x00f0afe1
[0x4022d1] memchr("              /* If no failure p"..., '\n', 225) = 0x00f0b023
[0x4022d1] memchr("              else if (best_regs"..., '\n', 159) = 0x00f0b04c
[0x4022d1] memchr("                {\n  \t        res"..., '\n', 118) = 0x00f0b05e
[0x4022d1] memchr("  \t        restore_best_regs:\n  "..., '\n', 100) = 0x00f0b07c
[0x4022d1] memchr("                  /* Restore bes"..., '\n', 70) = 0x00f0b0c2
[0x4022d1] memchr("                     end_match_1"..., '\n', 0) = NULL
[0x4023cc] fwrite("5061:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                     end_match_1"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                     For example"..., '1', 12003) = 0x00f0b1e3
[0x40cdf3] memchr("1 ("Restoring best registers.\\n""..., '\n', 11785) = 0x00f0b205
[0x4022d1] memchr("                     For example"..., '\n', 189) = 0x00f0b14c
[0x4022d1] memchr("                     strings `x-"..., '\n', 121) = 0x00f0b191
[0x4022d1] memchr("                     not consecu"..., '\n', 52) = 0x00f0b1c5
[0x4022d1] memchr("                  DEBUG_PRINT1 ("..., '\n', 0) = NULL
[0x4023cc] fwrite("5065:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  DEBUG_PRINT1 ("..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  \n             "..., '1', 11750) = 0x00f0b260
[0x40cdf3] memchr("1 && d <= end1)\n\t\t           ? e"..., '\n', 11660) = 0x00f0b26f
[0x4022d1] memchr("                  \n             "..., '\n', 52) = 0x00f0b218
[0x4022d1] memchr("                  d = match_end;"..., '\n', 33) = 0x00f0b239
[0x4022d1] memchr("                  dend = ((d >= "..., '\n', 0) = NULL
[0x4023cc] fwrite("5068:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  dend = ((d >= "..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t           ? end_match_1 : end"..., '1', 11644) = 0x00f0b289
[0x40cdf3] memchr("1 : end_match_2);\n\n\t\t  for (mcnt"..., '\n', 11619) = 0x00f0b29a
[0x4022d1] memchr("\t\t           ? end_match_1 : end"..., '\n', 0) = NULL
[0x4023cc] fwrite("5069:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t           ? end_match_1 : end"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t\t  for (mcnt = 1; mcnt < num_r"..., '1', 11601) = 0x00f0b2ac
[0x40cdf3] memchr("1; mcnt < num_regs; mcnt++)\n\t\t  "..., '\n', 11584) = 0x00f0b2c7
[0x4022d1] memchr("\n\t\t  for (mcnt = 1; mcnt < num_r"..., '\n', 1) = 0x00f0b29b
[0x4022d1] memchr("\t\t  for (mcnt = 1; mcnt < num_re"..., '\n', 0) = NULL
[0x4023cc] fwrite("5071:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  for (mcnt = 1; mcnt < num_re"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t      regstart[mcnt] ="..., '1', 11556) = 0x00f0b37d
[0x40cdf3] memchr("1 ("Accepting match.\\n");\n\n     "..., '\n', 11375) = 0x00f0b396
[0x4022d1] memchr("\t\t    {\n\t\t      regstart[mcnt] ="..., '\n', 160) = 0x00f0b2cf
[0x4022d1] memchr("\t\t      regstart[mcnt] = best_re"..., '\n', 152) = 0x00f0b2fd
[0x4022d1] memchr("\t\t      regend[mcnt] = best_rege"..., '\n', 106) = 0x00f0b327
[0x4022d1] memchr("\t\t    }\n                }\n      "..., '\n', 64) = 0x00f0b32f
[0x4022d1] memchr("                }\n            } "..., '\n', 56) = 0x00f0b341
[0x4022d1] memchr("            } /* d != end_match_"..., '\n', 38) = 0x00f0b366
[0x4022d1] memchr("\n          DEBUG_PRINT1 ("Accept"..., '\n', 1) = 0x00f0b367
[0x4022d1] memchr("          DEBUG_PRINT1 ("Accepti"..., '\n', 0) = NULL
[0x4023cc] fwrite("5079:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("Accepti"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          /* If caller wants re"..., '1', 11349) = 0x00f0b50c
[0x40cdf3] memchr("1' marker\n                     G"..., '\n', 10976) = 0x00f0b515
[0x4022d1] memchr("\n          /* If caller wants re"..., '\n', 310) = 0x00f0b397
[0x4022d1] memchr("          /* If caller wants reg"..., '\n', 309) = 0x00f0b3dc
[0x4022d1] memchr("          if (regs && !bufp->no_"..., '\n', 240) = 0x00f0b401
[0x4022d1] memchr("\t    {\n              /* Have the"..., '\n', 203) = 0x00f0b408
[0x4022d1] memchr("              /* Have the regist"..., '\n', 196) = 0x00f0b44b
[0x4022d1] memchr("              if (bufp->regs_all"..., '\n', 129) = 0x00f0b487
[0x4022d1] memchr("                { /* No.  So all"..., '\n', 69) = 0x00f0b4cc
[0x4022d1] memchr("                     extra eleme"..., '\n', 0) = NULL
[0x4023cc] fwrite("5087:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                     extra eleme"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                     GNU code us"..., '1', 10966) = 0x00f0b57b
[0x40cdf3] memchr("1);\n                  regs->star"..., '\n', 10865) = 0x00f0b57e
[0x4022d1] memchr("                     GNU code us"..., '\n', 40) = 0x00f0b53d
[0x4022d1] memchr("                  regs->num_regs"..., '\n', 0) = NULL
[0x4023cc] fwrite("5089:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  regs->num_regs"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  regs->start = "..., '1', 10861) = 0x00f0b7d8
[0x40cdf3] memchr("1)\n                    {\n       "..., '\n', 10260) = 0x00f0b7da
[0x4022d1] memchr("                  regs->start = "..., '\n', 551) = 0x00f0b5c1
[0x4022d1] memchr("                  regs->end = TA"..., '\n', 484) = 0x00f0b602
[0x4022d1] memchr("                  if (regs->star"..., '\n', 419) = 0x00f0b642
[0x4022d1] memchr("                    return -2;\n "..., '\n', 355) = 0x00f0b661
[0x4022d1] memchr("                  bufp->regs_all"..., '\n', 324) = 0x00f0b69b
[0x4022d1] memchr("                }\n              "..., '\n', 266) = 0x00f0b6ad
[0x4022d1] memchr("              else if (bufp->reg"..., '\n', 248) = 0x00f0b6ed
[0x4022d1] memchr("                { /* Yes.  If we"..., '\n', 184) = 0x00f0b733
[0x4022d1] memchr("                     allocated, "..., '\n', 114) = 0x00f0b77c
[0x4022d1] memchr("                     leave it al"..., '\n', 41) = 0x00f0b7a5
[0x4022d1] memchr("                  if (regs->num_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5100:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  if (regs->num_"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    {\n          "..., '1', 10257) = 0x00f0b823
[0x40cdf3] memchr("1;\n                      RETALLO"..., '\n', 10185) = 0x00f0b825
[0x4022d1] memchr("                    {\n          "..., '\n', 22) = 0x00f0b7f0
[0x4022d1] memchr("                      regs->num_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5102:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      regs->num_"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      RETALLOC ("..., '1', 10182) = 0x00f0bb86
[0x40cdf3] memchr("1\n\t\t\t          : d - string2 + s"..., '\n', 9318) = 0x00f0bb87
[0x4022d1] memchr("                      RETALLOC ("..., '\n', 793) = 0x00f0b86d
[0x4022d1] memchr("                      RETALLOC ("..., '\n', 721) = 0x00f0b8b3
[0x4022d1] memchr("                      if (regs->"..., '\n', 651) = 0x00f0b8f7
[0x4022d1] memchr("                        return -"..., '\n', 583) = 0x00f0b91a
[0x4022d1] memchr("                    }\n          "..., '\n', 548) = 0x00f0b930
[0x4022d1] memchr("                }\n              "..., '\n', 526) = 0x00f0b942
[0x4022d1] memchr("              else\n\t\t{\n\t\t  /* Th"..., '\n', 508) = 0x00f0b955
[0x4022d1] memchr("\t\t{\n\t\t  /* These braces fend off"..., '\n', 489) = 0x00f0b959
[0x4022d1] memchr("\t\t  /* These braces fend off a ""..., '\n', 485) = 0x00f0b99a
[0x4022d1] memchr("\t\t     warning under GCC when as"..., '\n', 420) = 0x00f0b9d7
[0x4022d1] memchr("\t\t  assert (bufp->regs_allocated"..., '\n', 359) = 0x00f0ba08
[0x4022d1] memchr("\t\t}\n\n              /* Convert th"..., '\n', 310) = 0x00f0ba0c
[0x4022d1] memchr("\n              /* Convert the po"..., '\n', 306) = 0x00f0ba0d
[0x4022d1] memchr("              /* Convert the poi"..., '\n', 305) = 0x00f0ba55
[0x4022d1] memchr("                 indices.  Regis"..., '\n', 233) = 0x00f0ba99
[0x4022d1] memchr("                 since we haven'"..., '\n', 165) = 0x00f0bade
[0x4022d1] memchr("              if (regs->num_regs"..., '\n', 96) = 0x00f0bb04
[0x4022d1] memchr("                {\n              "..., '\n', 58) = 0x00f0bb16
[0x4022d1] memchr("                  regs->start[0]"..., '\n', 40) = 0x00f0bb3e
[0x4022d1] memchr("                  regs->end[0] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("5122:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  regs->end[0] ="..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t          : d - string2 + siz"..., '1', 9316) = 0x00f0bba9
[0x40cdf3] memchr("1);\n                }\n          "..., '\n', 9283) = 0x00f0bbac
[0x4022d1] memchr("\t\t\t          : d - string2 + siz"..., '\n', 0) = NULL
[0x4023cc] fwrite("5123:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t          : d - string2 + siz"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                }\n              "..., '1', 9279) = 0x00f0bc6a
[0x40cdf3] memchr("1; mcnt < MIN (num_regs, regs->n"..., '\n', 9090) = 0x00f0bc9b
[0x4022d1] memchr("                }\n              "..., '\n', 170) = 0x00f0bbbe
[0x4022d1] memchr("              \n              /* "..., '\n', 152) = 0x00f0bbcd
[0x4022d1] memchr("              /* Go through the "..., '\n', 137) = 0x00f0bc14
[0x4022d1] memchr("                 registers, sinc"..., '\n', 66) = 0x00f0bc56
[0x4022d1] memchr("\t      for (mcnt = 1; mcnt < MIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5128:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      for (mcnt = 1; mcnt < MIN"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t{\n                  if (REG_UN"..., '1', 9040) = 0x00f0bd29
[0x40cdf3] memchr("1;\n                  else\n      "..., '\n', 8899) = 0x00f0bd2b
[0x4022d1] memchr("\t\t{\n                  if (REG_UN"..., '\n', 82) = 0x00f0bc9f
[0x4022d1] memchr("                  if (REG_UNSET "..., '\n', 78) = 0x00f0bced
[0x4022d1] memchr("                    regs->start["..., '\n', 0) = NULL
[0x4023cc] fwrite("5131:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    regs->start["..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  else\n         "..., '1', 8896) = 0x00f0be95
[0x40cdf3] memchr("1.  If\n                 we (re)a"..., '\n', 8535) = 0x00f0be9b
[0x4022d1] memchr("                  else\n         "..., '\n', 296) = 0x00f0bd42
[0x4022d1] memchr("                    {\n\t\t      re"..., '\n', 273) = 0x00f0bd58
[0x4022d1] memchr("\t\t      regs->start[mcnt] = POIN"..., '\n', 251) = 0x00f0bd98
[0x4022d1] memchr("                      regs->end["..., '\n', 187) = 0x00f0bde2
[0x4022d1] memchr("                    }\n\t\t}\n      "..., '\n', 113) = 0x00f0bdf8
[0x4022d1] memchr("\t\t}\n              \n             "..., '\n', 91) = 0x00f0bdfc
[0x4022d1] memchr("              \n              /* "..., '\n', 87) = 0x00f0be0b
[0x4022d1] memchr("              /* If the regs str"..., '\n', 72) = 0x00f0be53
[0x4022d1] memchr("                 were in the pat"..., '\n', 0) = NULL
[0x4023cc] fwrite("5140:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 were in the pat"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 we (re)allocate"..., '1', 8528) = 0x00f0bf39
[0x40cdf3] memchr("1 at the end.  */\n              "..., '\n', 8371) = 0x00f0bf4a
[0x4022d1] memchr("                 we (re)allocate"..., '\n', 139) = 0x00f0bede
[0x4022d1] memchr("                 because we alwa"..., '\n', 72) = 0x00f0bf26
[0x4022d1] memchr("                 -1 at the end. "..., '\n', 0) = NULL
[0x4023cc] fwrite("5143:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 -1 at the end. "..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              for (mcnt = num_re"..., '1', 8353) = 0x00f0bfc5
[0x40cdf3] memchr("1;\n\t    } /* regs && !bufp->no_s"..., '\n', 8231) = 0x00f0bfc7
[0x4022d1] memchr("              for (mcnt = num_re"..., '\n', 67) = 0x00f0bf8d
[0x4022d1] memchr("                regs->start[mcnt"..., '\n', 0) = NULL
[0x4023cc] fwrite("5145:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                regs->start[mcnt"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    } /* regs && !bufp->no_sub "..., '1', 8228) = 0x00f0c173
[0x40cdf3] memchr("1 \n\t\t\t    : string2 - size1);\n\n "..., '\n', 7801) = 0x00f0c175
[0x4022d1] memchr("\t    } /* regs && !bufp->no_sub "..., '\n', 412) = 0x00f0bfea
[0x4022d1] memchr("\n          FREE_VARIABLES ();\n  "..., '\n', 377) = 0x00f0bfeb
[0x4022d1] memchr("          FREE_VARIABLES ();\n   "..., '\n', 376) = 0x00f0c008
[0x4022d1] memchr("          DEBUG_PRINT4 ("%u fail"..., '\n', 347) = 0x00f0c056
[0x4022d1] memchr("                        nfailure"..., '\n', 269) = 0x00f0c09e
[0x4022d1] memchr("                        nfailure"..., '\n', 197) = 0x00f0c0e8
[0x4022d1] memchr("          DEBUG_PRINT2 ("%u regi"..., '\n', 123) = 0x00f0c12c
[0x4022d1] memchr("\n          mcnt = d - pos - (MAT"..., '\n', 55) = 0x00f0c12d
[0x4022d1] memchr("          mcnt = d - pos - (MATC"..., '\n', 54) = 0x00f0c163
[0x4022d1] memchr("\t\t\t    ? string1 \n\t\t\t    : strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("5155:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t    ? string1 \n\t\t\t    : strin"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t    : string2 - size1);\n\n    "..., '1', 7798) = 0x00f0c18d
[0x40cdf3] memchr("1);\n\n          DEBUG_PRINT2 ("Re"..., '\n', 7775) = 0x00f0c190
[0x4022d1] memchr("\t\t\t    : string2 - size1);\n\n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("5156:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t    : string2 - size1);\n\n    "..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          DEBUG_PRINT2 ("Return"..., '1', 7771) = 0x00f0c330
[0x40cdf3] memchr("1 ("EXECUTING no_op.\\n");\n      "..., '\n', 7356) = 0x00f0c349
[0x4022d1] memchr("\n          DEBUG_PRINT2 ("Return"..., '\n', 394) = 0x00f0c191
[0x4022d1] memchr("          DEBUG_PRINT2 ("Returni"..., '\n', 393) = 0x00f0c1d3
[0x4022d1] memchr("\n          return mcnt;\n        "..., '\n', 327) = 0x00f0c1d4
[0x4022d1] memchr("          return mcnt;\n        }"..., '\n', 326) = 0x00f0c1eb
[0x4022d1] memchr("        }\n\n      /* Otherwise ma"..., '\n', 303) = 0x00f0c1f5
[0x4022d1] memchr("\n      /* Otherwise match next p"..., '\n', 293) = 0x00f0c1f6
[0x4022d1] memchr("      /* Otherwise match next pa"..., '\n', 292) = 0x00f0c229
[0x4022d1] memchr("#ifdef SWITCH_ENUM_BUG\n      swi"..., '\n', 241) = 0x00f0c240
[0x4022d1] memchr("      switch ((int) ((re_opcode_"..., '\n', 218) = 0x00f0c26a
[0x4022d1] memchr("#else\n      switch ((re_opcode_t"..., '\n', 176) = 0x00f0c270
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 170) = 0x00f0c292
[0x4022d1] memchr("#endif\n\t{\n        /* Ignore thes"..., '\n', 136) = 0x00f0c299
[0x4022d1] memchr("\t{\n        /* Ignore these.  Use"..., '\n', 129) = 0x00f0c29c
[0x4022d1] memchr("        /* Ignore these.  Used t"..., '\n', 126) = 0x00f0c2e0
[0x4022d1] memchr("           currently have n == 0"..., '\n', 58) = 0x00f0c306
[0x4022d1] memchr("        case no_op:\n          DE"..., '\n', 20) = 0x00f0c31a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5173:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          break;\n\n\n        /* Ma"..., '1', 7330) = 0x00f0c6b0
[0x40cdf3] memchr("1 ("EXECUTING anychar.\\n");\n\n   "..., '\n', 6460) = 0x00f0c6cb
[0x4022d1] memchr("          break;\n\n\n        /* Ma"..., '\n', 849) = 0x00f0c35a
[0x4022d1] memchr("\n\n        /* Match the next n pa"..., '\n', 832) = 0x00f0c35b
[0x4022d1] memchr("\n        /* Match the next n pat"..., '\n', 831) = 0x00f0c35c
[0x4022d1] memchr("        /* Match the next n patt"..., '\n', 830) = 0x00f0c3a3
[0x4022d1] memchr("           byte in the pattern d"..., '\n', 759) = 0x00f0c3e8
[0x4022d1] memchr("           are the characters to"..., '\n', 690) = 0x00f0c414
[0x4022d1] memchr("\tcase exactn:\n\t  mcnt = *p++;\n  "..., '\n', 646) = 0x00f0c422
[0x4022d1] memchr("\t  mcnt = *p++;\n          DEBUG_"..., '\n', 632) = 0x00f0c432
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 616) = 0x00f0c46b
[0x4022d1] memchr("\n          /* This is written ou"..., '\n', 559) = 0x00f0c46c
[0x4022d1] memchr("          /* This is written out"..., '\n', 558) = 0x00f0c4b2
[0x4022d1] memchr("             testing `translate'"..., '\n', 488) = 0x00f0c4e8
[0x4022d1] memchr("          if (translate)\n\t    {\n"..., '\n', 434) = 0x00f0c501
[0x4022d1] memchr("\t    {\n\t      do\n\t\t{\n\t\t  PREFETC"..., '\n', 409) = 0x00f0c508
[0x4022d1] memchr("\t      do\n\t\t{\n\t\t  PREFETCH ();\n\t"..., '\n', 402) = 0x00f0c512
[0x4022d1] memchr("\t\t{\n\t\t  PREFETCH ();\n\t\t  if (tra"..., '\n', 392) = 0x00f0c516
[0x4022d1] memchr("\t\t  PREFETCH ();\n\t\t  if (transla"..., '\n', 388) = 0x00f0c527
[0x4022d1] memchr("\t\t  if (translate[(unsigned char"..., '\n', 371) = 0x00f0c55f
[0x4022d1] memchr("                    goto fail;\n\t"..., '\n', 315) = 0x00f0c57e
[0x4022d1] memchr("\t\t}\n\t      while (--mcnt);\n\t    "..., '\n', 284) = 0x00f0c582
[0x4022d1] memchr("\t      while (--mcnt);\n\t    }\n\t "..., '\n', 280) = 0x00f0c599
[0x4022d1] memchr("\t    }\n\t  else\n\t    {\n\t      do\n"..., '\n', 257) = 0x00f0c5a0
[0x4022d1] memchr("\t  else\n\t    {\n\t      do\n\t\t{\n\t\t "..., '\n', 250) = 0x00f0c5a8
[0x4022d1] memchr("\t    {\n\t      do\n\t\t{\n\t\t  PREFETC"..., '\n', 242) = 0x00f0c5af
[0x4022d1] memchr("\t      do\n\t\t{\n\t\t  PREFETCH ();\n\t"..., '\n', 235) = 0x00f0c5b9
[0x4022d1] memchr("\t\t{\n\t\t  PREFETCH ();\n\t\t  if (*d+"..., '\n', 225) = 0x00f0c5bd
[0x4022d1] memchr("\t\t  PREFETCH ();\n\t\t  if (*d++ !="..., '\n', 221) = 0x00f0c5ce
[0x4022d1] memchr("\t\t  if (*d++ != (char) *p++) got"..., '\n', 204) = 0x00f0c5f6
[0x4022d1] memchr("\t\t}\n\t      while (--mcnt);\n\t    "..., '\n', 164) = 0x00f0c5fa
[0x4022d1] memchr("\t      while (--mcnt);\n\t    }\n\t "..., '\n', 160) = 0x00f0c611
[0x4022d1] memchr("\t    }\n\t  SET_REGS_MATCHED ();\n "..., '\n', 137) = 0x00f0c618
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 130) = 0x00f0c630
[0x4022d1] memchr("          break;\n\n\n        /* Ma"..., '\n', 106) = 0x00f0c641
[0x4022d1] memchr("\n\n        /* Match any character"..., '\n', 89) = 0x00f0c642
[0x4022d1] memchr("\n        /* Match any character "..., '\n', 88) = 0x00f0c643
[0x4022d1] memchr("        /* Match any character e"..., '\n', 87) = 0x00f0c68b
[0x4022d1] memchr("\tcase anychar:\n          DEBUG_P"..., '\n', 15) = 0x00f0c69a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5211:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          PREFETCH ();\n\n       "..., '1', 6432) = 0x00f0c869
[0x40cdf3] memchr("1) == charset_not;\n\n            "..., '\n', 6019) = 0x00f0c87b
[0x4022d1] memchr("\n          PREFETCH ();\n\n       "..., '\n', 374) = 0x00f0c6cc
[0x4022d1] memchr("          PREFETCH ();\n\n        "..., '\n', 373) = 0x00f0c6e3
[0x4022d1] memchr("\n          if ((!(bufp->syntax &"..., '\n', 350) = 0x00f0c6e4
[0x4022d1] memchr("          if ((!(bufp->syntax & "..., '\n', 349) = 0x00f0c72f
[0x4022d1] memchr("              || (bufp->syntax &"..., '\n', 274) = 0x00f0c77e
[0x4022d1] memchr("\t    goto fail;\n\n          SET_R"..., '\n', 195) = 0x00f0c78e
[0x4022d1] memchr("\n          SET_REGS_MATCHED ();\n"..., '\n', 179) = 0x00f0c78f
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n "..., '\n', 178) = 0x00f0c7ae
[0x4022d1] memchr("          DEBUG_PRINT2 ("  Match"..., '\n', 147) = 0x00f0c7e0
[0x4022d1] memchr("          d++;\n\t  break;\n\n\n\tcase"..., '\n', 97) = 0x00f0c7ef
[0x4022d1] memchr("\t  break;\n\n\n\tcase charset:\n\tcase"..., '\n', 82) = 0x00f0c7f9
[0x4022d1] memchr("\n\n\tcase charset:\n\tcase charset_n"..., '\n', 72) = 0x00f0c7fa
[0x4022d1] memchr("\n\tcase charset:\n\tcase charset_no"..., '\n', 71) = 0x00f0c7fb
[0x4022d1] memchr("\tcase charset:\n\tcase charset_not"..., '\n', 70) = 0x00f0c80a
[0x4022d1] memchr("\tcase charset_not:\n\t  {\n\t    reg"..., '\n', 55) = 0x00f0c81d
[0x4022d1] memchr("\t  {\n\t    register unsigned char"..., '\n', 36) = 0x00f0c822
[0x4022d1] memchr("\t    register unsigned char c;\n\t"..., '\n', 31) = 0x00f0c841
[0x4022d1] memchr("\t    boolean not = (re_opcode_t)"..., '\n', 0) = NULL
[0x4023cc] fwrite("5229:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    boolean not = (re_opcode_t)"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n            DEBUG_PRINT2 ("EXEC"..., '1', 6000) = 0x00f0c9bf
[0x40cdf3] memchr("1 + c / BYTEWIDTH] & (1 << (c % "..., '\n', 5677) = 0x00f0c9eb
[0x4022d1] memchr("\n            DEBUG_PRINT2 ("EXEC"..., '\n', 316) = 0x00f0c87c
[0x4022d1] memchr("            DEBUG_PRINT2 ("EXECU"..., '\n', 315) = 0x00f0c8c4
[0x4022d1] memchr("\n\t    PREFETCH ();\n\t    c = TRAN"..., '\n', 243) = 0x00f0c8c5
[0x4022d1] memchr("\t    PREFETCH ();\n\t    c = TRANS"..., '\n', 242) = 0x00f0c8d7
[0x4022d1] memchr("\t    c = TRANSLATE (*d); /* The "..., '\n', 224) = 0x00f0c90f
[0x4022d1] memchr("\n            /* Cast to `unsigne"..., '\n', 168) = 0x00f0c910
[0x4022d1] memchr("            /* Cast to `unsigned"..., '\n', 167) = 0x00f0c959
[0x4022d1] memchr("               bit list is a ful"..., '\n', 94) = 0x00f0c98e
[0x4022d1] memchr("\t    if (c < (unsigned) (*p * BY"..., '\n', 41) = 0x00f0c9b7
[0x4022d1] memchr("\t\t&& p[1 + c / BYTEWIDTH] & (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("5239:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t&& p[1 + c / BYTEWIDTH] & (1 <"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      not = !not;\n\n\t    p += 1 "..., '1', 5632) = 0x00f0ca0a
[0x40cdf3] memchr("1 + *p;\n\n\t    if (!not) goto fai"..., '\n', 5602) = 0x00f0ca11
[0x4022d1] memchr("\t      not = !not;\n\n\t    p += 1 "..., '\n', 20) = 0x00f0c9fe
[0x4022d1] memchr("\n\t    p += 1 + *p;\n\n\t    if (!no"..., '\n', 1) = 0x00f0c9ff
[0x4022d1] memchr("\t    p += 1 + *p;\n\n\t    if (!not"..., '\n', 0) = NULL
[0x4023cc] fwrite("5242:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    p += 1 + *p;\n\n\t    if (!not"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t    if (!not) goto fail;\n     "..., '1', 5594) = 0x00f0cc28
[0x40cdf3] memchr("1]);\n\n          /* Find out if t"..., '\n', 5060) = 0x00f0cc2c
[0x4022d1] memchr("\n\t    if (!not) goto fail;\n     "..., '\n', 474) = 0x00f0ca12
[0x4022d1] memchr("\t    if (!not) goto fail;\n      "..., '\n', 473) = 0x00f0ca2c
[0x4022d1] memchr("            \n\t    SET_REGS_MATCH"..., '\n', 447) = 0x00f0ca39
[0x4022d1] memchr("\t    SET_REGS_MATCHED ();\n      "..., '\n', 434) = 0x00f0ca53
[0x4022d1] memchr("            d++;\n\t    break;\n\t  "..., '\n', 408) = 0x00f0ca64
[0x4022d1] memchr("\t    break;\n\t  }\n\n\n        /* Th"..., '\n', 391) = 0x00f0ca70
[0x4022d1] memchr("\t  }\n\n\n        /* The beginning "..., '\n', 379) = 0x00f0ca75
[0x4022d1] memchr("\n\n        /* The beginning of a "..., '\n', 374) = 0x00f0ca76
[0x4022d1] memchr("\n        /* The beginning of a g"..., '\n', 373) = 0x00f0ca77
[0x4022d1] memchr("        /* The beginning of a gr"..., '\n', 372) = 0x00f0cabb
[0x4022d1] memchr("           The arguments are the"..., '\n', 304) = 0x00f0cb06
[0x4022d1] memchr("           number of groups inne"..., '\n', 229) = 0x00f0cb4b
[0x4022d1] memchr("           matched within the gr"..., '\n', 160) = 0x00f0cb8c
[0x4022d1] memchr("           registers data struct"..., '\n', 95) = 0x00f0cbd0
[0x4022d1] memchr("        case start_memory:\n\t  DE"..., '\n', 27) = 0x00f0cbeb
[0x4022d1] memchr("\t  DEBUG_PRINT3 ("EXECUTING star"..., '\n', 0) = NULL
[0x4023cc] fwrite("5258:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT3 ("EXECUTING star"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          /* Find out if this g"..., '1', 5055) = 0x00f0cc76
[0x40cdf3] memchr("1 = p;\t\t/* To send to group_matc"..., '\n', 4982) = 0x00f0ccaa
[0x4022d1] memchr("\n          /* Find out if this g"..., '\n', 69) = 0x00f0cc2d
[0x4022d1] memchr("          /* Find out if this gr"..., '\n', 68) = 0x00f0cc71
[0x4022d1] memchr("\t  p1 = p;\t\t/* To send to group_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5261:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  p1 = p;\t\t/* To send to group_"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          \n          if (REG_MAT"..., '1', 4929) = 0x00f0cd67
[0x40cdf3] memchr("1, pend, reg_info);\n\n          /"..., '\n', 4741) = 0x00f0cd7a
[0x4022d1] memchr("          \n          if (REG_MAT"..., '\n', 143) = 0x00f0ccb5
[0x4022d1] memchr("          if (REG_MATCH_NULL_STR"..., '\n', 132) = 0x00f0cd05
[0x4022d1] memchr("            REG_MATCH_NULL_STRIN"..., '\n', 52) = 0x00f0cd39
[0x4022d1] memchr("              = group_match_null"..., '\n', 0) = NULL
[0x4023cc] fwrite("5265:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              = group_match_null"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          /* Save the position "..., '1', 4721) = 0x00f0d077
[0x40cdf3] memchr("1;\n          MATCHED_SOMETHING ("..., '\n', 3957) = 0x00f0d079
[0x4022d1] memchr("\n          /* Save the position "..., '\n', 727) = 0x00f0cd7b
[0x4022d1] memchr("          /* Save the position i"..., '\n', 726) = 0x00f0cdc4
[0x4022d1] memchr("             we were at this ope"..., '\n', 653) = 0x00f0ce0a
[0x4022d1] memchr("             operated upon by a "..., '\n', 583) = 0x00f0ce53
[0x4022d1] memchr("             against `ab'; then "..., '\n', 510) = 0x00f0ce99
[0x4022d1] memchr("             the string in case "..., '\n', 440) = 0x00f0ceda
[0x4022d1] memchr("          old_regstart[*p] = REG"..., '\n', 375) = 0x00f0cf1e
[0x4022d1] memchr("                             ? R"..., '\n', 307) = 0x00f0cf69
[0x4022d1] memchr("                             : r"..., '\n', 232) = 0x00f0cf96
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("  old_regstart"..., '\n', 187) = 0x00f0cfc0
[0x4022d1] memchr("\t\t\t POINTER_TO_OFFSET (old_regst"..., '\n', 145) = 0x00f0cfeb
[0x4022d1] memchr("\n          regstart[*p] = d;\n\t  "..., '\n', 102) = 0x00f0cfec
[0x4022d1] memchr("          regstart[*p] = d;\n\t  D"..., '\n', 101) = 0x00f0d008
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("  regstart: %d"..., '\n', 73) = 0x00f0d050
[0x4022d1] memchr("\n          IS_ACTIVE (reg_info[*"..., '\n', 1) = 0x00f0d051
[0x4022d1] memchr("          IS_ACTIVE (reg_info[*p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5281:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          IS_ACTIVE (reg_info[*p"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          MATCHED_SOMETHING (reg"..., '1', 3954) = 0x00f0d357
[0x40cdf3] memchr("1]);\n             \n          /* "..., '\n', 3221) = 0x00f0d35b
[0x4022d1] memchr("          MATCHED_SOMETHING (reg"..., '\n', 674) = 0x00f0d0a9
[0x4022d1] memchr("          \n          /* This is "..., '\n', 626) = 0x00f0d0b4
[0x4022d1] memchr("          /* This is the new hig"..., '\n', 615) = 0x00f0d0ee
[0x4022d1] memchr("          highest_active_reg = *"..., '\n', 557) = 0x00f0d111
[0x4022d1] memchr("          \n          /* If nothi"..., '\n', 522) = 0x00f0d11c
[0x4022d1] memchr("          /* If nothing was acti"..., '\n', 511) = 0x00f0d165
[0x4022d1] memchr("             register.  */\n     "..., '\n', 438) = 0x00f0d180
[0x4022d1] memchr("          if (lowest_active_reg "..., '\n', 411) = 0x00f0d1b9
[0x4022d1] memchr("            lowest_active_reg = "..., '\n', 354) = 0x00f0d1dd
[0x4022d1] memchr("\n          /* Move past the regi"..., '\n', 318) = 0x00f0d1de
[0x4022d1] memchr("          /* Move past the regis"..., '\n', 317) = 0x00f0d224
[0x4022d1] memchr("          p += 2;\n          brea"..., '\n', 247) = 0x00f0d236
[0x4022d1] memchr("          break;\n\n\n        /* Th"..., '\n', 229) = 0x00f0d247
[0x4022d1] memchr("\n\n        /* The stop_memory opc"..., '\n', 212) = 0x00f0d248
[0x4022d1] memchr("\n        /* The stop_memory opco"..., '\n', 211) = 0x00f0d249
[0x4022d1] memchr("        /* The stop_memory opcod"..., '\n', 210) = 0x00f0d28f
[0x4022d1] memchr("           arguments are the sam"..., '\n', 140) = 0x00f0d2d1
[0x4022d1] memchr("           number, and the numbe"..., '\n', 74) = 0x00f0d308
[0x4022d1] memchr("\tcase stop_memory:\n\t  DEBUG_PRIN"..., '\n', 19) = 0x00f0d31b
[0x4022d1] memchr("\t  DEBUG_PRINT3 ("EXECUTING stop"..., '\n', 0) = NULL
[0x4023cc] fwrite("5301:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT3 ("EXECUTING stop"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("             \n          /* We ne"..., '1', 3216) = 0x00f0d8ba
[0x40cdf3] memchr("1.  */\n              unsigned ch"..., '\n', 1842) = 0x00f0d8c0
[0x4022d1] memchr("             \n          /* We ne"..., '\n', 1326) = 0x00f0d369
[0x4022d1] memchr("          /* We need to save the"..., '\n', 1312) = 0x00f0d3b3
[0x4022d1] memchr("             this close-group op"..., '\n', 1238) = 0x00f0d3f8
[0x4022d1] memchr("             upon by a repetitio"..., '\n', 1169) = 0x00f0d43f
[0x4022d1] memchr("             against `aba'; then"..., '\n', 1098) = 0x00f0d486
[0x4022d1] memchr("             the string in case "..., '\n', 1027) = 0x00f0d4c7
[0x4022d1] memchr("          old_regend[*p] = REG_M"..., '\n', 962) = 0x00f0d509
[0x4022d1] memchr("                           ? REG"..., '\n', 896) = 0x00f0d54e
[0x4022d1] memchr("\t\t\t   : regend[*p];\n\t  DEBUG_PRI"..., '\n', 827) = 0x00f0d562
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("      old_rege"..., '\n', 807) = 0x00f0d58e
[0x4022d1] memchr("\t\t\t POINTER_TO_OFFSET (old_regen"..., '\n', 763) = 0x00f0d5b7
[0x4022d1] memchr("\n          regend[*p] = d;\n\t  DE"..., '\n', 722) = 0x00f0d5b8
[0x4022d1] memchr("          regend[*p] = d;\n\t  DEB"..., '\n', 721) = 0x00f0d5d2
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("      regend: "..., '\n', 695) = 0x00f0d61a
[0x4022d1] memchr("\n          /* This register isn'"..., '\n', 623) = 0x00f0d61b
[0x4022d1] memchr("          /* This register isn't"..., '\n', 622) = 0x00f0d650
[0x4022d1] memchr("          IS_ACTIVE (reg_info[*p"..., '\n', 569) = 0x00f0d678
[0x4022d1] memchr("          \n          /* If this "..., '\n', 529) = 0x00f0d683
[0x4022d1] memchr("          /* If this was the onl"..., '\n', 518) = 0x00f0d6c8
[0x4022d1] memchr("             anymore.  */\n      "..., '\n', 449) = 0x00f0d6e2
[0x4022d1] memchr("          if (lowest_active_reg "..., '\n', 423) = 0x00f0d719
[0x4022d1] memchr("            {\n              lowe"..., '\n', 368) = 0x00f0d727
[0x4022d1] memchr("              lowest_active_reg "..., '\n', 354) = 0x00f0d75f
[0x4022d1] memchr("              highest_active_reg"..., '\n', 298) = 0x00f0d799
[0x4022d1] memchr("            }\n          else\n   "..., '\n', 240) = 0x00f0d7a7
[0x4022d1] memchr("          else\n            { /* "..., '\n', 226) = 0x00f0d7b6
[0x4022d1] memchr("            { /* We must scan fo"..., '\n', 211) = 0x00f0d7ff
[0x4022d1] memchr("                 it isn't necess"..., '\n', 138) = 0x00f0d841
[0x4022d1] memchr("                 (a(b)c(d(e)f)g)"..., '\n', 72) = 0x00f0d889
[0x4022d1] memchr("                 new highest act"..., '\n', 0) = NULL
[0x4023cc] fwrite("5331:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 new highest act"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              unsigned char r = "..., '1', 1835) = 0x00f0d8e6
[0x40cdf3] memchr("1;\n              while (r > 0 &&"..., '\n', 1798) = 0x00f0d8e8
[0x4022d1] memchr("              unsigned char r = "..., '\n', 0) = NULL
[0x4023cc] fwrite("5332:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              unsigned char r = "..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              while (r > 0 && !I"..., '1', 1795) = 0x00f0da7a
[0x40cdf3] memchr("1 and 2 as a result of the *, bu"..., '\n', 1394) = 0x00f0daa7
[0x4022d1] memchr("              while (r > 0 && !I"..., '\n', 374) = 0x00f0d920
[0x4022d1] memchr("                r--;\n           "..., '\n', 318) = 0x00f0d935
[0x4022d1] memchr("              \n              /* "..., '\n', 297) = 0x00f0d944
[0x4022d1] memchr("              /* If we end up at"..., '\n', 282) = 0x00f0d98d
[0x4022d1] memchr("                 the registers a"..., '\n', 209) = 0x00f0d9d7
[0x4022d1] memchr("                 a `start_memory"..., '\n', 135) = 0x00f0da1e
[0x4022d1] memchr("                 `stop_memory'. "..., '\n', 64) = 0x00f0da5e
[0x4022d1] memchr("                 registers 1 and"..., '\n', 0) = NULL
[0x4023cc] fwrite("5340:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 registers 1 and"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 back to the sec"..., '1', 1348) = 0x00f0dae9
[0x40cdf3] memchr("1.\n                 Thus, nothin"..., '\n', 1283) = 0x00f0daeb
[0x4022d1] memchr("                 back to the sec"..., '\n', 0) = NULL
[0x4023cc] fwrite("5341:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 back to the sec"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 Thus, nothing i"..., '1', 1280) = 0x00f0de3c
[0x40cdf3] memchr("1 = p + 2;\n              mcnt = "..., '\n', 432) = 0x00f0de46
[0x4022d1] memchr("                 Thus, nothing i"..., '\n', 833) = 0x00f0db19
[0x4022d1] memchr("\t      if (r == 0)\n             "..., '\n', 787) = 0x00f0db2c
[0x4022d1] memchr("                {\n              "..., '\n', 768) = 0x00f0db3e
[0x4022d1] memchr("                  lowest_active_"..., '\n', 750) = 0x00f0db7a
[0x4022d1] memchr("                  highest_active"..., '\n', 690) = 0x00f0dbb8
[0x4022d1] memchr("                }\n              "..., '\n', 628) = 0x00f0dbca
[0x4022d1] memchr("              else\n             "..., '\n', 610) = 0x00f0dbdd
[0x4022d1] memchr("                highest_active_r"..., '\n', 591) = 0x00f0dc05
[0x4022d1] memchr("            }\n          \n       "..., '\n', 551) = 0x00f0dc13
[0x4022d1] memchr("          \n          /* If just "..., '\n', 537) = 0x00f0dc1e
[0x4022d1] memchr("          /* If just failed to m"..., '\n', 526) = 0x00f0dc65
[0x4022d1] memchr("             group that's operat"..., '\n', 455) = 0x00f0dcac
[0x4022d1] memchr("             force exit from the"..., '\n', 384) = 0x00f0dcf0
[0x4022d1] memchr("             information for thi"..., '\n', 316) = 0x00f0dd37
[0x4022d1] memchr("             last match.  */\n   "..., '\n', 245) = 0x00f0dd54
[0x4022d1] memchr("          if ((!MATCHED_SOMETHIN"..., '\n', 216) = 0x00f0dd85
[0x4022d1] memchr("               || (re_opcode_t) "..., '\n', 167) = 0x00f0ddbc
[0x4022d1] memchr("\t      && (p + 2) < pend)       "..., '\n', 112) = 0x00f0dde4
[0x4022d1] memchr("            {\n              bool"..., '\n', 72) = 0x00f0ddf2
[0x4022d1] memchr("              boolean is_a_jump_"..., '\n', 58) = 0x00f0de1d
[0x4022d1] memchr("              \n              p1 "..., '\n', 15) = 0x00f0de2c
[0x4022d1] memchr("              p1 = p + 2;\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("5363:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              p1 = p + 2;\n      "..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              mcnt = 0;\n        "..., '1', 421) = 0x00f0de85
[0x40cdf3] memchr("1++)\n                {\n         "..., '\n', 359) = 0x00f0de89
[0x4022d1] memchr("              mcnt = 0;\n        "..., '\n', 24) = 0x00f0de5e
[0x4022d1] memchr("              switch ((re_opcode"..., '\n', 0) = NULL
[0x4023cc] fwrite("5365:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              switch ((re_opcode"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                {\n              "..., '1', 354) = 0x00f0df77
[0x40cdf3] memchr("1);\n\t\t    if (is_a_jump_n)\n\t\t   "..., '\n', 117) = 0x00f0df7a
[0x4022d1] memchr("                {\n              "..., '\n', 185) = 0x00f0de9b
[0x4022d1] memchr("                  case jump_n:\n\t"..., '\n', 167) = 0x00f0deba
[0x4022d1] memchr("\t\t    is_a_jump_n = true;\n      "..., '\n', 136) = 0x00f0ded4
[0x4022d1] memchr("                  case pop_failu"..., '\n', 110) = 0x00f0defd
[0x4022d1] memchr("\t\t  case maybe_pop_jump:\n\t\t  cas"..., '\n', 69) = 0x00f0df16
[0x4022d1] memchr("\t\t  case jump:\n\t\t  case dummy_fa"..., '\n', 44) = 0x00f0df25
[0x4022d1] memchr("\t\t  case dummy_failure_jump:\n   "..., '\n', 29) = 0x00f0df42
[0x4022d1] memchr("                    EXTRACT_NUMB"..., '\n', 0) = NULL
[0x4023cc] fwrite("5373:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    EXTRACT_NUMB"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    if (is_a_jump_n)\n\t\t      p"..., '1', 113) = 0x00f0df9b
[0x40cdf3] memchr("1 += 2;\n                    brea"..., '\n', 81) = 0x00f0dfa2
[0x4022d1] memchr("\t\t    if (is_a_jump_n)\n\t\t      p"..., '\n', 23) = 0x00f0df91
[0x4022d1] memchr("\t\t      p1 += 2;\n               "..., '\n', 0) = NULL
[0x4023cc] fwrite("5375:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      p1 += 2;\n               "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    break;\n     "..., '1', 73) = NULL
[0x4022d1] memchr("                    break;\n     "..., '\n', 73) = 0x00f0dfbd
[0x4022d1] memchr("                  \n             "..., '\n', 46) = 0x00f0dfd0
[0x4022d1] memchr("                  default:\n     "..., '\n', 27) = 0x00f0dfeb
[0x4022d1] memchr("                    ", '\n', 0) = NULL
[0x4020b3] memmove(0xf05fec, 0xf0dfec, 20, 0xf0dfec, 0x7fce6d444260) = 0xf05fec
[0x402213] read(3, "/* do nothing */ ;\n             "..., 32768) = 32768
[0x40bc2b] memchr("                    /* do nothin"..., '1', 32767) = 0x00f0602d
[0x40cdf3] memchr("1 += mcnt;\n        \n            "..., '\n', 32702) = 0x00f06037
[0x4022d1] memchr("                    /* do nothin"..., '\n', 57) = 0x00f06012
[0x4022d1] memchr("                }\n\t      p1 += m"..., '\n', 18) = 0x00f06024
[0x4022d1] memchr("\t      p1 += mcnt;\n        \n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("5381:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      p1 += mcnt;\n        \n    "..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        \n              /* If the"..., '1', 32691) = 0x00f061c6
[0x40cdf3] memchr("1 == on_failure_jump\n           "..., '\n', 32293) = 0x00f061da
[0x4022d1] memchr("        \n              /* If the"..., '\n', 352) = 0x00f06040
[0x4022d1] memchr("              /* If the next ope"..., '\n', 343) = 0x00f0608a
[0x4022d1] memchr("\t         to an on_failure_jump "..., '\n', 269) = 0x00f060c8
[0x4022d1] memchr("                 corresponding t"..., '\n', 207) = 0x00f0610f
[0x4022d1] memchr("                 by forcing a fa"..., '\n', 136) = 0x00f06154
[0x4022d1] memchr("                 on_failure_jump"..., '\n', 67) = 0x00f06197
[0x4022d1] memchr("              if (mcnt < 0 && (r"..., '\n', 0) = NULL
[0x4023cc] fwrite("5388:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              if (mcnt < 0 && (r"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  && (re_opcode_"..., '1', 32272) = 0x00f061ff
[0x40cdf3] memchr("1[3] == start_memory && p1[4] =="..., '\n', 32236) = 0x00f06223
[0x4022d1] memchr("                  && (re_opcode_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5389:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  && (re_opcode_"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t{\n                  /* If this"..., '1', 32199) = 0x00f0631a
[0x40cdf3] memchr("1], and, e.g., with `((a*)*(b*)*"..., '\n', 31953) = 0x00f0633d
[0x4022d1] memchr("\t\t{\n                  /* If this"..., '\n', 216) = 0x00f06227
[0x4022d1] memchr("                  /* If this gro"..., '\n', 212) = 0x00f0626e
[0x4022d1] memchr("                     what its re"..., '\n', 141) = 0x00f062b3
[0x4022d1] memchr("                     failed matc"..., '\n', 72) = 0x00f062fb
[0x4022d1] memchr("                     regstart[1]"..., '\n', 0) = NULL
[0x4023cc] fwrite("5394:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                     regstart[1]"..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                     against `ab"..., '1', 31917) = 0x00f0658b
[0x40cdf3] memchr("1); r++)\n                       "..., '\n', 31328) = 0x00f06593
[0x4022d1] memchr("                     against `ab"..., '\n', 539) = 0x00f0636f
[0x4022d1] memchr("                     \n          "..., '\n', 489) = 0x00f06385
[0x4022d1] memchr("                     Also restor"..., '\n', 467) = 0x00f063cb
[0x4022d1] memchr("                     e.g., `((a*"..., '\n', 397) = 0x00f06414
[0x4022d1] memchr("                     otherwise g"..., '\n', 324) = 0x00f06445
[0x4022d1] memchr("                     \n          "..., '\n', 275) = 0x00f0645b
[0x4022d1] memchr("                  if (EVER_MATCH"..., '\n', 253) = 0x00f06498
[0x4022d1] memchr("\t\t    {\n\t\t      unsigned r; \n   "..., '\n', 192) = 0x00f064a0
[0x4022d1] memchr("\t\t      unsigned r; \n        \n  "..., '\n', 184) = 0x00f064b5
[0x4022d1] memchr("        \n                      E"..., '\n', 163) = 0x00f064be
[0x4022d1] memchr("                      EVER_MATCH"..., '\n', 154) = 0x00f064ff
[0x4022d1] memchr("                      \n\t\t      /"..., '\n', 89) = 0x00f06516
[0x4022d1] memchr("\t\t      /* Restore this and inne"..., '\n', 66) = 0x00f06558
[0x4022d1] memchr("                      for (r = *"..., '\n', 0) = NULL
[0x4023cc] fwrite("5408:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      for (r = *"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                        {\n      "..., '1', 31319) = 0x00f066d4
[0x40cdf3] memchr("1++;\n                  EXTRACT_N"..., '\n', 30999) = 0x00f066d8
[0x4022d1] memchr("                        {\n      "..., '\n', 315) = 0x00f065ad
[0x4022d1] memchr("                          regsta"..., '\n', 289) = 0x00f065e6
[0x4022d1] memchr("\n                          /* xx"..., '\n', 232) = 0x00f065e7
[0x4022d1] memchr("                          /* xx "..., '\n', 231) = 0x00f0661a
[0x4022d1] memchr("                          if ((i"..., '\n', 180) = 0x00f06662
[0x4022d1] memchr("                            rege"..., '\n', 108) = 0x00f06699
[0x4022d1] memchr("                        }     \n "..., '\n', 53) = 0x00f066b8
[0x4022d1] memchr("                    }\n\t\t  p1++;\n"..., '\n', 22) = 0x00f066ce
[0x4022d1] memchr("\t\t  p1++;\n                  EXTR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5417:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  p1++;\n                  EXTR"..., 1, 10, 0x7fce6d444260) = 10
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  EXTRACT_NUMBER"..., '1', 30994) = 0x00f0670b
[0x40cdf3] memchr("1);\n                  PUSH_FAILU"..., '\n', 30944) = 0x00f0670e
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("5418:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  PUSH_FAILURE_P"..., '1', 30940) = 0x00f06736
[0x40cdf3] memchr("1 + mcnt, d, -2);\n\n             "..., '\n', 30901) = 0x00f06747
[0x4022d1] memchr("                  PUSH_FAILURE_P"..., '\n', 0) = NULL
[0x4023cc] fwrite("5419:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  PUSH_FAILURE_P"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                  goto fail;\n  "..., '1', 30883) = 0x00f06bff
[0x40cdf3] memchr("1);\n\t    for (;;)\n\t      {\n\t\t/* "..., '\n', 29676) = 0x00f06c02
[0x4022d1] memchr("\n                  goto fail;\n  "..., '\n', 1172) = 0x00f06748
[0x4022d1] memchr("                  goto fail;\n   "..., '\n', 1171) = 0x00f06765
[0x4022d1] memchr("                }\n            }\n"..., '\n', 1142) = 0x00f06777
[0x4022d1] memchr("            }\n          \n       "..., '\n', 1124) = 0x00f06785
[0x4022d1] memchr("          \n          /* Move pas"..., '\n', 1110) = 0x00f06790
[0x4022d1] memchr("          /* Move past the regis"..., '\n', 1099) = 0x00f067da
[0x4022d1] memchr("          p += 2;\n          brea"..., '\n', 1025) = 0x00f067ec
[0x4022d1] memchr("          break;\n\n\n\t/* \\<digit> "..., '\n', 1007) = 0x00f067fd
[0x4022d1] memchr("\n\n\t/* \\<digit> has been turned i"..., '\n', 990) = 0x00f067fe
[0x4022d1] memchr("\n\t/* \\<digit> has been turned in"..., '\n', 989) = 0x00f067ff
[0x4022d1] memchr("\t/* \\<digit> has been turned int"..., '\n', 988) = 0x00f06840
[0x4022d1] memchr("           followed by the numer"..., '\n', 923) = 0x00f06890
[0x4022d1] memchr("        case duplicate:\n\t  {\n\t  "..., '\n', 843) = 0x00f068a8
[0x4022d1] memchr("\t  {\n\t    register const char *d"..., '\n', 819) = 0x00f068ad
[0x4022d1] memchr("\t    register const char *d2, *d"..., '\n', 814) = 0x00f068d3
[0x4022d1] memchr("\t    int regno = *p++;   /* Get "..., '\n', 776) = 0x00f06918
[0x4022d1] memchr("\t    DEBUG_PRINT2 ("EXECUTING du"..., '\n', 707) = 0x00f06950
[0x4022d1] memchr("\n\t    /* Can't back reference a "..., '\n', 651) = 0x00f06951
[0x4022d1] memchr("\t    /* Can't back reference a g"..., '\n', 650) = 0x00f06995
[0x4022d1] memchr("            if (REG_UNSET (regst"..., '\n', 582) = 0x00f069df
[0x4022d1] memchr("              goto fail;\n       "..., '\n', 508) = 0x00f069f8
[0x4022d1] memchr("              \n            /* Wh"..., '\n', 483) = 0x00f06a07
[0x4022d1] memchr("            /* Where in input to"..., '\n', 468) = 0x00f06a43
[0x4022d1] memchr("            d2 = regstart[regno]"..., '\n', 408) = 0x00f06a65
[0x4022d1] memchr("            \n            /* Wher"..., '\n', 374) = 0x00f06a72
[0x4022d1] memchr("            /* Where to stop mat"..., '\n', 361) = 0x00f06ab8
[0x4022d1] memchr("               the place to stop"..., '\n', 291) = 0x00f06aff
[0x4022d1] memchr("               set to the place "..., '\n', 220) = 0x00f06b47
[0x4022d1] memchr("               the end of the fi"..., '\n', 148) = 0x00f06b77
[0x4022d1] memchr("\n            dend2 = ((FIRST_STR"..., '\n', 100) = 0x00f06b78
[0x4022d1] memchr("            dend2 = ((FIRST_STRI"..., '\n', 99) = 0x00f06bb0
[0x4022d1] memchr("\t\t      == FIRST_STRING_P (regen"..., '\n', 43) = 0x00f06bdb
[0x4022d1] memchr("\t\t     ? regend[regno] : end_mat"..., '\n', 0) = NULL
[0x4023cc] fwrite("5452:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t     ? regend[regno] : end_mat"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    for (;;)\n\t      {\n\t\t/* If n"..., '1', 29672) = 0x00f06d03
[0x40cdf3] memchr("1 => advance to string2. */\n    "..., '\n', 29416) = 0x00f06d1e
[0x4022d1] memchr("\t    for (;;)\n\t      {\n\t\t/* If n"..., '\n', 220) = 0x00f06c10
[0x4022d1] memchr("\t      {\n\t\t/* If necessary, adva"..., '\n', 206) = 0x00f06c19
[0x4022d1] memchr("\t\t/* If necessary, advance to ne"..., '\n', 197) = 0x00f06c50
[0x4022d1] memchr("                   contents.  */"..., '\n', 142) = 0x00f06c71
[0x4022d1] memchr("\t\twhile (d2 == dend2)\n\t\t  {\n\t\t  "..., '\n', 109) = 0x00f06c87
[0x4022d1] memchr("\t\t  {\n\t\t    if (dend2 == end_mat"..., '\n', 87) = 0x00f06c8d
[0x4022d1] memchr("\t\t    if (dend2 == end_match_2) "..., '\n', 81) = 0x00f06cb4
[0x4022d1] memchr("\t\t    if (dend2 == regend[regno]"..., '\n', 42) = 0x00f06cdd
[0x4022d1] memchr("\n                    /* End of s"..., '\n', 1) = 0x00f06cde
[0x4022d1] memchr("                    /* End of st"..., '\n', 0) = NULL
[0x4023cc] fwrite("5462:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    /* End of st"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    d2 = string2"..., '1', 29388) = 0x00f07128
[0x40cdf3] memchr("1 ("EXECUTING begline.\\n");\n    "..., '\n', 28355) = 0x00f07143
[0x4022d1] memchr("                    d2 = string2"..., '\n', 1012) = 0x00f06d40
[0x4022d1] memchr("                    dend2 = rege"..., '\n', 978) = 0x00f06d6b
[0x4022d1] memchr("\t\t  }\n\t\t/* At end of register co"..., '\n', 935) = 0x00f06d71
[0x4022d1] memchr("\t\t/* At end of register contents"..., '\n', 929) = 0x00f06da0
[0x4022d1] memchr("\t\tif (d2 == dend2) break;\n\n\t\t/* "..., '\n', 882) = 0x00f06dba
[0x4022d1] memchr("\n\t\t/* If necessary, advance to n"..., '\n', 856) = 0x00f06dbb
[0x4022d1] memchr("\t\t/* If necessary, advance to ne"..., '\n', 855) = 0x00f06df3
[0x4022d1] memchr("\t\tPREFETCH ();\n\n\t\t/* How many ch"..., '\n', 799) = 0x00f06e02
[0x4022d1] memchr("\n\t\t/* How many characters left i"..., '\n', 784) = 0x00f06e03
[0x4022d1] memchr("\t\t/* How many characters left in"..., '\n', 783) = 0x00f06e3f
[0x4022d1] memchr("\t\tmcnt = dend - d;\n             "..., '\n', 723) = 0x00f06e52
[0x4022d1] memchr("                \n\t\t/* Want how m"..., '\n', 704) = 0x00f06e63
[0x4022d1] memchr("\t\t/* Want how many consecutive c"..., '\n', 687) = 0x00f06e9d
[0x4022d1] memchr("                   one shot, so,"..., '\n', 629) = 0x00f06ee2
[0x4022d1] memchr("                if (mcnt > dend2"..., '\n', 560) = 0x00f06f09
[0x4022d1] memchr("\t\t  mcnt = dend2 - d2;\n         "..., '\n', 521) = 0x00f06f20
[0x4022d1] memchr("                  \n\t\t/* Compare "..., '\n', 498) = 0x00f06f33
[0x4022d1] memchr("\t\t/* Compare that many; failure "..., '\n', 479) = 0x00f06f6a
[0x4022d1] memchr("                   past them.  *"..., '\n', 424) = 0x00f06f8c
[0x4022d1] memchr("\t\tif (translate \n               "..., '\n', 390) = 0x00f06f9d
[0x4022d1] memchr("                    ? bcmp_trans"..., '\n', 373) = 0x00f06fdc
[0x4022d1] memchr("                    : bcmp (d, d"..., '\n', 310) = 0x00f07006
[0x4022d1] memchr("\t\t  goto fail;\n\t\td += mcnt, d2 +"..., '\n', 268) = 0x00f07015
[0x4022d1] memchr("\t\td += mcnt, d2 += mcnt;\n\t      "..., '\n', 253) = 0x00f0702e
[0x4022d1] memchr("\t      }\n\t  }\n\t  break;\n\n\n      "..., '\n', 228) = 0x00f07037
[0x4022d1] memchr("\t  }\n\t  break;\n\n\n        /* begl"..., '\n', 219) = 0x00f0703c
[0x4022d1] memchr("\t  break;\n\n\n        /* begline m"..., '\n', 214) = 0x00f07046
[0x4022d1] memchr("\n\n        /* begline matches the"..., '\n', 204) = 0x00f07047
[0x4022d1] memchr("\n        /* begline matches the "..., '\n', 203) = 0x00f07048
[0x4022d1] memchr("        /* begline matches the e"..., '\n', 202) = 0x00f07093
[0x4022d1] memchr("           (unless `not_bol' is "..., '\n', 127) = 0x00f070cb
[0x4022d1] memchr("           `newline_anchor' is s"..., '\n', 71) = 0x00f07103
[0x4022d1] memchr("\tcase begline:\n          DEBUG_P"..., '\n', 15) = 0x00f07112
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5496:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          \n          if (AT_STRI"..., '1', 28327) = 0x00f071cc
[0x40cdf3] memchr("1] == '\\n' && bufp->newline_anch"..., '\n', 28191) = 0x00f071ef
[0x4022d1] memchr("          \n          if (AT_STRI"..., '\n', 114) = 0x00f0714e
[0x4022d1] memchr("          if (AT_STRINGS_BEG (d)"..., '\n', 103) = 0x00f07170
[0x4022d1] memchr("            {\n              if ("..., '\n', 69) = 0x00f0717e
[0x4022d1] memchr("              if (!bufp->not_bol"..., '\n', 55) = 0x00f071a7
[0x4022d1] memchr("            }\n          else if "..., '\n', 14) = 0x00f071b5
[0x4022d1] memchr("          else if (d[-1] == '\\n'"..., '\n', 0) = NULL
[0x4023cc] fwrite("5502:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          else if (d[-1] == '\\n'"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            {\n              brea"..., '1', 28155) = 0x00f072b9
[0x40cdf3] memchr("1 ("EXECUTING endline.\\n");\n\n   "..., '\n', 27954) = 0x00f072d4
[0x4022d1] memchr("            {\n              brea"..., '\n', 180) = 0x00f071fd
[0x4022d1] memchr("              break;\n           "..., '\n', 166) = 0x00f07212
[0x4022d1] memchr("            }\n          /* In al"..., '\n', 145) = 0x00f07220
[0x4022d1] memchr("          /* In all other cases,"..., '\n', 131) = 0x00f0724e
[0x4022d1] memchr("          goto fail;\n\n\n        /"..., '\n', 85) = 0x00f07263
[0x4022d1] memchr("\n\n        /* endline is the dual"..., '\n', 64) = 0x00f07264
[0x4022d1] memchr("\n        /* endline is the dual "..., '\n', 63) = 0x00f07265
[0x4022d1] memchr("        /* endline is the dual o"..., '\n', 62) = 0x00f07294
[0x4022d1] memchr("\tcase endline:\n          DEBUG_P"..., '\n', 15) = 0x00f072a3
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5512:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          if (AT_STRINGS_END (d"..., '1', 27926) = 0x00f073a1
[0x40cdf3] memchr("1 ? *string2 : *d) == '\\n'\n     "..., '\n', 27722) = 0x00f073bb
[0x4022d1] memchr("\n          if (AT_STRINGS_END (d"..., '\n', 176) = 0x00f072d5
[0x4022d1] memchr("          if (AT_STRINGS_END (d)"..., '\n', 175) = 0x00f072f7
[0x4022d1] memchr("            {\n              if ("..., '\n', 141) = 0x00f07305
[0x4022d1] memchr("              if (!bufp->not_eol"..., '\n', 127) = 0x00f0732e
[0x4022d1] memchr("            }\n          \n       "..., '\n', 86) = 0x00f0733c
[0x4022d1] memchr("          \n          /* We have "..., '\n', 72) = 0x00f07347
[0x4022d1] memchr("          /* We have to ``prefet"..., '\n', 61) = 0x00f07384
[0x4022d1] memchr("          else if ((d == end1 ? "..., '\n', 0) = NULL
[0x4023cc] fwrite("5520:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          else if ((d == end1 ? "..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                   && bufp->newl"..., '1', 27695) = 0x00f0748b
[0x40cdf3] memchr("1 ("EXECUTING begbuf.\\n");\n     "..., '\n', 27488) = 0x00f074a5
[0x4022d1] memchr("                   && bufp->newl"..., '\n', 186) = 0x00f073e7
[0x4022d1] memchr("            {\n              brea"..., '\n', 142) = 0x00f073f5
[0x4022d1] memchr("              break;\n           "..., '\n', 128) = 0x00f0740a
[0x4022d1] memchr("            }\n          goto fai"..., '\n', 107) = 0x00f07418
[0x4022d1] memchr("          goto fail;\n\n\n\t/* Match"..., '\n', 93) = 0x00f0742d
[0x4022d1] memchr("\n\n\t/* Match at the very beginnin"..., '\n', 72) = 0x00f0742e
[0x4022d1] memchr("\n\t/* Match at the very beginning"..., '\n', 71) = 0x00f0742f
[0x4022d1] memchr("\t/* Match at the very beginning "..., '\n', 70) = 0x00f07460
[0x4022d1] memchr("        case begbuf:\n          D"..., '\n', 21) = 0x00f07475
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5530:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          if (AT_STRINGS_BEG (d)"..., '1', 27461) = 0x00f07547
[0x40cdf3] memchr("1 ("EXECUTING endbuf.\\n");\n\t  if"..., '\n', 27300) = 0x00f07561
[0x4022d1] memchr("          if (AT_STRINGS_BEG (d)"..., '\n', 140) = 0x00f074c7
[0x4022d1] memchr("            break;\n          got"..., '\n', 106) = 0x00f074da
[0x4022d1] memchr("          goto fail;\n\n\n\t/* Match"..., '\n', 87) = 0x00f074ef
[0x4022d1] memchr("\n\n\t/* Match at the very end of t"..., '\n', 66) = 0x00f074f0
[0x4022d1] memchr("\n\t/* Match at the very end of th"..., '\n', 65) = 0x00f074f1
[0x4022d1] memchr("\t/* Match at the very end of the"..., '\n', 64) = 0x00f0751c
[0x4022d1] memchr("        case endbuf:\n          D"..., '\n', 21) = 0x00f07531
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5538:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (AT_STRINGS_END (d))\n\t    "..., '1', 27273) = 0x00f079db
[0x40cdf3] memchr("1 ("EXECUTING on_failure_keep_st"..., '\n', 26128) = 0x00f07a07
[0x4022d1] memchr("\t  if (AT_STRINGS_END (d))\n\t    "..., '\n', 1124) = 0x00f0757c
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 1097) = 0x00f07588
[0x4022d1] memchr("          goto fail;\n\n\n        /"..., '\n', 1085) = 0x00f0759d
[0x4022d1] memchr("\n\n        /* on_failure_keep_str"..., '\n', 1064) = 0x00f0759e
[0x4022d1] memchr("\n        /* on_failure_keep_stri"..., '\n', 1063) = 0x00f0759f
[0x4022d1] memchr("        /* on_failure_keep_strin"..., '\n', 1062) = 0x00f075e6
[0x4022d1] memchr("           pushes NULL as the va"..., '\n', 991) = 0x00f0762d
[0x4022d1] memchr("           `pop_failure_point' w"..., '\n', 920) = 0x00f07670
[0x4022d1] memchr("           string, instead of re"..., '\n', 853) = 0x00f076b2
[0x4022d1] memchr("           matching `foo\\nbar' a"..., '\n', 787) = 0x00f076fa
[0x4022d1] memchr("           then the . fails agai"..., '\n', 715) = 0x00f07742
[0x4022d1] memchr("           to do is match the \\n"..., '\n', 643) = 0x00f07786
[0x4022d1] memchr("           string value, we woul"..., '\n', 575) = 0x00f077bc
[0x4022d1] memchr("           \n           Because t"..., '\n', 521) = 0x00f077c8
[0x4022d1] memchr("           Because this is used "..., '\n', 509) = 0x00f07811
[0x4022d1] memchr("           check all the things "..., '\n', 436) = 0x00f07856
[0x4022d1] memchr("           sure the right things"..., '\n', 367) = 0x00f0789f
[0x4022d1] memchr("           share its code.  The "..., '\n', 294) = 0x00f078e3
[0x4022d1] memchr("           stack at all is that "..., '\n', 226) = 0x00f07925
[0x4022d1] memchr("           `anychar's code to do"..., '\n', 160) = 0x00f0796a
[0x4022d1] memchr("           case; that seems wors"..., '\n', 91) = 0x00f0799b
[0x4022d1] memchr("        case on_failure_keep_str"..., '\n', 42) = 0x00f079c5
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5561:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          \n          EXTRACT_NUM"..., '1', 26083) = 0x00f07d74
[0x40cdf3] memchr("1 ("EXECUTING on_failure_jump");"..., '\n', 25207) = 0x00f07d94
[0x4022d1] memchr("          \n          EXTRACT_NUM"..., '\n', 855) = 0x00f07a12
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 844) = 0x00f07a3f
[0x4022d1] memchr("          DEBUG_PRINT3 (" %d (to"..., '\n', 799) = 0x00f07a7c
[0x4022d1] memchr("\n          PUSH_FAILURE_POINT (p"..., '\n', 738) = 0x00f07a7d
[0x4022d1] memchr("          PUSH_FAILURE_POINT (p "..., '\n', 737) = 0x00f07ab0
[0x4022d1] memchr("          break;\n\n\n\t/* Uses of o"..., '\n', 686) = 0x00f07ac1
[0x4022d1] memchr("\n\n\t/* Uses of on_failure_jump:\n "..., '\n', 669) = 0x00f07ac2
[0x4022d1] memchr("\n\t/* Uses of on_failure_jump:\n  "..., '\n', 668) = 0x00f07ac3
[0x4022d1] memchr("\t/* Uses of on_failure_jump:\n   "..., '\n', 667) = 0x00f07ae0
[0x4022d1] memchr("        \n           Each alterna"..., '\n', 638) = 0x00f07ae9
[0x4022d1] memchr("           Each alternative star"..., '\n', 629) = 0x00f07b30
[0x4022d1] memchr("           to the beginning of t"..., '\n', 558) = 0x00f07b77
[0x4022d1] memchr("           except the last ends "..., '\n', 487) = 0x00f07bbd
[0x4022d1] memchr("           the rest of the alter"..., '\n', 417) = 0x00f07c00
[0x4022d1] memchr("           ending jump of the fo"..., '\n', 350) = 0x00f07c48
[0x4022d1] memchr("           these jumps is a hass"..., '\n', 278) = 0x00f07c6d
[0x4022d1] memchr("\n           Repeats start with a"..., '\n', 241) = 0x00f07c6e
[0x4022d1] memchr("           Repeats start with an"..., '\n', 240) = 0x00f07cb5
[0x4022d1] memchr("           the repetition text a"..., '\n', 169) = 0x00f07cf5
[0x4022d1] memchr("           pop_failure_jump back"..., '\n', 105) = 0x00f07d33
[0x4022d1] memchr("\tcase on_failure_jump:\n        o"..., '\n', 43) = 0x00f07d4a
[0x4022d1] memchr("        on_failure:\n          DE"..., '\n', 20) = 0x00f07d5e
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5584:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          EXTRACT_NUMBER_AND_IN"..., '1', 25174) = 0x00f07f3d
[0x40cdf3] memchr("1, we need the preceding group,\n"..., '\n', 24750) = 0x00f07f5c
[0x4022d1] memchr("\n          EXTRACT_NUMBER_AND_IN"..., '\n', 387) = 0x00f07d95
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 386) = 0x00f07dc2
[0x4022d1] memchr("          DEBUG_PRINT3 (" %d (to"..., '\n', 341) = 0x00f07dfc
[0x4022d1] memchr("\n          /* If this on_failure"..., '\n', 283) = 0x00f07dfd
[0x4022d1] memchr("          /* If this on_failure_"..., '\n', 282) = 0x00f07e44
[0x4022d1] memchr("             the original * appl"..., '\n', 211) = 0x00f07e8a
[0x4022d1] memchr("             for that group and "..., '\n', 141) = 0x00f07ed2
[0x4022d1] memchr("             to this point, the "..., '\n', 69) = 0x00f07f17
[0x4022d1] memchr("             For example, in \\(a"..., '\n', 0) = NULL
[0x4023cc] fwrite("5593:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("             For example, in \\(a"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("             and in \\(\\(a*\\)b*\\)"..., '1', 24718) = 0x00f08028
[0x40cdf3] memchr("1 = p;\n\n          /* We need to "..., '\n', 24515) = 0x00f0802e
[0x4022d1] memchr("             and in \\(\\(a*\\)b*\\)"..., '\n', 192) = 0x00f07f9d
[0x4022d1] memchr("\n          /* We can't use `p' t"..., '\n', 127) = 0x00f07f9e
[0x4022d1] memchr("          /* We can't use `p' to"..., '\n', 126) = 0x00f07fdb
[0x4022d1] memchr("             a failure point to "..., '\n', 65) = 0x00f0801c
[0x4022d1] memchr("          p1 = p;\n\n          /* "..., '\n', 0) = NULL
[0x4023cc] fwrite("5598:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1 = p;\n\n          /* "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          /* We need to skip no"..., '1', 24508) = 0x00f080f2
[0x40cdf3] memchr("1,3\\}b\\1\n             against ab"..., '\n', 24313) = 0x00f080fa
[0x4022d1] memchr("\n          /* We need to skip no"..., '\n', 132) = 0x00f0802f
[0x4022d1] memchr("          /* We need to skip no_"..., '\n', 131) = 0x00f0806b
[0x4022d1] memchr("             start_memory in cas"..., '\n', 71) = 0x00f080b2
[0x4022d1] memchr("             the result of a com"..., '\n', 0) = NULL
[0x4023cc] fwrite("5602:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("             the result of a com"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("             against aba.  */\n  "..., '1', 24304) = 0x00f0812b
[0x40cdf3] memchr("1 < pend && (re_opcode_t) *p1 =="..., '\n', 24256) = 0x00f08152
[0x4022d1] memchr("             against aba.  */\n  "..., '\n', 30) = 0x00f08118
[0x4022d1] memchr("          while (p1 < pend && (r"..., '\n', 0) = NULL
[0x4023cc] fwrite("5604:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          while (p1 < pend && (r"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            p1++;\n\n          if "..., '1', 24216) = 0x00f08160
[0x40cdf3] memchr("1++;\n\n          if (p1 < pend &&"..., '\n', 24203) = 0x00f08164
[0x4022d1] memchr("            p1++;\n\n          if "..., '\n', 0) = NULL
[0x4023cc] fwrite("5605:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            p1++;\n\n          if "..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n          if (p1 < pend && (re_"..., '1', 24198) = 0x00f08175
[0x40cdf3] memchr("1 < pend && (re_opcode_t) *p1 =="..., '\n', 24182) = 0x00f081a3
[0x4022d1] memchr("\n          if (p1 < pend && (re_"..., '\n', 1) = 0x00f08165
[0x4022d1] memchr("          if (p1 < pend && (re_o"..., '\n', 0) = NULL
[0x4023cc] fwrite("5607:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          if (p1 < pend && (re_o"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            {\n              /* W"..., '1', 24135) = 0x00f082e9
[0x40cdf3] memchr("1 + 1) + *(p1 + 2);\n            "..., '\n', 23810) = 0x00f082fc
[0x4022d1] memchr("            {\n              /* W"..., '\n', 287) = 0x00f081b1
[0x4022d1] memchr("              /* We have a new h"..., '\n', 273) = 0x00f081f8
[0x4022d1] memchr("                 get reset at th"..., '\n', 202) = 0x00f0823f
[0x4022d1] memchr("                 but we will hav"..., '\n', 131) = 0x00f08285
[0x4022d1] memchr("                 this repetition"..., '\n', 61) = 0x00f082c2
[0x4022d1] memchr("              highest_active_reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("5613:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              highest_active_reg"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              if (lowest_active_"..., '1', 23790) = 0x00f08361
[0x40cdf3] memchr("1 + 1);\n            }\n\n         "..., '\n', 23690) = 0x00f08368
[0x4022d1] memchr("              if (lowest_active_"..., '\n', 61) = 0x00f08339
[0x4022d1] memchr("                lowest_active_re"..., '\n', 0) = NULL
[0x4023cc] fwrite("5615:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                lowest_active_re"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            }\n\n          DEBUG_P"..., '1', 23682) = 0x00f0838d
[0x40cdf3] memchr("1 (":\\n");\n          PUSH_FAILUR"..., '\n', 23646) = 0x00f08397
[0x4022d1] memchr("            }\n\n          DEBUG_P"..., '\n', 15) = 0x00f08376
[0x4022d1] memchr("\n          DEBUG_PRINT1 (":\\n");"..., '\n', 1) = 0x00f08377
[0x4022d1] memchr("          DEBUG_PRINT1 (":\\n");\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("5618:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 (":\\n");\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          PUSH_FAILURE_POINT (p "..., '1', 23635) = 0x00f08a04
[0x40cdf3] memchr("1\n                  ("  End of p"..., '\n', 21991) = 0x00f08a05
[0x4022d1] memchr("          PUSH_FAILURE_POINT (p "..., '\n', 1617) = 0x00f083c7
[0x4022d1] memchr("          break;\n\n\n        /* A "..., '\n', 1569) = 0x00f083d8
[0x4022d1] memchr("\n\n        /* A smart repeat ends"..., '\n', 1552) = 0x00f083d9
[0x4022d1] memchr("\n        /* A smart repeat ends "..., '\n', 1551) = 0x00f083da
[0x4022d1] memchr("        /* A smart repeat ends w"..., '\n', 1550) = 0x00f08410
[0x4022d1] memchr("\t   We change it to either `pop_"..., '\n', 1496) = 0x00f0844d
[0x4022d1] memchr("        case maybe_pop_jump:\n   "..., '\n', 1435) = 0x00f0846a
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 1406) = 0x00f08497
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 1361) = 0x00f084d8
[0x4022d1] memchr("          {\n\t    register unsign"..., '\n', 1296) = 0x00f084e4
[0x4022d1] memchr("\t    register unsigned char *p2 "..., '\n', 1284) = 0x00f08509
[0x4022d1] memchr("\n            /* Compare the begi"..., '\n', 1247) = 0x00f0850a
[0x4022d1] memchr("            /* Compare the begin"..., '\n', 1246) = 0x00f0854e
[0x4022d1] memchr("               pattern follows i"..., '\n', 1178) = 0x00f08595
[0x4022d1] memchr("               is nothing that t"..., '\n', 1107) = 0x00f085d9
[0x4022d1] memchr("               would have to bac"..., '\n', 1039) = 0x00f08620
[0x4022d1] memchr("               then we can chang"..., '\n', 968) = 0x00f08665
[0x4022d1] memchr("               never have to bac"..., '\n', 899) = 0x00f0868d
[0x4022d1] memchr("               \n               T"..., '\n', 859) = 0x00f0869d
[0x4022d1] memchr("               This is not true "..., '\n', 843) = 0x00f086dd
[0x4022d1] memchr("               `(a|ab)*' we do n"..., '\n', 779) = 0x00f08726
[0x4022d1] memchr("               (e.g., if the str"..., '\n', 706) = 0x00f0876f
[0x4022d1] memchr("               detect that here,"..., '\n', 633) = 0x00f087b3
[0x4022d1] memchr("               failure point whi"..., '\n', 565) = 0x00f087fa
[0x4022d1] memchr("\n\t    /* Skip over open/close-gr"..., '\n', 494) = 0x00f087fb
[0x4022d1] memchr("\t    /* Skip over open/close-gro"..., '\n', 493) = 0x00f0882c
[0x4022d1] memchr("\t    while (p2 + 2 < pend\n\t\t   &"..., '\n', 444) = 0x00f08846
[0x4022d1] memchr("\t\t   && ((re_opcode_t) *p2 == st"..., '\n', 418) = 0x00f08870
[0x4022d1] memchr("\t\t       || (re_opcode_t) *p2 =="..., '\n', 376) = 0x00f088a0
[0x4022d1] memchr("\t      p2 += 3;\t\t\t/* Skip over a"..., '\n', 328) = 0x00f088ce
[0x4022d1] memchr("\n            /* If we're at the "..., '\n', 282) = 0x00f088cf
[0x4022d1] memchr("            /* If we're at the e"..., '\n', 281) = 0x00f08915
[0x4022d1] memchr("            if (p2 == pend)\n\t   "..., '\n', 211) = 0x00f08931
[0x4022d1] memchr("\t      {\n\t\t/* Consider what happ"..., '\n', 183) = 0x00f0893a
[0x4022d1] memchr("\t\t/* Consider what happens when "..., '\n', 174) = 0x00f0896d
[0x4022d1] memchr("\t\t   against ":/".  I don't real"..., '\n', 123) = 0x00f089a5
[0x4022d1] memchr("\t\t   yet.  */\n  \t        p[-3] ="..., '\n', 67) = 0x00f089b3
[0x4022d1] memchr("  \t        p[-3] = (unsigned cha"..., '\n', 53) = 0x00f089e8
[0x4022d1] memchr("                DEBUG_PRINT1\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("5657:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                DEBUG_PRINT1\n   "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  ("  End of pat"..., '1', 21989) = 0x00f08b3d
[0x40cdf3] memchr("1 = p + mcnt;\n\n                /"..., '\n', 21678) = 0x00f08b4a
[0x4022d1] memchr("                  ("  End of pat"..., '\n', 308) = 0x00f08a4e
[0x4022d1] memchr("              }\n\n            els"..., '\n', 235) = 0x00f08a5e
[0x4022d1] memchr("\n            else if ((re_opcode"..., '\n', 219) = 0x00f08a5f
[0x4022d1] memchr("            else if ((re_opcode_"..., '\n', 218) = 0x00f08a90
[0x4022d1] memchr("\t\t     || (bufp->newline_anchor "..., '\n', 169) = 0x00f08ad2
[0x4022d1] memchr("\t      {\n\t\tregister unsigned cha"..., '\n', 103) = 0x00f08adb
[0x4022d1] memchr("\t\tregister unsigned char c\n     "..., '\n', 94) = 0x00f08af6
[0x4022d1] memchr("                  = *p2 == (unsi"..., '\n', 67) = 0x00f08b39
[0x4022d1] memchr("\t\tp1 = p + mcnt;\n\n              "..., '\n', 0) = NULL
[0x4023cc] fwrite("5666:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\tp1 = p + mcnt;\n\n              "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                /* p1[0] ... p1"..., '1', 21664) = 0x00f08b60
[0x40cdf3] memchr("1[0] ... p1[2] are the `on_failu"..., '\n', 21643) = 0x00f08b96
[0x4022d1] memchr("\n                /* p1[0] ... p1"..., '\n', 1) = 0x00f08b4b
[0x4022d1] memchr("                /* p1[0] ... p1["..., '\n', 0) = NULL
[0x4023cc] fwrite("5668:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                /* p1[0] ... p1["..., 1, 75, 0x7fce6d444260) = 75
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                   to the `maybe"..., '1', 21588) = 0x00f08c27
[0x40cdf3] memchr("1[3] == exactn && p1[5] != c)\n  "..., '\n', 21444) = 0x00f08c44
[0x4022d1] memchr("                   to the `maybe"..., '\n', 109) = 0x00f08be3
[0x4022d1] memchr("                   follows.  */\n"..., '\n', 32) = 0x00f08c03
[0x4022d1] memchr("                if ((re_opcode_t"..., '\n', 0) = NULL
[0x4023cc] fwrite("5671:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                if ((re_opcode_t"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  {\n  \t\t    p[-3"..., '1', 21414) = 0x00f08cf8
[0x40cdf3] memchr("1[5]);\n                  }\n     "..., '\n', 21235) = 0x00f08cfe
[0x4022d1] memchr("                  {\n  \t\t    p[-3"..., '\n', 141) = 0x00f08c58
[0x4022d1] memchr("  \t\t    p[-3] = (unsigned char) "..., '\n', 121) = 0x00f08c8a
[0x4022d1] memchr("                    DEBUG_PRINT3"..., '\n', 71) = 0x00f08cd1
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("5675:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                                "..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  }\n            "..., '1', 21228) = 0x00f08d40
[0x40cdf3] memchr("1[3] == charset\n\t\t\t || (re_opcod"..., '\n', 21163) = 0x00f08d4f
[0x4022d1] memchr("                  }\n            "..., '\n', 39) = 0x00f08d12
[0x4022d1] memchr("                  \n\t\telse if ((r"..., '\n', 19) = 0x00f08d25
[0x4022d1] memchr("\t\telse if ((re_opcode_t) p1[3] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("5678:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\telse if ((re_opcode_t) p1[3] ="..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t || (re_opcode_t) p1[3] == ch"..., '1', 21147) = 0x00f08d66
[0x40cdf3] memchr("1[3] == charset_not)\n\t\t  {\n\t\t   "..., '\n', 21125) = 0x00f08d7a
[0x4022d1] memchr("\t\t\t || (re_opcode_t) p1[3] == ch"..., '\n', 0) = NULL
[0x4023cc] fwrite("5679:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t || (re_opcode_t) p1[3] == ch"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  {\n\t\t    int not = (re_opcode"..., '1', 21104) = 0x00f08da0
[0x40cdf3] memchr("1[3] == charset_not;\n           "..., '\n', 21067) = 0x00f08db4
[0x4022d1] memchr("\t\t  {\n\t\t    int not = (re_opcode"..., '\n', 6) = 0x00f08d80
[0x4022d1] memchr("\t\t    int not = (re_opcode_t) p1"..., '\n', 0) = NULL
[0x4023cc] fwrite("5681:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t    int not = (re_opcode_t) p1"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    \n\t\t    if (c"..., '1', 21046) = 0x00f08dea
[0x40cdf3] memchr("1[4] * BYTEWIDTH)\n\t\t\t&& p1[5 + c"..., '\n', 20993) = 0x00f08dfb
[0x4022d1] memchr("                    \n\t\t    if (c"..., '\n', 21) = 0x00f08dc9
[0x4022d1] memchr("\t\t    if (c < (unsigned char) (p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5683:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t    if (c < (unsigned char) (p"..., 1, 50, 0x7fce6d444260) = 50
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., '1', 20975) = 0x00f08e03
[0x40cdf3] memchr("1[5 + c / BYTEWIDTH] & (1 << (c "..., '\n', 20968) = 0x00f08e31
[0x4022d1] memchr("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("5684:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      not = !not;\n\n           "..., '1', 20921) = 0x00f08e70
[0x40cdf3] memchr("1 if c would match, which means\n"..., '\n', 20859) = 0x00f08e8f
[0x4022d1] memchr("\t\t      not = !not;\n\n           "..., '\n', 21) = 0x00f08e45
[0x4022d1] memchr("\n                    /* `not' is"..., '\n', 1) = 0x00f08e46
[0x4022d1] memchr("                    /* `not' is "..., '\n', 0) = NULL
[0x4023cc] fwrite("5687:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                    /* `not' is "..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                        that we "..., '1', 20827) = 0x00f08f57
[0x40cdf3] memchr("1 ("  No match => pop_failure_ju"..., '\n', 20628) = 0x00f08f7f
[0x4022d1] memchr("                        that we "..., '\n', 164) = 0x00f08ed5
[0x4022d1] memchr("\t\t    if (!not)\n                "..., '\n', 94) = 0x00f08ee5
[0x4022d1] memchr("                      {\n  \t\t    "..., '\n', 78) = 0x00f08efd
[0x4022d1] memchr("  \t\t        p[-3] = (unsigned ch"..., '\n', 54) = 0x00f08f33
[0x4022d1] memchr("                        DEBUG_PR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5692:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                        DEBUG_PR"..., 1, 76, 0x7fce6d444260) = 76
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      }\n\t\t  }\n\t "..., '1', 20587) = 0x00f08ff8
[0x40cdf3] memchr("1] != pop_failure_jump)\n\t    {\n\t"..., '\n', 20467) = 0x00f0900f
[0x4022d1] memchr("                      }\n\t\t  }\n\t "..., '\n', 96) = 0x00f08f97
[0x4022d1] memchr("\t\t  }\n\t      }\n\t  }\n\t  p -= 2;\t\t"..., '\n', 72) = 0x00f08f9d
[0x4022d1] memchr("\t      }\n\t  }\n\t  p -= 2;\t\t/* Poi"..., '\n', 66) = 0x00f08fa6
[0x4022d1] memchr("\t  }\n\t  p -= 2;\t\t/* Point at rel"..., '\n', 57) = 0x00f08fab
[0x4022d1] memchr("\t  p -= 2;\t\t/* Point at relative"..., '\n', 52) = 0x00f08fdf
[0x4022d1] memchr("\t  if ((re_opcode_t) p[-1] != po"..., '\n', 0) = NULL
[0x4023cc] fwrite("5698:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if ((re_opcode_t) p[-1] != po"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    {\n\t      p[-1] = (unsigned "..., '1', 20443) = 0x00f09021
[0x40cdf3] memchr("1] = (unsigned char) jump;\n     "..., '\n', 20426) = 0x00f0903b
[0x4022d1] memchr("\t    {\n\t      p[-1] = (unsigned "..., '\n', 7) = 0x00f09016
[0x4022d1] memchr("\t      p[-1] = (unsigned char) j"..., '\n', 0) = NULL
[0x4023cc] fwrite("5700:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      p[-1] = (unsigned char) j"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              DEBUG_PRINT1 ("  M"..., '1', 20399) = 0x00f09055
[0x40cdf3] memchr("1 ("  Match => jump.\\n");\n\t     "..., '\n', 20374) = 0x00f0906e
[0x4022d1] memchr("              DEBUG_PRINT1 ("  M"..., '\n', 0) = NULL
[0x4023cc] fwrite("5701:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              DEBUG_PRINT1 ("  M"..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      goto unconditional_jump;\n"..., '1', 20348) = 0x00f09434
[0x40cdf3] memchr("1 ("EXECUTING pop_failure_jump.\\"..., '\n', 19383) = 0x00f09458
[0x4022d1] memchr("\t      goto unconditional_jump;\n"..., '\n', 942) = 0x00f0908e
[0x4022d1] memchr("\t    }\n        /* Note fall thro"..., '\n', 910) = 0x00f09095
[0x4022d1] memchr("        /* Note fall through.  *"..., '\n', 903) = 0x00f090b7
[0x4022d1] memchr("\n\n\t/* The end of a simple repeat"..., '\n', 869) = 0x00f090b8
[0x4022d1] memchr("\n\t/* The end of a simple repeat "..., '\n', 868) = 0x00f090b9
[0x4022d1] memchr("\t/* The end of a simple repeat h"..., '\n', 867) = 0x00f090f7
[0x4022d1] memchr("           its matching on_failu"..., '\n', 805) = 0x00f0913d
[0x4022d1] memchr("           failure point.  The p"..., '\n', 735) = 0x00f0917f
[0x4022d1] memchr("           points put on by this"..., '\n', 669) = 0x00f091bc
[0x4022d1] memchr("           on_failure_jump; we g"..., '\n', 608) = 0x00f09204
[0x4022d1] memchr("           matching on_failure_j"..., '\n', 536) = 0x00f0923d
[0x4022d1] memchr("        case pop_failure_jump:\n "..., '\n', 479) = 0x00f0925c
[0x4022d1] memchr("          {\n            /* We ne"..., '\n', 448) = 0x00f09268
[0x4022d1] memchr("            /* We need to pass s"..., '\n', 436) = 0x00f092ab
[0x4022d1] memchr("               highest registers"..., '\n', 369) = 0x00f092f1
[0x4022d1] memchr("               actual values.  O"..., '\n', 299) = 0x00f09334
[0x4022d1] memchr("               register from the"..., '\n', 232) = 0x00f0937c
[0x4022d1] memchr("               `pop_failure_poin"..., '\n', 160) = 0x00f093a4
[0x4022d1] memchr("            unsigned dummy_low_r"..., '\n', 120) = 0x00f093d8
[0x4022d1] memchr("            unsigned char *pdumm"..., '\n', 68) = 0x00f093fb
[0x4022d1] memchr("            const char *sdummy;\n"..., '\n', 33) = 0x00f0941b
[0x4022d1] memchr("\n            DEBUG_PRINT1 ("EXEC"..., '\n', 1) = 0x00f0941c
[0x4022d1] memchr("            DEBUG_PRINT1 ("EXECU"..., '\n', 0) = NULL
[0x4023cc] fwrite("5724:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT1 ("EXECU"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            POP_FAILURE_POINT (s"..., '1', 19346) = 0x00f0973f
[0x40cdf3] memchr("1 ("EXECUTING jump_past_alt.\\n")"..., '\n', 18604) = 0x00f09760
[0x4022d1] memchr("            POP_FAILURE_POINT (s"..., '\n', 721) = 0x00f09487
[0x4022d1] memchr("                               d"..., '\n', 674) = 0x00f094c5
[0x4022d1] memchr("                               r"..., '\n', 612) = 0x00f0950b
[0x4022d1] memchr("          }\n          /* Note fa"..., '\n', 542) = 0x00f09517
[0x4022d1] memchr("          /* Note fall through. "..., '\n', 530) = 0x00f0953b
[0x4022d1] memchr("\n          \n        /* Unconditi"..., '\n', 494) = 0x00f0953c
[0x4022d1] memchr("          \n        /* Unconditio"..., '\n', 493) = 0x00f09547
[0x4022d1] memchr("        /* Unconditionally jump "..., '\n', 482) = 0x00f09591
[0x4022d1] memchr("        case jump:\n\tunconditiona"..., '\n', 408) = 0x00f095a4
[0x4022d1] memchr("\tunconditional_jump:\n\t  EXTRACT_"..., '\n', 389) = 0x00f095b9
[0x4022d1] memchr("\t  EXTRACT_NUMBER_AND_INCR (mcnt"..., '\n', 368) = 0x00f095fe
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 299) = 0x00f09633
[0x4022d1] memchr("\t  p += mcnt;\t\t\t\t/* Do the jump."..., '\n', 246) = 0x00f09658
[0x4022d1] memchr("          DEBUG_PRINT2 ("(to 0x%"..., '\n', 209) = 0x00f09684
[0x4022d1] memchr("\t  break;\n\n\t\n        /* We need "..., '\n', 165) = 0x00f0968e
[0x4022d1] memchr("\n\t\n        /* We need this opcod"..., '\n', 155) = 0x00f0968f
[0x4022d1] memchr("\t\n        /* We need this opcode"..., '\n', 154) = 0x00f09691
[0x4022d1] memchr("        /* We need this opcode s"..., '\n', 152) = 0x00f096d8
[0x4022d1] memchr("           in `group_match_null_"..., '\n', 81) = 0x00f0970d
[0x4022d1] memchr("        case jump_past_alt:\n    "..., '\n', 28) = 0x00f09729
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5745:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          goto unconditional_jum"..., '1', 18570) = 0x00f09916
[0x40cdf3] memchr("1 ("EXECUTING dummy_failure_jump"..., '\n', 18133) = 0x00f0993c
[0x4022d1] memchr("          goto unconditional_jum"..., '\n', 416) = 0x00f09783
[0x4022d1] memchr("\n\n        /* Normally, the on_fa"..., '\n', 381) = 0x00f09784
[0x4022d1] memchr("\n        /* Normally, the on_fai"..., '\n', 380) = 0x00f09785
[0x4022d1] memchr("        /* Normally, the on_fail"..., '\n', 379) = 0x00f097cc
[0x4022d1] memchr("           then gets popped at p"..., '\n', 308) = 0x00f09810
[0x4022d1] memchr("           pop_failure_jump, als"..., '\n', 240) = 0x00f09858
[0x4022d1] memchr("           are skipping over the"..., '\n', 168) = 0x00f0989d
[0x4022d1] memchr("           something meaningless"..., '\n', 99) = 0x00f098df
[0x4022d1] memchr("        case dummy_failure_jump:"..., '\n', 33) = 0x00f09900
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5755:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          /* It doesn't matter w"..., '1', 18094) = 0x00f09ba6
[0x40cdf3] memchr("1 ("EXECUTING push_dummy_failure"..., '\n', 17477) = 0x00f09bcc
[0x4022d1] memchr("          /* It doesn't matter w"..., '\n', 596) = 0x00f09983
[0x4022d1] memchr("             the code at `fail' "..., '\n', 525) = 0x00f099cb
[0x4022d1] memchr("          PUSH_FAILURE_POINT (0,"..., '\n', 453) = 0x00f099f4
[0x4022d1] memchr("          goto unconditional_jum"..., '\n', 412) = 0x00f09a17
[0x4022d1] memchr("\n\n        /* At the end of an al"..., '\n', 377) = 0x00f09a18
[0x4022d1] memchr("\n        /* At the end of an alt"..., '\n', 376) = 0x00f09a19
[0x4022d1] memchr("        /* At the end of an alte"..., '\n', 375) = 0x00f09a62
[0x4022d1] memchr("           point in case we are "..., '\n', 302) = 0x00f09aac
[0x4022d1] memchr("           we don't want the fai"..., '\n', 228) = 0x00f09af1
[0x4022d1] memchr("           popped.  For example,"..., '\n', 159) = 0x00f09b33
[0x4022d1] memchr("           requires that we matc"..., '\n', 93) = 0x00f09b6f
[0x4022d1] memchr("        case push_dummy_failure:"..., '\n', 33) = 0x00f09b90
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5768:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          /* See comments just a"..., '1', 17438) = 0x00f0a1b5
[0x40cdf3] memchr("1 ("EXECUTING set_number_at.\\n")"..., '\n', 15926) = 0x00f0a1d6
[0x4022d1] memchr("          /* See comments just a"..., '\n', 1489) = 0x00f09c13
[0x4022d1] memchr("             two zeroes.  */\n   "..., '\n', 1418) = 0x00f09c30
[0x4022d1] memchr("          PUSH_FAILURE_POINT (0,"..., '\n', 1389) = 0x00f09c59
[0x4022d1] memchr("          break;\n\n        /* Hav"..., '\n', 1348) = 0x00f09c6a
[0x4022d1] memchr("\n        /* Have to succeed matc"..., '\n', 1331) = 0x00f09c6b
[0x4022d1] memchr("        /* Have to succeed match"..., '\n', 1330) = 0x00f09cae
[0x4022d1] memchr("           After that, handle li"..., '\n', 1263) = 0x00f09ce8
[0x4022d1] memchr("        case succeed_n: \n       "..., '\n', 1205) = 0x00f09d01
[0x4022d1] memchr("          EXTRACT_NUMBER (mcnt, "..., '\n', 1180) = 0x00f09d29
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 1140) = 0x00f09d65
[0x4022d1] memchr("\n          assert (mcnt >= 0);\n "..., '\n', 1080) = 0x00f09d66
[0x4022d1] memchr("          assert (mcnt >= 0);\n  "..., '\n', 1079) = 0x00f09d84
[0x4022d1] memchr("          /* Originally, this is"..., '\n', 1049) = 0x00f09dcc
[0x4022d1] memchr("          if (mcnt > 0)\n        "..., '\n', 977) = 0x00f09de4
[0x4022d1] memchr("            {\n               mcn"..., '\n', 953) = 0x00f09df2
[0x4022d1] memchr("               mcnt--;\n\t       p"..., '\n', 939) = 0x00f09e09
[0x4022d1] memchr("\t       p += 2;\n               S"..., '\n', 916) = 0x00f09e19
[0x4022d1] memchr("               STORE_NUMBER_AND_"..., '\n', 900) = 0x00f09e49
[0x4022d1] memchr("               DEBUG_PRINT3 ("  "..., '\n', 852) = 0x00f09e8b
[0x4022d1] memchr("            }\n\t  else if (mcnt ="..., '\n', 786) = 0x00f09e99
[0x4022d1] memchr("\t  else if (mcnt == 0)\n         "..., '\n', 772) = 0x00f09eb0
[0x4022d1] memchr("            {\n              DEBU"..., '\n', 749) = 0x00f09ebe
[0x4022d1] memchr("              DEBUG_PRINT2 ("  S"..., '\n', 735) = 0x00f09f0d
[0x4022d1] memchr("\t      p[2] = (unsigned char) no"..., '\n', 656) = 0x00f09f32
[0x4022d1] memchr("              p[3] = (unsigned c"..., '\n', 619) = 0x00f09f5e
[0x4022d1] memchr("              goto on_failure;\n "..., '\n', 575) = 0x00f09f7d
[0x4022d1] memchr("            }\n          break;\n "..., '\n', 544) = 0x00f09f8b
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 530) = 0x00f09f9c
[0x4022d1] memchr("        \n        case jump_n: \n "..., '\n', 513) = 0x00f09fa5
[0x4022d1] memchr("        case jump_n: \n          "..., '\n', 504) = 0x00f09fbb
[0x4022d1] memchr("          EXTRACT_NUMBER (mcnt, "..., '\n', 482) = 0x00f09fe3
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 442) = 0x00f0a01c
[0x4022d1] memchr("\n          /* Originally, this i"..., '\n', 385) = 0x00f0a01d
[0x4022d1] memchr("          /* Originally, this is"..., '\n', 384) = 0x00f0a05e
[0x4022d1] memchr("          if (mcnt)\n            "..., '\n', 319) = 0x00f0a072
[0x4022d1] memchr("            {\n               mcn"..., '\n', 299) = 0x00f0a080
[0x4022d1] memchr("               mcnt--;\n         "..., '\n', 285) = 0x00f0a097
[0x4022d1] memchr("               STORE_NUMBER (p +"..., '\n', 262) = 0x00f0a0c2
[0x4022d1] memchr("\t       goto unconditional_jump;"..., '\n', 219) = 0x00f0a0e9
[0x4022d1] memchr("            }\n          /* If do"..., '\n', 180) = 0x00f0a0f7
[0x4022d1] memchr("          /* If don't have to ju"..., '\n', 166) = 0x00f0a147
[0x4022d1] memchr("\t  else      \n\t    p += 4;\t\t    "..., '\n', 86) = 0x00f0a155
[0x4022d1] memchr("\t    p += 4;\t\t     \n          br"..., '\n', 72) = 0x00f0a169
[0x4022d1] memchr("          break;\n        \n\tcase "..., '\n', 52) = 0x00f0a17a
[0x4022d1] memchr("        \n\tcase set_number_at:\n\t "..., '\n', 35) = 0x00f0a183
[0x4022d1] memchr("\tcase set_number_at:\n\t  {\n      "..., '\n', 26) = 0x00f0a198
[0x4022d1] memchr("\t  {\n            DEBUG_PRINT1 (""..., '\n', 5) = 0x00f0a19d
[0x4022d1] memchr("            DEBUG_PRINT1 ("EXECU"..., '\n', 0) = NULL
[0x4023cc] fwrite("5816:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT1 ("EXECU"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n            EXTRACT_NUMBER_AND_"..., '1', 15892) = 0x00f0a214
[0x40cdf3] memchr("1 = p + mcnt;\n            EXTRAC"..., '\n', 15831) = 0x00f0a221
[0x4022d1] memchr("\n            EXTRACT_NUMBER_AND_"..., '\n', 48) = 0x00f0a1d7
[0x4022d1] memchr("            EXTRACT_NUMBER_AND_I"..., '\n', 47) = 0x00f0a206
[0x4022d1] memchr("            p1 = p + mcnt;\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("5819:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            p1 = p + mcnt;\n     "..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            EXTRACT_NUMBER_AND_I"..., '1', 15817) = 0x00f0a287
[0x40cdf3] memchr("1, mcnt);\n\t    STORE_NUMBER (p1,"..., '\n', 15716) = 0x00f0a290
[0x4022d1] memchr("            EXTRACT_NUMBER_AND_I"..., '\n', 47) = 0x00f0a250
[0x4022d1] memchr("            DEBUG_PRINT3 ("  Set"..., '\n', 0) = NULL
[0x4023cc] fwrite("5821:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT3 ("  Set"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    STORE_NUMBER (p1, mcnt);\n  "..., '1', 15706) = 0x00f0a2a5
[0x40cdf3] memchr("1, mcnt);\n            break;\n   "..., '\n', 15686) = 0x00f0a2ae
[0x4022d1] memchr("\t    STORE_NUMBER (p1, mcnt);\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("5822:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    STORE_NUMBER (p1, mcnt);\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            break;\n          }\n\n"..., '1', 15676) = 0x00f0a2fc
[0x40cdf3] memchr("1 ("EXECUTING wordbound.\\n");\n  "..., '\n', 15599) = 0x00f0a319
[0x4022d1] memchr("            break;\n          }\n\n"..., '\n', 56) = 0x00f0a2c1
[0x4022d1] memchr("          }\n\n        case wordbo"..., '\n', 37) = 0x00f0a2cd
[0x4022d1] memchr("\n        case wordbound:\n       "..., '\n', 25) = 0x00f0a2ce
[0x4022d1] memchr("        case wordbound:\n        "..., '\n', 24) = 0x00f0a2e6
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5827:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          if (AT_WORD_BOUNDARY ("..., '1', 15569) = 0x00f0a389
[0x40cdf3] memchr("1 ("EXECUTING notwordbound.\\n");"..., '\n', 15458) = 0x00f0a3a9
[0x4022d1] memchr("          if (AT_WORD_BOUNDARY ("..., '\n', 90) = 0x00f0a33d
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 54) = 0x00f0a349
[0x4022d1] memchr("          goto fail;\n\n\tcase notw"..., '\n', 42) = 0x00f0a35e
[0x4022d1] memchr("\n\tcase notwordbound:\n          D"..., '\n', 21) = 0x00f0a35f
[0x4022d1] memchr("\tcase notwordbound:\n          DE"..., '\n', 20) = 0x00f0a373
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5833:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (AT_WORD_BOUNDARY (d))\n\t  "..., '1', 15425) = 0x00f0a40d
[0x40cdf3] memchr("1 ("EXECUTING wordbeg.\\n");\n\t  i"..., '\n', 15326) = 0x00f0a428
[0x4022d1] memchr("\t  if (AT_WORD_BOUNDARY (d))\n\t  "..., '\n', 78) = 0x00f0a3c6
[0x4022d1] memchr("\t    goto fail;\n          break;"..., '\n', 49) = 0x00f0a3d6
[0x4022d1] memchr("          break;\n\n\tcase wordbeg:"..., '\n', 33) = 0x00f0a3e7
[0x4022d1] memchr("\n\tcase wordbeg:\n          DEBUG_"..., '\n', 16) = 0x00f0a3e8
[0x4022d1] memchr("\tcase wordbeg:\n          DEBUG_P"..., '\n', 15) = 0x00f0a3f7
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5839:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (WORDCHAR_P (d) && (AT_STR"..., '1', 15298) = 0x00f0a46a
[0x40cdf3] memchr("1)))\n\t    break;\n          goto "..., '\n', 15233) = 0x00f0a46e
[0x4022d1] memchr("\t  if (WORDCHAR_P (d) && (AT_STR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5840:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if (WORDCHAR_P (d) && (AT_STR"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    break;\n          goto fail;"..., '1', 15228) = 0x00f0a4b5
[0x40cdf3] memchr("1 ("EXECUTING wordend.\\n");\n\t  i"..., '\n', 15158) = 0x00f0a4d0
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 49) = 0x00f0a47a
[0x4022d1] memchr("          goto fail;\n\n\tcase word"..., '\n', 37) = 0x00f0a48f
[0x4022d1] memchr("\n\tcase wordend:\n          DEBUG_"..., '\n', 16) = 0x00f0a490
[0x4022d1] memchr("\tcase wordend:\n          DEBUG_P"..., '\n', 15) = 0x00f0a49f
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5845:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (!AT_STRINGS_BEG (d) && WO"..., '1', 15130) = 0x00f0a4ff
[0x40cdf3] memchr("1)\n              && (!WORDCHAR_P"..., '\n', 15084) = 0x00f0a501
[0x4022d1] memchr("\t  if (!AT_STRINGS_BEG (d) && WO"..., '\n', 0) = NULL
[0x4023cc] fwrite("5846:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if (!AT_STRINGS_BEG (d) && WO"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("              && (!WORDCHAR_P (d"..., '1', 15081) = 0x00f0a577
[0x40cdf3] memchr("19\n  \tcase before_dot:\n         "..., '\n', 14964) = 0x00f0a579
[0x4022d1] memchr("              && (!WORDCHAR_P (d"..., '\n', 105) = 0x00f0a53b
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 47) = 0x00f0a547
[0x4022d1] memchr("          goto fail;\n\n#ifdef ema"..., '\n', 35) = 0x00f0a55c
[0x4022d1] memchr("\n#ifdef emacs\n#ifdef emacs19\n  \t"..., '\n', 14) = 0x00f0a55d
[0x4022d1] memchr("#ifdef emacs\n#ifdef emacs19\n  \tc"..., '\n', 13) = 0x00f0a56a
[0x4022d1] memchr("#ifdef emacs19\n  \tcase before_do"..., '\n', 0) = NULL
[0x4023cc] fwrite("5852:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#ifdef emacs19\n  \tcase before_do"..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \tcase before_dot:\n          DE"..., '1', 14961) = 0x00f0a5a3
[0x40cdf3] memchr("1 ("EXECUTING before_dot.\\n");\n "..., '\n', 14920) = 0x00f0a5c1
[0x4022d1] memchr("  \tcase before_dot:\n          DE"..., '\n', 20) = 0x00f0a58d
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5854:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '1', 14889) = 0x00f0a63d
[0x40cdf3] memchr("1 ("EXECUTING at_dot.\\n");\n \t  i"..., '\n', 14766) = 0x00f0a657
[0x4022d1] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '\n', 102) = 0x00f0a5f6
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n  "..., '\n', 49) = 0x00f0a608
[0x4022d1] memchr("  \t  break;\n  \n  \tcase at_dot:\n "..., '\n', 31) = 0x00f0a614
[0x4022d1] memchr("  \n  \tcase at_dot:\n          DEB"..., '\n', 19) = 0x00f0a617
[0x4022d1] memchr("  \tcase at_dot:\n          DEBUG_"..., '\n', 16) = 0x00f0a627
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5860:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '1', 14739) = 0x00f0a6d6
[0x40cdf3] memchr("1 ("EXECUTING after_dot.\\n");\n  "..., '\n', 14613) = 0x00f0a6f3
[0x4022d1] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '\n', 105) = 0x00f0a68c
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n  "..., '\n', 52) = 0x00f0a69e
[0x4022d1] memchr("  \t  break;\n  \n  \tcase after_dot"..., '\n', 34) = 0x00f0a6aa
[0x4022d1] memchr("  \n  \tcase after_dot:\n          "..., '\n', 22) = 0x00f0a6ad
[0x4022d1] memchr("  \tcase after_dot:\n          DEB"..., '\n', 19) = 0x00f0a6c0
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5866:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 51, 0x7fce6d444260) = 51
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          if (PTR_CHAR_POS ((uns"..., '1', 14583) = 0x00f0a75f
[0x40cdf3] memchr("19 */\n\tcase at_dot:\n          DE"..., '\n', 14476) = 0x00f0a764
[0x4022d1] memchr("          if (PTR_CHAR_POS ((uns"..., '\n', 89) = 0x00f0a72e
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n#e"..., '\n', 30) = 0x00f0a740
[0x4022d1] memchr("  \t  break;\n#else /* not emacs19"..., '\n', 12) = 0x00f0a74c
[0x4022d1] memchr("#else /* not emacs19 */\n\tcase at"..., '\n', 0) = NULL
[0x4023cc] fwrite("5870:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#else /* not emacs19 */\n\tcase at"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tcase at_dot:\n          DEBUG_PR"..., '1', 14470) = 0x00f0a788
[0x40cdf3] memchr("1 ("EXECUTING at_dot.\\n");\n\t  if"..., '\n', 14435) = 0x00f0a7a2
[0x4022d1] memchr("\tcase at_dot:\n          DEBUG_PR"..., '\n', 14) = 0x00f0a772
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5872:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (PTR_CHAR_POS ((unsigned c"..., '1', 14408) = 0x00f0a7cf
[0x40cdf3] memchr("1 != point)\n\t    goto fail;\n\t  b"..., '\n', 14364) = 0x00f0a7da
[0x4022d1] memchr("\t  if (PTR_CHAR_POS ((unsigned c"..., '\n', 0) = NULL
[0x4023cc] fwrite("5873:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if (PTR_CHAR_POS ((unsigned c"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    goto fail;\n\t  break;\n#endif"..., '1', 14352) = 0x00f0a808
[0x40cdf3] memchr("19 */\n\n\tcase syntaxspec:\n       "..., '\n', 14307) = 0x00f0a80d
[0x4022d1] memchr("\t    goto fail;\n\t  break;\n#endif"..., '\n', 26) = 0x00f0a7ea
[0x4022d1] memchr("\t  break;\n#endif /* not emacs19 "..., '\n', 10) = 0x00f0a7f4
[0x4022d1] memchr("#endif /* not emacs19 */\n\n\tcase "..., '\n', 0) = NULL
[0x4023cc] fwrite("5876:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#endif /* not emacs19 */\n\n\tcase "..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\tcase syntaxspec:\n          DEB"..., '1', 14301) = 0x00f0a8b0
[0x40cdf3] memchr("1 ("EXECUTING Emacs wordchar.\\n""..., '\n', 14139) = 0x00f0a8d2
[0x4022d1] memchr("\n\tcase syntaxspec:\n          DEB"..., '\n', 141) = 0x00f0a80e
[0x4022d1] memchr("\tcase syntaxspec:\n          DEBU"..., '\n', 140) = 0x00f0a820
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 122) = 0x00f0a85d
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  goto matchsyn"..., '\n', 61) = 0x00f0a86d
[0x4022d1] memchr("\t  goto matchsyntax;\n\n        ca"..., '\n', 45) = 0x00f0a882
[0x4022d1] memchr("\n        case wordchar:\n        "..., '\n', 24) = 0x00f0a883
[0x4022d1] memchr("        case wordchar:\n         "..., '\n', 23) = 0x00f0a89a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5884:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  mcnt = (int) Sword;\n        m"..., '1', 14104) = 0x00f0aa2d
[0x40cdf3] memchr("1 ("EXECUTING Emacs notwordchar."..., '\n', 13758) = 0x00f0aa52
[0x4022d1] memchr("\t  mcnt = (int) Sword;\n        m"..., '\n', 325) = 0x00f0a8e9
[0x4022d1] memchr("        matchsyntax:\n\t  PREFETCH"..., '\n', 302) = 0x00f0a8fe
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (SYNTAX (*"..., '\n', 281) = 0x00f0a90e
[0x4022d1] memchr("\t  if (SYNTAX (*d++) != (enum sy"..., '\n', 265) = 0x00f0a93e
[0x4022d1] memchr("            goto fail;\n         "..., '\n', 217) = 0x00f0a955
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n\t"..., '\n', 194) = 0x00f0a974
[0x4022d1] memchr("\t  break;\n\n\tcase notsyntaxspec:\n"..., '\n', 163) = 0x00f0a97e
[0x4022d1] memchr("\n\tcase notsyntaxspec:\n          "..., '\n', 153) = 0x00f0a97f
[0x4022d1] memchr("\tcase notsyntaxspec:\n          D"..., '\n', 152) = 0x00f0a994
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 131) = 0x00f0a9d4
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  goto matchnot"..., '\n', 67) = 0x00f0a9e4
[0x4022d1] memchr("\t  goto matchnotsyntax;\n\n       "..., '\n', 51) = 0x00f0a9fc
[0x4022d1] memchr("\n        case notwordchar:\n     "..., '\n', 27) = 0x00f0a9fd
[0x4022d1] memchr("        case notwordchar:\n      "..., '\n', 26) = 0x00f0aa17
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5899:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  mcnt = (int) Sword;\n        m"..., '1', 13720) = 0x00f0ab3e
[0x40cdf3] memchr("1 ("EXECUTING non-Emacs wordchar"..., '\n', 13485) = 0x00f0ab64
[0x4022d1] memchr("\t  mcnt = (int) Sword;\n        m"..., '\n', 214) = 0x00f0aa69
[0x4022d1] memchr("        matchnotsyntax:\n\t  PREFE"..., '\n', 191) = 0x00f0aa81
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (SYNTAX (*"..., '\n', 167) = 0x00f0aa91
[0x4022d1] memchr("\t  if (SYNTAX (*d++) == (enum sy"..., '\n', 151) = 0x00f0aac1
[0x4022d1] memchr("            goto fail;\n\t  SET_RE"..., '\n', 103) = 0x00f0aad8
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 80) = 0x00f0aaf0
[0x4022d1] memchr("          break;\n\n#else /* not e"..., '\n', 56) = 0x00f0ab01
[0x4022d1] memchr("\n#else /* not emacs */\n\tcase wor"..., '\n', 39) = 0x00f0ab02
[0x4022d1] memchr("#else /* not emacs */\n\tcase word"..., '\n', 38) = 0x00f0ab18
[0x4022d1] memchr("\tcase wordchar:\n          DEBUG_"..., '\n', 16) = 0x00f0ab28
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5910:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  PREFETCH ();\n          if (!W"..., '1', 13446) = 0x00f0ac08
[0x40cdf3] memchr("1 ("EXECUTING non-Emacs notwordc"..., '\n', 13283) = 0x00f0ac31
[0x4022d1] memchr("\t  PREFETCH ();\n          if (!W"..., '\n', 142) = 0x00f0ab74
[0x4022d1] memchr("          if (!WORDCHAR_P (d))\n "..., '\n', 126) = 0x00f0ab93
[0x4022d1] memchr("            goto fail;\n\t  SET_RE"..., '\n', 95) = 0x00f0abaa
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 72) = 0x00f0abc2
[0x4022d1] memchr("          d++;\n\t  break;\n\t  \n\tca"..., '\n', 48) = 0x00f0abd1
[0x4022d1] memchr("\t  break;\n\t  \n\tcase notwordchar:"..., '\n', 33) = 0x00f0abdb
[0x4022d1] memchr("\t  \n\tcase notwordchar:\n         "..., '\n', 23) = 0x00f0abdf
[0x4022d1] memchr("\tcase notwordchar:\n          DEB"..., '\n', 19) = 0x00f0abf2
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5919:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 63, 0x7fce6d444260) = 63
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  PREFETCH ();\n\t  if (WORDCHAR_"..., '1', 13241) = 0x00f0adf4
[0x40cdf3] memchr("1 ("\\nFAIL:\\n");\n          POP_F"..., '\n', 12791) = 0x00f0ae04
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (WORDCHAR_"..., '\n', 429) = 0x00f0ac41
[0x4022d1] memchr("\t  if (WORDCHAR_P (d))\n         "..., '\n', 413) = 0x00f0ac58
[0x4022d1] memchr("            goto fail;\n         "..., '\n', 390) = 0x00f0ac6f
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n "..., '\n', 367) = 0x00f0ac8e
[0x4022d1] memchr("          d++;\n\t  break;\n#endif "..., '\n', 336) = 0x00f0ac9d
[0x4022d1] memchr("\t  break;\n#endif /* not emacs */"..., '\n', 321) = 0x00f0aca7
[0x4022d1] memchr("#endif /* not emacs */\n         "..., '\n', 311) = 0x00f0acbe
[0x4022d1] memchr("          \n        default:\n    "..., '\n', 288) = 0x00f0acc9
[0x4022d1] memchr("        default:\n          abort"..., '\n', 277) = 0x00f0acda
[0x4022d1] memchr("          abort ();\n\t}\n      con"..., '\n', 260) = 0x00f0acee
[0x4022d1] memchr("\t}\n      continue;  /* Successfu"..., '\n', 240) = 0x00f0acf1
[0x4022d1] memchr("      continue;  /* Successfully"..., '\n', 237) = 0x00f0ad40
[0x4022d1] memchr("\n\n    /* We goto here if a match"..., '\n', 158) = 0x00f0ad41
[0x4022d1] memchr("\n    /* We goto here if a matchi"..., '\n', 157) = 0x00f0ad42
[0x4022d1] memchr("    /* We goto here if a matchin"..., '\n', 156) = 0x00f0ad78
[0x4022d1] memchr("    fail:\n      if (!FAIL_STACK_"..., '\n', 102) = 0x00f0ad82
[0x4022d1] memchr("      if (!FAIL_STACK_EMPTY ())\n"..., '\n', 92) = 0x00f0ada2
[0x4022d1] memchr("\t{ /* A restart point is known. "..., '\n', 60) = 0x00f0adde
[0x4022d1] memchr("          DEBUG_PRINT1 ("\\nFAIL:"..., '\n', 0) = NULL
[0x4023cc] fwrite("5938:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("\\nFAIL:"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          POP_FAILURE_POINT (d, "..., '1', 12774) = 0x00f0b163
[0x40cdf3] memchr("1 = p + 1;\n                  EXT"..., '\n', 11912) = 0x00f0b16d
[0x4022d1] memchr("          POP_FAILURE_POINT (d, "..., '\n', 843) = 0x00f0ae27
[0x4022d1] memchr("                             low"..., '\n', 808) = 0x00f0ae6b
[0x4022d1] memchr("                             reg"..., '\n', 740) = 0x00f0aea5
[0x4022d1] memchr("\n          /* If this failure po"..., '\n', 682) = 0x00f0aea6
[0x4022d1] memchr("          /* If this failure poi"..., '\n', 681) = 0x00f0aeeb
[0x4022d1] memchr("          if (!p)\n\t    goto fail"..., '\n', 612) = 0x00f0aefd
[0x4022d1] memchr("\t    goto fail;\n\n          /* If"..., '\n', 594) = 0x00f0af0d
[0x4022d1] memchr("\n          /* If we failed to th"..., '\n', 578) = 0x00f0af0e
[0x4022d1] memchr("          /* If we failed to the"..., '\n', 577) = 0x00f0af59
[0x4022d1] memchr("\t  assert (p <= pend);\n         "..., '\n', 502) = 0x00f0af70
[0x4022d1] memchr("          if (p < pend)\n        "..., '\n', 479) = 0x00f0af88
[0x4022d1] memchr("            {\n              bool"..., '\n', 455) = 0x00f0af96
[0x4022d1] memchr("              boolean is_a_jump_"..., '\n', 441) = 0x00f0afc1
[0x4022d1] memchr("              \n              /* "..., '\n', 398) = 0x00f0afd0
[0x4022d1] memchr("              /* If failed to a "..., '\n', 383) = 0x00f0b01b
[0x4022d1] memchr("                 loop, need to p"..., '\n', 308) = 0x00f0b06b
[0x4022d1] memchr("              switch ((re_opcode"..., '\n', 228) = 0x00f0b093
[0x4022d1] memchr("                {\n              "..., '\n', 188) = 0x00f0b0a5
[0x4022d1] memchr("                case jump_n:\n   "..., '\n', 170) = 0x00f0b0c2
[0x4022d1] memchr("                  is_a_jump_n = "..., '\n', 141) = 0x00f0b0e8
[0x4022d1] memchr("                case maybe_pop_j"..., '\n', 103) = 0x00f0b10d
[0x4022d1] memchr("                case pop_failure"..., '\n', 66) = 0x00f0b134
[0x4022d1] memchr("                case jump:\n     "..., '\n', 27) = 0x00f0b14f
[0x4022d1] memchr("                  p1 = p + 1;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("5962:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  p1 = p + 1;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  EXTRACT_NUMBER"..., '1', 11901) = 0x00f0b1a0
[0x40cdf3] memchr("1);\n                  p1 += mcnt"..., '\n', 11851) = 0x00f0b1a3
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("5963:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  p1 += mcnt;\t\n\n"..., '1', 11847) = 0x00f0b1b7
[0x40cdf3] memchr("1 += mcnt;\t\n\n                  i"..., '\n', 11828) = 0x00f0b1c2
[0x4022d1] memchr("                  p1 += mcnt;\t\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("5964:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  p1 += mcnt;\t\n\n"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                  if ((is_a_jum"..., '1', 11816) = 0x00f0b1fa
[0x40cdf3] memchr("1 == succeed_n)\n                "..., '\n', 11761) = 0x00f0b209
[0x4022d1] memchr("\n                  if ((is_a_jum"..., '\n', 1) = 0x00f0b1c3
[0x4022d1] memchr("                  if ((is_a_jump"..., '\n', 0) = NULL
[0x4023cc] fwrite("5966:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  if ((is_a_jump"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      || (!is_a_"..., '1', 11745) = 0x00f0b25e
[0x40cdf3] memchr("1 == on_failure_jump))\n         "..., '\n', 11661) = 0x00f0b274
[0x4022d1] memchr("                      || (!is_a_"..., '\n', 39) = 0x00f0b230
[0x4022d1] memchr("                          && (re"..., '\n', 0) = NULL
[0x4023cc] fwrite("5968:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                          && (re"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    goto fail;\n "..., '1', 11638) = 0x00f0b325
[0x40cdf3] memchr("1 && d <= end1)\n\t    dend = end_"..., '\n', 11462) = 0x00f0b334
[0x4022d1] memchr("                    goto fail;\n "..., '\n', 151) = 0x00f0b293
[0x4022d1] memchr("                  break;\n       "..., '\n', 120) = 0x00f0b2ac
[0x4022d1] memchr("                default:\n       "..., '\n', 95) = 0x00f0b2c5
[0x4022d1] memchr("                  /* do nothing "..., '\n', 70) = 0x00f0b2ea
[0x4022d1] memchr("                }\n            }\n"..., '\n', 33) = 0x00f0b2fc
[0x4022d1] memchr("            }\n\n          if (d >"..., '\n', 15) = 0x00f0b30a
[0x4022d1] memchr("\n          if (d >= string1 && d"..., '\n', 1) = 0x00f0b30b
[0x4022d1] memchr("          if (d >= string1 && d "..., '\n', 0) = NULL
[0x4023cc] fwrite("5976:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          if (d >= string1 && d "..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    dend = end_match_1;\n       "..., '1', 11446) = 0x00f0b34b
[0x40cdf3] memchr("1;\n        }\n      else\n        "..., '\n', 11424) = 0x00f0b34d
[0x4022d1] memchr("\t    dend = end_match_1;\n       "..., '\n', 0) = NULL
[0x4023cc] fwrite("5977:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    dend = end_match_1;\n       "..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        }\n      else\n        bre"..., '1', 11421) = 0x00f0b411
[0x40cdf3] memchr("1;         \t\t\t/* Failure to matc"..., '\n', 11226) = 0x00f0b437
[0x4022d1] memchr("        }\n      else\n        bre"..., '\n', 185) = 0x00f0b357
[0x4022d1] memchr("      else\n        break;   /* M"..., '\n', 175) = 0x00f0b362
[0x4022d1] memchr("        break;   /* Matching at "..., '\n', 164) = 0x00f0b3a8
[0x4022d1] memchr("    } /* for (;;) */\n\n  if (best"..., '\n', 94) = 0x00f0b3bd
[0x4022d1] memchr("\n  if (best_regs_set)\n    goto r"..., '\n', 73) = 0x00f0b3be
[0x4022d1] memchr("  if (best_regs_set)\n    goto re"..., '\n', 72) = 0x00f0b3d3
[0x4022d1] memchr("    goto restore_best_regs;\n\n  F"..., '\n', 51) = 0x00f0b3ef
[0x4022d1] memchr("\n  FREE_VARIABLES ();\n\n  return "..., '\n', 23) = 0x00f0b3f0
[0x4022d1] memchr("  FREE_VARIABLES ();\n\n  return -"..., '\n', 22) = 0x00f0b405
[0x4022d1] memchr("\n  return -1;         \t\t\t/* Fail"..., '\n', 1) = 0x00f0b406
[0x4022d1] memchr("  return -1;         \t\t\t/* Failu"..., '\n', 0) = NULL
[0x4023cc] fwrite("5988:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  return -1;         \t\t\t/* Failu"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("} /* re_match_2 */\n\014\n/* Subrouti"..., '1', 11187) = 0x00f0b6dc
[0x40cdf3] memchr("1 = *p + 2;\n  \n  while (p1 < end"..., '\n', 10511) = 0x00f0b6e7
[0x4022d1] memchr("} /* re_match_2 */\n\014\n/* Subrouti"..., '\n', 658) = 0x00f0b44a
[0x4022d1] memchr("\014\n/* Subroutine definitions for "..., '\n', 639) = 0x00f0b44c
[0x4022d1] memchr("/* Subroutine definitions for re"..., '\n', 637) = 0x00f0b47a
[0x4022d1] memchr("\n\n/* We are passed P pointing to"..., '\n', 591) = 0x00f0b47b
[0x4022d1] memchr("\n/* We are passed P pointing to "..., '\n', 590) = 0x00f0b47c
[0x4022d1] memchr("/* We are passed P pointing to a"..., '\n', 589) = 0x00f0b4c3
[0x4022d1] memchr("   \n   Return true if the patter"..., '\n', 518) = 0x00f0b4c7
[0x4022d1] memchr("   Return true if the pattern up"..., '\n', 514) = 0x00f0b50d
[0x4022d1] memchr("   match the empty string, and f"..., '\n', 444) = 0x00f0b53d
[0x4022d1] memchr("   \n   If we find the matching s"..., '\n', 396) = 0x00f0b541
[0x4022d1] memchr("   If we find the matching stop_"..., '\n', 392) = 0x00f0b591
[0x4022d1] memchr("   Otherwise, sets P to an undef"..., '\n', 312) = 0x00f0b5d6
[0x4022d1] memchr("\n   We don't handle duplicates p"..., '\n', 243) = 0x00f0b5d7
[0x4022d1] memchr("   We don't handle duplicates pr"..., '\n', 242) = 0x00f0b609
[0x4022d1] memchr("\nstatic boolean\ngroup_match_null"..., '\n', 192) = 0x00f0b60a
[0x4022d1] memchr("static boolean\ngroup_match_null_"..., '\n', 191) = 0x00f0b619
[0x4022d1] memchr("group_match_null_string_p (p, en"..., '\n', 176) = 0x00f0b646
[0x4022d1] memchr("    unsigned char **p, *end;\n   "..., '\n', 131) = 0x00f0b663
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 102) = 0x00f0b685
[0x4022d1] memchr("{\n  int mcnt;\n  /* Point to afte"..., '\n', 68) = 0x00f0b687
[0x4022d1] memchr("  int mcnt;\n  /* Point to after "..., '\n', 66) = 0x00f0b693
[0x4022d1] memchr("  /* Point to after the args to "..., '\n', 54) = 0x00f0b6c9
[0x4022d1] memchr("  unsigned char *p1 = *p + 2;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("6011:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  unsigned char *p1 = *p + 2;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  while (p1 < end)\n    {\n    "..., '1', 10499) = 0x00f0b6f5
[0x40cdf3] memchr("1 < end)\n    {\n      /* Skip ove"..., '\n', 10486) = 0x00f0b6fd
[0x4022d1] memchr("  \n  while (p1 < end)\n    {\n    "..., '\n', 3) = 0x00f0b6ea
[0x4022d1] memchr("  while (p1 < end)\n    {\n      /"..., '\n', 0) = NULL
[0x4023cc] fwrite("6013:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (p1 < end)\n    {\n      /"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      /* Skip over opcodes"..., '1', 10477) = 0x00f0b7d4
[0x40cdf3] memchr("1)\n        {\n        /* Could be"..., '\n', 10263) = 0x00f0b7d6
[0x4022d1] memchr("    {\n      /* Skip over opcodes"..., '\n', 184) = 0x00f0b703
[0x4022d1] memchr("      /* Skip over opcodes that "..., '\n', 178) = 0x00f0b749
[0x4022d1] memchr("\t false, as appropriate, when we"..., '\n', 108) = 0x00f0b78b
[0x4022d1] memchr("         matching stop_memory.  "..., '\n', 42) = 0x00f0b7ae
[0x4022d1] memchr("      \n      switch ((re_opcode_"..., '\n', 7) = 0x00f0b7b5
[0x4022d1] memchr("      switch ((re_opcode_t) *p1)"..., '\n', 0) = NULL
[0x4023cc] fwrite("6019:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      switch ((re_opcode_t) *p1)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        {\n        /* Could be ei"..., '1', 10260) = 0x00f0b84d
[0x40cdf3] memchr("1++;\n          EXTRACT_NUMBER_AN"..., '\n', 10142) = 0x00f0b851
[0x4022d1] memchr("        {\n        /* Could be ei"..., '\n', 107) = 0x00f0b7e0
[0x4022d1] memchr("        /* Could be either a loo"..., '\n', 97) = 0x00f0b823
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 30) = 0x00f0b841
[0x4022d1] memchr("          p1++;\n          EXTRAC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6023:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1++;\n          EXTRAC"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          EXTRACT_NUMBER_AND_INC"..., '1', 10137) = 0x00f0b87c
[0x40cdf3] memchr("1);\n          \n          /* If t"..., '\n', 10095) = 0x00f0b87f
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6024:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          \n          /* If the n"..., '1', 10091) = 0x00f0ba80
[0x40cdf3] memchr("1/a/jump_past_alt/0/6\n          "..., '\n', 9579) = 0x00f0ba95
[0x4022d1] memchr("          \n          /* If the n"..., '\n', 467) = 0x00f0b88a
[0x4022d1] memchr("          /* If the next operati"..., '\n', 456) = 0x00f0b8cc
[0x4022d1] memchr("\t     pattern.  */\n\n\t  if (mcnt "..., '\n', 390) = 0x00f0b8df
[0x4022d1] memchr("\n\t  if (mcnt >= 0)\n\t    {\n      "..., '\n', 371) = 0x00f0b8e0
[0x4022d1] memchr("\t  if (mcnt >= 0)\n\t    {\n       "..., '\n', 370) = 0x00f0b8f2
[0x4022d1] memchr("\t    {\n              /* Go throu"..., '\n', 352) = 0x00f0b8f9
[0x4022d1] memchr("              /* Go through the "..., '\n', 345) = 0x00f0b93f
[0x4022d1] memchr("                 seeing if any o"..., '\n', 275) = 0x00f0b988
[0x4022d1] memchr("                 The last altern"..., '\n', 202) = 0x00f0b9c7
[0x4022d1] memchr("                 whereas the res"..., '\n', 139) = 0x00f0ba0c
[0x4022d1] memchr("                 with a jump, e."..., '\n', 70) = 0x00f0ba51
[0x4022d1] memchr("\n                 /on_failure_ju"..., '\n', 1) = 0x00f0ba52
[0x4022d1] memchr("                 /on_failure_jum"..., '\n', 0) = NULL
[0x4023cc] fwrite("6037:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 /on_failure_jum"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 /on_failure_jum"..., '1', 9557) = 0x00f0bac3
[0x40cdf3] memchr("1/b/jump_past_alt/0/3\n          "..., '\n', 9512) = 0x00f0bad8
[0x4022d1] memchr("                 /on_failure_jum"..., '\n', 0) = NULL
[0x4023cc] fwrite("6038:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 /on_failure_jum"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 /exactn/1/c\t\t\t\t"..., '1', 9490) = 0x00f0baf2
[0x40cdf3] memchr("1/c\t\t\t\t\t\t\n\n                 So, "..., '\n', 9465) = 0x00f0bafb
[0x4022d1] memchr("                 /exactn/1/c\t\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("6039:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 /exactn/1/c\t\t\t\t"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                 So, we have to"..., '1', 9455) = 0x00f0bb3b
[0x40cdf3] memchr("1)\n                 alternatives"..., '\n', 9392) = 0x00f0bb3d
[0x4022d1] memchr("\n                 So, we have to"..., '\n', 1) = 0x00f0bafc
[0x4022d1] memchr("                 So, we have to "..., '\n', 0) = NULL
[0x4023cc] fwrite("6041:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                 So, we have to "..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 alternatives an"..., '1', 9389) = 0x00f0bbb6
[0x40cdf3] memchr("1) alternatives, which start\n   "..., '\n', 9269) = 0x00f0bbd2
[0x4022d1] memchr("                 alternatives an"..., '\n', 80) = 0x00f0bb8b
[0x4022d1] memchr("\n\n              /* Deal with the"..., '\n', 2) = 0x00f0bb8c
[0x4022d1] memchr("\n              /* Deal with the "..., '\n', 1) = 0x00f0bb8d
[0x4022d1] memchr("              /* Deal with the f"..., '\n', 0) = NULL
[0x4023cc] fwrite("6045:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              /* Deal with the f"..., 1, 69, 0x7fce6d444260) = 69
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                 with an on_fail"..., '1', 9240) = 0x00f0bc6c
[0x40cdf3] memchr("1[mcnt-3] == jump_past_alt)\n    "..., '\n', 9087) = 0x00f0bc87
[0x4022d1] memchr("                 with an on_fail"..., '\n', 117) = 0x00f0bc1b
[0x4022d1] memchr("                 past a jump_pas"..., '\n', 44) = 0x00f0bc46
[0x4022d1] memchr("\n              while ((re_opcode"..., '\n', 1) = 0x00f0bc47
[0x4022d1] memchr("              while ((re_opcode_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6049:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              while ((re_opcode_"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                {\n              "..., '1', 9059) = 0x00f0bd79
[0x40cdf3] memchr("1, p1 + mcnt - 3, \n\t\t\t\t         "..., '\n', 8818) = 0x00f0bd8b
[0x4022d1] memchr("                {\n              "..., '\n', 192) = 0x00f0bc99
[0x4022d1] memchr("                  /* `mcnt' hold"..., '\n', 174) = 0x00f0bcdf
[0x4022d1] memchr("                     is, includi"..., '\n', 104) = 0x00f0bd21
[0x4022d1] memchr("                     its number."..., '\n', 38) = 0x00f0bd46
[0x4022d1] memchr("\n                  if (!alt_matc"..., '\n', 1) = 0x00f0bd47
[0x4022d1] memchr("                  if (!alt_match"..., '\n', 0) = NULL
[0x4023cc] fwrite("6055:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  if (!alt_match"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t\t                      reg_in"..., '1', 8799) = 0x00f0be4a
[0x40cdf3] memchr("1 += mcnt;\t\n\n                  /"..., '\n', 8609) = 0x00f0be55
[0x4022d1] memchr("\t\t\t\t                      reg_in"..., '\n', 171) = 0x00f0bdb0
[0x4022d1] memchr("                    return false"..., '\n', 134) = 0x00f0bdd2
[0x4022d1] memchr("\n                  /* Move to ri"..., '\n', 100) = 0x00f0bdd3
[0x4022d1] memchr("                  /* Move to rig"..., '\n', 99) = 0x00f0be1c
[0x4022d1] memchr("\t\t     jump_past_alt.  */\n      "..., '\n', 26) = 0x00f0be36
[0x4022d1] memchr("                  p1 += mcnt;\t\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6061:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  p1 += mcnt;\t\n\n"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n                  /* Break if i"..., '1', 8597) = 0x00f0bf0a
[0x40cdf3] memchr("1 != on_failure_jump)\n          "..., '\n', 8417) = 0x00f0bf1f
[0x4022d1] memchr("\n                  /* Break if i"..., '\n', 142) = 0x00f0be56
[0x4022d1] memchr("                  /* Break if it"..., '\n', 141) = 0x00f0be9e
[0x4022d1] memchr("                     that doesn'"..., '\n', 69) = 0x00f0bee3
[0x4022d1] memchr("                  if ((re_opcode"..., '\n', 0) = NULL
[0x4023cc] fwrite("6065:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  if ((re_opcode"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    break;\n\t\t\n\t\t"..., '1', 8395) = 0x00f0bfb0
[0x40cdf3] memchr("1++;\n                  EXTRACT_N"..., '\n', 8251) = 0x00f0bfb4
[0x4022d1] memchr("                    break;\n\t\t\n\t\t"..., '\n', 139) = 0x00f0bf3a
[0x4022d1] memchr("\t\t\n\t\t  /* Still have to check th"..., '\n', 112) = 0x00f0bf3d
[0x4022d1] memchr("\t\t  /* Still have to check that "..., '\n', 109) = 0x00f0bf6e
[0x4022d1] memchr("\t\t     alternative that starts w"..., '\n', 60) = 0x00f0bfaa
[0x4022d1] memchr("\t\t  p1++;\n                  EXTR"..., '\n', 0) = NULL
[0x4023cc] fwrite("6070:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  p1++;\n                  EXTR"..., 1, 10, 0x7fce6d444260) = 10
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  EXTRACT_NUMBER"..., '1', 8246) = 0x00f0bfe7
[0x40cdf3] memchr("1);\n                  if ((re_op"..., '\n', 8196) = 0x00f0bfea
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("6071:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                  if ((re_opcode"..., '1', 8192) = 0x00f0c010
[0x40cdf3] memchr("1[mcnt-3] != jump_past_alt)\n    "..., '\n', 8155) = 0x00f0c02b
[0x4022d1] memchr("                  if ((re_opcode"..., '\n', 0) = NULL
[0x4023cc] fwrite("6072:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                  if ((re_opcode"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                    {\n\t\t      /*"..., '1', 8127) = 0x00f0c096
[0x40cdf3] memchr("1 -= 3;\n                      br"..., '\n', 8021) = 0x00f0c09d
[0x4022d1] memchr("                    {\n\t\t      /*"..., '\n', 83) = 0x00f0c041
[0x4022d1] memchr("\t\t      /* Get to the beginning "..., '\n', 61) = 0x00f0c07e
[0x4022d1] memchr("                      p1 -= 3;\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("6075:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("                      p1 -= 3;\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                      break;\n   "..., '1', 8013) = 0x00f0c1ce
[0x40cdf3] memchr("1 - 2);\n\n              if (!alt_"..., '\n', 7709) = 0x00f0c1d5
[0x4022d1] memchr("                      break;\n   "..., '\n', 267) = 0x00f0c0ba
[0x4022d1] memchr("                    }\n          "..., '\n', 238) = 0x00f0c0d0
[0x4022d1] memchr("                }\n\n             "..., '\n', 216) = 0x00f0c0e2
[0x4022d1] memchr("\n              /* Deal with the "..., '\n', 198) = 0x00f0c0e3
[0x4022d1] memchr("              /* Deal with the l"..., '\n', 197) = 0x00f0c12b
[0x4022d1] memchr("                 of the `jump_pa"..., '\n', 125) = 0x00f0c174
[0x4022d1] memchr("                 the length of t"..., '\n', 52) = 0x00f0c1a8
[0x4022d1] memchr("              EXTRACT_NUMBER (mc"..., '\n', 0) = NULL
[0x4023cc] fwrite("6083:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              EXTRACT_NUMBER (mc"..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n              if (!alt_match_nu"..., '1', 7701) = 0x00f0c204
[0x40cdf3] memchr("1, p1 + mcnt, reg_info))\n       "..., '\n', 7655) = 0x00f0c21c
[0x4022d1] memchr("\n              if (!alt_match_nu"..., '\n', 1) = 0x00f0c1d6
[0x4022d1] memchr("              if (!alt_match_nul"..., '\n', 0) = NULL
[0x4023cc] fwrite("6085:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              if (!alt_match_nul"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("                return false;\n\n "..., '1', 7630) = 0x00f0c24b
[0x40cdf3] memchr("1 += mcnt;\t/* Get past the n-th "..., '\n', 7584) = 0x00f0c27b
[0x4022d1] memchr("                return false;\n\n "..., '\n', 31) = 0x00f0c23a
[0x4022d1] memchr("\n              p1 += mcnt;\t/* Ge"..., '\n', 1) = 0x00f0c23b
[0x4022d1] memchr("              p1 += mcnt;\t/* Get"..., '\n', 0) = NULL
[0x4023cc] fwrite("6088:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("              p1 += mcnt;\t/* Get"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            } /* if mcnt > 0 */\n"..., '1', 7535) = 0x00f0c2df
[0x40cdf3] memchr("1[1] == **p);\n          *p = p1 "..., '\n', 7436) = 0x00f0c2ec
[0x4022d1] memchr("            } /* if mcnt > 0 */\n"..., '\n', 87) = 0x00f0c29b
[0x4022d1] memchr("          break;\n\n          \n   "..., '\n', 55) = 0x00f0c2ac
[0x4022d1] memchr("\n          \n        case stop_me"..., '\n', 38) = 0x00f0c2ad
[0x4022d1] memchr("          \n        case stop_mem"..., '\n', 37) = 0x00f0c2b8
[0x4022d1] memchr("        case stop_memory:\n\t  ass"..., '\n', 26) = 0x00f0c2d2
[0x4022d1] memchr("\t  assert (p1[1] == **p);\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("6094:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  assert (p1[1] == **p);\n      "..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          *p = p1 + 2;\n         "..., '1', 7422) = 0x00f0c2fd
[0x40cdf3] memchr("1 + 2;\n          return true;\n\n "..., '\n', 7406) = 0x00f0c303
[0x4022d1] memchr("          *p = p1 + 2;\n         "..., '\n', 0) = NULL
[0x4023cc] fwrite("6095:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          *p = p1 + 2;\n         "..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          return true;\n\n        "..., '1', 7399) = 0x00f0c367
[0x40cdf3] memchr("1, end, reg_info))\n            r"..., '\n', 7300) = 0x00f0c379
[0x4022d1] memchr("          return true;\n\n        "..., '\n', 51) = 0x00f0c31a
[0x4022d1] memchr("\n        \n        default: \n    "..., '\n', 28) = 0x00f0c31b
[0x4022d1] memchr("        \n        default: \n     "..., '\n', 27) = 0x00f0c324
[0x4022d1] memchr("        default: \n          if ("..., '\n', 18) = 0x00f0c336
[0x4022d1] memchr("          if (!common_op_match_n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6100:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          if (!common_op_match_n"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            return false;\n      "..., '1', 7281) = 0x00f0c3ae
[0x40cdf3] memchr("1 < end */\n\n  return false;\n} /*"..., '\n', 7229) = 0x00f0c3b8
[0x4022d1] memchr("            return false;\n      "..., '\n', 36) = 0x00f0c393
[0x4022d1] memchr("        }\n    } /* while p1 < en"..., '\n', 10) = 0x00f0c39d
[0x4022d1] memchr("    } /* while p1 < end */\n\n  re"..., '\n', 0) = NULL
[0x4023cc] fwrite("6103:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    } /* while p1 < end */\n\n  re"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  return false;\n} /* group_matc"..., '1', 7218) = 0x00f0c55f
[0x40cdf3] memchr("1 = p;\n  \n  while (p1 < end)\n   "..., '\n', 6796) = 0x00f0c565
[0x4022d1] memchr("\n  return false;\n} /* group_matc"..., '\n', 404) = 0x00f0c3b9
[0x4022d1] memchr("  return false;\n} /* group_match"..., '\n', 403) = 0x00f0c3c9
[0x4022d1] memchr("} /* group_match_null_string_p *"..., '\n', 387) = 0x00f0c3eb
[0x4022d1] memchr("\n\n/* Similar to group_match_null"..., '\n', 353) = 0x00f0c3ec
[0x4022d1] memchr("\n/* Similar to group_match_null_"..., '\n', 352) = 0x00f0c3ed
[0x4022d1] memchr("/* Similar to group_match_null_s"..., '\n', 351) = 0x00f0c43a
[0x4022d1] memchr("   It expects P to be the first "..., '\n', 274) = 0x00f0c483
[0x4022d1] memchr("   byte past the last. The alter"..., '\n', 201) = 0x00f0c4c2
[0x4022d1] memchr("   \nstatic boolean\nalt_match_nul"..., '\n', 138) = 0x00f0c4c6
[0x4022d1] memchr("static boolean\nalt_match_null_st"..., '\n', 134) = 0x00f0c4d5
[0x4022d1] memchr("alt_match_null_string_p (p, end,"..., '\n', 119) = 0x00f0c500
[0x4022d1] memchr("    unsigned char *p, *end;\n    "..., '\n', 76) = 0x00f0c51c
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 48) = 0x00f0c53e
[0x4022d1] memchr("{\n  int mcnt;\n  unsigned char *p"..., '\n', 14) = 0x00f0c540
[0x4022d1] memchr("  int mcnt;\n  unsigned char *p1 "..., '\n', 12) = 0x00f0c54c
[0x4022d1] memchr("  unsigned char *p1 = p;\n  \n  wh"..., '\n', 0) = NULL
[0x4023cc] fwrite("6119:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  unsigned char *p1 = p;\n  \n  wh"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  while (p1 < end)\n    {\n    "..., '1', 6789) = 0x00f0c573
[0x40cdf3] memchr("1 < end)\n    {\n      /* Skip ove"..., '\n', 6776) = 0x00f0c57b
[0x4022d1] memchr("  \n  while (p1 < end)\n    {\n    "..., '\n', 3) = 0x00f0c568
[0x4022d1] memchr("  while (p1 < end)\n    {\n      /"..., '\n', 0) = NULL
[0x4023cc] fwrite("6121:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (p1 < end)\n    {\n      /"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      /* Skip over opcodes"..., '1', 6767) = 0x00f0c611
[0x40cdf3] memchr("1)\n        {\n\t/* It's a loop.  *"..., '\n', 6618) = 0x00f0c613
[0x4022d1] memchr("    {\n      /* Skip over opcodes"..., '\n', 119) = 0x00f0c581
[0x4022d1] memchr("      /* Skip over opcodes that "..., '\n', 113) = 0x00f0c5cb
[0x4022d1] memchr("         to one that can't.  */\n"..., '\n', 39) = 0x00f0c5eb
[0x4022d1] memchr("      \n      switch ((re_opcode_"..., '\n', 7) = 0x00f0c5f2
[0x4022d1] memchr("      switch ((re_opcode_t) *p1)"..., '\n', 0) = NULL
[0x4023cc] fwrite("6126:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      switch ((re_opcode_t) *p1)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        {\n\t/* It's a loop.  */\n "..., '1', 6615) = 0x00f0c65c
[0x40cdf3] memchr("1++;\n          EXTRACT_NUMBER_AN"..., '\n', 6543) = 0x00f0c660
[0x4022d1] memchr("        {\n\t/* It's a loop.  */\n "..., '\n', 61) = 0x00f0c61d
[0x4022d1] memchr("\t/* It's a loop.  */\n        cas"..., '\n', 51) = 0x00f0c632
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 30) = 0x00f0c650
[0x4022d1] memchr("          p1++;\n          EXTRAC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6130:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1++;\n          EXTRAC"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          EXTRACT_NUMBER_AND_INC"..., '1', 6538) = 0x00f0c68b
[0x40cdf3] memchr("1);\n          p1 += mcnt;\n      "..., '\n', 6496) = 0x00f0c68e
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6131:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          p1 += mcnt;\n          "..., '1', 6492) = 0x00f0c69a
[0x40cdf3] memchr("1 += mcnt;\n          break;\n    "..., '\n', 6481) = 0x00f0c6a4
[0x4022d1] memchr("          p1 += mcnt;\n          "..., '\n', 0) = NULL
[0x4023cc] fwrite("6132:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1 += mcnt;\n          "..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          break;\n          \n\tdef"..., '1', 6470) = 0x00f0c6fc
[0x40cdf3] memchr("1, end, reg_info))\n            r"..., '\n', 6383) = 0x00f0c70e
[0x4022d1] memchr("          break;\n          \n\tdef"..., '\n', 39) = 0x00f0c6b5
[0x4022d1] memchr("          \n\tdefault: \n          "..., '\n', 22) = 0x00f0c6c0
[0x4022d1] memchr("\tdefault: \n          if (!common"..., '\n', 11) = 0x00f0c6cb
[0x4022d1] memchr("          if (!common_op_match_n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6136:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          if (!common_op_match_n"..., 1, 67, 0x7fce6d444260) = 67
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("            return false;\n      "..., '1', 6364) = 0x00f0c744
[0x40cdf3] memchr("1 < end */\n\n  return true;\n} /* "..., '\n', 6311) = 0x00f0c74e
[0x4022d1] memchr("            return false;\n      "..., '\n', 36) = 0x00f0c728
[0x4022d1] memchr("        }\n    }  /* while p1 < e"..., '\n', 10) = 0x00f0c732
[0x4022d1] memchr("    }  /* while p1 < end */\n\n  r"..., '\n', 0) = NULL
[0x4023cc] fwrite("6139:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    }  /* while p1 < end */\n\n  r"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  return true;\n} /* alt_match_n"..., '1', 6300) = 0x00f0c8db
[0x40cdf3] memchr("1 = *p;\n\n  switch ((re_opcode_t)"..., '\n', 5904) = 0x00f0c8e2
[0x4022d1] memchr("\n  return true;\n} /* alt_match_n"..., '\n', 378) = 0x00f0c74f
[0x4022d1] memchr("  return true;\n} /* alt_match_nu"..., '\n', 377) = 0x00f0c75e
[0x4022d1] memchr("} /* alt_match_null_string_p */\n"..., '\n', 362) = 0x00f0c77e
[0x4022d1] memchr("\n\n/* Deals with the ops common t"..., '\n', 330) = 0x00f0c77f
[0x4022d1] memchr("\n/* Deals with the ops common to"..., '\n', 329) = 0x00f0c780
[0x4022d1] memchr("/* Deals with the ops common to "..., '\n', 328) = 0x00f0c7be
[0x4022d1] memchr("   alt_match_null_string_p.  \n  "..., '\n', 266) = 0x00f0c7dc
[0x4022d1] memchr("   \n   Sets P to one after the o"..., '\n', 236) = 0x00f0c7e0
[0x4022d1] memchr("   Sets P to one after the op an"..., '\n', 232) = 0x00f0c81d
[0x4022d1] memchr("\nstatic boolean\ncommon_op_match_"..., '\n', 171) = 0x00f0c81e
[0x4022d1] memchr("static boolean\ncommon_op_match_n"..., '\n', 170) = 0x00f0c82d
[0x4022d1] memchr("common_op_match_null_string_p (p"..., '\n', 155) = 0x00f0c85e
[0x4022d1] memchr("    unsigned char **p, *end;\n   "..., '\n', 106) = 0x00f0c87b
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 77) = 0x00f0c89d
[0x4022d1] memchr("{\n  int mcnt;\n  boolean ret;\n  i"..., '\n', 43) = 0x00f0c89f
[0x4022d1] memchr("  int mcnt;\n  boolean ret;\n  int"..., '\n', 41) = 0x00f0c8ab
[0x4022d1] memchr("  boolean ret;\n  int reg_no;\n  u"..., '\n', 29) = 0x00f0c8ba
[0x4022d1] memchr("  int reg_no;\n  unsigned char *p"..., '\n', 14) = 0x00f0c8c8
[0x4022d1] memchr("  unsigned char *p1 = *p;\n\n  swi"..., '\n', 0) = NULL
[0x4023cc] fwrite("6158:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  unsigned char *p1 = *p;\n\n  swi"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  switch ((re_opcode_t) *p1++)\n"..., '1', 5896) = 0x00f0c8fe
[0x40cdf3] memchr("1++)\n    {\n    case no_op:\n    c"..., '\n', 5869) = 0x00f0c902
[0x4022d1] memchr("\n  switch ((re_opcode_t) *p1++)\n"..., '\n', 1) = 0x00f0c8e3
[0x4022d1] memchr("  switch ((re_opcode_t) *p1++)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("6160:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  switch ((re_opcode_t) *p1++)\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n    case no_op:\n    case b"..., '1', 5864) = 0x00f0ca32
[0x40cdf3] memchr("1;\n      assert (reg_no > 0 && r"..., '\n', 5561) = 0x00f0ca34
[0x4022d1] memchr("    {\n    case no_op:\n    case b"..., '\n', 286) = 0x00f0c908
[0x4022d1] memchr("    case no_op:\n    case begline"..., '\n', 280) = 0x00f0c918
[0x4022d1] memchr("    case begline:\n    case endli"..., '\n', 264) = 0x00f0c92a
[0x4022d1] memchr("    case endline:\n    case begbu"..., '\n', 246) = 0x00f0c93c
[0x4022d1] memchr("    case begbuf:\n    case endbuf"..., '\n', 228) = 0x00f0c94d
[0x4022d1] memchr("    case endbuf:\n    case wordbe"..., '\n', 211) = 0x00f0c95e
[0x4022d1] memchr("    case wordbeg:\n    case worde"..., '\n', 194) = 0x00f0c970
[0x4022d1] memchr("    case wordend:\n    case wordb"..., '\n', 176) = 0x00f0c982
[0x4022d1] memchr("    case wordbound:\n    case not"..., '\n', 158) = 0x00f0c996
[0x4022d1] memchr("    case notwordbound:\n#ifdef em"..., '\n', 138) = 0x00f0c9ad
[0x4022d1] memchr("#ifdef emacs\n    case before_dot"..., '\n', 115) = 0x00f0c9ba
[0x4022d1] memchr("    case before_dot:\n    case at"..., '\n', 102) = 0x00f0c9cf
[0x4022d1] memchr("    case at_dot:\n    case after_"..., '\n', 81) = 0x00f0c9e0
[0x4022d1] memchr("    case after_dot:\n#endif\n     "..., '\n', 64) = 0x00f0c9f4
[0x4022d1] memchr("#endif\n      break;\n\n    case st"..., '\n', 44) = 0x00f0c9fb
[0x4022d1] memchr("      break;\n\n    case start_mem"..., '\n', 37) = 0x00f0ca08
[0x4022d1] memchr("\n    case start_memory:\n      re"..., '\n', 24) = 0x00f0ca09
[0x4022d1] memchr("    case start_memory:\n      reg"..., '\n', 23) = 0x00f0ca20
[0x4022d1] memchr("      reg_no = *p1;\n      assert"..., '\n', 0) = NULL
[0x4023cc] fwrite("6179:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      reg_no = *p1;\n      assert"..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      assert (reg_no > 0 && reg_"..., '1', 5558) = 0x00f0ca91
[0x40cdf3] memchr("1, end, reg_info);\n      \n      "..., '\n', 5466) = 0x00f0caa3
[0x4022d1] memchr("      assert (reg_no > 0 && reg_"..., '\n', 51) = 0x00f0ca67
[0x4022d1] memchr("      ret = group_match_null_str"..., '\n', 0) = NULL
[0x4023cc] fwrite("6181:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      ret = group_match_null_str"..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      \n      /* Have to set this"..., '1', 5447) = 0x00f0cc74
[0x40cdf3] memchr("1);\n      if (mcnt >= 0)\n       "..., '\n', 4983) = 0x00f0cc77
[0x4022d1] memchr("      \n      /* Have to set this"..., '\n', 426) = 0x00f0caaa
[0x4022d1] memchr("      /* Have to set this here i"..., '\n', 419) = 0x00f0caee
[0x4022d1] memchr("         contains a group and a "..., '\n', 351) = 0x00f0cb28
[0x4022d1] memchr("\n      if (REG_MATCH_NULL_STRING"..., '\n', 293) = 0x00f0cb29
[0x4022d1] memchr("      if (REG_MATCH_NULL_STRING_"..., '\n', 292) = 0x00f0cb79
[0x4022d1] memchr("        REG_MATCH_NULL_STRING_P "..., '\n', 212) = 0x00f0cbb3
[0x4022d1] memchr("\n      if (!ret)\n        return "..., '\n', 154) = 0x00f0cbb4
[0x4022d1] memchr("      if (!ret)\n        return f"..., '\n', 153) = 0x00f0cbc4
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 137) = 0x00f0cbda
[0x4022d1] memchr("      break;\n          \n    /* I"..., '\n', 115) = 0x00f0cbe7
[0x4022d1] memchr("          \n    /* If this is an "..., '\n', 102) = 0x00f0cbf2
[0x4022d1] memchr("    /* If this is an optimized s"..., '\n', 91) = 0x00f0cc3e
[0x4022d1] memchr("    case jump:\n      EXTRACT_NUM"..., '\n', 15) = 0x00f0cc4d
[0x4022d1] memchr("      EXTRACT_NUMBER_AND_INCR (m"..., '\n', 0) = NULL
[0x4023cc] fwrite("6195:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      EXTRACT_NUMBER_AND_INCR (m"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (mcnt >= 0)\n        p1 "..., '1', 4979) = 0x00f0cc96
[0x40cdf3] memchr("1 += mcnt;\n      else\n        re"..., '\n', 4949) = 0x00f0cca0
[0x4022d1] memchr("      if (mcnt >= 0)\n        p1 "..., '\n', 21) = 0x00f0cc8c
[0x4022d1] memchr("        p1 += mcnt;\n      else\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("6197:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("        p1 += mcnt;\n      else\n "..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n        return false;"..., '1', 4938) = 0x00f0cd1f
[0x40cdf3] memchr("1 += 2;\t\t\n      EXTRACT_NUMBER_A"..., '\n', 4812) = 0x00f0cd28
[0x4022d1] memchr("      else\n        return false;"..., '\n', 119) = 0x00f0ccab
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 108) = 0x00f0ccc1
[0x4022d1] memchr("      break;\n\n    case succeed_n"..., '\n', 86) = 0x00f0ccce
[0x4022d1] memchr("\n    case succeed_n:\n      /* Ge"..., '\n', 73) = 0x00f0cccf
[0x4022d1] memchr("    case succeed_n:\n      /* Get"..., '\n', 72) = 0x00f0cce3
[0x4022d1] memchr("      /* Get to the number of ti"..., '\n', 52) = 0x00f0cd17
[0x4022d1] memchr("      p1 += 2;\t\t\n      EXTRACT_N"..., '\n', 0) = NULL
[0x4023cc] fwrite("6204:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      p1 += 2;\t\t\n      EXTRACT_N"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      EXTRACT_NUMBER_AND_INCR (m"..., '1', 4802) = 0x00f0cd4f
[0x40cdf3] memchr("1);\n\n      if (mcnt == 0)\n      "..., '\n', 4764) = 0x00f0cd52
[0x4022d1] memchr("      EXTRACT_NUMBER_AND_INCR (m"..., '\n', 0) = NULL
[0x4023cc] fwrite("6205:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      EXTRACT_NUMBER_AND_INCR (m"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      if (mcnt == 0)\n        {\n"..., '1', 4760) = 0x00f0cd7e
[0x40cdf3] memchr("1 -= 4;\n          EXTRACT_NUMBER"..., '\n', 4717) = 0x00f0cd85
[0x4022d1] memchr("\n      if (mcnt == 0)\n        {\n"..., '\n', 32) = 0x00f0cd53
[0x4022d1] memchr("      if (mcnt == 0)\n        {\n "..., '\n', 31) = 0x00f0cd68
[0x4022d1] memchr("        {\n          p1 -= 4;\n   "..., '\n', 10) = 0x00f0cd72
[0x4022d1] memchr("          p1 -= 4;\n          EXT"..., '\n', 0) = NULL
[0x4023cc] fwrite("6209:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1 -= 4;\n          EXT"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          EXTRACT_NUMBER_AND_INC"..., '1', 4709) = 0x00f0cdb0
[0x40cdf3] memchr("1);\n          p1 += mcnt;\n      "..., '\n', 4667) = 0x00f0cdb3
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6210:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          p1 += mcnt;\n        }\n"..., '1', 4663) = 0x00f0cdbf
[0x40cdf3] memchr("1 += mcnt;\n        }\n      else\n"..., '\n', 4652) = 0x00f0cdc9
[0x4022d1] memchr("          p1 += mcnt;\n        }\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6211:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          p1 += mcnt;\n        }\n"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        }\n      else\n        ret"..., '1', 4641) = 0x00f0ce47
[0x40cdf3] memchr("1]))\n        return false;\n     "..., '\n', 4516) = 0x00f0ce4b
[0x4022d1] memchr("        }\n      else\n        ret"..., '\n', 78) = 0x00f0cdd3
[0x4022d1] memchr("      else\n        return false;"..., '\n', 68) = 0x00f0cdde
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 57) = 0x00f0cdf4
[0x4022d1] memchr("      break;\n\n    case duplicate"..., '\n', 35) = 0x00f0ce01
[0x4022d1] memchr("\n    case duplicate: \n      if ("..., '\n', 22) = 0x00f0ce02
[0x4022d1] memchr("    case duplicate: \n      if (!"..., '\n', 21) = 0x00f0ce17
[0x4022d1] memchr("      if (!REG_MATCH_NULL_STRING"..., '\n', 0) = NULL
[0x4023cc] fwrite("6218:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if (!REG_MATCH_NULL_STRING"..., 1, 52, 0x7fce6d444260) = 52
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        return false;\n      brea"..., '1', 4511) = 0x00f0ce8f
[0x40cdf3] memchr("1 += 4;\n\n    default:\n      /* A"..., '\n', 4444) = 0x00f0ce96
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 60) = 0x00f0ce61
[0x4022d1] memchr("      break;\n\n    case set_numbe"..., '\n', 38) = 0x00f0ce6e
[0x4022d1] memchr("\n    case set_number_at:\n      p"..., '\n', 25) = 0x00f0ce6f
[0x4022d1] memchr("    case set_number_at:\n      p1"..., '\n', 24) = 0x00f0ce87
[0x4022d1] memchr("      p1 += 4;\n\n    default:\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("6223:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      p1 += 4;\n\n    default:\n   "..., 1, 15, 0x7fce6d444260) = 15
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n    default:\n      /* All other"..., '1', 4436) = 0x00f0cf0c
[0x40cdf3] memchr("1;\n  return true;\n} /* common_op"..., '\n', 4319) = 0x00f0cf0e
[0x4022d1] memchr("\n    default:\n      /* All other"..., '\n', 109) = 0x00f0ce97
[0x4022d1] memchr("    default:\n      /* All other "..., '\n', 108) = 0x00f0cea4
[0x4022d1] memchr("      /* All other opcodes mean "..., '\n', 95) = 0x00f0ceea
[0x4022d1] memchr("      return false;\n  }\n\n  *p = "..., '\n', 25) = 0x00f0cefe
[0x4022d1] memchr("  }\n\n  *p = p1;\n  return true;\n}"..., '\n', 5) = 0x00f0cf02
[0x4022d1] memchr("\n  *p = p1;\n  return true;\n} /* "..., '\n', 1) = 0x00f0cf03
[0x4022d1] memchr("  *p = p1;\n  return true;\n} /* c"..., '\n', 0) = NULL
[0x4023cc] fwrite("6230:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  *p = p1;\n  return true;\n} /* c"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  return true;\n} /* common_op_ma"..., '1', 4316) = 0x00f0cf63
[0x40cdf3] memchr("1] and TRANSLATE[S2] are identic"..., '\n', 4232) = 0x00f0cf8d
[0x4022d1] memchr("  return true;\n} /* common_op_ma"..., '\n', 55) = 0x00f0cf1d
[0x4022d1] memchr("} /* common_op_match_null_string"..., '\n', 40) = 0x00f0cf43
[0x4022d1] memchr("\n\n/* Return zero if TRANSLATE[S1"..., '\n', 2) = 0x00f0cf44
[0x4022d1] memchr("\n/* Return zero if TRANSLATE[S1]"..., '\n', 1) = 0x00f0cf45
[0x4022d1] memchr("/* Return zero if TRANSLATE[S1] "..., '\n', 0) = NULL
[0x4023cc] fwrite("6235:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* Return zero if TRANSLATE[S1] "..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   bytes; nonzero otherwise.  */"..., '1', 4189) = 0x00f0cfcf
[0x40cdf3] memchr("1, s2, len, translate)\n     unsi"..., '\n', 4124) = 0x00f0cfe5
[0x4022d1] memchr("   bytes; nonzero otherwise.  */"..., '\n', 48) = 0x00f0cfae
[0x4022d1] memchr("   \nstatic int\nbcmp_translate (s"..., '\n', 15) = 0x00f0cfb2
[0x4022d1] memchr("static int\nbcmp_translate (s1, s"..., '\n', 11) = 0x00f0cfbd
[0x4022d1] memchr("bcmp_translate (s1, s2, len, tra"..., '\n', 0) = NULL
[0x4023cc] fwrite("6239:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("bcmp_translate (s1, s2, len, tra"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     unsigned char *s1, *s2;\n   "..., '1', 4101) = 0x00f0cffb
[0x40cdf3] memchr("1, *s2;\n     register int len;\n "..., '\n', 4080) = 0x00f0d002
[0x4022d1] memchr("     unsigned char *s1, *s2;\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("6240:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     unsigned char *s1, *s2;\n   "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     register int len;\n     char"..., '1', 4072) = 0x00f0d04d
[0x40cdf3] memchr("1 = s1, *p2 = s2;\n  while (len)\n"..., '\n', 3998) = 0x00f0d05e
[0x4022d1] memchr("     register int len;\n     char"..., '\n', 47) = 0x00f0d019
[0x4022d1] memchr("     char *translate;\n{\n  regist"..., '\n', 24) = 0x00f0d02f
[0x4022d1] memchr("{\n  register unsigned char *p1 ="..., '\n', 2) = 0x00f0d031
[0x4022d1] memchr("  register unsigned char *p1 = s"..., '\n', 0) = NULL
[0x4023cc] fwrite("6244:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  register unsigned char *p1 = s"..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  while (len)\n    {\n      if (tr"..., '1', 3980) = 0x00f0d089
[0x40cdf3] memchr("1++] != translate[*p2++]) return"..., '\n', 3938) = 0x00f0d0ac
[0x4022d1] memchr("  while (len)\n    {\n      if (tr"..., '\n', 20) = 0x00f0d06c
[0x4022d1] memchr("    {\n      if (translate[*p1++]"..., '\n', 6) = 0x00f0d072
[0x4022d1] memchr("      if (translate[*p1++] != tr"..., '\n', 0) = NULL
[0x4023cc] fwrite("6247:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if (translate[*p1++] != tr"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      len--;\n    }\n  return 0;\n}"..., '1', 3902) = 0x00f0d375
[0x40cdf3] memchr("1).  */\n  bufp->regs_allocated ="..., '\n', 3190) = 0x00f0d37c
[0x4022d1] memchr("      len--;\n    }\n  return 0;\n}"..., '\n', 674) = 0x00f0d0b9
[0x4022d1] memchr("    }\n  return 0;\n}\n\014\n/* Entry p"..., '\n', 661) = 0x00f0d0bf
[0x4022d1] memchr("  return 0;\n}\n\014\n/* Entry points "..., '\n', 655) = 0x00f0d0cb
[0x4022d1] memchr("}\n\014\n/* Entry points for GNU code"..., '\n', 643) = 0x00f0d0cd
[0x4022d1] memchr("\014\n/* Entry points for GNU code. "..., '\n', 641) = 0x00f0d0cf
[0x4022d1] memchr("/* Entry points for GNU code.  *"..., '\n', 639) = 0x00f0d0f1
[0x4022d1] memchr("\n/* re_compile_pattern is the GN"..., '\n', 605) = 0x00f0d0f2
[0x4022d1] memchr("/* re_compile_pattern is the GNU"..., '\n', 604) = 0x00f0d133
[0x4022d1] memchr("   compiles PATTERN (of length S"..., '\n', 539) = 0x00f0d175
[0x4022d1] memchr("   Returns 0 if the pattern was "..., '\n', 473) = 0x00f0d1b7
[0x4022d1] memchr("   \n   Assumes the `allocated' ("..., '\n', 407) = 0x00f0d1bb
[0x4022d1] memchr("   Assumes the `allocated' (and "..., '\n', 403) = 0x00f0d204
[0x4022d1] memchr("   are set in BUFP on entry.\n   "..., '\n', 330) = 0x00f0d221
[0x4022d1] memchr("   \n   We call regex_compile to "..., '\n', 301) = 0x00f0d225
[0x4022d1] memchr("   We call regex_compile to do t"..., '\n', 297) = 0x00f0d260
[0x4022d1] memchr("\nconst char *\nre_compile_pattern"..., '\n', 238) = 0x00f0d261
[0x4022d1] memchr("const char *\nre_compile_pattern "..., '\n', 237) = 0x00f0d26e
[0x4022d1] memchr("re_compile_pattern (pattern, len"..., '\n', 224) = 0x00f0d299
[0x4022d1] memchr("     const char *pattern;\n     i"..., '\n', 181) = 0x00f0d2b3
[0x4022d1] memchr("     int length;\n     struct re_"..., '\n', 155) = 0x00f0d2c4
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 138) = 0x00f0d2e9
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  \n  /* G"..., '\n', 101) = 0x00f0d2eb
[0x4022d1] memchr("  reg_errcode_t ret;\n  \n  /* GNU"..., '\n', 99) = 0x00f0d300
[0x4022d1] memchr("  \n  /* GNU code is written to a"..., '\n', 78) = 0x00f0d303
[0x4022d1] memchr("  /* GNU code is written to assu"..., '\n', 75) = 0x00f0d34e
[0x4022d1] memchr("     (and at least one extra wil"..., '\n', 0) = NULL
[0x4023cc] fwrite("6273:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     (and at least one extra wil"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  bufp->regs_allocated = REGS_UN"..., '1', 3182) = 0x00f0d4a4
[0x40cdf3] memchr("1;\n  \n  ret = regex_compile (pat"..., '\n', 2887) = 0x00f0d4a6
[0x4022d1] memchr("  bufp->regs_allocated = REGS_UN"..., '\n', 270) = 0x00f0d3a7
[0x4022d1] memchr("  \n  /* And GNU code determines "..., '\n', 227) = 0x00f0d3aa
[0x4022d1] memchr("  /* And GNU code determines whe"..., '\n', 224) = 0x00f0d3f2
[0x4022d1] memchr("     by passing null for the REG"..., '\n', 152) = 0x00f0d437
[0x4022d1] memchr("     setting no_sub.  */\n  bufp-"..., '\n', 83) = 0x00f0d450
[0x4022d1] memchr("  bufp->no_sub = 0;\n  \n  /* Matc"..., '\n', 58) = 0x00f0d464
[0x4022d1] memchr("  \n  /* Match anchors at newline"..., '\n', 38) = 0x00f0d467
[0x4022d1] memchr("  /* Match anchors at newline.  "..., '\n', 35) = 0x00f0d48a
[0x4022d1] memchr("  bufp->newline_anchor = 1;\n  \n "..., '\n', 0) = NULL
[0x4023cc] fwrite("6282:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  bufp->newline_anchor = 1;\n  \n "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  ret = regex_compile (patter"..., '1', 2884) = 0x00f0d7cd
[0x40cdf3] memchr("1 << BYTEWIDTH);\n      if (re_co"..., '\n', 2078) = 0x00f0d7dd
[0x4022d1] memchr("  \n  ret = regex_compile (patter"..., '\n', 761) = 0x00f0d4a9
[0x4022d1] memchr("  ret = regex_compile (pattern, "..., '\n', 758) = 0x00f0d4eb
[0x4022d1] memchr("\n  return re_error_msg[(int) ret"..., '\n', 692) = 0x00f0d4ec
[0x4022d1] memchr("  return re_error_msg[(int) ret]"..., '\n', 691) = 0x00f0d50e
[0x4022d1] memchr("}     \n\014\n/* Entry points compati"..., '\n', 657) = 0x00f0d515
[0x4022d1] memchr("\014\n/* Entry points compatible wit"..., '\n', 650) = 0x00f0d517
[0x4022d1] memchr("/* Entry points compatible with "..., '\n', 648) = 0x00f0d55f
[0x4022d1] memchr("   them if this is an Emacs or P"..., '\n', 576) = 0x00f0d595
[0x4022d1] memchr("\n#if !defined (emacs) && !define"..., '\n', 522) = 0x00f0d596
[0x4022d1] memchr("#if !defined (emacs) && !defined"..., '\n', 521) = 0x00f0d5c7
[0x4022d1] memchr("\n/* BSD has one and only one pat"..., '\n', 472) = 0x00f0d5c8
[0x4022d1] memchr("/* BSD has one and only one patt"..., '\n', 471) = 0x00f0d5f8
[0x4022d1] memchr("static struct re_pattern_buffer "..., '\n', 423) = 0x00f0d625
[0x4022d1] memchr("\nchar *\nre_comp (s)\n    const ch"..., '\n', 378) = 0x00f0d626
[0x4022d1] memchr("char *\nre_comp (s)\n    const cha"..., '\n', 377) = 0x00f0d62d
[0x4022d1] memchr("re_comp (s)\n    const char *s;\n{"..., '\n', 370) = 0x00f0d639
[0x4022d1] memchr("    const char *s;\n{\n  reg_errco"..., '\n', 358) = 0x00f0d64c
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  \n  if ("..., '\n', 339) = 0x00f0d64e
[0x4022d1] memchr("  reg_errcode_t ret;\n  \n  if (!s"..., '\n', 337) = 0x00f0d663
[0x4022d1] memchr("  \n  if (!s)\n    {\n      if (!re"..., '\n', 316) = 0x00f0d666
[0x4022d1] memchr("  if (!s)\n    {\n      if (!re_co"..., '\n', 313) = 0x00f0d670
[0x4022d1] memchr("    {\n      if (!re_comp_buf.buf"..., '\n', 303) = 0x00f0d676
[0x4022d1] memchr("      if (!re_comp_buf.buffer)\n\t"..., '\n', 297) = 0x00f0d695
[0x4022d1] memchr("\treturn "No previous regular exp"..., '\n', 266) = 0x00f0d6bf
[0x4022d1] memchr("      return 0;\n    }\n\n  if (!re"..., '\n', 224) = 0x00f0d6cf
[0x4022d1] memchr("    }\n\n  if (!re_comp_buf.buffer"..., '\n', 208) = 0x00f0d6d5
[0x4022d1] memchr("\n  if (!re_comp_buf.buffer)\n    "..., '\n', 202) = 0x00f0d6d6
[0x4022d1] memchr("  if (!re_comp_buf.buffer)\n    {"..., '\n', 201) = 0x00f0d6f1
[0x4022d1] memchr("    {\n      re_comp_buf.buffer ="..., '\n', 174) = 0x00f0d6f7
[0x4022d1] memchr("      re_comp_buf.buffer = (unsi"..., '\n', 168) = 0x00f0d732
[0x4022d1] memchr("      if (re_comp_buf.buffer == "..., '\n', 109) = 0x00f0d758
[0x4022d1] memchr("        return "Memory exhausted"..., '\n', 71) = 0x00f0d77b
[0x4022d1] memchr("      re_comp_buf.allocated = 20"..., '\n', 36) = 0x00f0d79e
[0x4022d1] memchr("\n      re_comp_buf.fastmap = (ch"..., '\n', 1) = 0x00f0d79f
[0x4022d1] memchr("      re_comp_buf.fastmap = (cha"..., '\n', 0) = NULL
[0x4023cc] fwrite("6317:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      re_comp_buf.fastmap = (cha"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (re_comp_buf.fastmap =="..., '1', 2061) = 0x00f0d8fd
[0x40cdf3] memchr("1;\n\n  ret = regex_compile (s, st"..., '\n', 1774) = 0x00f0d8ff
[0x4022d1] memchr("      if (re_comp_buf.fastmap =="..., '\n', 256) = 0x00f0d804
[0x4022d1] memchr("\treturn "Memory exhausted";\n    "..., '\n', 217) = 0x00f0d820
[0x4022d1] memchr("    }\n\n  /* Since `re_exec' alwa"..., '\n', 189) = 0x00f0d826
[0x4022d1] memchr("\n  /* Since `re_exec' always pas"..., '\n', 183) = 0x00f0d827
[0x4022d1] memchr("  /* Since `re_exec' always pass"..., '\n', 182) = 0x00f0d86b
[0x4022d1] memchr("     don't need to initialize th"..., '\n', 114) = 0x00f0d8b8
[0x4022d1] memchr("\n  /* Match anchors at newlines."..., '\n', 37) = 0x00f0d8b9
[0x4022d1] memchr("  /* Match anchors at newlines. "..., '\n', 36) = 0x00f0d8dd
[0x4022d1] memchr("  re_comp_buf.newline_anchor = 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("6326:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  re_comp_buf.newline_anchor = 1"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  ret = regex_compile (s, strle"..., '1', 1771) = NULL
[0x4022d1] memchr("\n  ret = regex_compile (s, strle"..., '\n', 1771) = 0x00f0d900
[0x4022d1] memchr("  ret = regex_compile (s, strlen"..., '\n', 1770) = 0x00f0d948
[0x4022d1] memchr("  \n  /* Yes, we're discarding `c"..., '\n', 1698) = 0x00f0d94b
[0x4022d1] memchr("  /* Yes, we're discarding `cons"..., '\n', 1695) = 0x00f0d978
[0x4022d1] memchr("  return (char *) re_error_msg[("..., '\n', 1650) = 0x00f0d9a3
[0x4022d1] memchr("}\n\n\nint\nre_exec (s)\n    const ch"..., '\n', 1607) = 0x00f0d9a5
[0x4022d1] memchr("\n\nint\nre_exec (s)\n    const char"..., '\n', 1605) = 0x00f0d9a6
[0x4022d1] memchr("\nint\nre_exec (s)\n    const char "..., '\n', 1604) = 0x00f0d9a7
[0x4022d1] memchr("int\nre_exec (s)\n    const char *"..., '\n', 1603) = 0x00f0d9ab
[0x4022d1] memchr("re_exec (s)\n    const char *s;\n{"..., '\n', 1599) = 0x00f0d9b7
[0x4022d1] memchr("    const char *s;\n{\n  const int"..., '\n', 1587) = 0x00f0d9ca
[0x4022d1] memchr("{\n  const int len = strlen (s);\n"..., '\n', 1568) = 0x00f0d9cc
[0x4022d1] memchr("  const int len = strlen (s);\n  "..., '\n', 1566) = 0x00f0d9ea
[0x4022d1] memchr("  return\n    0 <= re_search (&re"..., '\n', 1536) = 0x00f0d9f3
[0x4022d1] memchr("    0 <= re_search (&re_comp_buf"..., '\n', 1527) = 0x00f0da41
[0x4022d1] memchr("}\n#endif /* not emacs and not _P"..., '\n', 1449) = 0x00f0da43
[0x4022d1] memchr("#endif /* not emacs and not _POS"..., '\n', 1447) = 0x00f0da70
[0x4022d1] memchr("\014\n/* POSIX.2 functions.  Don't d"..., '\n', 1402) = 0x00f0da72
[0x4022d1] memchr("/* POSIX.2 functions.  Don't def"..., '\n', 1400) = 0x00f0daab
[0x4022d1] memchr("\n#ifndef emacs\n\n/* regcomp takes"..., '\n', 1343) = 0x00f0daac
[0x4022d1] memchr("#ifndef emacs\n\n/* regcomp takes "..., '\n', 1342) = 0x00f0daba
[0x4022d1] memchr("\n/* regcomp takes a regular expr"..., '\n', 1328) = 0x00f0dabb
[0x4022d1] memchr("/* regcomp takes a regular expre"..., '\n', 1327) = 0x00f0dafe
[0x4022d1] memchr("\n   PREG is a regex_t *.  We do "..., '\n', 1260) = 0x00f0daff
[0x4022d1] memchr("   PREG is a regex_t *.  We do n"..., '\n', 1259) = 0x00f0db47
[0x4022d1] memchr("   since POSIX says we shouldn't"..., '\n', 1187) = 0x00f0db77
[0x4022d1] memchr("\n     `buffer' to the compiled p"..., '\n', 1139) = 0x00f0db78
[0x4022d1] memchr("     `buffer' to the compiled pa"..., '\n', 1138) = 0x00f0db9f
[0x4022d1] memchr("     `used' to the length of the"..., '\n', 1099) = 0x00f0dbd2
[0x4022d1] memchr("     `syntax' to RE_SYNTAX_POSIX"..., '\n', 1048) = 0x00f0dc03
[0x4022d1] memchr("       REG_EXTENDED bit in CFLAG"..., '\n', 999) = 0x00f0dc3b
[0x4022d1] memchr("       RE_SYNTAX_POSIX_BASIC;\n  "..., '\n', 943) = 0x00f0dc59
[0x4022d1] memchr("     `newline_anchor' to REG_NEW"..., '\n', 913) = 0x00f0dc93
[0x4022d1] memchr("     `fastmap' and `fastmap_accu"..., '\n', 855) = 0x00f0dcc2
[0x4022d1] memchr("     `re_nsub' to the number of "..., '\n', 808) = 0x00f0dcfd
[0x4022d1] memchr("\n   PATTERN is the address of th"..., '\n', 749) = 0x00f0dcfe
[0x4022d1] memchr("   PATTERN is the address of the"..., '\n', 748) = 0x00f0dd2f
[0x4022d1] memchr("\n   CFLAGS is a series of bits w"..., '\n', 699) = 0x00f0dd30
[0x4022d1] memchr("   CFLAGS is a series of bits wh"..., '\n', 698) = 0x00f0dd68
[0x4022d1] memchr("\n     If REG_EXTENDED is set, we"..., '\n', 642) = 0x00f0dd69
[0x4022d1] memchr("     If REG_EXTENDED is set, we "..., '\n', 641) = 0x00f0ddb2
[0x4022d1] memchr("     use POSIX basic syntax.\n\n  "..., '\n', 568) = 0x00f0ddcf
[0x4022d1] memchr("\n     If REG_NEWLINE is set, the"..., '\n', 539) = 0x00f0ddd0
[0x4022d1] memchr("     If REG_NEWLINE is set, then"..., '\n', 538) = 0x00f0de13
[0x4022d1] memchr("     Also, regexec will try a ma"..., '\n', 471) = 0x00f0de56
[0x4022d1] memchr("\n     If REG_ICASE is set, then "..., '\n', 404) = 0x00f0de57
[0x4022d1] memchr("     If REG_ICASE is set, then w"..., '\n', 403) = 0x00f0de98
[0x4022d1] memchr("     versions of letters to be e"..., '\n', 338) = 0x00f0ded1
[0x4022d1] memchr("\n     If REG_NOSUB is set, then "..., '\n', 281) = 0x00f0ded2
[0x4022d1] memchr("     If REG_NOSUB is set, then w"..., '\n', 280) = 0x00f0df16
[0x4022d1] memchr("     routine will report only su"..., '\n', 212) = 0x00f0df5e
[0x4022d1] memchr("     registers.\n\n   It returns 0"..., '\n', 140) = 0x00f0df6e
[0x4022d1] memchr("\n   It returns 0 if it succeeds,"..., '\n', 124) = 0x00f0df6f
[0x4022d1] memchr("   It returns 0 if it succeeds, "..., '\n', 123) = 0x00f0dfb8
[0x4022d1] memchr("   the return codes and their me"..., '\n', 50) = 0x00f0dfe5
[0x4022d1] memchr("\nint\nregcomp (preg, patter", '\n', 5) = 0x00f0dfe6
[0x4022d1] memchr("int\nregcomp (preg, patter", '\n', 4) = 0x00f0dfea
[0x4022d1] memchr("regcomp (preg, patter", '\n', 0) = NULL
[0x4020b3] memmove(0xf05feb, 0xf0dfeb, 21, 0xf0dfeb, 0x7fce6d444260) = 0xf05feb
[0x402213] read(3, "n, cflags)\n    regex_t *preg;\n  "..., 32768) = 32768
[0x40bc2b] memchr("regcomp (preg, pattern, cflags)\n"..., '1', 32728) = 0x00f06528
[0x40cdf3] memchr("1;\n    }\n  else\n    preg->newlin"..., '\n', 31387) = 0x00f0652a
[0x4022d1] memchr("regcomp (preg, pattern, cflags)\n"..., '\n', 1312) = 0x00f0600a
[0x4022d1] memchr("    regex_t *preg;\n    const cha"..., '\n', 1280) = 0x00f0601d
[0x4022d1] memchr("    const char *pattern; \n    in"..., '\n', 1261) = 0x00f06037
[0x4022d1] memchr("    int cflags;\n{\n  reg_errcode_"..., '\n', 1235) = 0x00f06047
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  unsigne"..., '\n', 1219) = 0x00f06049
[0x4022d1] memchr("  reg_errcode_t ret;\n  unsigned "..., '\n', 1217) = 0x00f0605e
[0x4022d1] memchr("  unsigned syntax\n    = (cflags "..., '\n', 1196) = 0x00f06070
[0x4022d1] memchr("    = (cflags & REG_EXTENDED) ?\n"..., '\n', 1178) = 0x00f06090
[0x4022d1] memchr("      RE_SYNTAX_POSIX_EXTENDED :"..., '\n', 1146) = 0x00f060c8
[0x4022d1] memchr("\n  /* regex_compile will allocat"..., '\n', 1090) = 0x00f060c9
[0x4022d1] memchr("  /* regex_compile will allocate"..., '\n', 1089) = 0x00f06112
[0x4022d1] memchr("  preg->buffer = 0;\n  preg->allo"..., '\n', 1016) = 0x00f06126
[0x4022d1] memchr("  preg->allocated = 0;\n  preg->u"..., '\n', 996) = 0x00f0613d
[0x4022d1] memchr("  preg->used = 0;\n  \n  /* Don't "..., '\n', 973) = 0x00f0614f
[0x4022d1] memchr("  \n  /* Don't bother to use a fa"..., '\n', 955) = 0x00f06152
[0x4022d1] memchr("  /* Don't bother to use a fastm"..., '\n', 952) = 0x00f0619a
[0x4022d1] memchr("     REG_NEWLINE case: if we use"..., '\n', 880) = 0x00f061e0
[0x4022d1] memchr("     characters after newlines i"..., '\n', 810) = 0x00f06228
[0x4022d1] memchr("     every character.  */\n  preg"..., '\n', 738) = 0x00f06242
[0x4022d1] memchr("  preg->fastmap = 0;\n  \n  if (cf"..., '\n', 712) = 0x00f06257
[0x4022d1] memchr("  \n  if (cflags & REG_ICASE)\n   "..., '\n', 691) = 0x00f0625a
[0x4022d1] memchr("  if (cflags & REG_ICASE)\n    {\n"..., '\n', 688) = 0x00f06274
[0x4022d1] memchr("    {\n      unsigned i;\n      \n "..., '\n', 662) = 0x00f0627a
[0x4022d1] memchr("      unsigned i;\n      \n      p"..., '\n', 656) = 0x00f0628c
[0x4022d1] memchr("      \n      preg->translate = ("..., '\n', 638) = 0x00f06293
[0x4022d1] memchr("      preg->translate = (char *)"..., '\n', 631) = 0x00f062cc
[0x4022d1] memchr("      if (preg->translate == NUL"..., '\n', 574) = 0x00f062ef
[0x4022d1] memchr("        return (int) REG_ESPACE;"..., '\n', 539) = 0x00f06310
[0x4022d1] memchr("\n      /* Map uppercase characte"..., '\n', 506) = 0x00f06311
[0x4022d1] memchr("      /* Map uppercase character"..., '\n', 505) = 0x00f06358
[0x4022d1] memchr("      for (i = 0; i < CHAR_SET_S"..., '\n', 434) = 0x00f06382
[0x4022d1] memchr("        preg->translate[i] = ISU"..., '\n', 392) = 0x00f063be
[0x4022d1] memchr("    }\n  else\n    preg->translate"..., '\n', 332) = 0x00f063c4
[0x4022d1] memchr("  else\n    preg->translate = NUL"..., '\n', 326) = 0x00f063cb
[0x4022d1] memchr("    preg->translate = NULL;\n\n  /"..., '\n', 319) = 0x00f063e7
[0x4022d1] memchr("\n  /* If REG_NEWLINE is set, new"..., '\n', 291) = 0x00f063e8
[0x4022d1] memchr("  /* If REG_NEWLINE is set, newl"..., '\n', 290) = 0x00f0642a
[0x4022d1] memchr("  if (cflags & REG_NEWLINE)\n    "..., '\n', 224) = 0x00f06446
[0x4022d1] memchr("    { /* REG_NEWLINE implies nei"..., '\n', 196) = 0x00f0648b
[0x4022d1] memchr("      syntax &= ~RE_DOT_NEWLINE;"..., '\n', 127) = 0x00f064ac
[0x4022d1] memchr("      syntax |= RE_HAT_LISTS_NOT"..., '\n', 94) = 0x00f064d6
[0x4022d1] memchr("      /* It also changes the mat"..., '\n', 52) = 0x00f0650a
[0x4022d1] memchr("      preg->newline_anchor = 1;\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6426:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      preg->newline_anchor = 1;\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  else\n    preg->newline_a"..., '1', 31384) = 0x00f07348
[0x40cdf3] memchr("1; /* Includes the null.  */\n  \n"..., '\n', 27771) = 0x00f07364
[0x4022d1] memchr("    }\n  else\n    preg->newline_a"..., '\n', 3585) = 0x00f06530
[0x4022d1] memchr("  else\n    preg->newline_anchor "..., '\n', 3579) = 0x00f06537
[0x4022d1] memchr("    preg->newline_anchor = 0;\n\n "..., '\n', 3572) = 0x00f06555
[0x4022d1] memchr("\n  preg->no_sub = !!(cflags & RE"..., '\n', 3542) = 0x00f06556
[0x4022d1] memchr("  preg->no_sub = !!(cflags & REG"..., '\n', 3541) = 0x00f0657f
[0x4022d1] memchr("\n  /* POSIX says a null characte"..., '\n', 3500) = 0x00f06580
[0x4022d1] memchr("  /* POSIX says a null character"..., '\n', 3499) = 0x00f065c6
[0x4022d1] memchr("     can use strlen here in comp"..., '\n', 3429) = 0x00f065fd
[0x4022d1] memchr("  ret = regex_compile (pattern, "..., '\n', 3374) = 0x00f0663e
[0x4022d1] memchr("  \n  /* POSIX doesn't distinguis"..., '\n', 3309) = 0x00f06641
[0x4022d1] memchr("  /* POSIX doesn't distinguish b"..., '\n', 3306) = 0x00f06687
[0x4022d1] memchr("     unmatched close-group: both"..., '\n', 3236) = 0x00f066bc
[0x4022d1] memchr("  if (ret == REG_ERPAREN) ret = "..., '\n', 3183) = 0x00f066e8
[0x4022d1] memchr("  \n  return (int) ret;\n}\n\n\n/* re"..., '\n', 3139) = 0x00f066eb
[0x4022d1] memchr("  return (int) ret;\n}\n\n\n/* regex"..., '\n', 3136) = 0x00f066ff
[0x4022d1] memchr("}\n\n\n/* regexec searches for a gi"..., '\n', 3116) = 0x00f06701
[0x4022d1] memchr("\n\n/* regexec searches for a give"..., '\n', 3114) = 0x00f06702
[0x4022d1] memchr("\n/* regexec searches for a given"..., '\n', 3113) = 0x00f06703
[0x4022d1] memchr("/* regexec searches for a given "..., '\n', 3112) = 0x00f06746
[0x4022d1] memchr("   string STRING.\n   \n   If NMAT"..., '\n', 3045) = 0x00f06758
[0x4022d1] memchr("   \n   If NMATCH is zero or REG_"..., '\n', 3027) = 0x00f0675c
[0x4022d1] memchr("   If NMATCH is zero or REG_NOSU"..., '\n', 3023) = 0x00f067a0
[0x4022d1] memchr("   `regcomp', we ignore PMATCH. "..., '\n', 2955) = 0x00f067e4
[0x4022d1] memchr("   least NMATCH elements, and we"..., '\n', 2887) = 0x00f06824
[0x4022d1] memchr("   corresponding matched substri"..., '\n', 2823) = 0x00f06849
[0x4022d1] memchr("   \n   EFLAGS specifies `executi"..., '\n', 2786) = 0x00f0684d
[0x4022d1] memchr("   EFLAGS specifies `execution f"..., '\n', 2782) = 0x00f0688d
[0x4022d1] memchr("   REG_NOTBOL is set, then ^ doe"..., '\n', 2718) = 0x00f068d1
[0x4022d1] memchr("   string; if REG_NOTEOL is set,"..., '\n', 2650) = 0x00f06914
[0x4022d1] memchr("   \n   We return 0 if we find a "..., '\n', 2583) = 0x00f06918
[0x4022d1] memchr("   We return 0 if we find a matc"..., '\n', 2579) = 0x00f06956
[0x4022d1] memchr("\nint\nregexec (preg, string, nmat"..., '\n', 2517) = 0x00f06957
[0x4022d1] memchr("int\nregexec (preg, string, nmatc"..., '\n', 2516) = 0x00f0695b
[0x4022d1] memchr("regexec (preg, string, nmatch, p"..., '\n', 2512) = 0x00f0698a
[0x4022d1] memchr("    const regex_t *preg;\n    con"..., '\n', 2465) = 0x00f069a3
[0x4022d1] memchr("    const char *string; \n    siz"..., '\n', 2440) = 0x00f069bc
[0x4022d1] memchr("    size_t nmatch; \n    regmatch"..., '\n', 2415) = 0x00f069d0
[0x4022d1] memchr("    regmatch_t pmatch[]; \n    in"..., '\n', 2395) = 0x00f069ea
[0x4022d1] memchr("    int eflags;\n{\n  int ret;\n  s"..., '\n', 2369) = 0x00f069fa
[0x4022d1] memchr("{\n  int ret;\n  struct re_registe"..., '\n', 2353) = 0x00f069fc
[0x4022d1] memchr("  int ret;\n  struct re_registers"..., '\n', 2351) = 0x00f06a07
[0x4022d1] memchr("  struct re_registers regs;\n  re"..., '\n', 2340) = 0x00f06a23
[0x4022d1] memchr("  regex_t private_preg;\n  int le"..., '\n', 2312) = 0x00f06a3b
[0x4022d1] memchr("  int len = strlen (string);\n  b"..., '\n', 2288) = 0x00f06a58
[0x4022d1] memchr("  boolean want_reg_info = !preg-"..., '\n', 2259) = 0x00f06a8f
[0x4022d1] memchr("\n  private_preg = *preg;\n  \n  pr"..., '\n', 2204) = 0x00f06a90
[0x4022d1] memchr("  private_preg = *preg;\n  \n  pri"..., '\n', 2203) = 0x00f06aa8
[0x4022d1] memchr("  \n  private_preg.not_bol = !!(e"..., '\n', 2179) = 0x00f06aab
[0x4022d1] memchr("  private_preg.not_bol = !!(efla"..., '\n', 2176) = 0x00f06add
[0x4022d1] memchr("  private_preg.not_eol = !!(efla"..., '\n', 2126) = 0x00f06b0f
[0x4022d1] memchr("  \n  /* The user has told us exa"..., '\n', 2076) = 0x00f06b12
[0x4022d1] memchr("  /* The user has told us exactl"..., '\n', 2073) = 0x00f06b51
[0x4022d1] memchr("     information about, via `nma"..., '\n', 2010) = 0x00f06b97
[0x4022d1] memchr("     matching routines.  */\n  pr"..., '\n', 1940) = 0x00f06bb3
[0x4022d1] memchr("  private_preg.regs_allocated = "..., '\n', 1912) = 0x00f06bdf
[0x4022d1] memchr("  \n  if (want_reg_info)\n    {\n  "..., '\n', 1868) = 0x00f06be2
[0x4022d1] memchr("  if (want_reg_info)\n    {\n     "..., '\n', 1865) = 0x00f06bf7
[0x4022d1] memchr("    {\n      regs.num_regs = nmat"..., '\n', 1844) = 0x00f06bfd
[0x4022d1] memchr("      regs.num_regs = nmatch;\n  "..., '\n', 1838) = 0x00f06c1b
[0x4022d1] memchr("      regs.start = TALLOC (nmatc"..., '\n', 1808) = 0x00f06c49
[0x4022d1] memchr("      regs.end = TALLOC (nmatch,"..., '\n', 1762) = 0x00f06c75
[0x4022d1] memchr("      if (regs.start == NULL || "..., '\n', 1718) = 0x00f06ca7
[0x4022d1] memchr("        return (int) REG_NOMATCH"..., '\n', 1668) = 0x00f06cc9
[0x4022d1] memchr("    }\n\n  /* Perform the searchin"..., '\n', 1634) = 0x00f06ccf
[0x4022d1] memchr("\n  /* Perform the searching oper"..., '\n', 1628) = 0x00f06cd0
[0x4022d1] memchr("  /* Perform the searching opera"..., '\n', 1627) = 0x00f06cfa
[0x4022d1] memchr("  ret = re_search (&private_preg"..., '\n', 1585) = 0x00f06d29
[0x4022d1] memchr("                   /* start: */ "..., '\n', 1538) = 0x00f06d5e
[0x4022d1] memchr("                   want_reg_info"..., '\n', 1485) = 0x00f06da5
[0x4022d1] memchr("  \n  /* Copy the register inform"..., '\n', 1414) = 0x00f06da8
[0x4022d1] memchr("  /* Copy the register informati"..., '\n', 1411) = 0x00f06de7
[0x4022d1] memchr("  if (want_reg_info)\n    {\n     "..., '\n', 1348) = 0x00f06dfc
[0x4022d1] memchr("    {\n      if (ret >= 0)\n      "..., '\n', 1327) = 0x00f06e02
[0x4022d1] memchr("      if (ret >= 0)\n        {\n  "..., '\n', 1321) = 0x00f06e16
[0x4022d1] memchr("        {\n          unsigned r;\n"..., '\n', 1301) = 0x00f06e20
[0x4022d1] memchr("          unsigned r;\n\n         "..., '\n', 1291) = 0x00f06e36
[0x4022d1] memchr("\n          for (r = 0; r < nmatc"..., '\n', 1269) = 0x00f06e37
[0x4022d1] memchr("          for (r = 0; r < nmatch"..., '\n', 1268) = 0x00f06e5e
[0x4022d1] memchr("            {\n              pmat"..., '\n', 1229) = 0x00f06e6c
[0x4022d1] memchr("              pmatch[r].rm_so = "..., '\n', 1215) = 0x00f06e9b
[0x4022d1] memchr("              pmatch[r].rm_eo = "..., '\n', 1168) = 0x00f06ec8
[0x4022d1] memchr("            }\n        }\n\n      /"..., '\n', 1123) = 0x00f06ed6
[0x4022d1] memchr("        }\n\n      /* If we needed"..., '\n', 1109) = 0x00f06ee0
[0x4022d1] memchr("\n      /* If we needed the tempo"..., '\n', 1099) = 0x00f06ee1
[0x4022d1] memchr("      /* If we needed the tempor"..., '\n', 1098) = 0x00f06f2c
[0x4022d1] memchr("      free (regs.start);\n      f"..., '\n', 1023) = 0x00f06f45
[0x4022d1] memchr("      free (regs.end);\n    }\n\n  "..., '\n', 998) = 0x00f06f5c
[0x4022d1] memchr("    }\n\n  /* We want zero return "..., '\n', 975) = 0x00f06f62
[0x4022d1] memchr("\n  /* We want zero return to mea"..., '\n', 969) = 0x00f06f63
[0x4022d1] memchr("  /* We want zero return to mean"..., '\n', 968) = 0x00f06fa5
[0x4022d1] memchr("  return ret >= 0 ? (int) REG_NO"..., '\n', 902) = 0x00f06fe0
[0x4022d1] memchr("}\n\n\n/* Returns a message corresp"..., '\n', 843) = 0x00f06fe2
[0x4022d1] memchr("\n\n/* Returns a message correspon"..., '\n', 841) = 0x00f06fe3
[0x4022d1] memchr("\n/* Returns a message correspond"..., '\n', 840) = 0x00f06fe4
[0x4022d1] memchr("/* Returns a message correspondi"..., '\n', 839) = 0x00f0702b
[0x4022d1] memchr("   from either regcomp or regexe"..., '\n', 768) = 0x00f0706c
[0x4022d1] memchr("\nsize_t\nregerror (errcode, preg,"..., '\n', 703) = 0x00f0706d
[0x4022d1] memchr("size_t\nregerror (errcode, preg, "..., '\n', 702) = 0x00f07074
[0x4022d1] memchr("regerror (errcode, preg, errbuf,"..., '\n', 695) = 0x00f070a2
[0x4022d1] memchr("    int errcode;\n    const regex"..., '\n', 649) = 0x00f070b3
[0x4022d1] memchr("    const regex_t *preg;\n    cha"..., '\n', 632) = 0x00f070cc
[0x4022d1] memchr("    char *errbuf;\n    size_t err"..., '\n', 607) = 0x00f070de
[0x4022d1] memchr("    size_t errbuf_size;\n{\n  cons"..., '\n', 589) = 0x00f070f6
[0x4022d1] memchr("{\n  const char *msg;\n  size_t ms"..., '\n', 565) = 0x00f070f8
[0x4022d1] memchr("  const char *msg;\n  size_t msg_"..., '\n', 563) = 0x00f0710b
[0x4022d1] memchr("  size_t msg_size;\n\n  if (errcod"..., '\n', 544) = 0x00f0711e
[0x4022d1] memchr("\n  if (errcode < 0\n      || errc"..., '\n', 525) = 0x00f0711f
[0x4022d1] memchr("  if (errcode < 0\n      || errco"..., '\n', 524) = 0x00f07131
[0x4022d1] memchr("      || errcode >= (sizeof (re_"..., '\n', 506) = 0x00f07179
[0x4022d1] memchr("    /* Only error codes returned"..., '\n', 434) = 0x00f071c4
[0x4022d1] memchr("       to this routine.  If we a"..., '\n', 359) = 0x00f0720e
[0x4022d1] memchr("       code generates an invalid"..., '\n', 285) = 0x00f07257
[0x4022d1] memchr("       Dump core so we can fix i"..., '\n', 212) = 0x00f0727e
[0x4022d1] memchr("    abort ();\n\n  msg = re_error_"..., '\n', 173) = 0x00f0728c
[0x4022d1] memchr("\n  msg = re_error_msg[errcode];\n"..., '\n', 159) = 0x00f0728d
[0x4022d1] memchr("  msg = re_error_msg[errcode];\n\n"..., '\n', 158) = 0x00f072ac
[0x4022d1] memchr("\n  /* POSIX doesn't require that"..., '\n', 127) = 0x00f072ad
[0x4022d1] memchr("  /* POSIX doesn't require that "..., '\n', 126) = 0x00f072f2
[0x4022d1] memchr("     not be nice.  */\n  if (! ms"..., '\n', 57) = 0x00f07308
[0x4022d1] memchr("  if (! msg)\n    msg = "Success""..., '\n', 35) = 0x00f07315
[0x4022d1] memchr("    msg = "Success";\n\n  msg_size"..., '\n', 22) = 0x00f0732a
[0x4022d1] memchr("\n  msg_size = strlen (msg) + 1; "..., '\n', 1) = 0x00f0732b
[0x4022d1] memchr("  msg_size = strlen (msg) + 1; /"..., '\n', 0) = NULL
[0x4023cc] fwrite("6549:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  msg_size = strlen (msg) + 1; /"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  \n  if (errbuf_size != 0)\n    {"..., '1', 27742) = 0x00f073e0
[0x40cdf3] memchr("1);\n          errbuf[errbuf_size"..., '\n', 27619) = 0x00f073e3
[0x4022d1] memchr("  \n  if (errbuf_size != 0)\n    {"..., '\n', 77) = 0x00f07367
[0x4022d1] memchr("  if (errbuf_size != 0)\n    {\n  "..., '\n', 74) = 0x00f0737f
[0x4022d1] memchr("    {\n      if (msg_size > errbu"..., '\n', 50) = 0x00f07385
[0x4022d1] memchr("      if (msg_size > errbuf_size"..., '\n', 44) = 0x00f073a7
[0x4022d1] memchr("        {\n          strncpy (err"..., '\n', 10) = 0x00f073b1
[0x4022d1] memchr("          strncpy (errbuf, msg, "..., '\n', 0) = NULL
[0x4023cc] fwrite("6555:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          strncpy (errbuf, msg, "..., 1, 50, 0x7fce6d444260) = 50
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("          errbuf[errbuf_size - 1"..., '1', 27615) = 0x00f07403
[0x40cdf3] memchr("1] = 0;\n        }\n      else\n   "..., '\n', 27584) = 0x00f0740a
[0x4022d1] memchr("          errbuf[errbuf_size - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("6556:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("          errbuf[errbuf_size - 1"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("        }\n      else\n        str"..., '1', 27576) = 0x00f076c6
[0x40cdf3] memchr("1988 Free Software Foundation, I"..., '\n', 26877) = 0x00f076e9
[0x4022d1] memchr("        }\n      else\n        str"..., '\n', 682) = 0x00f07414
[0x4022d1] memchr("      else\n        strcpy (errbu"..., '\n', 672) = 0x00f0741f
[0x4022d1] memchr("        strcpy (errbuf, msg);\n  "..., '\n', 661) = 0x00f0743d
[0x4022d1] memchr("    }\n\n  return msg_size;\n}\n\n\n/*"..., '\n', 631) = 0x00f07443
[0x4022d1] memchr("\n  return msg_size;\n}\n\n\n/* Free "..., '\n', 625) = 0x00f07444
[0x4022d1] memchr("  return msg_size;\n}\n\n\n/* Free d"..., '\n', 624) = 0x00f07457
[0x4022d1] memchr("}\n\n\n/* Free dynamically allocate"..., '\n', 605) = 0x00f07459
[0x4022d1] memchr("\n\n/* Free dynamically allocated "..., '\n', 603) = 0x00f0745a
[0x4022d1] memchr("\n/* Free dynamically allocated s"..., '\n', 602) = 0x00f0745b
[0x4022d1] memchr("/* Free dynamically allocated sp"..., '\n', 601) = 0x00f07491
[0x4022d1] memchr("\nvoid\nregfree (preg)\n    regex_t"..., '\n', 547) = 0x00f07492
[0x4022d1] memchr("void\nregfree (preg)\n    regex_t "..., '\n', 546) = 0x00f07497
[0x4022d1] memchr("regfree (preg)\n    regex_t *preg"..., '\n', 541) = 0x00f074a6
[0x4022d1] memchr("    regex_t *preg;\n{\n  if (preg-"..., '\n', 526) = 0x00f074b9
[0x4022d1] memchr("{\n  if (preg->buffer != NULL)\n  "..., '\n', 507) = 0x00f074bb
[0x4022d1] memchr("  if (preg->buffer != NULL)\n    "..., '\n', 505) = 0x00f074d7
[0x4022d1] memchr("    free (preg->buffer);\n  preg-"..., '\n', 477) = 0x00f074f0
[0x4022d1] memchr("  preg->buffer = NULL;\n  \n  preg"..., '\n', 452) = 0x00f07507
[0x4022d1] memchr("  \n  preg->allocated = 0;\n  preg"..., '\n', 429) = 0x00f0750a
[0x4022d1] memchr("  preg->allocated = 0;\n  preg->u"..., '\n', 426) = 0x00f07521
[0x4022d1] memchr("  preg->used = 0;\n\n  if (preg->f"..., '\n', 403) = 0x00f07533
[0x4022d1] memchr("\n  if (preg->fastmap != NULL)\n  "..., '\n', 385) = 0x00f07534
[0x4022d1] memchr("  if (preg->fastmap != NULL)\n   "..., '\n', 384) = 0x00f07551
[0x4022d1] memchr("    free (preg->fastmap);\n  preg"..., '\n', 355) = 0x00f0756b
[0x4022d1] memchr("  preg->fastmap = NULL;\n  preg->"..., '\n', 329) = 0x00f07583
[0x4022d1] memchr("  preg->fastmap_accurate = 0;\n\n "..., '\n', 305) = 0x00f075a1
[0x4022d1] memchr("\n  if (preg->translate != NULL)\n"..., '\n', 275) = 0x00f075a2
[0x4022d1] memchr("  if (preg->translate != NULL)\n "..., '\n', 274) = 0x00f075c1
[0x4022d1] memchr("    free (preg->translate);\n  pr"..., '\n', 243) = 0x00f075dd
[0x4022d1] memchr("  preg->translate = NULL;\n}\n\n#en"..., '\n', 215) = 0x00f075f7
[0x4022d1] memchr("}\n\n#endif /* not emacs  */\n\014\n/*\n"..., '\n', 189) = 0x00f075f9
[0x4022d1] memchr("\n#endif /* not emacs  */\n\014\n/*\nLo"..., '\n', 187) = 0x00f075fa
[0x4022d1] memchr("#endif /* not emacs  */\n\014\n/*\nLoc"..., '\n', 186) = 0x00f07612
[0x4022d1] memchr("\014\n/*\nLocal variables:\nmake-backu"..., '\n', 162) = 0x00f07614
[0x4022d1] memchr("/*\nLocal variables:\nmake-backup-"..., '\n', 160) = 0x00f07617
[0x4022d1] memchr("Local variables:\nmake-backup-fil"..., '\n', 157) = 0x00f07628
[0x4022d1] memchr("make-backup-files: t\nversion-con"..., '\n', 140) = 0x00f0763d
[0x4022d1] memchr("version-control: t\ntrim-versions"..., '\n', 119) = 0x00f07650
[0x4022d1] memchr("trim-versions-without-asking: ni"..., '\n', 100) = 0x00f07672
[0x4022d1] memchr("End:\n*/\n/* dfa.c - deterministic"..., '\n', 66) = 0x00f07677
[0x4022d1] memchr("*/\n/* dfa.c - deterministic exte"..., '\n', 61) = 0x00f0767a
[0x4022d1] memchr("/* dfa.c - deterministic extende"..., '\n', 58) = 0x00f076b4
[0x4022d1] memchr("   Copyright (C) 1988 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("6599:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Copyright (C) 1988 Free Softw"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., '1', 26841) = 0x00f07987
[0x40cdf3] memchr("139, USA.  */\n\n/* Written June, "..., '\n', 26172) = 0x00f07994
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 618) = 0x00f076ea
[0x4022d1] memchr("   This program is free software"..., '\n', 617) = 0x00f07732
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 545) = 0x00f0777a
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 473) = 0x00f077c1
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 402) = 0x00f077d7
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f077d8
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f0781b
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f0785d
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f0789e
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f078ce
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f078cf
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f07914
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f07953
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("6613:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Written June, 1988 by Mike H"..., '1', 26158) = 0x00f079a7
[0x40cdf3] memchr("1988 by Mike Haertel\n   Modified"..., '\n', 26140) = 0x00f079bb
[0x4022d1] memchr("\n/* Written June, 1988 by Mike H"..., '\n', 1) = 0x00f07995
[0x4022d1] memchr("/* Written June, 1988 by Mike Ha"..., '\n', 0) = NULL
[0x4023cc] fwrite("6615:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("/* Written June, 1988 by Mike Ha"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   Modified July, 1988 by Arthur"..., '1', 26119) = 0x00f079ce
[0x40cdf3] memchr("1988 by Arthur David Olson to as"..., '\n', 26101) = 0x00f07a03
[0x4022d1] memchr("   Modified July, 1988 by Arthur"..., '\n', 0) = NULL
[0x4023cc] fwrite("6616:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Modified July, 1988 by Arthur"..., 1, 72, 0x7fce6d444260) = 72
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/*#include <assert.h> */\n/*#inc"..., '1', 26047) = 0x00f07a9e
[0x40cdf3] memchr("1\n#endif\n#else\n#if flag_systypes"..., '\n', 25893) = 0x00f07a9f
[0x4022d1] memchr("\n/*#include <assert.h> */\n/*#inc"..., '\n', 134) = 0x00f07a04
[0x4022d1] memchr("/*#include <assert.h> */\n/*#incl"..., '\n', 133) = 0x00f07a1d
[0x4022d1] memchr("/*#include <ctype.h> */\n/*#inclu"..., '\n', 108) = 0x00f07a35
[0x4022d1] memchr("/*#include <stdio.h> */\n\n#ifdef "..., '\n', 84) = 0x00f07a4d
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_st"..., '\n', 60) = 0x00f07a4e
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_std"..., '\n', 59) = 0x00f07a62
[0x4022d1] memchr("#if flag_stdlib==0\n#include <std"..., '\n', 39) = 0x00f07a75
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f07a89
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("6625:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_stdlib 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\n#if flag_systypes=="..., '1', 25891) = 0x00f07af0
[0x40cdf3] memchr("1\n#endif\nextern char *calloc(), "..., '\n', 25811) = 0x00f07af1
[0x4022d1] memchr("#endif\n#else\n#if flag_systypes=="..., '\n', 58) = 0x00f07aa6
[0x4022d1] memchr("#else\n#if flag_systypes==0 \n#inc"..., '\n', 51) = 0x00f07aac
[0x4022d1] memchr("#if flag_systypes==0 \n#include <"..., '\n', 45) = 0x00f07ac2
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f07ad9
[0x4022d1] memchr("#define flag_systypes 1\n#endif\ne"..., '\n', 0) = NULL
[0x4023cc] fwrite("6630:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\ne"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\nextern char *calloc(), *m"..., '1', 25809) = 0x00f07bb2
[0x40cdf3] memchr("1\n#endif\n#undef index\n#define in"..., '\n', 25617) = 0x00f07bb3
[0x4022d1] memchr("#endif\nextern char *calloc(), *m"..., '\n', 172) = 0x00f07af8
[0x4022d1] memchr("extern char *calloc(), *malloc()"..., '\n', 165) = 0x00f07b26
[0x4022d1] memchr("extern void free();\n#endif\n\n#if "..., '\n', 119) = 0x00f07b3a
[0x4022d1] memchr("#endif\n\n#if defined(HAVE_STRING_"..., '\n', 99) = 0x00f07b41
[0x4022d1] memchr("\n#if defined(HAVE_STRING_H) || d"..., '\n', 92) = 0x00f07b42
[0x4022d1] memchr("#if defined(HAVE_STRING_H) || de"..., '\n', 91) = 0x00f07b76
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 39) = 0x00f07b89
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f07b9d
[0x4022d1] memchr("#define flag_string 1\n#endif\n#un"..., '\n', 0) = NULL
[0x4023cc] fwrite("6639:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_string 1\n#endif\n#un"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#undef index\n#define inde"..., '1', 25615) = 0x00f07c21
[0x40cdf3] memchr("1\n#endif\n#endif\n\n#ifndef isgraph"..., '\n', 25506) = 0x00f07c22
[0x4022d1] memchr("#endif\n#undef index\n#define inde"..., '\n', 88) = 0x00f07bba
[0x4022d1] memchr("#undef index\n#define index strch"..., '\n', 81) = 0x00f07bc7
[0x4022d1] memchr("#define index strchr\n#else\n#if f"..., '\n', 68) = 0x00f07bdc
[0x4022d1] memchr("#else\n#if flag_strings==0\n#inclu"..., '\n', 47) = 0x00f07be2
[0x4022d1] memchr("#if flag_strings==0\n#include <st"..., '\n', 41) = 0x00f07bf6
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 21) = 0x00f07c0b
[0x4022d1] memchr("#define flag_strings 1\n#endif\n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("6646:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_strings 1\n#endif\n#e"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\n\n#ifndef isgraph\n#"..., '1', 25504) = 0x00f081af
[0x40cdf3] memchr("1(n)\n     size_t n;\n{\n  ptr_t r "..., '\n', 24084) = 0x00f081b3
[0x4022d1] memchr("#endif\n#endif\n\n#ifndef isgraph\n#"..., '\n', 1412) = 0x00f07c29
[0x4022d1] memchr("#endif\n\n#ifndef isgraph\n#define "..., '\n', 1405) = 0x00f07c30
[0x4022d1] memchr("\n#ifndef isgraph\n#define isgraph"..., '\n', 1398) = 0x00f07c31
[0x4022d1] memchr("#ifndef isgraph\n#define isgraph("..., '\n', 1397) = 0x00f07c41
[0x4022d1] memchr("#define isgraph(C) (isprint(C) &"..., '\n', 1381) = 0x00f07c70
[0x4022d1] memchr("#endif\n\n#undef ISALPHA\n#undef IS"..., '\n', 1334) = 0x00f07c77
[0x4022d1] memchr("\n#undef ISALPHA\n#undef ISUPPER\n#"..., '\n', 1327) = 0x00f07c78
[0x4022d1] memchr("#undef ISALPHA\n#undef ISUPPER\n#u"..., '\n', 1326) = 0x00f07c87
[0x4022d1] memchr("#undef ISUPPER\n#undef ISLOWER\n#u"..., '\n', 1311) = 0x00f07c96
[0x4022d1] memchr("#undef ISLOWER\n#undef ISDIGIT\n#u"..., '\n', 1296) = 0x00f07ca5
[0x4022d1] memchr("#undef ISDIGIT\n#undef ISXDIGIT\n#"..., '\n', 1281) = 0x00f07cb4
[0x4022d1] memchr("#undef ISXDIGIT\n#undef ISSPACE\n#"..., '\n', 1266) = 0x00f07cc4
[0x4022d1] memchr("#undef ISSPACE\n#undef ISPUNCT\n#u"..., '\n', 1250) = 0x00f07cd3
[0x4022d1] memchr("#undef ISPUNCT\n#undef ISALNUM\n#u"..., '\n', 1235) = 0x00f07ce2
[0x4022d1] memchr("#undef ISALNUM\n#undef ISPRINT\n#u"..., '\n', 1220) = 0x00f07cf1
[0x4022d1] memchr("#undef ISPRINT\n#undef ISGRAPH\n#u"..., '\n', 1205) = 0x00f07d00
[0x4022d1] memchr("#undef ISGRAPH\n#undef ISCNTRL\n\n\n"..., '\n', 1190) = 0x00f07d0f
[0x4022d1] memchr("#undef ISCNTRL\n\n\n#ifdef isascii\n"..., '\n', 1175) = 0x00f07d1e
[0x4022d1] memchr("\n\n#ifdef isascii\n#define ISALPHA"..., '\n', 1160) = 0x00f07d1f
[0x4022d1] memchr("\n#ifdef isascii\n#define ISALPHA("..., '\n', 1159) = 0x00f07d20
[0x4022d1] memchr("#ifdef isascii\n#define ISALPHA(C"..., '\n', 1158) = 0x00f07d2f
[0x4022d1] memchr("#define ISALPHA(C) (isascii(C) &"..., '\n', 1143) = 0x00f07d5d
[0x4022d1] memchr("#define ISUPPER(C) (isascii(C) &"..., '\n', 1097) = 0x00f07d8b
[0x4022d1] memchr("#define ISLOWER(C) (isascii(C) &"..., '\n', 1051) = 0x00f07db9
[0x4022d1] memchr("#define ISDIGIT(C) (isascii(C) &"..., '\n', 1005) = 0x00f07de7
[0x4022d1] memchr("#define ISXDIGIT(C) (isascii(C) "..., '\n', 959) = 0x00f07e17
[0x4022d1] memchr("#define ISSPACE(C) (isascii(C) &"..., '\n', 911) = 0x00f07e45
[0x4022d1] memchr("#define ISPUNCT(C) (isascii(C) &"..., '\n', 865) = 0x00f07e73
[0x4022d1] memchr("#define ISALNUM(C) (isascii(C) &"..., '\n', 819) = 0x00f07ea1
[0x4022d1] memchr("#define ISPRINT(C) (isascii(C) &"..., '\n', 773) = 0x00f07ecf
[0x4022d1] memchr("#define ISGRAPH(C) (isascii(C) &"..., '\n', 727) = 0x00f07efd
[0x4022d1] memchr("#define ISCNTRL(C) (isascii(C) &"..., '\n', 681) = 0x00f07f2b
[0x4022d1] memchr("#else\n#define ISALPHA(C) isalpha"..., '\n', 635) = 0x00f07f31
[0x4022d1] memchr("#define ISALPHA(C) isalpha(C)\n#d"..., '\n', 629) = 0x00f07f4f
[0x4022d1] memchr("#define ISUPPER(C) isupper(C)\n#d"..., '\n', 599) = 0x00f07f6d
[0x4022d1] memchr("#define ISLOWER(C) islower(C)\n#d"..., '\n', 569) = 0x00f07f8b
[0x4022d1] memchr("#define ISDIGIT(C) isdigit(C)\n#d"..., '\n', 539) = 0x00f07fa9
[0x4022d1] memchr("#define ISXDIGIT(C) isxdigit(C)\n"..., '\n', 509) = 0x00f07fc9
[0x4022d1] memchr("#define ISSPACE(C) isspace(C)\n#d"..., '\n', 477) = 0x00f07fe7
[0x4022d1] memchr("#define ISPUNCT(C) ispunct(C)\n#d"..., '\n', 447) = 0x00f08005
[0x4022d1] memchr("#define ISALNUM(C) isalnum(C)\n#d"..., '\n', 417) = 0x00f08023
[0x4022d1] memchr("#define ISPRINT(C) isprint(C)\n#d"..., '\n', 387) = 0x00f08041
[0x4022d1] memchr("#define ISGRAPH(C) isgraph(C)\n#d"..., '\n', 357) = 0x00f0805f
[0x4022d1] memchr("#define ISCNTRL(C) iscntrl(C)\n#e"..., '\n', 327) = 0x00f0807d
[0x4022d1] memchr("#endif\n\n#include "dfa.h"\n/*#incl"..., '\n', 297) = 0x00f08084
[0x4022d1] memchr("\n#include "dfa.h"\n/*#include "re"..., '\n', 290) = 0x00f08085
[0x4022d1] memchr("#include "dfa.h"\n/*#include "reg"..., '\n', 289) = 0x00f08096
[0x4022d1] memchr("/*#include "regex.h"*/\n\n#if __ST"..., '\n', 272) = 0x00f080ad
[0x4022d1] memchr("\n#if __STDC__\ntypedef void *ptr_"..., '\n', 249) = 0x00f080ae
[0x4022d1] memchr("#if __STDC__\ntypedef void *ptr_t"..., '\n', 248) = 0x00f080bb
[0x4022d1] memchr("typedef void *ptr_t;\n#else\ntyped"..., '\n', 235) = 0x00f080d0
[0x4022d1] memchr("#else\ntypedef char *ptr_t;\n#endi"..., '\n', 214) = 0x00f080d6
[0x4022d1] memchr("typedef char *ptr_t;\n#endif\n\nsta"..., '\n', 208) = 0x00f080eb
[0x4022d1] memchr("#endif\n\nstatic void\tdfamust();\n\n"..., '\n', 187) = 0x00f080f2
[0x4022d1] memchr("\nstatic void\tdfamust();\n\nstatic "..., '\n', 180) = 0x00f080f3
[0x4022d1] memchr("static void\tdfamust();\n\nstatic p"..., '\n', 179) = 0x00f0810a
[0x4022d1] memchr("\nstatic ptr_t\nxcalloc(n, s)\n    "..., '\n', 156) = 0x00f0810b
[0x4022d1] memchr("static ptr_t\nxcalloc(n, s)\n     "..., '\n', 155) = 0x00f08118
[0x4022d1] memchr("xcalloc(n, s)\n     int n;\n     s"..., '\n', 142) = 0x00f08126
[0x4022d1] memchr("     int n;\n     size_t s;\n{\n  p"..., '\n', 128) = 0x00f08132
[0x4022d1] memchr("     size_t s;\n{\n  ptr_t r = cal"..., '\n', 116) = 0x00f08141
[0x4022d1] memchr("{\n  ptr_t r = calloc(n, s);\n\n  i"..., '\n', 101) = 0x00f08143
[0x4022d1] memchr("  ptr_t r = calloc(n, s);\n\n  if "..., '\n', 99) = 0x00f0815d
[0x4022d1] memchr("\n  if (!r)\n    dfaerror("Memory "..., '\n', 73) = 0x00f0815e
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 72) = 0x00f08168
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 62) = 0x00f0818a
[0x4022d1] memchr("  return r;\n}\n\nstatic ptr_t\nxmal"..., '\n', 28) = 0x00f08196
[0x4022d1] memchr("}\n\nstatic ptr_t\nxmalloc_1(n)\n   "..., '\n', 16) = 0x00f08198
[0x4022d1] memchr("\nstatic ptr_t\nxmalloc_1(n)\n     "..., '\n', 14) = 0x00f08199
[0x4022d1] memchr("static ptr_t\nxmalloc_1(n)\n     s"..., '\n', 13) = 0x00f081a6
[0x4022d1] memchr("xmalloc_1(n)\n     size_t n;\n{\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("6717:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("xmalloc_1(n)\n     size_t n;\n{\n  "..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     size_t n;\n{\n  ptr_t r = mal"..., '1', 24079) = 0x00f08240
[0x40cdf3] memchr("1(p, n)\n     ptr_t p;\n     size_"..., '\n', 23939) = 0x00f08247
[0x4022d1] memchr("     size_t n;\n{\n  ptr_t r = mal"..., '\n', 131) = 0x00f081c2
[0x4022d1] memchr("{\n  ptr_t r = malloc(n);\n\n  asse"..., '\n', 116) = 0x00f081c4
[0x4022d1] memchr("  ptr_t r = malloc(n);\n\n  assert"..., '\n', 114) = 0x00f081db
[0x4022d1] memchr("\n  assert(n != 0);\n  if (!r)\n   "..., '\n', 91) = 0x00f081dc
[0x4022d1] memchr("  assert(n != 0);\n  if (!r)\n    "..., '\n', 90) = 0x00f081ee
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 72) = 0x00f081f8
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 62) = 0x00f0821a
[0x4022d1] memchr("  return r;\n}\n\nstatic ptr_t\nxrea"..., '\n', 28) = 0x00f08226
[0x4022d1] memchr("}\n\nstatic ptr_t\nxrealloc_1(p, n)"..., '\n', 16) = 0x00f08228
[0x4022d1] memchr("\nstatic ptr_t\nxrealloc_1(p, n)\n "..., '\n', 14) = 0x00f08229
[0x4022d1] memchr("static ptr_t\nxrealloc_1(p, n)\n  "..., '\n', 13) = 0x00f08236
[0x4022d1] memchr("xrealloc_1(p, n)\n     ptr_t p;\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("6729:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("xrealloc_1(p, n)\n     ptr_t p;\n "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     ptr_t p;\n     size_t n;\n{\n "..., '1', 23931) = 0x00f0833c
[0x40cdf3] memchr("1((n) * sizeof (t)))\n#define REA"..., '\n', 23687) = 0x00f08350
[0x4022d1] memchr("     ptr_t p;\n     size_t n;\n{\n "..., '\n', 199) = 0x00f08255
[0x4022d1] memchr("     size_t n;\n{\n  ptr_t r = rea"..., '\n', 185) = 0x00f08264
[0x4022d1] memchr("{\n  ptr_t r = realloc(p, n);\n\n  "..., '\n', 170) = 0x00f08266
[0x4022d1] memchr("  ptr_t r = realloc(p, n);\n\n  as"..., '\n', 168) = 0x00f08281
[0x4022d1] memchr("\n  assert(n != 0);\n  if (!r)\n   "..., '\n', 141) = 0x00f08282
[0x4022d1] memchr("  assert(n != 0);\n  if (!r)\n    "..., '\n', 140) = 0x00f08294
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 122) = 0x00f0829e
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 112) = 0x00f082c0
[0x4022d1] memchr("  return r;\n}\n\n#define CALLOC(p,"..., '\n', 78) = 0x00f082cc
[0x4022d1] memchr("}\n\n#define CALLOC(p, t, n) ((p) "..., '\n', 66) = 0x00f082ce
[0x4022d1] memchr("\n#define CALLOC(p, t, n) ((p) = "..., '\n', 64) = 0x00f082cf
[0x4022d1] memchr("#define CALLOC(p, t, n) ((p) = ("..., '\n', 63) = 0x00f0830e
[0x4022d1] memchr("#define MALLOC(p, t, n) ((p) = ("..., '\n', 0) = NULL
[0x4023cc] fwrite("6742:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define MALLOC(p, t, n) ((p) = ("..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define REALLOC(p, t, n) ((p) = "..., '1', 23666) = 0x00f08380
[0x40cdf3] memchr("1((ptr_t) (p), (n) * sizeof (t))"..., '\n', 23619) = 0x00f083a1
[0x4022d1] memchr("#define REALLOC(p, t, n) ((p) = "..., '\n', 0) = NULL
[0x4023cc] fwrite("6743:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define REALLOC(p, t, n) ((p) = "..., 1, 81, 0x7fce6d444260) = 81
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Reallocate an array of type "..., '1', 23585) = 0x00f08872
[0x40cdf3] memchr("1 << b % INTBITS;\n}\n\nstatic void"..., '\n', 22353) = 0x00f08883
[0x4022d1] memchr("\n/* Reallocate an array of type "..., '\n', 1206) = 0x00f083a2
[0x4022d1] memchr("/* Reallocate an array of type t"..., '\n', 1205) = 0x00f083e8
[0x4022d1] memchr("#define REALLOC_IF_NECESSARY(p, "..., '\n', 1135) = 0x00f0841c
[0x4022d1] memchr("  if ((index) >= (nalloc))\t\t\t  \\"..., '\n', 1083) = 0x00f0843d
[0x4022d1] memchr("    {\t\t\t\t\t\t  \\\n      while ((ind"..., '\n', 1050) = 0x00f0844c
[0x4022d1] memchr("      while ((index) >= (nalloc)"..., '\n', 1035) = 0x00f08473
[0x4022d1] memchr("\t(nalloc) *= 2;\t\t\t\t  \\\n      REA"..., '\n', 996) = 0x00f0848a
[0x4022d1] memchr("      REALLOC(p, t, nalloc);\t\t\t "..., '\n', 973) = 0x00f084ad
[0x4022d1] memchr("    }\n\n#ifdef DEBUG\n\nstatic void"..., '\n', 938) = 0x00f084b3
[0x4022d1] memchr("\n#ifdef DEBUG\n\nstatic void\nprtok"..., '\n', 932) = 0x00f084b4
[0x4022d1] memchr("#ifdef DEBUG\n\nstatic void\nprtok("..., '\n', 931) = 0x00f084c1
[0x4022d1] memchr("\nstatic void\nprtok(t)\n     token"..., '\n', 918) = 0x00f084c2
[0x4022d1] memchr("static void\nprtok(t)\n     token "..., '\n', 917) = 0x00f084ce
[0x4022d1] memchr("prtok(t)\n     token t;\n{\n  char "..., '\n', 905) = 0x00f084d7
[0x4022d1] memchr("     token t;\n{\n  char *s;\n\n  if"..., '\n', 896) = 0x00f084e5
[0x4022d1] memchr("{\n  char *s;\n\n  if (t < 0)\n    f"..., '\n', 882) = 0x00f084e7
[0x4022d1] memchr("  char *s;\n\n  if (t < 0)\n    fpr"..., '\n', 880) = 0x00f084f2
[0x4022d1] memchr("\n  if (t < 0)\n    fprintf(stderr"..., '\n', 869) = 0x00f084f3
[0x4022d1] memchr("  if (t < 0)\n    fprintf(stderr,"..., '\n', 868) = 0x00f08500
[0x4022d1] memchr("    fprintf(stderr, "END");\n  el"..., '\n', 855) = 0x00f0851c
[0x4022d1] memchr("  else if (t < NOTCHAR)\n    fpri"..., '\n', 827) = 0x00f08534
[0x4022d1] memchr("    fprintf(stderr, "%c", t);\n  "..., '\n', 803) = 0x00f08552
[0x4022d1] memchr("  else\n    {\n      switch (t)\n\t{"..., '\n', 773) = 0x00f08559
[0x4022d1] memchr("    {\n      switch (t)\n\t{\n\tcase "..., '\n', 766) = 0x00f0855f
[0x4022d1] memchr("      switch (t)\n\t{\n\tcase EMPTY:"..., '\n', 760) = 0x00f08570
[0x4022d1] memchr("\t{\n\tcase EMPTY: s = "EMPTY"; bre"..., '\n', 743) = 0x00f08573
[0x4022d1] memchr("\tcase EMPTY: s = "EMPTY"; break;"..., '\n', 740) = 0x00f08594
[0x4022d1] memchr("\tcase BACKREF: s = "BACKREF"; br"..., '\n', 707) = 0x00f085b9
[0x4022d1] memchr("\tcase BEGLINE: s = "BEGLINE"; br"..., '\n', 670) = 0x00f085de
[0x4022d1] memchr("\tcase ENDLINE: s = "ENDLINE"; br"..., '\n', 633) = 0x00f08603
[0x4022d1] memchr("\tcase BEGWORD: s = "BEGWORD"; br"..., '\n', 596) = 0x00f08628
[0x4022d1] memchr("\tcase ENDWORD: s = "ENDWORD"; br"..., '\n', 559) = 0x00f0864d
[0x4022d1] memchr("\tcase LIMWORD: s = "LIMWORD"; br"..., '\n', 522) = 0x00f08672
[0x4022d1] memchr("\tcase NOTLIMWORD: s = "NOTLIMWOR"..., '\n', 485) = 0x00f0869d
[0x4022d1] memchr("\tcase QMARK: s = "QMARK"; break;"..., '\n', 442) = 0x00f086be
[0x4022d1] memchr("\tcase STAR: s = "STAR"; break;\n\t"..., '\n', 409) = 0x00f086dd
[0x4022d1] memchr("\tcase PLUS: s = "PLUS"; break;\n\t"..., '\n', 378) = 0x00f086fc
[0x4022d1] memchr("\tcase CAT: s = "CAT"; break;\n\tca"..., '\n', 347) = 0x00f08719
[0x4022d1] memchr("\tcase OR: s = "OR"; break;\n\tcase"..., '\n', 318) = 0x00f08734
[0x4022d1] memchr("\tcase ORTOP: s = "ORTOP"; break;"..., '\n', 291) = 0x00f08755
[0x4022d1] memchr("\tcase LPAREN: s = "LPAREN"; brea"..., '\n', 258) = 0x00f08778
[0x4022d1] memchr("\tcase RPAREN: s = "RPAREN"; brea"..., '\n', 223) = 0x00f0879b
[0x4022d1] memchr("\tdefault: s = "CSET"; break;\n\t}\n"..., '\n', 188) = 0x00f087b8
[0x4022d1] memchr("\t}\n      fprintf(stderr, "%s", s"..., '\n', 159) = 0x00f087bb
[0x4022d1] memchr("      fprintf(stderr, "%s", s);\n"..., '\n', 156) = 0x00f087db
[0x4022d1] memchr("    }\n}\n#endif /* DEBUG */\n\n/* S"..., '\n', 124) = 0x00f087e1
[0x4022d1] memchr("}\n#endif /* DEBUG */\n\n/* Stuff p"..., '\n', 118) = 0x00f087e3
[0x4022d1] memchr("#endif /* DEBUG */\n\n/* Stuff per"..., '\n', 116) = 0x00f087f6
[0x4022d1] memchr("\n/* Stuff pertaining to charclas"..., '\n', 97) = 0x00f087f7
[0x4022d1] memchr("/* Stuff pertaining to charclass"..., '\n', 96) = 0x00f0881e
[0x4022d1] memchr("\nstatic int\ntstbit(b, c)\n     in"..., '\n', 57) = 0x00f0881f
[0x4022d1] memchr("static int\ntstbit(b, c)\n     int"..., '\n', 56) = 0x00f0882a
[0x4022d1] memchr("tstbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x00f08837
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x00f08843
[0x4022d1] memchr("     charclass c;\n{\n  return c[b"..., '\n', 20) = 0x00f08855
[0x4022d1] memchr("{\n  return c[b / INTBITS] & 1 <<"..., '\n', 2) = 0x00f08857
[0x4022d1] memchr("  return c[b / INTBITS] & 1 << b"..., '\n', 0) = NULL
[0x4023cc] fwrite("6800:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  return c[b / INTBITS] & 1 << b"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\nsetbit(b, c)\n    "..., '1', 22335) = 0x00f088d4
[0x40cdf3] memchr("1 << b % INTBITS;\n}\n\nstatic void"..., '\n', 22255) = 0x00f088e5
[0x4022d1] memchr("}\n\nstatic void\nsetbit(b, c)\n    "..., '\n', 60) = 0x00f08885
[0x4022d1] memchr("\nstatic void\nsetbit(b, c)\n     i"..., '\n', 58) = 0x00f08886
[0x4022d1] memchr("static void\nsetbit(b, c)\n     in"..., '\n', 57) = 0x00f08892
[0x4022d1] memchr("setbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x00f0889f
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x00f088ab
[0x4022d1] memchr("     charclass c;\n{\n  c[b / INTB"..., '\n', 20) = 0x00f088bd
[0x4022d1] memchr("{\n  c[b / INTBITS] |= 1 << b % I"..., '\n', 2) = 0x00f088bf
[0x4022d1] memchr("  c[b / INTBITS] |= 1 << b % INT"..., '\n', 0) = NULL
[0x4023cc] fwrite("6808:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  c[b / INTBITS] |= 1 << b % INT"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\nclrbit(b, c)\n    "..., '1', 22237) = 0x00f08938
[0x40cdf3] memchr("1 << b % INTBITS);\n}\n\nstatic voi"..., '\n', 22155) = 0x00f0894a
[0x4022d1] memchr("}\n\nstatic void\nclrbit(b, c)\n    "..., '\n', 60) = 0x00f088e7
[0x4022d1] memchr("\nstatic void\nclrbit(b, c)\n     i"..., '\n', 58) = 0x00f088e8
[0x4022d1] memchr("static void\nclrbit(b, c)\n     in"..., '\n', 57) = 0x00f088f4
[0x4022d1] memchr("clrbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x00f08901
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x00f0890d
[0x4022d1] memchr("     charclass c;\n{\n  c[b / INTB"..., '\n', 20) = 0x00f0891f
[0x4022d1] memchr("{\n  c[b / INTBITS] &= ~(1 << b %"..., '\n', 2) = 0x00f08921
[0x4022d1] memchr("  c[b / INTBITS] &= ~(1 << b % I"..., '\n', 0) = NULL
[0x4023cc] fwrite("6816:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  c[b / INTBITS] &= ~(1 << b % I"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\ncopyset(src, dst)"..., '1', 22136) = 0x00f08ace
[0x40cdf3] memchr("1, s2)\n     charclass s1;\n     c"..., '\n', 21749) = 0x00f08ad4
[0x4022d1] memchr("}\n\nstatic void\ncopyset(src, dst)"..., '\n', 380) = 0x00f0894c
[0x4022d1] memchr("\nstatic void\ncopyset(src, dst)\n "..., '\n', 378) = 0x00f0894d
[0x4022d1] memchr("static void\ncopyset(src, dst)\n  "..., '\n', 377) = 0x00f08959
[0x4022d1] memchr("copyset(src, dst)\n     charclass"..., '\n', 365) = 0x00f0896b
[0x4022d1] memchr("     charclass src;\n     charcla"..., '\n', 347) = 0x00f0897f
[0x4022d1] memchr("     charclass dst;\n{\n  int i;\n\n"..., '\n', 327) = 0x00f08993
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 307) = 0x00f08995
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 305) = 0x00f0899e
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 296) = 0x00f0899f
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 295) = 0x00f089c6
[0x4022d1] memchr("    dst[i] = src[i];\n}\n\nstatic v"..., '\n', 256) = 0x00f089db
[0x4022d1] memchr("}\n\nstatic void\nzeroset(s)\n     c"..., '\n', 235) = 0x00f089dd
[0x4022d1] memchr("\nstatic void\nzeroset(s)\n     cha"..., '\n', 233) = 0x00f089de
[0x4022d1] memchr("static void\nzeroset(s)\n     char"..., '\n', 232) = 0x00f089ea
[0x4022d1] memchr("zeroset(s)\n     charclass s;\n{\n "..., '\n', 220) = 0x00f089f5
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 209) = 0x00f08a07
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 191) = 0x00f08a09
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 189) = 0x00f08a12
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 180) = 0x00f08a13
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 179) = 0x00f08a3a
[0x4022d1] memchr("    s[i] = 0;\n}\n\nstatic void\nnot"..., '\n', 140) = 0x00f08a48
[0x4022d1] memchr("}\n\nstatic void\nnotset(s)\n     ch"..., '\n', 126) = 0x00f08a4a
[0x4022d1] memchr("\nstatic void\nnotset(s)\n     char"..., '\n', 124) = 0x00f08a4b
[0x4022d1] memchr("static void\nnotset(s)\n     charc"..., '\n', 123) = 0x00f08a57
[0x4022d1] memchr("notset(s)\n     charclass s;\n{\n  "..., '\n', 111) = 0x00f08a61
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 101) = 0x00f08a73
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 83) = 0x00f08a75
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 81) = 0x00f08a7e
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 72) = 0x00f08a7f
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 71) = 0x00f08aa6
[0x4022d1] memchr("    s[i] = ~s[i];\n}\n\nstatic int\n"..., '\n', 32) = 0x00f08ab8
[0x4022d1] memchr("}\n\nstatic int\nequal(s1, s2)\n    "..., '\n', 14) = 0x00f08aba
[0x4022d1] memchr("\nstatic int\nequal(s1, s2)\n     c"..., '\n', 12) = 0x00f08abb
[0x4022d1] memchr("static int\nequal(s1, s2)\n     ch"..., '\n', 11) = 0x00f08ac6
[0x4022d1] memchr("equal(s1, s2)\n     charclass s1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("6851:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("equal(s1, s2)\n     charclass s1;"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     charclass s1;\n     charclas"..., '1', 21742) = 0x00f08ae5
[0x40cdf3] memchr("1;\n     charclass s2;\n{\n  int i;"..., '\n', 21726) = 0x00f08ae7
[0x4022d1] memchr("     charclass s1;\n     charclas"..., '\n', 0) = NULL
[0x4023cc] fwrite("6852:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     charclass s1;\n     charclas"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     charclass s2;\n{\n  int i;\n\n "..., '1', 21723) = 0x00f08b37
[0x40cdf3] memchr("1[i] != s2[i])\n      return 0;\n "..., '\n', 21644) = 0x00f08b45
[0x4022d1] memchr("     charclass s2;\n{\n  int i;\n\n "..., '\n', 70) = 0x00f08afa
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 51) = 0x00f08afc
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 49) = 0x00f08b05
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 40) = 0x00f08b06
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 39) = 0x00f08b2d
[0x4022d1] memchr("    if (s1[i] != s2[i])\n      re"..., '\n', 0) = NULL
[0x4023cc] fwrite("6858:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    if (s1[i] != s2[i])\n      re"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      return 0;\n  return 1;\n}\n\n/"..., '1', 21629) = 0x00f08b5f
[0x40cdf3] memchr("1;\n}\n\n/* A pointer to the curren"..., '\n', 21604) = 0x00f08b61
[0x4022d1] memchr("      return 0;\n  return 1;\n}\n\n/"..., '\n', 16) = 0x00f08b55
[0x4022d1] memchr("  return 1;\n}\n\n/* A pointer to t"..., '\n', 0) = NULL
[0x4023cc] fwrite("6860:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  return 1;\n}\n\n/* A pointer to t"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n/* A pointer to the current d"..., '1', 21601) = 0x00f08e69
[0x40cdf3] memchr("1;\n  syntax_bits = bits;\n  case_"..., '\n', 20826) = 0x00f08e6b
[0x4022d1] memchr("}\n\n/* A pointer to the current d"..., '\n', 755) = 0x00f08b63
[0x4022d1] memchr("\n/* A pointer to the current dfa"..., '\n', 753) = 0x00f08b64
[0x4022d1] memchr("/* A pointer to the current dfa "..., '\n', 752) = 0x00f08ba4
[0x4022d1] memchr("static struct dfa *dfa;\n\n/* Find"..., '\n', 688) = 0x00f08bbc
[0x4022d1] memchr("\n/* Find the index of charclass "..., '\n', 664) = 0x00f08bbd
[0x4022d1] memchr("/* Find the index of charclass s"..., '\n', 663) = 0x00f08c13
[0x4022d1] memchr("static int\ncharclass_index(s)\n  "..., '\n', 577) = 0x00f08c1e
[0x4022d1] memchr("charclass_index(s)\n     charclas"..., '\n', 566) = 0x00f08c31
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 547) = 0x00f08c43
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < df"..., '\n', 529) = 0x00f08c45
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < dfa-"..., '\n', 527) = 0x00f08c4e
[0x4022d1] memchr("\n  for (i = 0; i < dfa->cindex; "..., '\n', 518) = 0x00f08c4f
[0x4022d1] memchr("  for (i = 0; i < dfa->cindex; +"..., '\n', 517) = 0x00f08c73
[0x4022d1] memchr("    if (equal(s, dfa->charclasse"..., '\n', 481) = 0x00f08c9a
[0x4022d1] memchr("      return i;\n  REALLOC_IF_NEC"..., '\n', 442) = 0x00f08caa
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(dfa->char"..., '\n', 426) = 0x00f08cf9
[0x4022d1] memchr("  ++dfa->cindex;\n  copyset(s, df"..., '\n', 347) = 0x00f08d0a
[0x4022d1] memchr("  copyset(s, dfa->charclasses[i]"..., '\n', 330) = 0x00f08d2d
[0x4022d1] memchr("  return i;\n}\n\n/* Syntax bits co"..., '\n', 295) = 0x00f08d39
[0x4022d1] memchr("}\n\n/* Syntax bits controlling th"..., '\n', 283) = 0x00f08d3b
[0x4022d1] memchr("\n/* Syntax bits controlling the "..., '\n', 281) = 0x00f08d3c
[0x4022d1] memchr("/* Syntax bits controlling the b"..., '\n', 280) = 0x00f08d80
[0x4022d1] memchr("static int syntax_bits, syntax_b"..., '\n', 212) = 0x00f08da9
[0x4022d1] memchr("\n/* Flag for case-folding letter"..., '\n', 171) = 0x00f08daa
[0x4022d1] memchr("/* Flag for case-folding letters"..., '\n', 170) = 0x00f08dd9
[0x4022d1] memchr("static int case_fold;\n\n/* Entry "..., '\n', 123) = 0x00f08def
[0x4022d1] memchr("\n/* Entry point to set syntax op"..., '\n', 101) = 0x00f08df0
[0x4022d1] memchr("/* Entry point to set syntax opt"..., '\n', 100) = 0x00f08e19
[0x4022d1] memchr("void\ndfasyntax(bits, fold)\n     "..., '\n', 59) = 0x00f08e1e
[0x4022d1] memchr("dfasyntax(bits, fold)\n     int b"..., '\n', 54) = 0x00f08e34
[0x4022d1] memchr("     int bits;\n     int fold;\n{\n"..., '\n', 32) = 0x00f08e43
[0x4022d1] memchr("     int fold;\n{\n  syntax_bits_s"..., '\n', 17) = 0x00f08e52
[0x4022d1] memchr("{\n  syntax_bits_set = 1;\n  synta"..., '\n', 2) = 0x00f08e54
[0x4022d1] memchr("  syntax_bits_set = 1;\n  syntax_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6894:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  syntax_bits_set = 1;\n  syntax_"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  syntax_bits = bits;\n  case_fol"..., '1', 20823) = 0x00f096df
[0x40cdf3] memchr("1, c2;\n  int backslash = 0, inve"..., '\n', 18660) = 0x00f096e5
[0x4022d1] memchr("  syntax_bits = bits;\n  case_fol"..., '\n', 2151) = 0x00f08e81
[0x4022d1] memchr("  case_fold = fold;\n}\n\n/* Lexica"..., '\n', 2129) = 0x00f08e95
[0x4022d1] memchr("}\n\n/* Lexical analyzer.  All the"..., '\n', 2109) = 0x00f08e97
[0x4022d1] memchr("\n/* Lexical analyzer.  All the d"..., '\n', 2107) = 0x00f08e98
[0x4022d1] memchr("/* Lexical analyzer.  All the dr"..., '\n', 2106) = 0x00f08eda
[0x4022d1] memchr("   GNU Regex syntax bits is loca"..., '\n', 2040) = 0x00f08f19
[0x4022d1] memchr("   reader is referred to the GNU"..., '\n', 1977) = 0x00f08f56
[0x4022d1] memchr("   meaning of the @#%!@#%^!@ syn"..., '\n', 1916) = 0x00f08f83
[0x4022d1] memchr("\nstatic char *lexstart;\t\t/* Poin"..., '\n', 1871) = 0x00f08f84
[0x4022d1] memchr("static char *lexstart;\t\t/* Point"..., '\n', 1870) = 0x00f08fc8
[0x4022d1] memchr("static char *lexptr;\t\t/* Pointer"..., '\n', 1802) = 0x00f09005
[0x4022d1] memchr("static lexleft;\t\t\t/* Number of c"..., '\n', 1741) = 0x00f0903d
[0x4022d1] memchr("static token lasttok;\t\t/* Previo"..., '\n', 1685) = 0x00f09082
[0x4022d1] memchr("static int laststart;\t\t/* True i"..., '\n', 1616) = 0x00f090cb
[0x4022d1] memchr("\t\t\t\t   only by zero-width charac"..., '\n', 1543) = 0x00f090f4
[0x4022d1] memchr("static int parens;\t\t/* Count of "..., '\n', 1502) = 0x00f09130
[0x4022d1] memchr("static int minrep, maxrep;\t/* Re"..., '\n', 1442) = 0x00f0916a
[0x4022d1] memchr("\n/* Note that characters become "..., '\n', 1384) = 0x00f0916b
[0x4022d1] memchr("/* Note that characters become u"..., '\n', 1383) = 0x00f0919c
[0x4022d1] memchr("#define FETCH(c, eoferr)   \t    "..., '\n', 1334) = 0x00f091c0
[0x4022d1] memchr("  {\t\t\t   \t      \\\n    if (! lexl"..., '\n', 1298) = 0x00f091d2
[0x4022d1] memchr("    if (! lexleft)\t   \t      \\\n "..., '\n', 1280) = 0x00f091f1
[0x4022d1] memchr("      if (eoferr != 0)\t   \t     "..., '\n', 1249) = 0x00f09214
[0x4022d1] memchr("\tdfaerror(eoferr);  \t      \\\n   "..., '\n', 1214) = 0x00f09231
[0x4022d1] memchr("      else\t\t   \t      \\\n\treturn "..., '\n', 1185) = 0x00f09249
[0x4022d1] memchr("\treturn END;\t   \t      \\\n    (c)"..., '\n', 1161) = 0x00f09262
[0x4022d1] memchr("    (c) = (unsigned char) *lexpt"..., '\n', 1136) = 0x00f0928a
[0x4022d1] memchr("    --lexleft;\t\t   \t      \\\n  }\n"..., '\n', 1096) = 0x00f092a6
[0x4022d1] memchr("  }\n\n#define FUNC(F, P) static i"..., '\n', 1068) = 0x00f092aa
[0x4022d1] memchr("\n#define FUNC(F, P) static int F"..., '\n', 1064) = 0x00f092ab
[0x4022d1] memchr("#define FUNC(F, P) static int F("..., '\n', 1063) = 0x00f092e6
[0x4022d1] memchr("\nFUNC(is_alpha, ISALPHA)\nFUNC(is"..., '\n', 1004) = 0x00f092e7
[0x4022d1] memchr("FUNC(is_alpha, ISALPHA)\nFUNC(is_"..., '\n', 1003) = 0x00f092ff
[0x4022d1] memchr("FUNC(is_upper, ISUPPER)\nFUNC(is_"..., '\n', 979) = 0x00f09317
[0x4022d1] memchr("FUNC(is_lower, ISLOWER)\nFUNC(is_"..., '\n', 955) = 0x00f0932f
[0x4022d1] memchr("FUNC(is_digit, ISDIGIT)\nFUNC(is_"..., '\n', 931) = 0x00f09347
[0x4022d1] memchr("FUNC(is_xdigit, ISXDIGIT)\nFUNC(i"..., '\n', 907) = 0x00f09361
[0x4022d1] memchr("FUNC(is_space, ISSPACE)\nFUNC(is_"..., '\n', 881) = 0x00f09379
[0x4022d1] memchr("FUNC(is_punct, ISPUNCT)\nFUNC(is_"..., '\n', 857) = 0x00f09391
[0x4022d1] memchr("FUNC(is_alnum, ISALNUM)\nFUNC(is_"..., '\n', 833) = 0x00f093a9
[0x4022d1] memchr("FUNC(is_print, ISPRINT)\nFUNC(is_"..., '\n', 809) = 0x00f093c1
[0x4022d1] memchr("FUNC(is_graph, ISGRAPH)\nFUNC(is_"..., '\n', 785) = 0x00f093d9
[0x4022d1] memchr("FUNC(is_cntrl, ISCNTRL)\n\n/* The "..., '\n', 761) = 0x00f093f1
[0x4022d1] memchr("\n/* The following list maps the "..., '\n', 737) = 0x00f093f2
[0x4022d1] memchr("/* The following list maps the n"..., '\n', 736) = 0x00f0943c
[0x4022d1] memchr("   to predicate functions that d"..., '\n', 662) = 0x00f09485
[0x4022d1] memchr("   the class.  The leading [ has"..., '\n', 589) = 0x00f094d5
[0x4022d1] memchr("static struct {\n  char *name;\n  "..., '\n', 509) = 0x00f094e5
[0x4022d1] memchr("  char *name;\n  int (*pred)();\n}"..., '\n', 493) = 0x00f094f3
[0x4022d1] memchr("  int (*pred)();\n} prednames[] ="..., '\n', 479) = 0x00f09504
[0x4022d1] memchr("} prednames[] = {\n  ":alpha:]", "..., '\n', 462) = 0x00f09516
[0x4022d1] memchr("  ":alpha:]", is_alpha,\n  ":uppe"..., '\n', 444) = 0x00f0952e
[0x4022d1] memchr("  ":upper:]", is_upper,\n  ":lowe"..., '\n', 420) = 0x00f09546
[0x4022d1] memchr("  ":lower:]", is_lower,\n  ":digi"..., '\n', 396) = 0x00f0955e
[0x4022d1] memchr("  ":digit:]", is_digit,\n  ":xdig"..., '\n', 372) = 0x00f09576
[0x4022d1] memchr("  ":xdigit:]", is_xdigit,\n  ":sp"..., '\n', 348) = 0x00f09590
[0x4022d1] memchr("  ":space:]", is_space,\n  ":punc"..., '\n', 322) = 0x00f095a8
[0x4022d1] memchr("  ":punct:]", is_punct,\n  ":alnu"..., '\n', 298) = 0x00f095c0
[0x4022d1] memchr("  ":alnum:]", is_alnum,\n  ":prin"..., '\n', 274) = 0x00f095d8
[0x4022d1] memchr("  ":print:]", is_print,\n  ":grap"..., '\n', 250) = 0x00f095f0
[0x4022d1] memchr("  ":graph:]", is_graph,\n  ":cntr"..., '\n', 226) = 0x00f09608
[0x4022d1] memchr("  ":cntrl:]", is_cntrl,\n  0\n};\n\n"..., '\n', 202) = 0x00f09620
[0x4022d1] memchr("  0\n};\n\nstatic int\nlooking_at(s)"..., '\n', 178) = 0x00f09624
[0x4022d1] memchr("};\n\nstatic int\nlooking_at(s)\n   "..., '\n', 174) = 0x00f09627
[0x4022d1] memchr("\nstatic int\nlooking_at(s)\n     c"..., '\n', 171) = 0x00f09628
[0x4022d1] memchr("static int\nlooking_at(s)\n     ch"..., '\n', 170) = 0x00f09633
[0x4022d1] memchr("looking_at(s)\n     char *s;\n{\n  "..., '\n', 159) = 0x00f09641
[0x4022d1] memchr("     char *s;\n{\n  int len;\n\n  le"..., '\n', 145) = 0x00f0964f
[0x4022d1] memchr("{\n  int len;\n\n  len = strlen(s);"..., '\n', 131) = 0x00f09651
[0x4022d1] memchr("  int len;\n\n  len = strlen(s);\n "..., '\n', 129) = 0x00f0965c
[0x4022d1] memchr("\n  len = strlen(s);\n  if (lexlef"..., '\n', 118) = 0x00f0965d
[0x4022d1] memchr("  len = strlen(s);\n  if (lexleft"..., '\n', 117) = 0x00f09670
[0x4022d1] memchr("  if (lexleft < len)\n    return "..., '\n', 98) = 0x00f09685
[0x4022d1] memchr("    return 0;\n  return strncmp(s"..., '\n', 77) = 0x00f09693
[0x4022d1] memchr("  return strncmp(s, lexptr, len)"..., '\n', 63) = 0x00f096ba
[0x4022d1] memchr("}\n\nstatic token\nlex()\n{\n  token "..., '\n', 24) = 0x00f096bc
[0x4022d1] memchr("\nstatic token\nlex()\n{\n  token c,"..., '\n', 22) = 0x00f096bd
[0x4022d1] memchr("static token\nlex()\n{\n  token c, "..., '\n', 21) = 0x00f096ca
[0x4022d1] memchr("lex()\n{\n  token c, c1, c2;\n  int"..., '\n', 8) = 0x00f096d0
[0x4022d1] memchr("{\n  token c, c1, c2;\n  int backs"..., '\n', 2) = 0x00f096d2
[0x4022d1] memchr("  token c, c1, c2;\n  int backsla"..., '\n', 0) = NULL
[0x4023cc] fwrite("6975:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  token c, c1, c2;\n  int backsla"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  int backslash = 0, invert;\n  c"..., '1', 18653) = 0x00f09931
[0x40cdf3] memchr("1;\n\t  break;\n\n\tcase '^':\n\t  if ("..., '\n', 18066) = 0x00f09933
[0x4022d1] memchr("  int backslash = 0, invert;\n  c"..., '\n', 572) = 0x00f09702
[0x4022d1] memchr("  charclass ccl;\n  int i;\n\n  /* "..., '\n', 543) = 0x00f09713
[0x4022d1] memchr("  int i;\n\n  /* Basic plan: We fe"..., '\n', 526) = 0x00f0971c
[0x4022d1] memchr("\n  /* Basic plan: We fetch a cha"..., '\n', 517) = 0x00f0971d
[0x4022d1] memchr("  /* Basic plan: We fetch a char"..., '\n', 516) = 0x00f0975a
[0x4022d1] memchr("     we set the backslash flag a"..., '\n', 455) = 0x00f09798
[0x4022d1] memchr("     On the plus side, this avoi"..., '\n', 393) = 0x00f097d5
[0x4022d1] memchr("     main switch inside the back"..., '\n', 332) = 0x00f09815
[0x4022d1] memchr("     it means that just about ev"..., '\n', 268) = 0x00f0984a
[0x4022d1] memchr("     "if (backslash) ...".  */\n "..., '\n', 215) = 0x00f09869
[0x4022d1] memchr("  for (i = 0; i < 2; ++i)\n    {\n"..., '\n', 184) = 0x00f09883
[0x4022d1] memchr("    {\n      FETCH(c, 0);\n      s"..., '\n', 158) = 0x00f09889
[0x4022d1] memchr("      FETCH(c, 0);\n      switch "..., '\n', 152) = 0x00f0989c
[0x4022d1] memchr("      switch (c)\n\t{\n\tcase '\\\\':\n"..., '\n', 133) = 0x00f098ad
[0x4022d1] memchr("\t{\n\tcase '\\\\':\n\t  if (backslash)"..., '\n', 116) = 0x00f098b0
[0x4022d1] memchr("\tcase '\\\\':\n\t  if (backslash)\n\t "..., '\n', 113) = 0x00f098bc
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 101) = 0x00f098ce
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (le"..., '\n', 83) = 0x00f098e5
[0x4022d1] memchr("\t  if (lexleft == 0)\n\t    dfaerr"..., '\n', 60) = 0x00f098fa
[0x4022d1] memchr("\t    dfaerror("Unfinished \\\\ esc"..., '\n', 39) = 0x00f09921
[0x4022d1] memchr("\t  backslash = 1;\n\t  break;\n\n\tca"..., '\n', 0) = NULL
[0x4023cc] fwrite("6996:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  backslash = 1;\n\t  break;\n\n\tca"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\tcase '^':\n\t  if (bac"..., '1', 18063) = 0x00f09afa
[0x40cdf3] memchr("1 && lexptr[0] == '\\\\' && lexptr"..., '\n', 17609) = 0x00f09b25
[0x4022d1] memchr("\t  break;\n\n\tcase '^':\n\t  if (bac"..., '\n', 438) = 0x00f0993d
[0x4022d1] memchr("\n\tcase '^':\n\t  if (backslash)\n\t "..., '\n', 428) = 0x00f0993e
[0x4022d1] memchr("\tcase '^':\n\t  if (backslash)\n\t  "..., '\n', 427) = 0x00f09949
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 416) = 0x00f0995b
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (sy"..., '\n', 398) = 0x00f09972
[0x4022d1] memchr("\t  if (syntax_bits & RE_CONTEXT_"..., '\n', 375) = 0x00f099a0
[0x4022d1] memchr("\t      || lasttok == END\n\t      "..., '\n', 329) = 0x00f099b9
[0x4022d1] memchr("\t      || lasttok == LPAREN\n\t   "..., '\n', 304) = 0x00f099d5
[0x4022d1] memchr("\t      || lasttok == OR)\n\t    re"..., '\n', 276) = 0x00f099ee
[0x4022d1] memchr("\t    return lasttok = BEGLINE;\n\t"..., '\n', 251) = 0x00f09a0d
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '$':"..., '\n', 220) = 0x00f09a22
[0x4022d1] memchr("\n\tcase '$':\n\t  if (backslash)\n\t "..., '\n', 199) = 0x00f09a23
[0x4022d1] memchr("\tcase '$':\n\t  if (backslash)\n\t  "..., '\n', 198) = 0x00f09a2e
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 187) = 0x00f09a40
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (sy"..., '\n', 169) = 0x00f09a57
[0x4022d1] memchr("\t  if (syntax_bits & RE_CONTEXT_"..., '\n', 146) = 0x00f09a85
[0x4022d1] memchr("\t      || lexleft == 0\n\t      ||"..., '\n', 100) = 0x00f09a9c
[0x4022d1] memchr("\t      || (syntax_bits & RE_NO_B"..., '\n', 77) = 0x00f09ac5
[0x4022d1] memchr("\t\t  ? lexleft > 0 && *lexptr == "..., '\n', 36) = 0x00f09ae9
[0x4022d1] memchr("\t\t  : lexleft > 1 && lexptr[0] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("7016:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  : lexleft > 1 && lexptr[0] ="..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      || (syntax_bits & RE_NO_B"..., '1', 17565) = 0x00f09b81
[0x40cdf3] memchr("1 && lexptr[0] == '\\\\' && lexptr"..., '\n', 17474) = 0x00f09bac
[0x4022d1] memchr("\t      || (syntax_bits & RE_NO_B"..., '\n', 75) = 0x00f09b4c
[0x4022d1] memchr("\t\t  ? lexleft > 0 && *lexptr == "..., '\n', 36) = 0x00f09b70
[0x4022d1] memchr("\t\t  : lexleft > 1 && lexptr[0] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("7019:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  : lexleft > 1 && lexptr[0] ="..., 1, 60, 0x7fce6d444260) = 60
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      || ((syntax_bits & RE_NEW"..., '1', 17430) = 0x00f09c42
[0x40cdf3] memchr("1':\n\tcase '2':\n\tcase '3':\n\tcase "..., '\n', 17281) = 0x00f09c45
[0x4022d1] memchr("\t      || ((syntax_bits & RE_NEW"..., '\n', 142) = 0x00f09bd6
[0x4022d1] memchr("\t          && lexleft > 0 && *le"..., '\n', 100) = 0x00f09c05
[0x4022d1] memchr("\t    return lasttok = ENDLINE;\n\t"..., '\n', 53) = 0x00f09c24
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '1':"..., '\n', 22) = 0x00f09c39
[0x4022d1] memchr("\n\tcase '1':\n\tcase '2':\n\tcase '3'"..., '\n', 1) = 0x00f09c3a
[0x4022d1] memchr("\tcase '1':\n\tcase '2':\n\tcase '3':"..., '\n', 0) = NULL
[0x4023cc] fwrite("7025:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tcase '1':\n\tcase '2':\n\tcase '3':"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '1', 17277) = 0x00f0a329
[0x40cdf3] memchr("10 * minrep + c - '0';\n\t\t}\n\t    "..., '\n', 15514) = 0x00f0a33f
[0x4022d1] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '\n', 1750) = 0x00f09c50
[0x4022d1] memchr("\tcase '3':\n\tcase '4':\n\tcase '5':"..., '\n', 1739) = 0x00f09c5b
[0x4022d1] memchr("\tcase '4':\n\tcase '5':\n\tcase '6':"..., '\n', 1728) = 0x00f09c66
[0x4022d1] memchr("\tcase '5':\n\tcase '6':\n\tcase '7':"..., '\n', 1717) = 0x00f09c71
[0x4022d1] memchr("\tcase '6':\n\tcase '7':\n\tcase '8':"..., '\n', 1706) = 0x00f09c7c
[0x4022d1] memchr("\tcase '7':\n\tcase '8':\n\tcase '9':"..., '\n', 1695) = 0x00f09c87
[0x4022d1] memchr("\tcase '8':\n\tcase '9':\n\t  if (bac"..., '\n', 1684) = 0x00f09c92
[0x4022d1] memchr("\tcase '9':\n\t  if (backslash && !"..., '\n', 1673) = 0x00f09c9d
[0x4022d1] memchr("\t  if (backslash && !(syntax_bit"..., '\n', 1662) = 0x00f09cd1
[0x4022d1] memchr("\t    {\n\t      laststart = 0;\n\t  "..., '\n', 1610) = 0x00f09cd8
[0x4022d1] memchr("\t      laststart = 0;\n\t      ret"..., '\n', 1603) = 0x00f09cee
[0x4022d1] memchr("\t      return lasttok = BACKREF;"..., '\n', 1581) = 0x00f09d0f
[0x4022d1] memchr("\t    }\n\t  goto normal_char;\n\n\tca"..., '\n', 1548) = 0x00f09d16
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '<':"..., '\n', 1541) = 0x00f09d2b
[0x4022d1] memchr("\n\tcase '<':\n\t  if (backslash)\n\t "..., '\n', 1520) = 0x00f09d2c
[0x4022d1] memchr("\tcase '<':\n\t  if (backslash)\n\t  "..., '\n', 1519) = 0x00f09d37
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 1508) = 0x00f09d49
[0x4022d1] memchr("\t    return lasttok = BEGWORD;\n\t"..., '\n', 1490) = 0x00f09d68
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '>':"..., '\n', 1459) = 0x00f09d7d
[0x4022d1] memchr("\n\tcase '>':\n\t  if (backslash)\n\t "..., '\n', 1438) = 0x00f09d7e
[0x4022d1] memchr("\tcase '>':\n\t  if (backslash)\n\t  "..., '\n', 1437) = 0x00f09d89
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 1426) = 0x00f09d9b
[0x4022d1] memchr("\t    return lasttok = ENDWORD;\n\t"..., '\n', 1408) = 0x00f09dba
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase 'b':"..., '\n', 1377) = 0x00f09dcf
[0x4022d1] memchr("\n\tcase 'b':\n\t  if (backslash)\n\t "..., '\n', 1356) = 0x00f09dd0
[0x4022d1] memchr("\tcase 'b':\n\t  if (backslash)\n\t  "..., '\n', 1355) = 0x00f09ddb
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 1344) = 0x00f09ded
[0x4022d1] memchr("\t    return lasttok = LIMWORD;\n\t"..., '\n', 1326) = 0x00f09e0c
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase 'B':"..., '\n', 1295) = 0x00f09e21
[0x4022d1] memchr("\n\tcase 'B':\n\t  if (backslash)\n\t "..., '\n', 1274) = 0x00f09e22
[0x4022d1] memchr("\tcase 'B':\n\t  if (backslash)\n\t  "..., '\n', 1273) = 0x00f09e2d
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 1262) = 0x00f09e3f
[0x4022d1] memchr("\t    return lasttok = NOTLIMWORD"..., '\n', 1244) = 0x00f09e61
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '?':"..., '\n', 1210) = 0x00f09e76
[0x4022d1] memchr("\n\tcase '?':\n\t  if (syntax_bits &"..., '\n', 1189) = 0x00f09e77
[0x4022d1] memchr("\tcase '?':\n\t  if (syntax_bits & "..., '\n', 1188) = 0x00f09e82
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 1177) = 0x00f09ea7
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 1140) = 0x00f09ebe
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 1117) = 0x00f09ef8
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 1059) = 0x00f09f0f
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 1036) = 0x00f09f4a
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 977) = 0x00f09f61
[0x4022d1] memchr("\t  return lasttok = QMARK;\n\n\tcas"..., '\n', 954) = 0x00f09f7c
[0x4022d1] memchr("\n\tcase '*':\n\t  if (backslash)\n\t "..., '\n', 927) = 0x00f09f7d
[0x4022d1] memchr("\tcase '*':\n\t  if (backslash)\n\t  "..., '\n', 926) = 0x00f09f88
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 915) = 0x00f09f9a
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 897) = 0x00f09fb1
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 874) = 0x00f09fec
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 815) = 0x00f0a003
[0x4022d1] memchr("\t  return lasttok = STAR;\n\n\tcase"..., '\n', 792) = 0x00f0a01d
[0x4022d1] memchr("\n\tcase '+':\n\t  if (syntax_bits &"..., '\n', 766) = 0x00f0a01e
[0x4022d1] memchr("\tcase '+':\n\t  if (syntax_bits & "..., '\n', 765) = 0x00f0a029
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 754) = 0x00f0a04e
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 717) = 0x00f0a065
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 694) = 0x00f0a09f
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 636) = 0x00f0a0b6
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 613) = 0x00f0a0f1
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 554) = 0x00f0a108
[0x4022d1] memchr("\t  return lasttok = PLUS;\n\n\tcase"..., '\n', 531) = 0x00f0a122
[0x4022d1] memchr("\n\tcase '{':\n\t  if (!(syntax_bits"..., '\n', 505) = 0x00f0a123
[0x4022d1] memchr("\tcase '{':\n\t  if (!(syntax_bits "..., '\n', 504) = 0x00f0a12e
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_INTERV"..., '\n', 493) = 0x00f0a154
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 455) = 0x00f0a16b
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 432) = 0x00f0a1a7
[0x4022d1] memchr("\t    goto normal_char;\n\t  minrep"..., '\n', 372) = 0x00f0a1be
[0x4022d1] memchr("\t  minrep = maxrep = 0;\n\t  /* Ca"..., '\n', 349) = 0x00f0a1d6
[0x4022d1] memchr("\t  /* Cases:\n\t     {M} - exact c"..., '\n', 325) = 0x00f0a1e3
[0x4022d1] memchr("\t     {M} - exact count\n\t     {M"..., '\n', 312) = 0x00f0a1fb
[0x4022d1] memchr("\t     {M,} - minimum count, maxi"..., '\n', 288) = 0x00f0a22b
[0x4022d1] memchr("\t     {,M} - 0 through M\n\t     {"..., '\n', 240) = 0x00f0a244
[0x4022d1] memchr("\t     {M,N} - M through N */\n\t  "..., '\n', 215) = 0x00f0a261
[0x4022d1] memchr("\t  FETCH(c, "unfinished repeat c"..., '\n', 186) = 0x00f0a289
[0x4022d1] memchr("\t  if (ISDIGIT(c))\n\t    {\n\t     "..., '\n', 146) = 0x00f0a29c
[0x4022d1] memchr("\t    {\n\t      minrep = c - '0';\n"..., '\n', 127) = 0x00f0a2a3
[0x4022d1] memchr("\t      minrep = c - '0';\n\t      "..., '\n', 120) = 0x00f0a2bc
[0x4022d1] memchr("\t      for (;;)\n\t\t{\n\t\t  FETCH(c,"..., '\n', 95) = 0x00f0a2cc
[0x4022d1] memchr("\t\t{\n\t\t  FETCH(c, "unfinished rep"..., '\n', 79) = 0x00f0a2d0
[0x4022d1] memchr("\t\t  FETCH(c, "unfinished repeat "..., '\n', 75) = 0x00f0a2f9
[0x4022d1] memchr("\t\t  if (!ISDIGIT(c))\n\t\t    break"..., '\n', 34) = 0x00f0a30e
[0x4022d1] memchr("\t\t    break;\n\t\t  minrep = 10 * m"..., '\n', 13) = 0x00f0a31b
[0x4022d1] memchr("\t\t  minrep = 10 * minrep + c - '"..., '\n', 0) = NULL
[0x4023cc] fwrite("7106:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  minrep = 10 * minrep + c - '"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t}\n\t    }\n\t  else if (c != ',')"..., '1', 15491) = 0x00f0a402
[0x40cdf3] memchr("10 * maxrep + c - '0';\n\t      }\n"..., '\n', 15297) = 0x00f0a418
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else if (c != ',')"..., '\n', 183) = 0x00f0a343
[0x4022d1] memchr("\t    }\n\t  else if (c != ',')\n\t  "..., '\n', 179) = 0x00f0a34a
[0x4022d1] memchr("\t  else if (c != ',')\n\t    dfaer"..., '\n', 172) = 0x00f0a360
[0x4022d1] memchr("\t    dfaerror("malformed repeat "..., '\n', 150) = 0x00f0a389
[0x4022d1] memchr("\t  if (c == ',')\n\t    for (;;)\n\t"..., '\n', 109) = 0x00f0a39a
[0x4022d1] memchr("\t    for (;;)\n\t      {\n\t\tFETCH(c"..., '\n', 92) = 0x00f0a3a8
[0x4022d1] memchr("\t      {\n\t\tFETCH(c, "unfinished "..., '\n', 78) = 0x00f0a3b1
[0x4022d1] memchr("\t\tFETCH(c, "unfinished repeat co"..., '\n', 69) = 0x00f0a3d8
[0x4022d1] memchr("\t\tif (!ISDIGIT(c))\n\t\t  break;\n\t\t"..., '\n', 30) = 0x00f0a3eb
[0x4022d1] memchr("\t\t  break;\n\t\tmaxrep = 10 * maxre"..., '\n', 11) = 0x00f0a3f6
[0x4022d1] memchr("\t\tmaxrep = 10 * maxrep + c - '0'"..., '\n', 0) = NULL
[0x4023cc] fwrite("7117:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\tmaxrep = 10 * maxrep + c - '0'"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      }\n\t  else\n\t    maxrep = m"..., '1', 15274) = 0x00f0a5ee
[0x40cdf3] memchr("1;\n\t  return lasttok = OR;\n\n\tcas"..., '\n', 14805) = 0x00f0a5f0
[0x4022d1] memchr("\t      }\n\t  else\n\t    maxrep = m"..., '\n', 454) = 0x00f0a421
[0x4022d1] memchr("\t  else\n\t    maxrep = minrep;\n\t "..., '\n', 445) = 0x00f0a429
[0x4022d1] memchr("\t    maxrep = minrep;\n\t  if (!(s"..., '\n', 437) = 0x00f0a43f
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_NO_BK_"..., '\n', 415) = 0x00f0a468
[0x4022d1] memchr("\t    {\n\t      if (c != '\\\\')\n\t\td"..., '\n', 374) = 0x00f0a46f
[0x4022d1] memchr("\t      if (c != '\\\\')\n\t\tdfaerror"..., '\n', 367) = 0x00f0a485
[0x4022d1] memchr("\t\tdfaerror("malformed repeat cou"..., '\n', 345) = 0x00f0a4ab
[0x4022d1] memchr("\t      FETCH(c, "unfinished repe"..., '\n', 307) = 0x00f0a4d7
[0x4022d1] memchr("\t    }\n\t  if (c != '}')\n\t    dfa"..., '\n', 263) = 0x00f0a4de
[0x4022d1] memchr("\t  if (c != '}')\n\t    dfaerror(""..., '\n', 256) = 0x00f0a4ef
[0x4022d1] memchr("\t    dfaerror("malformed repeat "..., '\n', 239) = 0x00f0a518
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 198) = 0x00f0a52a
[0x4022d1] memchr("\t  return lasttok = REPMN;\n\n\tcas"..., '\n', 180) = 0x00f0a545
[0x4022d1] memchr("\n\tcase '|':\n\t  if (syntax_bits &"..., '\n', 153) = 0x00f0a546
[0x4022d1] memchr("\tcase '|':\n\t  if (syntax_bits & "..., '\n', 152) = 0x00f0a551
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 141) = 0x00f0a576
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 104) = 0x00f0a58d
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 81) = 0x00f0a5c7
[0x4022d1] memchr("\t    goto normal_char;\n\t  lastst"..., '\n', 23) = 0x00f0a5de
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 0) = NULL
[0x4023cc] fwrite("7137:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  laststart = 1;\n\t  return last"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '1', 14802) = 0x00f0a69f
[0x40cdf3] memchr("1;\n\t  return lasttok = OR;\n\n\tcas"..., '\n', 14628) = 0x00f0a6a1
[0x4022d1] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '\n', 159) = 0x00f0a608
[0x4022d1] memchr("\n\tcase '\\n':\n\t  if (syntax_bits "..., '\n', 135) = 0x00f0a609
[0x4022d1] memchr("\tcase '\\n':\n\t  if (syntax_bits &"..., '\n', 134) = 0x00f0a615
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 122) = 0x00f0a639
[0x4022d1] memchr("\t      || backslash\n\t      || !("..., '\n', 86) = 0x00f0a64d
[0x4022d1] memchr("\t      || !(syntax_bits & RE_NEW"..., '\n', 66) = 0x00f0a678
[0x4022d1] memchr("\t    goto normal_char;\n\t  lastst"..., '\n', 23) = 0x00f0a68f
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 0) = NULL
[0x4023cc] fwrite("7145:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  laststart = 1;\n\t  return last"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '1', 14625) = 0x00f0a735
[0x40cdf3] memchr("1;\n\t  return lasttok = LPAREN;\n\n"..., '\n', 14478) = 0x00f0a737
[0x4022d1] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '\n', 132) = 0x00f0a6b9
[0x4022d1] memchr("\n\tcase '(':\n\t  if (backslash != "..., '\n', 108) = 0x00f0a6ba
[0x4022d1] memchr("\tcase '(':\n\t  if (backslash != ("..., '\n', 107) = 0x00f0a6c5
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 96) = 0x00f0a701
[0x4022d1] memchr("\t    goto normal_char;\n\t  ++pare"..., '\n', 36) = 0x00f0a718
[0x4022d1] memchr("\t  ++parens;\n\t  laststart = 1;\n\t"..., '\n', 13) = 0x00f0a725
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 0) = NULL
[0x4023cc] fwrite("7152:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  laststart = 1;\n\t  return last"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  return lasttok = LPAREN;\n\n\tca"..., '1', 14475) = 0x00f0ab15
[0x40cdf3] memchr("1;\n\t    }\n\t  else\n\t    invert = "..., '\n', 13486) = 0x00f0ab17
[0x4022d1] memchr("\t  return lasttok = LPAREN;\n\n\tca"..., '\n', 973) = 0x00f0a753
[0x4022d1] memchr("\n\tcase ')':\n\t  if (backslash != "..., '\n', 945) = 0x00f0a754
[0x4022d1] memchr("\tcase ')':\n\t  if (backslash != ("..., '\n', 944) = 0x00f0a75f
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 933) = 0x00f0a79b
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (pa"..., '\n', 873) = 0x00f0a7b2
[0x4022d1] memchr("\t  if (parens == 0 && syntax_bit"..., '\n', 850) = 0x00f0a7f4
[0x4022d1] memchr("\t    goto normal_char;\n\t  --pare"..., '\n', 784) = 0x00f0a80b
[0x4022d1] memchr("\t  --parens;\n\t  laststart = 0;\n\t"..., '\n', 761) = 0x00f0a818
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 748) = 0x00f0a82a
[0x4022d1] memchr("\t  return lasttok = RPAREN;\n\n\tca"..., '\n', 730) = 0x00f0a846
[0x4022d1] memchr("\n\tcase '.':\n\t  if (backslash)\n\t "..., '\n', 702) = 0x00f0a847
[0x4022d1] memchr("\tcase '.':\n\t  if (backslash)\n\t  "..., '\n', 701) = 0x00f0a852
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 690) = 0x00f0a864
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 672) = 0x00f0a87b
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  notset(ccl);"..., '\n', 649) = 0x00f0a88c
[0x4022d1] memchr("\t  notset(ccl);\n\t  if (!(syntax_"..., '\n', 632) = 0x00f0a89c
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_DOT_NE"..., '\n', 616) = 0x00f0a8c4
[0x4022d1] memchr("\t    clrbit('\\n', ccl);\n\t  if (s"..., '\n', 576) = 0x00f0a8dc
[0x4022d1] memchr("\t  if (syntax_bits & RE_DOT_NOT_"..., '\n', 552) = 0x00f0a902
[0x4022d1] memchr("\t    clrbit('\\0', ccl);\n\t  lasts"..., '\n', 514) = 0x00f0a91a
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 490) = 0x00f0a92c
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 472) = 0x00f0a95d
[0x4022d1] memchr("\n\tcase 'w':\n\tcase 'W':\n\t  if (!b"..., '\n', 423) = 0x00f0a95e
[0x4022d1] memchr("\tcase 'w':\n\tcase 'W':\n\t  if (!ba"..., '\n', 422) = 0x00f0a969
[0x4022d1] memchr("\tcase 'W':\n\t  if (!backslash)\n\t "..., '\n', 411) = 0x00f0a974
[0x4022d1] memchr("\t  if (!backslash)\n\t    goto nor"..., '\n', 400) = 0x00f0a987
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 381) = 0x00f0a99e
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  for (c2 = 0;"..., '\n', 358) = 0x00f0a9af
[0x4022d1] memchr("\t  for (c2 = 0; c2 < NOTCHAR; ++"..., '\n', 341) = 0x00f0a9d3
[0x4022d1] memchr("\t    if (ISALNUM(c2))\n\t      set"..., '\n', 305) = 0x00f0a9e9
[0x4022d1] memchr("\t      setbit(c2, ccl);\n\t  if (c"..., '\n', 283) = 0x00f0aa01
[0x4022d1] memchr("\t  if (c == 'W')\n\t    notset(ccl"..., '\n', 259) = 0x00f0aa12
[0x4022d1] memchr("\t    notset(ccl);\n\t  laststart ="..., '\n', 242) = 0x00f0aa24
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 224) = 0x00f0aa36
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 206) = 0x00f0aa67
[0x4022d1] memchr("\t\n\tcase '[':\n\t  if (backslash)\n\t"..., '\n', 157) = 0x00f0aa69
[0x4022d1] memchr("\tcase '[':\n\t  if (backslash)\n\t  "..., '\n', 155) = 0x00f0aa74
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 144) = 0x00f0aa86
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 126) = 0x00f0aa9d
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  FETCH(c, "Un"..., '\n', 103) = 0x00f0aaae
[0x4022d1] memchr("\t  FETCH(c, "Unbalanced [");\n\t  "..., '\n', 86) = 0x00f0aacb
[0x4022d1] memchr("\t  if (c == '^')\n\t    {\n\t      F"..., '\n', 57) = 0x00f0aadc
[0x4022d1] memchr("\t    {\n\t      FETCH(c, "Unbalanc"..., '\n', 40) = 0x00f0aae3
[0x4022d1] memchr("\t      FETCH(c, "Unbalanced [");"..., '\n', 33) = 0x00f0ab04
[0x4022d1] memchr("\t      invert = 1;\n\t    }\n\t  els"..., '\n', 0) = NULL
[0x4023cc] fwrite("7197:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      invert = 1;\n\t    }\n\t  els"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    }\n\t  else\n\t    invert = 0;\n"..., '1', 13483) = 0x00f0ac9c
[0x40cdf3] memchr("1 = 0; prednames[c1].name; ++c1)"..., '\n', 13095) = 0x00f0acbc
[0x4022d1] memchr("\t    }\n\t  else\n\t    invert = 0;\n"..., '\n', 380) = 0x00f0ab1e
[0x4022d1] memchr("\t  else\n\t    invert = 0;\n\t  do\n\t"..., '\n', 373) = 0x00f0ab26
[0x4022d1] memchr("\t    invert = 0;\n\t  do\n\t    {\n\t "..., '\n', 365) = 0x00f0ab37
[0x4022d1] memchr("\t  do\n\t    {\n\t      /* Nobody ev"..., '\n', 348) = 0x00f0ab3d
[0x4022d1] memchr("\t    {\n\t      /* Nobody ever sai"..., '\n', 342) = 0x00f0ab44
[0x4022d1] memchr("\t      /* Nobody ever said this "..., '\n', 335) = 0x00f0ab78
[0x4022d1] memchr("\t\t Note that if we're looking at"..., '\n', 283) = 0x00f0abac
[0x4022d1] memchr("\t\t construct, we just treat it a"..., '\n', 231) = 0x00f0abe2
[0x4022d1] memchr("\t\t characters.  We can do this b"..., '\n', 177) = 0x00f0ac13
[0x4022d1] memchr("\t\t regex has checked for syntax "..., '\n', 128) = 0x00f0ac41
[0x4022d1] memchr("\t\t dfa is ever called. */\n\t     "..., '\n', 82) = 0x00f0ac5b
[0x4022d1] memchr("\t      if (c == '[' && (syntax_b"..., '\n', 56) = 0x00f0ac93
[0x4022d1] memchr("\t\tfor (c1 = 0; prednames[c1].nam"..., '\n', 0) = NULL
[0x4023cc] fwrite("7210:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\tfor (c1 = 0; prednames[c1].nam"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  if (looking_at(prednames[c1]"..., '1', 13062) = 0x00f0acdb
[0x40cdf3] memchr("1].name))\n\t\t    {\n\t\t      for (c"..., '\n', 13032) = 0x00f0ace4
[0x4022d1] memchr("\t\t  if (looking_at(prednames[c1]"..., '\n', 0) = NULL
[0x4023cc] fwrite("7211:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  if (looking_at(prednames[c1]"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t      for (c2 = 0; c2 "..., '1', 13022) = 0x00f0ad2a
[0x40cdf3] memchr("1].pred)(c2))\n\t\t\t  setbit(c2, cc"..., '\n', 12953) = 0x00f0ad37
[0x4022d1] memchr("\t\t    {\n\t\t      for (c2 = 0; c2 "..., '\n', 49) = 0x00f0acec
[0x4022d1] memchr("\t\t      for (c2 = 0; c2 < NOTCHA"..., '\n', 41) = 0x00f0ad15
[0x4022d1] memchr("\t\t\tif ((*prednames[c1].pred)(c2)"..., '\n', 0) = NULL
[0x4023cc] fwrite("7214:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\tif ((*prednames[c1].pred)(c2)"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t\t  setbit(c2, ccl);\n\t\t      le"..., '1', 12939) = 0x00f0ad72
[0x40cdf3] memchr("1].name);\n\t\t      lexleft -= str"..., '\n', 12881) = 0x00f0ad7b
[0x4022d1] memchr("\t\t\t  setbit(c2, ccl);\n\t\t      le"..., '\n', 22) = 0x00f0ad4d
[0x4022d1] memchr("\t\t      lexptr += strlen(prednam"..., '\n', 0) = NULL
[0x4023cc] fwrite("7216:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      lexptr += strlen(prednam"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      lexleft -= strlen(predna"..., '1', 12871) = 0x00f0ada1
[0x40cdf3] memchr("1].name);\n\t\t      FETCH(c1, "Unb"..., '\n', 12834) = 0x00f0adaa
[0x4022d1] memchr("\t\t      lexleft -= strlen(predna"..., '\n', 0) = NULL
[0x4023cc] fwrite("7217:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      lexleft -= strlen(predna"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      FETCH(c1, "Unbalanced [""..., '1', 12824) = 0x00f0adba
[0x40cdf3] memchr("1, "Unbalanced [");\n\t\t      goto"..., '\n', 12809) = 0x00f0adcd
[0x4022d1] memchr("\t\t      FETCH(c1, "Unbalanced [""..., '\n', 0) = NULL
[0x4023cc] fwrite("7218:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      FETCH(c1, "Unbalanced [""..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      goto skip;\n\t\t    }\n\t    "..., '1', 12789) = 0x00f0ae59
[0x40cdf3] memchr("1, "Unbalanced [");\n\t      if (c"..., '\n', 12650) = 0x00f0ae6c
[0x4022d1] memchr("\t\t      goto skip;\n\t\t    }\n\t    "..., '\n', 125) = 0x00f0ade0
[0x4022d1] memchr("\t\t    }\n\t      if (c == '\\\\' && "..., '\n', 106) = 0x00f0ade8
[0x4022d1] memchr("\t      if (c == '\\\\' && (syntax_"..., '\n', 98) = 0x00f0ae2e
[0x4022d1] memchr("\t\tFETCH(c, "Unbalanced [");\n\t   "..., '\n', 28) = 0x00f0ae4a
[0x4022d1] memchr("\t      FETCH(c1, "Unbalanced [")"..., '\n', 0) = NULL
[0x4023cc] fwrite("7223:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      FETCH(c1, "Unbalanced [")"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      if (c1 == '-')\n\t\t{\n\t\t  FE"..., '1', 12630) = 0x00f0ae79
[0x40cdf3] memchr("1 == '-')\n\t\t{\n\t\t  FETCH(c2, "Unb"..., '\n', 12618) = 0x00f0ae82
[0x4022d1] memchr("\t      if (c1 == '-')\n\t\t{\n\t\t  FE"..., '\n', 0) = NULL
[0x4023cc] fwrite("7224:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      if (c1 == '-')\n\t\t{\n\t\t  FE"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t{\n\t\t  FETCH(c2, "Unbalanced [""..., '1', 12608) = 0x00f0af11
[0x40cdf3] memchr("1, the lookahead character. */\n\t"..., '\n', 12466) = 0x00f0af2f
[0x4022d1] memchr("\t\t{\n\t\t  FETCH(c2, "Unbalanced [""..., '\n', 120) = 0x00f0ae86
[0x4022d1] memchr("\t\t  FETCH(c2, "Unbalanced [");\n\t"..., '\n', 116) = 0x00f0aea5
[0x4022d1] memchr("\t\t  if (c2 == ']')\n\t\t    {\n\t\t   "..., '\n', 85) = 0x00f0aeb8
[0x4022d1] memchr("\t\t    {\n\t\t      /* In the case ["..., '\n', 66) = 0x00f0aec0
[0x4022d1] memchr("\t\t      /* In the case [x-], the"..., '\n', 58) = 0x00f0aefa
[0x4022d1] memchr("\t\t\t which is left in c1, the loo"..., '\n', 0) = NULL
[0x4023cc] fwrite("7230:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t which is left in c1, the loo"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      --lexptr;\n\t\t      ++lexl"..., '1', 12435) = 0x00f0aff8
[0x40cdf3] memchr("1, "Unbalanced [");\n\t\t    }\n\t\t}\n"..., '\n', 12235) = 0x00f0b00b
[0x4022d1] memchr("\t\t      --lexptr;\n\t\t      ++lexl"..., '\n', 185) = 0x00f0af41
[0x4022d1] memchr("\t\t      ++lexleft;\n\t\t      c2 = "..., '\n', 167) = 0x00f0af54
[0x4022d1] memchr("\t\t      c2 = c;\n\t\t    }\n\t\t  else"..., '\n', 148) = 0x00f0af64
[0x4022d1] memchr("\t\t    }\n\t\t  else\n\t\t    {\n\t\t     "..., '\n', 132) = 0x00f0af6c
[0x4022d1] memchr("\t\t  else\n\t\t    {\n\t\t      if (c2 "..., '\n', 124) = 0x00f0af75
[0x4022d1] memchr("\t\t    {\n\t\t      if (c2 == '\\\\'\n\t"..., '\n', 115) = 0x00f0af7d
[0x4022d1] memchr("\t\t      if (c2 == '\\\\'\n\t\t\t  && ("..., '\n', 107) = 0x00f0af94
[0x4022d1] memchr("\t\t\t  && (syntax_bits & RE_BACKSL"..., '\n', 84) = 0x00f0afca
[0x4022d1] memchr("\t\t\tFETCH(c2, "Unbalanced [");\n\t\t"..., '\n', 30) = 0x00f0afe8
[0x4022d1] memchr("\t\t      FETCH(c1, "Unbalanced [""..., '\n', 0) = NULL
[0x4023cc] fwrite("7240:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      FETCH(c1, "Unbalanced [""..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    }\n\t\t}\n\t      else\n\t\tc2 = c"..., '1', 12215) = 0x00f0b11b
[0x40cdf3] memchr("1) != ']');\n\t  if (invert)\n\t    "..., '\n', 11944) = 0x00f0b126
[0x4022d1] memchr("\t\t    }\n\t\t}\n\t      else\n\t\tc2 = c"..., '\n', 255) = 0x00f0b013
[0x4022d1] memchr("\t\t}\n\t      else\n\t\tc2 = c;\n\t     "..., '\n', 247) = 0x00f0b017
[0x4022d1] memchr("\t      else\n\t\tc2 = c;\n\t      whi"..., '\n', 243) = 0x00f0b023
[0x4022d1] memchr("\t\tc2 = c;\n\t      while (c <= c2)"..., '\n', 231) = 0x00f0b02d
[0x4022d1] memchr("\t      while (c <= c2)\n\t\t{\n\t\t  s"..., '\n', 221) = 0x00f0b044
[0x4022d1] memchr("\t\t{\n\t\t  setbit(c, ccl);\n\t\t  if ("..., '\n', 198) = 0x00f0b048
[0x4022d1] memchr("\t\t  setbit(c, ccl);\n\t\t  if (case"..., '\n', 194) = 0x00f0b05c
[0x4022d1] memchr("\t\t  if (case_fold)\n\t\t    if (ISU"..., '\n', 174) = 0x00f0b06f
[0x4022d1] memchr("\t\t    if (ISUPPER(c))\n\t\t      se"..., '\n', 155) = 0x00f0b085
[0x4022d1] memchr("\t\t      setbit(tolower(c), ccl);"..., '\n', 133) = 0x00f0b0a6
[0x4022d1] memchr("\t\t    else if (ISLOWER(c))\n\t\t   "..., '\n', 100) = 0x00f0b0c1
[0x4022d1] memchr("\t\t      setbit(toupper(c), ccl);"..., '\n', 73) = 0x00f0b0e2
[0x4022d1] memchr("\t\t  ++c;\n\t\t}\n\t    skip:\n\t      ;"..., '\n', 40) = 0x00f0b0eb
[0x4022d1] memchr("\t\t}\n\t    skip:\n\t      ;\n\t    }\n\t"..., '\n', 31) = 0x00f0b0ef
[0x4022d1] memchr("\t    skip:\n\t      ;\n\t    }\n\t  wh"..., '\n', 27) = 0x00f0b0fa
[0x4022d1] memchr("\t      ;\n\t    }\n\t  while ((c = c"..., '\n', 16) = 0x00f0b103
[0x4022d1] memchr("\t    }\n\t  while ((c = c1) != ']'"..., '\n', 7) = 0x00f0b10a
[0x4022d1] memchr("\t  while ((c = c1) != ']');\n\t  i"..., '\n', 0) = NULL
[0x4023cc] fwrite("7258:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  while ((c = c1) != ']');\n\t  i"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (invert)\n\t    {\n\t      not"..., '1', 11932) = 0x00f0bb08
[0x40cdf3] memchr("1;\n\n  switch (dfa->tokens[tindex"..., '\n', 9403) = 0x00f0bb0a
[0x4022d1] memchr("\t  if (invert)\n\t    {\n\t      not"..., '\n', 2518) = 0x00f0b135
[0x4022d1] memchr("\t    {\n\t      notset(ccl);\n\t    "..., '\n', 2503) = 0x00f0b13c
[0x4022d1] memchr("\t      notset(ccl);\n\t      if (s"..., '\n', 2496) = 0x00f0b150
[0x4022d1] memchr("\t      if (syntax_bits & RE_HAT_"..., '\n', 2476) = 0x00f0b183
[0x4022d1] memchr("\t\tclrbit('\\n', ccl);\n\t    }\n\t  l"..., '\n', 2425) = 0x00f0b198
[0x4022d1] memchr("\t    }\n\t  laststart = 0;\n\t  retu"..., '\n', 2404) = 0x00f0b19f
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 2397) = 0x00f0b1b1
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 2379) = 0x00f0b1e2
[0x4022d1] memchr("\n\tdefault:\n\tnormal_char:\n\t  last"..., '\n', 2330) = 0x00f0b1e3
[0x4022d1] memchr("\tdefault:\n\tnormal_char:\n\t  lasts"..., '\n', 2329) = 0x00f0b1ed
[0x4022d1] memchr("\tnormal_char:\n\t  laststart = 0;\n"..., '\n', 2319) = 0x00f0b1fb
[0x4022d1] memchr("\t  laststart = 0;\n\t  if (case_fo"..., '\n', 2305) = 0x00f0b20d
[0x4022d1] memchr("\t  if (case_fold && ISALPHA(c))\n"..., '\n', 2287) = 0x00f0b22d
[0x4022d1] memchr("\t    {\n\t      zeroset(ccl);\n\t   "..., '\n', 2255) = 0x00f0b234
[0x4022d1] memchr("\t      zeroset(ccl);\n\t      setb"..., '\n', 2248) = 0x00f0b249
[0x4022d1] memchr("\t      setbit(c, ccl);\n\t      if"..., '\n', 2227) = 0x00f0b260
[0x4022d1] memchr("\t      if (isupper(c))\n\t\tsetbit("..., '\n', 2204) = 0x00f0b277
[0x4022d1] memchr("\t\tsetbit(tolower(c), ccl);\n\t    "..., '\n', 2181) = 0x00f0b292
[0x4022d1] memchr("\t      else\n\t\tsetbit(toupper(c),"..., '\n', 2154) = 0x00f0b29e
[0x4022d1] memchr("\t\tsetbit(toupper(c), ccl);\n\t    "..., '\n', 2142) = 0x00f0b2b9
[0x4022d1] memchr("\t      return lasttok = CSET + c"..., '\n', 2115) = 0x00f0b2ee
[0x4022d1] memchr("\t    }\n\t  return c;\n\t}\n    }\n\n  "..., '\n', 2062) = 0x00f0b2f5
[0x4022d1] memchr("\t  return c;\n\t}\n    }\n\n  /* The "..., '\n', 2055) = 0x00f0b302
[0x4022d1] memchr("\t}\n    }\n\n  /* The above loop sh"..., '\n', 2042) = 0x00f0b305
[0x4022d1] memchr("    }\n\n  /* The above loop shoul"..., '\n', 2039) = 0x00f0b30b
[0x4022d1] memchr("\n  /* The above loop should cons"..., '\n', 2033) = 0x00f0b30c
[0x4022d1] memchr("  /* The above loop should consu"..., '\n', 2032) = 0x00f0b343
[0x4022d1] memchr("     and some other character. *"..., '\n', 1977) = 0x00f0b365
[0x4022d1] memchr("  abort();\n}\n\n/* Recursive desce"..., '\n', 1943) = 0x00f0b370
[0x4022d1] memchr("}\n\n/* Recursive descent parser f"..., '\n', 1932) = 0x00f0b372
[0x4022d1] memchr("\n/* Recursive descent parser for"..., '\n', 1930) = 0x00f0b373
[0x4022d1] memchr("/* Recursive descent parser for "..., '\n', 1929) = 0x00f0b3ab
[0x4022d1] memchr("\nstatic token tok;\t\t/* Lookahead"..., '\n', 1873) = 0x00f0b3ac
[0x4022d1] memchr("static token tok;\t\t/* Lookahead "..., '\n', 1872) = 0x00f0b3d6
[0x4022d1] memchr("static depth;\t\t\t/* Current depth"..., '\n', 1830) = 0x00f0b40f
[0x4022d1] memchr("\t\t\t\t   holding deferred producti"..., '\n', 1773) = 0x00f0b43d
[0x4022d1] memchr("\t\t\t\t   used to determine the dep"..., '\n', 1727) = 0x00f0b46d
[0x4022d1] memchr("\t\t\t\t   required of the real stac"..., '\n', 1679) = 0x00f0b49b
[0x4022d1] memchr("\t\t\t\t   dfaanalyze(). */\n\n/* Add "..., '\n', 1633) = 0x00f0b4b3
[0x4022d1] memchr("\n/* Add the given token to the p"..., '\n', 1609) = 0x00f0b4b4
[0x4022d1] memchr("/* Add the given token to the pa"..., '\n', 1608) = 0x00f0b4fe
[0x4022d1] memchr("   updating the maximum depth if"..., '\n', 1534) = 0x00f0b52d
[0x4022d1] memchr("static void\naddtok(t)\n     token"..., '\n', 1487) = 0x00f0b539
[0x4022d1] memchr("addtok(t)\n     token t;\n{\n  REAL"..., '\n', 1475) = 0x00f0b543
[0x4022d1] memchr("     token t;\n{\n  REALLOC_IF_NEC"..., '\n', 1465) = 0x00f0b551
[0x4022d1] memchr("{\n  REALLOC_IF_NECESSARY(dfa->to"..., '\n', 1451) = 0x00f0b553
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(dfa->toke"..., '\n', 1449) = 0x00f0b599
[0x4022d1] memchr("  dfa->tokens[dfa->tindex++] = t"..., '\n', 1379) = 0x00f0b5bb
[0x4022d1] memchr("\n  switch (t)\n    {\n    case QMA"..., '\n', 1345) = 0x00f0b5bc
[0x4022d1] memchr("  switch (t)\n    {\n    case QMAR"..., '\n', 1344) = 0x00f0b5c9
[0x4022d1] memchr("    {\n    case QMARK:\n    case S"..., '\n', 1331) = 0x00f0b5cf
[0x4022d1] memchr("    case QMARK:\n    case STAR:\n "..., '\n', 1325) = 0x00f0b5df
[0x4022d1] memchr("    case STAR:\n    case PLUS:\n  "..., '\n', 1309) = 0x00f0b5ee
[0x4022d1] memchr("    case PLUS:\n      break;\n\n   "..., '\n', 1294) = 0x00f0b5fd
[0x4022d1] memchr("      break;\n\n    case CAT:\n    "..., '\n', 1279) = 0x00f0b60a
[0x4022d1] memchr("\n    case CAT:\n    case OR:\n    "..., '\n', 1266) = 0x00f0b60b
[0x4022d1] memchr("    case CAT:\n    case OR:\n    c"..., '\n', 1265) = 0x00f0b619
[0x4022d1] memchr("    case OR:\n    case ORTOP:\n   "..., '\n', 1251) = 0x00f0b626
[0x4022d1] memchr("    case ORTOP:\n      --depth;\n "..., '\n', 1238) = 0x00f0b636
[0x4022d1] memchr("      --depth;\n      break;\n\n   "..., '\n', 1222) = 0x00f0b645
[0x4022d1] memchr("      break;\n\n    default:\n     "..., '\n', 1207) = 0x00f0b652
[0x4022d1] memchr("\n    default:\n      ++dfa->nleav"..., '\n', 1194) = 0x00f0b653
[0x4022d1] memchr("    default:\n      ++dfa->nleave"..., '\n', 1193) = 0x00f0b660
[0x4022d1] memchr("      ++dfa->nleaves;\n    case E"..., '\n', 1180) = 0x00f0b676
[0x4022d1] memchr("    case EMPTY:\n      ++depth;\n "..., '\n', 1158) = 0x00f0b686
[0x4022d1] memchr("      ++depth;\n      break;\n    "..., '\n', 1142) = 0x00f0b695
[0x4022d1] memchr("      break;\n    }\n  if (depth >"..., '\n', 1127) = 0x00f0b6a2
[0x4022d1] memchr("    }\n  if (depth > dfa->depth)\n"..., '\n', 1114) = 0x00f0b6a8
[0x4022d1] memchr("  if (depth > dfa->depth)\n    df"..., '\n', 1108) = 0x00f0b6c2
[0x4022d1] memchr("    dfa->depth = depth;\n}\n\n/* Th"..., '\n', 1082) = 0x00f0b6da
[0x4022d1] memchr("}\n\n/* The grammar understood by "..., '\n', 1058) = 0x00f0b6dc
[0x4022d1] memchr("\n/* The grammar understood by th"..., '\n', 1056) = 0x00f0b6dd
[0x4022d1] memchr("/* The grammar understood by the"..., '\n', 1055) = 0x00f0b714
[0x4022d1] memchr("\n   regexp:\n     regexp OR branc"..., '\n', 1000) = 0x00f0b715
[0x4022d1] memchr("   regexp:\n     regexp OR branch"..., '\n', 999) = 0x00f0b720
[0x4022d1] memchr("     regexp OR branch\n     branc"..., '\n', 988) = 0x00f0b736
[0x4022d1] memchr("     branch\n\n   branch:\n     bra"..., '\n', 966) = 0x00f0b742
[0x4022d1] memchr("\n   branch:\n     branch closure\n"..., '\n', 954) = 0x00f0b743
[0x4022d1] memchr("   branch:\n     branch closure\n "..., '\n', 953) = 0x00f0b74e
[0x4022d1] memchr("     branch closure\n     closure"..., '\n', 942) = 0x00f0b762
[0x4022d1] memchr("     closure\n\n   closure:\n     c"..., '\n', 922) = 0x00f0b76f
[0x4022d1] memchr("\n   closure:\n     closure QMARK\n"..., '\n', 909) = 0x00f0b770
[0x4022d1] memchr("   closure:\n     closure QMARK\n "..., '\n', 908) = 0x00f0b77c
[0x4022d1] memchr("     closure QMARK\n     closure "..., '\n', 896) = 0x00f0b78f
[0x4022d1] memchr("     closure STAR\n     closure P"..., '\n', 877) = 0x00f0b7a1
[0x4022d1] memchr("     closure PLUS\n     atom\n\n   "..., '\n', 859) = 0x00f0b7b3
[0x4022d1] memchr("     atom\n\n   atom:\n     <normal"..., '\n', 841) = 0x00f0b7bd
[0x4022d1] memchr("\n   atom:\n     <normal character"..., '\n', 831) = 0x00f0b7be
[0x4022d1] memchr("   atom:\n     <normal character>"..., '\n', 830) = 0x00f0b7c7
[0x4022d1] memchr("     <normal character>\n     CSE"..., '\n', 821) = 0x00f0b7df
[0x4022d1] memchr("     CSET\n     BACKREF\n     BEGL"..., '\n', 797) = 0x00f0b7e9
[0x4022d1] memchr("     BACKREF\n     BEGLINE\n     E"..., '\n', 787) = 0x00f0b7f6
[0x4022d1] memchr("     BEGLINE\n     ENDLINE\n     B"..., '\n', 774) = 0x00f0b803
[0x4022d1] memchr("     ENDLINE\n     BEGWORD\n     E"..., '\n', 761) = 0x00f0b810
[0x4022d1] memchr("     BEGWORD\n     ENDWORD\n     L"..., '\n', 748) = 0x00f0b81d
[0x4022d1] memchr("     ENDWORD\n     LIMWORD\n     N"..., '\n', 735) = 0x00f0b82a
[0x4022d1] memchr("     LIMWORD\n     NOTLIMWORD\n   "..., '\n', 722) = 0x00f0b837
[0x4022d1] memchr("     NOTLIMWORD\n     <empty>\n\n  "..., '\n', 709) = 0x00f0b847
[0x4022d1] memchr("     <empty>\n\n   The parser buil"..., '\n', 693) = 0x00f0b854
[0x4022d1] memchr("\n   The parser builds a parse tr"..., '\n', 680) = 0x00f0b855
[0x4022d1] memchr("   The parser builds a parse tre"..., '\n', 679) = 0x00f0b8a1
[0x4022d1] memchr("\n#if __STDC__\nstatic void regexp"..., '\n', 603) = 0x00f0b8a2
[0x4022d1] memchr("#if __STDC__\nstatic void regexp("..., '\n', 602) = 0x00f0b8af
[0x4022d1] memchr("static void regexp(int);\n#else\ns"..., '\n', 589) = 0x00f0b8c8
[0x4022d1] memchr("#else\nstatic void regexp();\n#end"..., '\n', 564) = 0x00f0b8ce
[0x4022d1] memchr("static void regexp();\n#endif\n\nst"..., '\n', 558) = 0x00f0b8e4
[0x4022d1] memchr("#endif\n\nstatic void\natom()\n{\n  i"..., '\n', 536) = 0x00f0b8eb
[0x4022d1] memchr("\nstatic void\natom()\n{\n  if ((tok"..., '\n', 529) = 0x00f0b8ec
[0x4022d1] memchr("static void\natom()\n{\n  if ((tok "..., '\n', 528) = 0x00f0b8f8
[0x4022d1] memchr("atom()\n{\n  if ((tok >= 0 && tok "..., '\n', 516) = 0x00f0b8ff
[0x4022d1] memchr("{\n  if ((tok >= 0 && tok < NOTCH"..., '\n', 509) = 0x00f0b901
[0x4022d1] memchr("  if ((tok >= 0 && tok < NOTCHAR"..., '\n', 507) = 0x00f0b944
[0x4022d1] memchr("      || tok == BEGLINE || tok ="..., '\n', 440) = 0x00f0b980
[0x4022d1] memchr("      || tok == ENDWORD || tok ="..., '\n', 380) = 0x00f0b9c0
[0x4022d1] memchr("    {\n      addtok(tok);\n      t"..., '\n', 316) = 0x00f0b9c6
[0x4022d1] memchr("      addtok(tok);\n      tok = l"..., '\n', 310) = 0x00f0b9d9
[0x4022d1] memchr("      tok = lex();\n    }\n  else "..., '\n', 291) = 0x00f0b9ec
[0x4022d1] memchr("    }\n  else if (tok == LPAREN)\n"..., '\n', 272) = 0x00f0b9f2
[0x4022d1] memchr("  else if (tok == LPAREN)\n    {\n"..., '\n', 266) = 0x00f0ba0c
[0x4022d1] memchr("    {\n      tok = lex();\n      r"..., '\n', 240) = 0x00f0ba12
[0x4022d1] memchr("      tok = lex();\n      regexp("..., '\n', 234) = 0x00f0ba25
[0x4022d1] memchr("      regexp(0);\n      if (tok !"..., '\n', 215) = 0x00f0ba36
[0x4022d1] memchr("      if (tok != RPAREN)\n\tdfaerr"..., '\n', 198) = 0x00f0ba4f
[0x4022d1] memchr("\tdfaerror("Unbalanced (");\n     "..., '\n', 173) = 0x00f0ba6a
[0x4022d1] memchr("      tok = lex();\n    }\n  else\n"..., '\n', 146) = 0x00f0ba7d
[0x4022d1] memchr("    }\n  else\n    addtok(EMPTY);\n"..., '\n', 127) = 0x00f0ba83
[0x4022d1] memchr("  else\n    addtok(EMPTY);\n}\n\n/* "..., '\n', 121) = 0x00f0ba8a
[0x4022d1] memchr("    addtok(EMPTY);\n}\n\n/* Return "..., '\n', 114) = 0x00f0ba9d
[0x4022d1] memchr("}\n\n/* Return the number of token"..., '\n', 95) = 0x00f0ba9f
[0x4022d1] memchr("\n/* Return the number of tokens "..., '\n', 93) = 0x00f0baa0
[0x4022d1] memchr("/* Return the number of tokens i"..., '\n', 92) = 0x00f0bade
[0x4022d1] memchr("static int\nnsubtoks(tindex)\n{\n  "..., '\n', 30) = 0x00f0bae9
[0x4022d1] memchr("nsubtoks(tindex)\n{\n  int ntoks1;"..., '\n', 19) = 0x00f0bafa
[0x4022d1] memchr("{\n  int ntoks1;\n\n  switch (dfa->"..., '\n', 2) = 0x00f0bafc
[0x4022d1] memchr("  int ntoks1;\n\n  switch (dfa->to"..., '\n', 0) = NULL
[0x4023cc] fwrite("7393:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  int ntoks1;\n\n  switch (dfa->to"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  switch (dfa->tokens[tindex - "..., '1', 9400) = 0x00f0bb2b
[0x40cdf3] memchr("1])\n    {\n    default:\n      ret"..., '\n', 9368) = 0x00f0bb2e
[0x4022d1] memchr("\n  switch (dfa->tokens[tindex - "..., '\n', 1) = 0x00f0bb0b
[0x4022d1] memchr("  switch (dfa->tokens[tindex - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("7395:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  switch (dfa->tokens[tindex - 1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n    default:\n      return "..., '1', 9364) = 0x00f0bb4f
[0x40cdf3] memchr("1;\n    case QMARK:\n    case STAR"..., '\n', 9332) = 0x00f0bb51
[0x4022d1] memchr("    {\n    default:\n      return "..., '\n', 19) = 0x00f0bb34
[0x4022d1] memchr("    default:\n      return 1;\n   "..., '\n', 13) = 0x00f0bb41
[0x4022d1] memchr("      return 1;\n    case QMARK:\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("7398:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      return 1;\n    case QMARK:\n"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    case QMARK:\n    case STAR:\n "..., '1', 9329) = 0x00f0bb8d
[0x40cdf3] memchr("1 + nsubtoks(tindex - 1);\n    ca"..., '\n', 9270) = 0x00f0bba6
[0x4022d1] memchr("    case QMARK:\n    case STAR:\n "..., '\n', 46) = 0x00f0bb61
[0x4022d1] memchr("    case STAR:\n    case PLUS:\n  "..., '\n', 30) = 0x00f0bb70
[0x4022d1] memchr("    case PLUS:\n      return 1 + "..., '\n', 15) = 0x00f0bb7f
[0x4022d1] memchr("      return 1 + nsubtoks(tindex"..., '\n', 0) = NULL
[0x4023cc] fwrite("7402:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      return 1 + nsubtoks(tindex"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    case CAT:\n    case OR:\n    c"..., '1', 9244) = 0x00f0bbdd
[0x40cdf3] memchr("1 = nsubtoks(tindex - 1);\n      "..., '\n', 9190) = 0x00f0bbf6
[0x4022d1] memchr("    case CAT:\n    case OR:\n    c"..., '\n', 43) = 0x00f0bbb4
[0x4022d1] memchr("    case OR:\n    case ORTOP:\n   "..., '\n', 29) = 0x00f0bbc1
[0x4022d1] memchr("    case ORTOP:\n      ntoks1 = n"..., '\n', 16) = 0x00f0bbd1
[0x4022d1] memchr("      ntoks1 = nsubtoks(tindex -"..., '\n', 0) = NULL
[0x4023cc] fwrite("7406:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      ntoks1 = nsubtoks(tindex -"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      return 1 + ntoks1 + nsubto"..., '1', 9164) = 0x00f0bc04
[0x40cdf3] memchr("1 + ntoks1 + nsubtoks(tindex - 1"..., '\n', 9151) = 0x00f0bc2f
[0x4022d1] memchr("      return 1 + ntoks1 + nsubto"..., '\n', 0) = NULL
[0x4023cc] fwrite("7407:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      return 1 + ntoks1 + nsubto"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n}\n\n/* Copy the given subex"..., '1', 9107) = 0x00f0be3c
[0x40cdf3] memchr("1; i < minrep; ++i)\n\t  {\n\t    co"..., '\n', 8583) = 0x00f0be4f
[0x4022d1] memchr("    }\n}\n\n/* Copy the given subex"..., '\n', 514) = 0x00f0bc35
[0x4022d1] memchr("}\n\n/* Copy the given subexpressi"..., '\n', 508) = 0x00f0bc37
[0x4022d1] memchr("\n/* Copy the given subexpression"..., '\n', 506) = 0x00f0bc38
[0x4022d1] memchr("/* Copy the given subexpression "..., '\n', 505) = 0x00f0bc73
[0x4022d1] memchr("static void\ncopytoks(tindex, nto"..., '\n', 446) = 0x00f0bc7f
[0x4022d1] memchr("copytoks(tindex, ntokens)\n     i"..., '\n', 434) = 0x00f0bc99
[0x4022d1] memchr("     int tindex, ntokens;\n{\n  in"..., '\n', 408) = 0x00f0bcb3
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < nt"..., '\n', 382) = 0x00f0bcb5
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < ntok"..., '\n', 380) = 0x00f0bcbe
[0x4022d1] memchr("\n  for (i = 0; i < ntokens; ++i)"..., '\n', 371) = 0x00f0bcbf
[0x4022d1] memchr("  for (i = 0; i < ntokens; ++i)\n"..., '\n', 370) = 0x00f0bcdf
[0x4022d1] memchr("    addtok(dfa->tokens[tindex + "..., '\n', 338) = 0x00f0bd04
[0x4022d1] memchr("}\n\nstatic void\nclosure()\n{\n  int"..., '\n', 301) = 0x00f0bd06
[0x4022d1] memchr("\nstatic void\nclosure()\n{\n  int t"..., '\n', 299) = 0x00f0bd07
[0x4022d1] memchr("static void\nclosure()\n{\n  int ti"..., '\n', 298) = 0x00f0bd13
[0x4022d1] memchr("closure()\n{\n  int tindex, ntoken"..., '\n', 286) = 0x00f0bd1d
[0x4022d1] memchr("{\n  int tindex, ntokens, i;\n\n  a"..., '\n', 276) = 0x00f0bd1f
[0x4022d1] memchr("  int tindex, ntokens, i;\n\n  ato"..., '\n', 274) = 0x00f0bd39
[0x4022d1] memchr("\n  atom();\n  while (tok == QMARK"..., '\n', 248) = 0x00f0bd3a
[0x4022d1] memchr("  atom();\n  while (tok == QMARK "..., '\n', 247) = 0x00f0bd44
[0x4022d1] memchr("  while (tok == QMARK || tok == "..., '\n', 237) = 0x00f0bd89
[0x4022d1] memchr("    if (tok == REPMN)\n      {\n\tn"..., '\n', 168) = 0x00f0bd9f
[0x4022d1] memchr("      {\n\tntokens = nsubtoks(dfa-"..., '\n', 146) = 0x00f0bda7
[0x4022d1] memchr("\tntokens = nsubtoks(dfa->tindex)"..., '\n', 138) = 0x00f0bdc9
[0x4022d1] memchr("\ttindex = dfa->tindex - ntokens;"..., '\n', 104) = 0x00f0bdea
[0x4022d1] memchr("\tif (maxrep == 0)\n\t  addtok(PLUS"..., '\n', 71) = 0x00f0bdfc
[0x4022d1] memchr("\t  addtok(PLUS);\n\tif (minrep == "..., '\n', 53) = 0x00f0be0d
[0x4022d1] memchr("\tif (minrep == 0)\n\t  addtok(QMAR"..., '\n', 36) = 0x00f0be1f
[0x4022d1] memchr("\t  addtok(QMARK);\n\tfor (i = 1; i"..., '\n', 18) = 0x00f0be31
[0x4022d1] memchr("\tfor (i = 1; i < minrep; ++i)\n\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("7437:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tfor (i = 1; i < minrep; ++i)\n\t "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  {\n\t    copytoks(tindex, ntoke"..., '1', 8563) = 0x00f0c1eb
[0x40cdf3] memchr("1;\n  parens = 0;\n\n  if (! syntax"..., '\n', 7640) = 0x00f0c1ed
[0x4022d1] memchr("\t  {\n\t    copytoks(tindex, ntoke"..., '\n', 909) = 0x00f0be54
[0x4022d1] memchr("\t    copytoks(tindex, ntokens);\n"..., '\n', 904) = 0x00f0be74
[0x4022d1] memchr("\t    addtok(CAT);\n\t  }\n\tfor (; i"..., '\n', 872) = 0x00f0be86
[0x4022d1] memchr("\t  }\n\tfor (; i < maxrep; ++i)\n\t "..., '\n', 854) = 0x00f0be8b
[0x4022d1] memchr("\tfor (; i < maxrep; ++i)\n\t  {\n\t "..., '\n', 849) = 0x00f0bea4
[0x4022d1] memchr("\t  {\n\t    copytoks(tindex, ntoke"..., '\n', 824) = 0x00f0bea9
[0x4022d1] memchr("\t    copytoks(tindex, ntokens);\n"..., '\n', 819) = 0x00f0bec9
[0x4022d1] memchr("\t    addtok(QMARK);\n\t    addtok("..., '\n', 787) = 0x00f0bedd
[0x4022d1] memchr("\t    addtok(CAT);\n\t  }\n\ttok = le"..., '\n', 767) = 0x00f0beef
[0x4022d1] memchr("\t  }\n\ttok = lex();\n      }\n    e"..., '\n', 749) = 0x00f0bef4
[0x4022d1] memchr("\ttok = lex();\n      }\n    else\n "..., '\n', 744) = 0x00f0bf02
[0x4022d1] memchr("      }\n    else\n      {\n\taddtok"..., '\n', 730) = 0x00f0bf0a
[0x4022d1] memchr("    else\n      {\n\taddtok(tok);\n\t"..., '\n', 722) = 0x00f0bf13
[0x4022d1] memchr("      {\n\taddtok(tok);\n\ttok = lex"..., '\n', 713) = 0x00f0bf1b
[0x4022d1] memchr("\taddtok(tok);\n\ttok = lex();\n    "..., '\n', 705) = 0x00f0bf29
[0x4022d1] memchr("\ttok = lex();\n      }\n}\n\nstatic "..., '\n', 691) = 0x00f0bf37
[0x4022d1] memchr("      }\n}\n\nstatic void\nbranch()\n"..., '\n', 677) = 0x00f0bf3f
[0x4022d1] memchr("}\n\nstatic void\nbranch()\n{\n  clos"..., '\n', 669) = 0x00f0bf41
[0x4022d1] memchr("\nstatic void\nbranch()\n{\n  closur"..., '\n', 667) = 0x00f0bf42
[0x4022d1] memchr("static void\nbranch()\n{\n  closure"..., '\n', 666) = 0x00f0bf4e
[0x4022d1] memchr("branch()\n{\n  closure();\n  while "..., '\n', 654) = 0x00f0bf57
[0x4022d1] memchr("{\n  closure();\n  while (tok != R"..., '\n', 645) = 0x00f0bf59
[0x4022d1] memchr("  closure();\n  while (tok != RPA"..., '\n', 643) = 0x00f0bf66
[0x4022d1] memchr("  while (tok != RPAREN && tok !="..., '\n', 630) = 0x00f0bf97
[0x4022d1] memchr("    {\n      closure();\n      add"..., '\n', 581) = 0x00f0bf9d
[0x4022d1] memchr("      closure();\n      addtok(CA"..., '\n', 575) = 0x00f0bfae
[0x4022d1] memchr("      addtok(CAT);\n    }\n}\n\nstat"..., '\n', 558) = 0x00f0bfc1
[0x4022d1] memchr("    }\n}\n\nstatic void\nregexp(topl"..., '\n', 539) = 0x00f0bfc7
[0x4022d1] memchr("}\n\nstatic void\nregexp(toplevel)\n"..., '\n', 533) = 0x00f0bfc9
[0x4022d1] memchr("\nstatic void\nregexp(toplevel)\n  "..., '\n', 531) = 0x00f0bfca
[0x4022d1] memchr("static void\nregexp(toplevel)\n   "..., '\n', 530) = 0x00f0bfd6
[0x4022d1] memchr("regexp(toplevel)\n     int toplev"..., '\n', 518) = 0x00f0bfe7
[0x4022d1] memchr("     int toplevel;\n{\n  branch();"..., '\n', 501) = 0x00f0bffa
[0x4022d1] memchr("{\n  branch();\n  while (tok == OR"..., '\n', 482) = 0x00f0bffc
[0x4022d1] memchr("  branch();\n  while (tok == OR)\n"..., '\n', 480) = 0x00f0c008
[0x4022d1] memchr("  while (tok == OR)\n    {\n      "..., '\n', 468) = 0x00f0c01c
[0x4022d1] memchr("    {\n      tok = lex();\n      b"..., '\n', 448) = 0x00f0c022
[0x4022d1] memchr("      tok = lex();\n      branch("..., '\n', 442) = 0x00f0c035
[0x4022d1] memchr("      branch();\n      if (toplev"..., '\n', 423) = 0x00f0c045
[0x4022d1] memchr("      if (toplevel)\n\taddtok(ORTO"..., '\n', 407) = 0x00f0c059
[0x4022d1] memchr("\taddtok(ORTOP);\n      else\n\taddt"..., '\n', 387) = 0x00f0c069
[0x4022d1] memchr("      else\n\taddtok(OR);\n    }\n}\n"..., '\n', 371) = 0x00f0c074
[0x4022d1] memchr("\taddtok(OR);\n    }\n}\n\n/* Main en"..., '\n', 360) = 0x00f0c081
[0x4022d1] memchr("    }\n}\n\n/* Main entry point for"..., '\n', 347) = 0x00f0c087
[0x4022d1] memchr("}\n\n/* Main entry point for the p"..., '\n', 341) = 0x00f0c089
[0x4022d1] memchr("\n/* Main entry point for the par"..., '\n', 339) = 0x00f0c08a
[0x4022d1] memchr("/* Main entry point for the pars"..., '\n', 338) = 0x00f0c0d6
[0x4022d1] memchr("   length of the string, so s ca"..., '\n', 262) = 0x00f0c123
[0x4022d1] memchr("   the struct dfa to parse into."..., '\n', 185) = 0x00f0c147
[0x4022d1] memchr("void\ndfaparse(s, len, d)\n     ch"..., '\n', 149) = 0x00f0c14c
[0x4022d1] memchr("dfaparse(s, len, d)\n     char *s"..., '\n', 144) = 0x00f0c160
[0x4022d1] memchr("     char *s;\n     size_t len;\n "..., '\n', 124) = 0x00f0c16e
[0x4022d1] memchr("     size_t len;\n     struct dfa"..., '\n', 110) = 0x00f0c17f
[0x4022d1] memchr("     struct dfa *d;\n\n{\n  dfa = d"..., '\n', 93) = 0x00f0c193
[0x4022d1] memchr("\n{\n  dfa = d;\n  lexstart = lexpt"..., '\n', 73) = 0x00f0c194
[0x4022d1] memchr("{\n  dfa = d;\n  lexstart = lexptr"..., '\n', 72) = 0x00f0c196
[0x4022d1] memchr("  dfa = d;\n  lexstart = lexptr ="..., '\n', 70) = 0x00f0c1a1
[0x4022d1] memchr("  lexstart = lexptr = s;\n  lexle"..., '\n', 59) = 0x00f0c1ba
[0x4022d1] memchr("  lexleft = len;\n  lasttok = END"..., '\n', 34) = 0x00f0c1cb
[0x4022d1] memchr("  lasttok = END;\n  laststart = 1"..., '\n', 17) = 0x00f0c1dc
[0x4022d1] memchr("  laststart = 1;\n  parens = 0;\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("7498:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  laststart = 1;\n  parens = 0;\n\n"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  parens = 0;\n\n  if (! syntax_bi"..., '1', 7637) = 0x00f0c269
[0x40cdf3] memchr("1);\n\n  if (tok != END)\n    dfaer"..., '\n', 7514) = 0x00f0c26c
[0x4022d1] memchr("  parens = 0;\n\n  if (! syntax_bi"..., '\n', 114) = 0x00f0c1fb
[0x4022d1] memchr("\n  if (! syntax_bits_set)\n    df"..., '\n', 100) = 0x00f0c1fc
[0x4022d1] memchr("  if (! syntax_bits_set)\n    dfa"..., '\n', 99) = 0x00f0c215
[0x4022d1] memchr("    dfaerror("No syntax specifie"..., '\n', 74) = 0x00f0c23a
[0x4022d1] memchr("\n  tok = lex();\n  depth = d->dep"..., '\n', 37) = 0x00f0c23b
[0x4022d1] memchr("  tok = lex();\n  depth = d->dept"..., '\n', 36) = 0x00f0c24a
[0x4022d1] memchr("  depth = d->depth;\n\n  regexp(1)"..., '\n', 21) = 0x00f0c25e
[0x4022d1] memchr("\n  regexp(1);\n\n  if (tok != END)"..., '\n', 1) = 0x00f0c25f
[0x4022d1] memchr("  regexp(1);\n\n  if (tok != END)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("7507:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  regexp(1);\n\n  if (tok != END)\n"..., 1, 13, 0x7fce6d444260) = 13
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  if (tok != END)\n    dfaerror("..., '1', 7510) = 0x00f0c5bd
[0x40cdf3] memchr("1, t2;\n\n  for (i = 0; i < s->nel"..., '\n', 6662) = 0x00f0c5c3
[0x4022d1] memchr("\n  if (tok != END)\n    dfaerror("..., '\n', 836) = 0x00f0c26d
[0x4022d1] memchr("  if (tok != END)\n    dfaerror(""..., '\n', 835) = 0x00f0c27f
[0x4022d1] memchr("    dfaerror("Unbalanced )");\n\n "..., '\n', 817) = 0x00f0c29d
[0x4022d1] memchr("\n  addtok(END - d->nregexps);\n  "..., '\n', 787) = 0x00f0c29e
[0x4022d1] memchr("  addtok(END - d->nregexps);\n  a"..., '\n', 786) = 0x00f0c2bb
[0x4022d1] memchr("  addtok(CAT);\n\n  if (d->nregexp"..., '\n', 757) = 0x00f0c2ca
[0x4022d1] memchr("\n  if (d->nregexps)\n    addtok(O"..., '\n', 742) = 0x00f0c2cb
[0x4022d1] memchr("  if (d->nregexps)\n    addtok(OR"..., '\n', 741) = 0x00f0c2de
[0x4022d1] memchr("    addtok(ORTOP);\n\n  ++d->nrege"..., '\n', 722) = 0x00f0c2f1
[0x4022d1] memchr("\n  ++d->nregexps;\n}\n\n/* Some pri"..., '\n', 703) = 0x00f0c2f2
[0x4022d1] memchr("  ++d->nregexps;\n}\n\n/* Some prim"..., '\n', 702) = 0x00f0c303
[0x4022d1] memchr("}\n\n/* Some primitives for operat"..., '\n', 685) = 0x00f0c305
[0x4022d1] memchr("\n/* Some primitives for operatin"..., '\n', 683) = 0x00f0c306
[0x4022d1] memchr("/* Some primitives for operating"..., '\n', 682) = 0x00f0c340
[0x4022d1] memchr("\n/* Copy one set to another; the"..., '\n', 624) = 0x00f0c341
[0x4022d1] memchr("/* Copy one set to another; the "..., '\n', 623) = 0x00f0c386
[0x4022d1] memchr("static void\ncopy(src, dst)\n     "..., '\n', 554) = 0x00f0c392
[0x4022d1] memchr("copy(src, dst)\n     position_set"..., '\n', 542) = 0x00f0c3a1
[0x4022d1] memchr("     position_set *src;\n     pos"..., '\n', 527) = 0x00f0c3b9
[0x4022d1] memchr("     position_set *dst;\n{\n  int "..., '\n', 503) = 0x00f0c3d1
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < sr"..., '\n', 479) = 0x00f0c3d3
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < src-"..., '\n', 477) = 0x00f0c3dc
[0x4022d1] memchr("\n  for (i = 0; i < src->nelem; +"..., '\n', 468) = 0x00f0c3dd
[0x4022d1] memchr("  for (i = 0; i < src->nelem; ++"..., '\n', 467) = 0x00f0c400
[0x4022d1] memchr("    dst->elems[i] = src->elems[i"..., '\n', 432) = 0x00f0c423
[0x4022d1] memchr("  dst->nelem = src->nelem;\n}\n\n/*"..., '\n', 397) = 0x00f0c43e
[0x4022d1] memchr("}\n\n/* Insert a position in a set"..., '\n', 370) = 0x00f0c440
[0x4022d1] memchr("\n/* Insert a position in a set. "..., '\n', 368) = 0x00f0c441
[0x4022d1] memchr("/* Insert a position in a set.  "..., '\n', 367) = 0x00f0c488
[0x4022d1] memchr("   order according to index.  If"..., '\n', 296) = 0x00f0c4d1
[0x4022d1] memchr("   the same index then their con"..., '\n', 223) = 0x00f0c517
[0x4022d1] memchr("   S->elems must point to an arr"..., '\n', 153) = 0x00f0c565
[0x4022d1] memchr("static void\ninsert(p, s)\n     po"..., '\n', 75) = 0x00f0c571
[0x4022d1] memchr("insert(p, s)\n     position p;\n  "..., '\n', 63) = 0x00f0c57e
[0x4022d1] memchr("     position p;\n     position_s"..., '\n', 50) = 0x00f0c58f
[0x4022d1] memchr("     position_set *s;\n{\n  int i;"..., '\n', 33) = 0x00f0c5a5
[0x4022d1] memchr("{\n  int i;\n  position t1, t2;\n\n "..., '\n', 11) = 0x00f0c5a7
[0x4022d1] memchr("  int i;\n  position t1, t2;\n\n  f"..., '\n', 9) = 0x00f0c5b0
[0x4022d1] memchr("  position t1, t2;\n\n  for (i = 0"..., '\n', 0) = NULL
[0x4023cc] fwrite("7546:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  position t1, t2;\n\n  for (i = 0"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  for (i = 0; i < s->nelem && p"..., '1', 6655) = 0x00f0c67f
[0x40cdf3] memchr("1 = p;\n      ++s->nelem;\n      w"..., '\n', 6468) = 0x00f0c685
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem && p"..., '\n', 180) = 0x00f0c5c4
[0x4022d1] memchr("  for (i = 0; i < s->nelem && p."..., '\n', 179) = 0x00f0c604
[0x4022d1] memchr("    ;\n  if (i < s->nelem && p.in"..., '\n', 115) = 0x00f0c60a
[0x4022d1] memchr("  if (i < s->nelem && p.index =="..., '\n', 109) = 0x00f0c63e
[0x4022d1] memchr("    s->elems[i].constraint |= p."..., '\n', 57) = 0x00f0c66a
[0x4022d1] memchr("  else\n    {\n      t1 = p;\n     "..., '\n', 13) = 0x00f0c671
[0x4022d1] memchr("    {\n      t1 = p;\n      ++s->n"..., '\n', 6) = 0x00f0c677
[0x4022d1] memchr("      t1 = p;\n      ++s->nelem;\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("7554:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      t1 = p;\n      ++s->nelem;\n"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      ++s->nelem;\n      while (i"..., '1', 6461) = 0x00f0c6df
[0x40cdf3] memchr("1;\n\t  t1 = t2;\n\t}\n    }\n}\n\n/* Me"..., '\n', 6372) = 0x00f0c6e1
[0x4022d1] memchr("      ++s->nelem;\n      while (i"..., '\n', 69) = 0x00f0c697
[0x4022d1] memchr("      while (i < s->nelem)\n\t{\n\t "..., '\n', 51) = 0x00f0c6b2
[0x4022d1] memchr("\t{\n\t  t2 = s->elems[i];\n\t  s->el"..., '\n', 24) = 0x00f0c6b5
[0x4022d1] memchr("\t  t2 = s->elems[i];\n\t  s->elems"..., '\n', 21) = 0x00f0c6ca
[0x4022d1] memchr("\t  s->elems[i++] = t1;\n\t  t1 = t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7559:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  s->elems[i++] = t1;\n\t  t1 = t"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  t1 = t2;\n\t}\n    }\n}\n\n/* Merge"..., '1', 6369) = 0x00f0c6e6
[0x40cdf3] memchr("1 = t2;\n\t}\n    }\n}\n\n/* Merge two"..., '\n', 6365) = 0x00f0c6ed
[0x4022d1] memchr("\t  t1 = t2;\n\t}\n    }\n}\n\n/* Merge"..., '\n', 0) = NULL
[0x4023cc] fwrite("7560:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  t1 = t2;\n\t}\n    }\n}\n\n/* Merge"..., 1, 12, 0x7fce6d444260) = 12
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n    }\n}\n\n/* Merge two sets of"..., '1', 6357) = 0x00f0c7a3
[0x40cdf3] memchr("1, s2, m)\n     position_set *s1;"..., '\n', 6176) = 0x00f0c7ac
[0x4022d1] memchr("\t}\n    }\n}\n\n/* Merge two sets of"..., '\n', 174) = 0x00f0c6f0
[0x4022d1] memchr("    }\n}\n\n/* Merge two sets of po"..., '\n', 171) = 0x00f0c6f6
[0x4022d1] memchr("}\n\n/* Merge two sets of position"..., '\n', 165) = 0x00f0c6f8
[0x4022d1] memchr("\n/* Merge two sets of positions "..., '\n', 163) = 0x00f0c6f9
[0x4022d1] memchr("/* Merge two sets of positions i"..., '\n', 162) = 0x00f0c743
[0x4022d1] memchr("   the positions of both sets we"..., '\n', 88) = 0x00f0c78f
[0x4022d1] memchr("static void\nmerge(s1, s2, m)\n   "..., '\n', 12) = 0x00f0c79b
[0x4022d1] memchr("merge(s1, s2, m)\n     position_s"..., '\n', 0) = NULL
[0x4023cc] fwrite("7568:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("merge(s1, s2, m)\n     position_s"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     position_set *s1;\n     posi"..., '1', 6166) = 0x00f0c7c1
[0x40cdf3] memchr("1;\n     position_set *s2;\n     p"..., '\n', 6146) = 0x00f0c7c3
[0x4022d1] memchr("     position_set *s1;\n     posi"..., '\n', 0) = NULL
[0x4023cc] fwrite("7569:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     position_set *s1;\n     posi"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     position_set *s2;\n     posi"..., '1', 6143) = 0x00f0c826
[0x40cdf3] memchr("1->nelem && j < s2->nelem)\n    i"..., '\n', 6045) = 0x00f0c840
[0x4022d1] memchr("     position_set *s2;\n     posi"..., '\n', 84) = 0x00f0c7da
[0x4022d1] memchr("     position_set *m;\n{\n  int i "..., '\n', 61) = 0x00f0c7f0
[0x4022d1] memchr("{\n  int i = 0, j = 0;\n\n  m->nele"..., '\n', 39) = 0x00f0c7f2
[0x4022d1] memchr("  int i = 0, j = 0;\n\n  m->nelem "..., '\n', 37) = 0x00f0c806
[0x4022d1] memchr("\n  m->nelem = 0;\n  while (i < s1"..., '\n', 17) = 0x00f0c807
[0x4022d1] memchr("  m->nelem = 0;\n  while (i < s1-"..., '\n', 16) = 0x00f0c817
[0x4022d1] memchr("  while (i < s1->nelem && j < s2"..., '\n', 0) = NULL
[0x4023cc] fwrite("7576:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (i < s1->nelem && j < s2"..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    if (s1->elems[i].index > s2-"..., '1', 6018) = 0x00f0c84a
[0x40cdf3] memchr("1->elems[i].index > s2->elems[j]"..., '\n', 6009) = 0x00f0c871
[0x4022d1] memchr("    if (s1->elems[i].index > s2-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7577:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    if (s1->elems[i].index > s2-"..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      m->elems[m->nelem++] = s1-"..., '1', 5969) = 0x00f0c890
[0x40cdf3] memchr("1->elems[i++];\n    else if (s1->"..., '\n', 5939) = 0x00f0c89e
[0x4022d1] memchr("      m->elems[m->nelem++] = s1-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7578:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      m->elems[m->nelem++] = s1-"..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    else if (s1->elems[i].index "..., '1', 5924) = 0x00f0c8ad
[0x40cdf3] memchr("1->elems[i].index < s2->elems[j]"..., '\n', 5910) = 0x00f0c8d4
[0x4022d1] memchr("    else if (s1->elems[i].index "..., '\n', 0) = NULL
[0x4023cc] fwrite("7579:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    else if (s1->elems[i].index "..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      m->elems[m->nelem++] = s2-"..., '1', 5870) = 0x00f0c92a
[0x40cdf3] memchr("1->elems[i++];\n\tm->elems[m->nele"..., '\n', 5785) = 0x00f0c938
[0x4022d1] memchr("      m->elems[m->nelem++] = s2-"..., '\n', 62) = 0x00f0c901
[0x4022d1] memchr("    else\n      {\n\tm->elems[m->ne"..., '\n', 17) = 0x00f0c90a
[0x4022d1] memchr("      {\n\tm->elems[m->nelem] = s1"..., '\n', 8) = 0x00f0c912
[0x4022d1] memchr("\tm->elems[m->nelem] = s1->elems["..., '\n', 0) = NULL
[0x4023cc] fwrite("7583:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tm->elems[m->nelem] = s1->elems["..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tm->elems[m->nelem++].constraint"..., '1', 5770) = 0x00f0c98e
[0x40cdf3] memchr("1->nelem)\n    m->elems[m->nelem+"..., '\n', 5685) = 0x00f0c997
[0x4022d1] memchr("\tm->elems[m->nelem++].constraint"..., '\n', 71) = 0x00f0c977
[0x4022d1] memchr("      }\n  while (i < s1->nelem)\n"..., '\n', 8) = 0x00f0c97f
[0x4022d1] memchr("  while (i < s1->nelem)\n    m->e"..., '\n', 0) = NULL
[0x4023cc] fwrite("7586:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  while (i < s1->nelem)\n    m->e"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    m->elems[m->nelem++] = s1->e"..., '1', 5675) = 0x00f0c9b4
[0x40cdf3] memchr("1->elems[i++];\n  while (j < s2->"..., '\n', 5647) = 0x00f0c9c2
[0x4022d1] memchr("    m->elems[m->nelem++] = s1->e"..., '\n', 0) = NULL
[0x4023cc] fwrite("7587:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    m->elems[m->nelem++] = s1->e"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  while (j < s2->nelem)\n    m->e"..., '1', 5632) = 0x00f0cb2a
[0x40cdf3] memchr("1];\n}\n\n/* Find the index of the "..., '\n', 5273) = 0x00f0cb2d
[0x4022d1] memchr("  while (j < s2->nelem)\n    m->e"..., '\n', 326) = 0x00f0c9da
[0x4022d1] memchr("    m->elems[m->nelem++] = s2->e"..., '\n', 302) = 0x00f0ca05
[0x4022d1] memchr("}\n\n/* Delete a position from a s"..., '\n', 259) = 0x00f0ca07
[0x4022d1] memchr("\n/* Delete a position from a set"..., '\n', 257) = 0x00f0ca08
[0x4022d1] memchr("/* Delete a position from a set."..., '\n', 256) = 0x00f0ca2c
[0x4022d1] memchr("static void\ndelete(p, s)\n     po"..., '\n', 220) = 0x00f0ca38
[0x4022d1] memchr("delete(p, s)\n     position p;\n  "..., '\n', 208) = 0x00f0ca45
[0x4022d1] memchr("     position p;\n     position_s"..., '\n', 195) = 0x00f0ca56
[0x4022d1] memchr("     position_set *s;\n{\n  int i;"..., '\n', 178) = 0x00f0ca6c
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < s-"..., '\n', 156) = 0x00f0ca6e
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < s->n"..., '\n', 154) = 0x00f0ca77
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 145) = 0x00f0ca78
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 144) = 0x00f0ca99
[0x4022d1] memchr("    if (p.index == s->elems[i].i"..., '\n', 111) = 0x00f0cabf
[0x4022d1] memchr("      break;\n  if (i < s->nelem)"..., '\n', 73) = 0x00f0cacc
[0x4022d1] memchr("  if (i < s->nelem)\n    for (--s"..., '\n', 60) = 0x00f0cae0
[0x4022d1] memchr("    for (--s->nelem; i < s->nele"..., '\n', 40) = 0x00f0cb08
[0x4022d1] memchr("      s->elems[i] = s->elems[i +"..., '\n', 0) = NULL
[0x4023cc] fwrite("7605:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      s->elems[i] = s->elems[i +"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\n/* Find the index of the stat"..., '1', 5269) = 0x00f0ccec
[0x40cdf3] memchr("1 : 0;\n  letter = letter ? 1 : 0"..., '\n', 4823) = 0x00f0ccf2
[0x4022d1] memchr("}\n\n/* Find the index of the stat"..., '\n', 424) = 0x00f0cb2f
[0x4022d1] memchr("\n/* Find the index of the state "..., '\n', 422) = 0x00f0cb30
[0x4022d1] memchr("/* Find the index of the state c"..., '\n', 421) = 0x00f0cb7c
[0x4022d1] memchr("   the given preceding context, "..., '\n', 345) = 0x00f0cbc6
[0x4022d1] memchr("   state.  Newline and letter te"..., '\n', 271) = 0x00f0cc0d
[0x4022d1] memchr("   letter, respectively. */\nstat"..., '\n', 200) = 0x00f0cc29
[0x4022d1] memchr("static int\nstate_index(d, s, new"..., '\n', 172) = 0x00f0cc34
[0x4022d1] memchr("state_index(d, s, newline, lette"..., '\n', 161) = 0x00f0cc57
[0x4022d1] memchr("     struct dfa *d;\n     positio"..., '\n', 126) = 0x00f0cc6b
[0x4022d1] memchr("     position_set *s;\n     int n"..., '\n', 106) = 0x00f0cc81
[0x4022d1] memchr("     int newline;\n     int lette"..., '\n', 84) = 0x00f0cc93
[0x4022d1] memchr("     int letter;\n{\n  int hash = "..., '\n', 66) = 0x00f0cca4
[0x4022d1] memchr("{\n  int hash = 0;\n  int constrai"..., '\n', 49) = 0x00f0cca6
[0x4022d1] memchr("  int hash = 0;\n  int constraint"..., '\n', 47) = 0x00f0ccb6
[0x4022d1] memchr("  int constraint;\n  int i, j;\n\n "..., '\n', 31) = 0x00f0ccc8
[0x4022d1] memchr("  int i, j;\n\n  newline = newline"..., '\n', 13) = 0x00f0ccd4
[0x4022d1] memchr("\n  newline = newline ? 1 : 0;\n  "..., '\n', 1) = 0x00f0ccd5
[0x4022d1] memchr("  newline = newline ? 1 : 0;\n  l"..., '\n', 0) = NULL
[0x4023cc] fwrite("7623:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  newline = newline ? 1 : 0;\n  l"..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  letter = letter ? 1 : 0;\n\n  fo"..., '1', 4816) = 0x00f0cd07
[0x40cdf3] memchr("1 : 0;\n\n  for (i = 0; i < s->nel"..., '\n', 4796) = 0x00f0cd0d
[0x4022d1] memchr("  letter = letter ? 1 : 0;\n\n  fo"..., '\n', 0) = NULL
[0x4023cc] fwrite("7624:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  letter = letter ? 1 : 0;\n\n  fo"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '1', 4789) = 0x00f0d1c6
[0x40cdf3] memchr("1)\n\t    || SUCCEEDS_IN_CONTEXT(c"..., '\n', 3581) = 0x00f0d1c8
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 1148) = 0x00f0cd0e
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 1147) = 0x00f0cd2f
[0x4022d1] memchr("    hash ^= s->elems[i].index + "..., '\n', 1114) = 0x00f0cd67
[0x4022d1] memchr("\n  /* Try to find a state that e"..., '\n', 1058) = 0x00f0cd68
[0x4022d1] memchr("  /* Try to find a state that ex"..., '\n', 1057) = 0x00f0cdab
[0x4022d1] memchr("  for (i = 0; i < d->sindex; ++i"..., '\n', 990) = 0x00f0cdcd
[0x4022d1] memchr("    {\n      if (hash != d->state"..., '\n', 956) = 0x00f0cdd3
[0x4022d1] memchr("      if (hash != d->states[i].h"..., '\n', 950) = 0x00f0ce1f
[0x4022d1] memchr("\t  || newline != d->states[i].ne"..., '\n', 874) = 0x00f0ce67
[0x4022d1] memchr("\tcontinue;\n      for (j = 0; j <"..., '\n', 802) = 0x00f0ce72
[0x4022d1] memchr("      for (j = 0; j < s->nelem; "..., '\n', 791) = 0x00f0ce97
[0x4022d1] memchr("\tif (s->elems[j].constraint\n\t   "..., '\n', 754) = 0x00f0ceb3
[0x4022d1] memchr("\t    != d->states[i].elems.elems"..., '\n', 726) = 0x00f0cee2
[0x4022d1] memchr("\t    || s->elems[j].index != d->"..., '\n', 679) = 0x00f0cf22
[0x4022d1] memchr("\t  break;\n      if (j == s->nele"..., '\n', 615) = 0x00f0cf2c
[0x4022d1] memchr("      if (j == s->nelem)\n\treturn"..., '\n', 605) = 0x00f0cf45
[0x4022d1] memchr("\treturn i;\n    }\n\n  /* We'll hav"..., '\n', 580) = 0x00f0cf50
[0x4022d1] memchr("    }\n\n  /* We'll have to create"..., '\n', 569) = 0x00f0cf56
[0x4022d1] memchr("\n  /* We'll have to create a new"..., '\n', 563) = 0x00f0cf57
[0x4022d1] memchr("  /* We'll have to create a new "..., '\n', 562) = 0x00f0cf81
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(d->states"..., '\n', 520) = 0x00f0cfc5
[0x4022d1] memchr("  d->states[i].hash = hash;\n  MA"..., '\n', 452) = 0x00f0cfe1
[0x4022d1] memchr("  MALLOC(d->states[i].elems.elem"..., '\n', 424) = 0x00f0d019
[0x4022d1] memchr("  copy(s, &d->states[i].elems);\n"..., '\n', 368) = 0x00f0d039
[0x4022d1] memchr("  d->states[i].newline = newline"..., '\n', 336) = 0x00f0d05b
[0x4022d1] memchr("  d->states[i].letter = letter;\n"..., '\n', 302) = 0x00f0d07b
[0x4022d1] memchr("  d->states[i].backref = 0;\n  d-"..., '\n', 270) = 0x00f0d097
[0x4022d1] memchr("  d->states[i].constraint = 0;\n "..., '\n', 242) = 0x00f0d0b6
[0x4022d1] memchr("  d->states[i].first_end = 0;\n  "..., '\n', 211) = 0x00f0d0d4
[0x4022d1] memchr("  for (j = 0; j < s->nelem; ++j)"..., '\n', 181) = 0x00f0d0f5
[0x4022d1] memchr("    if (d->tokens[s->elems[j].in"..., '\n', 148) = 0x00f0d11f
[0x4022d1] memchr("      {\n\tconstraint = s->elems[j"..., '\n', 106) = 0x00f0d127
[0x4022d1] memchr("\tconstraint = s->elems[j].constr"..., '\n', 98) = 0x00f0d14d
[0x4022d1] memchr("\tif (SUCCEEDS_IN_CONTEXT(constra"..., '\n', 60) = 0x00f0d189
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7659:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 63, 0x7fce6d444260) = 63
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '1', 3578) = 0x00f0d1fa
[0x40cdf3] memchr("1, letter, 0)\n\t    || SUCCEEDS_I"..., '\n', 3529) = 0x00f0d207
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7660:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 63, 0x7fce6d444260) = 63
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '1', 3515) = 0x00f0d239
[0x40cdf3] memchr("1, letter, 1))\n\t  d->states[i].c"..., '\n', 3466) = 0x00f0d247
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7661:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 64, 0x7fce6d444260) = 64
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  d->states[i].constraint |= co"..., '1', 3451) = 0x00f0d353
[0x40cdf3] memchr("1;\n      }\n\n  ++d->sindex;\n\n  re"..., '\n', 3184) = 0x00f0d355
[0x4022d1] memchr("\t  d->states[i].constraint |= co"..., '\n', 243) = 0x00f0d271
[0x4022d1] memchr("\tif (! d->states[i].first_end)\n\t"..., '\n', 201) = 0x00f0d290
[0x4022d1] memchr("\t  d->states[i].first_end = d->t"..., '\n', 170) = 0x00f0d2ca
[0x4022d1] memchr("      }\n    else if (d->tokens[s"..., '\n', 112) = 0x00f0d2d2
[0x4022d1] memchr("    else if (d->tokens[s->elems["..., '\n', 104) = 0x00f0d308
[0x4022d1] memchr("      {\n\td->states[i].constraint"..., '\n', 50) = 0x00f0d310
[0x4022d1] memchr("\td->states[i].constraint = NO_CO"..., '\n', 42) = 0x00f0d33a
[0x4022d1] memchr("\td->states[i].backref = 1;\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("7669:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\td->states[i].backref = 1;\n     "..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      }\n\n  ++d->sindex;\n\n  retur"..., '1', 3181) = 0x00f0d6fe
[0x40cdf3] memchr("1;\n\tswitch (d->tokens[old.index]"..., '\n', 2245) = 0x00f0d700
[0x4022d1] memchr("      }\n\n  ++d->sindex;\n\n  retur"..., '\n', 914) = 0x00f0d35d
[0x4022d1] memchr("\n  ++d->sindex;\n\n  return i;\n}\n\n"..., '\n', 906) = 0x00f0d35e
[0x4022d1] memchr("  ++d->sindex;\n\n  return i;\n}\n\n/"..., '\n', 905) = 0x00f0d36d
[0x4022d1] memchr("\n  return i;\n}\n\n/* Find the epsi"..., '\n', 890) = 0x00f0d36e
[0x4022d1] memchr("  return i;\n}\n\n/* Find the epsil"..., '\n', 889) = 0x00f0d37a
[0x4022d1] memchr("}\n\n/* Find the epsilon closure o"..., '\n', 877) = 0x00f0d37c
[0x4022d1] memchr("\n/* Find the epsilon closure of "..., '\n', 875) = 0x00f0d37d
[0x4022d1] memchr("/* Find the epsilon closure of a"..., '\n', 874) = 0x00f0d3cc
[0x4022d1] memchr("   contains a symbol that matche"..., '\n', 795) = 0x00f0d418
[0x4022d1] memchr("   that position with the elemen"..., '\n', 719) = 0x00f0d465
[0x4022d1] memchr("   constraint.  Repeat exhaustiv"..., '\n', 642) = 0x00f0d4ac
[0x4022d1] memchr("   S->elems must be large enough"..., '\n', 571) = 0x00f0d4e4
[0x4022d1] memchr("void\nepsclosure(s, d)\n     posit"..., '\n', 515) = 0x00f0d4e9
[0x4022d1] memchr("epsclosure(s, d)\n     position_s"..., '\n', 510) = 0x00f0d4fa
[0x4022d1] memchr("     position_set *s;\n     struc"..., '\n', 493) = 0x00f0d510
[0x4022d1] memchr("     struct dfa *d;\n{\n  int i, j"..., '\n', 471) = 0x00f0d524
[0x4022d1] memchr("{\n  int i, j;\n  int *visited;\n  "..., '\n', 451) = 0x00f0d526
[0x4022d1] memchr("  int i, j;\n  int *visited;\n  po"..., '\n', 449) = 0x00f0d532
[0x4022d1] memchr("  int *visited;\n  position p, ol"..., '\n', 437) = 0x00f0d542
[0x4022d1] memchr("  position p, old;\n\n  MALLOC(vis"..., '\n', 421) = 0x00f0d555
[0x4022d1] memchr("\n  MALLOC(visited, int, d->tinde"..., '\n', 402) = 0x00f0d556
[0x4022d1] memchr("  MALLOC(visited, int, d->tindex"..., '\n', 401) = 0x00f0d579
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 366) = 0x00f0d59b
[0x4022d1] memchr("    visited[i] = 0;\n\n  for (i = "..., '\n', 332) = 0x00f0d5af
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 312) = 0x00f0d5b0
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 311) = 0x00f0d5d1
[0x4022d1] memchr("    if (d->tokens[s->elems[i].in"..., '\n', 278) = 0x00f0d601
[0x4022d1] memchr("\t&& d->tokens[s->elems[i].index]"..., '\n', 230) = 0x00f0d62d
[0x4022d1] memchr("\t&& d->tokens[s->elems[i].index]"..., '\n', 186) = 0x00f0d656
[0x4022d1] memchr("      {\n\told = s->elems[i];\n\tp.c"..., '\n', 145) = 0x00f0d65e
[0x4022d1] memchr("\told = s->elems[i];\n\tp.constrain"..., '\n', 137) = 0x00f0d672
[0x4022d1] memchr("\tp.constraint = old.constraint;\n"..., '\n', 117) = 0x00f0d692
[0x4022d1] memchr("\tdelete(s->elems[i], s);\n\tif (vi"..., '\n', 85) = 0x00f0d6ab
[0x4022d1] memchr("\tif (visited[old.index])\n\t  {\n\t "..., '\n', 60) = 0x00f0d6c4
[0x4022d1] memchr("\t  {\n\t    --i;\n\t    continue;\n\t "..., '\n', 35) = 0x00f0d6c9
[0x4022d1] memchr("\t    --i;\n\t    continue;\n\t  }\n\tv"..., '\n', 30) = 0x00f0d6d3
[0x4022d1] memchr("\t    continue;\n\t  }\n\tvisited[old"..., '\n', 20) = 0x00f0d6e2
[0x4022d1] memchr("\t  }\n\tvisited[old.index] = 1;\n\ts"..., '\n', 5) = 0x00f0d6e7
[0x4022d1] memchr("\tvisited[old.index] = 1;\n\tswitch"..., '\n', 0) = NULL
[0x4023cc] fwrite("7708:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tvisited[old.index] = 1;\n\tswitch"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tswitch (d->tokens[old.index])\n\t"..., '1', 2242) = 0x00f0d9a6
[0x40cdf3] memchr("1;\n      }\n\n  free(visited);\n}\n\n"..., '\n', 1565) = 0x00f0d9a8
[0x4022d1] memchr("\tswitch (d->tokens[old.index])\n\t"..., '\n', 671) = 0x00f0d71f
[0x4022d1] memchr("\t  {\n\t  case BEGLINE:\n\t    p.con"..., '\n', 640) = 0x00f0d724
[0x4022d1] memchr("\t  case BEGLINE:\n\t    p.constrai"..., '\n', 635) = 0x00f0d735
[0x4022d1] memchr("\t    p.constraint &= BEGLINE_CON"..., '\n', 618) = 0x00f0d75e
[0x4022d1] memchr("\t    break;\n\t  case ENDLINE:\n\t  "..., '\n', 577) = 0x00f0d76a
[0x4022d1] memchr("\t  case ENDLINE:\n\t    p.constrai"..., '\n', 565) = 0x00f0d77b
[0x4022d1] memchr("\t    p.constraint &= ENDLINE_CON"..., '\n', 548) = 0x00f0d7a4
[0x4022d1] memchr("\t    break;\n\t  case BEGWORD:\n\t  "..., '\n', 507) = 0x00f0d7b0
[0x4022d1] memchr("\t  case BEGWORD:\n\t    p.constrai"..., '\n', 495) = 0x00f0d7c1
[0x4022d1] memchr("\t    p.constraint &= BEGWORD_CON"..., '\n', 478) = 0x00f0d7ea
[0x4022d1] memchr("\t    break;\n\t  case ENDWORD:\n\t  "..., '\n', 437) = 0x00f0d7f6
[0x4022d1] memchr("\t  case ENDWORD:\n\t    p.constrai"..., '\n', 425) = 0x00f0d807
[0x4022d1] memchr("\t    p.constraint &= ENDWORD_CON"..., '\n', 408) = 0x00f0d830
[0x4022d1] memchr("\t    break;\n\t  case LIMWORD:\n\t  "..., '\n', 367) = 0x00f0d83c
[0x4022d1] memchr("\t  case LIMWORD:\n\t    p.constrai"..., '\n', 355) = 0x00f0d84d
[0x4022d1] memchr("\t    p.constraint &= LIMWORD_CON"..., '\n', 338) = 0x00f0d876
[0x4022d1] memchr("\t    break;\n\t  case NOTLIMWORD:\n"..., '\n', 297) = 0x00f0d882
[0x4022d1] memchr("\t  case NOTLIMWORD:\n\t    p.const"..., '\n', 285) = 0x00f0d896
[0x4022d1] memchr("\t    p.constraint &= NOTLIMWORD_"..., '\n', 265) = 0x00f0d8c2
[0x4022d1] memchr("\t    break;\n\t  default:\n\t    bre"..., '\n', 221) = 0x00f0d8ce
[0x4022d1] memchr("\t  default:\n\t    break;\n\t  }\n\tfo"..., '\n', 209) = 0x00f0d8da
[0x4022d1] memchr("\t    break;\n\t  }\n\tfor (j = 0; j "..., '\n', 197) = 0x00f0d8e6
[0x4022d1] memchr("\t  }\n\tfor (j = 0; j < d->follows"..., '\n', 185) = 0x00f0d8eb
[0x4022d1] memchr("\tfor (j = 0; j < d->follows[old."..., '\n', 180) = 0x00f0d91e
[0x4022d1] memchr("\t  {\n\t    p.index = d->follows[o"..., '\n', 129) = 0x00f0d923
[0x4022d1] memchr("\t    p.index = d->follows[old.in"..., '\n', 124) = 0x00f0d958
[0x4022d1] memchr("\t    insert(p, s);\n\t  }\n\t/* Forc"..., '\n', 71) = 0x00f0d96b
[0x4022d1] memchr("\t  }\n\t/* Force rescan to start a"..., '\n', 52) = 0x00f0d970
[0x4022d1] memchr("\t/* Force rescan to start at the"..., '\n', 47) = 0x00f0d99f
[0x4022d1] memchr("\ti = -1;\n      }\n\n  free(visited"..., '\n', 0) = NULL
[0x4023cc] fwrite("7738:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\ti = -1;\n      }\n\n  free(visited"..., 1, 9, 0x7fce6d444260) = 9
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      }\n\n  free(visited);\n}\n\n/* "..., '1', 1562) = NULL
[0x4022d1] memchr("      }\n\n  free(visited);\n}\n\n/* "..., '\n', 1562) = 0x00f0d9b0
[0x4022d1] memchr("\n  free(visited);\n}\n\n/* Perform "..., '\n', 1554) = 0x00f0d9b1
[0x4022d1] memchr("  free(visited);\n}\n\n/* Perform b"..., '\n', 1553) = 0x00f0d9c2
[0x4022d1] memchr("}\n\n/* Perform bottom-up analysis"..., '\n', 1536) = 0x00f0d9c4
[0x4022d1] memchr("\n/* Perform bottom-up analysis o"..., '\n', 1534) = 0x00f0d9c5
[0x4022d1] memchr("/* Perform bottom-up analysis on"..., '\n', 1533) = 0x00f0da13
[0x4022d1] memchr("   Note that at this point, we'r"..., '\n', 1455) = 0x00f0da5c
[0x4022d1] memchr("   characters rather than constr"..., '\n', 1382) = 0x00f0da9b
[0x4022d1] memchr("\n   Nullable:  A node is nullabl"..., '\n', 1319) = 0x00f0da9c
[0x4022d1] memchr("   Nullable:  A node is nullable"..., '\n', 1318) = 0x00f0dae7
[0x4022d1] memchr("   match the empty string.\n   * "..., '\n', 1243) = 0x00f0db02
[0x4022d1] memchr("   *  EMPTY leaves are nullable."..., '\n', 1216) = 0x00f0db23
[0x4022d1] memchr("   * No other leaf is nullable.\n"..., '\n', 1183) = 0x00f0db43
[0x4022d1] memchr("   * A QMARK or STAR node is nul"..., '\n', 1151) = 0x00f0db6a
[0x4022d1] memchr("   * A PLUS node is nullable if "..., '\n', 1112) = 0x00f0dba4
[0x4022d1] memchr("   * A CAT node is nullable if b"..., '\n', 1054) = 0x00f0dbe4
[0x4022d1] memchr("   * An OR node is nullable if e"..., '\n', 990) = 0x00f0dc20
[0x4022d1] memchr("\n   Firstpos:  The firstpos of a"..., '\n', 930) = 0x00f0dc21
[0x4022d1] memchr("   Firstpos:  The firstpos of a "..., '\n', 929) = 0x00f0dc70
[0x4022d1] memchr("   that could correspond to the "..., '\n', 850) = 0x00f0dcb9
[0x4022d1] memchr("   regexp rooted at the given no"..., '\n', 777) = 0x00f0dcdd
[0x4022d1] memchr("   * EMPTY leaves have empty fir"..., '\n', 741) = 0x00f0dd04
[0x4022d1] memchr("   * The firstpos of a nonempty "..., '\n', 702) = 0x00f0dd3e
[0x4022d1] memchr("   * The firstpos of a QMARK, ST"..., '\n', 644) = 0x00f0dd86
[0x4022d1] memchr("     argument.\n   * The firstpos"..., '\n', 572) = 0x00f0dd95
[0x4022d1] memchr("   * The firstpos of a CAT node "..., '\n', 557) = 0x00f0dde1
[0x4022d1] memchr("     the firstpos of the right i"..., '\n', 481) = 0x00f0de22
[0x4022d1] memchr("   * The firstpos of an OR node "..., '\n', 416) = 0x00f0de6d
[0x4022d1] memchr("\n   Lastpos:  The lastpos of a n"..., '\n', 341) = 0x00f0de6e
[0x4022d1] memchr("   Lastpos:  The lastpos of a no"..., '\n', 340) = 0x00f0deb4
[0x4022d1] memchr("   correspond to the last charac"..., '\n', 270) = 0x00f0defb
[0x4022d1] memchr("   the given node.\n   * EMPTY le"..., '\n', 199) = 0x00f0df0e
[0x4022d1] memchr("   * EMPTY leaves have empty las"..., '\n', 180) = 0x00f0df34
[0x4022d1] memchr("   * The lastpos of a nonempty l"..., '\n', 142) = 0x00f0df6d
[0x4022d1] memchr("   * The lastpos of a QMARK, STA"..., '\n', 85) = 0x00f0dfb3
[0x4022d1] memchr("     argument.\n   * The lastpos "..., '\n', 15) = 0x00f0dfc2
[0x4022d1] memchr("   * The lastpos of a CAT node i"..., '\n', 0) = NULL
[0x4020b3] memmove(0xf05fc3, 0xf0dfc3, 61, 0xf0dfc3, 0x7fce6d444260) = 0xf05fc3
[0x402213] read(3, "gument, union\n     the lastpos o"..., 32768) = 32768
[0x40bc2b] memchr("   * The lastpos of a CAT node i"..., '1', 32814) = 0x00f06b7d
[0x40cdf3] memchr("1;\n\n\t/* The firstpos and lastpos"..., '\n', 29812) = 0x00f06b7f
[0x4022d1] memchr("   * The lastpos of a CAT node i"..., '\n', 2987) = 0x00f0600d
[0x4022d1] memchr("     the lastpos of the left if "..., '\n', 2912) = 0x00f0604d
[0x4022d1] memchr("   * The lastpos of an OR node i"..., '\n', 2848) = 0x00f0609a
[0x4022d1] memchr("\n   Follow:  The follow of a pos"..., '\n', 2771) = 0x00f0609b
[0x4022d1] memchr("   Follow:  The follow of a posi"..., '\n', 2770) = 0x00f060e3
[0x4022d1] memchr("   correspond to the character f"..., '\n', 2698) = 0x00f0612d
[0x4022d1] memchr("   a string matching the regexp."..., '\n', 2624) = 0x00f06179
[0x4022d1] memchr("   that match the empty string i"..., '\n', 2548) = 0x00f061c6
[0x4022d1] memchr("   Later, if we find that a spec"..., '\n', 2471) = 0x00f0620d
[0x4022d1] memchr("   replace it with the elements "..., '\n', 2400) = 0x00f06258
[0x4022d1] memchr("   constraint.\n   * Every node i"..., '\n', 2325) = 0x00f06267
[0x4022d1] memchr("   * Every node in the firstpos "..., '\n', 2310) = 0x00f062b4
[0x4022d1] memchr("     the follow of every node in"..., '\n', 2233) = 0x00f062e2
[0x4022d1] memchr("   * Every node in the firstpos "..., '\n', 2187) = 0x00f0632d
[0x4022d1] memchr("     the follow of every node in"..., '\n', 2112) = 0x00f06371
[0x4022d1] memchr("\n   Because of the postfix repre"..., '\n', 2044) = 0x00f06372
[0x4022d1] memchr("   Because of the postfix repres"..., '\n', 2043) = 0x00f063be
[0x4022d1] memchr("   analysis is conveniently done"..., '\n', 1967) = 0x00f06409
[0x4022d1] memchr("   Sets are stored as arrays of "..., '\n', 1892) = 0x00f06457
[0x4022d1] memchr("   scheme; the number of element"..., '\n', 1814) = 0x00f064a0
[0x4022d1] memchr("   used to determine the address"..., '\n', 1741) = 0x00f064e1
[0x4022d1] memchr("void\ndfaanalyze(d, searchflag)\n "..., '\n', 1676) = 0x00f064e6
[0x4022d1] memchr("dfaanalyze(d, searchflag)\n     s"..., '\n', 1671) = 0x00f06500
[0x4022d1] memchr("     struct dfa *d;\n     int sea"..., '\n', 1645) = 0x00f06514
[0x4022d1] memchr("     int searchflag;\n{\n  int *nu"..., '\n', 1625) = 0x00f06529
[0x4022d1] memchr("{\n  int *nullable;\t\t/* Nullable "..., '\n', 1604) = 0x00f0652b
[0x4022d1] memchr("  int *nullable;\t\t/* Nullable st"..., '\n', 1602) = 0x00f06553
[0x4022d1] memchr("  int *nfirstpos;\t\t/* Element co"..., '\n', 1562) = 0x00f06593
[0x4022d1] memchr("  position *firstpos;\t\t/* Array "..., '\n', 1498) = 0x00f065da
[0x4022d1] memchr("  int *nlastpos;\t\t/* Element cou"..., '\n', 1427) = 0x00f06618
[0x4022d1] memchr("  position *lastpos;\t\t/* Array w"..., '\n', 1365) = 0x00f0665d
[0x4022d1] memchr("  int *nalloc;\t\t\t/* Sizes of arr"..., '\n', 1296) = 0x00f0669e
[0x4022d1] memchr("  position_set tmp;\t\t/* Temporar"..., '\n', 1231) = 0x00f066d9
[0x4022d1] memchr("  position_set merged;\t\t/* Resul"..., '\n', 1172) = 0x00f0670f
[0x4022d1] memchr("  int wants_newline;\t\t/* True if"..., '\n', 1118) = 0x00f06755
[0x4022d1] memchr("  int *o_nullable;\n  int *o_nfir"..., '\n', 1048) = 0x00f06768
[0x4022d1] memchr("  int *o_nfirst, *o_nlast;\n  pos"..., '\n', 1029) = 0x00f06783
[0x4022d1] memchr("  position *o_firstpos, *o_lastp"..., '\n', 1002) = 0x00f067a7
[0x4022d1] memchr("  int i, j;\n  position *pos;\n\n#i"..., '\n', 966) = 0x00f067b3
[0x4022d1] memchr("  position *pos;\n\n#ifdef DEBUG\n "..., '\n', 954) = 0x00f067c4
[0x4022d1] memchr("\n#ifdef DEBUG\n  fprintf(stderr, "..., '\n', 937) = 0x00f067c5
[0x4022d1] memchr("#ifdef DEBUG\n  fprintf(stderr, ""..., '\n', 936) = 0x00f067d2
[0x4022d1] memchr("  fprintf(stderr, "dfaanalyze:\\n"..., '\n', 923) = 0x00f067f6
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 887) = 0x00f06818
[0x4022d1] memchr("    {\n      fprintf(stderr, " %d"..., '\n', 853) = 0x00f0681e
[0x4022d1] memchr("      fprintf(stderr, " %d:", i)"..., '\n', 847) = 0x00f06840
[0x4022d1] memchr("      prtok(d->tokens[i]);\n    }"..., '\n', 813) = 0x00f0685b
[0x4022d1] memchr("    }\n  putc('\\n', stderr);\n#end"..., '\n', 786) = 0x00f06861
[0x4022d1] memchr("  putc('\\n', stderr);\n#endif\n\n  "..., '\n', 780) = 0x00f06877
[0x4022d1] memchr("#endif\n\n  d->searchflag = search"..., '\n', 758) = 0x00f0687e
[0x4022d1] memchr("\n  d->searchflag = searchflag;\n\n"..., '\n', 751) = 0x00f0687f
[0x4022d1] memchr("  d->searchflag = searchflag;\n\n "..., '\n', 750) = 0x00f0689d
[0x4022d1] memchr("\n  MALLOC(nullable, int, d->dept"..., '\n', 720) = 0x00f0689e
[0x4022d1] memchr("  MALLOC(nullable, int, d->depth"..., '\n', 719) = 0x00f068c1
[0x4022d1] memchr("  o_nullable = nullable;\n  MALLO"..., '\n', 684) = 0x00f068da
[0x4022d1] memchr("  MALLOC(nfirstpos, int, d->dept"..., '\n', 659) = 0x00f068fe
[0x4022d1] memchr("  o_nfirst = nfirstpos;\n  MALLOC"..., '\n', 623) = 0x00f06916
[0x4022d1] memchr("  MALLOC(firstpos, position, d->"..., '\n', 599) = 0x00f06940
[0x4022d1] memchr("  o_firstpos = firstpos, firstpo"..., '\n', 557) = 0x00f06971
[0x4022d1] memchr("  MALLOC(nlastpos, int, d->depth"..., '\n', 508) = 0x00f06994
[0x4022d1] memchr("  o_nlast = nlastpos;\n  MALLOC(l"..., '\n', 473) = 0x00f069aa
[0x4022d1] memchr("  MALLOC(lastpos, position, d->n"..., '\n', 451) = 0x00f069d3
[0x4022d1] memchr("  o_lastpos = lastpos, lastpos +"..., '\n', 410) = 0x00f06a01
[0x4022d1] memchr("  MALLOC(nalloc, int, d->tindex)"..., '\n', 364) = 0x00f06a23
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 330) = 0x00f06a45
[0x4022d1] memchr("    nalloc[i] = 0;\n  MALLOC(merg"..., '\n', 296) = 0x00f06a58
[0x4022d1] memchr("  MALLOC(merged.elems, position,"..., '\n', 277) = 0x00f06a86
[0x4022d1] memchr("\n  CALLOC(d->follows, position_s"..., '\n', 231) = 0x00f06a87
[0x4022d1] memchr("  CALLOC(d->follows, position_se"..., '\n', 230) = 0x00f06ab6
[0x4022d1] memchr("\n  for (i = 0; i < d->tindex; ++"..., '\n', 183) = 0x00f06ab7
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 182) = 0x00f06ad9
[0x4022d1] memchr("#ifdef DEBUG\n    {\t\t\t\t/* Nonsynt"..., '\n', 148) = 0x00f06ae6
[0x4022d1] memchr("    {\t\t\t\t/* Nonsyntactic #ifdef "..., '\n', 135) = 0x00f06b10
[0x4022d1] memchr("#endif\n    switch (d->tokens[i])"..., '\n', 93) = 0x00f06b17
[0x4022d1] memchr("    switch (d->tokens[i])\n      "..., '\n', 86) = 0x00f06b31
[0x4022d1] memchr("      {\n      case EMPTY:\n\t/* Th"..., '\n', 60) = 0x00f06b39
[0x4022d1] memchr("      case EMPTY:\n\t/* The empty "..., '\n', 52) = 0x00f06b4b
[0x4022d1] memchr("\t/* The empty set is nullable. *"..., '\n', 34) = 0x00f06b6d
[0x4022d1] memchr("\t*nullable++ = 1;\n\n\t/* The first"..., '\n', 0) = NULL
[0x4023cc] fwrite("7853:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t*nullable++ = 1;\n\n\t/* The first"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\t/* The firstpos and lastpos of"..., '1', 29809) = 0x00f06c92
[0x40cdf3] memchr("1];\n\ttmp.elems = firstpos;\n\tpos "..., '\n', 29535) = 0x00f06c95
[0x4022d1] memchr("\n\t/* The firstpos and lastpos of"..., '\n', 250) = 0x00f06b80
[0x4022d1] memchr("\t/* The firstpos and lastpos of "..., '\n', 249) = 0x00f06bc2
[0x4022d1] memchr("\t*nfirstpos++ = *nlastpos++ = 0;"..., '\n', 183) = 0x00f06be3
[0x4022d1] memchr("\tbreak;\n\n      case STAR:\n      "..., '\n', 150) = 0x00f06beb
[0x4022d1] memchr("\n      case STAR:\n      case PLU"..., '\n', 142) = 0x00f06bec
[0x4022d1] memchr("      case STAR:\n      case PLUS"..., '\n', 141) = 0x00f06bfd
[0x4022d1] memchr("      case PLUS:\n\t/* Every eleme"..., '\n', 124) = 0x00f06c0e
[0x4022d1] memchr("\t/* Every element in the firstpo"..., '\n', 107) = 0x00f06c51
[0x4022d1] memchr("\t   of every element in the last"..., '\n', 40) = 0x00f06c79
[0x4022d1] memchr("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., '\n', 0) = NULL
[0x4023cc] fwrite("7863:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '1', 29531) = 0x00f06cd8
[0x40cdf3] memchr("1]; ++j)\n\t  {\n\t    merge(&tmp, &"..., '\n', 29465) = 0x00f06ce0
[0x4022d1] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '\n', 39) = 0x00f06cac
[0x4022d1] memchr("\tpos = lastpos;\n\tfor (j = 0; j <"..., '\n', 16) = 0x00f06cbc
[0x4022d1] memchr("\tfor (j = 0; j < nlastpos[-1]; +"..., '\n', 0) = NULL
[0x4023cc] fwrite("7866:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tfor (j = 0; j < nlastpos[-1]; +"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  {\n\t    merge(&tmp, &d->follow"..., '1', 29456) = 0x00f06d8a
[0x40cdf3] memchr("1);\n\t    copy(&merged, &d->follo"..., '\n', 29287) = 0x00f06d8d
[0x4022d1] memchr("\t  {\n\t    merge(&tmp, &d->follow"..., '\n', 127) = 0x00f06ce5
[0x4022d1] memchr("\t    merge(&tmp, &d->follows[pos"..., '\n', 122) = 0x00f06d1b
[0x4022d1] memchr("\t    REALLOC_IF_NECESSARY(d->fol"..., '\n', 68) = 0x00f06d5f
[0x4022d1] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., '\n', 0) = NULL
[0x4023cc] fwrite("7870:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t\t nalloc[pos[j].index], merge"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    copy(&merged, &d->follows[p"..., '1', 29283) = 0x00f06e34
[0x40cdf3] memchr("1] = 1;\n\tbreak;\n\n      case CAT:"..., '\n', 29117) = 0x00f06e3b
[0x4022d1] memchr("\t    copy(&merged, &d->follows[p"..., '\n', 153) = 0x00f06dbc
[0x4022d1] memchr("\t  }\n\n      case QMARK:\n\t/* A QM"..., '\n', 106) = 0x00f06dc1
[0x4022d1] memchr("\n      case QMARK:\n\t/* A QMARK o"..., '\n', 101) = 0x00f06dc2
[0x4022d1] memchr("      case QMARK:\n\t/* A QMARK or"..., '\n', 100) = 0x00f06dd4
[0x4022d1] memchr("\t/* A QMARK or STAR node is auto"..., '\n', 82) = 0x00f06e0b
[0x4022d1] memchr("\tif (d->tokens[i] != PLUS)\n\t  nu"..., '\n', 27) = 0x00f06e26
[0x4022d1] memchr("\t  nullable[-1] = 1;\n\tbreak;\n\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("7877:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  nullable[-1] = 1;\n\tbreak;\n\n  "..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tbreak;\n\n      case CAT:\n\t/* Eve"..., '1', 29109) = 0x00f06ef5
[0x40cdf3] memchr("1];\n\ttmp.elems = firstpos;\n\tpos "..., '\n', 28924) = 0x00f06ef8
[0x4022d1] memchr("\tbreak;\n\n      case CAT:\n\t/* Eve"..., '\n', 161) = 0x00f06e43
[0x4022d1] memchr("\n      case CAT:\n\t/* Every eleme"..., '\n', 153) = 0x00f06e44
[0x4022d1] memchr("      case CAT:\n\t/* Every elemen"..., '\n', 152) = 0x00f06e54
[0x4022d1] memchr("\t/* Every element in the firstpo"..., '\n', 136) = 0x00f06e97
[0x4022d1] memchr("\t   follow of every element in t"..., '\n', 69) = 0x00f06edc
[0x4022d1] memchr("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., '\n', 0) = NULL
[0x4023cc] fwrite("7883:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '1', 28920) = 0x00f06f2b
[0x40cdf3] memchr("1];\n\tfor (j = 0; j < nlastpos[-2"..., '\n', 28870) = 0x00f06f2e
[0x4022d1] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '\n', 23) = 0x00f06f0f
[0x4022d1] memchr("\tpos = lastpos + nlastpos[-1];\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7885:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tpos = lastpos + nlastpos[-1];\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tfor (j = 0; j < nlastpos[-2]; +"..., '1', 28866) = 0x00f06ffc
[0x40cdf3] memchr("1);\n\t    copy(&merged, &d->follo"..., '\n', 28661) = 0x00f06fff
[0x4022d1] memchr("\tfor (j = 0; j < nlastpos[-2]; +"..., '\n', 163) = 0x00f06f52
[0x4022d1] memchr("\t  {\n\t    merge(&tmp, &d->follow"..., '\n', 127) = 0x00f06f57
[0x4022d1] memchr("\t    merge(&tmp, &d->follows[pos"..., '\n', 122) = 0x00f06f8d
[0x4022d1] memchr("\t    REALLOC_IF_NECESSARY(d->fol"..., '\n', 68) = 0x00f06fd1
[0x4022d1] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., '\n', 0) = NULL
[0x4023cc] fwrite("7890:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t\t nalloc[pos[j].index], merge"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    copy(&merged, &d->follows[p"..., '1', 28657) = 0x00f070f0
[0x40cdf3] memchr("1];\n\telse\n\t  firstpos += nfirstp"..., '\n', 28417) = 0x00f070f3
[0x4022d1] memchr("\t    copy(&merged, &d->follows[p"..., '\n', 209) = 0x00f0702e
[0x4022d1] memchr("\t  }\n\n\t/* The firstpos of a CAT "..., '\n', 162) = 0x00f07033
[0x4022d1] memchr("\n\t/* The firstpos of a CAT node "..., '\n', 157) = 0x00f07034
[0x4022d1] memchr("\t/* The firstpos of a CAT node i"..., '\n', 156) = 0x00f0707a
[0x4022d1] memchr("\t   union that of the second arg"..., '\n', 86) = 0x00f070bd
[0x4022d1] memchr("\tif (nullable[-2])\n\t  nfirstpos["..., '\n', 19) = 0x00f070d0
[0x4022d1] memchr("\t  nfirstpos[-2] += nfirstpos[-1"..., '\n', 0) = NULL
[0x4023cc] fwrite("7897:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  nfirstpos[-2] += nfirstpos[-1"..., 1, 35, 0x7fce6d444260) = 35
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\telse\n\t  firstpos += nfirstpos[-"..., '1', 28413) = 0x00f07114
[0x40cdf3] memchr("1];\n\t--nfirstpos;\n\n\t/* The lastp"..., '\n', 28381) = 0x00f07117
[0x4022d1] memchr("\telse\n\t  firstpos += nfirstpos[-"..., '\n', 6) = 0x00f070f9
[0x4022d1] memchr("\t  firstpos += nfirstpos[-1];\n\t-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7899:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  firstpos += nfirstpos[-1];\n\t-"..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--nfirstpos;\n\n\t/* The lastpos o"..., '1', 28377) = 0x00f071be
[0x40cdf3] memchr("1])\n\t  nlastpos[-2] += nlastpos["..., '\n', 28211) = 0x00f071c1
[0x4022d1] memchr("\t--nfirstpos;\n\n\t/* The lastpos o"..., '\n', 151) = 0x00f07125
[0x4022d1] memchr("\n\t/* The lastpos of a CAT node i"..., '\n', 137) = 0x00f07126
[0x4022d1] memchr("\t/* The lastpos of a CAT node is"..., '\n', 136) = 0x00f0716b
[0x4022d1] memchr("\t   union that of the first argu"..., '\n', 67) = 0x00f071ae
[0x4022d1] memchr("\tif (nullable[-1])\n\t  nlastpos[-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7904:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tif (nullable[-1])\n\t  nlastpos[-"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  nlastpos[-2] += nlastpos[-1];"..., '1', 28207) = 0x00f071df
[0x40cdf3] memchr("1];\n\telse\n\t  {\n\t    pos = lastpo"..., '\n', 28178) = 0x00f071e2
[0x4022d1] memchr("\t  nlastpos[-2] += nlastpos[-1];"..., '\n', 0) = NULL
[0x4023cc] fwrite("7905:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  nlastpos[-2] += nlastpos[-1];"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\telse\n\t  {\n\t    pos = lastpos + "..., '1', 28174) = 0x00f07229
[0x40cdf3] memchr("1] - 1; j >= 0; --j)\n\t      pos["..., '\n', 28104) = 0x00f0723d
[0x4022d1] memchr("\telse\n\t  {\n\t    pos = lastpos + "..., '\n', 46) = 0x00f071e8
[0x4022d1] memchr("\t  {\n\t    pos = lastpos + nlastp"..., '\n', 40) = 0x00f071ed
[0x4022d1] memchr("\t    pos = lastpos + nlastpos[-2"..., '\n', 35) = 0x00f07210
[0x4022d1] memchr("\t    for (j = nlastpos[-1] - 1; "..., '\n', 0) = NULL
[0x4023cc] fwrite("7909:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    for (j = nlastpos[-1] - 1; "..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      pos[j] = lastpos[j];\n\t   "..., '1', 28083) = 0x00f07296
[0x40cdf3] memchr("1];\n\t  }\n\t--nlastpos;\n\n\t/* A CAT"..., '\n', 27995) = 0x00f07299
[0x4022d1] memchr("\t      pos[j] = lastpos[j];\n\t   "..., '\n', 58) = 0x00f07259
[0x4022d1] memchr("\t    lastpos += nlastpos[-2];\n\t "..., '\n', 30) = 0x00f07277
[0x4022d1] memchr("\t    nlastpos[-2] = nlastpos[-1]"..., '\n', 0) = NULL
[0x4023cc] fwrite("7912:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    nlastpos[-2] = nlastpos[-1]"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  }\n\t--nlastpos;\n\n\t/* A CAT nod"..., '1', 27991) = 0x00f07305
[0x40cdf3] memchr("1] && nullable[-2];\n\t--nullable;"..., '\n', 27884) = 0x00f07318
[0x4022d1] memchr("\t  }\n\t--nlastpos;\n\n\t/* A CAT nod"..., '\n', 81) = 0x00f0729e
[0x4022d1] memchr("\t--nlastpos;\n\n\t/* A CAT node is "..., '\n', 76) = 0x00f072ab
[0x4022d1] memchr("\n\t/* A CAT node is nullable if b"..., '\n', 63) = 0x00f072ac
[0x4022d1] memchr("\t/* A CAT node is nullable if bo"..., '\n', 62) = 0x00f072ea
[0x4022d1] memchr("\tnullable[-2] = nullable[-1] && "..., '\n', 0) = NULL
[0x4023cc] fwrite("7917:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tnullable[-2] = nullable[-1] && "..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--nullable;\n\tbreak;\n\n      case"..., '1', 27864) = 0x00f073b0
[0x40cdf3] memchr("1];\n\t--nfirstpos;\n\n\t/* The lastp"..., '\n', 27713) = 0x00f073b3
[0x4022d1] memchr("\t--nullable;\n\tbreak;\n\n      case"..., '\n', 122) = 0x00f07325
[0x4022d1] memchr("\tbreak;\n\n      case OR:\n      ca"..., '\n', 109) = 0x00f0732d
[0x4022d1] memchr("\n      case OR:\n      case ORTOP"..., '\n', 101) = 0x00f0732e
[0x4022d1] memchr("      case OR:\n      case ORTOP:"..., '\n', 100) = 0x00f0733d
[0x4022d1] memchr("      case ORTOP:\n\t/* The firstp"..., '\n', 85) = 0x00f0734f
[0x4022d1] memchr("\t/* The firstpos is the union of"..., '\n', 67) = 0x00f07392
[0x4022d1] memchr("\tnfirstpos[-2] += nfirstpos[-1];"..., '\n', 0) = NULL
[0x4023cc] fwrite("7924:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tnfirstpos[-2] += nfirstpos[-1];"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--nfirstpos;\n\n\t/* The lastpos i"..., '1', 27709) = 0x00f0741f
[0x40cdf3] memchr("1];\n\t--nlastpos;\n\n\t/* An OR node"..., '\n', 27602) = 0x00f07422
[0x4022d1] memchr("\t--nfirstpos;\n\n\t/* The lastpos i"..., '\n', 80) = 0x00f073c1
[0x4022d1] memchr("\n\t/* The lastpos is the union of"..., '\n', 66) = 0x00f073c2
[0x4022d1] memchr("\t/* The lastpos is the union of "..., '\n', 65) = 0x00f07403
[0x4022d1] memchr("\tnlastpos[-2] += nlastpos[-1];\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7928:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tnlastpos[-2] += nlastpos[-1];\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--nlastpos;\n\n\t/* An OR node is "..., '1', 27598) = 0x00f07489
[0x40cdf3] memchr("1] || nullable[-2];\n\t--nullable;"..., '\n', 27496) = 0x00f0749c
[0x4022d1] memchr("\t--nlastpos;\n\n\t/* An OR node is "..., '\n', 76) = 0x00f0742f
[0x4022d1] memchr("\n\t/* An OR node is nullable if e"..., '\n', 63) = 0x00f07430
[0x4022d1] memchr("\t/* An OR node is nullable if ei"..., '\n', 62) = 0x00f0746e
[0x4022d1] memchr("\tnullable[-2] = nullable[-1] || "..., '\n', 0) = NULL
[0x4023cc] fwrite("7932:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tnullable[-2] = nullable[-1] || "..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--nullable;\n\tbreak;\n\n      defa"..., '1', 27476) = 0x00f07677
[0x40cdf3] memchr("1;\n\t--firstpos, --lastpos;\n\tfirs"..., '\n', 27002) = 0x00f07679
[0x4022d1] memchr("\t--nullable;\n\tbreak;\n\n      defa"..., '\n', 444) = 0x00f074a9
[0x4022d1] memchr("\tbreak;\n\n      default:\n\t/* Anyt"..., '\n', 431) = 0x00f074b1
[0x4022d1] memchr("\n      default:\n\t/* Anything els"..., '\n', 423) = 0x00f074b2
[0x4022d1] memchr("      default:\n\t/* Anything else"..., '\n', 422) = 0x00f074c1
[0x4022d1] memchr("\t/* Anything else is a nonempty "..., '\n', 407) = 0x00f074ff
[0x4022d1] memchr("\t   constructs like \\< are treat"..., '\n', 345) = 0x00f0753c
[0x4022d1] memchr("\t   an "epsilon closure" effecti"..., '\n', 284) = 0x00f0757c
[0x4022d1] memchr("\t   Backreferences have to get a"..., '\n', 220) = 0x00f075bc
[0x4022d1] memchr("\t   transitions on them later.  "..., '\n', 156) = 0x00f075f6
[0x4022d1] memchr("\t*nullable++ = d->tokens[i] == B"..., '\n', 98) = 0x00f0761e
[0x4022d1] memchr("\n\t/* This position is in its own"..., '\n', 58) = 0x00f0761f
[0x4022d1] memchr("\t/* This position is in its own "..., '\n', 57) = 0x00f07658
[0x4022d1] memchr("\t*nfirstpos++ = *nlastpos++ = 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("7945:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t*nfirstpos++ = *nlastpos++ = 1;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t--firstpos, --lastpos;\n\tfirstpo"..., '1', 26999) = 0x00f07736
[0x40cdf3] memchr("1;\n\tMALLOC(d->follows[i].elems, "..., '\n', 26811) = 0x00f07738
[0x4022d1] memchr("\t--firstpos, --lastpos;\n\tfirstpo"..., '\n', 175) = 0x00f07691
[0x4022d1] memchr("\tfirstpos->index = lastpos->inde"..., '\n', 151) = 0x00f076b8
[0x4022d1] memchr("\tfirstpos->constraint = lastpos-"..., '\n', 112) = 0x00f076f5
[0x4022d1] memchr("\n\t/* Allocate the follow set for"..., '\n', 51) = 0x00f076f6
[0x4022d1] memchr("\t/* Allocate the follow set for "..., '\n', 50) = 0x00f07728
[0x4022d1] memchr("\tnalloc[i] = 1;\n\tMALLOC(d->follo"..., '\n', 0) = NULL
[0x4023cc] fwrite("7951:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tnalloc[i] = 1;\n\tMALLOC(d->follo"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tMALLOC(d->follows[i].elems, pos"..., '1', 26808) = 0x00f0783f
[0x40cdf3] memchr("1] ? " nullable: yes\\n" : " null"..., '\n', 26546) = 0x00f0786c
[0x4022d1] memchr("\tMALLOC(d->follows[i].elems, pos"..., '\n', 230) = 0x00f0776b
[0x4022d1] memchr("\tbreak;\n      }\n#ifdef DEBUG\n   "..., '\n', 179) = 0x00f07773
[0x4022d1] memchr("      }\n#ifdef DEBUG\n    /* ... "..., '\n', 171) = 0x00f0777b
[0x4022d1] memchr("#ifdef DEBUG\n    /* ... balance "..., '\n', 163) = 0x00f07788
[0x4022d1] memchr("    /* ... balance the above non"..., '\n', 150) = 0x00f077c3
[0x4022d1] memchr("      fprintf(stderr, "node %d:""..., '\n', 91) = 0x00f077e9
[0x4022d1] memchr("      prtok(d->tokens[i]);\n     "..., '\n', 53) = 0x00f07804
[0x4022d1] memchr("      putc('\\n', stderr);\n      "..., '\n', 26) = 0x00f0781e
[0x4022d1] memchr("      fprintf(stderr, nullable[-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7960:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      fprintf(stderr, nullable[-"..., 1, 78, 0x7fce6d444260) = 78
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      fprintf(stderr, " firstpos"..., '1', 26500) = 0x00f078ac
[0x40cdf3] memchr("1] - 1; j >= 0; --j)\n\t{\n\t  fprin"..., '\n', 26437) = 0x00f078c0
[0x4022d1] memchr("      fprintf(stderr, " firstpos"..., '\n', 37) = 0x00f07891
[0x4022d1] memchr("      for (j = nfirstpos[-1] - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("7962:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      for (j = nfirstpos[-1] - 1"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  fprintf(stderr, " %d:", fi"..., '1', 26416) = 0x00f0795d
[0x40cdf3] memchr("1] - 1; j >= 0; --j)\n\t{\n\t  fprin"..., '\n', 26260) = 0x00f07971
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, " %d:", fi"..., '\n', 131) = 0x00f078c3
[0x4022d1] memchr("\t  fprintf(stderr, " %d:", first"..., '\n', 128) = 0x00f078f2
[0x4022d1] memchr("\t  prtok(d->tokens[firstpos[j].i"..., '\n', 81) = 0x00f0791a
[0x4022d1] memchr("\t}\n      fprintf(stderr, "\\n las"..., '\n', 41) = 0x00f0791d
[0x4022d1] memchr("      fprintf(stderr, "\\n lastpo"..., '\n', 38) = 0x00f07943
[0x4022d1] memchr("      for (j = nlastpos[-1] - 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("7968:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      for (j = nlastpos[-1] - 1;"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  fprintf(stderr, " %d:", la"..., '1', 26239) = 0x00f07b63
[0x40cdf3] memchr("1; j >= 0; --j)\n\t  {\n\t    fprint"..., '\n', 25742) = 0x00f07b72
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, " %d:", la"..., '\n', 465) = 0x00f07974
[0x4022d1] memchr("\t  fprintf(stderr, " %d:", lastp"..., '\n', 462) = 0x00f079a2
[0x4022d1] memchr("\t  prtok(d->tokens[lastpos[j].in"..., '\n', 416) = 0x00f079c9
[0x4022d1] memchr("\t}\n      putc('\\n', stderr);\n   "..., '\n', 377) = 0x00f079cc
[0x4022d1] memchr("      putc('\\n', stderr);\n    }\n"..., '\n', 374) = 0x00f079e6
[0x4022d1] memchr("    }\n#endif\n\n  /* For each foll"..., '\n', 348) = 0x00f079ec
[0x4022d1] memchr("#endif\n\n  /* For each follow set"..., '\n', 342) = 0x00f079f3
[0x4022d1] memchr("\n  /* For each follow set that i"..., '\n', 335) = 0x00f079f4
[0x4022d1] memchr("  /* For each follow set that is"..., '\n', 334) = 0x00f07a40
[0x4022d1] memchr("     it with its epsilon closure"..., '\n', 258) = 0x00f07a65
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 221) = 0x00f07a87
[0x4022d1] memchr("    if (d->tokens[i] < NOTCHAR |"..., '\n', 187) = 0x00f07ac1
[0x4022d1] memchr("\t|| d->tokens[i] >= CSET)\n      "..., '\n', 129) = 0x00f07adb
[0x4022d1] memchr("      {\n#ifdef DEBUG\n\tfprintf(st"..., '\n', 103) = 0x00f07ae3
[0x4022d1] memchr("#ifdef DEBUG\n\tfprintf(stderr, "f"..., '\n', 95) = 0x00f07af0
[0x4022d1] memchr("\tfprintf(stderr, "follows(%d:", "..., '\n', 82) = 0x00f07b14
[0x4022d1] memchr("\tprtok(d->tokens[i]);\n\tfprintf(s"..., '\n', 46) = 0x00f07b2a
[0x4022d1] memchr("\tfprintf(stderr, "):");\n\tfor (j "..., '\n', 24) = 0x00f07b42
[0x4022d1] memchr("\tfor (j = d->follows[i].nelem - "..., '\n', 0) = NULL
[0x4023cc] fwrite("7987:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tfor (j = d->follows[i].nelem - "..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  {\n\t    fprintf(stderr, " %d:""..., '1', 25726) = 0x00f07d78
[0x40cdf3] memchr("1]; ++i)\n    insert(firstpos[i],"..., '\n', 25209) = 0x00f07d80
[0x4022d1] memchr("\t  {\n\t    fprintf(stderr, " %d:""..., '\n', 488) = 0x00f07b77
[0x4022d1] memchr("\t    fprintf(stderr, " %d:", d->"..., '\n', 483) = 0x00f07bb3
[0x4022d1] memchr("\t    prtok(d->tokens[d->follows["..., '\n', 423) = 0x00f07be8
[0x4022d1] memchr("\t  }\n\tputc('\\n', stderr);\n#endif"..., '\n', 370) = 0x00f07bed
[0x4022d1] memchr("\tputc('\\n', stderr);\n#endif\n\tcop"..., '\n', 365) = 0x00f07c02
[0x4022d1] memchr("#endif\n\tcopy(&d->follows[i], &me"..., '\n', 344) = 0x00f07c09
[0x4022d1] memchr("\tcopy(&d->follows[i], &merged);\n"..., '\n', 337) = 0x00f07c29
[0x4022d1] memchr("\tepsclosure(&merged, d);\n\tif (d-"..., '\n', 305) = 0x00f07c42
[0x4022d1] memchr("\tif (d->follows[i].nelem < merge"..., '\n', 280) = 0x00f07c6b
[0x4022d1] memchr("\t  REALLOC(d->follows[i].elems, "..., '\n', 239) = 0x00f07ca4
[0x4022d1] memchr("\tcopy(&merged, &d->follows[i]);\n"..., '\n', 182) = 0x00f07cc4
[0x4022d1] memchr("      }\n\n  /* Get the epsilon cl"..., '\n', 150) = 0x00f07ccc
[0x4022d1] memchr("\n  /* Get the epsilon closure of"..., '\n', 142) = 0x00f07ccd
[0x4022d1] memchr("  /* Get the epsilon closure of "..., '\n', 141) = 0x00f07d1a
[0x4022d1] memchr("     be the set of positions of "..., '\n', 64) = 0x00f07d46
[0x4022d1] memchr("  merged.nelem = 0;\n  for (i = 0"..., '\n', 20) = 0x00f07d5a
[0x4022d1] memchr("  for (i = 0; i < nfirstpos[-1];"..., '\n', 0) = NULL
[0x4023cc] fwrite("8004:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  for (i = 0; i < nfirstpos[-1];"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    insert(firstpos[i], &merged)"..., '1', 25200) = 0x00f07e96
[0x40cdf3] memchr("1;\n\n  /* Build the initial state"..., '\n', 24923) = 0x00f07e98
[0x4022d1] memchr("    insert(firstpos[i], &merged)"..., '\n', 255) = 0x00f07da2
[0x4022d1] memchr("  epsclosure(&merged, d);\n\n  /* "..., '\n', 221) = 0x00f07dbc
[0x4022d1] memchr("\n  /* Check if any of the positi"..., '\n', 195) = 0x00f07dbd
[0x4022d1] memchr("  /* Check if any of the positio"..., '\n', 194) = 0x00f07e09
[0x4022d1] memchr("  wants_newline = 0;\n  for (i = "..., '\n', 118) = 0x00f07e1e
[0x4022d1] memchr("  for (i = 0; i < merged.nelem; "..., '\n', 97) = 0x00f07e43
[0x4022d1] memchr("    if (PREV_NEWLINE_DEPENDENT(m"..., '\n', 60) = 0x00f07e7f
[0x4022d1] memchr("      wants_newline = 1;\n\n  /* B"..., '\n', 0) = NULL
[0x4023cc] fwrite("8012:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      wants_newline = 1;\n\n  /* B"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* Build the initial state. *"..., '1', 24920) = 0x00f07ec9
[0x40cdf3] memchr("1;\n  d->sindex = 0;\n  MALLOC(d->"..., '\n', 24872) = 0x00f07ecb
[0x4022d1] memchr("\n  /* Build the initial state. *"..., '\n', 34) = 0x00f07e99
[0x4022d1] memchr("  /* Build the initial state. */"..., '\n', 33) = 0x00f07eba
[0x4022d1] memchr("  d->salloc = 1;\n  d->sindex = 0"..., '\n', 0) = NULL
[0x4023cc] fwrite("8015:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d->salloc = 1;\n  d->sindex = 0"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  d->sindex = 0;\n  MALLOC(d->sta"..., '1', 24869) = 0x00f08b74
[0x40cdf3] memchr("1;\n      for (i = 0; i < NOTCHAR"..., '\n', 21629) = 0x00f08b76
[0x4022d1] memchr("  d->sindex = 0;\n  MALLOC(d->sta"..., '\n', 3220) = 0x00f07edc
[0x4022d1] memchr("  MALLOC(d->states, dfa_state, d"..., '\n', 3203) = 0x00f07f07
[0x4022d1] memchr("  state_index(d, &merged, wants_"..., '\n', 3160) = 0x00f07f34
[0x4022d1] memchr("\n  free(o_nullable);\n  free(o_nf"..., '\n', 3115) = 0x00f07f35
[0x4022d1] memchr("  free(o_nullable);\n  free(o_nfi"..., '\n', 3114) = 0x00f07f49
[0x4022d1] memchr("  free(o_nfirst);\n  free(o_first"..., '\n', 3094) = 0x00f07f5b
[0x4022d1] memchr("  free(o_firstpos);\n  free(o_nla"..., '\n', 3076) = 0x00f07f6f
[0x4022d1] memchr("  free(o_nlast);\n  free(o_lastpo"..., '\n', 3056) = 0x00f07f80
[0x4022d1] memchr("  free(o_lastpos);\n  free(nalloc"..., '\n', 3039) = 0x00f07f93
[0x4022d1] memchr("  free(nalloc);\n  free(merged.el"..., '\n', 3020) = 0x00f07fa3
[0x4022d1] memchr("  free(merged.elems);\n}\n\n/* Find"..., '\n', 3004) = 0x00f07fb9
[0x4022d1] memchr("}\n\n/* Find, for each character, "..., '\n', 2982) = 0x00f07fbb
[0x4022d1] memchr("\n/* Find, for each character, th"..., '\n', 2980) = 0x00f07fbc
[0x4022d1] memchr("/* Find, for each character, the"..., '\n', 2979) = 0x00f08007
[0x4022d1] memchr("   it in the appropriate slot of"..., '\n', 2904) = 0x00f0802f
[0x4022d1] memchr("\n   We divide the positions of s"..., '\n', 2864) = 0x00f08030
[0x4022d1] memchr("   We divide the positions of s "..., '\n', 2863) = 0x00f0807a
[0x4022d1] memchr("   than one group).  Each group "..., '\n', 2789) = 0x00f080c3
[0x4022d1] memchr("   every position in the group m"..., '\n', 2716) = 0x00f0810e
[0x4022d1] memchr("   preceding context information"..., '\n', 2641) = 0x00f08156
[0x4022d1] memchr("   of the its elements' follows."..., '\n', 2569) = 0x00f081a0
[0x4022d1] memchr("   new state.  For each characte"..., '\n', 2495) = 0x00f081eb
[0x4022d1] memchr("   on this character to be to a "..., '\n', 2420) = 0x00f08237
[0x4022d1] memchr("   and its associated backward c"..., '\n', 2344) = 0x00f08279
[0x4022d1] memchr("\n   If we are building a searchi"..., '\n', 2278) = 0x00f0827a
[0x4022d1] memchr("   If we are building a searchin"..., '\n', 2277) = 0x00f082c7
[0x4022d1] memchr("   0 in every state.\n\n   The col"..., '\n', 2200) = 0x00f082dc
[0x4022d1] memchr("\n   The collection of groups is "..., '\n', 2179) = 0x00f082dd
[0x4022d1] memchr("   The collection of groups is c"..., '\n', 2178) = 0x00f08329
[0x4022d1] memchr("   partition of the positions of"..., '\n', 2102) = 0x00f0834d
[0x4022d1] memchr("\n   For each position, find the "..., '\n', 2066) = 0x00f0834e
[0x4022d1] memchr("   For each position, find the s"..., '\n', 2065) = 0x00f0839d
[0x4022d1] memchr("   any characters from C that fa"..., '\n', 1986) = 0x00f083e0
[0x4022d1] memchr("\n   Search through the groups, l"..., '\n', 1919) = 0x00f083e1
[0x4022d1] memchr("   Search through the groups, lo"..., '\n', 1918) = 0x00f0842e
[0x4022d1] memchr("   intersection with C.  If L - "..., '\n', 1841) = 0x00f08478
[0x4022d1] memchr("   L - C and having the same pos"..., '\n', 1767) = 0x00f084c2
[0x4022d1] memchr("   the intersection of L and C. "..., '\n', 1693) = 0x00f0850a
[0x4022d1] memchr("   C = C - L, and resume scannin"..., '\n', 1621) = 0x00f0852d
[0x4022d1] memchr("\n   If after comparing with ever"..., '\n', 1586) = 0x00f0852e
[0x4022d1] memchr("   If after comparing with every"..., '\n', 1585) = 0x00f0857a
[0x4022d1] memchr("   create a new group labeled wi"..., '\n', 1509) = 0x00f085c1
[0x4022d1] memchr("   position in that group. */\nvo"..., '\n', 1438) = 0x00f085df
[0x4022d1] memchr("void\ndfastate(s, d, trans)\n     "..., '\n', 1408) = 0x00f085e4
[0x4022d1] memchr("dfastate(s, d, trans)\n     int s"..., '\n', 1403) = 0x00f085fa
[0x4022d1] memchr("     int s;\n     struct dfa *d;\n"..., '\n', 1381) = 0x00f08606
[0x4022d1] memchr("     struct dfa *d;\n     int tra"..., '\n', 1369) = 0x00f0861a
[0x4022d1] memchr("     int trans[];\n{\n  position_s"..., '\n', 1349) = 0x00f0862c
[0x4022d1] memchr("{\n  position_set grps[NOTCHAR];\t"..., '\n', 1331) = 0x00f0862e
[0x4022d1] memchr("  position_set grps[NOTCHAR];\t/*"..., '\n', 1329) = 0x00f08672
[0x4022d1] memchr("  charclass labels[NOTCHAR];\t/* "..., '\n', 1261) = 0x00f086b9
[0x4022d1] memchr("  int ngrps = 0;\t\t/* Number of g"..., '\n', 1190) = 0x00f086f1
[0x4022d1] memchr("  position pos;\t\t\t/* Current pos"..., '\n', 1134) = 0x00f0872c
[0x4022d1] memchr("  charclass matches;\t\t/* Set of "..., '\n', 1075) = 0x00f08764
[0x4022d1] memchr("  int matchesf;\t\t\t/* True if mat"..., '\n', 1019) = 0x00f08799
[0x4022d1] memchr("  charclass intersect;\t\t/* Inter"..., '\n', 966) = 0x00f087d9
[0x4022d1] memchr("  int intersectf;\t\t/* True if in"..., '\n', 902) = 0x00f08811
[0x4022d1] memchr("  charclass leftovers;\t\t/* Stuff"..., '\n', 846) = 0x00f08855
[0x4022d1] memchr("  int leftoversf;\t\t/* True if le"..., '\n', 778) = 0x00f0888d
[0x4022d1] memchr("  static charclass letters;\t/* S"..., '\n', 722) = 0x00f088d5
[0x4022d1] memchr("  static charclass newline;\t/* S"..., '\n', 650) = 0x00f0891e
[0x4022d1] memchr("  position_set follows;\t\t/* Unio"..., '\n', 577) = 0x00f08961
[0x4022d1] memchr("  position_set tmp;\t\t/* Temporar"..., '\n', 510) = 0x00f0899e
[0x4022d1] memchr("  int state;\t\t\t/* New state. */\n"..., '\n', 449) = 0x00f089be
[0x4022d1] memchr("  int wants_newline;\t\t/* New sta"..., '\n', 417) = 0x00f08a03
[0x4022d1] memchr("  int state_newline;\t\t/* New sta"..., '\n', 348) = 0x00f08a42
[0x4022d1] memchr("  int wants_letter;\t\t/* New stat"..., '\n', 285) = 0x00f08a85
[0x4022d1] memchr("  int state_letter;\t\t/* New stat"..., '\n', 218) = 0x00f08ac2
[0x4022d1] memchr("  static initialized;\t\t/* Flag f"..., '\n', 157) = 0x00f08aff
[0x4022d1] memchr("  int i, j, k;\n\n  /* Initialize "..., '\n', 96) = 0x00f08b0e
[0x4022d1] memchr("\n  /* Initialize the set of lett"..., '\n', 81) = 0x00f08b0f
[0x4022d1] memchr("  /* Initialize the set of lette"..., '\n', 80) = 0x00f08b44
[0x4022d1] memchr("  if (! initialized)\n    {\n     "..., '\n', 27) = 0x00f08b59
[0x4022d1] memchr("    {\n      initialized = 1;\n   "..., '\n', 6) = 0x00f08b5f
[0x4022d1] memchr("      initialized = 1;\n      for"..., '\n', 0) = NULL
[0x4023cc] fwrite("8090:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      initialized = 1;\n      for"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      for (i = 0; i < NOTCHAR; +"..., '1', 21626) = 0x00f08e30
[0x40cdf3] memchr("1))\n\t    clrbit('\\n', matches);\n"..., '\n', 20929) = 0x00f08e33
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 669) = 0x00f08b9a
[0x4022d1] memchr("\tif (ISALNUM(i))\n\t  setbit(i, le"..., '\n', 633) = 0x00f08bab
[0x4022d1] memchr("\t  setbit(i, letters);\n      set"..., '\n', 616) = 0x00f08bc2
[0x4022d1] memchr("      setbit('\\n', newline);\n   "..., '\n', 593) = 0x00f08bdf
[0x4022d1] memchr("    }\n\n  zeroset(matches);\n\n  fo"..., '\n', 564) = 0x00f08be5
[0x4022d1] memchr("\n  zeroset(matches);\n\n  for (i ="..., '\n', 558) = 0x00f08be6
[0x4022d1] memchr("  zeroset(matches);\n\n  for (i = "..., '\n', 557) = 0x00f08bfa
[0x4022d1] memchr("\n  for (i = 0; i < d->states[s]."..., '\n', 537) = 0x00f08bfb
[0x4022d1] memchr("  for (i = 0; i < d->states[s].e"..., '\n', 536) = 0x00f08c2c
[0x4022d1] memchr("    {\n      pos = d->states[s].e"..., '\n', 487) = 0x00f08c32
[0x4022d1] memchr("      pos = d->states[s].elems.e"..., '\n', 481) = 0x00f08c5b
[0x4022d1] memchr("      if (d->tokens[pos.index] >"..., '\n', 440) = 0x00f08ca2
[0x4022d1] memchr("\tsetbit(d->tokens[pos.index], ma"..., '\n', 369) = 0x00f08cca
[0x4022d1] memchr("      else if (d->tokens[pos.ind"..., '\n', 329) = 0x00f08cf7
[0x4022d1] memchr("\tcopyset(d->charclasses[d->token"..., '\n', 284) = 0x00f08d37
[0x4022d1] memchr("      else\n\tcontinue;\n\n      /* "..., '\n', 220) = 0x00f08d42
[0x4022d1] memchr("\tcontinue;\n\n      /* Some charac"..., '\n', 209) = 0x00f08d4d
[0x4022d1] memchr("\n      /* Some characters may ne"..., '\n', 198) = 0x00f08d4e
[0x4022d1] memchr("      /* Some characters may nee"..., '\n', 197) = 0x00f08d96
[0x4022d1] memchr("\t they fail in the current conte"..., '\n', 125) = 0x00f08dbd
[0x4022d1] memchr("      if (pos.constraint != 0xFF"..., '\n', 86) = 0x00f08ddf
[0x4022d1] memchr("\t{\n\t  if (! MATCHES_NEWLINE_CONT"..., '\n', 52) = 0x00f08de2
[0x4022d1] memchr("\t  if (! MATCHES_NEWLINE_CONTEXT"..., '\n', 49) = 0x00f08e13
[0x4022d1] memchr("\t\t\t\t\t d->states[s].newline, 1))\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("8114:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t\t\t d->states[s].newline, 1))\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    clrbit('\\n', matches);\n\t  i"..., '1', 20925) = 0x00f08f36
[0x40cdf3] memchr("1))\n\t    for (j = 0; j < CHARCLA"..., '\n', 20667) = 0x00f08f39
[0x4022d1] memchr("\t    clrbit('\\n', matches);\n\t  i"..., '\n', 232) = 0x00f08e4f
[0x4022d1] memchr("\t  if (! MATCHES_NEWLINE_CONTEXT"..., '\n', 204) = 0x00f08e80
[0x4022d1] memchr("\t\t\t\t\t d->states[s].newline, 0))\n"..., '\n', 155) = 0x00f08ea0
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 123) = 0x00f08eca
[0x4022d1] memchr("\t      matches[j] &= newline[j];"..., '\n', 81) = 0x00f08eeb
[0x4022d1] memchr("\t  if (! MATCHES_LETTER_CONTEXT("..., '\n', 48) = 0x00f08f1b
[0x4022d1] memchr("\t\t\t\t\td->states[s].letter, 1))\n\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("8121:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t\t\t\td->states[s].letter, 1))\n\t "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '1', 20663) = 0x00f092e9
[0x40cdf3] memchr("1 : 0;\n\t  if (! intersectf)\n\t   "..., '\n', 19720) = 0x00f092ef
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 880) = 0x00f08f63
[0x4022d1] memchr("\t      matches[j] &= ~letters[j]"..., '\n', 838) = 0x00f08f85
[0x4022d1] memchr("\t  if (! MATCHES_LETTER_CONTEXT("..., '\n', 804) = 0x00f08fb5
[0x4022d1] memchr("\t\t\t\t\td->states[s].letter, 0))\n\t "..., '\n', 756) = 0x00f08fd3
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 726) = 0x00f08ffd
[0x4022d1] memchr("\t      matches[j] &= letters[j];"..., '\n', 684) = 0x00f0901e
[0x4022d1] memchr("\n\t  /* If there are no character"..., '\n', 651) = 0x00f0901f
[0x4022d1] memchr("\t  /* If there are no characters"..., '\n', 650) = 0x00f09067
[0x4022d1] memchr("\t  for (j = 0; j < CHARCLASS_INT"..., '\n', 578) = 0x00f0909e
[0x4022d1] memchr("\t    ;\n\t  if (j == CHARCLASS_INT"..., '\n', 523) = 0x00f090a5
[0x4022d1] memchr("\t  if (j == CHARCLASS_INTS)\n\t   "..., '\n', 516) = 0x00f090c1
[0x4022d1] memchr("\t    continue;\n\t}\n\n      for (j "..., '\n', 488) = 0x00f090d0
[0x4022d1] memchr("\t}\n\n      for (j = 0; j < ngrps;"..., '\n', 473) = 0x00f090d3
[0x4022d1] memchr("\n      for (j = 0; j < ngrps; ++"..., '\n', 470) = 0x00f090d4
[0x4022d1] memchr("      for (j = 0; j < ngrps; ++j"..., '\n', 469) = 0x00f090f6
[0x4022d1] memchr("\t{\n\t  /* If matches contains a s"..., '\n', 435) = 0x00f090f9
[0x4022d1] memchr("\t  /* If matches contains a sing"..., '\n', 432) = 0x00f0913c
[0x4022d1] memchr("\t     group's label doesn't cont"..., '\n', 365) = 0x00f0917d
[0x4022d1] memchr("\t     next group. */\n\t  if (d->t"..., '\n', 300) = 0x00f09192
[0x4022d1] memchr("\t  if (d->tokens[pos.index] >= 0"..., '\n', 279) = 0x00f091d5
[0x4022d1] memchr("\t      && !tstbit(d->tokens[pos."..., '\n', 212) = 0x00f09209
[0x4022d1] memchr("\t    continue;\n\n\t  /* Check if t"..., '\n', 160) = 0x00f09218
[0x4022d1] memchr("\n\t  /* Check if this group's lab"..., '\n', 145) = 0x00f09219
[0x4022d1] memchr("\t  /* Check if this group's labe"..., '\n', 144) = 0x00f0925c
[0x4022d1] memchr("\t     matches. */\n\t  intersectf "..., '\n', 77) = 0x00f0926e
[0x4022d1] memchr("\t  intersectf = 0;\n\t  for (k = 0"..., '\n', 59) = 0x00f09281
[0x4022d1] memchr("\t  for (k = 0; k < CHARCLASS_INT"..., '\n', 40) = 0x00f092a9
[0x4022d1] memchr("\t    (intersect[k] = matches[k] "..., '\n', 0) = NULL
[0x4023cc] fwrite("8149:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    (intersect[k] = matches[k] "..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (! intersectf)\n\t    contin"..., '1', 19713) = 0x00f0944b
[0x40cdf3] memchr("1 : 0;\n\t      (matches[k] = matc"..., '\n', 19366) = 0x00f09451
[0x4022d1] memchr("\t  if (! intersectf)\n\t    contin"..., '\n', 293) = 0x00f09304
[0x4022d1] memchr("\t    continue;\n\n\t  /* It does; n"..., '\n', 272) = 0x00f09313
[0x4022d1] memchr("\n\t  /* It does; now find the set"..., '\n', 257) = 0x00f09314
[0x4022d1] memchr("\t  /* It does; now find the set "..., '\n', 256) = 0x00f0934e
[0x4022d1] memchr("\t  leftoversf = matchesf = 0;\n\t "..., '\n', 198) = 0x00f0936c
[0x4022d1] memchr("\t  for (k = 0; k < CHARCLASS_INT"..., '\n', 168) = 0x00f09394
[0x4022d1] memchr("\t    {\n\t      /* Even an optimiz"..., '\n', 128) = 0x00f0939b
[0x4022d1] memchr("\t      /* Even an optimizing com"..., '\n', 121) = 0x00f093de
[0x4022d1] memchr("\t      int match = matches[k], l"..., '\n', 54) = 0x00f09413
[0x4022d1] memchr("\n\t      (leftovers[k] = ~match &"..., '\n', 1) = 0x00f09414
[0x4022d1] memchr("\t      (leftovers[k] = ~match & "..., '\n', 0) = NULL
[0x4023cc] fwrite("8160:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      (leftovers[k] = ~match & "..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      (matches[k] = match & ~la"..., '1', 19359) = 0x00f09484
[0x40cdf3] memchr("1 : 0;\n\t    }\n\n\t  /* If there we"..., '\n', 19309) = 0x00f0948a
[0x4022d1] memchr("\t      (matches[k] = match & ~la"..., '\n', 0) = NULL
[0x4023cc] fwrite("8161:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      (matches[k] = match & ~la"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    }\n\n\t  /* If there were left"..., '1', 19302) = 0x00f097f8
[0x40cdf3] memchr("1;\n\t  grps[ngrps].elems[0] = pos"..., '\n', 18425) = 0x00f097fa
[0x4022d1] memchr("\t    }\n\n\t  /* If there were left"..., '\n', 854) = 0x00f09491
[0x4022d1] memchr("\n\t  /* If there were leftovers, "..., '\n', 847) = 0x00f09492
[0x4022d1] memchr("\t  /* If there were leftovers, c"..., '\n', 846) = 0x00f094da
[0x4022d1] memchr("\t  if (leftoversf)\n\t    {\n\t     "..., '\n', 774) = 0x00f094ed
[0x4022d1] memchr("\t    {\n\t      copyset(leftovers,"..., '\n', 755) = 0x00f094f4
[0x4022d1] memchr("\t      copyset(leftovers, labels"..., '\n', 748) = 0x00f0951e
[0x4022d1] memchr("\t      copyset(intersect, labels"..., '\n', 706) = 0x00f09544
[0x4022d1] memchr("\t      MALLOC(grps[ngrps].elems,"..., '\n', 668) = 0x00f0957c
[0x4022d1] memchr("\t      copy(&grps[j], &grps[ngrp"..., '\n', 612) = 0x00f095a1
[0x4022d1] memchr("\t      ++ngrps;\n\t    }\n\n\t  /* Pu"..., '\n', 575) = 0x00f095b1
[0x4022d1] memchr("\t    }\n\n\t  /* Put the position i"..., '\n', 559) = 0x00f095b8
[0x4022d1] memchr("\n\t  /* Put the position in the c"..., '\n', 552) = 0x00f095b9
[0x4022d1] memchr("\t  /* Put the position in the cu"..., '\n', 551) = 0x00f095fd
[0x4022d1] memchr("\t     reason to call insert() he"..., '\n', 483) = 0x00f09624
[0x4022d1] memchr("\t  grps[j].elems[grps[j].nelem++"..., '\n', 444) = 0x00f0964d
[0x4022d1] memchr("\n\t  /* If every character matchi"..., '\n', 403) = 0x00f0964e
[0x4022d1] memchr("\t  /* If every character matchin"..., '\n', 402) = 0x00f0968e
[0x4022d1] memchr("\t     accounted for, we're done."..., '\n', 338) = 0x00f096b2
[0x4022d1] memchr("\t  if (! matchesf)\n\t    break;\n\t"..., '\n', 302) = 0x00f096c5
[0x4022d1] memchr("\t    break;\n\t}\n\n      /* If we'v"..., '\n', 283) = 0x00f096d1
[0x4022d1] memchr("\t}\n\n      /* If we've passed the"..., '\n', 271) = 0x00f096d4
[0x4022d1] memchr("\n      /* If we've passed the la"..., '\n', 268) = 0x00f096d5
[0x4022d1] memchr("      /* If we've passed the las"..., '\n', 267) = 0x00f0971d
[0x4022d1] memchr("\t unaccounted for, then we'll ha"..., '\n', 195) = 0x00f0975a
[0x4022d1] memchr("      if (j == ngrps)\n\t{\n\t  copy"..., '\n', 134) = 0x00f09770
[0x4022d1] memchr("\t{\n\t  copyset(matches, labels[ng"..., '\n', 112) = 0x00f09773
[0x4022d1] memchr("\t  copyset(matches, labels[ngrps"..., '\n', 109) = 0x00f09797
[0x4022d1] memchr("\t  zeroset(matches);\n\t  MALLOC(g"..., '\n', 73) = 0x00f097ac
[0x4022d1] memchr("\t  MALLOC(grps[ngrps].elems, pos"..., '\n', 52) = 0x00f097e0
[0x4022d1] memchr("\t  grps[ngrps].nelem = 1;\n\t  grp"..., '\n', 0) = NULL
[0x4023cc] fwrite("8191:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  grps[ngrps].nelem = 1;\n\t  grp"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  grps[ngrps].elems[0] = pos;\n\t"..., '1', 18422) = 0x00f09a1d
[0x40cdf3] memchr("1;\n\t  if (PREV_LETTER_DEPENDENT("..., '\n', 17876) = 0x00f09a1f
[0x4022d1] memchr("\t  grps[ngrps].elems[0] = pos;\n\t"..., '\n', 525) = 0x00f09819
[0x4022d1] memchr("\t  ++ngrps;\n\t}\n    }\n\n  MALLOC(f"..., '\n', 494) = 0x00f09825
[0x4022d1] memchr("\t}\n    }\n\n  MALLOC(follows.elems"..., '\n', 482) = 0x00f09828
[0x4022d1] memchr("    }\n\n  MALLOC(follows.elems, p"..., '\n', 479) = 0x00f0982e
[0x4022d1] memchr("\n  MALLOC(follows.elems, positio"..., '\n', 473) = 0x00f0982f
[0x4022d1] memchr("  MALLOC(follows.elems, position"..., '\n', 472) = 0x00f0985e
[0x4022d1] memchr("  MALLOC(tmp.elems, position, d-"..., '\n', 425) = 0x00f09889
[0x4022d1] memchr("\n  /* If we are a searching matc"..., '\n', 382) = 0x00f0988a
[0x4022d1] memchr("  /* If we are a searching match"..., '\n', 381) = 0x00f098d3
[0x4022d1] memchr("     containing the positions of"..., '\n', 308) = 0x00f0991e
[0x4022d1] memchr("     is to fail miserably. */\n  "..., '\n', 233) = 0x00f0993c
[0x4022d1] memchr("  if (d->searchflag)\n    {\n     "..., '\n', 203) = 0x00f09951
[0x4022d1] memchr("    {\n      wants_newline = 0;\n "..., '\n', 182) = 0x00f09957
[0x4022d1] memchr("      wants_newline = 0;\n      w"..., '\n', 176) = 0x00f09970
[0x4022d1] memchr("      wants_letter = 0;\n      fo"..., '\n', 151) = 0x00f09988
[0x4022d1] memchr("      for (i = 0; i < d->states["..., '\n', 127) = 0x00f099bd
[0x4022d1] memchr("\t{\n\t  if (PREV_NEWLINE_DEPENDENT"..., '\n', 74) = 0x00f099c0
[0x4022d1] memchr("\t  if (PREV_NEWLINE_DEPENDENT(d-"..., '\n', 71) = 0x00f09a07
[0x4022d1] memchr("\t    wants_newline = 1;\n\t  if (P"..., '\n', 0) = NULL
[0x4023cc] fwrite("8210:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    wants_newline = 1;\n\t  if (P"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  if (PREV_LETTER_DEPENDENT(d->"..., '1', 17873) = 0x00f09a7a
[0x40cdf3] memchr("1;\n\t}\n      copy(&d->states[0].e"..., '\n', 17783) = 0x00f09a7c
[0x4022d1] memchr("\t  if (PREV_LETTER_DEPENDENT(d->"..., '\n', 70) = 0x00f09a65
[0x4022d1] memchr("\t    wants_letter = 1;\n\t}\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("8212:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    wants_letter = 1;\n\t}\n      "..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n      copy(&d->states[0].elem"..., '1', 17780) = 0x00f09b1c
[0x40cdf3] memchr("1, 0);\n      else\n\tstate_newline"..., '\n', 17621) = 0x00f09b22
[0x4022d1] memchr("\t}\n      copy(&d->states[0].elem"..., '\n', 117) = 0x00f09a7f
[0x4022d1] memchr("      copy(&d->states[0].elems, "..., '\n', 114) = 0x00f09aaa
[0x4022d1] memchr("      state = state_index(d, &fo"..., '\n', 71) = 0x00f09ad8
[0x4022d1] memchr("      if (wants_newline)\n\tstate_"..., '\n', 25) = 0x00f09af1
[0x4022d1] memchr("\tstate_newline = state_index(d, "..., '\n', 0) = NULL
[0x4023cc] fwrite("8217:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tstate_newline = state_index(d, "..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n\tstate_newline = stat"..., '1', 17614) = 0x00f09b8a
[0x40cdf3] memchr("1);\n      else\n\tstate_letter = s"..., '\n', 17511) = 0x00f09b8d
[0x4022d1] memchr("      else\n\tstate_newline = stat"..., '\n', 59) = 0x00f09b2d
[0x4022d1] memchr("\tstate_newline = state;\n      if"..., '\n', 48) = 0x00f09b45
[0x4022d1] memchr("      if (wants_letter)\n\tstate_l"..., '\n', 24) = 0x00f09b5d
[0x4022d1] memchr("\tstate_letter = state_index(d, &"..., '\n', 0) = NULL
[0x4023cc] fwrite("8221:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tstate_letter = state_index(d, &"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n\tstate_letter = state"..., '1', 17507) = 0x00f09c8f
[0x40cdf3] memchr("1;\n\n  for (i = 0; i < ngrps; ++i"..., '\n', 17250) = 0x00f09c91
[0x4022d1] memchr("      else\n\tstate_letter = state"..., '\n', 239) = 0x00f09b98
[0x4022d1] memchr("\tstate_letter = state;\n      for"..., '\n', 228) = 0x00f09baf
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 205) = 0x00f09bd3
[0x4022d1] memchr("\tif (i == '\\n')\n\t  trans[i] = st"..., '\n', 169) = 0x00f09be3
[0x4022d1] memchr("\t  trans[i] = state_newline;\n\tel"..., '\n', 153) = 0x00f09c00
[0x4022d1] memchr("\telse if (ISALNUM(i))\n\t  trans[i"..., '\n', 124) = 0x00f09c16
[0x4022d1] memchr("\t  trans[i] = state_letter;\n\tels"..., '\n', 102) = 0x00f09c32
[0x4022d1] memchr("\telse\n\t  trans[i] = state;\n    }"..., '\n', 74) = 0x00f09c38
[0x4022d1] memchr("\t  trans[i] = state;\n    }\n  els"..., '\n', 68) = 0x00f09c4d
[0x4022d1] memchr("    }\n  else\n    for (i = 0; i <"..., '\n', 47) = 0x00f09c53
[0x4022d1] memchr("  else\n    for (i = 0; i < NOTCH"..., '\n', 41) = 0x00f09c5a
[0x4022d1] memchr("    for (i = 0; i < NOTCHAR; ++i"..., '\n', 34) = 0x00f09c7c
[0x4022d1] memchr("      trans[i] = -1;\n\n  for (i ="..., '\n', 0) = NULL
[0x4023cc] fwrite("8234:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      trans[i] = -1;\n\n  for (i ="..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  for (i = 0; i < ngrps; ++i)\n "..., '1', 17247) = 0x00f09fd8
[0x40cdf3] memchr("1;\n\n      wants_letter = 0;\n    "..., '\n', 16409) = 0x00f09fda
[0x4022d1] memchr("\n  for (i = 0; i < ngrps; ++i)\n "..., '\n', 817) = 0x00f09c92
[0x4022d1] memchr("  for (i = 0; i < ngrps; ++i)\n  "..., '\n', 816) = 0x00f09cb0
[0x4022d1] memchr("    {\n      follows.nelem = 0;\n\n"..., '\n', 786) = 0x00f09cb6
[0x4022d1] memchr("      follows.nelem = 0;\n\n      "..., '\n', 780) = 0x00f09ccf
[0x4022d1] memchr("\n      /* Find the union of the "..., '\n', 755) = 0x00f09cd0
[0x4022d1] memchr("      /* Find the union of the f"..., '\n', 754) = 0x00f09d16
[0x4022d1] memchr("\t This is a hideously inefficien"..., '\n', 684) = 0x00f09d52
[0x4022d1] memchr("      for (j = 0; j < grps[i].ne"..., '\n', 624) = 0x00f09d7c
[0x4022d1] memchr("\tfor (k = 0; k < d->follows[grps"..., '\n', 582) = 0x00f09dbc
[0x4022d1] memchr("\t  insert(d->follows[grps[i].ele"..., '\n', 518) = 0x00f09dfe
[0x4022d1] memchr("\n      /* If we are building a s"..., '\n', 452) = 0x00f09dff
[0x4022d1] memchr("      /* If we are building a se"..., '\n', 451) = 0x00f09e47
[0x4022d1] memchr("\t of state 0 as well. */\n      i"..., '\n', 379) = 0x00f09e60
[0x4022d1] memchr("      if (d->searchflag)\n\tfor (j"..., '\n', 354) = 0x00f09e79
[0x4022d1] memchr("\tfor (j = 0; j < d->states[0].el"..., '\n', 329) = 0x00f09ea9
[0x4022d1] memchr("\t  insert(d->states[0].elems.ele"..., '\n', 281) = 0x00f09edb
[0x4022d1] memchr("\n      /* Find out if the new st"..., '\n', 231) = 0x00f09edc
[0x4022d1] memchr("      /* Find out if the new sta"..., '\n', 230) = 0x00f09f25
[0x4022d1] memchr("      wants_newline = 0;\n      i"..., '\n', 157) = 0x00f09f3e
[0x4022d1] memchr("      if (tstbit('\\n', labels[i]"..., '\n', 132) = 0x00f09f61
[0x4022d1] memchr("\tfor (j = 0; j < follows.nelem; "..., '\n', 97) = 0x00f09f86
[0x4022d1] memchr("\t  if (PREV_NEWLINE_DEPENDENT(fo"..., '\n', 60) = 0x00f09fc2
[0x4022d1] memchr("\t    wants_newline = 1;\n\n      w"..., '\n', 0) = NULL
[0x4023cc] fwrite("8257:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    wants_newline = 1;\n\n      w"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      wants_letter = 0;\n      f"..., '1', 16406) = 0x00f0a0db
[0x40cdf3] memchr("1;\n\n      /* Find the state(s) c"..., '\n', 16150) = 0x00f0a0dd
[0x4022d1] memchr("\n      wants_letter = 0;\n      f"..., '\n', 236) = 0x00f09fdb
[0x4022d1] memchr("      wants_letter = 0;\n      fo"..., '\n', 235) = 0x00f09ff3
[0x4022d1] memchr("      for (j = 0; j < CHARCLASS_"..., '\n', 211) = 0x00f0a01e
[0x4022d1] memchr("\tif (labels[i][j] & letters[j])\n"..., '\n', 168) = 0x00f0a03e
[0x4022d1] memchr("\t  break;\n      if (j < CHARCLAS"..., '\n', 136) = 0x00f0a048
[0x4022d1] memchr("      if (j < CHARCLASS_INTS)\n\tf"..., '\n', 126) = 0x00f0a066
[0x4022d1] memchr("\tfor (j = 0; j < follows.nelem; "..., '\n', 96) = 0x00f0a08b
[0x4022d1] memchr("\t  if (PREV_LETTER_DEPENDENT(fol"..., '\n', 59) = 0x00f0a0c6
[0x4022d1] memchr("\t    wants_letter = 1;\n\n      /*"..., '\n', 0) = NULL
[0x4023cc] fwrite("8266:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    wants_letter = 1;\n\n      /*"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      /* Find the state(s) corr"..., '1', 16147) = 0x00f0a199
[0x40cdf3] memchr("1, 0);\n      else\n\tstate_newline"..., '\n', 15960) = 0x00f0a19f
[0x4022d1] memchr("\n      /* Find the state(s) corr"..., '\n', 145) = 0x00f0a0de
[0x4022d1] memchr("      /* Find the state(s) corre"..., '\n', 144) = 0x00f0a127
[0x4022d1] memchr("      state = state_index(d, &fo"..., '\n', 71) = 0x00f0a155
[0x4022d1] memchr("      if (wants_newline)\n\tstate_"..., '\n', 25) = 0x00f0a16e
[0x4022d1] memchr("\tstate_newline = state_index(d, "..., '\n', 0) = NULL
[0x4023cc] fwrite("8271:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tstate_newline = state_index(d, "..., 1, 49, 0x7fce6d444260) = 49
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n\tstate_newline = stat"..., '1', 15953) = 0x00f0a207
[0x40cdf3] memchr("1);\n      else\n\tstate_letter = s"..., '\n', 15850) = 0x00f0a20a
[0x4022d1] memchr("      else\n\tstate_newline = stat"..., '\n', 59) = 0x00f0a1aa
[0x4022d1] memchr("\tstate_newline = state;\n      if"..., '\n', 48) = 0x00f0a1c2
[0x4022d1] memchr("      if (wants_letter)\n\tstate_l"..., '\n', 24) = 0x00f0a1da
[0x4022d1] memchr("\tstate_letter = state_index(d, &"..., '\n', 0) = NULL
[0x4023cc] fwrite("8275:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tstate_letter = state_index(d, &"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      else\n\tstate_letter = state"..., '1', 15846) = 0x00f0a2d7
[0x40cdf3] memchr("1 << k)\n\t    {\n\t      int c = j "..., '\n', 15642) = 0x00f0a2de
[0x4022d1] memchr("      else\n\tstate_letter = state"..., '\n', 182) = 0x00f0a215
[0x4022d1] memchr("\tstate_letter = state;\n\n      /*"..., '\n', 171) = 0x00f0a22c
[0x4022d1] memchr("\n      /* Set the transitions fo"..., '\n', 148) = 0x00f0a22d
[0x4022d1] memchr("      /* Set the transitions for"..., '\n', 147) = 0x00f0a276
[0x4022d1] memchr("      for (j = 0; j < CHARCLASS_"..., '\n', 74) = 0x00f0a2a1
[0x4022d1] memchr("\tfor (k = 0; k < INTBITS; ++k)\n\t"..., '\n', 31) = 0x00f0a2c0
[0x4022d1] memchr("\t  if (labels[i][j] & 1 << k)\n\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("8282:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if (labels[i][j] & 1 << k)\n\t "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    {\n\t      int c = j * INTBIT"..., '1', 15634) = 0x00f0a691
[0x40cdf3] memchr("1024 is arbitrary.  The idea is "..., '\n', 14688) = 0x00f0a6c4
[0x4022d1] memchr("\t    {\n\t      int c = j * INTBIT"..., '\n', 925) = 0x00f0a2e5
[0x4022d1] memchr("\t      int c = j * INTBITS + k;\n"..., '\n', 918) = 0x00f0a305
[0x4022d1] memchr("\n\t      if (c == '\\n')\n\t\ttrans[c"..., '\n', 886) = 0x00f0a306
[0x4022d1] memchr("\t      if (c == '\\n')\n\t\ttrans[c]"..., '\n', 885) = 0x00f0a31c
[0x4022d1] memchr("\t\ttrans[c] = state_newline;\n\t   "..., '\n', 863) = 0x00f0a338
[0x4022d1] memchr("\t      else if (ISALNUM(c))\n\t\ttr"..., '\n', 835) = 0x00f0a354
[0x4022d1] memchr("\t\ttrans[c] = state_letter;\n\t    "..., '\n', 807) = 0x00f0a36f
[0x4022d1] memchr("\t      else if (c < NOTCHAR)\n\t\tt"..., '\n', 780) = 0x00f0a38c
[0x4022d1] memchr("\t\ttrans[c] = state;\n\t    }\n    }"..., '\n', 751) = 0x00f0a3a0
[0x4022d1] memchr("\t    }\n    }\n\n  for (i = 0; i < "..., '\n', 731) = 0x00f0a3a7
[0x4022d1] memchr("    }\n\n  for (i = 0; i < ngrps; "..., '\n', 724) = 0x00f0a3ad
[0x4022d1] memchr("\n  for (i = 0; i < ngrps; ++i)\n "..., '\n', 718) = 0x00f0a3ae
[0x4022d1] memchr("  for (i = 0; i < ngrps; ++i)\n  "..., '\n', 717) = 0x00f0a3cc
[0x4022d1] memchr("    free(grps[i].elems);\n  free("..., '\n', 687) = 0x00f0a3e5
[0x4022d1] memchr("  free(follows.elems);\n  free(tm"..., '\n', 662) = 0x00f0a3fc
[0x4022d1] memchr("  free(tmp.elems);\n}\n\n/* Some ro"..., '\n', 639) = 0x00f0a40f
[0x4022d1] memchr("}\n\n/* Some routines for manipula"..., '\n', 620) = 0x00f0a411
[0x4022d1] memchr("\n/* Some routines for manipulati"..., '\n', 618) = 0x00f0a412
[0x4022d1] memchr("/* Some routines for manipulatin"..., '\n', 617) = 0x00f0a458
[0x4022d1] memchr("   Each state may or may not hav"..., '\n', 547) = 0x00f0a4a1
[0x4022d1] memchr("   is a non-accepting state, the"..., '\n', 474) = 0x00f0a4e8
[0x4022d1] memchr("   If it is an accepting state t"..., '\n', 403) = 0x00f0a531
[0x4022d1] memchr("   If it has no table at all, th"..., '\n', 330) = 0x00f0a56d
[0x4022d1] memchr("   TODO: Improve this comment, g"..., '\n', 270) = 0x00f0a5b6
[0x4022d1] memchr("\nstatic void\nbuild_state(s, d)\n "..., '\n', 197) = 0x00f0a5b7
[0x4022d1] memchr("static void\nbuild_state(s, d)\n  "..., '\n', 196) = 0x00f0a5c3
[0x4022d1] memchr("build_state(s, d)\n     int s;\n  "..., '\n', 184) = 0x00f0a5d5
[0x4022d1] memchr("     int s;\n     struct dfa *d;\n"..., '\n', 166) = 0x00f0a5e1
[0x4022d1] memchr("     struct dfa *d;\n{\n  int *tra"..., '\n', 154) = 0x00f0a5f5
[0x4022d1] memchr("{\n  int *trans;\t\t\t/* The new tra"..., '\n', 134) = 0x00f0a5f7
[0x4022d1] memchr("  int *trans;\t\t\t/* The new trans"..., '\n', 132) = 0x00f0a627
[0x4022d1] memchr("  int i;\n\n  /* Set an upper limi"..., '\n', 84) = 0x00f0a630
[0x4022d1] memchr("\n  /* Set an upper limit on the "..., '\n', 75) = 0x00f0a631
[0x4022d1] memchr("  /* Set an upper limit on the n"..., '\n', 74) = 0x00f0a67b
[0x4022d1] memchr("     exist at once.  1024 is arb"..., '\n', 0) = NULL
[0x4023cc] fwrite("8317:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("     exist at once.  1024 is arb"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     used transition tables will"..., '1', 14636) = 0x00f0a761
[0x40cdf3] memchr("1024)\n    {\n      for (i = 0; i "..., '\n', 14480) = 0x00f0a766
[0x4022d1] memchr("     used transition tables will"..., '\n', 136) = 0x00f0a70f
[0x4022d1] memchr("     were only needed once or tw"..., '\n', 61) = 0x00f0a74c
[0x4022d1] memchr("  if (d->trcount >= 1024)\n    {\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("8320:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (d->trcount >= 1024)\n    {\n"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      for (i = 0; i < d->t"..., '1', 14474) = 0x00f0a8e5
[0x40cdf3] memchr("1, d->states[s].letter, 0,\n     "..., '\n', 14092) = 0x00f0a8ff
[0x4022d1] memchr("    {\n      for (i = 0; i < d->t"..., '\n', 335) = 0x00f0a76c
[0x4022d1] memchr("      for (i = 0; i < d->tralloc"..., '\n', 329) = 0x00f0a793
[0x4022d1] memchr("\tif (d->trans[i])\n\t  {\n\t    free"..., '\n', 290) = 0x00f0a7a5
[0x4022d1] memchr("\t  {\n\t    free((ptr_t) d->trans["..., '\n', 272) = 0x00f0a7aa
[0x4022d1] memchr("\t    free((ptr_t) d->trans[i]);\n"..., '\n', 267) = 0x00f0a7ca
[0x4022d1] memchr("\t    d->trans[i] = NULL;\n\t  }\n\te"..., '\n', 235) = 0x00f0a7e3
[0x4022d1] memchr("\t  }\n\telse if (d->fails[i])\n\t  {"..., '\n', 210) = 0x00f0a7e8
[0x4022d1] memchr("\telse if (d->fails[i])\n\t  {\n\t   "..., '\n', 205) = 0x00f0a7ff
[0x4022d1] memchr("\t  {\n\t    free((ptr_t) d->fails["..., '\n', 182) = 0x00f0a804
[0x4022d1] memchr("\t    free((ptr_t) d->fails[i]);\n"..., '\n', 177) = 0x00f0a824
[0x4022d1] memchr("\t    d->fails[i] = NULL;\n\t  }\n  "..., '\n', 145) = 0x00f0a83d
[0x4022d1] memchr("\t  }\n      d->trcount = 0;\n    }"..., '\n', 120) = 0x00f0a842
[0x4022d1] memchr("      d->trcount = 0;\n    }\n\n  +"..., '\n', 115) = 0x00f0a858
[0x4022d1] memchr("    }\n\n  ++d->trcount;\n\n  /* Set"..., '\n', 93) = 0x00f0a85e
[0x4022d1] memchr("\n  ++d->trcount;\n\n  /* Set up th"..., '\n', 87) = 0x00f0a85f
[0x4022d1] memchr("  ++d->trcount;\n\n  /* Set up the"..., '\n', 86) = 0x00f0a86f
[0x4022d1] memchr("\n  /* Set up the success bits fo"..., '\n', 70) = 0x00f0a870
[0x4022d1] memchr("  /* Set up the success bits for"..., '\n', 69) = 0x00f0a8a0
[0x4022d1] memchr("  d->success[s] = 0;\n  if (ACCEP"..., '\n', 21) = 0x00f0a8b5
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 0) = NULL
[0x4023cc] fwrite("8340:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (ACCEPTS_IN_CONTEXT(d->stat"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      s, *d))\n    d->success[s] "..., '1', 14065) = 0x00f0a96d
[0x40cdf3] memchr("1,\n      s, *d))\n    d->success["..., '\n', 13956) = 0x00f0a96f
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 38) = 0x00f0a90d
[0x4022d1] memchr("    d->success[s] |= 4;\n  if (AC"..., '\n', 24) = 0x00f0a925
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 0) = NULL
[0x4023cc] fwrite("8343:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (ACCEPTS_IN_CONTEXT(d->stat"..., 1, 74, 0x7fce6d444260) = 74
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      s, *d))\n    d->success[s] "..., '1', 13953) = 0x00f0aa03
[0x40cdf3] memchr("1;\n\n  MALLOC(trans, int, NOTCHAR"..., '\n', 13806) = 0x00f0aa05
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 126) = 0x00f0a97d
[0x4022d1] memchr("    d->success[s] |= 2;\n  if (AC"..., '\n', 112) = 0x00f0a995
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 88) = 0x00f0a9df
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 14) = 0x00f0a9ed
[0x4022d1] memchr("    d->success[s] |= 1;\n\n  MALLO"..., '\n', 0) = NULL
[0x4023cc] fwrite("8348:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    d->success[s] |= 1;\n\n  MALLO"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  MALLOC(trans, int, NOTCHAR);\n"..., '1', 13803) = 0x00f0abc7
[0x40cdf3] memchr("1);\n\td->trans = d->realtrans + 1"..., '\n', 13354) = 0x00f0abca
[0x4022d1] memchr("\n  MALLOC(trans, int, NOTCHAR);\n"..., '\n', 406) = 0x00f0aa06
[0x4022d1] memchr("  MALLOC(trans, int, NOTCHAR);\n "..., '\n', 405) = 0x00f0aa25
[0x4022d1] memchr("  dfastate(s, d, trans);\n\n  /* N"..., '\n', 374) = 0x00f0aa3e
[0x4022d1] memchr("\n  /* Now go through the new tra"..., '\n', 349) = 0x00f0aa3f
[0x4022d1] memchr("  /* Now go through the new tran"..., '\n', 348) = 0x00f0aa8a
[0x4022d1] memchr("     and fail arrays are allocat"..., '\n', 273) = 0x00f0aad4
[0x4022d1] memchr("     largest state mentioned in "..., '\n', 199) = 0x00f0ab02
[0x4022d1] memchr("  for (i = 0; i < NOTCHAR; ++i)\n"..., '\n', 153) = 0x00f0ab22
[0x4022d1] memchr("    if (trans[i] >= d->tralloc)\n"..., '\n', 121) = 0x00f0ab42
[0x4022d1] memchr("      {\n\tint oldalloc = d->trall"..., '\n', 89) = 0x00f0ab4a
[0x4022d1] memchr("\tint oldalloc = d->tralloc;\n\n\twh"..., '\n', 81) = 0x00f0ab66
[0x4022d1] memchr("\n\twhile (trans[i] >= d->tralloc)"..., '\n', 53) = 0x00f0ab67
[0x4022d1] memchr("\twhile (trans[i] >= d->tralloc)\n"..., '\n', 52) = 0x00f0ab87
[0x4022d1] memchr("\t  d->tralloc *= 2;\n\tREALLOC(d->"..., '\n', 20) = 0x00f0ab9b
[0x4022d1] memchr("\tREALLOC(d->realtrans, int *, d-"..., '\n', 0) = NULL
[0x4023cc] fwrite("8363:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tREALLOC(d->realtrans, int *, d-"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\td->trans = d->realtrans + 1;\n\tR"..., '1', 13350) = 0x00f0abe6
[0x40cdf3] memchr("1;\n\tREALLOC(d->fails, int *, d->"..., '\n', 13323) = 0x00f0abe8
[0x4022d1] memchr("\td->trans = d->realtrans + 1;\n\tR"..., '\n', 0) = NULL
[0x4023cc] fwrite("8364:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\td->trans = d->realtrans + 1;\n\tR"..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tREALLOC(d->fails, int *, d->tra"..., '1', 13320) = 0x00f0ad60
[0x40cdf3] memchr("1;\n\n  if (ACCEPTING(s, *d))\n    "..., '\n', 12945) = 0x00f0ad62
[0x4022d1] memchr("\tREALLOC(d->fails, int *, d->tra"..., '\n', 358) = 0x00f0ac0f
[0x4022d1] memchr("\tREALLOC(d->success, int, d->tra"..., '\n', 319) = 0x00f0ac36
[0x4022d1] memchr("\tREALLOC(d->newlines, int, d->tr"..., '\n', 280) = 0x00f0ac5e
[0x4022d1] memchr("\twhile (oldalloc < d->tralloc)\n\t"..., '\n', 240) = 0x00f0ac7d
[0x4022d1] memchr("\t  {\n\t    d->trans[oldalloc] = N"..., '\n', 209) = 0x00f0ac82
[0x4022d1] memchr("\t    d->trans[oldalloc] = NULL;\n"..., '\n', 204) = 0x00f0aca2
[0x4022d1] memchr("\t    d->fails[oldalloc++] = NULL"..., '\n', 172) = 0x00f0acc4
[0x4022d1] memchr("\t  }\n      }\n\n  /* Keep the newl"..., '\n', 138) = 0x00f0acc9
[0x4022d1] memchr("      }\n\n  /* Keep the newline t"..., '\n', 133) = 0x00f0acd1
[0x4022d1] memchr("\n  /* Keep the newline transitio"..., '\n', 125) = 0x00f0acd2
[0x4022d1] memchr("  /* Keep the newline transition"..., '\n', 124) = 0x00f0ad1a
[0x4022d1] memchr("     a sentinel. */\n  d->newline"..., '\n', 52) = 0x00f0ad2e
[0x4022d1] memchr("  d->newlines[s] = trans['\\n'];\n"..., '\n', 32) = 0x00f0ad4e
[0x4022d1] memchr("  trans['\\n'] = -1;\n\n  if (ACCEP"..., '\n', 0) = NULL
[0x4023cc] fwrite("8378:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  trans['\\n'] = -1;\n\n  if (ACCEP"..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  if (ACCEPTING(s, *d))\n    d->"..., '1', 12942) = 0x00f0adfd
[0x40cdf3] memchr("1;\n  d->trcount = 0;\n  CALLOC(d-"..., '\n', 12788) = 0x00f0adff
[0x4022d1] memchr("\n  if (ACCEPTING(s, *d))\n    d->"..., '\n', 139) = 0x00f0ad63
[0x4022d1] memchr("  if (ACCEPTING(s, *d))\n    d->f"..., '\n', 138) = 0x00f0ad7b
[0x4022d1] memchr("    d->fails[s] = trans;\n  else\n"..., '\n', 114) = 0x00f0ad94
[0x4022d1] memchr("  else\n    d->trans[s] = trans;\n"..., '\n', 89) = 0x00f0ad9b
[0x4022d1] memchr("    d->trans[s] = trans;\n}\n\nstat"..., '\n', 82) = 0x00f0adb4
[0x4022d1] memchr("}\n\nstatic void\nbuild_state_zero("..., '\n', 57) = 0x00f0adb6
[0x4022d1] memchr("\nstatic void\nbuild_state_zero(d)"..., '\n', 55) = 0x00f0adb7
[0x4022d1] memchr("static void\nbuild_state_zero(d)\n"..., '\n', 54) = 0x00f0adc3
[0x4022d1] memchr("build_state_zero(d)\n     struct "..., '\n', 42) = 0x00f0add7
[0x4022d1] memchr("     struct dfa *d;\n{\n  d->trall"..., '\n', 22) = 0x00f0adeb
[0x4022d1] memchr("{\n  d->tralloc = 1;\n  d->trcount"..., '\n', 2) = 0x00f0aded
[0x4022d1] memchr("  d->tralloc = 1;\n  d->trcount ="..., '\n', 0) = NULL
[0x4023cc] fwrite("8390:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d->tralloc = 1;\n  d->trcount ="..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  d->trcount = 0;\n  CALLOC(d->re"..., '1', 12785) = 0x00f0ae3d
[0x40cdf3] memchr("1);\n  d->trans = d->realtrans + "..., '\n', 12724) = 0x00f0ae40
[0x4022d1] memchr("  d->trcount = 0;\n  CALLOC(d->re"..., '\n', 18) = 0x00f0ae11
[0x4022d1] memchr("  CALLOC(d->realtrans, int *, d-"..., '\n', 0) = NULL
[0x4023cc] fwrite("8392:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  CALLOC(d->realtrans, int *, d-"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  d->trans = d->realtrans + 1;\n "..., '1', 12720) = 0x00f0ae5d
[0x40cdf3] memchr("1;\n  CALLOC(d->fails, int *, d->"..., '\n', 12692) = 0x00f0ae5f
[0x4022d1] memchr("  d->trans = d->realtrans + 1;\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("8393:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d->trans = d->realtrans + 1;\n "..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  CALLOC(d->fails, int *, d->tra"..., '1', 12689) = 0x00f0b1eb
[0x40cdf3] memchr("1 if backreferencing happened an"..., '\n', 11782) = 0x00f0b210
[0x4022d1] memchr("  CALLOC(d->fails, int *, d->tra"..., '\n', 872) = 0x00f0ae86
[0x4022d1] memchr("  MALLOC(d->success, int, d->tra"..., '\n', 833) = 0x00f0aead
[0x4022d1] memchr("  MALLOC(d->newlines, int, d->tr"..., '\n', 794) = 0x00f0aed5
[0x4022d1] memchr("  build_state(0, d);\n}\n\n/* Searc"..., '\n', 754) = 0x00f0aeea
[0x4022d1] memchr("}\n\n/* Search through a buffer lo"..., '\n', 733) = 0x00f0aeec
[0x4022d1] memchr("\n/* Search through a buffer look"..., '\n', 731) = 0x00f0aeed
[0x4022d1] memchr("/* Search through a buffer looki"..., '\n', 730) = 0x00f0af35
[0x4022d1] memchr("   Find the first occurrence of "..., '\n', 658) = 0x00f0af81
[0x4022d1] memchr("   and the shortest possible ver"..., '\n', 582) = 0x00f0afce
[0x4022d1] memchr("   character after the match, or"..., '\n', 505) = 0x00f0b017
[0x4022d1] memchr("   the beginning of the buffer, "..., '\n', 432) = 0x00f0b063
[0x4022d1] memchr("   its end.  We store a newline "..., '\n', 356) = 0x00f0b0ac
[0x4022d1] memchr("   better point somewhere valid."..., '\n', 283) = 0x00f0b0f6
[0x4022d1] memchr("   allow newlines to be in the m"..., '\n', 209) = 0x00f0b138
[0x4022d1] memchr("   NULL it points to a place we'"..., '\n', 143) = 0x00f0b17f
[0x4022d1] memchr("   see a newline.  Finally, if b"..., '\n', 72) = 0x00f0b1c7
[0x4022d1] memchr("   where we're supposed to store"..., '\n', 0) = NULL
[0x4023cc] fwrite("8410:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   where we're supposed to store"..., 1, 73, 0x7fce6d444260) = 73
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   match needs to be verified by"..., '1', 11744) = 0x00f0b329
[0x40cdf3] memchr("1, tmp;\t\t/* Current state. */\n  "..., '\n', 11464) = 0x00f0b346
[0x4022d1] memchr("   match needs to be verified by"..., '\n', 265) = 0x00f0b254
[0x4022d1] memchr("   we store a 0 in *backref. */\n"..., '\n', 197) = 0x00f0b274
[0x4022d1] memchr("char *\ndfaexec(d, begin, end, ne"..., '\n', 165) = 0x00f0b27b
[0x4022d1] memchr("dfaexec(d, begin, end, newline, "..., '\n', 158) = 0x00f0b2ab
[0x4022d1] memchr("     struct dfa *d;\n     char *b"..., '\n', 110) = 0x00f0b2bf
[0x4022d1] memchr("     char *begin;\n     char *end"..., '\n', 90) = 0x00f0b2d1
[0x4022d1] memchr("     char *end;\n     int newline"..., '\n', 72) = 0x00f0b2e1
[0x4022d1] memchr("     int newline;\n     int *coun"..., '\n', 56) = 0x00f0b2f3
[0x4022d1] memchr("     int *count;\n     int *backr"..., '\n', 38) = 0x00f0b304
[0x4022d1] memchr("     int *backref;\n{\n  register "..., '\n', 21) = 0x00f0b317
[0x4022d1] memchr("{\n  register s, s1, tmp;\t\t/* Cur"..., '\n', 2) = 0x00f0b319
[0x4022d1] memchr("  register s, s1, tmp;\t\t/* Curre"..., '\n', 0) = NULL
[0x4023cc] fwrite("8422:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  register s, s1, tmp;\t\t/* Curre"..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  register unsigned char *p;\t/* "..., '1', 11434) = 0x00f0b470
[0x40cdf3] memchr("1;\n      for (i = 0; i < NOTCHAR"..., '\n', 11137) = 0x00f0b472
[0x4022d1] memchr("  register unsigned char *p;\t/* "..., '\n', 279) = 0x00f0b382
[0x4022d1] memchr("  register **trans, *t;\t\t/* Copy"..., '\n', 219) = 0x00f0b3c6
[0x4022d1] memchr("\t\t\t\t   into a register. */\n  sta"..., '\n', 151) = 0x00f0b3e1
[0x4022d1] memchr("  static sbit[NOTCHAR];\t/* Table"..., '\n', 124) = 0x00f0b421
[0x4022d1] memchr("  static sbit_init;\n\n  if (! sbi"..., '\n', 60) = 0x00f0b435
[0x4022d1] memchr("\n  if (! sbit_init)\n    {\n      "..., '\n', 40) = 0x00f0b436
[0x4022d1] memchr("  if (! sbit_init)\n    {\n      i"..., '\n', 39) = 0x00f0b449
[0x4022d1] memchr("    {\n      int i;\n\n      sbit_i"..., '\n', 20) = 0x00f0b44f
[0x4022d1] memchr("      int i;\n\n      sbit_init = "..., '\n', 14) = 0x00f0b45c
[0x4022d1] memchr("\n      sbit_init = 1;\n      for "..., '\n', 1) = 0x00f0b45d
[0x4022d1] memchr("      sbit_init = 1;\n      for ("..., '\n', 0) = NULL
[0x4023cc] fwrite("8433:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      sbit_init = 1;\n      for ("..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      for (i = 0; i < NOTCHAR; +"..., '1', 11134) = 0x00f0b4f0
[0x40cdf3] memchr("1;\n    }\n\n  if (! d->tralloc)\n  "..., '\n', 11009) = 0x00f0b4f2
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 112) = 0x00f0b496
[0x4022d1] memchr("\tif (i == '\\n')\n\t  sbit[i] = 4;\n"..., '\n', 76) = 0x00f0b4a6
[0x4022d1] memchr("\t  sbit[i] = 4;\n\telse if (ISALNU"..., '\n', 60) = 0x00f0b4b6
[0x4022d1] memchr("\telse if (ISALNUM(i))\n\t  sbit[i]"..., '\n', 44) = 0x00f0b4cc
[0x4022d1] memchr("\t  sbit[i] = 2;\n\telse\n\t  sbit[i]"..., '\n', 22) = 0x00f0b4dc
[0x4022d1] memchr("\telse\n\t  sbit[i] = 1;\n    }\n\n  i"..., '\n', 6) = 0x00f0b4e2
[0x4022d1] memchr("\t  sbit[i] = 1;\n    }\n\n  if (! d"..., '\n', 0) = NULL
[0x4023cc] fwrite("8440:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  sbit[i] = 1;\n    }\n\n  if (! d"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n\n  if (! d->tralloc)\n    b"..., '1', 11006) = 0x00f0b52f
[0x40cdf3] memchr("1 = 0;\n  p = (unsigned char *) b"..., '\n', 10946) = 0x00f0b535
[0x4022d1] memchr("    }\n\n  if (! d->tralloc)\n    b"..., '\n', 53) = 0x00f0b4f8
[0x4022d1] memchr("\n  if (! d->tralloc)\n    build_s"..., '\n', 47) = 0x00f0b4f9
[0x4022d1] memchr("  if (! d->tralloc)\n    build_st"..., '\n', 46) = 0x00f0b50d
[0x4022d1] memchr("    build_state_zero(d);\n\n  s = "..., '\n', 26) = 0x00f0b526
[0x4022d1] memchr("\n  s = s1 = 0;\n  p = (unsigned c"..., '\n', 1) = 0x00f0b527
[0x4022d1] memchr("  s = s1 = 0;\n  p = (unsigned ch"..., '\n', 0) = NULL
[0x4023cc] fwrite("8446:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  s = s1 = 0;\n  p = (unsigned ch"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  p = (unsigned char *) begin;\n "..., '1', 10939) = 0x00f0b5dc
[0x40cdf3] memchr("1 = t[*p++];\n\t    if (! (t = tra"..., '\n', 10773) = 0x00f0b5e8
[0x4022d1] memchr("  p = (unsigned char *) begin;\n "..., '\n', 160) = 0x00f0b554
[0x4022d1] memchr("  trans = d->trans;\n  *end = '\\n"..., '\n', 129) = 0x00f0b568
[0x4022d1] memchr("  *end = '\\n';\n\n  for (;;)\n    {"..., '\n', 109) = 0x00f0b577
[0x4022d1] memchr("\n  for (;;)\n    {\n      /* The d"..., '\n', 94) = 0x00f0b578
[0x4022d1] memchr("  for (;;)\n    {\n      /* The dr"..., '\n', 93) = 0x00f0b583
[0x4022d1] memchr("    {\n      /* The dreaded inner"..., '\n', 82) = 0x00f0b589
[0x4022d1] memchr("      /* The dreaded inner loop."..., '\n', 76) = 0x00f0b5ad
[0x4022d1] memchr("      if ((t = trans[s]) != 0)\n\t"..., '\n', 40) = 0x00f0b5cc
[0x4022d1] memchr("\tdo\n\t  {\n\t    s1 = t[*p++];\n\t   "..., '\n', 9) = 0x00f0b5d0
[0x4022d1] memchr("\t  {\n\t    s1 = t[*p++];\n\t    if "..., '\n', 5) = 0x00f0b5d5
[0x4022d1] memchr("\t    s1 = t[*p++];\n\t    if (! (t"..., '\n', 0) = NULL
[0x4023cc] fwrite("8457:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    s1 = t[*p++];\n\t    if (! (t"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (! (t = trans[s1]))\n\t   "..., '1', 10760) = 0x00f0b600
[0x40cdf3] memchr("1]))\n\t      goto last_was_s;\n\t  "..., '\n', 10737) = 0x00f0b604
[0x4022d1] memchr("\t    if (! (t = trans[s1]))\n\t   "..., '\n', 0) = NULL
[0x4023cc] fwrite("8458:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    if (! (t = trans[s1]))\n\t   "..., 1, 28, 0x7fce6d444260) = 28
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      goto last_was_s;\n\t    s ="..., '1', 10732) = 0x00f0b66e
[0x40cdf3] memchr("1;\n    last_was_s:\n      tmp = s"..., '\n', 10627) = 0x00f0b670
[0x4022d1] memchr("\t      goto last_was_s;\n\t    s ="..., '\n', 84) = 0x00f0b61c
[0x4022d1] memchr("\t    s = t[*p++];\n\t  }\n        w"..., '\n', 60) = 0x00f0b62e
[0x4022d1] memchr("\t  }\n        while ((t = trans[s"..., '\n', 42) = 0x00f0b633
[0x4022d1] memchr("        while ((t = trans[s]) !="..., '\n', 37) = 0x00f0b658
[0x4022d1] memchr("      goto last_was_s1;\n    last"..., '\n', 0) = NULL
[0x4023cc] fwrite("8463:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      goto last_was_s1;\n    last"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    last_was_s:\n      tmp = s, s"..., '1', 10624) = 0x00f0b695
[0x40cdf3] memchr("1, s1 = tmp;\n    last_was_s1:\n\n "..., '\n', 10588) = 0x00f0b6a1
[0x4022d1] memchr("    last_was_s:\n      tmp = s, s"..., '\n', 16) = 0x00f0b680
[0x4022d1] memchr("      tmp = s, s = s1, s1 = tmp;"..., '\n', 0) = NULL
[0x4023cc] fwrite("8465:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      tmp = s, s = s1, s1 = tmp;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    last_was_s1:\n\n      if (s >="..., '1', 10575) = 0x00f0b6b0
[0x40cdf3] memchr("1:\n\n      if (s >= 0 && p <= (un"..., '\n', 10561) = 0x00f0b6b2
[0x4022d1] memchr("    last_was_s1:\n\n      if (s >="..., '\n', 0) = NULL
[0x4023cc] fwrite("8466:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    last_was_s1:\n\n      if (s >="..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      if (s >= 0 && p <= (unsig"..., '1', 10558) = 0x00f0b75d
[0x40cdf3] memchr("1;\n\t\telse\n\t\t  *backref = 0;\n\t   "..., '\n', 10388) = 0x00f0b75f
[0x4022d1] memchr("\n      if (s >= 0 && p <= (unsig"..., '\n', 155) = 0x00f0b6b3
[0x4022d1] memchr("      if (s >= 0 && p <= (unsign"..., '\n', 154) = 0x00f0b6f2
[0x4022d1] memchr("\t{\n\t  if (d->success[s] & sbit[*"..., '\n', 91) = 0x00f0b6f5
[0x4022d1] memchr("\t  if (d->success[s] & sbit[*p])"..., '\n', 88) = 0x00f0b716
[0x4022d1] memchr("\t    {\n\t      if (backref)\n\t\tif "..., '\n', 55) = 0x00f0b71d
[0x4022d1] memchr("\t      if (backref)\n\t\tif (d->sta"..., '\n', 48) = 0x00f0b731
[0x4022d1] memchr("\t\tif (d->states[s].backref)\n\t\t  "..., '\n', 28) = 0x00f0b74d
[0x4022d1] memchr("\t\t  *backref = 1;\n\t\telse\n\t\t  *ba"..., '\n', 0) = NULL
[0x4023cc] fwrite("8474:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  *backref = 1;\n\t\telse\n\t\t  *ba"..., 1, 18, 0x7fce6d444260) = 18
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\telse\n\t\t  *backref = 0;\n\t      "..., '1', 10385) = 0x00f0b79f
[0x40cdf3] memchr("1 = s;\n\t  s = d->fails[s][*p++];"..., '\n', 10322) = 0x00f0b7a5
[0x4022d1] memchr("\t\telse\n\t\t  *backref = 0;\n\t      "..., '\n', 59) = 0x00f0b766
[0x4022d1] memchr("\t\t  *backref = 0;\n\t      return "..., '\n', 52) = 0x00f0b778
[0x4022d1] memchr("\t      return (char *) p;\n\t    }"..., '\n', 34) = 0x00f0b792
[0x4022d1] memchr("\t    }\n\n\t  s1 = s;\n\t  s = d->fai"..., '\n', 8) = 0x00f0b799
[0x4022d1] memchr("\n\t  s1 = s;\n\t  s = d->fails[s][*"..., '\n', 1) = 0x00f0b79a
[0x4022d1] memchr("\t  s1 = s;\n\t  s = d->fails[s][*p"..., '\n', 0) = NULL
[0x4023cc] fwrite("8480:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  s1 = s;\n\t  s = d->fails[s][*p"..., 1, 11, 0x7fce6d444260) = 11
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  s = d->fails[s][*p++];\n\t  con"..., '1', 10315) = 0x00f0b83b
[0x40cdf3] memchr("1] == '\\n')\n\t++*count;\n\n      /*"..., '\n', 10166) = 0x00f0b846
[0x4022d1] memchr("\t  s = d->fails[s][*p++];\n\t  con"..., '\n', 106) = 0x00f0b7bf
[0x4022d1] memchr("\t  continue;\n\t}\n\n      /* If the"..., '\n', 80) = 0x00f0b7cc
[0x4022d1] memchr("\t}\n\n      /* If the previous cha"..., '\n', 67) = 0x00f0b7cf
[0x4022d1] memchr("\n      /* If the previous charac"..., '\n', 64) = 0x00f0b7d0
[0x4022d1] memchr("      /* If the previous charact"..., '\n', 63) = 0x00f0b80f
[0x4022d1] memchr("      if (count && (char *) p <="..., '\n', 0) = NULL
[0x4023cc] fwrite("8486:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if (count && (char *) p <="..., 1, 55, 0x7fce6d444260) = 55
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t++*count;\n\n      /* Check if we"..., '1', 10154) = 0x00f0b916
[0x40cdf3] memchr("1] == '\\n' && newline)\n\t{\n\t  s ="..., '\n', 9947) = 0x00f0b92c
[0x4022d1] memchr("\t++*count;\n\n      /* Check if we"..., '\n', 194) = 0x00f0b851
[0x4022d1] memchr("\n      /* Check if we've run off"..., '\n', 183) = 0x00f0b852
[0x4022d1] memchr("      /* Check if we've run off "..., '\n', 182) = 0x00f0b88c
[0x4022d1] memchr("      if ((char *) p > end)\n\tret"..., '\n', 124) = 0x00f0b8a8
[0x4022d1] memchr("\treturn NULL;\n\n      if (s >= 0)"..., '\n', 96) = 0x00f0b8b6
[0x4022d1] memchr("\n      if (s >= 0)\n\t{\n\t  build_s"..., '\n', 82) = 0x00f0b8b7
[0x4022d1] memchr("      if (s >= 0)\n\t{\n\t  build_st"..., '\n', 81) = 0x00f0b8c9
[0x4022d1] memchr("\t{\n\t  build_state(s, d);\n\t  tran"..., '\n', 63) = 0x00f0b8cc
[0x4022d1] memchr("\t  build_state(s, d);\n\t  trans ="..., '\n', 60) = 0x00f0b8e2
[0x4022d1] memchr("\t  trans = d->trans;\n\t  continue"..., '\n', 38) = 0x00f0b8f7
[0x4022d1] memchr("\t  continue;\n\t}\n\n      if (p[-1]"..., '\n', 17) = 0x00f0b904
[0x4022d1] memchr("\t}\n\n      if (p[-1] == '\\n' && n"..., '\n', 4) = 0x00f0b907
[0x4022d1] memchr("\n      if (p[-1] == '\\n' && newl"..., '\n', 1) = 0x00f0b908
[0x4022d1] memchr("      if (p[-1] == '\\n' && newli"..., '\n', 0) = NULL
[0x4023cc] fwrite("8500:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if (p[-1] == '\\n' && newli"..., 1, 36, 0x7fce6d444260) = 36
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  s = d->newlines[s1];\n\t  co"..., '1', 9924) = 0x00f0b944
[0x40cdf3] memchr("1];\n\t  continue;\n\t}\n\n      s = 0"..., '\n', 9901) = 0x00f0b947
[0x4022d1] memchr("\t{\n\t  s = d->newlines[s1];\n\t  co"..., '\n', 3) = 0x00f0b92f
[0x4022d1] memchr("\t  s = d->newlines[s1];\n\t  conti"..., '\n', 0) = NULL
[0x4023cc] fwrite("8502:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  s = d->newlines[s1];\n\t  conti"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  continue;\n\t}\n\n      s = 0;\n  "..., '1', 9897) = 0x00f0ba08
[0x40cdf3] memchr("1;\n  MALLOC(d->charclasses, char"..., '\n', 9705) = 0x00f0ba0a
[0x4022d1] memchr("\t  continue;\n\t}\n\n      s = 0;\n  "..., '\n', 178) = 0x00f0b954
[0x4022d1] memchr("\t}\n\n      s = 0;\n    }\n}\n\n/* Ini"..., '\n', 165) = 0x00f0b957
[0x4022d1] memchr("\n      s = 0;\n    }\n}\n\n/* Initia"..., '\n', 162) = 0x00f0b958
[0x4022d1] memchr("      s = 0;\n    }\n}\n\n/* Initial"..., '\n', 161) = 0x00f0b965
[0x4022d1] memchr("    }\n}\n\n/* Initialize the compo"..., '\n', 148) = 0x00f0b96b
[0x4022d1] memchr("}\n\n/* Initialize the components "..., '\n', 142) = 0x00f0b96d
[0x4022d1] memchr("\n/* Initialize the components of"..., '\n', 140) = 0x00f0b96e
[0x4022d1] memchr("/* Initialize the components of "..., '\n', 139) = 0x00f0b9b2
[0x4022d1] memchr("   initialize for themselves. */"..., '\n', 71) = 0x00f0b9d3
[0x4022d1] memchr("void\ndfainit(d)\n     struct dfa "..., '\n', 38) = 0x00f0b9d8
[0x4022d1] memchr("dfainit(d)\n     struct dfa *d;\n{"..., '\n', 33) = 0x00f0b9e3
[0x4022d1] memchr("     struct dfa *d;\n{\n  d->callo"..., '\n', 22) = 0x00f0b9f7
[0x4022d1] memchr("{\n  d->calloc = 1;\n  MALLOC(d->c"..., '\n', 2) = 0x00f0b9f9
[0x4022d1] memchr("  d->calloc = 1;\n  MALLOC(d->cha"..., '\n', 0) = NULL
[0x4023cc] fwrite("8516:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d->calloc = 1;\n  MALLOC(d->cha"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  MALLOC(d->charclasses, charcla"..., '1', 9702) = 0x00f0ba5b
[0x40cdf3] memchr("1;\n  MALLOC(d->tokens, token, d-"..., '\n', 9622) = 0x00f0ba5d
[0x4022d1] memchr("  MALLOC(d->charclasses, charcla"..., '\n', 66) = 0x00f0ba3a
[0x4022d1] memchr("  d->cindex = 0;\n\n  d->talloc = "..., '\n', 18) = 0x00f0ba4b
[0x4022d1] memchr("\n  d->talloc = 1;\n  MALLOC(d->to"..., '\n', 1) = 0x00f0ba4c
[0x4022d1] memchr("  d->talloc = 1;\n  MALLOC(d->tok"..., '\n', 0) = NULL
[0x4023cc] fwrite("8520:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d->talloc = 1;\n  MALLOC(d->tok"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  MALLOC(d->tokens, token, d->ta"..., '1', 9619) = 0x00f0bd9e
[0x40cdf3] memchr("1;\n      dfaparse(s, len, d);\n  "..., '\n', 8787) = 0x00f0bda0
[0x4022d1] memchr("  MALLOC(d->tokens, token, d->ta"..., '\n', 814) = 0x00f0ba84
[0x4022d1] memchr("  d->tindex = d->depth = d->nlea"..., '\n', 775) = 0x00f0babb
[0x4022d1] memchr("\n  d->searchflag = 0;\n  d->trall"..., '\n', 720) = 0x00f0babc
[0x4022d1] memchr("  d->searchflag = 0;\n  d->trallo"..., '\n', 719) = 0x00f0bad1
[0x4022d1] memchr("  d->tralloc = 0;\n\n  d->musts = "..., '\n', 698) = 0x00f0bae3
[0x4022d1] memchr("\n  d->musts = 0;\n}\n\n/* Parse and"..., '\n', 680) = 0x00f0bae4
[0x4022d1] memchr("  d->musts = 0;\n}\n\n/* Parse and "..., '\n', 679) = 0x00f0baf4
[0x4022d1] memchr("}\n\n/* Parse and analyze a single"..., '\n', 663) = 0x00f0baf6
[0x4022d1] memchr("\n/* Parse and analyze a single s"..., '\n', 661) = 0x00f0baf7
[0x4022d1] memchr("/* Parse and analyze a single st"..., '\n', 660) = 0x00f0bb34
[0x4022d1] memchr("void\ndfacomp(s, len, d, searchfl"..., '\n', 599) = 0x00f0bb39
[0x4022d1] memchr("dfacomp(s, len, d, searchflag)\n "..., '\n', 594) = 0x00f0bb58
[0x4022d1] memchr("     char *s;\n     size_t len;\n "..., '\n', 563) = 0x00f0bb66
[0x4022d1] memchr("     size_t len;\n     struct dfa"..., '\n', 549) = 0x00f0bb77
[0x4022d1] memchr("     struct dfa *d;\n     int sea"..., '\n', 532) = 0x00f0bb8b
[0x4022d1] memchr("     int searchflag;\n{\n  if (cas"..., '\n', 512) = 0x00f0bba0
[0x4022d1] memchr("{\n  if (case_fold)\t/* dummy fold"..., '\n', 491) = 0x00f0bba2
[0x4022d1] memchr("  if (case_fold)\t/* dummy foldin"..., '\n', 489) = 0x00f0bbdf
[0x4022d1] memchr("    {\n      char *copy;\n      in"..., '\n', 428) = 0x00f0bbe5
[0x4022d1] memchr("      char *copy;\n      int i;\n\n"..., '\n', 422) = 0x00f0bbf7
[0x4022d1] memchr("      int i;\n\n      copy = mallo"..., '\n', 404) = 0x00f0bc04
[0x4022d1] memchr("\n      copy = malloc(len);\n     "..., '\n', 391) = 0x00f0bc05
[0x4022d1] memchr("      copy = malloc(len);\n      "..., '\n', 390) = 0x00f0bc1f
[0x4022d1] memchr("      if (!copy)\n\tdfaerror("out "..., '\n', 364) = 0x00f0bc30
[0x4022d1] memchr("\tdfaerror("out of memory");\n    "..., '\n', 347) = 0x00f0bc4c
[0x4022d1] memchr("      \n      /* This is a kludge"..., '\n', 319) = 0x00f0bc53
[0x4022d1] memchr("      /* This is a kludge. */\n  "..., '\n', 312) = 0x00f0bc71
[0x4022d1] memchr("      case_fold = 0;\n      for ("..., '\n', 282) = 0x00f0bc86
[0x4022d1] memchr("      for (i = 0; i < len; ++i)\n"..., '\n', 261) = 0x00f0bca6
[0x4022d1] memchr("\tif (ISUPPER(s[i]))\n\t  copy[i] ="..., '\n', 229) = 0x00f0bcba
[0x4022d1] memchr("\t  copy[i] = tolower(s[i]);\n\tels"..., '\n', 209) = 0x00f0bcd6
[0x4022d1] memchr("\telse\n\t  copy[i] = s[i];\n\n      "..., '\n', 181) = 0x00f0bcdc
[0x4022d1] memchr("\t  copy[i] = s[i];\n\n      dfaini"..., '\n', 175) = 0x00f0bcef
[0x4022d1] memchr("\n      dfainit(d);\n      dfapars"..., '\n', 156) = 0x00f0bcf0
[0x4022d1] memchr("      dfainit(d);\n      dfaparse"..., '\n', 155) = 0x00f0bd02
[0x4022d1] memchr("      dfaparse(copy, len, d);\n  "..., '\n', 137) = 0x00f0bd20
[0x4022d1] memchr("      free(copy);\n      dfamust("..., '\n', 107) = 0x00f0bd32
[0x4022d1] memchr("      dfamust(d);\n      d->cinde"..., '\n', 89) = 0x00f0bd44
[0x4022d1] memchr("      d->cindex = d->tindex = d-"..., '\n', 71) = 0x00f0bd8b
[0x4022d1] memchr("      case_fold = 1;\n      dfapa"..., '\n', 0) = NULL
[0x4023cc] fwrite("8560:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      case_fold = 1;\n      dfapa"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      dfaparse(s, len, d);\n     "..., '1', 8784) = 0x00f0ce80
[0x40cdf3] memchr("1);\n  else\n    result = (char *)"..., '\n', 4465) = 0x00f0ce83
[0x4022d1] memchr("      dfaparse(s, len, d);\n     "..., '\n', 4280) = 0x00f0bdbb
[0x4022d1] memchr("      dfaanalyze(d, searchflag);"..., '\n', 4253) = 0x00f0bddc
[0x4022d1] memchr("    }\n  else\n    {\n        dfain"..., '\n', 4220) = 0x00f0bde2
[0x4022d1] memchr("  else\n    {\n        dfainit(d);"..., '\n', 4214) = 0x00f0bde9
[0x4022d1] memchr("    {\n        dfainit(d);\n      "..., '\n', 4207) = 0x00f0bdef
[0x4022d1] memchr("        dfainit(d);\n        dfap"..., '\n', 4201) = 0x00f0be03
[0x4022d1] memchr("        dfaparse(s, len, d);\n\tdf"..., '\n', 4181) = 0x00f0be20
[0x4022d1] memchr("\tdfamust(d);\n        dfaanalyze("..., '\n', 4152) = 0x00f0be2d
[0x4022d1] memchr("        dfaanalyze(d, searchflag"..., '\n', 4139) = 0x00f0be50
[0x4022d1] memchr("    }\n}\n\n/* Free the storage hel"..., '\n', 4104) = 0x00f0be56
[0x4022d1] memchr("}\n\n/* Free the storage held by t"..., '\n', 4098) = 0x00f0be58
[0x4022d1] memchr("\n/* Free the storage held by the"..., '\n', 4096) = 0x00f0be59
[0x4022d1] memchr("/* Free the storage held by the "..., '\n', 4095) = 0x00f0be91
[0x4022d1] memchr("void\ndfafree(d)\n     struct dfa "..., '\n', 4039) = 0x00f0be96
[0x4022d1] memchr("dfafree(d)\n     struct dfa *d;\n{"..., '\n', 4034) = 0x00f0bea1
[0x4022d1] memchr("     struct dfa *d;\n{\n  int i;\n "..., '\n', 4023) = 0x00f0beb5
[0x4022d1] memchr("{\n  int i;\n  struct dfamust *dm,"..., '\n', 4003) = 0x00f0beb7
[0x4022d1] memchr("  int i;\n  struct dfamust *dm, *"..., '\n', 4001) = 0x00f0bec0
[0x4022d1] memchr("  struct dfamust *dm, *ndm;\n\n  f"..., '\n', 3992) = 0x00f0bedc
[0x4022d1] memchr("\n  free((ptr_t) d->charclasses);"..., '\n', 3964) = 0x00f0bedd
[0x4022d1] memchr("  free((ptr_t) d->charclasses);\n"..., '\n', 3963) = 0x00f0befd
[0x4022d1] memchr("  free((ptr_t) d->tokens);\n  for"..., '\n', 3931) = 0x00f0bf18
[0x4022d1] memchr("  for (i = 0; i < d->sindex; ++i"..., '\n', 3904) = 0x00f0bf3a
[0x4022d1] memchr("    free((ptr_t) d->states[i].el"..., '\n', 3870) = 0x00f0bf66
[0x4022d1] memchr("  free((ptr_t) d->states);\n  for"..., '\n', 3826) = 0x00f0bf81
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 3799) = 0x00f0bfa3
[0x4022d1] memchr("    if (d->follows[i].elems)\n   "..., '\n', 3765) = 0x00f0bfc0
[0x4022d1] memchr("      free((ptr_t) d->follows[i]"..., '\n', 3736) = 0x00f0bfe9
[0x4022d1] memchr("  free((ptr_t) d->follows);\n  fo"..., '\n', 3695) = 0x00f0c005
[0x4022d1] memchr("  for (i = 0; i < d->tralloc; ++"..., '\n', 3667) = 0x00f0c028
[0x4022d1] memchr("    if (d->trans[i])\n      free("..., '\n', 3632) = 0x00f0c03d
[0x4022d1] memchr("      free((ptr_t) d->trans[i]);"..., '\n', 3611) = 0x00f0c05e
[0x4022d1] memchr("    else if (d->fails[i])\n      "..., '\n', 3578) = 0x00f0c078
[0x4022d1] memchr("      free((ptr_t) d->fails[i]);"..., '\n', 3552) = 0x00f0c099
[0x4022d1] memchr("  free((ptr_t) d->realtrans);\n  "..., '\n', 3519) = 0x00f0c0b7
[0x4022d1] memchr("  free((ptr_t) d->fails);\n  free"..., '\n', 3489) = 0x00f0c0d1
[0x4022d1] memchr("  free((ptr_t) d->newlines);\n  f"..., '\n', 3463) = 0x00f0c0ee
[0x4022d1] memchr("  for (dm = d->musts; dm; dm = n"..., '\n', 3434) = 0x00f0c112
[0x4022d1] memchr("    {\n      ndm = dm->next;\n    "..., '\n', 3398) = 0x00f0c118
[0x4022d1] memchr("      ndm = dm->next;\n      free"..., '\n', 3392) = 0x00f0c12e
[0x4022d1] memchr("      free(dm->must);\n      free"..., '\n', 3370) = 0x00f0c144
[0x4022d1] memchr("      free((ptr_t) dm);\n    }\n}\n"..., '\n', 3348) = 0x00f0c15c
[0x4022d1] memchr("    }\n}\n\n/* Having found the pos"..., '\n', 3324) = 0x00f0c162
[0x4022d1] memchr("}\n\n/* Having found the postfix r"..., '\n', 3318) = 0x00f0c164
[0x4022d1] memchr("\n/* Having found the postfix rep"..., '\n', 3316) = 0x00f0c165
[0x4022d1] memchr("/* Having found the postfix repr"..., '\n', 3315) = 0x00f0c1ab
[0x4022d1] memchr("   try to find a long sequence o"..., '\n', 3245) = 0x00f0c1f5
[0x4022d1] memchr("   containing the r.e.\n   Findin"..., '\n', 3171) = 0x00f0c20c
[0x4022d1] memchr("   Finding a "longest" sequence "..., '\n', 3148) = 0x00f0c246
[0x4022d1] memchr("   we take an easy way out and h"..., '\n', 3090) = 0x00f0c278
[0x4022d1] memchr("   (Take "(ab|a)b"--please.)\n\n  "..., '\n', 3040) = 0x00f0c295
[0x4022d1] memchr("\n   We do a bottom-up calculatio"..., '\n', 3011) = 0x00f0c296
[0x4022d1] memchr("   We do a bottom-up calculation"..., '\n', 3010) = 0x00f0c2e3
[0x4022d1] memchr("   in matches of r.e.'s represen"..., '\n', 2933) = 0x00f0c333
[0x4022d1] memchr("   representation:\n\tsequences th"..., '\n', 2853) = 0x00f0c346
[0x4022d1] memchr("\tsequences that must appear at t"..., '\n', 2834) = 0x00f0c384
[0x4022d1] memchr("\tsequences that must appear at t"..., '\n', 2772) = 0x00f0c3c4
[0x4022d1] memchr("\tlists of sequences that must ap"..., '\n', 2708) = 0x00f0c407
[0x4022d1] memchr("\tsequences that must constitute "..., '\n', 2641) = 0x00f0c438
[0x4022d1] memchr("\n   When we get to the root of t"..., '\n', 2592) = 0x00f0c439
[0x4022d1] memchr("   When we get to the root of th"..., '\n', 2591) = 0x00f0c482
[0x4022d1] memchr("   calculated "in" sequences as "..., '\n', 2518) = 0x00f0c4d3
[0x4022d1] memchr("   d->must (where "d" is the sin"..., '\n', 2437) = 0x00f0c516
[0x4022d1] memchr("   the length of the sequence is"..., '\n', 2370) = 0x00f0c54d
[0x4022d1] memchr("\n   The sequences calculated for"..., '\n', 2315) = 0x00f0c54e
[0x4022d1] memchr("   The sequences calculated for "..., '\n', 2314) = 0x00f0c59b
[0x4022d1] memchr("   are shown below.  "p" is the "..., '\n', 2237) = 0x00f0c5e9
[0x4022d1] memchr("   operand of binary operators);"..., '\n', 2159) = 0x00f0c632
[0x4022d1] memchr("   operators.\n\n   "ZERO" means ""..., '\n', 2086) = 0x00f0c640
[0x4022d1] memchr("\n   "ZERO" means "a zero-length "..., '\n', 2072) = 0x00f0c641
[0x4022d1] memchr("   "ZERO" means "a zero-length s"..., '\n', 2071) = 0x00f0c671
[0x4022d1] memchr("\n\tType\tleft\t\tright\t\tis\t\tin\n\t----"..., '\n', 2023) = 0x00f0c672
[0x4022d1] memchr("\tType\tleft\t\tright\t\tis\t\tin\n\t----\t"..., '\n', 2022) = 0x00f0c68c
[0x4022d1] memchr("\t----\t----\t\t-----\t\t--\t\t--\n\tchar "..., '\n', 1996) = 0x00f0c6a6
[0x4022d1] memchr("\tchar c\t# c\t\t# c\t\t# c\t\t# c\n\t\n\tCS"..., '\n', 1970) = 0x00f0c6c1
[0x4022d1] memchr("\t\n\tCSET\tZERO\t\tZERO\t\tZERO\t\tZERO\n\t"..., '\n', 1943) = 0x00f0c6c3
[0x4022d1] memchr("\tCSET\tZERO\t\tZERO\t\tZERO\t\tZERO\n\t\n\t"..., '\n', 1941) = 0x00f0c6e0
[0x4022d1] memchr("\t\n\tSTAR\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n"..., '\n', 1912) = 0x00f0c6e2
[0x4022d1] memchr("\tSTAR\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n\tQ"..., '\n', 1910) = 0x00f0c6ff
[0x4022d1] memchr("\n\tQMARK\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n"..., '\n', 1881) = 0x00f0c700
[0x4022d1] memchr("\tQMARK\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n\t"..., '\n', 1880) = 0x00f0c71e
[0x4022d1] memchr("\n\tPLUS\tp->left\t\tp->right\tZERO\t\tp"..., '\n', 1850) = 0x00f0c71f
[0x4022d1] memchr("\tPLUS\tp->left\t\tp->right\tZERO\t\tp-"..., '\n', 1849) = 0x00f0c743
[0x4022d1] memchr("\n\tCAT\t(p->is==ZERO)?\t(q->is==ZER"..., '\n', 1813) = 0x00f0c744
[0x4022d1] memchr("\tCAT\t(p->is==ZERO)?\t(q->is==ZERO"..., '\n', 1812) = 0x00f0c782
[0x4022d1] memchr("\t\tp->left :\tq->right :\tq->is!=ZE"..., '\n', 1750) = 0x00f0c7b3
[0x4022d1] memchr("\t\tp->is##q->left\tp->right##q->is"..., '\n', 1701) = 0x00f0c7f5
[0x4022d1] memchr("\t\t\t\t\t\tZERO\n\t\t\t\t\t\n\tOR\tlongest com"..., '\n', 1635) = 0x00f0c800
[0x4022d1] memchr("\t\t\t\t\t\n\tOR\tlongest common\tlongest"..., '\n', 1624) = 0x00f0c806
[0x4022d1] memchr("\tOR\tlongest common\tlongest commo"..., '\n', 1618) = 0x00f0c84b
[0x4022d1] memchr("\t\tleading\t\ttrailing\tq->is have s"..., '\n', 1549) = 0x00f0c87f
[0x4022d1] memchr("\t\t(sub)sequence\t(sub)sequence\tle"..., '\n', 1497) = 0x00f0c8a9
[0x4022d1] memchr("\t\tof p->left\tof p->right\tcontent"..., '\n', 1455) = 0x00f0c8ce
[0x4022d1] memchr("\t\tand q->left\tand q->right\tp->is"..., '\n', 1418) = 0x00f0c8f7
[0x4022d1] memchr("\n   If there's anything else we "..., '\n', 1377) = 0x00f0c8f8
[0x4022d1] memchr("   If there's anything else we r"..., '\n', 1376) = 0x00f0c949
[0x4022d1] memchr("   to zero-length sequences.  If"..., '\n', 1295) = 0x00f0c99c
[0x4022d1] memchr("   we just return a zero-length "..., '\n', 1212) = 0x00f0c9c6
[0x4022d1] memchr("\n   Break ties in favor of infre"..., '\n', 1170) = 0x00f0c9c7
[0x4022d1] memchr("   Break ties in favor of infreq"..., '\n', 1169) = 0x00f0ca15
[0x4022d1] memchr("   'aaa')?\n\n   And. . .is it her"..., '\n', 1091) = 0x00f0ca20
[0x4022d1] memchr("\n   And. . .is it here or somepl"..., '\n', 1080) = 0x00f0ca21
[0x4022d1] memchr("   And. . .is it here or somepla"..., '\n', 1079) = 0x00f0ca71
[0x4022d1] memchr("\tegrep 'psi|epsilon'\t->\tegrep 'p"..., '\n', 999) = 0x00f0ca95
[0x4022d1] memchr("\tegrep 'pepsi|epsilon'\t->\tegrep "..., '\n', 963) = 0x00f0cabc
[0x4022d1] memchr("\t\t\t\t\t(Yes, we now find "epsi" as"..., '\n', 924) = 0x00f0cae7
[0x4022d1] memchr("\t\t\t\t\tthat must occur", but we mi"..., '\n', 881) = 0x00f0cb10
[0x4022d1] memchr("\t\t\t\t\tsimplify the *entire* r.e. "..., '\n', 840) = 0x00f0cb3e
[0x4022d1] memchr("\tgrep '[c]'\t\t->\tgrep 'c'\n\tgrep '"..., '\n', 794) = 0x00f0cb57
[0x4022d1] memchr("\tgrep '(ab|a)b'\t\t->\tgrep 'ab'\n\tg"..., '\n', 769) = 0x00f0cb75
[0x4022d1] memchr("\tgrep 'ab*'\t\t->\tgrep 'a'\n\tgrep '"..., '\n', 739) = 0x00f0cb8e
[0x4022d1] memchr("\tgrep 'a*b'\t\t->\tgrep 'b'\n\n   The"..., '\n', 714) = 0x00f0cba7
[0x4022d1] memchr("\n   There are several issues:\n\n "..., '\n', 689) = 0x00f0cba8
[0x4022d1] memchr("   There are several issues:\n\n  "..., '\n', 688) = 0x00f0cbc5
[0x4022d1] memchr("\n   Is optimization easy (enough"..., '\n', 659) = 0x00f0cbc6
[0x4022d1] memchr("   Is optimization easy (enough)"..., '\n', 658) = 0x00f0cbe8
[0x4022d1] memchr("\n   Does optimization actually a"..., '\n', 624) = 0x00f0cbe9
[0x4022d1] memchr("   Does optimization actually ac"..., '\n', 623) = 0x00f0cc1c
[0x4022d1] memchr("   or is the automaton you get f"..., '\n', 572) = 0x00f0cc5c
[0x4022d1] memchr("   the same as the one you get f"..., '\n', 508) = 0x00f0cc95
[0x4022d1] memchr("  \n   Are optimizable r.e.'s lik"..., '\n', 451) = 0x00f0cc98
[0x4022d1] memchr("   Are optimizable r.e.'s likely"..., '\n', 448) = 0x00f0ccdc
[0x4022d1] memchr("   (something like 'ab*' is prob"..., '\n', 380) = 0x00f0cd1d
[0x4022d1] memchr("   'psi|epsilon' is likelier)? *"..., '\n', 315) = 0x00f0cd3f
[0x4022d1] memchr("\nstatic char *\nicatalloc(old, ne"..., '\n', 281) = 0x00f0cd40
[0x4022d1] memchr("static char *\nicatalloc(old, new"..., '\n', 280) = 0x00f0cd4e
[0x4022d1] memchr("icatalloc(old, new)\n     char *o"..., '\n', 266) = 0x00f0cd62
[0x4022d1] memchr("     char *old;\n     char *new;\n"..., '\n', 246) = 0x00f0cd72
[0x4022d1] memchr("     char *new;\n{\n  char *result"..., '\n', 230) = 0x00f0cd82
[0x4022d1] memchr("{\n  char *result;\n  int oldsize,"..., '\n', 214) = 0x00f0cd84
[0x4022d1] memchr("  char *result;\n  int oldsize, n"..., '\n', 212) = 0x00f0cd94
[0x4022d1] memchr("  int oldsize, newsize;\n\n  newsi"..., '\n', 196) = 0x00f0cdac
[0x4022d1] memchr("\n  newsize = (new == NULL) ? 0 :"..., '\n', 172) = 0x00f0cdad
[0x4022d1] memchr("  newsize = (new == NULL) ? 0 : "..., '\n', 171) = 0x00f0cdda
[0x4022d1] memchr("  if (old == NULL)\n    oldsize ="..., '\n', 126) = 0x00f0cded
[0x4022d1] memchr("    oldsize = 0;\n  else if (news"..., '\n', 107) = 0x00f0cdfe
[0x4022d1] memchr("  else if (newsize == 0)\n    ret"..., '\n', 90) = 0x00f0ce17
[0x4022d1] memchr("    return old;\n  else\toldsize ="..., '\n', 65) = 0x00f0ce27
[0x4022d1] memchr("  else\toldsize = strlen(old);\n  "..., '\n', 49) = 0x00f0ce45
[0x4022d1] memchr("  if (old == NULL)\n    result = "..., '\n', 19) = 0x00f0ce58
[0x4022d1] memchr("    result = (char *) malloc(new"..., '\n', 0) = NULL
[0x4023cc] fwrite("8701:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    result = (char *) malloc(new"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  else\n    result = (char *) rea"..., '1', 4461) = 0x00f0cecb
[0x40cdf3] memchr("1);\n  if (result != NULL && new "..., '\n', 4390) = 0x00f0cece
[0x4022d1] memchr("  else\n    result = (char *) rea"..., '\n', 7) = 0x00f0ce8a
[0x4022d1] memchr("    result = (char *) realloc((v"..., '\n', 0) = NULL
[0x4023cc] fwrite("8703:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    result = (char *) realloc((v"..., 1, 68, 0x7fce6d444260) = 68
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (result != NULL && new != N"..., '1', 4386) = 0x00f0d4a9
[0x40cdf3] memchr("1] = NULL;\n  return cpp;\n}\n\n/* G"..., '\n', 2888) = 0x00f0d4b3
[0x4022d1] memchr("  if (result != NULL && new != N"..., '\n', 1488) = 0x00f0cef3
[0x4022d1] memchr("    (void) strcpy(result + oldsi"..., '\n', 1451) = 0x00f0cf1d
[0x4022d1] memchr("  return result;\n}\n\nstatic char "..., '\n', 1409) = 0x00f0cf2e
[0x4022d1] memchr("}\n\nstatic char *\nicpyalloc(strin"..., '\n', 1392) = 0x00f0cf30
[0x4022d1] memchr("\nstatic char *\nicpyalloc(string)"..., '\n', 1390) = 0x00f0cf31
[0x4022d1] memchr("static char *\nicpyalloc(string)\n"..., '\n', 1389) = 0x00f0cf3f
[0x4022d1] memchr("icpyalloc(string)\n     char *str"..., '\n', 1375) = 0x00f0cf51
[0x4022d1] memchr("     char *string;\n{\n  return ic"..., '\n', 1357) = 0x00f0cf64
[0x4022d1] memchr("{\n  return icatalloc((char *) NU"..., '\n', 1338) = 0x00f0cf66
[0x4022d1] memchr("  return icatalloc((char *) NULL"..., '\n', 1336) = 0x00f0cf91
[0x4022d1] memchr("}\n\nstatic char *\nistrstr(lookin,"..., '\n', 1293) = 0x00f0cf93
[0x4022d1] memchr("\nstatic char *\nistrstr(lookin, l"..., '\n', 1291) = 0x00f0cf94
[0x4022d1] memchr("static char *\nistrstr(lookin, lo"..., '\n', 1290) = 0x00f0cfa2
[0x4022d1] memchr("istrstr(lookin, lookfor)\n     ch"..., '\n', 1276) = 0x00f0cfbb
[0x4022d1] memchr("     char *lookin;\n     char *lo"..., '\n', 1251) = 0x00f0cfce
[0x4022d1] memchr("     char *lookfor;\n{\n  char *cp"..., '\n', 1232) = 0x00f0cfe2
[0x4022d1] memchr("{\n  char *cp;\n  int len;\n\n  len "..., '\n', 1212) = 0x00f0cfe4
[0x4022d1] memchr("  char *cp;\n  int len;\n\n  len = "..., '\n', 1210) = 0x00f0cff0
[0x4022d1] memchr("  int len;\n\n  len = strlen(lookf"..., '\n', 1198) = 0x00f0cffb
[0x4022d1] memchr("\n  len = strlen(lookfor);\n  for "..., '\n', 1187) = 0x00f0cffc
[0x4022d1] memchr("  len = strlen(lookfor);\n  for ("..., '\n', 1186) = 0x00f0d015
[0x4022d1] memchr("  for (cp = lookin; *cp != '\\0';"..., '\n', 1161) = 0x00f0d03c
[0x4022d1] memchr("    if (strncmp(cp, lookfor, len"..., '\n', 1122) = 0x00f0d064
[0x4022d1] memchr("      return cp;\n  return NULL;\n"..., '\n', 1082) = 0x00f0d075
[0x4022d1] memchr("  return NULL;\n}\n\nstatic void\nif"..., '\n', 1065) = 0x00f0d084
[0x4022d1] memchr("}\n\nstatic void\nifree(cp)\n     ch"..., '\n', 1050) = 0x00f0d086
[0x4022d1] memchr("\nstatic void\nifree(cp)\n     char"..., '\n', 1048) = 0x00f0d087
[0x4022d1] memchr("static void\nifree(cp)\n     char "..., '\n', 1047) = 0x00f0d093
[0x4022d1] memchr("ifree(cp)\n     char *cp;\n{\n  if "..., '\n', 1035) = 0x00f0d09d
[0x4022d1] memchr("     char *cp;\n{\n  if (cp != NUL"..., '\n', 1025) = 0x00f0d0ac
[0x4022d1] memchr("{\n  if (cp != NULL)\n    free(cp)"..., '\n', 1010) = 0x00f0d0ae
[0x4022d1] memchr("  if (cp != NULL)\n    free(cp);\n"..., '\n', 1008) = 0x00f0d0c0
[0x4022d1] memchr("    free(cp);\n}\n\nstatic void\nfre"..., '\n', 990) = 0x00f0d0ce
[0x4022d1] memchr("}\n\nstatic void\nfreelist(cpp)\n   "..., '\n', 976) = 0x00f0d0d0
[0x4022d1] memchr("\nstatic void\nfreelist(cpp)\n     "..., '\n', 974) = 0x00f0d0d1
[0x4022d1] memchr("static void\nfreelist(cpp)\n     c"..., '\n', 973) = 0x00f0d0dd
[0x4022d1] memchr("freelist(cpp)\n     char **cpp;\n{"..., '\n', 961) = 0x00f0d0eb
[0x4022d1] memchr("     char **cpp;\n{\n  int i;\n\n  i"..., '\n', 947) = 0x00f0d0fc
[0x4022d1] memchr("{\n  int i;\n\n  if (cpp == NULL)\n "..., '\n', 930) = 0x00f0d0fe
[0x4022d1] memchr("  int i;\n\n  if (cpp == NULL)\n   "..., '\n', 928) = 0x00f0d107
[0x4022d1] memchr("\n  if (cpp == NULL)\n    return;\n"..., '\n', 919) = 0x00f0d108
[0x4022d1] memchr("  if (cpp == NULL)\n    return;\n "..., '\n', 918) = 0x00f0d11b
[0x4022d1] memchr("    return;\n  for (i = 0; cpp[i]"..., '\n', 899) = 0x00f0d127
[0x4022d1] memchr("  for (i = 0; cpp[i] != NULL; ++"..., '\n', 887) = 0x00f0d14a
[0x4022d1] memchr("    {\n      free(cpp[i]);\n      "..., '\n', 852) = 0x00f0d150
[0x4022d1] memchr("      free(cpp[i]);\n      cpp[i]"..., '\n', 846) = 0x00f0d164
[0x4022d1] memchr("      cpp[i] = NULL;\n    }\n}\n\nst"..., '\n', 826) = 0x00f0d179
[0x4022d1] memchr("    }\n}\n\nstatic char **\nenlist(c"..., '\n', 805) = 0x00f0d17f
[0x4022d1] memchr("}\n\nstatic char **\nenlist(cpp, ne"..., '\n', 799) = 0x00f0d181
[0x4022d1] memchr("\nstatic char **\nenlist(cpp, new,"..., '\n', 797) = 0x00f0d182
[0x4022d1] memchr("static char **\nenlist(cpp, new, "..., '\n', 796) = 0x00f0d191
[0x4022d1] memchr("enlist(cpp, new, len)\n     char "..., '\n', 781) = 0x00f0d1a7
[0x4022d1] memchr("     char **cpp;\n     char *new;"..., '\n', 759) = 0x00f0d1b8
[0x4022d1] memchr("     char *new;\n     int len;\n{\n"..., '\n', 742) = 0x00f0d1c8
[0x4022d1] memchr("     int len;\n{\n  int i, j;\n\n  i"..., '\n', 726) = 0x00f0d1d6
[0x4022d1] memchr("{\n  int i, j;\n\n  if (cpp == NULL"..., '\n', 712) = 0x00f0d1d8
[0x4022d1] memchr("  int i, j;\n\n  if (cpp == NULL)\n"..., '\n', 710) = 0x00f0d1e4
[0x4022d1] memchr("\n  if (cpp == NULL)\n    return N"..., '\n', 698) = 0x00f0d1e5
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 697) = 0x00f0d1f8
[0x4022d1] memchr("    return NULL;\n  if ((new = ic"..., '\n', 678) = 0x00f0d209
[0x4022d1] memchr("  if ((new = icpyalloc(new)) == "..., '\n', 661) = 0x00f0d22f
[0x4022d1] memchr("    {\n      freelist(cpp);\n     "..., '\n', 623) = 0x00f0d235
[0x4022d1] memchr("      freelist(cpp);\n      retur"..., '\n', 617) = 0x00f0d24a
[0x4022d1] memchr("      return NULL;\n    }\n  new[l"..., '\n', 596) = 0x00f0d25d
[0x4022d1] memchr("    }\n  new[len] = '\\0';\n  /* Is"..., '\n', 577) = 0x00f0d263
[0x4022d1] memchr("  new[len] = '\\0';\n  /* Is there"..., '\n', 571) = 0x00f0d276
[0x4022d1] memchr("  /* Is there already something "..., '\n', 552) = 0x00f0d2bd
[0x4022d1] memchr("  for (i = 0; cpp[i] != NULL; ++"..., '\n', 481) = 0x00f0d2e0
[0x4022d1] memchr("    if (istrstr(cpp[i], new) != "..., '\n', 446) = 0x00f0d306
[0x4022d1] memchr("      {\n\tfree(new);\n\treturn cpp;"..., '\n', 408) = 0x00f0d30e
[0x4022d1] memchr("\tfree(new);\n\treturn cpp;\n      }"..., '\n', 400) = 0x00f0d31a
[0x4022d1] memchr("\treturn cpp;\n      }\n  /* Elimin"..., '\n', 388) = 0x00f0d327
[0x4022d1] memchr("      }\n  /* Eliminate any obsol"..., '\n', 375) = 0x00f0d32f
[0x4022d1] memchr("  /* Eliminate any obsoleted str"..., '\n', 367) = 0x00f0d358
[0x4022d1] memchr("  j = 0;\n  while (cpp[j] != NULL"..., '\n', 326) = 0x00f0d361
[0x4022d1] memchr("  while (cpp[j] != NULL)\n    if "..., '\n', 317) = 0x00f0d37a
[0x4022d1] memchr("    if (istrstr(new, cpp[j]) == "..., '\n', 292) = 0x00f0d3a0
[0x4022d1] memchr("      ++j;\n    else\n      {\n\tfre"..., '\n', 254) = 0x00f0d3ab
[0x4022d1] memchr("    else\n      {\n\tfree(cpp[j]);\n"..., '\n', 243) = 0x00f0d3b4
[0x4022d1] memchr("      {\n\tfree(cpp[j]);\n\tif (--i "..., '\n', 234) = 0x00f0d3bc
[0x4022d1] memchr("\tfree(cpp[j]);\n\tif (--i == j)\n\t "..., '\n', 226) = 0x00f0d3cb
[0x4022d1] memchr("\tif (--i == j)\n\t  break;\n\tcpp[j]"..., '\n', 211) = 0x00f0d3da
[0x4022d1] memchr("\t  break;\n\tcpp[j] = cpp[i];\n\tcpp"..., '\n', 196) = 0x00f0d3e4
[0x4022d1] memchr("\tcpp[j] = cpp[i];\n\tcpp[i] = NULL"..., '\n', 186) = 0x00f0d3f6
[0x4022d1] memchr("\tcpp[i] = NULL;\n      }\n  /* Add"..., '\n', 168) = 0x00f0d406
[0x4022d1] memchr("      }\n  /* Add the new string."..., '\n', 152) = 0x00f0d40e
[0x4022d1] memchr("  /* Add the new string. */\n  cp"..., '\n', 144) = 0x00f0d42a
[0x4022d1] memchr("  cpp = (char **) realloc((char "..., '\n', 116) = 0x00f0d46a
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 52) = 0x00f0d47d
[0x4022d1] memchr("    return NULL;\n  cpp[i] = new;"..., '\n', 33) = 0x00f0d48e
[0x4022d1] memchr("  cpp[i] = new;\n  cpp[i + 1] = N"..., '\n', 16) = 0x00f0d49e
[0x4022d1] memchr("  cpp[i + 1] = NULL;\n  return cp"..., '\n', 0) = NULL
[0x4023cc] fwrite("8795:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  cpp[i + 1] = NULL;\n  return cp"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  return cpp;\n}\n\n/* Given pointe"..., '1', 2877) = 0x00f0d6f8
[0x40cdf3] memchr("1; lcp[i] != '\\0' && lcp[i] == r"..., '\n', 2297) = 0x00f0d723
[0x4022d1] memchr("  return cpp;\n}\n\n/* Given pointe"..., '\n', 568) = 0x00f0d4c1
[0x4022d1] memchr("}\n\n/* Given pointers to two stri"..., '\n', 554) = 0x00f0d4c3
[0x4022d1] memchr("\n/* Given pointers to two string"..., '\n', 552) = 0x00f0d4c4
[0x4022d1] memchr("/* Given pointers to two strings"..., '\n', 551) = 0x00f0d507
[0x4022d1] memchr("   list of their distinct common"..., '\n', 484) = 0x00f0d54d
[0x4022d1] memchr("   seems wild. */\nstatic char **"..., '\n', 414) = 0x00f0d55f
[0x4022d1] memchr("static char **\ncomsubs(left, rig"..., '\n', 396) = 0x00f0d56e
[0x4022d1] memchr("comsubs(left, right)\n     char *"..., '\n', 381) = 0x00f0d583
[0x4022d1] memchr("     char *left;\n     char *righ"..., '\n', 360) = 0x00f0d594
[0x4022d1] memchr("     char *right;\n{\n  char **cpp"..., '\n', 343) = 0x00f0d5a6
[0x4022d1] memchr("{\n  char **cpp;\n  char *lcp;\n  c"..., '\n', 325) = 0x00f0d5a8
[0x4022d1] memchr("  char **cpp;\n  char *lcp;\n  cha"..., '\n', 323) = 0x00f0d5b6
[0x4022d1] memchr("  char *lcp;\n  char *rcp;\n  int "..., '\n', 309) = 0x00f0d5c3
[0x4022d1] memchr("  char *rcp;\n  int i, len;\n\n  if"..., '\n', 296) = 0x00f0d5d0
[0x4022d1] memchr("  int i, len;\n\n  if (left == NUL"..., '\n', 283) = 0x00f0d5de
[0x4022d1] memchr("\n  if (left == NULL || right == "..., '\n', 269) = 0x00f0d5df
[0x4022d1] memchr("  if (left == NULL || right == N"..., '\n', 268) = 0x00f0d604
[0x4022d1] memchr("    return NULL;\n  cpp = (char *"..., '\n', 231) = 0x00f0d615
[0x4022d1] memchr("  cpp = (char **) malloc(sizeof "..., '\n', 214) = 0x00f0d63c
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 175) = 0x00f0d64f
[0x4022d1] memchr("    return NULL;\n  cpp[0] = NULL"..., '\n', 156) = 0x00f0d660
[0x4022d1] memchr("  cpp[0] = NULL;\n  for (lcp = le"..., '\n', 139) = 0x00f0d671
[0x4022d1] memchr("  for (lcp = left; *lcp != '\\0';"..., '\n', 122) = 0x00f0d699
[0x4022d1] memchr("    {\n      len = 0;\n      rcp ="..., '\n', 82) = 0x00f0d69f
[0x4022d1] memchr("      len = 0;\n      rcp = index"..., '\n', 76) = 0x00f0d6ae
[0x4022d1] memchr("      rcp = index(right, *lcp);\n"..., '\n', 61) = 0x00f0d6ce
[0x4022d1] memchr("      while (rcp != NULL)\n\t{\n\t  "..., '\n', 29) = 0x00f0d6e8
[0x4022d1] memchr("\t{\n\t  for (i = 1; lcp[i] != '\\0'"..., '\n', 3) = 0x00f0d6eb
[0x4022d1] memchr("\t  for (i = 1; lcp[i] != '\\0' &&"..., '\n', 0) = NULL
[0x4023cc] fwrite("8824:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  for (i = 1; lcp[i] != '\\0' &&"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    ;\n\t  if (i > len)\n\t    len "..., '1', 2253) = 0x00f0d75e
[0x40cdf3] memchr("1, *lcp);\n\t}\n      if (len == 0)"..., '\n', 2195) = 0x00f0d767
[0x4022d1] memchr("\t    ;\n\t  if (i > len)\n\t    len "..., '\n', 37) = 0x00f0d72a
[0x4022d1] memchr("\t  if (i > len)\n\t    len = i;\n\t "..., '\n', 30) = 0x00f0d73a
[0x4022d1] memchr("\t    len = i;\n\t  rcp = index(rcp"..., '\n', 14) = 0x00f0d748
[0x4022d1] memchr("\t  rcp = index(rcp + 1, *lcp);\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("8828:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  rcp = index(rcp + 1, *lcp);\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t}\n      if (len == 0)\n\tcontinue"..., '1', 2185) = 0x00f0dd58
[0x40cdf3] memchr("1) * sizeof *musts);\n  if (musts"..., '\n', 665) = 0x00f0dd6c
[0x4022d1] memchr("\t}\n      if (len == 0)\n\tcontinue"..., '\n', 1479) = 0x00f0d76a
[0x4022d1] memchr("      if (len == 0)\n\tcontinue;\n "..., '\n', 1476) = 0x00f0d77e
[0x4022d1] memchr("\tcontinue;\n      if ((cpp = enli"..., '\n', 1456) = 0x00f0d789
[0x4022d1] memchr("      if ((cpp = enlist(cpp, lcp"..., '\n', 1445) = 0x00f0d7ba
[0x4022d1] memchr("\tbreak;\n    }\n  return cpp;\n}\n\ns"..., '\n', 1396) = 0x00f0d7c2
[0x4022d1] memchr("    }\n  return cpp;\n}\n\nstatic ch"..., '\n', 1388) = 0x00f0d7c8
[0x4022d1] memchr("  return cpp;\n}\n\nstatic char **\n"..., '\n', 1382) = 0x00f0d7d6
[0x4022d1] memchr("}\n\nstatic char **\naddlists(old, "..., '\n', 1368) = 0x00f0d7d8
[0x4022d1] memchr("\nstatic char **\naddlists(old, ne"..., '\n', 1366) = 0x00f0d7d9
[0x4022d1] memchr("static char **\naddlists(old, new"..., '\n', 1365) = 0x00f0d7e8
[0x4022d1] memchr("addlists(old, new)\nchar **old;\nc"..., '\n', 1350) = 0x00f0d7fb
[0x4022d1] memchr("char **old;\nchar **new;\n{\n  int "..., '\n', 1331) = 0x00f0d807
[0x4022d1] memchr("char **new;\n{\n  int i;\n\n  if (ol"..., '\n', 1319) = 0x00f0d813
[0x4022d1] memchr("{\n  int i;\n\n  if (old == NULL ||"..., '\n', 1307) = 0x00f0d815
[0x4022d1] memchr("  int i;\n\n  if (old == NULL || n"..., '\n', 1305) = 0x00f0d81e
[0x4022d1] memchr("\n  if (old == NULL || new == NUL"..., '\n', 1296) = 0x00f0d81f
[0x4022d1] memchr("  if (old == NULL || new == NULL"..., '\n', 1295) = 0x00f0d841
[0x4022d1] memchr("    return NULL;\n  for (i = 0; n"..., '\n', 1261) = 0x00f0d852
[0x4022d1] memchr("  for (i = 0; new[i] != NULL; ++"..., '\n', 1244) = 0x00f0d875
[0x4022d1] memchr("    {\n      old = enlist(old, ne"..., '\n', 1209) = 0x00f0d87b
[0x4022d1] memchr("      old = enlist(old, new[i], "..., '\n', 1203) = 0x00f0d8ac
[0x4022d1] memchr("      if (old == NULL)\n\tbreak;\n "..., '\n', 1154) = 0x00f0d8c3
[0x4022d1] memchr("\tbreak;\n    }\n  return old;\n}\n\n/"..., '\n', 1131) = 0x00f0d8cb
[0x4022d1] memchr("    }\n  return old;\n}\n\n/* Given "..., '\n', 1123) = 0x00f0d8d1
[0x4022d1] memchr("  return old;\n}\n\n/* Given two li"..., '\n', 1117) = 0x00f0d8df
[0x4022d1] memchr("}\n\n/* Given two lists of substri"..., '\n', 1103) = 0x00f0d8e1
[0x4022d1] memchr("\n/* Given two lists of substring"..., '\n', 1101) = 0x00f0d8e2
[0x4022d1] memchr("/* Given two lists of substrings"..., '\n', 1100) = 0x00f0d928
[0x4022d1] memchr("   common to both. */\nstatic cha"..., '\n', 1030) = 0x00f0d93e
[0x4022d1] memchr("static char **\ninboth(left, righ"..., '\n', 1008) = 0x00f0d94d
[0x4022d1] memchr("inboth(left, right)\n     char **"..., '\n', 993) = 0x00f0d961
[0x4022d1] memchr("     char **left;\n     char **ri"..., '\n', 973) = 0x00f0d973
[0x4022d1] memchr("     char **right;\n{\n  char **bo"..., '\n', 955) = 0x00f0d986
[0x4022d1] memchr("{\n  char **both;\n  char **temp;\n"..., '\n', 936) = 0x00f0d988
[0x4022d1] memchr("  char **both;\n  char **temp;\n  "..., '\n', 934) = 0x00f0d997
[0x4022d1] memchr("  char **temp;\n  int lnum, rnum;"..., '\n', 919) = 0x00f0d9a6
[0x4022d1] memchr("  int lnum, rnum;\n\n  if (left =="..., '\n', 904) = 0x00f0d9b8
[0x4022d1] memchr("\n  if (left == NULL || right == "..., '\n', 886) = 0x00f0d9b9
[0x4022d1] memchr("  if (left == NULL || right == N"..., '\n', 885) = 0x00f0d9de
[0x4022d1] memchr("    return NULL;\n  both = (char "..., '\n', 848) = 0x00f0d9ef
[0x4022d1] memchr("  both = (char **) malloc(sizeof"..., '\n', 831) = 0x00f0da18
[0x4022d1] memchr("  if (both == NULL)\n    return N"..., '\n', 790) = 0x00f0da2c
[0x4022d1] memchr("    return NULL;\n  both[0] = NUL"..., '\n', 770) = 0x00f0da3d
[0x4022d1] memchr("  both[0] = NULL;\n  for (lnum = "..., '\n', 753) = 0x00f0da4f
[0x4022d1] memchr("  for (lnum = 0; left[lnum] != N"..., '\n', 735) = 0x00f0da7c
[0x4022d1] memchr("    {\n      for (rnum = 0; right"..., '\n', 690) = 0x00f0da82
[0x4022d1] memchr("      for (rnum = 0; right[rnum]"..., '\n', 684) = 0x00f0dab4
[0x4022d1] memchr("\t{\n\t  temp = comsubs(left[lnum],"..., '\n', 634) = 0x00f0dab7
[0x4022d1] memchr("\t  temp = comsubs(left[lnum], ri"..., '\n', 631) = 0x00f0dae3
[0x4022d1] memchr("\t  if (temp == NULL)\n\t    {\n\t   "..., '\n', 587) = 0x00f0daf8
[0x4022d1] memchr("\t    {\n\t      freelist(both);\n\t "..., '\n', 566) = 0x00f0daff
[0x4022d1] memchr("\t      freelist(both);\n\t      re"..., '\n', 559) = 0x00f0db16
[0x4022d1] memchr("\t      return NULL;\n\t    }\n\t  bo"..., '\n', 536) = 0x00f0db2a
[0x4022d1] memchr("\t    }\n\t  both = addlists(both, "..., '\n', 516) = 0x00f0db31
[0x4022d1] memchr("\t  both = addlists(both, temp);\n"..., '\n', 509) = 0x00f0db51
[0x4022d1] memchr("\t  freelist(temp);\n\t  if (both ="..., '\n', 477) = 0x00f0db64
[0x4022d1] memchr("\t  if (both == NULL)\n\t    return"..., '\n', 458) = 0x00f0db79
[0x4022d1] memchr("\t    return NULL;\n\t}\n    }\n  ret"..., '\n', 437) = 0x00f0db8b
[0x4022d1] memchr("\t}\n    }\n  return both;\n}\n\ntyped"..., '\n', 419) = 0x00f0db8e
[0x4022d1] memchr("    }\n  return both;\n}\n\ntypedef "..., '\n', 416) = 0x00f0db94
[0x4022d1] memchr("  return both;\n}\n\ntypedef struct"..., '\n', 410) = 0x00f0dba3
[0x4022d1] memchr("}\n\ntypedef struct\n{\n  char **in;"..., '\n', 395) = 0x00f0dba5
[0x4022d1] memchr("\ntypedef struct\n{\n  char **in;\n "..., '\n', 393) = 0x00f0dba6
[0x4022d1] memchr("typedef struct\n{\n  char **in;\n  "..., '\n', 392) = 0x00f0dbb5
[0x4022d1] memchr("{\n  char **in;\n  char *left;\n  c"..., '\n', 377) = 0x00f0dbb7
[0x4022d1] memchr("  char **in;\n  char *left;\n  cha"..., '\n', 375) = 0x00f0dbc4
[0x4022d1] memchr("  char *left;\n  char *right;\n  c"..., '\n', 362) = 0x00f0dbd2
[0x4022d1] memchr("  char *right;\n  char *is;\n} mus"..., '\n', 348) = 0x00f0dbe1
[0x4022d1] memchr("  char *is;\n} must;\n\nstatic void"..., '\n', 333) = 0x00f0dbed
[0x4022d1] memchr("} must;\n\nstatic void\nresetmust(m"..., '\n', 321) = 0x00f0dbf5
[0x4022d1] memchr("\nstatic void\nresetmust(mp)\nmust "..., '\n', 313) = 0x00f0dbf6
[0x4022d1] memchr("static void\nresetmust(mp)\nmust *"..., '\n', 312) = 0x00f0dc02
[0x4022d1] memchr("resetmust(mp)\nmust *mp;\n{\n  mp->"..., '\n', 300) = 0x00f0dc10
[0x4022d1] memchr("must *mp;\n{\n  mp->left[0] = mp->"..., '\n', 286) = 0x00f0dc1a
[0x4022d1] memchr("{\n  mp->left[0] = mp->right[0] ="..., '\n', 276) = 0x00f0dc1c
[0x4022d1] memchr("  mp->left[0] = mp->right[0] = m"..., '\n', 274) = 0x00f0dc4d
[0x4022d1] memchr("  freelist(mp->in);\n}\n\nstatic vo"..., '\n', 225) = 0x00f0dc61
[0x4022d1] memchr("}\n\nstatic void\ndfamust(dfa)\nstru"..., '\n', 205) = 0x00f0dc63
[0x4022d1] memchr("\nstatic void\ndfamust(dfa)\nstruct"..., '\n', 203) = 0x00f0dc64
[0x4022d1] memchr("static void\ndfamust(dfa)\nstruct "..., '\n', 202) = 0x00f0dc70
[0x4022d1] memchr("dfamust(dfa)\nstruct dfa *dfa;\n{\n"..., '\n', 190) = 0x00f0dc7d
[0x4022d1] memchr("struct dfa *dfa;\n{\n  must *musts"..., '\n', 177) = 0x00f0dc8e
[0x4022d1] memchr("{\n  must *musts;\n  must *mp;\n  c"..., '\n', 160) = 0x00f0dc90
[0x4022d1] memchr("  must *musts;\n  must *mp;\n  cha"..., '\n', 158) = 0x00f0dc9f
[0x4022d1] memchr("  must *mp;\n  char *result;\n  in"..., '\n', 143) = 0x00f0dcab
[0x4022d1] memchr("  char *result;\n  int ri;\n  int "..., '\n', 131) = 0x00f0dcbb
[0x4022d1] memchr("  int ri;\n  int i;\n  int exact;\n"..., '\n', 115) = 0x00f0dcc5
[0x4022d1] memchr("  int i;\n  int exact;\n  token t;"..., '\n', 105) = 0x00f0dcce
[0x4022d1] memchr("  int exact;\n  token t;\n  static"..., '\n', 96) = 0x00f0dcdb
[0x4022d1] memchr("  token t;\n  static must must0;\n"..., '\n', 83) = 0x00f0dce6
[0x4022d1] memchr("  static must must0;\n  struct df"..., '\n', 72) = 0x00f0dcfb
[0x4022d1] memchr("  struct dfamust *dm;\n\n  result "..., '\n', 51) = 0x00f0dd11
[0x4022d1] memchr("\n  result = "";\n  exact = 0;\n  m"..., '\n', 29) = 0x00f0dd12
[0x4022d1] memchr("  result = "";\n  exact = 0;\n  mu"..., '\n', 28) = 0x00f0dd21
[0x4022d1] memchr("  exact = 0;\n  musts = (must *) "..., '\n', 13) = 0x00f0dd2e
[0x4022d1] memchr("  musts = (must *) malloc((dfa->"..., '\n', 0) = NULL
[0x4023cc] fwrite("8924:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  musts = (must *) malloc((dfa->"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (musts == NULL)\n    return;"..., '1', 644) = NULL
[0x4022d1] memchr("  if (musts == NULL)\n    return;"..., '\n', 644) = 0x00f0dd81
[0x4022d1] memchr("    return;\n  mp = musts;\n  for "..., '\n', 623) = 0x00f0dd8d
[0x4022d1] memchr("  mp = musts;\n  for (i = 0; i <="..., '\n', 611) = 0x00f0dd9b
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 597) = 0x00f0ddc0
[0x4022d1] memchr("    mp[i] = must0;\n  for (i = 0;"..., '\n', 560) = 0x00f0ddd3
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 541) = 0x00f0ddf8
[0x4022d1] memchr("    {\n      mp[i].in = (char **)"..., '\n', 504) = 0x00f0ddfe
[0x4022d1] memchr("      mp[i].in = (char **) mallo"..., '\n', 498) = 0x00f0de33
[0x4022d1] memchr("      mp[i].left = malloc(2);\n  "..., '\n', 445) = 0x00f0de51
[0x4022d1] memchr("      mp[i].right = malloc(2);\n "..., '\n', 415) = 0x00f0de70
[0x4022d1] memchr("      mp[i].is = malloc(2);\n    "..., '\n', 384) = 0x00f0de8c
[0x4022d1] memchr("      if (mp[i].in == NULL || mp"..., '\n', 356) = 0x00f0dec0
[0x4022d1] memchr("\t  mp[i].right == NULL || mp[i]."..., '\n', 304) = 0x00f0deec
[0x4022d1] memchr("\tgoto done;\n      mp[i].left[0] "..., '\n', 260) = 0x00f0def8
[0x4022d1] memchr("      mp[i].left[0] = mp[i].righ"..., '\n', 248) = 0x00f0df33
[0x4022d1] memchr("      mp[i].in[0] = NULL;\n    }\n"..., '\n', 189) = 0x00f0df4d
[0x4022d1] memchr("    }\n#ifdef DEBUG\n  fprintf(std"..., '\n', 163) = 0x00f0df53
[0x4022d1] memchr("#ifdef DEBUG\n  fprintf(stderr, ""..., '\n', 157) = 0x00f0df60
[0x4022d1] memchr("  fprintf(stderr, "dfamust:\\n");"..., '\n', 144) = 0x00f0df81
[0x4022d1] memchr("  for (i = 0; i < dfa->tindex; +"..., '\n', 111) = 0x00f0dfa5
[0x4022d1] memchr("    {\n      fprintf(stderr, " %d"..., '\n', 75) = 0x00f0dfab
[0x4022d1] memchr("      fprintf(stderr, " %d:", i)"..., '\n', 69) = 0x00f0dfcd
[0x4022d1] memchr("      prtok(dfa->tokens[i]);\n   "..., '\n', 35) = 0x00f0dfea
[0x4022d1] memchr("    }\n  putc('\\n', st", '\n', 6) = 0x00f0dff0
[0x4022d1] memchr("  putc('\\n', st", '\n', 0)   = NULL
[0x4020b3] memmove(0xf05ff1, 0xf0dff1, 15, 0xf0dff1, 0x7fce6d444260) = 0xf05ff1
[0x402213] read(3, "derr);\n#endif\n  for (ri = 0; ri "..., 32768) = 32768
[0x40bc2b] memchr("  putc('\\n', stderr);\n#endif\n  f"..., '1', 32720) = 0x00f06432
[0x40cdf3] memchr("1] != rmp->right[rn - i - 1])\n\t\t"..., '\n', 31631) = 0x00f0644f
[0x4022d1] memchr("  putc('\\n', stderr);\n#endif\n  f"..., '\n', 1058) = 0x00f06006
[0x4022d1] memchr("#endif\n  for (ri = 0; ri < dfa->"..., '\n', 1036) = 0x00f0600d
[0x4022d1] memchr("  for (ri = 0; ri < dfa->tindex;"..., '\n', 1029) = 0x00f06034
[0x4022d1] memchr("    {\n      switch (t = dfa->tok"..., '\n', 990) = 0x00f0603a
[0x4022d1] memchr("      switch (t = dfa->tokens[ri"..., '\n', 984) = 0x00f0605d
[0x4022d1] memchr("\t{\n\tcase LPAREN:\n\tcase RPAREN:\n\t"..., '\n', 949) = 0x00f06060
[0x4022d1] memchr("\tcase LPAREN:\n\tcase RPAREN:\n\t  g"..., '\n', 946) = 0x00f0606e
[0x4022d1] memchr("\tcase RPAREN:\n\t  goto done;\t\t/* "..., '\n', 932) = 0x00f0607c
[0x4022d1] memchr("\t  goto done;\t\t/* "cannot happen"..., '\n', 918) = 0x00f060a1
[0x4022d1] memchr("\tcase EMPTY:\n\tcase BEGLINE:\n\tcas"..., '\n', 881) = 0x00f060ae
[0x4022d1] memchr("\tcase BEGLINE:\n\tcase ENDLINE:\n\tc"..., '\n', 868) = 0x00f060bd
[0x4022d1] memchr("\tcase ENDLINE:\n\tcase BEGWORD:\n\tc"..., '\n', 853) = 0x00f060cc
[0x4022d1] memchr("\tcase BEGWORD:\n\tcase ENDWORD:\n\tc"..., '\n', 838) = 0x00f060db
[0x4022d1] memchr("\tcase ENDWORD:\n\tcase LIMWORD:\n\tc"..., '\n', 823) = 0x00f060ea
[0x4022d1] memchr("\tcase LIMWORD:\n\tcase NOTLIMWORD:"..., '\n', 808) = 0x00f060f9
[0x4022d1] memchr("\tcase NOTLIMWORD:\n\tcase BACKREF:"..., '\n', 793) = 0x00f0610b
[0x4022d1] memchr("\tcase BACKREF:\n\t  resetmust(mp);"..., '\n', 775) = 0x00f0611a
[0x4022d1] memchr("\t  resetmust(mp);\n\t  break;\n\tcas"..., '\n', 760) = 0x00f0612c
[0x4022d1] memchr("\t  break;\n\tcase STAR:\n\tcase QMAR"..., '\n', 742) = 0x00f06136
[0x4022d1] memchr("\tcase STAR:\n\tcase QMARK:\n\t  if ("..., '\n', 732) = 0x00f06142
[0x4022d1] memchr("\tcase QMARK:\n\t  if (mp <= musts)"..., '\n', 720) = 0x00f0614f
[0x4022d1] memchr("\t  if (mp <= musts)\n\t    goto do"..., '\n', 707) = 0x00f06163
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 687) = 0x00f0618a
[0x4022d1] memchr("\t  --mp;\n\t  resetmust(mp);\n\t  br"..., '\n', 648) = 0x00f06193
[0x4022d1] memchr("\t  resetmust(mp);\n\t  break;\n\tcas"..., '\n', 639) = 0x00f061a5
[0x4022d1] memchr("\t  break;\n\tcase OR:\n\tcase ORTOP:"..., '\n', 621) = 0x00f061af
[0x4022d1] memchr("\tcase OR:\n\tcase ORTOP:\n\t  if (mp"..., '\n', 611) = 0x00f061b9
[0x4022d1] memchr("\tcase ORTOP:\n\t  if (mp < &musts["..., '\n', 601) = 0x00f061c6
[0x4022d1] memchr("\t  if (mp < &musts[2])\n\t    goto"..., '\n', 588) = 0x00f061dd
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 565) = 0x00f06204
[0x4022d1] memchr("\t  {\n\t    char **new;\n\t    must "..., '\n', 526) = 0x00f06209
[0x4022d1] memchr("\t    char **new;\n\t    must *lmp;"..., '\n', 521) = 0x00f0621a
[0x4022d1] memchr("\t    must *lmp;\n\t    must *rmp;\n"..., '\n', 504) = 0x00f0622a
[0x4022d1] memchr("\t    must *rmp;\n\t    int j, ln, "..., '\n', 488) = 0x00f0623a
[0x4022d1] memchr("\t    int j, ln, rn, n;\n\n\t    rmp"..., '\n', 472) = 0x00f06251
[0x4022d1] memchr("\n\t    rmp = --mp;\n\t    lmp = --m"..., '\n', 449) = 0x00f06252
[0x4022d1] memchr("\t    rmp = --mp;\n\t    lmp = --mp"..., '\n', 448) = 0x00f06263
[0x4022d1] memchr("\t    lmp = --mp;\n\t    /* Guarant"..., '\n', 431) = 0x00f06274
[0x4022d1] memchr("\t    /* Guaranteed to be.  Unlik"..., '\n', 414) = 0x00f062a5
[0x4022d1] memchr("\t    if (strcmp(lmp->is, rmp->is"..., '\n', 365) = 0x00f062cd
[0x4022d1] memchr("\t      lmp->is[0] = '\\0';\n\t    /"..., '\n', 325) = 0x00f062e7
[0x4022d1] memchr("\t    /* Left side--easy */\n\t    "..., '\n', 299) = 0x00f06302
[0x4022d1] memchr("\t    i = 0;\n\t    while (lmp->lef"..., '\n', 272) = 0x00f0630e
[0x4022d1] memchr("\t    while (lmp->left[i] != '\\0'"..., '\n', 260) = 0x00f06350
[0x4022d1] memchr("\t      ++i;\n\t    lmp->left[i] = "..., '\n', 194) = 0x00f0635c
[0x4022d1] memchr("\t    lmp->left[i] = '\\0';\n\t    /"..., '\n', 182) = 0x00f06376
[0x4022d1] memchr("\t    /* Right side */\n\t    ln = "..., '\n', 156) = 0x00f0638c
[0x4022d1] memchr("\t    ln = strlen(lmp->right);\n\t "..., '\n', 134) = 0x00f063aa
[0x4022d1] memchr("\t    rn = strlen(rmp->right);\n\t "..., '\n', 104) = 0x00f063c8
[0x4022d1] memchr("\t    n = ln;\n\t    if (n > rn)\n\t "..., '\n', 74) = 0x00f063d5
[0x4022d1] memchr("\t    if (n > rn)\n\t      n = rn;\n"..., '\n', 61) = 0x00f063e6
[0x4022d1] memchr("\t      n = rn;\n\t    for (i = 0; "..., '\n', 44) = 0x00f063f5
[0x4022d1] memchr("\t    for (i = 0; i < n; ++i)\n\t  "..., '\n', 29) = 0x00f06412
[0x4022d1] memchr("\t      if (lmp->right[ln - i - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("9002:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      if (lmp->right[ln - i - 1"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\tbreak;\n\t    for (j = 0; j < i;"..., '1', 31601) = 0x00f065f5
[0x40cdf3] memchr("1])\n\t    goto done;\t\t/* "cannot "..., '\n', 31180) = 0x00f065f8
[0x4022d1] memchr("\t\tbreak;\n\t    for (j = 0; j < i;"..., '\n', 401) = 0x00f06458
[0x4022d1] memchr("\t    for (j = 0; j < i; ++j)\n\t  "..., '\n', 392) = 0x00f06475
[0x4022d1] memchr("\t      lmp->right[j] = lmp->righ"..., '\n', 363) = 0x00f064a6
[0x4022d1] memchr("\t    lmp->right[j] = '\\0';\n\t    "..., '\n', 314) = 0x00f064c1
[0x4022d1] memchr("\t    new = inboth(lmp->in, rmp->"..., '\n', 287) = 0x00f064e6
[0x4022d1] memchr("\t    if (new == NULL)\n\t      got"..., '\n', 250) = 0x00f064fc
[0x4022d1] memchr("\t      goto done;\n\t    freelist("..., '\n', 228) = 0x00f0650e
[0x4022d1] memchr("\t    freelist(lmp->in);\n\t    fre"..., '\n', 210) = 0x00f06526
[0x4022d1] memchr("\t    free((char *) lmp->in);\n\t  "..., '\n', 186) = 0x00f06543
[0x4022d1] memchr("\t    lmp->in = new;\n\t  }\n\t  brea"..., '\n', 157) = 0x00f06557
[0x4022d1] memchr("\t  }\n\t  break;\n\tcase PLUS:\n\t  if"..., '\n', 137) = 0x00f0655c
[0x4022d1] memchr("\t  break;\n\tcase PLUS:\n\t  if (mp "..., '\n', 132) = 0x00f06566
[0x4022d1] memchr("\tcase PLUS:\n\t  if (mp <= musts)\n"..., '\n', 122) = 0x00f06572
[0x4022d1] memchr("\t  if (mp <= musts)\n\t    goto do"..., '\n', 110) = 0x00f06586
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 90) = 0x00f065ad
[0x4022d1] memchr("\t  --mp;\n\t  mp->is[0] = '\\0';\n\t "..., '\n', 51) = 0x00f065b6
[0x4022d1] memchr("\t  mp->is[0] = '\\0';\n\t  break;\n\t"..., '\n', 42) = 0x00f065cb
[0x4022d1] memchr("\t  break;\n\tcase END:\n\t  if (mp !"..., '\n', 21) = 0x00f065d5
[0x4022d1] memchr("\tcase END:\n\t  if (mp != &musts[1"..., '\n', 11) = 0x00f065e0
[0x4022d1] memchr("\t  if (mp != &musts[1])\n\t    got"..., '\n', 0) = NULL
[0x4023cc] fwrite("9022:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  if (mp != &musts[1])\n\t    got"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    goto done;\t\t/* "cannot happ"..., '1', 31176) = 0x00f066d4
[0x40cdf3] memchr("1;\n\t  goto done;\n\tcase CAT:\n\t  i"..., '\n', 30957) = 0x00f066d6
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 206) = 0x00f0661f
[0x4022d1] memchr("\t  for (i = 0; musts[0].in[i] !="..., '\n', 167) = 0x00f0664b
[0x4022d1] memchr("\t    if (strlen(musts[0].in[i]) "..., '\n', 123) = 0x00f0667d
[0x4022d1] memchr("\t      result = musts[0].in[i];\n"..., '\n', 73) = 0x00f0669d
[0x4022d1] memchr("\t  if (strcmp(result, musts[0].i"..., '\n', 41) = 0x00f066c6
[0x4022d1] memchr("\t    exact = 1;\n\t  goto done;\n\tc"..., '\n', 0) = NULL
[0x4023cc] fwrite("9028:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    exact = 1;\n\t  goto done;\n\tc"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  goto done;\n\tcase CAT:\n\t  if ("..., '1', 30954) = 0x00f06d4b
[0x40cdf3] memchr("1] = mp->left[1] = mp->right[1] "..., '\n', 29302) = 0x00f06d72
[0x4022d1] memchr("\t  goto done;\n\tcase CAT:\n\t  if ("..., '\n', 1638) = 0x00f066e4
[0x4022d1] memchr("\tcase CAT:\n\t  if (mp < &musts[2]"..., '\n', 1624) = 0x00f066ef
[0x4022d1] memchr("\t  if (mp < &musts[2])\n\t    goto"..., '\n', 1613) = 0x00f06706
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 1590) = 0x00f0672d
[0x4022d1] memchr("\t  {\n\t    must *lmp;\n\t    must *"..., '\n', 1551) = 0x00f06732
[0x4022d1] memchr("\t    must *lmp;\n\t    must *rmp;\n"..., '\n', 1546) = 0x00f06742
[0x4022d1] memchr("\t    must *rmp;\n\n\t    rmp = --mp"..., '\n', 1530) = 0x00f06752
[0x4022d1] memchr("\n\t    rmp = --mp;\n\t    lmp = --m"..., '\n', 1514) = 0x00f06753
[0x4022d1] memchr("\t    rmp = --mp;\n\t    lmp = --mp"..., '\n', 1513) = 0x00f06764
[0x4022d1] memchr("\t    lmp = --mp;\n\t    /* In.  Ev"..., '\n', 1496) = 0x00f06775
[0x4022d1] memchr("\t    /* In.  Everything in left,"..., '\n', 1479) = 0x00f067a9
[0x4022d1] memchr("\t       right, plus catenation o"..., '\n', 1427) = 0x00f067cb
[0x4022d1] memchr("\t       left's right and right's"..., '\n', 1393) = 0x00f067f5
[0x4022d1] memchr("\t    lmp->in = addlists(lmp->in,"..., '\n', 1351) = 0x00f06820
[0x4022d1] memchr("\t    if (lmp->in == NULL)\n\t     "..., '\n', 1308) = 0x00f0683a
[0x4022d1] memchr("\t      goto done;\n\t    if (lmp->"..., '\n', 1282) = 0x00f0684c
[0x4022d1] memchr("\t    if (lmp->right[0] != '\\0' &"..., '\n', 1264) = 0x00f0686e
[0x4022d1] memchr("\t\trmp->left[0] != '\\0')\n\t      {"..., '\n', 1230) = 0x00f06886
[0x4022d1] memchr("\t      {\n\t\tchar *tp;\n\n\t\ttp = icp"..., '\n', 1206) = 0x00f0688f
[0x4022d1] memchr("\t\tchar *tp;\n\n\t\ttp = icpyalloc(lm"..., '\n', 1197) = 0x00f0689b
[0x4022d1] memchr("\n\t\ttp = icpyalloc(lmp->right);\n\t"..., '\n', 1185) = 0x00f0689c
[0x4022d1] memchr("\t\ttp = icpyalloc(lmp->right);\n\t\t"..., '\n', 1184) = 0x00f068ba
[0x4022d1] memchr("\t\tif (tp == NULL)\n\t\t  goto done;"..., '\n', 1154) = 0x00f068cc
[0x4022d1] memchr("\t\t  goto done;\n\t\ttp = icatalloc("..., '\n', 1136) = 0x00f068db
[0x4022d1] memchr("\t\ttp = icatalloc(tp, rmp->left);"..., '\n', 1121) = 0x00f068fc
[0x4022d1] memchr("\t\tif (tp == NULL)\n\t\t  goto done;"..., '\n', 1088) = 0x00f0690e
[0x4022d1] memchr("\t\t  goto done;\n\t\tlmp->in = enlis"..., '\n', 1070) = 0x00f0691d
[0x4022d1] memchr("\t\tlmp->in = enlist(lmp->in, tp,\n"..., '\n', 1055) = 0x00f0693d
[0x4022d1] memchr("\t\t\t\t strlen(tp));\n\t\tfree(tp);\n\t\t"..., '\n', 1023) = 0x00f0694f
[0x4022d1] memchr("\t\tfree(tp);\n\t\tif (lmp->in == NUL"..., '\n', 1005) = 0x00f0695b
[0x4022d1] memchr("\t\tif (lmp->in == NULL)\n\t\t  goto "..., '\n', 993) = 0x00f06972
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    /* "..., '\n', 970) = 0x00f06981
[0x4022d1] memchr("\t      }\n\t    /* Left-hand */\n\t "..., '\n', 955) = 0x00f0698a
[0x4022d1] memchr("\t    /* Left-hand */\n\t    if (lm"..., '\n', 946) = 0x00f0699f
[0x4022d1] memchr("\t    if (lmp->is[0] != '\\0')\n\t  "..., '\n', 925) = 0x00f069bc
[0x4022d1] memchr("\t      {\n\t\tlmp->left = icatalloc"..., '\n', 896) = 0x00f069c5
[0x4022d1] memchr("\t\tlmp->left = icatalloc(lmp->lef"..., '\n', 887) = 0x00f069e8
[0x4022d1] memchr("\t\t\t\t      rmp->left);\n\t\tif (lmp-"..., '\n', 852) = 0x00f069fe
[0x4022d1] memchr("\t\tif (lmp->left == NULL)\n\t\t  got"..., '\n', 830) = 0x00f06a17
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    /* "..., '\n', 805) = 0x00f06a26
[0x4022d1] memchr("\t      }\n\t    /* Right-hand */\n\t"..., '\n', 790) = 0x00f06a2f
[0x4022d1] memchr("\t    /* Right-hand */\n\t    if (r"..., '\n', 781) = 0x00f06a45
[0x4022d1] memchr("\t    if (rmp->is[0] == '\\0')\n\t  "..., '\n', 759) = 0x00f06a62
[0x4022d1] memchr("\t      lmp->right[0] = '\\0';\n\t  "..., '\n', 730) = 0x00f06a7f
[0x4022d1] memchr("\t    lmp->right = icatalloc(lmp-"..., '\n', 701) = 0x00f06ab4
[0x4022d1] memchr("\t    if (lmp->right == NULL)\n\t  "..., '\n', 648) = 0x00f06ad1
[0x4022d1] memchr("\t      goto done;\n\t    /* Guaran"..., '\n', 619) = 0x00f06ae3
[0x4022d1] memchr("\t    /* Guaranteed to be */\n\t   "..., '\n', 601) = 0x00f06aff
[0x4022d1] memchr("\t    if (lmp->is[0] != '\\0' && r"..., '\n', 573) = 0x00f06b32
[0x4022d1] memchr("\t      {\n\t\tlmp->is = icatalloc(l"..., '\n', 522) = 0x00f06b3b
[0x4022d1] memchr("\t\tlmp->is = icatalloc(lmp->is, r"..., '\n', 513) = 0x00f06b64
[0x4022d1] memchr("\t\tif (lmp->is == NULL)\n\t\t  goto "..., '\n', 472) = 0x00f06b7b
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    els"..., '\n', 449) = 0x00f06b8a
[0x4022d1] memchr("\t      }\n\t    else\n\t      lmp->i"..., '\n', 434) = 0x00f06b93
[0x4022d1] memchr("\t    else\n\t      lmp->is[0] = '\\"..., '\n', 425) = 0x00f06b9d
[0x4022d1] memchr("\t      lmp->is[0] = '\\0';\n\t  }\n\t"..., '\n', 415) = 0x00f06bb7
[0x4022d1] memchr("\t  }\n\t  break;\n\tdefault:\n\t  if ("..., '\n', 389) = 0x00f06bbc
[0x4022d1] memchr("\t  break;\n\tdefault:\n\t  if (t < E"..., '\n', 384) = 0x00f06bc6
[0x4022d1] memchr("\tdefault:\n\t  if (t < END)\n\t    {"..., '\n', 374) = 0x00f06bd0
[0x4022d1] memchr("\t  if (t < END)\n\t    {\n\t      /*"..., '\n', 364) = 0x00f06be0
[0x4022d1] memchr("\t    {\n\t      /* "cannot happen""..., '\n', 348) = 0x00f06be7
[0x4022d1] memchr("\t      /* "cannot happen" */\n\t  "..., '\n', 341) = 0x00f06c04
[0x4022d1] memchr("\t      goto done;\n\t    }\n\t  else"..., '\n', 312) = 0x00f06c16
[0x4022d1] memchr("\t    }\n\t  else if (t == '\\0')\n\t "..., '\n', 294) = 0x00f06c1d
[0x4022d1] memchr("\t  else if (t == '\\0')\n\t    {\n\t "..., '\n', 287) = 0x00f06c34
[0x4022d1] memchr("\t    {\n\t      /* not on *my* shi"..., '\n', 264) = 0x00f06c3b
[0x4022d1] memchr("\t      /* not on *my* shift */\n\t"..., '\n', 257) = 0x00f06c5a
[0x4022d1] memchr("\t      goto done;\n\t    }\n\t  else"..., '\n', 226) = 0x00f06c6c
[0x4022d1] memchr("\t    }\n\t  else if (t >= CSET)\n\t "..., '\n', 208) = 0x00f06c73
[0x4022d1] memchr("\t  else if (t >= CSET)\n\t    {\n\t "..., '\n', 201) = 0x00f06c8a
[0x4022d1] memchr("\t    {\n\t      /* easy enough */\n"..., '\n', 178) = 0x00f06c91
[0x4022d1] memchr("\t      /* easy enough */\n\t      "..., '\n', 171) = 0x00f06caa
[0x4022d1] memchr("\t      resetmust(mp);\n\t    }\n\t  "..., '\n', 146) = 0x00f06cc0
[0x4022d1] memchr("\t    }\n\t  else\n\t    {\n\t      /* "..., '\n', 124) = 0x00f06cc7
[0x4022d1] memchr("\t  else\n\t    {\n\t      /* plain c"..., '\n', 117) = 0x00f06ccf
[0x4022d1] memchr("\t    {\n\t      /* plain character"..., '\n', 109) = 0x00f06cd6
[0x4022d1] memchr("\t      /* plain character */\n\t  "..., '\n', 102) = 0x00f06cf3
[0x4022d1] memchr("\t      resetmust(mp);\n\t      mp-"..., '\n', 73) = 0x00f06d09
[0x4022d1] memchr("\t      mp->is[0] = mp->left[0] ="..., '\n', 51) = 0x00f06d3c
[0x4022d1] memchr("\t      mp->is[1] = mp->left[1] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("9108:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      mp->is[1] = mp->left[1] ="..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      mp->in = enlist(mp->in, m"..., '1', 29262) = 0x00f06d9a
[0x40cdf3] memchr("1);\n\t      if (mp->in == NULL)\n\t"..., '\n', 29223) = 0x00f06d9d
[0x4022d1] memchr("\t      mp->in = enlist(mp->in, m"..., '\n', 0) = NULL
[0x4023cc] fwrite("9109:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      mp->in = enlist(mp->in, m"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      if (mp->in == NULL)\n\t\tgot"..., '1', 29219) = 0x00f06ff6
[0x40cdf3] memchr("1);\n      strcpy(dm->must, resul"..., '\n', 28619) = 0x00f06ff9
[0x4022d1] memchr("\t      if (mp->in == NULL)\n\t\tgot"..., '\n', 559) = 0x00f06db8
[0x4022d1] memchr("\t\tgoto done;\n\t    }\n\t  break;\n\t}"..., '\n', 532) = 0x00f06dc5
[0x4022d1] memchr("\t    }\n\t  break;\n\t}\n#ifdef DEBUG"..., '\n', 519) = 0x00f06dcc
[0x4022d1] memchr("\t  break;\n\t}\n#ifdef DEBUG\n      "..., '\n', 512) = 0x00f06dd6
[0x4022d1] memchr("\t}\n#ifdef DEBUG\n      fprintf(st"..., '\n', 502) = 0x00f06dd9
[0x4022d1] memchr("#ifdef DEBUG\n      fprintf(stder"..., '\n', 499) = 0x00f06de6
[0x4022d1] memchr("      fprintf(stderr, " node: %d"..., '\n', 486) = 0x00f06e0f
[0x4022d1] memchr("      prtok(dfa->tokens[ri]);\n  "..., '\n', 445) = 0x00f06e2d
[0x4022d1] memchr("      fprintf(stderr, "\\n  in:")"..., '\n', 415) = 0x00f06e4f
[0x4022d1] memchr("      for (i = 0; mp->in[i]; ++i"..., '\n', 381) = 0x00f06e71
[0x4022d1] memchr("\tfprintf(stderr, " \\"%s\\"", mp->"..., '\n', 347) = 0x00f06e99
[0x4022d1] memchr("      fprintf(stderr, "\\n  is: \\"..., '\n', 307) = 0x00f06ecc
[0x4022d1] memchr("      fprintf(stderr, "  left: \\"..., '\n', 256) = 0x00f06f01
[0x4022d1] memchr("      fprintf(stderr, "  right: "..., '\n', 203) = 0x00f06f38
[0x4022d1] memchr("#endif\n      ++mp;\n    }\n done:\n"..., '\n', 148) = 0x00f06f3f
[0x4022d1] memchr("      ++mp;\n    }\n done:\n  if (s"..., '\n', 141) = 0x00f06f4b
[0x4022d1] memchr("    }\n done:\n  if (strlen(result"..., '\n', 129) = 0x00f06f51
[0x4022d1] memchr(" done:\n  if (strlen(result))\n   "..., '\n', 123) = 0x00f06f58
[0x4022d1] memchr("  if (strlen(result))\n    {\n    "..., '\n', 116) = 0x00f06f6e
[0x4022d1] memchr("    {\n      dm = (struct dfamust"..., '\n', 94) = 0x00f06f74
[0x4022d1] memchr("      dm = (struct dfamust *) ma"..., '\n', 88) = 0x00f06fb3
[0x4022d1] memchr("      dm->exact = exact;\n      d"..., '\n', 25) = 0x00f06fcc
[0x4022d1] memchr("      dm->must = malloc(strlen(r"..., '\n', 0) = NULL
[0x4023cc] fwrite("9132:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      dm->must = malloc(strlen(r"..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      strcpy(dm->must, result);\n"..., '1', 28615) = 0x00f0716d
[0x40cdf3] memchr("1989 Free Software Foundation\n\t\t"..., '\n', 28244) = 0x00f0718a
[0x4022d1] memchr("      strcpy(dm->must, result);\n"..., '\n', 358) = 0x00f07019
[0x4022d1] memchr("      dm->next = dfa->musts;\n   "..., '\n', 326) = 0x00f07036
[0x4022d1] memchr("      dfa->musts = dm;\n    }\n  m"..., '\n', 297) = 0x00f0704d
[0x4022d1] memchr("    }\n  mp = musts;\n  for (i = 0"..., '\n', 274) = 0x00f07053
[0x4022d1] memchr("  mp = musts;\n  for (i = 0; i <="..., '\n', 268) = 0x00f07061
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 254) = 0x00f07086
[0x4022d1] memchr("    {\n      freelist(mp[i].in);\n"..., '\n', 217) = 0x00f0708c
[0x4022d1] memchr("      freelist(mp[i].in);\n      "..., '\n', 211) = 0x00f070a6
[0x4022d1] memchr("      ifree((char *) mp[i].in);\n"..., '\n', 185) = 0x00f070c6
[0x4022d1] memchr("      ifree(mp[i].left);\n      i"..., '\n', 153) = 0x00f070df
[0x4022d1] memchr("      ifree(mp[i].right);\n      "..., '\n', 128) = 0x00f070f9
[0x4022d1] memchr("      ifree(mp[i].is);\n    }\n  f"..., '\n', 102) = 0x00f07110
[0x4022d1] memchr("    }\n  free((char *) mp);\n}\n/* "..., '\n', 79) = 0x00f07116
[0x4022d1] memchr("  free((char *) mp);\n}\n/* kwset."..., '\n', 73) = 0x00f0712b
[0x4022d1] memchr("}\n/* kwset.c - search for any of"..., '\n', 52) = 0x00f0712d
[0x4022d1] memchr("/* kwset.c - search for any of a"..., '\n', 50) = 0x00f0715f
[0x4022d1] memchr("   Copyright 1989 Free Software "..., '\n', 0) = NULL
[0x4023cc] fwrite("9149:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Copyright 1989 Free Software "..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t  Written August 1989 by Mike "..., '1', 28214) = 0x00f0719e
[0x40cdf3] memchr("1989 by Mike Haertel.\n\n   This p"..., '\n', 28195) = 0x00f071b3
[0x4022d1] memchr("\t\t  Written August 1989 by Mike "..., '\n', 0) = NULL
[0x4023cc] fwrite("9150:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  Written August 1989 by Mike "..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., '1', 28173) = 0x00f07275
[0x40cdf3] memchr("1, or (at your option)\n   any la"..., '\n', 27980) = 0x00f0728b
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 145) = 0x00f071b4
[0x4022d1] memchr("   This program is free software"..., '\n', 144) = 0x00f071fc
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 72) = 0x00f07244
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9154:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   the Free Software Foundation;"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   any later version.\n\n   This p"..., '1', 27957) = 0x00f07451
[0x40cdf3] memchr("139, USA.\n\n   The author may be "..., '\n', 27504) = 0x00f0745a
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 402) = 0x00f072a1
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f072a2
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f072e5
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f07327
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f07368
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f07398
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f07399
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f073de
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f0741d
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("9164:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   The author may be reached (E"..., '1', 27494) = 0x00f07609
[0x40cdf3] memchr("15, D-6900\n   Heidelberg, German"..., '\n', 27064) = 0x00f07613
[0x4022d1] memchr("\n   The author may be reached (E"..., '\n', 366) = 0x00f0745b
[0x4022d1] memchr("   The author may be reached (Em"..., '\n', 365) = 0x00f074a0
[0x4022d1] memchr("   or (US mail) as Mike Haertel "..., '\n', 296) = 0x00f074e1
[0x4022d1] memchr("\n/* The algorithm implemented by"..., '\n', 231) = 0x00f074e2
[0x4022d1] memchr("/* The algorithm implemented by "..., '\n', 230) = 0x00f0752f
[0x4022d1] memchr("   to one discovered by Beate Co"..., '\n', 153) = 0x00f0757c
[0x4022d1] memchr("   See "A String Matching Algori"..., '\n', 76) = 0x00f075c8
[0x4022d1] memchr("   IBM-Germany, Scientific Cente"..., '\n', 0) = NULL
[0x4023cc] fwrite("9172:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   IBM-Germany, Scientific Cente"..., 1, 75, 0x7fce6d444260) = 75
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   Heidelberg, Germany.  See als"..., '1', 27053) = 0x00f0769d
[0x40cdf3] memchr("1975,\n   Vol. 18, No. 6, which d"..., '\n', 26916) = 0x00f076a2
[0x4022d1] memchr("   Heidelberg, Germany.  See als"..., '\n', 73) = 0x00f0765c
[0x4022d1] memchr("   String Matching:  An Aid to B"..., '\n', 0) = NULL
[0x4023cc] fwrite("9174:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   String Matching:  An Aid to B"..., 1, 70, 0x7fce6d444260) = 70
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("   Vol. 18, No. 6, which describ"..., '1', 26910) = 0x00f076ab
[0x40cdf3] memchr("18, No. 6, which describes the f"..., '\n', 26902) = 0x00f076e9
[0x4022d1] memchr("   Vol. 18, No. 6, which describ"..., '\n', 0) = NULL
[0x4023cc] fwrite("9175:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Vol. 18, No. 6, which describ"..., 1, 71, 0x7fce6d444260) = 71
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n\n#ifdef STDC_HEADERS\n#undef RE_"..., '1', 26839) = 0x00f0773a
[0x40cdf3] memchr("1\n#if flag_stdlib==0 \n#include <"..., '\n', 26759) = 0x00f0773b
[0x4022d1] memchr("\n\n#ifdef STDC_HEADERS\n#undef RE_"..., '\n', 60) = 0x00f076ea
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#undef RE_D"..., '\n', 59) = 0x00f076eb
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#undef RE_DU"..., '\n', 58) = 0x00f076ff
[0x4022d1] memchr("#undef RE_DUP_MAX\n#include <limi"..., '\n', 38) = 0x00f07711
[0x4022d1] memchr("#include <limits.h>\n#define flag"..., '\n', 20) = 0x00f07725
[0x4022d1] memchr("#define flag_limits 1\n#if flag_s"..., '\n', 0) = NULL
[0x4023cc] fwrite("9181:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_limits 1\n#if flag_s"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#if flag_stdlib==0 \n#include <st"..., '1', 26757) = 0x00f07778
[0x40cdf3] memchr("1\n#endif\n#else\n#define INT_MAX 2"..., '\n', 26697) = 0x00f07779
[0x4022d1] memchr("#if flag_stdlib==0 \n#include <st"..., '\n', 40) = 0x00f0774f
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f07763
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("9184:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_stdlib 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\n#define INT_MAX 214"..., '1', 26695) = 0x00f07798
[0x40cdf3] memchr("147483647\n#define UCHAR_MAX 255\n"..., '\n', 26665) = 0x00f077a1
[0x4022d1] memchr("#endif\n#else\n#define INT_MAX 214"..., '\n', 13) = 0x00f07780
[0x4022d1] memchr("#else\n#define INT_MAX 2147483647"..., '\n', 6) = 0x00f07786
[0x4022d1] memchr("#define INT_MAX 2147483647\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("9187:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define INT_MAX 2147483647\n#defi"..., 1, 27, 0x7fce6d444260) = 27
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define UCHAR_MAX 255\n#ifdef __S"..., '1', 26655) = 0x00f07824
[0x40cdf3] memchr("1\n#endif\n#endif\nextern char *mal"..., '\n', 26525) = 0x00f07825
[0x4022d1] memchr("#define UCHAR_MAX 255\n#ifdef __S"..., '\n', 108) = 0x00f077b7
[0x4022d1] memchr("#ifdef __STDC__\n#include <stddef"..., '\n', 86) = 0x00f077c7
[0x4022d1] memchr("#include <stddef.h>\n#else\n#if fl"..., '\n', 70) = 0x00f077db
[0x4022d1] memchr("#else\n#if flag_systypes==0\n#incl"..., '\n', 50) = 0x00f077e1
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 44) = 0x00f077f6
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f0780d
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("9194:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\n#"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\nextern char *mallo"..., '1', 26523) = 0x00f078b5
[0x40cdf3] memchr("1\n#endif\n#ifdef NEED_MEMORY_H\n#i"..., '\n', 26380) = 0x00f078b6
[0x4022d1] memchr("#endif\n#endif\nextern char *mallo"..., '\n', 123) = 0x00f0782c
[0x4022d1] memchr("#endif\nextern char *malloc();\nex"..., '\n', 116) = 0x00f07833
[0x4022d1] memchr("extern char *malloc();\nextern vo"..., '\n', 109) = 0x00f0784a
[0x4022d1] memchr("extern void free();\n#endif\n\n#ifd"..., '\n', 86) = 0x00f0785e
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_MEMCHR\n#if f"..., '\n', 66) = 0x00f07865
[0x4022d1] memchr("\n#ifdef HAVE_MEMCHR\n#if flag_str"..., '\n', 59) = 0x00f07866
[0x4022d1] memchr("#ifdef HAVE_MEMCHR\n#if flag_stri"..., '\n', 58) = 0x00f07879
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 39) = 0x00f0788c
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f078a0
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 0) = NULL
[0x4023cc] fwrite("9204:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_string 1\n#endif\n#if"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '1', 26378) = 0x00f0790e
[0x40cdf3] memchr("1\n#endif\n#endif\n#else\n#ifdef __S"..., '\n', 26291) = 0x00f0790f
[0x4022d1] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '\n', 67) = 0x00f078bd
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#if flag_me"..., '\n', 60) = 0x00f078d2
[0x4022d1] memchr("#if flag_memory==0\n#include <mem"..., '\n', 39) = 0x00f078e5
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 20) = 0x00f078f9
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#en"..., '\n', 0) = NULL
[0x4023cc] fwrite("9209:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define flag_memory 1\n#endif\n#en"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '1', 26289) = 0x00f079fe
[0x40cdf3] memchr("1)\n#define obstack_chunk_alloc m"..., '\n', 26051) = 0x00f07a00
[0x4022d1] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '\n', 211) = 0x00f07916
[0x4022d1] memchr("#endif\n#else\n#ifdef __STDC__\next"..., '\n', 204) = 0x00f0791d
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 197) = 0x00f07923
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 191) = 0x00f07933
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 175) = 0x00f0794a
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 152) = 0x00f07950
[0x4022d1] memchr("extern char *memchr();\n#endif\n#e"..., '\n', 146) = 0x00f07967
[0x4022d1] memchr("#endif\n#endif\n\n#ifdef GREP\nexter"..., '\n', 123) = 0x00f0796e
[0x4022d1] memchr("#endif\n\n#ifdef GREP\nextern char "..., '\n', 116) = 0x00f07975
[0x4022d1] memchr("\n#ifdef GREP\nextern char *xmallo"..., '\n', 109) = 0x00f07976
[0x4022d1] memchr("#ifdef GREP\nextern char *xmalloc"..., '\n', 108) = 0x00f07982
[0x4022d1] memchr("extern char *xmalloc();\n#define "..., '\n', 96) = 0x00f0799a
[0x4022d1] memchr("#define malloc xmalloc\n#endif\n\n#"..., '\n', 72) = 0x00f079b1
[0x4022d1] memchr("#endif\n\n#include "kwset.h"\n#incl"..., '\n', 49) = 0x00f079b8
[0x4022d1] memchr("\n#include "kwset.h"\n#include "ob"..., '\n', 42) = 0x00f079b9
[0x4022d1] memchr("#include "kwset.h"\n#include "obs"..., '\n', 41) = 0x00f079cc
[0x4022d1] memchr("#include "obstack.h"\n\n#define NC"..., '\n', 22) = 0x00f079e1
[0x4022d1] memchr("\n#define NCHAR (UCHAR_MAX + 1)\n#"..., '\n', 1) = 0x00f079e2
[0x4022d1] memchr("#define NCHAR (UCHAR_MAX + 1)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("9228:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("#define NCHAR (UCHAR_MAX + 1)\n#d"..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#define obstack_chunk_alloc mall"..., '1', 26048) = 0x00f0835e
[0x40cdf3] memchr("1;\n  kwset->target = 0;\n  kwset-"..., '\n', 23651) = 0x00f08360
[0x4022d1] memchr("#define obstack_chunk_alloc mall"..., '\n', 2380) = 0x00f07a23
[0x4022d1] memchr("#define obstack_chunk_free free\n"..., '\n', 2345) = 0x00f07a43
[0x4022d1] memchr("\n/* Balanced tree of edges and l"..., '\n', 2313) = 0x00f07a44
[0x4022d1] memchr("/* Balanced tree of edges and la"..., '\n', 2312) = 0x00f07a87
[0x4022d1] memchr("struct tree\n{\n  struct tree *lli"..., '\n', 2245) = 0x00f07a93
[0x4022d1] memchr("{\n  struct tree *llink;\t\t/* Left"..., '\n', 2233) = 0x00f07a95
[0x4022d1] memchr("  struct tree *llink;\t\t/* Left l"..., '\n', 2231) = 0x00f07ad2
[0x4022d1] memchr("  struct tree *rlink;\t\t/* Right "..., '\n', 2170) = 0x00f07b0e
[0x4022d1] memchr("  struct trie *trie;\t\t/* Trie no"..., '\n', 2110) = 0x00f07b4d
[0x4022d1] memchr("  unsigned char label;\t\t/* Label"..., '\n', 2047) = 0x00f07b7f
[0x4022d1] memchr("  char balance;\t\t\t/* Difference "..., '\n', 1997) = 0x00f07bb9
[0x4022d1] memchr("};\n\n/* Node of a trie representi"..., '\n', 1939) = 0x00f07bbc
[0x4022d1] memchr("\n/* Node of a trie representing "..., '\n', 1936) = 0x00f07bbd
[0x4022d1] memchr("/* Node of a trie representing a"..., '\n', 1935) = 0x00f07bfb
[0x4022d1] memchr("struct trie\n{\n  unsigned int acc"..., '\n', 1873) = 0x00f07c07
[0x4022d1] memchr("{\n  unsigned int accepting;\t/* W"..., '\n', 1861) = 0x00f07c09
[0x4022d1] memchr("  unsigned int accepting;\t/* Wor"..., '\n', 1859) = 0x00f07c4f
[0x4022d1] memchr("  struct tree *links;\t\t/* Tree o"..., '\n', 1789) = 0x00f07c8d
[0x4022d1] memchr("  struct trie *parent;\t\t/* Paren"..., '\n', 1727) = 0x00f07cc0
[0x4022d1] memchr("  struct trie *next;\t\t/* List of"..., '\n', 1676) = 0x00f07d03
[0x4022d1] memchr("  struct trie *fail;\t\t/* Aho-Cor"..., '\n', 1609) = 0x00f07d3e
[0x4022d1] memchr("  int depth;\t\t\t/* Depth of this "..., '\n', 1550) = 0x00f07d75
[0x4022d1] memchr("  int shift;\t\t\t/* Shift function"..., '\n', 1495) = 0x00f07dae
[0x4022d1] memchr("  int maxshift;\t\t\t/* Max shift o"..., '\n', 1438) = 0x00f07de9
[0x4022d1] memchr("};\n\n/* Structure returned opaque"..., '\n', 1379) = 0x00f07dec
[0x4022d1] memchr("\n/* Structure returned opaquely "..., '\n', 1376) = 0x00f07ded
[0x4022d1] memchr("/* Structure returned opaquely t"..., '\n', 1375) = 0x00f07e35
[0x4022d1] memchr("struct kwset\n{\n  struct obstack "..., '\n', 1303) = 0x00f07e42
[0x4022d1] memchr("{\n  struct obstack obstack;\t/* O"..., '\n', 1290) = 0x00f07e44
[0x4022d1] memchr("  struct obstack obstack;\t/* Obs"..., '\n', 1288) = 0x00f07e81
[0x4022d1] memchr("  int words;\t\t\t/* Number of word"..., '\n', 1227) = 0x00f07eb3
[0x4022d1] memchr("  struct trie *trie;\t\t/* The tri"..., '\n', 1177) = 0x00f07ee0
[0x4022d1] memchr("  int mind;\t\t\t/* Minimum depth o"..., '\n', 1132) = 0x00f07f18
[0x4022d1] memchr("  int maxd;\t\t\t/* Maximum depth o"..., '\n', 1076) = 0x00f07f47
[0x4022d1] memchr("  unsigned char delta[NCHAR];\t/*"..., '\n', 1029) = 0x00f07f89
[0x4022d1] memchr("  struct trie *next[NCHAR];\t/* T"..., '\n', 963) = 0x00f07fca
[0x4022d1] memchr("  char *target;\t\t\t/* Target stri"..., '\n', 898) = 0x00f08005
[0x4022d1] memchr("  int mind2;\t\t\t/* Used in Boyer-"..., '\n', 839) = 0x00f08045
[0x4022d1] memchr("  char *trans;\t\t\t/* Character tr"..., '\n', 775) = 0x00f08079
[0x4022d1] memchr("};\n\n/* Allocate and initialize a"..., '\n', 723) = 0x00f0807c
[0x4022d1] memchr("\n/* Allocate and initialize a ke"..., '\n', 720) = 0x00f0807d
[0x4022d1] memchr("/* Allocate and initialize a key"..., '\n', 719) = 0x00f080c2
[0x4022d1] memchr("   pointer to it.  Return NULL i"..., '\n', 650) = 0x00f08100
[0x4022d1] memchr("kwset_t\nkwsalloc(trans)\n     cha"..., '\n', 588) = 0x00f08108
[0x4022d1] memchr("kwsalloc(trans)\n     char *trans"..., '\n', 580) = 0x00f08118
[0x4022d1] memchr("     char *trans;\n{\n  struct kws"..., '\n', 564) = 0x00f0812a
[0x4022d1] memchr("{\n  struct kwset *kwset;\n\n  kwse"..., '\n', 546) = 0x00f0812c
[0x4022d1] memchr("  struct kwset *kwset;\n\n  kwset "..., '\n', 544) = 0x00f08143
[0x4022d1] memchr("\n  kwset = (struct kwset *) mall"..., '\n', 521) = 0x00f08144
[0x4022d1] memchr("  kwset = (struct kwset *) mallo"..., '\n', 520) = 0x00f0817e
[0x4022d1] memchr("  if (!kwset)\n    return 0;\n\n  o"..., '\n', 462) = 0x00f0818c
[0x4022d1] memchr("    return 0;\n\n  obstack_init(&k"..., '\n', 448) = 0x00f0819a
[0x4022d1] memchr("\n  obstack_init(&kwset->obstack)"..., '\n', 434) = 0x00f0819b
[0x4022d1] memchr("  obstack_init(&kwset->obstack);"..., '\n', 433) = 0x00f081bc
[0x4022d1] memchr("  kwset->words = 0;\n  kwset->tri"..., '\n', 400) = 0x00f081d0
[0x4022d1] memchr("  kwset->trie\n    = (struct trie"..., '\n', 380) = 0x00f081de
[0x4022d1] memchr("    = (struct trie *) obstack_al"..., '\n', 366) = 0x00f0822a
[0x4022d1] memchr("  if (!kwset->trie)\n    {\n      "..., '\n', 290) = 0x00f0823e
[0x4022d1] memchr("    {\n      kwsfree((kwset_t) kw"..., '\n', 270) = 0x00f08244
[0x4022d1] memchr("      kwsfree((kwset_t) kwset);\n"..., '\n', 264) = 0x00f08264
[0x4022d1] memchr("      return 0;\n    }\n  kwset->t"..., '\n', 232) = 0x00f08274
[0x4022d1] memchr("    }\n  kwset->trie->accepting ="..., '\n', 216) = 0x00f0827a
[0x4022d1] memchr("  kwset->trie->accepting = 0;\n  "..., '\n', 210) = 0x00f08298
[0x4022d1] memchr("  kwset->trie->links = 0;\n  kwse"..., '\n', 180) = 0x00f082b2
[0x4022d1] memchr("  kwset->trie->parent = 0;\n  kws"..., '\n', 154) = 0x00f082cd
[0x4022d1] memchr("  kwset->trie->next = 0;\n  kwset"..., '\n', 127) = 0x00f082e6
[0x4022d1] memchr("  kwset->trie->fail = 0;\n  kwset"..., '\n', 102) = 0x00f082ff
[0x4022d1] memchr("  kwset->trie->depth = 0;\n  kwse"..., '\n', 77) = 0x00f08319
[0x4022d1] memchr("  kwset->trie->shift = 0;\n  kwse"..., '\n', 51) = 0x00f08333
[0x4022d1] memchr("  kwset->mind = INT_MAX;\n  kwset"..., '\n', 25) = 0x00f0834c
[0x4022d1] memchr("  kwset->maxd = -1;\n  kwset->tar"..., '\n', 0) = NULL
[0x4023cc] fwrite("9299:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  kwset->maxd = -1;\n  kwset->tar"..., 1, 20, 0x7fce6d444260) = 20
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  kwset->target = 0;\n  kwset->tr"..., '1', 23648) = 0x00f08517
[0x40cdf3] memchr("12];\n  enum { L, R } dirs[12];\n "..., '\n', 23210) = 0x00f0851b
[0x4022d1] memchr("  kwset->target = 0;\n  kwset->tr"..., '\n', 417) = 0x00f08375
[0x4022d1] memchr("  kwset->trans = trans;\n\n  retur"..., '\n', 396) = 0x00f0838d
[0x4022d1] memchr("\n  return (kwset_t) kwset;\n}\n\n/*"..., '\n', 372) = 0x00f0838e
[0x4022d1] memchr("  return (kwset_t) kwset;\n}\n\n/* "..., '\n', 371) = 0x00f083a8
[0x4022d1] memchr("}\n\n/* Add the given string to th"..., '\n', 345) = 0x00f083aa
[0x4022d1] memchr("\n/* Add the given string to the "..., '\n', 343) = 0x00f083ab
[0x4022d1] memchr("/* Add the given string to the c"..., '\n', 342) = 0x00f083f4
[0x4022d1] memchr("   for success, an error message"..., '\n', 269) = 0x00f08423
[0x4022d1] memchr("char *\nkwsincr(kws, text, len)\n "..., '\n', 222) = 0x00f0842a
[0x4022d1] memchr("kwsincr(kws, text, len)\n     kws"..., '\n', 215) = 0x00f08442
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 191) = 0x00f08454
[0x4022d1] memchr("     char *text;\n     size_t len"..., '\n', 173) = 0x00f08465
[0x4022d1] memchr("     size_t len;\n{\n  struct kwse"..., '\n', 156) = 0x00f08476
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  regis"..., '\n', 139) = 0x00f08478
[0x4022d1] memchr("  struct kwset *kwset;\n  registe"..., '\n', 137) = 0x00f0848f
[0x4022d1] memchr("  register struct trie *trie;\n  "..., '\n', 114) = 0x00f084ad
[0x4022d1] memchr("  register unsigned char label;\n"..., '\n', 84) = 0x00f084cd
[0x4022d1] memchr("  register struct tree *link;\n  "..., '\n', 52) = 0x00f084eb
[0x4022d1] memchr("  register int depth;\n  struct t"..., '\n', 22) = 0x00f08501
[0x4022d1] memchr("  struct tree *links[12];\n  enum"..., '\n', 0) = NULL
[0x4023cc] fwrite("9319:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  struct tree *links[12];\n  enum"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  enum { L, R } dirs[12];\n  stru"..., '1', 23205) = 0x00f08531
[0x40cdf3] memchr("12];\n  struct tree *t, *r, *l, *"..., '\n', 23184) = 0x00f08535
[0x4022d1] memchr("  enum { L, R } dirs[12];\n  stru"..., '\n', 0) = NULL
[0x4023cc] fwrite("9320:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  enum { L, R } dirs[12];\n  stru"..., 1, 26, 0x7fce6d444260) = 26
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  struct tree *t, *r, *l, *rl, *"..., '1', 23179) = 0x00f08779
[0x40cdf3] memchr("1;\n\n      while (link && label !"..., '\n', 22600) = 0x00f0877b
[0x4022d1] memchr("  struct tree *t, *r, *l, *rl, *"..., '\n', 565) = 0x00f08559
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 529) = 0x00f0855a
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 528) = 0x00f0857a
[0x4022d1] memchr("  trie = kwset->trie;\n  text += "..., '\n', 496) = 0x00f08590
[0x4022d1] memchr("  text += len;\n\n  /* Descend the"..., '\n', 474) = 0x00f0859f
[0x4022d1] memchr("\n  /* Descend the trie (built of"..., '\n', 459) = 0x00f085a0
[0x4022d1] memchr("  /* Descend the trie (built of "..., '\n', 458) = 0x00f085eb
[0x4022d1] memchr("     installing new nodes when n"..., '\n', 383) = 0x00f08618
[0x4022d1] memchr("  while (len--)\n    {\n      labe"..., '\n', 338) = 0x00f08628
[0x4022d1] memchr("    {\n      label = kwset->trans"..., '\n', 322) = 0x00f0862e
[0x4022d1] memchr("      label = kwset->trans ? kws"..., '\n', 316) = 0x00f0867c
[0x4022d1] memchr("\n      /* Descend the tree of ou"..., '\n', 238) = 0x00f0867d
[0x4022d1] memchr("      /* Descend the tree of out"..., '\n', 237) = 0x00f086bd
[0x4022d1] memchr("\t looking for the current charac"..., '\n', 173) = 0x00f086f3
[0x4022d1] memchr("\t of the path followed. */\n     "..., '\n', 119) = 0x00f0870e
[0x4022d1] memchr("      link = trie->links;\n      "..., '\n', 92) = 0x00f08728
[0x4022d1] memchr("      links[0] = (struct tree *)"..., '\n', 66) = 0x00f08757
[0x4022d1] memchr("      dirs[0] = L;\n      depth ="..., '\n', 19) = 0x00f0876a
[0x4022d1] memchr("      depth = 1;\n\n      while (l"..., '\n', 0) = NULL
[0x4023cc] fwrite("9339:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      depth = 1;\n\n      while (l"..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n      while (link && label != l"..., '1', 22597) = 0x00f08aef
[0x40cdf3] memchr("1;\n\t  link->trie->shift = 0;\n\t  "..., '\n', 21714) = 0x00f08af1
[0x4022d1] memchr("\n      while (link && label != l"..., '\n', 846) = 0x00f0877c
[0x4022d1] memchr("      while (link && label != li"..., '\n', 845) = 0x00f087a7
[0x4022d1] memchr("\t{\n\t  links[depth] = link;\n\t  if"..., '\n', 802) = 0x00f087aa
[0x4022d1] memchr("\t  links[depth] = link;\n\t  if (l"..., '\n', 799) = 0x00f087c2
[0x4022d1] memchr("\t  if (label < link->label)\n\t   "..., '\n', 775) = 0x00f087de
[0x4022d1] memchr("\t    dirs[depth++] = L, link = l"..., '\n', 747) = 0x00f0880a
[0x4022d1] memchr("\t  else\n\t    dirs[depth++] = R, "..., '\n', 703) = 0x00f08812
[0x4022d1] memchr("\t    dirs[depth++] = R, link = l"..., '\n', 695) = 0x00f0883e
[0x4022d1] memchr("\t}\n\n      /* The current charact"..., '\n', 651) = 0x00f08841
[0x4022d1] memchr("\n      /* The current character "..., '\n', 648) = 0x00f08842
[0x4022d1] memchr("      /* The current character d"..., '\n', 647) = 0x00f08882
[0x4022d1] memchr("\t this trie node, so build a new"..., '\n', 583) = 0x00f088b9
[0x4022d1] memchr("\t a link in the current trie nod"..., '\n', 528) = 0x00f088e6
[0x4022d1] memchr("      if (!link)\n\t{\n\t  link = (s"..., '\n', 483) = 0x00f088f7
[0x4022d1] memchr("\t{\n\t  link = (struct tree *) obs"..., '\n', 466) = 0x00f088fa
[0x4022d1] memchr("\t  link = (struct tree *) obstac"..., '\n', 463) = 0x00f08933
[0x4022d1] memchr("\t\t\t\t\t       sizeof (struct tree)"..., '\n', 406) = 0x00f08956
[0x4022d1] memchr("\t  if (!link)\n\t    return "memor"..., '\n', 371) = 0x00f08964
[0x4022d1] memchr("\t    return "memory exhausted";\n"..., '\n', 357) = 0x00f08984
[0x4022d1] memchr("\t  link->llink = 0;\n\t  link->rli"..., '\n', 325) = 0x00f08998
[0x4022d1] memchr("\t  link->rlink = 0;\n\t  link->tri"..., '\n', 305) = 0x00f089ac
[0x4022d1] memchr("\t  link->trie = (struct trie *) "..., '\n', 285) = 0x00f089eb
[0x4022d1] memchr("\t\t\t\t\t\t     sizeof (struct trie))"..., '\n', 222) = 0x00f08a0d
[0x4022d1] memchr("\t  if (!link->trie)\n\t    return "..., '\n', 188) = 0x00f08a21
[0x4022d1] memchr("\t    return "memory exhausted";\n"..., '\n', 168) = 0x00f08a41
[0x4022d1] memchr("\t  link->trie->accepting = 0;\n\t "..., '\n', 136) = 0x00f08a5f
[0x4022d1] memchr("\t  link->trie->links = 0;\n\t  lin"..., '\n', 106) = 0x00f08a79
[0x4022d1] memchr("\t  link->trie->parent = trie;\n\t "..., '\n', 80) = 0x00f08a97
[0x4022d1] memchr("\t  link->trie->next = 0;\n\t  link"..., '\n', 50) = 0x00f08ab0
[0x4022d1] memchr("\t  link->trie->fail = 0;\n\t  link"..., '\n', 25) = 0x00f08ac9
[0x4022d1] memchr("\t  link->trie->depth = trie->dep"..., '\n', 0) = NULL
[0x4023cc] fwrite("9370:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  link->trie->depth = trie->dep"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  link->trie->shift = 0;\n\t  lin"..., '1', 21711) = 0x00f08dc0
[0x40cdf3] memchr("1])\n\t\t    {\n\t\t    case L:\n\t\t    "..., '\n', 20993) = 0x00f08dc3
[0x4022d1] memchr("\t  link->trie->shift = 0;\n\t  lin"..., '\n', 693) = 0x00f08b0b
[0x4022d1] memchr("\t  link->label = label;\n\t  link-"..., '\n', 667) = 0x00f08b23
[0x4022d1] memchr("\t  link->balance = 0;\n\n\t  /* Ins"..., '\n', 643) = 0x00f08b39
[0x4022d1] memchr("\n\t  /* Install the new tree node"..., '\n', 621) = 0x00f08b3a
[0x4022d1] memchr("\t  /* Install the new tree node "..., '\n', 620) = 0x00f08b6c
[0x4022d1] memchr("\t  if (dirs[--depth] == L)\n\t    "..., '\n', 570) = 0x00f08b87
[0x4022d1] memchr("\t    links[depth]->llink = link;"..., '\n', 543) = 0x00f08ba8
[0x4022d1] memchr("\t  else\n\t    links[depth]->rlink"..., '\n', 510) = 0x00f08bb0
[0x4022d1] memchr("\t    links[depth]->rlink = link;"..., '\n', 502) = 0x00f08bd1
[0x4022d1] memchr("\n\t  /* Back up the tree fixing t"..., '\n', 469) = 0x00f08bd2
[0x4022d1] memchr("\t  /* Back up the tree fixing th"..., '\n', 468) = 0x00f08c06
[0x4022d1] memchr("\t  while (depth && !links[depth]"..., '\n', 416) = 0x00f08c31
[0x4022d1] memchr("\t    {\n\t      if (dirs[depth] =="..., '\n', 373) = 0x00f08c38
[0x4022d1] memchr("\t      if (dirs[depth] == L)\n\t\t-"..., '\n', 366) = 0x00f08c55
[0x4022d1] memchr("\t\t--links[depth]->balance;\n\t    "..., '\n', 337) = 0x00f08c70
[0x4022d1] memchr("\t      else\n\t\t++links[depth]->ba"..., '\n', 310) = 0x00f08c7c
[0x4022d1] memchr("\t\t++links[depth]->balance;\n\t    "..., '\n', 298) = 0x00f08c97
[0x4022d1] memchr("\t      --depth;\n\t    }\n\n\t  /* Re"..., '\n', 271) = 0x00f08ca7
[0x4022d1] memchr("\t    }\n\n\t  /* Rebalance the tree"..., '\n', 255) = 0x00f08cae
[0x4022d1] memchr("\n\t  /* Rebalance the tree by poi"..., '\n', 248) = 0x00f08caf
[0x4022d1] memchr("\t  /* Rebalance the tree by poin"..., '\n', 247) = 0x00f08cee
[0x4022d1] memchr("\t  if (depth && ((dirs[depth] =="..., '\n', 184) = 0x00f08d2d
[0x4022d1] memchr("\t\t\t|| (dirs[depth] == R && ++lin"..., '\n', 121) = 0x00f08d63
[0x4022d1] memchr("\t    {\n\t      switch (links[dept"..., '\n', 67) = 0x00f08d6a
[0x4022d1] memchr("\t      switch (links[depth]->bal"..., '\n', 60) = 0x00f08d90
[0x4022d1] memchr("\t\t{\n\t\tcase (char) -2:\n\t\t  switch"..., '\n', 22) = 0x00f08d94
[0x4022d1] memchr("\t\tcase (char) -2:\n\t\t  switch (di"..., '\n', 18) = 0x00f08da6
[0x4022d1] memchr("\t\t  switch (dirs[depth + 1])\n\t\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("9398:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  switch (dirs[depth + 1])\n\t\t "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t    case L:\n\t\t      r "..., '1', 20989) = 0x00f08f39
[0x40cdf3] memchr("1 ? 0 : -1;\n\t\t      r->balance ="..., '\n', 20616) = 0x00f08f44
[0x4022d1] memchr("\t\t    {\n\t\t    case L:\n\t\t      r "..., '\n', 338) = 0x00f08dcb
[0x4022d1] memchr("\t\t    case L:\n\t\t      r = links["..., '\n', 330) = 0x00f08dd9
[0x4022d1] memchr("\t\t      r = links[depth], t = r-"..., '\n', 316) = 0x00f08e10
[0x4022d1] memchr("\t\t      t->rlink = r, r->llink ="..., '\n', 261) = 0x00f08e35
[0x4022d1] memchr("\t\t      t->balance = r->balance "..., '\n', 224) = 0x00f08e5a
[0x4022d1] memchr("\t\t      break;\n\t\t    case R:\n\t\t "..., '\n', 187) = 0x00f08e69
[0x4022d1] memchr("\t\t    case R:\n\t\t      r = links["..., '\n', 172) = 0x00f08e77
[0x4022d1] memchr("\t\t      r = links[depth], l = r-"..., '\n', 158) = 0x00f08ead
[0x4022d1] memchr("\t\t      rl = t->rlink, lr = t->l"..., '\n', 104) = 0x00f08ed3
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 66) = 0x00f08f15
[0x4022d1] memchr("\t\t      l->balance = t->balance "..., '\n', 0) = NULL
[0x4023cc] fwrite("9409:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      l->balance = t->balance "..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      r->balance = t->balance "..., '1', 20604) = 0x00f08f70
[0x40cdf3] memchr("1 ? 0 : 1;\n\t\t      t->balance = "..., '\n', 20561) = 0x00f08f7a
[0x4022d1] memchr("\t\t      r->balance = t->balance "..., '\n', 0) = NULL
[0x4023cc] fwrite("9410:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      r->balance = t->balance "..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      t->balance = 0;\n\t\t      "..., '1', 20550) = 0x00f08fd8
[0x40cdf3] memchr("1])\n\t\t    {\n\t\t    case R:\n\t\t    "..., '\n', 20457) = 0x00f08fdb
[0x4022d1] memchr("\t\t      t->balance = 0;\n\t\t      "..., '\n', 68) = 0x00f08f92
[0x4022d1] memchr("\t\t      break;\n\t\t    }\n\t\t  break"..., '\n', 44) = 0x00f08fa1
[0x4022d1] memchr("\t\t    }\n\t\t  break;\n\t\tcase 2:\n\t\t "..., '\n', 29) = 0x00f08fa9
[0x4022d1] memchr("\t\t  break;\n\t\tcase 2:\n\t\t  switch "..., '\n', 21) = 0x00f08fb4
[0x4022d1] memchr("\t\tcase 2:\n\t\t  switch (dirs[depth"..., '\n', 10) = 0x00f08fbe
[0x4022d1] memchr("\t\t  switch (dirs[depth + 1])\n\t\t "..., '\n', 0) = NULL
[0x4023cc] fwrite("9416:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t  switch (dirs[depth + 1])\n\t\t "..., 1, 29, 0x7fce6d444260) = 29
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t    case R:\n\t\t      l "..., '1', 20453) = 0x00f09151
[0x40cdf3] memchr("1 ? 0 : -1;\n\t\t      r->balance ="..., '\n', 20080) = 0x00f0915c
[0x4022d1] memchr("\t\t    {\n\t\t    case R:\n\t\t      l "..., '\n', 338) = 0x00f08fe3
[0x4022d1] memchr("\t\t    case R:\n\t\t      l = links["..., '\n', 330) = 0x00f08ff1
[0x4022d1] memchr("\t\t      l = links[depth], t = l-"..., '\n', 316) = 0x00f09028
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 261) = 0x00f0904d
[0x4022d1] memchr("\t\t      t->balance = l->balance "..., '\n', 224) = 0x00f09072
[0x4022d1] memchr("\t\t      break;\n\t\t    case L:\n\t\t "..., '\n', 187) = 0x00f09081
[0x4022d1] memchr("\t\t    case L:\n\t\t      l = links["..., '\n', 172) = 0x00f0908f
[0x4022d1] memchr("\t\t      l = links[depth], r = l-"..., '\n', 158) = 0x00f090c5
[0x4022d1] memchr("\t\t      lr = t->llink, rl = t->r"..., '\n', 104) = 0x00f090eb
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 66) = 0x00f0912d
[0x4022d1] memchr("\t\t      l->balance = t->balance "..., '\n', 0) = NULL
[0x4023cc] fwrite("9427:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      l->balance = t->balance "..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      r->balance = t->balance "..., '1', 20068) = 0x00f09188
[0x40cdf3] memchr("1 ? 0 : 1;\n\t\t      t->balance = "..., '\n', 20025) = 0x00f09192
[0x4022d1] memchr("\t\t      r->balance = t->balance "..., '\n', 0) = NULL
[0x4023cc] fwrite("9428:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\t      r->balance = t->balance "..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t      t->balance = 0;\n\t\t      "..., '1', 20014) = 0x00f091ea
[0x40cdf3] memchr("1] == L)\n\t\tlinks[depth - 1]->lli"..., '\n', 19927) = 0x00f091f2
[0x4022d1] memchr("\t\t      t->balance = 0;\n\t\t      "..., '\n', 63) = 0x00f091aa
[0x4022d1] memchr("\t\t      break;\n\t\t    }\n\t\t  break"..., '\n', 39) = 0x00f091b9
[0x4022d1] memchr("\t\t    }\n\t\t  break;\n\t\t}\n\n\t      i"..., '\n', 24) = 0x00f091c1
[0x4022d1] memchr("\t\t  break;\n\t\t}\n\n\t      if (dirs["..., '\n', 16) = 0x00f091cc
[0x4022d1] memchr("\t\t}\n\n\t      if (dirs[depth - 1] "..., '\n', 5) = 0x00f091d0
[0x4022d1] memchr("\n\t      if (dirs[depth - 1] == L"..., '\n', 1) = 0x00f091d1
[0x4022d1] memchr("\t      if (dirs[depth - 1] == L)"..., '\n', 0) = NULL
[0x4023cc] fwrite("9435:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t      if (dirs[depth - 1] == L)"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\tlinks[depth - 1]->llink = t;\n\t"..., '1', 19918) = 0x00f09203
[0x40cdf3] memchr("1]->llink = t;\n\t      else\n\t\tlin"..., '\n', 19902) = 0x00f09211
[0x4022d1] memchr("\t\tlinks[depth - 1]->llink = t;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("9436:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\tlinks[depth - 1]->llink = t;\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      else\n\t\tlinks[depth - 1]->"..., '1', 19887) = 0x00f0922e
[0x40cdf3] memchr("1]->rlink = t;\n\t    }\n\t}\n\n      "..., '\n', 19859) = 0x00f0923c
[0x4022d1] memchr("\t      else\n\t\tlinks[depth - 1]->"..., '\n', 12) = 0x00f0921d
[0x4022d1] memchr("\t\tlinks[depth - 1]->rlink = t;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("9438:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t\tlinks[depth - 1]->rlink = t;\n\t"..., 1, 31, 0x7fce6d444260) = 31
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    }\n\t}\n\n      trie = link->tr"..., '1', 19844) = 0x00f09314
[0x40cdf3] memchr("1 + 2 * kwset->words;\n  ++kwset-"..., '\n', 19629) = 0x00f09329
[0x4022d1] memchr("\t    }\n\t}\n\n      trie = link->tr"..., '\n', 193) = 0x00f09243
[0x4022d1] memchr("\t}\n\n      trie = link->trie;\n   "..., '\n', 186) = 0x00f09246
[0x4022d1] memchr("\n      trie = link->trie;\n    }\n"..., '\n', 183) = 0x00f09247
[0x4022d1] memchr("      trie = link->trie;\n    }\n\n"..., '\n', 182) = 0x00f09260
[0x4022d1] memchr("    }\n\n  /* Mark the node we fin"..., '\n', 157) = 0x00f09266
[0x4022d1] memchr("\n  /* Mark the node we finally r"..., '\n', 151) = 0x00f09267
[0x4022d1] memchr("  /* Mark the node we finally re"..., '\n', 150) = 0x00f092a8
[0x4022d1] memchr("     index number of this word i"..., '\n', 85) = 0x00f092e5
[0x4022d1] memchr("  if (!trie->accepting)\n    trie"..., '\n', 24) = 0x00f092fd
[0x4022d1] memchr("    trie->accepting = 1 + 2 * kw"..., '\n', 0) = NULL
[0x4023cc] fwrite("9448:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    trie->accepting = 1 + 2 * kw"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  ++kwset->words;\n\n  /* Keep tra"..., '1', 19607) = 0x00f09b15
[0x40cdf3] memchr("1;\n  if (!hasevery(a, b->llink))"..., '\n', 17580) = 0x00f09b17
[0x4022d1] memchr("  ++kwset->words;\n\n  /* Keep tra"..., '\n', 2016) = 0x00f0933b
[0x4022d1] memchr("\n  /* Keep track of the longest "..., '\n', 1998) = 0x00f0933c
[0x4022d1] memchr("  /* Keep track of the longest a"..., '\n', 1997) = 0x00f09386
[0x4022d1] memchr("  if (trie->depth < kwset->mind)"..., '\n', 1923) = 0x00f093a7
[0x4022d1] memchr("    kwset->mind = trie->depth;\n "..., '\n', 1890) = 0x00f093c6
[0x4022d1] memchr("  if (trie->depth > kwset->maxd)"..., '\n', 1859) = 0x00f093e7
[0x4022d1] memchr("    kwset->maxd = trie->depth;\n\n"..., '\n', 1826) = 0x00f09406
[0x4022d1] memchr("\n  return 0;\n}\n\n/* Enqueue the t"..., '\n', 1795) = 0x00f09407
[0x4022d1] memchr("  return 0;\n}\n\n/* Enqueue the tr"..., '\n', 1794) = 0x00f09413
[0x4022d1] memchr("}\n\n/* Enqueue the trie nodes ref"..., '\n', 1782) = 0x00f09415
[0x4022d1] memchr("\n/* Enqueue the trie nodes refer"..., '\n', 1780) = 0x00f09416
[0x4022d1] memchr("/* Enqueue the trie nodes refere"..., '\n', 1779) = 0x00f09456
[0x4022d1] memchr("   given queue. */\nstatic void\ne"..., '\n', 1715) = 0x00f09469
[0x4022d1] memchr("static void\nenqueue(tree, last)\n"..., '\n', 1696) = 0x00f09475
[0x4022d1] memchr("enqueue(tree, last)\n     struct "..., '\n', 1684) = 0x00f09489
[0x4022d1] memchr("     struct tree *tree;\n     str"..., '\n', 1664) = 0x00f094a1
[0x4022d1] memchr("     struct trie **last;\n{\n  if "..., '\n', 1640) = 0x00f094ba
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  enq"..., '\n', 1615) = 0x00f094bc
[0x4022d1] memchr("  if (!tree)\n    return;\n  enque"..., '\n', 1613) = 0x00f094c9
[0x4022d1] memchr("    return;\n  enqueue(tree->llin"..., '\n', 1600) = 0x00f094d5
[0x4022d1] memchr("  enqueue(tree->llink, last);\n  "..., '\n', 1588) = 0x00f094f3
[0x4022d1] memchr("  enqueue(tree->rlink, last);\n  "..., '\n', 1558) = 0x00f09511
[0x4022d1] memchr("  (*last) = (*last)->next = tree"..., '\n', 1528) = 0x00f09539
[0x4022d1] memchr("}\n\n/* Compute the Aho-Corasick f"..., '\n', 1488) = 0x00f0953b
[0x4022d1] memchr("\n/* Compute the Aho-Corasick fai"..., '\n', 1486) = 0x00f0953c
[0x4022d1] memchr("/* Compute the Aho-Corasick fail"..., '\n', 1485) = 0x00f09587
[0x4022d1] memchr("   from the given tree, given th"..., '\n', 1410) = 0x00f095ce
[0x4022d1] memchr("   well as a last resort failure"..., '\n', 1339) = 0x00f095f8
[0x4022d1] memchr("static void\ntreefails(tree, fail"..., '\n', 1297) = 0x00f09604
[0x4022d1] memchr("treefails(tree, fail, recourse)\n"..., '\n', 1285) = 0x00f09624
[0x4022d1] memchr("     register struct tree *tree;"..., '\n', 1253) = 0x00f09645
[0x4022d1] memchr("     struct trie *fail;\n     str"..., '\n', 1220) = 0x00f0965d
[0x4022d1] memchr("     struct trie *recourse;\n{\n  "..., '\n', 1196) = 0x00f09679
[0x4022d1] memchr("{\n  register struct tree *link;\n"..., '\n', 1168) = 0x00f0967b
[0x4022d1] memchr("  register struct tree *link;\n\n "..., '\n', 1166) = 0x00f09699
[0x4022d1] memchr("\n  if (!tree)\n    return;\n\n  tre"..., '\n', 1136) = 0x00f0969a
[0x4022d1] memchr("  if (!tree)\n    return;\n\n  tree"..., '\n', 1135) = 0x00f096a7
[0x4022d1] memchr("    return;\n\n  treefails(tree->l"..., '\n', 1122) = 0x00f096b3
[0x4022d1] memchr("\n  treefails(tree->llink, fail, "..., '\n', 1110) = 0x00f096b4
[0x4022d1] memchr("  treefails(tree->llink, fail, r"..., '\n', 1109) = 0x00f096de
[0x4022d1] memchr("  treefails(tree->rlink, fail, r"..., '\n', 1067) = 0x00f09708
[0x4022d1] memchr("\n  /* Find, in the chain of fail"..., '\n', 1025) = 0x00f09709
[0x4022d1] memchr("  /* Find, in the chain of fails"..., '\n', 1024) = 0x00f0974c
[0x4022d1] memchr("     node that has a descendent "..., '\n', 957) = 0x00f09785
[0x4022d1] memchr("  while (fail)\n    {\n      link "..., '\n', 900) = 0x00f09794
[0x4022d1] memchr("    {\n      link = fail->links;\n"..., '\n', 885) = 0x00f0979a
[0x4022d1] memchr("      link = fail->links;\n      "..., '\n', 879) = 0x00f097b4
[0x4022d1] memchr("      while (link && tree->label"..., '\n', 853) = 0x00f097e5
[0x4022d1] memchr("\tif (tree->label < link->label)\n"..., '\n', 804) = 0x00f09805
[0x4022d1] memchr("\t  link = link->llink;\n\telse\n\t  "..., '\n', 772) = 0x00f0981c
[0x4022d1] memchr("\telse\n\t  link = link->rlink;\n   "..., '\n', 749) = 0x00f09822
[0x4022d1] memchr("\t  link = link->rlink;\n      if "..., '\n', 743) = 0x00f09839
[0x4022d1] memchr("      if (link)\n\t{\n\t  tree->trie"..., '\n', 720) = 0x00f09849
[0x4022d1] memchr("\t{\n\t  tree->trie->fail = link->t"..., '\n', 704) = 0x00f0984c
[0x4022d1] memchr("\t  tree->trie->fail = link->trie"..., '\n', 701) = 0x00f0986e
[0x4022d1] memchr("\t  return;\n\t}\n      fail = fail-"..., '\n', 667) = 0x00f09879
[0x4022d1] memchr("\t}\n      fail = fail->fail;\n    "..., '\n', 656) = 0x00f0987c
[0x4022d1] memchr("      fail = fail->fail;\n    }\n\n"..., '\n', 653) = 0x00f09895
[0x4022d1] memchr("    }\n\n  tree->trie->fail = reco"..., '\n', 628) = 0x00f0989b
[0x4022d1] memchr("\n  tree->trie->fail = recourse;\n"..., '\n', 622) = 0x00f0989c
[0x4022d1] memchr("  tree->trie->fail = recourse;\n}"..., '\n', 621) = 0x00f098bb
[0x4022d1] memchr("}\n\n/* Set delta entries for the "..., '\n', 590) = 0x00f098bd
[0x4022d1] memchr("\n/* Set delta entries for the li"..., '\n', 588) = 0x00f098be
[0x4022d1] memchr("/* Set delta entries for the lin"..., '\n', 587) = 0x00f098fd
[0x4022d1] memchr("   the preexisting delta value i"..., '\n', 524) = 0x00f09941
[0x4022d1] memchr("static void\ntreedelta(tree, dept"..., '\n', 456) = 0x00f0994d
[0x4022d1] memchr("treedelta(tree, depth, delta)\n  "..., '\n', 444) = 0x00f0996b
[0x4022d1] memchr("     register struct tree *tree;"..., '\n', 414) = 0x00f0998c
[0x4022d1] memchr("     register unsigned int depth"..., '\n', 381) = 0x00f099ae
[0x4022d1] memchr("     unsigned char delta[];\n{\n  "..., '\n', 347) = 0x00f099ca
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  tre"..., '\n', 319) = 0x00f099cc
[0x4022d1] memchr("  if (!tree)\n    return;\n  treed"..., '\n', 317) = 0x00f099d9
[0x4022d1] memchr("    return;\n  treedelta(tree->ll"..., '\n', 304) = 0x00f099e5
[0x4022d1] memchr("  treedelta(tree->llink, depth, "..., '\n', 292) = 0x00f09a0d
[0x4022d1] memchr("  treedelta(tree->rlink, depth, "..., '\n', 252) = 0x00f09a35
[0x4022d1] memchr("  if (depth < delta[tree->label]"..., '\n', 212) = 0x00f09a57
[0x4022d1] memchr("    delta[tree->label] = depth;\n"..., '\n', 178) = 0x00f09a77
[0x4022d1] memchr("}\n\n/* Return true if A has every"..., '\n', 146) = 0x00f09a79
[0x4022d1] memchr("\n/* Return true if A has every l"..., '\n', 144) = 0x00f09a7a
[0x4022d1] memchr("/* Return true if A has every la"..., '\n', 143) = 0x00f09aa7
[0x4022d1] memchr("static int\nhasevery(a, b)\n     r"..., '\n', 98) = 0x00f09ab2
[0x4022d1] memchr("hasevery(a, b)\n     register str"..., '\n', 87) = 0x00f09ac1
[0x4022d1] memchr("     register struct tree *a;\n  "..., '\n', 72) = 0x00f09adf
[0x4022d1] memchr("     register struct tree *b;\n{\n"..., '\n', 42) = 0x00f09afd
[0x4022d1] memchr("{\n  if (!b)\n    return 1;\n  if ("..., '\n', 12) = 0x00f09aff
[0x4022d1] memchr("  if (!b)\n    return 1;\n  if (!h"..., '\n', 10) = 0x00f09b09
[0x4022d1] memchr("    return 1;\n  if (!hasevery(a,"..., '\n', 0) = NULL
[0x4023cc] fwrite("9535:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    return 1;\n  if (!hasevery(a,"..., 1, 14, 0x7fce6d444260) = 14
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (!hasevery(a, b->llink))\n  "..., '1', 17577) = 0x00f0a086
[0x40cdf3] memchr("1 && kwset->trans == 0)\n    {\n  "..., '\n', 16187) = 0x00f0a09d
[0x4022d1] memchr("  if (!hasevery(a, b->llink))\n  "..., '\n', 1368) = 0x00f09b35
[0x4022d1] memchr("    return 0;\n  if (!hasevery(a,"..., '\n', 1338) = 0x00f09b43
[0x4022d1] memchr("  if (!hasevery(a, b->rlink))\n  "..., '\n', 1324) = 0x00f09b61
[0x4022d1] memchr("    return 0;\n  while (a && b->l"..., '\n', 1294) = 0x00f09b6f
[0x4022d1] memchr("  while (a && b->label != a->lab"..., '\n', 1280) = 0x00f09b93
[0x4022d1] memchr("    if (b->label < a->label)\n   "..., '\n', 1244) = 0x00f09bb0
[0x4022d1] memchr("      a = a->llink;\n    else\n   "..., '\n', 1215) = 0x00f09bc4
[0x4022d1] memchr("    else\n      a = a->rlink;\n  r"..., '\n', 1195) = 0x00f09bcd
[0x4022d1] memchr("      a = a->rlink;\n  return !!a"..., '\n', 1186) = 0x00f09be1
[0x4022d1] memchr("  return !!a;\n}\n\n/* Compute a ve"..., '\n', 1166) = 0x00f09bef
[0x4022d1] memchr("}\n\n/* Compute a vector, indexed "..., '\n', 1152) = 0x00f09bf1
[0x4022d1] memchr("\n/* Compute a vector, indexed by"..., '\n', 1150) = 0x00f09bf2
[0x4022d1] memchr("/* Compute a vector, indexed by "..., '\n', 1149) = 0x00f09c34
[0x4022d1] memchr("   referenced from the given tre"..., '\n', 1083) = 0x00f09c5a
[0x4022d1] memchr("static void\ntreenext(tree, next)"..., '\n', 1045) = 0x00f09c66
[0x4022d1] memchr("treenext(tree, next)\n     struct"..., '\n', 1033) = 0x00f09c7b
[0x4022d1] memchr("     struct tree *tree;\n     str"..., '\n', 1012) = 0x00f09c93
[0x4022d1] memchr("     struct trie *next[];\n{\n  if"..., '\n', 988) = 0x00f09cad
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  tre"..., '\n', 962) = 0x00f09caf
[0x4022d1] memchr("  if (!tree)\n    return;\n  treen"..., '\n', 960) = 0x00f09cbc
[0x4022d1] memchr("    return;\n  treenext(tree->lli"..., '\n', 947) = 0x00f09cc8
[0x4022d1] memchr("  treenext(tree->llink, next);\n "..., '\n', 935) = 0x00f09ce7
[0x4022d1] memchr("  treenext(tree->rlink, next);\n "..., '\n', 904) = 0x00f09d06
[0x4022d1] memchr("  next[tree->label] = tree->trie"..., '\n', 873) = 0x00f09d28
[0x4022d1] memchr("}\n\n/* Compute the shift for each"..., '\n', 839) = 0x00f09d2a
[0x4022d1] memchr("\n/* Compute the shift for each t"..., '\n', 837) = 0x00f09d2b
[0x4022d1] memchr("/* Compute the shift for each tr"..., '\n', 836) = 0x00f09d69
[0x4022d1] memchr("   table and next cache for the "..., '\n', 774) = 0x00f09d9f
[0x4022d1] memchr("char *\nkwsprep(kws)\n     kwset_t"..., '\n', 720) = 0x00f09da6
[0x4022d1] memchr("kwsprep(kws)\n     kwset_t kws;\n{"..., '\n', 713) = 0x00f09db3
[0x4022d1] memchr("     kwset_t kws;\n{\n  register s"..., '\n', 700) = 0x00f09dc5
[0x4022d1] memchr("{\n  register struct kwset *kwset"..., '\n', 682) = 0x00f09dc7
[0x4022d1] memchr("  register struct kwset *kwset;\n"..., '\n', 680) = 0x00f09de7
[0x4022d1] memchr("  register int i;\n  register str"..., '\n', 648) = 0x00f09df9
[0x4022d1] memchr("  register struct trie *curr, *f"..., '\n', 630) = 0x00f09e1e
[0x4022d1] memchr("  register char *trans;\n  unsign"..., '\n', 593) = 0x00f09e36
[0x4022d1] memchr("  unsigned char delta[NCHAR];\n  "..., '\n', 569) = 0x00f09e54
[0x4022d1] memchr("  struct trie *last, *next[NCHAR"..., '\n', 539) = 0x00f09e77
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 504) = 0x00f09e78
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 503) = 0x00f09e98
[0x4022d1] memchr("\n  /* Initial values for the del"..., '\n', 471) = 0x00f09e99
[0x4022d1] memchr("  /* Initial values for the delt"..., '\n', 470) = 0x00f09ede
[0x4022d1] memchr("     delta entry for a given cha"..., '\n', 401) = 0x00f09f22
[0x4022d1] memchr("     node at which an outgoing e"..., '\n', 333) = 0x00f09f67
[0x4022d1] memchr("  if (kwset->mind < 256)\n    for"..., '\n', 264) = 0x00f09f80
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 239) = 0x00f09fa0
[0x4022d1] memchr("      delta[i] = kwset->mind;\n  "..., '\n', 207) = 0x00f09fbe
[0x4022d1] memchr("  else\n    for (i = 0; i < NCHAR"..., '\n', 177) = 0x00f09fc5
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 170) = 0x00f09fe5
[0x4022d1] memchr("      delta[i] = 255;\n\n  /* Chec"..., '\n', 138) = 0x00f09ffb
[0x4022d1] memchr("\n  /* Check if we can use the si"..., '\n', 116) = 0x00f09ffc
[0x4022d1] memchr("  /* Check if we can use the sim"..., '\n', 115) = 0x00f0a03f
[0x4022d1] memchr("     of the hairy commentz-walte"..., '\n', 48) = 0x00f0a06f
[0x4022d1] memchr("  if (kwset->words == 1 && kwset"..., '\n', 0) = NULL
[0x4023cc] fwrite("9589:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (kwset->words == 1 && kwset"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      /* Looking for just "..., '1', 16163) = 0x00f0a148
[0x40cdf3] memchr("1, curr = kwset->trie; i >= 0; -"..., '\n', 15993) = 0x00f0a16b
[0x4022d1] memchr("    {\n      /* Looking for just "..., '\n', 141) = 0x00f0a0a3
[0x4022d1] memchr("      /* Looking for just one st"..., '\n', 135) = 0x00f0a0e7
[0x4022d1] memchr("      kwset->target = obstack_al"..., '\n', 67) = 0x00f0a12a
[0x4022d1] memchr("      for (i = kwset->mind - 1, "..., '\n', 0) = NULL
[0x4023cc] fwrite("9593:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      for (i = kwset->mind - 1, "..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  kwset->target[i] = curr->l"..., '1', 15957) = 0x00f0a269
[0x40cdf3] memchr("1);\n      kwset->mind2 = kwset->"..., '\n', 15704) = 0x00f0a26c
[0x4022d1] memchr("\t{\n\t  kwset->target[i] = curr->l"..., '\n', 191) = 0x00f0a16e
[0x4022d1] memchr("\t  kwset->target[i] = curr->link"..., '\n', 188) = 0x00f0a198
[0x4022d1] memchr("\t  curr = curr->links->trie;\n\t}\n"..., '\n', 146) = 0x00f0a1b5
[0x4022d1] memchr("\t}\n      /* Build the Boyer Moor"..., '\n', 117) = 0x00f0a1b8
[0x4022d1] memchr("      /* Build the Boyer Moore d"..., '\n', 114) = 0x00f0a202
[0x4022d1] memchr("      for (i = 0; i < kwset->min"..., '\n', 40) = 0x00f0a22a
[0x4022d1] memchr("\tdelta[(unsigned char) kwset->ta"..., '\n', 0) = NULL
[0x4023cc] fwrite("9600:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tdelta[(unsigned char) kwset->ta"..., 1, 66, 0x7fce6d444260) = 66
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      kwset->mind2 = kwset->mind"..., '1', 15700) = 0x00f0a316
[0x40cdf3] memchr("1; ++i)\n\tif (kwset->target[i] =="..., '\n', 15531) = 0x00f0a31d
[0x4022d1] memchr("      kwset->mind2 = kwset->mind"..., '\n', 133) = 0x00f0a28e
[0x4022d1] memchr("      /* Find the minimal delta2"..., '\n', 99) = 0x00f0a2ce
[0x4022d1] memchr("\t a backwards match has failed. "..., '\n', 35) = 0x00f0a2f1
[0x4022d1] memchr("      for (i = 0; i < kwset->min"..., '\n', 0) = NULL
[0x4023cc] fwrite("9604:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      for (i = 0; i < kwset->min"..., 1, 44, 0x7fce6d444260) = 44
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tif (kwset->target[i] == kwset->"..., '1', 15523) = 0x00f0a353
[0x40cdf3] memchr("1])\n\t  kwset->mind2 = kwset->min"..., '\n', 15470) = 0x00f0a356
[0x4022d1] memchr("\tif (kwset->target[i] == kwset->"..., '\n', 0) = NULL
[0x4023cc] fwrite("9605:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\tif (kwset->target[i] == kwset->"..., 1, 57, 0x7fce6d444260) = 57
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  kwset->mind2 = kwset->mind - "..., '1', 15466) = 0x00f0a37c
[0x40cdf3] memchr("1);\n    }\n  else\n    {\n      /* "..., '\n', 15429) = 0x00f0a37f
[0x4022d1] memchr("\t  kwset->mind2 = kwset->mind - "..., '\n', 0) = NULL
[0x4023cc] fwrite("9606:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  kwset->mind2 = kwset->mind - "..., 1, 41, 0x7fce6d444260) = 41
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  else\n    {\n      /* Trav"..., '1', 15425) = 0x00f0ada9
[0x40cdf3] memchr("1;\n  register char *ep, *sp, *tp"..., '\n', 12824) = 0x00f0adab
[0x4022d1] memchr("    }\n  else\n    {\n      /* Trav"..., '\n', 2574) = 0x00f0a385
[0x4022d1] memchr("  else\n    {\n      /* Traverse t"..., '\n', 2568) = 0x00f0a38c
[0x4022d1] memchr("    {\n      /* Traverse the node"..., '\n', 2561) = 0x00f0a392
[0x4022d1] memchr("      /* Traverse the nodes of t"..., '\n', 2555) = 0x00f0a3d9
[0x4022d1] memchr("\t computing the delta table, fai"..., '\n', 2484) = 0x00f0a41f
[0x4022d1] memchr("      for (curr = last = kwset->"..., '\n', 2414) = 0x00f0a45e
[0x4022d1] memchr("\t{\n\t  /* Enqueue the immediate d"..., '\n', 2351) = 0x00f0a461
[0x4022d1] memchr("\t  /* Enqueue the immediate desc"..., '\n', 2348) = 0x00f0a4a6
[0x4022d1] memchr("\t  enqueue(curr->links, &last);\n"..., '\n', 2279) = 0x00f0a4c6
[0x4022d1] memchr("\n\t  curr->shift = kwset->mind;\n\t"..., '\n', 2247) = 0x00f0a4c7
[0x4022d1] memchr("\t  curr->shift = kwset->mind;\n\t "..., '\n', 2246) = 0x00f0a4e5
[0x4022d1] memchr("\t  curr->maxshift = kwset->mind;"..., '\n', 2216) = 0x00f0a506
[0x4022d1] memchr("\n\t  /* Update the delta table fo"..., '\n', 2183) = 0x00f0a507
[0x4022d1] memchr("\t  /* Update the delta table for"..., '\n', 2182) = 0x00f0a549
[0x4022d1] memchr("\t  treedelta(curr->links, curr->"..., '\n', 2116) = 0x00f0a578
[0x4022d1] memchr("\n\t  /* Compute the failure funct"..., '\n', 2069) = 0x00f0a579
[0x4022d1] memchr("\t  /* Compute the failure functi"..., '\n', 2068) = 0x00f0a5c0
[0x4022d1] memchr("\t  treefails(curr->links, curr->"..., '\n', 1997) = 0x00f0a5f4
[0x4022d1] memchr("\n\t  /* Update the shifts at each"..., '\n', 1945) = 0x00f0a5f5
[0x4022d1] memchr("\t  /* Update the shifts at each "..., '\n', 1944) = 0x00f0a636
[0x4022d1] memchr("\t     of fails back to the root."..., '\n', 1879) = 0x00f0a65a
[0x4022d1] memchr("\t  for (fail = curr->fail; fail;"..., '\n', 1843) = 0x00f0a68e
[0x4022d1] memchr("\t    {\n\t      /* If the current "..., '\n', 1791) = 0x00f0a695
[0x4022d1] memchr("\t      /* If the current node ha"..., '\n', 1784) = 0x00f0a6d8
[0x4022d1] memchr("\t\t doesn't, then the shift at th"..., '\n', 1717) = 0x00f0a713
[0x4022d1] memchr("\t\t than the difference of their "..., '\n', 1658) = 0x00f0a73e
[0x4022d1] memchr("\t      if (!hasevery(fail->links"..., '\n', 1615) = 0x00f0a76e
[0x4022d1] memchr("\t\tif (curr->depth - fail->depth "..., '\n', 1567) = 0x00f0a79d
[0x4022d1] memchr("\t\t  fail->shift = curr->depth - "..., '\n', 1520) = 0x00f0a7ca
[0x4022d1] memchr("\n\t      /* If the current node i"..., '\n', 1475) = 0x00f0a7cb
[0x4022d1] memchr("\t      /* If the current node is"..., '\n', 1474) = 0x00f0a80c
[0x4022d1] memchr("\t\t fail and its descendents shou"..., '\n', 1409) = 0x00f0a845
[0x4022d1] memchr("\t\t difference of their depths. *"..., '\n', 1352) = 0x00f0a867
[0x4022d1] memchr("\t      if (curr->accepting && fa"..., '\n', 1318) = 0x00f0a8b1
[0x4022d1] memchr("\t\tfail->maxshift = curr->depth -"..., '\n', 1244) = 0x00f0a8df
[0x4022d1] memchr("\t    }\n\t}\n\n      /* Traverse the"..., '\n', 1198) = 0x00f0a8e6
[0x4022d1] memchr("\t}\n\n      /* Traverse the trie i"..., '\n', 1191) = 0x00f0a8e9
[0x4022d1] memchr("\n      /* Traverse the trie in l"..., '\n', 1188) = 0x00f0a8ea
[0x4022d1] memchr("      /* Traverse the trie in le"..., '\n', 1187) = 0x00f0a935
[0x4022d1] memchr("\t shift exceeds their inherited "..., '\n', 1112) = 0x00f0a962
[0x4022d1] memchr("      for (curr = kwset->trie->n"..., '\n', 1067) = 0x00f0a9a0
[0x4022d1] memchr("\t{\n\t  if (curr->maxshift > curr-"..., '\n', 1005) = 0x00f0a9a3
[0x4022d1] memchr("\t  if (curr->maxshift > curr->pa"..., '\n', 1002) = 0x00f0a9d3
[0x4022d1] memchr("\t    curr->maxshift = curr->pare"..., '\n', 954) = 0x00f0aa01
[0x4022d1] memchr("\t  if (curr->shift > curr->maxsh"..., '\n', 908) = 0x00f0aa26
[0x4022d1] memchr("\t    curr->shift = curr->maxshif"..., '\n', 871) = 0x00f0aa49
[0x4022d1] memchr("\t}\n\n      /* Create a vector, in"..., '\n', 836) = 0x00f0aa4c
[0x4022d1] memchr("\n      /* Create a vector, index"..., '\n', 833) = 0x00f0aa4d
[0x4022d1] memchr("      /* Create a vector, indexe"..., '\n', 832) = 0x00f0aa98
[0x4022d1] memchr("\t from the root node. */\n      f"..., '\n', 757) = 0x00f0aab1
[0x4022d1] memchr("      for (i = 0; i < NCHAR; ++i"..., '\n', 732) = 0x00f0aad3
[0x4022d1] memchr("\tnext[i] = 0;\n      treenext(kws"..., '\n', 698) = 0x00f0aae1
[0x4022d1] memchr("      treenext(kwset->trie->link"..., '\n', 684) = 0x00f0ab0b
[0x4022d1] memchr("\n      if ((trans = kwset->trans"..., '\n', 642) = 0x00f0ab0c
[0x4022d1] memchr("      if ((trans = kwset->trans)"..., '\n', 641) = 0x00f0ab33
[0x4022d1] memchr("\tfor (i = 0; i < NCHAR; ++i)\n\t  "..., '\n', 602) = 0x00f0ab50
[0x4022d1] memchr("\t  kwset->next[i] = next[(unsign"..., '\n', 573) = 0x00f0ab84
[0x4022d1] memchr("      else\n\tfor (i = 0; i < NCHA"..., '\n', 521) = 0x00f0ab8f
[0x4022d1] memchr("\tfor (i = 0; i < NCHAR; ++i)\n\t  "..., '\n', 510) = 0x00f0abac
[0x4022d1] memchr("\t  kwset->next[i] = next[i];\n   "..., '\n', 481) = 0x00f0abc9
[0x4022d1] memchr("    }\n\n  /* Fix things up for an"..., '\n', 452) = 0x00f0abcf
[0x4022d1] memchr("\n  /* Fix things up for any tran"..., '\n', 446) = 0x00f0abd0
[0x4022d1] memchr("  /* Fix things up for any trans"..., '\n', 445) = 0x00f0ac01
[0x4022d1] memchr("  if ((trans = kwset->trans) != "..., '\n', 396) = 0x00f0ac24
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 361) = 0x00f0ac44
[0x4022d1] memchr("      kwset->delta[i] = delta[(u"..., '\n', 329) = 0x00f0ac7d
[0x4022d1] memchr("  else\n    for (i = 0; i < NCHAR"..., '\n', 272) = 0x00f0ac84
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 265) = 0x00f0aca4
[0x4022d1] memchr("      kwset->delta[i] = delta[i]"..., '\n', 233) = 0x00f0acc6
[0x4022d1] memchr("\n  return 0;\n}\n\n#define U(C) ((u"..., '\n', 199) = 0x00f0acc7
[0x4022d1] memchr("  return 0;\n}\n\n#define U(C) ((un"..., '\n', 198) = 0x00f0acd3
[0x4022d1] memchr("}\n\n#define U(C) ((unsigned char)"..., '\n', 186) = 0x00f0acd5
[0x4022d1] memchr("\n#define U(C) ((unsigned char) ("..., '\n', 184) = 0x00f0acd6
[0x4022d1] memchr("#define U(C) ((unsigned char) (C"..., '\n', 183) = 0x00f0acf9
[0x4022d1] memchr("\n/* Fast boyer-moore search. */\n"..., '\n', 148) = 0x00f0acfa
[0x4022d1] memchr("/* Fast boyer-moore search. */\ns"..., '\n', 147) = 0x00f0ad19
[0x4022d1] memchr("static char *\nbmexec(kws, text, "..., '\n', 116) = 0x00f0ad27
[0x4022d1] memchr("bmexec(kws, text, size)\n     kws"..., '\n', 102) = 0x00f0ad3f
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 78) = 0x00f0ad51
[0x4022d1] memchr("     char *text;\n     size_t siz"..., '\n', 60) = 0x00f0ad62
[0x4022d1] memchr("     size_t size;\n{\n  struct kws"..., '\n', 43) = 0x00f0ad74
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  regis"..., '\n', 25) = 0x00f0ad76
[0x4022d1] memchr("  struct kwset *kwset;\n  registe"..., '\n', 23) = 0x00f0ad8d
[0x4022d1] memchr("  register unsigned char *d1;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("9690:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  register unsigned char *d1;\n  "..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  register char *ep, *sp, *tp;\n "..., '1', 12821) = 0x00f0ae73
[0x40cdf3] memchr("1)\n    return memchr(text, kwset"..., '\n', 12622) = 0x00f0ae75
[0x4022d1] memchr("  register char *ep, *sp, *tp;\n "..., '\n', 186) = 0x00f0adca
[0x4022d1] memchr("  register int d, gc, i, len, md"..., '\n', 155) = 0x00f0aded
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 120) = 0x00f0adee
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 119) = 0x00f0ae0e
[0x4022d1] memchr("  len = kwset->mind;\n\n  if (len "..., '\n', 87) = 0x00f0ae23
[0x4022d1] memchr("\n  if (len == 0)\n    return text"..., '\n', 66) = 0x00f0ae24
[0x4022d1] memchr("  if (len == 0)\n    return text;"..., '\n', 65) = 0x00f0ae34
[0x4022d1] memchr("    return text;\n  if (len > siz"..., '\n', 49) = 0x00f0ae45
[0x4022d1] memchr("  if (len > size)\n    return 0;\n"..., '\n', 32) = 0x00f0ae57
[0x4022d1] memchr("    return 0;\n  if (len == 1)\n  "..., '\n', 14) = 0x00f0ae65
[0x4022d1] memchr("  if (len == 1)\n    return memch"..., '\n', 0) = NULL
[0x4023cc] fwrite("9701:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (len == 1)\n    return memch"..., 1, 16, 0x7fce6d444260) = 16
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    return memchr(text, kwset->t"..., '1', 12619) = 0x00f0aeab
[0x40cdf3] memchr("1 = kwset->delta;\n  sp = kwset->"..., '\n', 12566) = 0x00f0aebc
[0x4022d1] memchr("    return memchr(text, kwset->t"..., '\n', 50) = 0x00f0aea6
[0x4022d1] memchr("\n  d1 = kwset->delta;\n  sp = kws"..., '\n', 1) = 0x00f0aea7
[0x4022d1] memchr("  d1 = kwset->delta;\n  sp = kwse"..., '\n', 0) = NULL
[0x4023cc] fwrite("9704:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d1 = kwset->delta;\n  sp = kwse"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  sp = kwset->target + len;\n  gc"..., '1', 12548) = 0x00f0af2a
[0x40cdf3] memchr("12: 1 (initial offset) + 10 (ski"..., '\n', 12439) = 0x00f0af5f
[0x4022d1] memchr("  sp = kwset->target + len;\n  gc"..., '\n', 88) = 0x00f0aed8
[0x4022d1] memchr("  gc = U(sp[-2]);\n  md2 = kwset-"..., '\n', 60) = 0x00f0aeea
[0x4022d1] memchr("  md2 = kwset->mind2;\n  tp = tex"..., '\n', 42) = 0x00f0af00
[0x4022d1] memchr("  tp = text + len;\n\n  /* Signifi"..., '\n', 20) = 0x00f0af13
[0x4022d1] memchr("\n  /* Significance of 12: 1 (ini"..., '\n', 1) = 0x00f0af14
[0x4022d1] memchr("  /* Significance of 12: 1 (init"..., '\n', 0) = NULL
[0x4023cc] fwrite("9710:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  /* Significance of 12: 1 (init"..., 1, 75, 0x7fce6d444260) = 75
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (size > 12 * len)\n    /* 11"..., '1', 12385) = 0x00f0af6d
[0x40cdf3] memchr("12 * len)\n    /* 11 is not a bug"..., '\n', 12372) = 0x00f0af76
[0x4022d1] memchr("  if (size > 12 * len)\n    /* 11"..., '\n', 0) = NULL
[0x4023cc] fwrite("9711:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (size > 12 * len)\n    /* 11"..., 1, 23, 0x7fce6d444260) = 23
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    /* 11 is not a bug, the init"..., '1', 12362) = 0x00f0af7e
[0x40cdf3] memchr("11 is not a bug, the initial off"..., '\n', 12355) = 0x00f0afb7
[0x4022d1] memchr("    /* 11 is not a bug, the init"..., '\n', 0) = NULL
[0x4023cc] fwrite("9712:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    /* 11 is not a bug, the init"..., 1, 65, 0x7fce6d444260) = 65
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    for (ep = text + size - 11 *"..., '1', 12297) = 0x00f0afd4
[0x40cdf3] memchr("11 * len;;)\n      {\n\twhile (tp <"..., '\n', 12269) = 0x00f0afdf
[0x4022d1] memchr("    for (ep = text + size - 11 *"..., '\n', 0) = NULL
[0x4023cc] fwrite("9713:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("    for (ep = text + size - 11 *"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      {\n\twhile (tp <= ep)\n\t  {\n\t"..., '1', 12257) = 0x00f0b009
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 12216) = 0x00f0b01f
[0x4022d1] memchr("      {\n\twhile (tp <= ep)\n\t  {\n\t"..., '\n', 31) = 0x00f0afe7
[0x4022d1] memchr("\twhile (tp <= ep)\n\t  {\n\t    d = "..., '\n', 23) = 0x00f0aff9
[0x4022d1] memchr("\t  {\n\t    d = d1[U(tp[-1])], tp "..., '\n', 5) = 0x00f0affe
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9717:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 12193) = 0x00f0b02a
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    if ("..., '\n', 12183) = 0x00f0b040
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9718:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (d == 0)\n\t      goto fou"..., '1', 12160) = 0x00f0b06f
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 12114) = 0x00f0b085
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 36) = 0x00f0b051
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 19) = 0x00f0b064
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9721:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 12091) = 0x00f0b090
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 12081) = 0x00f0b0a6
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9722:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 12058) = 0x00f0b0b1
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    if ("..., '\n', 12048) = 0x00f0b0c7
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9723:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (d == 0)\n\t      goto fou"..., '1', 12025) = 0x00f0b0f6
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 11979) = 0x00f0b10c
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 36) = 0x00f0b0d8
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 19) = 0x00f0b0eb
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9726:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 11956) = 0x00f0b117
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 11946) = 0x00f0b12d
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9727:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 11923) = 0x00f0b138
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    if ("..., '\n', 11913) = 0x00f0b14e
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9728:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    if (d == 0)\n\t      goto fou"..., '1', 11890) = 0x00f0b17d
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t    d = "..., '\n', 11844) = 0x00f0b193
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 36) = 0x00f0b15f
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 19) = 0x00f0b172
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9731:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '1', 11821) = 0x00f0b19e
[0x40cdf3] memchr("1[U(tp[-1])], tp += d;\n\t  }\n\tbre"..., '\n', 11811) = 0x00f0b1b4
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 0) = NULL
[0x4023cc] fwrite("9732:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t    d = d1[U(tp[-1])], tp += d;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  }\n\tbreak;\n      found:\n\tif (U"..., '1', 11788) = 0x00f0b308
[0x40cdf3] memchr("1[U(tp[-1])];\n  while (d <= ep -"..., '\n', 11449) = 0x00f0b315
[0x4022d1] memchr("\t  }\n\tbreak;\n      found:\n\tif (U"..., '\n', 332) = 0x00f0b1b9
[0x4022d1] memchr("\tbreak;\n      found:\n\tif (U(tp[-"..., '\n', 327) = 0x00f0b1c1
[0x4022d1] memchr("      found:\n\tif (U(tp[-2]) == g"..., '\n', 319) = 0x00f0b1ce
[0x4022d1] memchr("\tif (U(tp[-2]) == gc)\n\t  {\n\t    "..., '\n', 306) = 0x00f0b1e4
[0x4022d1] memchr("\t  {\n\t    for (i = 3; i <= len &"..., '\n', 284) = 0x00f0b1e9
[0x4022d1] memchr("\t    for (i = 3; i <= len && U(t"..., '\n', 279) = 0x00f0b223
[0x4022d1] memchr("\t      ;\n\t    if (i > len)\n\t    "..., '\n', 221) = 0x00f0b22c
[0x4022d1] memchr("\t    if (i > len)\n\t      return "..., '\n', 212) = 0x00f0b23e
[0x4022d1] memchr("\t      return tp - len;\n\t  }\n\ttp"..., '\n', 194) = 0x00f0b256
[0x4022d1] memchr("\t  }\n\ttp += md2;\n      }\n\n  /* N"..., '\n', 170) = 0x00f0b25b
[0x4022d1] memchr("\ttp += md2;\n      }\n\n  /* Now we"..., '\n', 165) = 0x00f0b267
[0x4022d1] memchr("      }\n\n  /* Now we have only a"..., '\n', 153) = 0x00f0b26f
[0x4022d1] memchr("\n  /* Now we have only a few cha"..., '\n', 145) = 0x00f0b270
[0x4022d1] memchr("  /* Now we have only a few char"..., '\n', 144) = 0x00f0b2ab
[0x4022d1] memchr("     carefully avoid ever produc"..., '\n', 85) = 0x00f0b2ec
[0x4022d1] memchr("  ep = text + size;\n  d = d1[U(t"..., '\n', 20) = 0x00f0b300
[0x4022d1] memchr("  d = d1[U(tp[-1])];\n  while (d "..., '\n', 0) = NULL
[0x4023cc] fwrite("9749:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d = d1[U(tp[-1])];\n  while (d "..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  while (d <= ep - tp)\n    {\n   "..., '1', 11435) = 0x00f0b33e
[0x40cdf3] memchr("1[U((tp += d)[-1])];\n      if (d"..., '\n', 11395) = 0x00f0b352
[0x4022d1] memchr("  while (d <= ep - tp)\n    {\n   "..., '\n', 29) = 0x00f0b32c
[0x4022d1] memchr("    {\n      d = d1[U((tp += d)[-"..., '\n', 6) = 0x00f0b332
[0x4022d1] memchr("      d = d1[U((tp += d)[-1])];\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("9752:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      d = d1[U((tp += d)[-1])];\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (d != 0)\n\tcontinue;\n   "..., '1', 11374) = 0x00f0b7b4
[0x40cdf3] memchr("1;\n\t  while ((d = delta[c = *end"..., '\n', 10253) = 0x00f0b7b6
[0x4022d1] memchr("      if (d != 0)\n\tcontinue;\n   "..., '\n', 1107) = 0x00f0b364
[0x4022d1] memchr("\tcontinue;\n      if (tp[-2] == g"..., '\n', 1089) = 0x00f0b36f
[0x4022d1] memchr("      if (tp[-2] == gc)\n\t{\n\t  fo"..., '\n', 1078) = 0x00f0b387
[0x4022d1] memchr("\t{\n\t  for (i = 3; i <= len && U("..., '\n', 1054) = 0x00f0b38a
[0x4022d1] memchr("\t  for (i = 3; i <= len && U(tp["..., '\n', 1051) = 0x00f0b3c2
[0x4022d1] memchr("\t    ;\n\t  if (i > len)\n\t    retu"..., '\n', 995) = 0x00f0b3c9
[0x4022d1] memchr("\t  if (i > len)\n\t    return tp -"..., '\n', 988) = 0x00f0b3d9
[0x4022d1] memchr("\t    return tp - len;\n\t}\n      d"..., '\n', 972) = 0x00f0b3ef
[0x4022d1] memchr("\t}\n      d = md2;\n    }\n\n  retur"..., '\n', 950) = 0x00f0b3f2
[0x4022d1] memchr("      d = md2;\n    }\n\n  return 0"..., '\n', 947) = 0x00f0b401
[0x4022d1] memchr("    }\n\n  return 0;\n}\n\n/* Hairy m"..., '\n', 932) = 0x00f0b407
[0x4022d1] memchr("\n  return 0;\n}\n\n/* Hairy multipl"..., '\n', 926) = 0x00f0b408
[0x4022d1] memchr("  return 0;\n}\n\n/* Hairy multiple"..., '\n', 925) = 0x00f0b414
[0x4022d1] memchr("}\n\n/* Hairy multiple string sear"..., '\n', 913) = 0x00f0b416
[0x4022d1] memchr("\n/* Hairy multiple string search"..., '\n', 911) = 0x00f0b417
[0x4022d1] memchr("/* Hairy multiple string search."..., '\n', 910) = 0x00f0b43b
[0x4022d1] memchr("static char *\ncwexec(kws, text, "..., '\n', 874) = 0x00f0b449
[0x4022d1] memchr("cwexec(kws, text, len, kwsmatch)"..., '\n', 860) = 0x00f0b46a
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 827) = 0x00f0b47c
[0x4022d1] memchr("     char *text;\n     size_t len"..., '\n', 809) = 0x00f0b48d
[0x4022d1] memchr("     size_t len;\n     struct kws"..., '\n', 792) = 0x00f0b49e
[0x4022d1] memchr("     struct kwsmatch *kwsmatch;\n"..., '\n', 775) = 0x00f0b4be
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  struc"..., '\n', 743) = 0x00f0b4c0
[0x4022d1] memchr("  struct kwset *kwset;\n  struct "..., '\n', 741) = 0x00f0b4d7
[0x4022d1] memchr("  struct trie **next, *trie, *ac"..., '\n', 718) = 0x00f0b4fd
[0x4022d1] memchr("  char *beg, *lim, *mch, *lmch;\n"..., '\n', 680) = 0x00f0b51d
[0x4022d1] memchr("  register unsigned char c, *del"..., '\n', 648) = 0x00f0b541
[0x4022d1] memchr("  register int d;\n  register cha"..., '\n', 612) = 0x00f0b553
[0x4022d1] memchr("  register char *end, *qlim;\n  r"..., '\n', 594) = 0x00f0b570
[0x4022d1] memchr("  register struct tree *tree;\n  "..., '\n', 565) = 0x00f0b58e
[0x4022d1] memchr("  register char *trans;\n\n  /* In"..., '\n', 535) = 0x00f0b5a6
[0x4022d1] memchr("\n  /* Initialize register copies"..., '\n', 511) = 0x00f0b5a7
[0x4022d1] memchr("  /* Initialize register copies "..., '\n', 510) = 0x00f0b5e6
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 447) = 0x00f0b606
[0x4022d1] memchr("  if (len < kwset->mind)\n    ret"..., '\n', 415) = 0x00f0b61f
[0x4022d1] memchr("    return 0;\n  next = kwset->ne"..., '\n', 390) = 0x00f0b62d
[0x4022d1] memchr("  next = kwset->next;\n  delta = "..., '\n', 376) = 0x00f0b643
[0x4022d1] memchr("  delta = kwset->delta;\n  trans "..., '\n', 354) = 0x00f0b65b
[0x4022d1] memchr("  trans = kwset->trans;\n  lim = "..., '\n', 330) = 0x00f0b673
[0x4022d1] memchr("  lim = text + len;\n  end = text"..., '\n', 306) = 0x00f0b687
[0x4022d1] memchr("  end = text;\n  if ((d = kwset->"..., '\n', 286) = 0x00f0b695
[0x4022d1] memchr("  if ((d = kwset->mind) != 0)\n  "..., '\n', 272) = 0x00f0b6b3
[0x4022d1] memchr("    mch = 0;\n  else\n    {\n      "..., '\n', 242) = 0x00f0b6c0
[0x4022d1] memchr("  else\n    {\n      mch = text, a"..., '\n', 229) = 0x00f0b6c7
[0x4022d1] memchr("    {\n      mch = text, accept ="..., '\n', 222) = 0x00f0b6cd
[0x4022d1] memchr("      mch = text, accept = kwset"..., '\n', 216) = 0x00f0b6f5
[0x4022d1] memchr("      goto match;\n    }\n\n  if (l"..., '\n', 176) = 0x00f0b707
[0x4022d1] memchr("    }\n\n  if (len >= 4 * kwset->m"..., '\n', 158) = 0x00f0b70d
[0x4022d1] memchr("\n  if (len >= 4 * kwset->mind)\n "..., '\n', 152) = 0x00f0b70e
[0x4022d1] memchr("  if (len >= 4 * kwset->mind)\n  "..., '\n', 151) = 0x00f0b72c
[0x4022d1] memchr("    qlim = lim - 4 * kwset->mind"..., '\n', 121) = 0x00f0b74e
[0x4022d1] memchr("  else\n    qlim = 0;\n\n  while (l"..., '\n', 87) = 0x00f0b755
[0x4022d1] memchr("    qlim = 0;\n\n  while (lim - en"..., '\n', 80) = 0x00f0b763
[0x4022d1] memchr("\n  while (lim - end >= d)\n    {\n"..., '\n', 66) = 0x00f0b764
[0x4022d1] memchr("  while (lim - end >= d)\n    {\n "..., '\n', 65) = 0x00f0b77d
[0x4022d1] memchr("    {\n      if (qlim && end <= q"..., '\n', 40) = 0x00f0b783
[0x4022d1] memchr("      if (qlim && end <= qlim)\n\t"..., '\n', 34) = 0x00f0b7a2
[0x4022d1] memchr("\t{\n\t  end += d - 1;\n\t  while ((d"..., '\n', 3) = 0x00f0b7a5
[0x4022d1] memchr("\t  end += d - 1;\n\t  while ((d = "..., '\n', 0) = NULL
[0x4023cc] fwrite("9811:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  end += d - 1;\n\t  while ((d = "..., 1, 17, 0x7fce6d444260) = 17
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  while ((d = delta[c = *end]) "..., '1', 10250) = 0x00f0b88e
[0x40cdf3] memchr("1]];\n      if (d)\n\tcontinue;\n   "..., '\n', 10035) = 0x00f0b892
[0x4022d1] memchr("\t  while ((d = delta[c = *end]) "..., '\n', 188) = 0x00f0b7e5
[0x4022d1] memchr("\t    {\n\t      end += d;\n\t      e"..., '\n', 141) = 0x00f0b7ec
[0x4022d1] memchr("\t      end += d;\n\t      end += d"..., '\n', 134) = 0x00f0b7fd
[0x4022d1] memchr("\t      end += delta[(unsigned ch"..., '\n', 117) = 0x00f0b828
[0x4022d1] memchr("\t      end += delta[(unsigned ch"..., '\n', 74) = 0x00f0b853
[0x4022d1] memchr("\t    }\n\t  ++end;\n\t}\n      else\n\t"..., '\n', 31) = 0x00f0b85a
[0x4022d1] memchr("\t  ++end;\n\t}\n      else\n\td = del"..., '\n', 24) = 0x00f0b864
[0x4022d1] memchr("\t}\n      else\n\td = delta[c = (en"..., '\n', 14) = 0x00f0b867
[0x4022d1] memchr("      else\n\td = delta[c = (end +"..., '\n', 11) = 0x00f0b872
[0x4022d1] memchr("\td = delta[c = (end += d)[-1]];\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("9821:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\td = delta[c = (end += d)[-1]];\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (d)\n\tcontinue;\n      be"..., '1', 10030) = 0x00f0b8bd
[0x40cdf3] memchr("1;\n      trie = next[c];\n      i"..., '\n', 9988) = 0x00f0b8bf
[0x4022d1] memchr("      if (d)\n\tcontinue;\n      be"..., '\n', 24) = 0x00f0b89f
[0x4022d1] memchr("\tcontinue;\n      beg = end - 1;\n"..., '\n', 11) = 0x00f0b8aa
[0x4022d1] memchr("      beg = end - 1;\n      trie "..., '\n', 0) = NULL
[0x4023cc] fwrite("9824:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      beg = end - 1;\n      trie "..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      trie = next[c];\n      if ("..., '1', 9985) = 0x00f0bbf6
[0x40cdf3] memchr("1;\n  while (lim - end >= d)\n    "..., '\n', 9163) = 0x00f0bbf8
[0x4022d1] memchr("      trie = next[c];\n      if ("..., '\n', 816) = 0x00f0b8d5
[0x4022d1] memchr("      if (trie->accepting)\n\t{\n\t "..., '\n', 794) = 0x00f0b8f0
[0x4022d1] memchr("\t{\n\t  mch = beg;\n\t  accept = tri"..., '\n', 767) = 0x00f0b8f3
[0x4022d1] memchr("\t  mch = beg;\n\t  accept = trie;\n"..., '\n', 764) = 0x00f0b901
[0x4022d1] memchr("\t  accept = trie;\n\t}\n      d = t"..., '\n', 750) = 0x00f0b913
[0x4022d1] memchr("\t}\n      d = trie->shift;\n      "..., '\n', 732) = 0x00f0b916
[0x4022d1] memchr("      d = trie->shift;\n      whi"..., '\n', 729) = 0x00f0b92d
[0x4022d1] memchr("      while (beg > text)\n\t{\n\t  c"..., '\n', 706) = 0x00f0b946
[0x4022d1] memchr("\t{\n\t  c = trans ? trans[(unsigne"..., '\n', 681) = 0x00f0b949
[0x4022d1] memchr("\t  c = trans ? trans[(unsigned c"..., '\n', 678) = 0x00f0b980
[0x4022d1] memchr("\t  tree = trie->links;\n\t  while "..., '\n', 623) = 0x00f0b997
[0x4022d1] memchr("\t  while (tree && c != tree->lab"..., '\n', 600) = 0x00f0b9bb
[0x4022d1] memchr("\t    if (c < tree->label)\n\t     "..., '\n', 564) = 0x00f0b9d5
[0x4022d1] memchr("\t      tree = tree->llink;\n\t    "..., '\n', 538) = 0x00f0b9f0
[0x4022d1] memchr("\t    else\n\t      tree = tree->rl"..., '\n', 511) = 0x00f0b9fa
[0x4022d1] memchr("\t      tree = tree->rlink;\n\t  if"..., '\n', 501) = 0x00f0ba15
[0x4022d1] memchr("\t  if (tree)\n\t    {\n\t      trie "..., '\n', 474) = 0x00f0ba22
[0x4022d1] memchr("\t    {\n\t      trie = tree->trie;"..., '\n', 461) = 0x00f0ba29
[0x4022d1] memchr("\t      trie = tree->trie;\n\t     "..., '\n', 454) = 0x00f0ba43
[0x4022d1] memchr("\t      if (trie->accepting)\n\t\t{\n"..., '\n', 428) = 0x00f0ba5f
[0x4022d1] memchr("\t\t{\n\t\t  mch = beg;\n\t\t  accept = "..., '\n', 400) = 0x00f0ba63
[0x4022d1] memchr("\t\t  mch = beg;\n\t\t  accept = trie"..., '\n', 396) = 0x00f0ba72
[0x4022d1] memchr("\t\t  accept = trie;\n\t\t}\n\t    }\n\t "..., '\n', 381) = 0x00f0ba85
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else\n\t    break;\n\t"..., '\n', 362) = 0x00f0ba89
[0x4022d1] memchr("\t    }\n\t  else\n\t    break;\n\t  d "..., '\n', 358) = 0x00f0ba90
[0x4022d1] memchr("\t  else\n\t    break;\n\t  d = trie-"..., '\n', 351) = 0x00f0ba98
[0x4022d1] memchr("\t    break;\n\t  d = trie->shift;\n"..., '\n', 343) = 0x00f0baa4
[0x4022d1] memchr("\t  d = trie->shift;\n\t}\n      if "..., '\n', 331) = 0x00f0bab8
[0x4022d1] memchr("\t}\n      if (mch)\n\tgoto match;\n "..., '\n', 311) = 0x00f0babb
[0x4022d1] memchr("      if (mch)\n\tgoto match;\n    "..., '\n', 308) = 0x00f0baca
[0x4022d1] memchr("\tgoto match;\n    }\n  return 0;\n\n"..., '\n', 293) = 0x00f0bad7
[0x4022d1] memchr("    }\n  return 0;\n\n match:\n  /* "..., '\n', 280) = 0x00f0badd
[0x4022d1] memchr("  return 0;\n\n match:\n  /* Given "..., '\n', 274) = 0x00f0bae9
[0x4022d1] memchr("\n match:\n  /* Given a known matc"..., '\n', 262) = 0x00f0baea
[0x4022d1] memchr(" match:\n  /* Given a known match"..., '\n', 261) = 0x00f0baf2
[0x4022d1] memchr("  /* Given a known match, find t"..., '\n', 253) = 0x00f0bb35
[0x4022d1] memchr("     at or before its starting p"..., '\n', 186) = 0x00f0bb76
[0x4022d1] memchr("     copy of the preceding main "..., '\n', 121) = 0x00f0bba7
[0x4022d1] memchr("  if (lim - mch > kwset->maxd)\n "..., '\n', 72) = 0x00f0bbc6
[0x4022d1] memchr("    lim = mch + kwset->maxd;\n  l"..., '\n', 41) = 0x00f0bbe3
[0x4022d1] memchr("  lmch = 0;\n  d = 1;\n  while (li"..., '\n', 12) = 0x00f0bbef
[0x4022d1] memchr("  d = 1;\n  while (lim - end >= d"..., '\n', 0) = NULL
[0x4023cc] fwrite("9866:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  d = 1;\n  while (lim - end >= d"..., 1, 9, 0x7fce6d444260) = 9
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  while (lim - end >= d)\n    {\n "..., '1', 9160) = 0x00f0bc3d
[0x40cdf3] memchr("1]]) != 0)\n\tcontinue;\n      beg "..., '\n', 9092) = 0x00f0bc47
[0x4022d1] memchr("  while (lim - end >= d)\n    {\n "..., '\n', 31) = 0x00f0bc11
[0x4022d1] memchr("    {\n      if ((d = delta[c = ("..., '\n', 6) = 0x00f0bc17
[0x4022d1] memchr("      if ((d = delta[c = (end +="..., '\n', 0) = NULL
[0x4023cc] fwrite("9869:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      if ((d = delta[c = (end +="..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\tcontinue;\n      beg = end - 1;\n"..., '1', 9081) = 0x00f0bc65
[0x40cdf3] memchr("1;\n      if (!(trie = next[c]))\n"..., '\n', 9052) = 0x00f0bc67
[0x4022d1] memchr("\tcontinue;\n      beg = end - 1;\n"..., '\n', 11) = 0x00f0bc52
[0x4022d1] memchr("      beg = end - 1;\n      if (!"..., '\n', 0) = NULL
[0x4023cc] fwrite("9871:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("      beg = end - 1;\n      if (!"..., 1, 21, 0x7fce6d444260) = 21
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      if (!(trie = next[c]))\n\t{\n"..., '1', 9049) = 0x00f0bc8f
[0x40cdf3] memchr("1;\n\t  continue;\n\t}\n      if (tri"..., '\n', 9010) = 0x00f0bc91
[0x4022d1] memchr("      if (!(trie = next[c]))\n\t{\n"..., '\n', 32) = 0x00f0bc84
[0x4022d1] memchr("\t{\n\t  d = 1;\n\t  continue;\n\t}\n   "..., '\n', 3) = 0x00f0bc87
[0x4022d1] memchr("\t  d = 1;\n\t  continue;\n\t}\n      "..., '\n', 0) = NULL
[0x4023cc] fwrite("9874:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\t  d = 1;\n\t  continue;\n\t}\n      "..., 1, 10, 0x7fce6d444260) = 10
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  continue;\n\t}\n      if (trie->"..., '1', 9007) = 0x00f0beed
[0x40cdf3] memchr("1;\n    }\n\n  if (kwsmatch)\n    {\n"..., '\n', 8404) = 0x00f0beef
[0x4022d1] memchr("\t  continue;\n\t}\n      if (trie->"..., '\n', 598) = 0x00f0bc9e
[0x4022d1] memchr("\t}\n      if (trie->accepting && "..., '\n', 585) = 0x00f0bca1
[0x4022d1] memchr("      if (trie->accepting && beg"..., '\n', 582) = 0x00f0bcca
[0x4022d1] memchr("\t{\n\t  lmch = beg;\n\t  accept = tr"..., '\n', 541) = 0x00f0bccd
[0x4022d1] memchr("\t  lmch = beg;\n\t  accept = trie;"..., '\n', 538) = 0x00f0bcdc
[0x4022d1] memchr("\t  accept = trie;\n\t}\n      d = t"..., '\n', 523) = 0x00f0bcee
[0x4022d1] memchr("\t}\n      d = trie->shift;\n      "..., '\n', 505) = 0x00f0bcf1
[0x4022d1] memchr("      d = trie->shift;\n      whi"..., '\n', 502) = 0x00f0bd08
[0x4022d1] memchr("      while (beg > text)\n\t{\n\t  c"..., '\n', 479) = 0x00f0bd21
[0x4022d1] memchr("\t{\n\t  c = trans ? trans[(unsigne"..., '\n', 454) = 0x00f0bd24
[0x4022d1] memchr("\t  c = trans ? trans[(unsigned c"..., '\n', 451) = 0x00f0bd5b
[0x4022d1] memchr("\t  tree = trie->links;\n\t  while "..., '\n', 396) = 0x00f0bd72
[0x4022d1] memchr("\t  while (tree && c != tree->lab"..., '\n', 373) = 0x00f0bd96
[0x4022d1] memchr("\t    if (c < tree->label)\n\t     "..., '\n', 337) = 0x00f0bdb0
[0x4022d1] memchr("\t      tree = tree->llink;\n\t    "..., '\n', 311) = 0x00f0bdcb
[0x4022d1] memchr("\t    else\n\t      tree = tree->rl"..., '\n', 284) = 0x00f0bdd5
[0x4022d1] memchr("\t      tree = tree->rlink;\n\t  if"..., '\n', 274) = 0x00f0bdf0
[0x4022d1] memchr("\t  if (tree)\n\t    {\n\t      trie "..., '\n', 247) = 0x00f0bdfd
[0x4022d1] memchr("\t    {\n\t      trie = tree->trie;"..., '\n', 234) = 0x00f0be04
[0x4022d1] memchr("\t      trie = tree->trie;\n\t     "..., '\n', 227) = 0x00f0be1e
[0x4022d1] memchr("\t      if (trie->accepting && be"..., '\n', 201) = 0x00f0be48
[0x4022d1] memchr("\t\t{\n\t\t  lmch = beg;\n\t\t  accept ="..., '\n', 159) = 0x00f0be4c
[0x4022d1] memchr("\t\t  lmch = beg;\n\t\t  accept = tri"..., '\n', 155) = 0x00f0be5c
[0x4022d1] memchr("\t\t  accept = trie;\n\t\t}\n\t    }\n\t "..., '\n', 139) = 0x00f0be6f
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else\n\t    break;\n\t"..., '\n', 120) = 0x00f0be73
[0x4022d1] memchr("\t    }\n\t  else\n\t    break;\n\t  d "..., '\n', 116) = 0x00f0be7a
[0x4022d1] memchr("\t  else\n\t    break;\n\t  d = trie-"..., '\n', 109) = 0x00f0be82
[0x4022d1] memchr("\t    break;\n\t  d = trie->shift;\n"..., '\n', 101) = 0x00f0be8e
[0x4022d1] memchr("\t  d = trie->shift;\n\t}\n      if "..., '\n', 89) = 0x00f0bea2
[0x4022d1] memchr("\t}\n      if (lmch)\n\t{\n\t  mch = l"..., '\n', 69) = 0x00f0bea5
[0x4022d1] memchr("      if (lmch)\n\t{\n\t  mch = lmch"..., '\n', 66) = 0x00f0beb5
[0x4022d1] memchr("\t{\n\t  mch = lmch;\n\t  goto match;"..., '\n', 50) = 0x00f0beb8
[0x4022d1] memchr("\t  mch = lmch;\n\t  goto match;\n\t}"..., '\n', 47) = 0x00f0bec7
[0x4022d1] memchr("\t  goto match;\n\t}\n      if (!d)\n"..., '\n', 32) = 0x00f0bed6
[0x4022d1] memchr("\t}\n      if (!d)\n\td = 1;\n    }\n\n"..., '\n', 17) = 0x00f0bed9
[0x4022d1] memchr("      if (!d)\n\td = 1;\n    }\n\n  i"..., '\n', 14) = 0x00f0bee7
[0x4022d1] memchr("\td = 1;\n    }\n\n  if (kwsmatch)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("9911:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("\td = 1;\n    }\n\n  if (kwsmatch)\n "..., 1, 8, 0x7fce6d444260) = 8
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n\n  if (kwsmatch)\n    {\n   "..., '1', 8401) = 0x00f0c21e
[0x40cdf3] memchr("1 && kwset->trans == 0)\n    {\n  "..., '\n', 7587) = 0x00f0c235
[0x4022d1] memchr("    }\n\n  if (kwsmatch)\n    {\n   "..., '\n', 792) = 0x00f0bef5
[0x4022d1] memchr("\n  if (kwsmatch)\n    {\n      kws"..., '\n', 786) = 0x00f0bef6
[0x4022d1] memchr("  if (kwsmatch)\n    {\n      kwsm"..., '\n', 785) = 0x00f0bf06
[0x4022d1] memchr("    {\n      kwsmatch->index = ac"..., '\n', 769) = 0x00f0bf0c
[0x4022d1] memchr("      kwsmatch->index = accept->"..., '\n', 763) = 0x00f0bf3b
[0x4022d1] memchr("      kwsmatch->beg[0] = mch;\n  "..., '\n', 716) = 0x00f0bf59
[0x4022d1] memchr("      kwsmatch->size[0] = accept"..., '\n', 686) = 0x00f0bf82
[0x4022d1] memchr("    }\n  return mch;\n}\n  \n/* Sear"..., '\n', 645) = 0x00f0bf88
[0x4022d1] memchr("  return mch;\n}\n  \n/* Search thr"..., '\n', 639) = 0x00f0bf96
[0x4022d1] memchr("}\n  \n/* Search through the given"..., '\n', 625) = 0x00f0bf98
[0x4022d1] memchr("  \n/* Search through the given t"..., '\n', 623) = 0x00f0bf9b
[0x4022d1] memchr("/* Search through the given text"..., '\n', 620) = 0x00f0bfdd
[0x4022d1] memchr("   given keyword set.  Return a "..., '\n', 554) = 0x00f0c01f
[0x4022d1] memchr("   the matching substring, or NU"..., '\n', 488) = 0x00f0c065
[0x4022d1] memchr("   is non-NULL store in the refe"..., '\n', 418) = 0x00f0c0a7
[0x4022d1] memchr("   matching substring.  Similarl"..., '\n', 352) = 0x00f0c0e9
[0x4022d1] memchr("   in the referenced location th"..., '\n', 286) = 0x00f0c12a
[0x4022d1] memchr("   keyword matched. */\nchar *\nkw"..., '\n', 221) = 0x00f0c141
[0x4022d1] memchr("char *\nkwsexec(kws, text, size, "..., '\n', 198) = 0x00f0c148
[0x4022d1] memchr("kwsexec(kws, text, size, kwsmatc"..., '\n', 191) = 0x00f0c16b
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 156) = 0x00f0c17d
[0x4022d1] memchr("     char *text;\n     size_t siz"..., '\n', 138) = 0x00f0c18e
[0x4022d1] memchr("     size_t size;\n     struct kw"..., '\n', 121) = 0x00f0c1a0
[0x4022d1] memchr("     struct kwsmatch *kwsmatch;\n"..., '\n', 103) = 0x00f0c1c0
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  char "..., '\n', 71) = 0x00f0c1c2
[0x4022d1] memchr("  struct kwset *kwset;\n  char *r"..., '\n', 69) = 0x00f0c1d9
[0x4022d1] memchr("  char *ret;\n\n  kwset = (struct "..., '\n', 46) = 0x00f0c1e6
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 33) = 0x00f0c1e7
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 32) = 0x00f0c207
[0x4022d1] memchr("  if (kwset->words == 1 && kwset"..., '\n', 0) = NULL
[0x4023cc] fwrite("9941:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("  if (kwset->words == 1 && kwset"..., 1, 46, 0x7fce6d444260) = 46
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      ret = bmexec(kws, te"..., '1', 7563) = 0x00f0c44b
[0x40cdf3] memchr("1988, 1993 Free Software Foundat"..., '\n', 7030) = 0x00f0c474
[0x4022d1] memchr("    {\n      ret = bmexec(kws, te"..., '\n', 516) = 0x00f0c23b
[0x4022d1] memchr("      ret = bmexec(kws, text, si"..., '\n', 510) = 0x00f0c260
[0x4022d1] memchr("      if (kwsmatch != 0 && ret !"..., '\n', 473) = 0x00f0c285
[0x4022d1] memchr("\t{\n\t  kwsmatch->index = 0;\n\t  kw"..., '\n', 436) = 0x00f0c288
[0x4022d1] memchr("\t  kwsmatch->index = 0;\n\t  kwsma"..., '\n', 433) = 0x00f0c2a0
[0x4022d1] memchr("\t  kwsmatch->beg[0] = ret;\n\t  kw"..., '\n', 409) = 0x00f0c2bb
[0x4022d1] memchr("\t  kwsmatch->size[0] = kwset->mi"..., '\n', 382) = 0x00f0c2df
[0x4022d1] memchr("\t}\n      return ret;\n    }\n  els"..., '\n', 346) = 0x00f0c2e2
[0x4022d1] memchr("      return ret;\n    }\n  else\n "..., '\n', 343) = 0x00f0c2f4
[0x4022d1] memchr("    }\n  else\n    return cwexec(k"..., '\n', 325) = 0x00f0c2fa
[0x4022d1] memchr("  else\n    return cwexec(kws, te"..., '\n', 319) = 0x00f0c301
[0x4022d1] memchr("    return cwexec(kws, text, siz"..., '\n', 312) = 0x00f0c32f
[0x4022d1] memchr("}\n\n/* Free the components of the"..., '\n', 266) = 0x00f0c331
[0x4022d1] memchr("\n/* Free the components of the g"..., '\n', 264) = 0x00f0c332
[0x4022d1] memchr("/* Free the components of the gi"..., '\n', 263) = 0x00f0c366
[0x4022d1] memchr("void\nkwsfree(kws)\n     kwset_t k"..., '\n', 211) = 0x00f0c36b
[0x4022d1] memchr("kwsfree(kws)\n     kwset_t kws;\n{"..., '\n', 206) = 0x00f0c378
[0x4022d1] memchr("     kwset_t kws;\n{\n  struct kws"..., '\n', 193) = 0x00f0c38a
[0x4022d1] memchr("{\n  struct kwset *kwset;\n\n  kwse"..., '\n', 175) = 0x00f0c38c
[0x4022d1] memchr("  struct kwset *kwset;\n\n  kwset "..., '\n', 173) = 0x00f0c3a3
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 150) = 0x00f0c3a4
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 149) = 0x00f0c3c4
[0x4022d1] memchr("  obstack_free(&kwset->obstack, "..., '\n', 117) = 0x00f0c3e8
[0x4022d1] memchr("  free(kws);\n}\n/* obstack.c - su"..., '\n', 81) = 0x00f0c3f5
[0x4022d1] memchr("}\n/* obstack.c - subroutines use"..., '\n', 68) = 0x00f0c3f7
[0x4022d1] memchr("/* obstack.c - subroutines used "..., '\n', 66) = 0x00f0c439
[0x4022d1] memchr("   Copyright (C) 1988, 1993 Free"..., '\n', 0) = NULL
[0x4023cc] fwrite("9968:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("   Copyright (C) 1988, 1993 Free"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\nThis program is free software; "..., '1', 6988) = 0x00f0c6eb
[0x40cdf3] memchr("139, USA.  */\n\n/*#include "obsta"..., '\n', 6358) = 0x00f0c6f8
[0x4022d1] memchr("\nThis program is free software; "..., '\n', 588) = 0x00f0c475
[0x4022d1] memchr("This program is free software; y"..., '\n', 587) = 0x00f0c4bd
[0x4022d1] memchr("under the terms of the GNU Gener"..., '\n', 515) = 0x00f0c503
[0x4022d1] memchr("Free Software Foundation; either"..., '\n', 445) = 0x00f0c547
[0x4022d1] memchr("later version.\n\nThis program is "..., '\n', 377) = 0x00f0c556
[0x4022d1] memchr("\nThis program is distributed in "..., '\n', 362) = 0x00f0c557
[0x4022d1] memchr("This program is distributed in t"..., '\n', 361) = 0x00f0c597
[0x4022d1] memchr("but WITHOUT ANY WARRANTY; withou"..., '\n', 297) = 0x00f0c5d6
[0x4022d1] memchr("MERCHANTABILITY or FITNESS FOR A"..., '\n', 234) = 0x00f0c614
[0x4022d1] memchr("GNU General Public License for m"..., '\n', 172) = 0x00f0c641
[0x4022d1] memchr("\nYou should have received a copy"..., '\n', 127) = 0x00f0c642
[0x4022d1] memchr("You should have received a copy "..., '\n', 126) = 0x00f0c684
[0x4022d1] memchr("along with this program; if not,"..., '\n', 60) = 0x00f0c6c0
[0x4022d1] memchr("Foundation, 675 Mass Ave, Cambri"..., '\n', 0) = NULL
[0x4023cc] fwrite("9982:", 1, 5, 0x7fce6d444260) = 5
[0x4024d9] fwrite("Foundation, 675 Mass Ave, Cambri"..., 1, 56, 0x7fce6d444260) = 56
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/*#include "obstack.h"*/\n\n/* Th"..., '1', 6344) = 0x00f0d299
[0x40cdf3] memchr("12 is sizeof (mhead) and 4 is EX"..., '\n', 3368) = 0x00f0d2cd
[0x4022d1] memchr("\n/*#include "obstack.h"*/\n\n/* Th"..., '\n', 2967) = 0x00f0c6f9
[0x4022d1] memchr("/*#include "obstack.h"*/\n\n/* Thi"..., '\n', 2966) = 0x00f0c712
[0x4022d1] memchr("\n/* This is just to get __GNU_LI"..., '\n', 2941) = 0x00f0c713
[0x4022d1] memchr("/* This is just to get __GNU_LIB"..., '\n', 2940) = 0x00f0c747
[0x4022d1] memchr("/*#include <stdio.h>*/\n\n/* Comme"..., '\n', 2888) = 0x00f0c75e
[0x4022d1] memchr("\n/* Comment out all this code if"..., '\n', 2865) = 0x00f0c75f
[0x4022d1] memchr("/* Comment out all this code if "..., '\n', 2864) = 0x00f0c7ab
[0x4022d1] memchr("   actually compiling the librar"..., '\n', 2788) = 0x00f0c7f5
[0x4022d1] memchr("   Library, but also included in"..., '\n', 2714) = 0x00f0c83f
[0x4022d1] memchr("   and linking in this code is a"..., '\n', 2640) = 0x00f0c883
[0x4022d1] memchr("   (especially if it is a shared"..., '\n', 2572) = 0x00f0c8cc
[0x4022d1] memchr("   program understand `configure"..., '\n', 2499) = 0x00f0c919
[0x4022d1] memchr("   it is simpler to just do this"..., '\n', 2422) = 0x00f0c960
[0x4022d1] memchr("\n#if defined (_LIBC) || !defined"..., '\n', 2351) = 0x00f0c961
[0x4022d1] memchr("#if defined (_LIBC) || !defined "..., '\n', 2350) = 0x00f0c993
[0x4022d1] memchr("\n\n#ifdef __STDC__\n#define POINTE"..., '\n', 2300) = 0x00f0c994
[0x4022d1] memchr("\n#ifdef __STDC__\n#define POINTER"..., '\n', 2299) = 0x00f0c995
[0x4022d1] memchr("#ifdef __STDC__\n#define POINTER "..., '\n', 2298) = 0x00f0c9a5
[0x4022d1] memchr("#define POINTER void *\n#else\n#de"..., '\n', 2282) = 0x00f0c9bc
[0x4022d1] memchr("#else\n#define POINTER char *\n#en"..., '\n', 2259) = 0x00f0c9c2
[0x4022d1] memchr("#define POINTER char *\n#endif\n\n/"..., '\n', 2253) = 0x00f0c9d9
[0x4022d1] memchr("#endif\n\n/* Determine default ali"..., '\n', 2230) = 0x00f0c9e0
[0x4022d1] memchr("\n/* Determine default alignment."..., '\n', 2223) = 0x00f0c9e1
[0x4022d1] memchr("/* Determine default alignment. "..., '\n', 2222) = 0x00f0ca05
[0x4022d1] memchr("struct fooalign {char x; double "..., '\n', 2186) = 0x00f0ca2a
[0x4022d1] memchr("#define DEFAULT_ALIGNMENT  \\\n  ("..., '\n', 2149) = 0x00f0ca47
[0x4022d1] memchr("  ((PTR_INT_TYPE) ((char *)&((st"..., '\n', 2120) = 0x00f0ca8c
[0x4022d1] memchr("/* If malloc were really smart, "..., '\n', 2051) = 0x00f0cadb
[0x4022d1] memchr("   But in fact it might be less "..., '\n', 1972) = 0x00f0cb23
[0x4022d1] memchr("   DEFAULT_ROUNDING.  So we prep"..., '\n', 1900) = 0x00f0cb5e
[0x4022d1] memchr("union fooround {long x; double d"..., '\n', 1841) = 0x00f0cb82
[0x4022d1] memchr("#define DEFAULT_ROUNDING (sizeof"..., '\n', 1805) = 0x00f0cbb5
[0x4022d1] memchr("\n/* When we copy a long block of"..., '\n', 1754) = 0x00f0cbb6
[0x4022d1] memchr("/* When we copy a long block of "..., '\n', 1753) = 0x00f0cbfc
[0x4022d1] memchr("   On some machines, copying suc"..., '\n', 1683) = 0x00f0cc38
[0x4022d1] memchr("   in such a case, redefine COPY"..., '\n', 1623) = 0x00f0cc7b
[0x4022d1] memchr("   or `char' as a last resort.  "..., '\n', 1556) = 0x00f0cc9e
[0x4022d1] memchr("#ifndef COPYING_UNIT\n#define COP"..., '\n', 1521) = 0x00f0ccb3
[0x4022d1] memchr("#define COPYING_UNIT int\n#endif\n"..., '\n', 1500) = 0x00f0cccc
[0x4022d1] memchr("#endif\n\n/* The non-GNU-C macros "..., '\n', 1475) = 0x00f0ccd3
[0x4022d1] memchr("\n/* The non-GNU-C macros copy th"..., '\n', 1468) = 0x00f0ccd4
[0x4022d1] memchr("/* The non-GNU-C macros copy the"..., '\n', 1467) = 0x00f0cd17
[0x4022d1] memchr("   to avoid multiple evaluation."..., '\n', 1400) = 0x00f0cd3c
[0x4022d1] memchr("\nstruct obstack *_obstack;\n\n/* D"..., '\n', 1363) = 0x00f0cd3d
[0x4022d1] memchr("struct obstack *_obstack;\n\n/* De"..., '\n', 1362) = 0x00f0cd57
[0x4022d1] memchr("\n/* Define a macro that either c"..., '\n', 1336) = 0x00f0cd58
[0x4022d1] memchr("/* Define a macro that either ca"..., '\n', 1335) = 0x00f0cda7
[0x4022d1] memchr("   calling interface, or calls f"..., '\n', 1256) = 0x00f0cdf1
[0x4022d1] memchr("   (that adds an extra first arg"..., '\n', 1182) = 0x00f0ce3e
[0x4022d1] memchr("   For free, do not use ?:, sinc"..., '\n', 1105) = 0x00f0ce89
[0x4022d1] memchr("   do not allow (expr) ? void : "..., '\n', 1030) = 0x00f0ceb3
[0x4022d1] memchr("\n#define CALL_CHUNKFUN(h, size) "..., '\n', 988) = 0x00f0ceb4
[0x4022d1] memchr("#define CALL_CHUNKFUN(h, size) \\"..., '\n', 987) = 0x00f0ced5
[0x4022d1] memchr("  (((h) -> use_extra_arg) \\\n   ?"..., '\n', 954) = 0x00f0cef1
[0x4022d1] memchr("   ? (*(h)->chunkfun) ((h)->extr"..., '\n', 926) = 0x00f0cf22
[0x4022d1] memchr("   : (*(h)->chunkfun) ((size)))\n"..., '\n', 877) = 0x00f0cf42
[0x4022d1] memchr("\n#define CALL_FREEFUN(h, old_chu"..., '\n', 845) = 0x00f0cf43
[0x4022d1] memchr("#define CALL_FREEFUN(h, old_chun"..., '\n', 844) = 0x00f0cf68
[0x4022d1] memchr("  do { \\\n    if ((h) -> use_extr"..., '\n', 807) = 0x00f0cf71
[0x4022d1] memchr("    if ((h) -> use_extra_arg) \\\n"..., '\n', 798) = 0x00f0cf91
[0x4022d1] memchr("      (*(h)->freefun) ((h)->extr"..., '\n', 766) = 0x00f0cfc8
[0x4022d1] memchr("    else \\\n      (*(h)->freefun)"..., '\n', 711) = 0x00f0cfd3
[0x4022d1] memchr("      (*(h)->freefun) ((old_chun"..., '\n', 700) = 0x00f0cffa
[0x4022d1] memchr("  } while (0)\n\n\014\n/* Initialize a"..., '\n', 661) = 0x00f0d008
[0x4022d1] memchr("\n\014\n/* Initialize an obstack H fo"..., '\n', 647) = 0x00f0d009
[0x4022d1] memchr("\014\n/* Initialize an obstack H for"..., '\n', 646) = 0x00f0d00b
[0x4022d1] memchr("/* Initialize an obstack H for u"..., '\n', 644) = 0x00f0d05b
[0x4022d1] memchr("   Objects start on multiples of"..., '\n', 564) = 0x00f0d09d
[0x4022d1] memchr("   CHUNKFUN is the function to u"..., '\n', 498) = 0x00f0d0d4
[0x4022d1] memchr("   and FREEFUN the function to f"..., '\n', 443) = 0x00f0d102
[0x4022d1] memchr("\nvoid\n_obstack_begin (h, size, a"..., '\n', 397) = 0x00f0d103
[0x4022d1] memchr("void\n_obstack_begin (h, size, al"..., '\n', 396) = 0x00f0d108
[0x4022d1] memchr("_obstack_begin (h, size, alignme"..., '\n', 391) = 0x00f0d13f
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 336) = 0x00f0d157
[0x4022d1] memchr("     int size;\n     int alignmen"..., '\n', 312) = 0x00f0d166
[0x4022d1] memchr("     int alignment;\n     POINTER"..., '\n', 297) = 0x00f0d17a
[0x4022d1] memchr("     POINTER (*chunkfun) ();\n   "..., '\n', 277) = 0x00f0d197
[0x4022d1] memchr("     void (*freefun) ();\n{\n  reg"..., '\n', 248) = 0x00f0d1b0
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 223) = 0x00f0d1b2
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 221) = 0x00f0d1f5
[0x4022d1] memchr("\n  if (alignment == 0)\n    align"..., '\n', 154) = 0x00f0d1f6
[0x4022d1] memchr("  if (alignment == 0)\n    alignm"..., '\n', 153) = 0x00f0d20c
[0x4022d1] memchr("    alignment = DEFAULT_ALIGNMEN"..., '\n', 131) = 0x00f0d22f
[0x4022d1] memchr("  if (size == 0)\n    /* Default "..., '\n', 96) = 0x00f0d240
[0x4022d1] memchr("    /* Default size is what GNU "..., '\n', 79) = 0x00f0d289
[0x4022d1] memchr("    {\n      /* 12 is sizeof (mhe"..., '\n', 6) = 0x00f0d28f
[0x4022d1] memchr("      /* 12 is sizeof (mhead) an"..., '\n', 0) = NULL
[0x4023cc] fwrite("10069:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      /* 12 is sizeof (mhead) an"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t Use the values for range check"..., '1', 3315) = 0x00f0d43a
[0x40cdf3] memchr("12 + DEFAULT_ROUNDING - 1) & ~(D"..., '\n', 2951) = 0x00f0d46f
[0x4022d1] memchr("\t Use the values for range check"..., '\n', 342) = 0x00f0d314
[0x4022d1] memchr("\t the extra bytes won't be misse"..., '\n', 271) = 0x00f0d35c
[0x4022d1] memchr("\t and we used a larger request, "..., '\n', 199) = 0x00f0d39e
[0x4022d1] memchr("\t allocated.\n\n\t These number are"..., '\n', 133) = 0x00f0d3ab
[0x4022d1] memchr("\n\t These number are irrelevant t"..., '\n', 120) = 0x00f0d3ac
[0x4022d1] memchr("\t These number are irrelevant to"..., '\n', 119) = 0x00f0d3f2
[0x4022d1] memchr("\t less sensitive to the size of "..., '\n', 49) = 0x00f0d423
[0x4022d1] memchr("      int extra = ((((12 + DEFAU"..., '\n', 0) = NULL
[0x4023cc] fwrite("10077:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      int extra = ((((12 + DEFAU"..., 1, 76, 0x7fce6d444260) = 76
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '1', 2897) = 0x00f0d48f
[0x40cdf3] memchr("1)\n\t\t   & ~(DEFAULT_ROUNDING - 1"..., '\n', 2866) = 0x00f0d491
[0x4022d1] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("10078:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '1', 2863) = 0x00f0d4ae
[0x40cdf3] memchr("1));\n      size = 4096 - extra;\n"..., '\n', 2835) = 0x00f0d4b2
[0x4022d1] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '\n', 0) = NULL
[0x4023cc] fwrite("10079:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      size = 4096 - extra;\n    }"..., '1', 2830) = 0x00f0d561
[0x40cdf3] memchr("1;\n  h->use_extra_arg = 0;\n\n  ch"..., '\n', 2656) = 0x00f0d563
[0x4022d1] memchr("      size = 4096 - extra;\n    }"..., '\n', 140) = 0x00f0d4cd
[0x4022d1] memchr("    }\n\n  h->chunkfun = (struct _"..., '\n', 113) = 0x00f0d4d3
[0x4022d1] memchr("\n  h->chunkfun = (struct _obstac"..., '\n', 107) = 0x00f0d4d4
[0x4022d1] memchr("  h->chunkfun = (struct _obstack"..., '\n', 106) = 0x00f0d50e
[0x4022d1] memchr("  h->freefun = freefun;\n  h->chu"..., '\n', 48) = 0x00f0d526
[0x4022d1] memchr("  h->chunk_size = size;\n  h->ali"..., '\n', 24) = 0x00f0d53e
[0x4022d1] memchr("  h->alignment_mask = alignment "..., '\n', 0) = NULL
[0x4023cc] fwrite("10086:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  h->alignment_mask = alignment "..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  h->use_extra_arg = 0;\n\n  chunk"..., '1', 2653) = 0x00f0d6af
[0x40cdf3] memchr("1 (h, size, alignment, chunkfun,"..., '\n', 2322) = 0x00f0d6dd
[0x4022d1] memchr("  h->use_extra_arg = 0;\n\n  chunk"..., '\n', 316) = 0x00f0d57b
[0x4022d1] memchr("\n  chunk = h->chunk = CALL_CHUNK"..., '\n', 292) = 0x00f0d57c
[0x4022d1] memchr("  chunk = h->chunk = CALL_CHUNKF"..., '\n', 291) = 0x00f0d5b5
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 234) = 0x00f0d5e8
[0x4022d1] memchr("  h->chunk_limit = chunk->limit\n"..., '\n', 183) = 0x00f0d608
[0x4022d1] memchr("    = (char *) chunk + h->chunk_"..., '\n', 151) = 0x00f0d62e
[0x4022d1] memchr("  chunk->prev = 0;\n  /* The init"..., '\n', 113) = 0x00f0d641
[0x4022d1] memchr("  /* The initial chunk now conta"..., '\n', 94) = 0x00f0d67a
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 37) = 0x00f0d697
[0x4022d1] memchr("}\n\nvoid\n_obstack_begin_1 (h, siz"..., '\n', 8) = 0x00f0d699
[0x4022d1] memchr("\nvoid\n_obstack_begin_1 (h, size,"..., '\n', 6) = 0x00f0d69a
[0x4022d1] memchr("void\n_obstack_begin_1 (h, size, "..., '\n', 5) = 0x00f0d69f
[0x4022d1] memchr("_obstack_begin_1 (h, size, align"..., '\n', 0) = NULL
[0x4023cc] fwrite("10099:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("_obstack_begin_1 (h, size, align"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     struct obstack *h;\n     int"..., '1', 2275) = 0x00f0d849
[0x40cdf3] memchr("12 is sizeof (mhead) and 4 is EX"..., '\n', 1912) = 0x00f0d87d
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 354) = 0x00f0d6f5
[0x4022d1] memchr("     int size;\n     int alignmen"..., '\n', 330) = 0x00f0d704
[0x4022d1] memchr("     int alignment;\n     POINTER"..., '\n', 315) = 0x00f0d718
[0x4022d1] memchr("     POINTER (*chunkfun) ();\n   "..., '\n', 295) = 0x00f0d735
[0x4022d1] memchr("     void (*freefun) ();\n     PO"..., '\n', 266) = 0x00f0d74e
[0x4022d1] memchr("     POINTER arg;\n{\n  register s"..., '\n', 241) = 0x00f0d760
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 223) = 0x00f0d762
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 221) = 0x00f0d7a5
[0x4022d1] memchr("\n  if (alignment == 0)\n    align"..., '\n', 154) = 0x00f0d7a6
[0x4022d1] memchr("  if (alignment == 0)\n    alignm"..., '\n', 153) = 0x00f0d7bc
[0x4022d1] memchr("    alignment = DEFAULT_ALIGNMEN"..., '\n', 131) = 0x00f0d7df
[0x4022d1] memchr("  if (size == 0)\n    /* Default "..., '\n', 96) = 0x00f0d7f0
[0x4022d1] memchr("    /* Default size is what GNU "..., '\n', 79) = 0x00f0d839
[0x4022d1] memchr("    {\n      /* 12 is sizeof (mhe"..., '\n', 6) = 0x00f0d83f
[0x4022d1] memchr("      /* 12 is sizeof (mhead) an"..., '\n', 0) = NULL
[0x4023cc] fwrite("10114:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      /* 12 is sizeof (mhead) an"..., 1, 62, 0x7fce6d444260) = 62
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t Use the values for range check"..., '1', 1859) = 0x00f0d9ea
[0x40cdf3] memchr("12 + DEFAULT_ROUNDING - 1) & ~(D"..., '\n', 1495) = 0x00f0da1f
[0x4022d1] memchr("\t Use the values for range check"..., '\n', 342) = 0x00f0d8c4
[0x4022d1] memchr("\t the extra bytes won't be misse"..., '\n', 271) = 0x00f0d90c
[0x4022d1] memchr("\t and we used a larger request, "..., '\n', 199) = 0x00f0d94e
[0x4022d1] memchr("\t allocated.\n\n\t These number are"..., '\n', 133) = 0x00f0d95b
[0x4022d1] memchr("\n\t These number are irrelevant t"..., '\n', 120) = 0x00f0d95c
[0x4022d1] memchr("\t These number are irrelevant to"..., '\n', 119) = 0x00f0d9a2
[0x4022d1] memchr("\t less sensitive to the size of "..., '\n', 49) = 0x00f0d9d3
[0x4022d1] memchr("      int extra = ((((12 + DEFAU"..., '\n', 0) = NULL
[0x4023cc] fwrite("10122:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      int extra = ((((12 + DEFAU"..., 1, 76, 0x7fce6d444260) = 76
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '1', 1441) = 0x00f0da3f
[0x40cdf3] memchr("1)\n\t\t   & ~(DEFAULT_ROUNDING - 1"..., '\n', 1410) = 0x00f0da41
[0x4022d1] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("10123:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 1, 34, 0x7fce6d444260) = 34
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '1', 1407) = 0x00f0da5e
[0x40cdf3] memchr("1));\n      size = 4096 - extra;\n"..., '\n', 1379) = 0x00f0da62
[0x4022d1] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '\n', 0) = NULL
[0x4023cc] fwrite("10124:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("      size = 4096 - extra;\n    }"..., '1', 1374) = 0x00f0db11
[0x40cdf3] memchr("1;\n  h->extra_arg = arg;\n  h->us"..., '\n', 1200) = 0x00f0db13
[0x4022d1] memchr("      size = 4096 - extra;\n    }"..., '\n', 140) = 0x00f0da7d
[0x4022d1] memchr("    }\n\n  h->chunkfun = (struct _"..., '\n', 113) = 0x00f0da83
[0x4022d1] memchr("\n  h->chunkfun = (struct _obstac"..., '\n', 107) = 0x00f0da84
[0x4022d1] memchr("  h->chunkfun = (struct _obstack"..., '\n', 106) = 0x00f0dabe
[0x4022d1] memchr("  h->freefun = freefun;\n  h->chu"..., '\n', 48) = 0x00f0dad6
[0x4022d1] memchr("  h->chunk_size = size;\n  h->ali"..., '\n', 24) = 0x00f0daee
[0x4022d1] memchr("  h->alignment_mask = alignment "..., '\n', 0) = NULL
[0x4023cc] fwrite("10131:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  h->alignment_mask = alignment "..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  h->extra_arg = arg;\n  h->use_e"..., '1', 1197) = 0x00f0db3f
[0x40cdf3] memchr("1;\n\n  chunk = h->chunk = CALL_CH"..., '\n', 1154) = 0x00f0db41
[0x4022d1] memchr("  h->extra_arg = arg;\n  h->use_e"..., '\n', 22) = 0x00f0db29
[0x4022d1] memchr("  h->use_extra_arg = 1;\n\n  chunk"..., '\n', 0) = NULL
[0x4023cc] fwrite("10133:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  h->use_extra_arg = 1;\n\n  chunk"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  chunk = h->chunk = CALL_CHUNK"..., '1', 1151) = 0x00f0def8
[0x40cdf3] memchr("100;\n  if (new_size < h->chunk_s"..., '\n', 201) = 0x00f0defc
[0x4022d1] memchr("\n  chunk = h->chunk = CALL_CHUNK"..., '\n', 897) = 0x00f0db42
[0x4022d1] memchr("  chunk = h->chunk = CALL_CHUNKF"..., '\n', 896) = 0x00f0db7b
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 839) = 0x00f0dbae
[0x4022d1] memchr("  h->chunk_limit = chunk->limit\n"..., '\n', 788) = 0x00f0dbce
[0x4022d1] memchr("    = (char *) chunk + h->chunk_"..., '\n', 756) = 0x00f0dbf4
[0x4022d1] memchr("  chunk->prev = 0;\n  /* The init"..., '\n', 718) = 0x00f0dc07
[0x4022d1] memchr("  /* The initial chunk now conta"..., '\n', 699) = 0x00f0dc40
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 642) = 0x00f0dc5d
[0x4022d1] memchr("}\n\n/* Allocate a new current chu"..., '\n', 613) = 0x00f0dc5f
[0x4022d1] memchr("\n/* Allocate a new current chunk"..., '\n', 611) = 0x00f0dc60
[0x4022d1] memchr("/* Allocate a new current chunk "..., '\n', 610) = 0x00f0dc93
[0x4022d1] memchr("   on the assumption that LENGTH"..., '\n', 559) = 0x00f0dccb
[0x4022d1] memchr("   to the current object, or a n"..., '\n', 503) = 0x00f0dd11
[0x4022d1] memchr("   Copies any partial object fro"..., '\n', 433) = 0x00f0dd4c
[0x4022d1] memchr("   to the beginning of the new o"..., '\n', 374) = 0x00f0dd74
[0x4022d1] memchr("\nvoid\n_obstack_newchunk (h, leng"..., '\n', 334) = 0x00f0dd75
[0x4022d1] memchr("void\n_obstack_newchunk (h, lengt"..., '\n', 333) = 0x00f0dd7a
[0x4022d1] memchr("_obstack_newchunk (h, length)\n  "..., '\n', 328) = 0x00f0dd98
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 298) = 0x00f0ddb0
[0x4022d1] memchr("     int length;\n{\n  register st"..., '\n', 274) = 0x00f0ddc1
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 257) = 0x00f0ddc3
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 255) = 0x00f0ddfb
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 199) = 0x00f0de28
[0x4022d1] memchr("  register long\tnew_size;\n  regi"..., '\n', 154) = 0x00f0de42
[0x4022d1] memchr("  register int obj_size = h->nex"..., '\n', 128) = 0x00f0de7b
[0x4022d1] memchr("  register int i;\n  int already;"..., '\n', 71) = 0x00f0de8d
[0x4022d1] memchr("  int already;\n\n  /* Compute siz"..., '\n', 53) = 0x00f0de9c
[0x4022d1] memchr("\n  /* Compute size for new chunk"..., '\n', 38) = 0x00f0de9d
[0x4022d1] memchr("  /* Compute size for new chunk."..., '\n', 37) = 0x00f0dec2
[0x4022d1] memchr("  new_size = (obj_size + length)"..., '\n', 0) = NULL
[0x4023cc] fwrite("10163:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  new_size = (obj_size + length)"..., 1, 58, 0x7fce6d444260) = 58
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  if (new_size < h->chunk_size)\n"..., '1', 196) = NULL
[0x4022d1] memchr("  if (new_size < h->chunk_size)\n"..., '\n', 196) = 0x00f0df1c
[0x4022d1] memchr("    new_size = h->chunk_size;\n\n "..., '\n', 164) = 0x00f0df3a
[0x4022d1] memchr("\n  /* Allocate and initialize th"..., '\n', 134) = 0x00f0df3b
[0x4022d1] memchr("  /* Allocate and initialize the"..., '\n', 133) = 0x00f0df6b
[0x4022d1] memchr("  new_chunk = h->chunk = CALL_CH"..., '\n', 85) = 0x00f0dfa1
[0x4022d1] memchr("  new_chunk->prev = old_chunk;\n "..., '\n', 31) = 0x00f0dfc0
[0x4022d1] memchr("  new_chunk->limit = h->chunk_li"..., '\n', 0) = NULL
[0x4020b3] memmove(0xf05fc1, 0xf0dfc1, 63, 0xf0dfc1, 0x7fce6d444260) = 0xf05fc1
[0x402213] read(3, "size;\n\n  /* Move the existing ob"..., 32768) = 19280
[0x40bc2b] memchr("  new_chunk->limit = h->chunk_li"..., '1', 19338) = 0x00f060a9
[0x40cdf3] memchr("1 >= DEFAULT_ALIGNMENT)\n    {\n  "..., '\n', 19106) = 0x00f060c0
[0x4022d1] memchr("  new_chunk->limit = h->chunk_li"..., '\n', 206) = 0x00f06005
[0x4022d1] memchr("\n  /* Move the existing object t"..., '\n', 137) = 0x00f06006
[0x4022d1] memchr("  /* Move the existing object to"..., '\n', 136) = 0x00f06036
[0x4022d1] memchr("     Word at a time is fast and "..., '\n', 88) = 0x00f0606c
[0x4022d1] memchr("     is sufficiently aligned.  *"..., '\n', 34) = 0x00f0608e
[0x4022d1] memchr("  if (h->alignment_mask + 1 >= D"..., '\n', 0) = NULL
[0x4023cc] fwrite("10175:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  if (h->alignment_mask + 1 >= D"..., 1, 50, 0x7fce6d444260) = 50
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      for (i = obj_size / "..., '1', 19082) = 0x00f060f9
[0x40cdf3] memchr("1;\n\t   i >= 0; i--)\n\t((COPYING_U"..., '\n', 19026) = 0x00f060fb
[0x4022d1] memchr("    {\n      for (i = obj_size / "..., '\n', 6) = 0x00f060c6
[0x4022d1] memchr("      for (i = obj_size / sizeof"..., '\n', 0) = NULL
[0x4023cc] fwrite("10177:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      for (i = obj_size / sizeof"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t   i >= 0; i--)\n\t((COPYING_UNIT"..., '1', 19023) = 0x00f06bdb
[0x40cdf3] memchr("1;\n    }\n  if (lp)\n    {\n      h"..., '\n', 16240) = 0x00f06bdd
[0x4022d1] memchr("\t   i >= 0; i--)\n\t((COPYING_UNIT"..., '\n', 2753) = 0x00f0610c
[0x4022d1] memchr("\t((COPYING_UNIT *)new_chunk->con"..., '\n', 2736) = 0x00f06136
[0x4022d1] memchr("\t  = ((COPYING_UNIT *)h->object_"..., '\n', 2694) = 0x00f06160
[0x4022d1] memchr("      /* We used to copy the odd"..., '\n', 2652) = 0x00f061b0
[0x4022d1] memchr("\t but that can cross a page boun"..., '\n', 2572) = 0x00f061e2
[0x4022d1] memchr("\t which does not do strict align"..., '\n', 2522) = 0x00f0621e
[0x4022d1] memchr("      already = obj_size / sizeo"..., '\n', 2462) = 0x00f06268
[0x4022d1] memchr("    }\n  else\n    already = 0;\n  "..., '\n', 2388) = 0x00f0626e
[0x4022d1] memchr("  else\n    already = 0;\n  /* Cop"..., '\n', 2382) = 0x00f06275
[0x4022d1] memchr("    already = 0;\n  /* Copy remai"..., '\n', 2375) = 0x00f06286
[0x4022d1] memchr("  /* Copy remaining bytes one by"..., '\n', 2358) = 0x00f062b0
[0x4022d1] memchr("  for (i = already; i < obj_size"..., '\n', 2316) = 0x00f062d7
[0x4022d1] memchr("    new_chunk->contents[i] = h->"..., '\n', 2277) = 0x00f06307
[0x4022d1] memchr("\n  /* If the object just copied "..., '\n', 2229) = 0x00f06308
[0x4022d1] memchr("  /* If the object just copied w"..., '\n', 2228) = 0x00f06347
[0x4022d1] memchr("     free that chunk and remove "..., '\n', 2165) = 0x00f0637a
[0x4022d1] memchr("     But not if that chunk might"..., '\n', 2114) = 0x00f063b8
[0x4022d1] memchr("  if (h->object_base == old_chun"..., '\n', 2052) = 0x00f06400
[0x4022d1] memchr("    {\n      new_chunk->prev = ol"..., '\n', 1980) = 0x00f06406
[0x4022d1] memchr("      new_chunk->prev = old_chun"..., '\n', 1974) = 0x00f0642f
[0x4022d1] memchr("      CALL_FREEFUN (h, old_chunk"..., '\n', 1933) = 0x00f06452
[0x4022d1] memchr("    }\n\n  h->object_base = new_ch"..., '\n', 1898) = 0x00f06458
[0x4022d1] memchr("\n  h->object_base = new_chunk->c"..., '\n', 1892) = 0x00f06459
[0x4022d1] memchr("  h->object_base = new_chunk->co"..., '\n', 1891) = 0x00f06481
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 1851) = 0x00f064ad
[0x4022d1] memchr("  /* The new chunk certainly con"..., '\n', 1807) = 0x00f064ec
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 1744) = 0x00f06509
[0x4022d1] memchr("}\n\n/* Return nonzero if object O"..., '\n', 1715) = 0x00f0650b
[0x4022d1] memchr("\n/* Return nonzero if object OBJ"..., '\n', 1713) = 0x00f0650c
[0x4022d1] memchr("/* Return nonzero if object OBJ "..., '\n', 1712) = 0x00f0654f
[0x4022d1] memchr("   This is here for debugging.\n "..., '\n', 1645) = 0x00f0656e
[0x4022d1] memchr("   If you use it in a program, y"..., '\n', 1614) = 0x00f065aa
[0x4022d1] memchr("\nint\n_obstack_allocated_p (h, ob"..., '\n', 1554) = 0x00f065ab
[0x4022d1] memchr("int\n_obstack_allocated_p (h, obj"..., '\n', 1553) = 0x00f065af
[0x4022d1] memchr("_obstack_allocated_p (h, obj)\n  "..., '\n', 1549) = 0x00f065cd
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 1519) = 0x00f065e5
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 1495) = 0x00f065f7
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 1477) = 0x00f065f9
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 1475) = 0x00f0664e
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 1390) = 0x00f0669b
[0x4022d1] memchr("\n  lp = (h)->chunk;\n  /* We use "..., '\n', 1313) = 0x00f0669c
[0x4022d1] memchr("  lp = (h)->chunk;\n  /* We use >"..., '\n', 1312) = 0x00f066af
[0x4022d1] memchr("  /* We use >= rather than > sin"..., '\n', 1293) = 0x00f066f2
[0x4022d1] memchr("     the beginning of the chunk "..., '\n', 1226) = 0x00f06737
[0x4022d1] memchr("     at the end of an adjacent c"..., '\n', 1157) = 0x00f06760
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 1116) = 0x00f067a8
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 1044) = 0x00f067ae
[0x4022d1] memchr("      plp = lp->prev;\n      lp ="..., '\n', 1038) = 0x00f067c4
[0x4022d1] memchr("      lp = plp;\n    }\n  return l"..., '\n', 1016) = 0x00f067d4
[0x4022d1] memchr("    }\n  return lp != 0;\n}\n\014\n/* F"..., '\n', 1000) = 0x00f067da
[0x4022d1] memchr("  return lp != 0;\n}\n\014\n/* Free ob"..., '\n', 994) = 0x00f067ec
[0x4022d1] memchr("}\n\014\n/* Free objects in obstack H"..., '\n', 976) = 0x00f067ee
[0x4022d1] memchr("\014\n/* Free objects in obstack H, "..., '\n', 974) = 0x00f067f0
[0x4022d1] memchr("/* Free objects in obstack H, in"..., '\n', 972) = 0x00f06834
[0x4022d1] memchr("   more recently than OBJ.  If O"..., '\n', 904) = 0x00f0687a
[0x4022d1] memchr("\n#undef obstack_free\n\n/* This fu"..., '\n', 834) = 0x00f0687b
[0x4022d1] memchr("#undef obstack_free\n\n/* This fun"..., '\n', 833) = 0x00f0688f
[0x4022d1] memchr("\n/* This function has two names "..., '\n', 813) = 0x00f06890
[0x4022d1] memchr("/* This function has two names w"..., '\n', 812) = 0x00f068cb
[0x4022d1] memchr("   This is the first one, called"..., '\n', 753) = 0x00f06904
[0x4022d1] memchr("\nvoid\n_obstack_free (h, obj)\n   "..., '\n', 696) = 0x00f06905
[0x4022d1] memchr("void\n_obstack_free (h, obj)\n    "..., '\n', 695) = 0x00f0690a
[0x4022d1] memchr("_obstack_free (h, obj)\n     stru"..., '\n', 690) = 0x00f06921
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 667) = 0x00f06939
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 643) = 0x00f0694b
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 625) = 0x00f0694d
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 623) = 0x00f069a2
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 538) = 0x00f069ef
[0x4022d1] memchr("\n  lp = h->chunk;\n  /* We use >="..., '\n', 461) = 0x00f069f0
[0x4022d1] memchr("  lp = h->chunk;\n  /* We use >= "..., '\n', 460) = 0x00f06a01
[0x4022d1] memchr("  /* We use >= because there can"..., '\n', 443) = 0x00f06a4f
[0x4022d1] memchr("     But there can be an empty o"..., '\n', 365) = 0x00f06a85
[0x4022d1] memchr("     at the end of another chunk"..., '\n', 311) = 0x00f06aab
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 273) = 0x00f06af3
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 201) = 0x00f06af9
[0x4022d1] memchr("      plp = lp->prev;\n      CALL"..., '\n', 195) = 0x00f06b0f
[0x4022d1] memchr("      CALL_FREEFUN (h, lp);\n    "..., '\n', 173) = 0x00f06b2b
[0x4022d1] memchr("      lp = plp;\n      /* If we s"..., '\n', 145) = 0x00f06b3b
[0x4022d1] memchr("      /* If we switch chunks, we"..., '\n', 129) = 0x00f06b7f
[0x4022d1] memchr("\t chunk contains an empty object"..., '\n', 61) = 0x00f06bbc
[0x4022d1] memchr("      h->maybe_empty_object = 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("10258:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      h->maybe_empty_object = 1;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  if (lp)\n    {\n      h->o"..., '1', 16237) = 0x00f06fb9
[0x40cdf3] memchr("1;\n    }\n  if (lp)\n    {\n      h"..., '\n', 15250) = 0x00f06fbb
[0x4022d1] memchr("    }\n  if (lp)\n    {\n      h->o"..., '\n', 957) = 0x00f06be3
[0x4022d1] memchr("  if (lp)\n    {\n      h->object_"..., '\n', 951) = 0x00f06bed
[0x4022d1] memchr("    {\n      h->object_base = h->"..., '\n', 941) = 0x00f06bf3
[0x4022d1] memchr("      h->object_base = h->next_f"..., '\n', 935) = 0x00f06c28
[0x4022d1] memchr("      h->chunk_limit = lp->limit"..., '\n', 882) = 0x00f06c4a
[0x4022d1] memchr("      h->chunk = lp;\n    }\n  els"..., '\n', 848) = 0x00f06c5f
[0x4022d1] memchr("    }\n  else if (obj != 0)\n    /"..., '\n', 827) = 0x00f06c65
[0x4022d1] memchr("  else if (obj != 0)\n    /* obj "..., '\n', 821) = 0x00f06c7a
[0x4022d1] memchr("    /* obj is not in any of the "..., '\n', 800) = 0x00f06ca5
[0x4022d1] memchr("    abort ();\n}\n\n/* This functio"..., '\n', 757) = 0x00f06cb3
[0x4022d1] memchr("}\n\n/* This function is used from"..., '\n', 743) = 0x00f06cb5
[0x4022d1] memchr("\n/* This function is used from A"..., '\n', 741) = 0x00f06cb6
[0x4022d1] memchr("/* This function is used from AN"..., '\n', 740) = 0x00f06ce3
[0x4022d1] memchr("\nvoid\nobstack_free (h, obj)\n    "..., '\n', 695) = 0x00f06ce4
[0x4022d1] memchr("void\nobstack_free (h, obj)\n     "..., '\n', 694) = 0x00f06ce9
[0x4022d1] memchr("obstack_free (h, obj)\n     struc"..., '\n', 689) = 0x00f06cff
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 667) = 0x00f06d17
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 643) = 0x00f06d29
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 625) = 0x00f06d2b
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 623) = 0x00f06d80
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 538) = 0x00f06dcd
[0x4022d1] memchr("\n  lp = h->chunk;\n  /* We use >="..., '\n', 461) = 0x00f06dce
[0x4022d1] memchr("  lp = h->chunk;\n  /* We use >= "..., '\n', 460) = 0x00f06ddf
[0x4022d1] memchr("  /* We use >= because there can"..., '\n', 443) = 0x00f06e2d
[0x4022d1] memchr("     But there can be an empty o"..., '\n', 365) = 0x00f06e63
[0x4022d1] memchr("     at the end of another chunk"..., '\n', 311) = 0x00f06e89
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 273) = 0x00f06ed1
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 201) = 0x00f06ed7
[0x4022d1] memchr("      plp = lp->prev;\n      CALL"..., '\n', 195) = 0x00f06eed
[0x4022d1] memchr("      CALL_FREEFUN (h, lp);\n    "..., '\n', 173) = 0x00f06f09
[0x4022d1] memchr("      lp = plp;\n      /* If we s"..., '\n', 145) = 0x00f06f19
[0x4022d1] memchr("      /* If we switch chunks, we"..., '\n', 129) = 0x00f06f5d
[0x4022d1] memchr("\t chunk contains an empty object"..., '\n', 61) = 0x00f06f9a
[0x4022d1] memchr("      h->maybe_empty_object = 1;"..., '\n', 0) = NULL
[0x4023cc] fwrite("10292:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      h->maybe_empty_object = 1;"..., 1, 33, 0x7fce6d444260) = 33
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  if (lp)\n    {\n      h->o"..., '1', 15247) = 0x00f075c9
[0x40cdf3] memchr("1grow) (obstack, character)\n    "..., '\n', 13698) = 0x00f075e4
[0x4022d1] memchr("    }\n  if (lp)\n    {\n      h->o"..., '\n', 1535) = 0x00f06fc1
[0x4022d1] memchr("  if (lp)\n    {\n      h->object_"..., '\n', 1529) = 0x00f06fcb
[0x4022d1] memchr("    {\n      h->object_base = h->"..., '\n', 1519) = 0x00f06fd1
[0x4022d1] memchr("      h->object_base = h->next_f"..., '\n', 1513) = 0x00f07006
[0x4022d1] memchr("      h->chunk_limit = lp->limit"..., '\n', 1460) = 0x00f07028
[0x4022d1] memchr("      h->chunk = lp;\n    }\n  els"..., '\n', 1426) = 0x00f0703d
[0x4022d1] memchr("    }\n  else if (obj != 0)\n    /"..., '\n', 1405) = 0x00f07043
[0x4022d1] memchr("  else if (obj != 0)\n    /* obj "..., '\n', 1399) = 0x00f07058
[0x4022d1] memchr("    /* obj is not in any of the "..., '\n', 1378) = 0x00f07083
[0x4022d1] memchr("    abort ();\n}\n\014\n#if 0\n/* These"..., '\n', 1335) = 0x00f07091
[0x4022d1] memchr("}\n\014\n#if 0\n/* These are now turne"..., '\n', 1321) = 0x00f07093
[0x4022d1] memchr("\014\n#if 0\n/* These are now turned "..., '\n', 1319) = 0x00f07095
[0x4022d1] memchr("#if 0\n/* These are now turned of"..., '\n', 1317) = 0x00f0709b
[0x4022d1] memchr("/* These are now turned off beca"..., '\n', 1311) = 0x00f070de
[0x4022d1] memchr("   and it uses bcopy via obstack"..., '\n', 1244) = 0x00f07127
[0x4022d1] memchr("\n/* Now define the functional ve"..., '\n', 1171) = 0x00f07128
[0x4022d1] memchr("/* Now define the functional ver"..., '\n', 1170) = 0x00f07165
[0x4022d1] memchr("   Define them to simply use the"..., '\n', 1109) = 0x00f071ae
[0x4022d1] memchr("\n#ifdef __STDC__\n/* These functi"..., '\n', 1036) = 0x00f071af
[0x4022d1] memchr("#ifdef __STDC__\n/* These functio"..., '\n', 1035) = 0x00f071bf
[0x4022d1] memchr("/* These function definitions do"..., '\n', 1019) = 0x00f07206
[0x4022d1] memchr("   they won't pass through the m"..., '\n', 948) = 0x00f07245
[0x4022d1] memchr("\n/* The function names appear in"..., '\n', 885) = 0x00f07246
[0x4022d1] memchr("/* The function names appear in "..., '\n', 884) = 0x00f07286
[0x4022d1] memchr("   the macro-definitions of the "..., '\n', 820) = 0x00f072cb
[0x4022d1] memchr("\nPOINTER (obstack_base) (obstack"..., '\n', 751) = 0x00f072cc
[0x4022d1] memchr("POINTER (obstack_base) (obstack)"..., '\n', 750) = 0x00f072ed
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 717) = 0x00f0730b
[0x4022d1] memchr("{\n  return obstack_base (obstack"..., '\n', 687) = 0x00f0730d
[0x4022d1] memchr("  return obstack_base (obstack);"..., '\n', 685) = 0x00f0732e
[0x4022d1] memchr("}\n\nPOINTER (obstack_next_free) ("..., '\n', 652) = 0x00f07330
[0x4022d1] memchr("\nPOINTER (obstack_next_free) (ob"..., '\n', 650) = 0x00f07331
[0x4022d1] memchr("POINTER (obstack_next_free) (obs"..., '\n', 649) = 0x00f07357
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 611) = 0x00f07375
[0x4022d1] memchr("{\n  return obstack_next_free (ob"..., '\n', 581) = 0x00f07377
[0x4022d1] memchr("  return obstack_next_free (obst"..., '\n', 579) = 0x00f0739d
[0x4022d1] memchr("}\n\nint (obstack_object_size) (ob"..., '\n', 541) = 0x00f0739f
[0x4022d1] memchr("\nint (obstack_object_size) (obst"..., '\n', 539) = 0x00f073a0
[0x4022d1] memchr("int (obstack_object_size) (obsta"..., '\n', 538) = 0x00f073c4
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 502) = 0x00f073e2
[0x4022d1] memchr("{\n  return obstack_object_size ("..., '\n', 472) = 0x00f073e4
[0x4022d1] memchr("  return obstack_object_size (ob"..., '\n', 470) = 0x00f0740c
[0x4022d1] memchr("}\n\nint (obstack_room) (obstack)\n"..., '\n', 430) = 0x00f0740e
[0x4022d1] memchr("\nint (obstack_room) (obstack)\n  "..., '\n', 428) = 0x00f0740f
[0x4022d1] memchr("int (obstack_room) (obstack)\n   "..., '\n', 427) = 0x00f0742c
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 398) = 0x00f0744a
[0x4022d1] memchr("{\n  return obstack_room (obstack"..., '\n', 368) = 0x00f0744c
[0x4022d1] memchr("  return obstack_room (obstack);"..., '\n', 366) = 0x00f0746d
[0x4022d1] memchr("}\n\nvoid (obstack_grow) (obstack,"..., '\n', 333) = 0x00f0746f
[0x4022d1] memchr("\nvoid (obstack_grow) (obstack, p"..., '\n', 331) = 0x00f07470
[0x4022d1] memchr("void (obstack_grow) (obstack, po"..., '\n', 330) = 0x00f0749f
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 283) = 0x00f074bd
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 253) = 0x00f074d3
[0x4022d1] memchr("     int length;\n{\n  obstack_gro"..., '\n', 231) = 0x00f074e4
[0x4022d1] memchr("{\n  obstack_grow (obstack, point"..., '\n', 214) = 0x00f074e6
[0x4022d1] memchr("  obstack_grow (obstack, pointer"..., '\n', 212) = 0x00f07511
[0x4022d1] memchr("}\n\nvoid (obstack_grow0) (obstack"..., '\n', 169) = 0x00f07513
[0x4022d1] memchr("\nvoid (obstack_grow0) (obstack, "..., '\n', 167) = 0x00f07514
[0x4022d1] memchr("void (obstack_grow0) (obstack, p"..., '\n', 166) = 0x00f07544
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 118) = 0x00f07562
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 88) = 0x00f07578
[0x4022d1] memchr("     int length;\n{\n  obstack_gro"..., '\n', 66) = 0x00f07589
[0x4022d1] memchr("{\n  obstack_grow0 (obstack, poin"..., '\n', 49) = 0x00f0758b
[0x4022d1] memchr("  obstack_grow0 (obstack, pointe"..., '\n', 47) = 0x00f075b7
[0x4022d1] memchr("}\n\nvoid (obstack_1grow) (obstack"..., '\n', 3) = 0x00f075b9
[0x4022d1] memchr("\nvoid (obstack_1grow) (obstack, "..., '\n', 1) = 0x00f075ba
[0x4022d1] memchr("void (obstack_1grow) (obstack, c"..., '\n', 0) = NULL
[0x4023cc] fwrite("10359:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("void (obstack_1grow) (obstack, c"..., 1, 42, 0x7fce6d444260) = 42
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n  "..., '1', 13670) = 0x00f07623
[0x40cdf3] memchr("1grow (obstack, character);\n}\n\nv"..., '\n', 13608) = 0x00f0763e
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 52) = 0x00f07602
[0x4022d1] memchr("     int character;\n{\n  obstack_"..., '\n', 22) = 0x00f07616
[0x4022d1] memchr("{\n  obstack_1grow (obstack, char"..., '\n', 2) = 0x00f07618
[0x4022d1] memchr("  obstack_1grow (obstack, charac"..., '\n', 0) = NULL
[0x4023cc] fwrite("10363:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  obstack_1grow (obstack, charac"..., 1, 38, 0x7fce6d444260) = 38
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\nvoid (obstack_blank) (obstack"..., '1', 13580) = 0x00f076ce
[0x40cdf3] memchr("1grow_fast) (obstack, character)"..., '\n', 13437) = 0x00f076ee
[0x4022d1] memchr("}\n\nvoid (obstack_blank) (obstack"..., '\n', 129) = 0x00f07640
[0x4022d1] memchr("\nvoid (obstack_blank) (obstack, "..., '\n', 127) = 0x00f07641
[0x4022d1] memchr("void (obstack_blank) (obstack, l"..., '\n', 126) = 0x00f07668
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 87) = 0x00f07686
[0x4022d1] memchr("     int length;\n{\n  obstack_bla"..., '\n', 57) = 0x00f07697
[0x4022d1] memchr("{\n  obstack_blank (obstack, leng"..., '\n', 40) = 0x00f07699
[0x4022d1] memchr("  obstack_blank (obstack, length"..., '\n', 38) = 0x00f076bc
[0x4022d1] memchr("}\n\nvoid (obstack_1grow_fast) (ob"..., '\n', 3) = 0x00f076be
[0x4022d1] memchr("\nvoid (obstack_1grow_fast) (obst"..., '\n', 1) = 0x00f076bf
[0x4022d1] memchr("void (obstack_1grow_fast) (obsta"..., '\n', 0) = NULL
[0x4023cc] fwrite("10373:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("void (obstack_1grow_fast) (obsta"..., 1, 47, 0x7fce6d444260) = 47
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n  "..., '1', 13404) = 0x00f0772d
[0x40cdf3] memchr("1grow_fast (obstack, character);"..., '\n', 13342) = 0x00f0774d
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 52) = 0x00f0770c
[0x4022d1] memchr("     int character;\n{\n  obstack_"..., '\n', 22) = 0x00f07720
[0x4022d1] memchr("{\n  obstack_1grow_fast (obstack,"..., '\n', 2) = 0x00f07722
[0x4022d1] memchr("  obstack_1grow_fast (obstack, c"..., '\n', 0) = NULL
[0x4023cc] fwrite("10377:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  obstack_1grow_fast (obstack, c"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("}\n\nvoid (obstack_blank_fast) (ob"..., '1', 13309) = 0x00f07ad5
[0x40cdf3] memchr("1992 Free Software Foundation, I"..., '\n', 12406) = 0x00f07af8
[0x4022d1] memchr("}\n\nvoid (obstack_blank_fast) (ob"..., '\n', 886) = 0x00f0774f
[0x4022d1] memchr("\nvoid (obstack_blank_fast) (obst"..., '\n', 884) = 0x00f07750
[0x4022d1] memchr("void (obstack_blank_fast) (obsta"..., '\n', 883) = 0x00f0777c
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 839) = 0x00f0779a
[0x4022d1] memchr("     int length;\n{\n  obstack_bla"..., '\n', 809) = 0x00f077ab
[0x4022d1] memchr("{\n  obstack_blank_fast (obstack,"..., '\n', 792) = 0x00f077ad
[0x4022d1] memchr("  obstack_blank_fast (obstack, l"..., '\n', 790) = 0x00f077d5
[0x4022d1] memchr("}\n\nPOINTER (obstack_finish) (obs"..., '\n', 750) = 0x00f077d7
[0x4022d1] memchr("\nPOINTER (obstack_finish) (obsta"..., '\n', 748) = 0x00f077d8
[0x4022d1] memchr("POINTER (obstack_finish) (obstac"..., '\n', 747) = 0x00f077fb
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 712) = 0x00f07819
[0x4022d1] memchr("{\n  return obstack_finish (obsta"..., '\n', 682) = 0x00f0781b
[0x4022d1] memchr("  return obstack_finish (obstack"..., '\n', 680) = 0x00f0783e
[0x4022d1] memchr("}\n\nPOINTER (obstack_alloc) (obst"..., '\n', 645) = 0x00f07840
[0x4022d1] memchr("\nPOINTER (obstack_alloc) (obstac"..., '\n', 643) = 0x00f07841
[0x4022d1] memchr("POINTER (obstack_alloc) (obstack"..., '\n', 642) = 0x00f0786b
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 600) = 0x00f07889
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 570) = 0x00f0789a
[0x4022d1] memchr("{\n  return obstack_alloc (obstac"..., '\n', 553) = 0x00f0789c
[0x4022d1] memchr("  return obstack_alloc (obstack,"..., '\n', 551) = 0x00f078c6
[0x4022d1] memchr("}\n\nPOINTER (obstack_copy) (obsta"..., '\n', 509) = 0x00f078c8
[0x4022d1] memchr("\nPOINTER (obstack_copy) (obstack"..., '\n', 507) = 0x00f078c9
[0x4022d1] memchr("POINTER (obstack_copy) (obstack,"..., '\n', 506) = 0x00f078fb
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 456) = 0x00f07919
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 426) = 0x00f0792f
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 404) = 0x00f07940
[0x4022d1] memchr("{\n  return obstack_copy (obstack"..., '\n', 387) = 0x00f07942
[0x4022d1] memchr("  return obstack_copy (obstack, "..., '\n', 385) = 0x00f07974
[0x4022d1] memchr("}\n\nPOINTER (obstack_copy0) (obst"..., '\n', 335) = 0x00f07976
[0x4022d1] memchr("\nPOINTER (obstack_copy0) (obstac"..., '\n', 333) = 0x00f07977
[0x4022d1] memchr("POINTER (obstack_copy0) (obstack"..., '\n', 332) = 0x00f079aa
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 281) = 0x00f079c8
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 251) = 0x00f079de
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 229) = 0x00f079ef
[0x4022d1] memchr("{\n  return obstack_copy0 (obstac"..., '\n', 212) = 0x00f079f1
[0x4022d1] memchr("  return obstack_copy0 (obstack,"..., '\n', 210) = 0x00f07a24
[0x4022d1] memchr("}\n\n#endif /* __STDC__ */\n\n#endif"..., '\n', 159) = 0x00f07a26
[0x4022d1] memchr("\n#endif /* __STDC__ */\n\n#endif /"..., '\n', 157) = 0x00f07a27
[0x4022d1] memchr("#endif /* __STDC__ */\n\n#endif /*"..., '\n', 156) = 0x00f07a3d
[0x4022d1] memchr("\n#endif /* 0 */\n\n#endif\t/* _LIBC"..., '\n', 134) = 0x00f07a3e
[0x4022d1] memchr("#endif /* 0 */\n\n#endif\t/* _LIBC "..., '\n', 133) = 0x00f07a4d
[0x4022d1] memchr("\n#endif\t/* _LIBC or not __GNU_LI"..., '\n', 118) = 0x00f07a4e
[0x4022d1] memchr("#endif\t/* _LIBC or not __GNU_LIB"..., '\n', 117) = 0x00f07a7a
[0x4022d1] memchr("/* search.c - searching subrouti"..., '\n', 73) = 0x00f07ac3
[0x4022d1] memchr("   Copyright (C) 1992 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("10422:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("   Copyright (C) 1992 Free Softw"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., '1', 12370) = 0x00f07d96
[0x40cdf3] memchr("139, USA.\n\n   Written August 199"..., '\n', 11701) = 0x00f07d9f
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 618) = 0x00f07af9
[0x4022d1] memchr("   This program is free software"..., '\n', 617) = 0x00f07b41
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 545) = 0x00f07b89
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 473) = 0x00f07bd0
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 402) = 0x00f07be6
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 380) = 0x00f07be7
[0x4022d1] memchr("   This program is distributed i"..., '\n', 379) = 0x00f07c2a
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 312) = 0x00f07c6c
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 246) = 0x00f07cad
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x00f07cdd
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x00f07cde
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x00f07d23
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x00f07d62
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("10436:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7fce6d444260) = 61
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n   Written August 1992 by Mike "..., '1', 11691) = 0x00f07db3
[0x40cdf3] memchr("1992 by Mike Haertel. */\n\n/*#inc"..., '\n', 11672) = 0x00f07dcb
[0x4022d1] memchr("\n   Written August 1992 by Mike "..., '\n', 1) = 0x00f07da0
[0x4022d1] memchr("   Written August 1992 by Mike H"..., '\n', 0) = NULL
[0x4023cc] fwrite("10438:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("   Written August 1992 by Mike H"..., 1, 43, 0x7fce6d444260) = 43
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/*#include <ctype.h>*/\n\n#ifdef "..., '1', 11647) = 0x00f07e46
[0x40cdf3] memchr("1\n#endif\n#if flag_stdlib==0\n#inc"..., '\n', 11525) = 0x00f07e47
[0x4022d1] memchr("\n/*#include <ctype.h>*/\n\n#ifdef "..., '\n', 102) = 0x00f07dcc
[0x4022d1] memchr("/*#include <ctype.h>*/\n\n#ifdef S"..., '\n', 101) = 0x00f07de3
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_li"..., '\n', 78) = 0x00f07de4
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_lim"..., '\n', 77) = 0x00f07df8
[0x4022d1] memchr("#if flag_limits==0\n#undef RE_DUP"..., '\n', 57) = 0x00f07e0b
[0x4022d1] memchr("#undef RE_DUP_MAX\n#include <limi"..., '\n', 38) = 0x00f07e1d
[0x4022d1] memchr("#include <limits.h>\n#define flag"..., '\n', 20) = 0x00f07e31
[0x4022d1] memchr("#define flag_limits 1\n#endif\n#if"..., '\n', 0) = NULL
[0x4023cc] fwrite("10446:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define flag_limits 1\n#endif\n#if"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#if flag_stdlib==0\n#inclu"..., '1', 11523) = 0x00f07e8a
[0x40cdf3] memchr("1\n#endif\n#else\n#define UCHAR_MAX"..., '\n', 11457) = 0x00f07e8b
[0x4022d1] memchr("#endif\n#if flag_stdlib==0\n#inclu"..., '\n', 46) = 0x00f07e4e
[0x4022d1] memchr("#if flag_stdlib==0\n#include <std"..., '\n', 39) = 0x00f07e61
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 20) = 0x00f07e75
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 0) = NULL
[0x4023cc] fwrite("10450:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define flag_stdlib 1\n#endif\n#el"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#else\n#define UCHAR_MAX 2"..., '1', 11455) = 0x00f07ef1
[0x40cdf3] memchr("1\n#endif\nextern char *malloc();\n"..., '\n', 11354) = 0x00f07ef2
[0x4022d1] memchr("#endif\n#else\n#define UCHAR_MAX 2"..., '\n', 79) = 0x00f07e92
[0x4022d1] memchr("#else\n#define UCHAR_MAX 255\n#if "..., '\n', 72) = 0x00f07e98
[0x4022d1] memchr("#define UCHAR_MAX 255\n#if flag_s"..., '\n', 66) = 0x00f07eae
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 44) = 0x00f07ec3
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 23) = 0x00f07eda
[0x4022d1] memchr("#define flag_systypes 1\n#endif\ne"..., '\n', 0) = NULL
[0x4023cc] fwrite("10456:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define flag_systypes 1\n#endif\ne"..., 1, 24, 0x7fce6d444260) = 24
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\nextern char *malloc();\n#e"..., '1', 11352) = 0x00f07f67
[0x40cdf3] memchr("1\n#endif\n#ifdef NEED_MEMORY_H\n#i"..., '\n', 11236) = 0x00f07f68
[0x4022d1] memchr("#endif\nextern char *malloc();\n#e"..., '\n', 96) = 0x00f07ef9
[0x4022d1] memchr("extern char *malloc();\n#endif\n\n#"..., '\n', 89) = 0x00f07f10
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_MEMCHR\n#if f"..., '\n', 66) = 0x00f07f17
[0x4022d1] memchr("\n#ifdef HAVE_MEMCHR\n#if flag_str"..., '\n', 59) = 0x00f07f18
[0x4022d1] memchr("#ifdef HAVE_MEMCHR\n#if flag_stri"..., '\n', 58) = 0x00f07f2b
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 39) = 0x00f07f3e
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 20) = 0x00f07f52
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 0) = NULL
[0x4023cc] fwrite("10464:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define flag_string 1\n#endif\n#if"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '1', 11234) = 0x00f07fc0
[0x40cdf3] memchr("1\n#endif\n#endif\n#else\n#ifdef __S"..., '\n', 11147) = 0x00f07fc1
[0x4022d1] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '\n', 67) = 0x00f07f6f
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#if flag_me"..., '\n', 60) = 0x00f07f84
[0x4022d1] memchr("#if flag_memory==0\n#include <mem"..., '\n', 39) = 0x00f07f97
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 20) = 0x00f07fab
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#en"..., '\n', 0) = NULL
[0x4023cc] fwrite("10469:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define flag_memory 1\n#endif\n#en"..., 1, 22, 0x7fce6d444260) = 22
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '1', 11145) = 0x00f081fd
[0x40cdf3] memchr("1)\n\n#if __STDC__\nstatic void Gco"..., '\n', 10574) = 0x00f081ff
[0x4022d1] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '\n', 544) = 0x00f07fc8
[0x4022d1] memchr("#endif\n#else\n#ifdef __STDC__\next"..., '\n', 537) = 0x00f07fcf
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 530) = 0x00f07fd5
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 524) = 0x00f07fe5
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 508) = 0x00f07ffc
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 485) = 0x00f08002
[0x4022d1] memchr("extern char *memchr();\n#endif\n#e"..., '\n', 479) = 0x00f08019
[0x4022d1] memchr("#endif\n#endif\n\n#if defined(HAVE_"..., '\n', 456) = 0x00f08020
[0x4022d1] memchr("#endif\n\n#if defined(HAVE_STRING_"..., '\n', 449) = 0x00f08027
[0x4022d1] memchr("\n#if defined(HAVE_STRING_H) || d"..., '\n', 442) = 0x00f08028
[0x4022d1] memchr("#if defined(HAVE_STRING_H) || de"..., '\n', 441) = 0x00f0805c
[0x4022d1] memchr("#undef bcopy\n#define bcopy(s, d,"..., '\n', 389) = 0x00f08069
[0x4022d1] memchr("#define bcopy(s, d, n) memcpy((d"..., '\n', 376) = 0x00f08096
[0x4022d1] memchr("#endif\n\n#ifdef isascii\n#define I"..., '\n', 331) = 0x00f0809d
[0x4022d1] memchr("\n#ifdef isascii\n#define ISALNUM("..., '\n', 324) = 0x00f0809e
[0x4022d1] memchr("#ifdef isascii\n#define ISALNUM(C"..., '\n', 323) = 0x00f080ad
[0x4022d1] memchr("#define ISALNUM(C) (isascii(C) &"..., '\n', 308) = 0x00f080db
[0x4022d1] memchr("#define ISUPPER(C) (isascii(C) &"..., '\n', 262) = 0x00f08109
[0x4022d1] memchr("#else\n#define ISALNUM(C) isalnum"..., '\n', 216) = 0x00f0810f
[0x4022d1] memchr("#define ISALNUM(C) isalnum(C)\n#d"..., '\n', 210) = 0x00f0812d
[0x4022d1] memchr("#define ISUPPER(C) isupper(C)\n#e"..., '\n', 180) = 0x00f0814b
[0x4022d1] memchr("#endif\n\n#define TOLOWER(C) (ISUP"..., '\n', 150) = 0x00f08152
[0x4022d1] memchr("\n#define TOLOWER(C) (ISUPPER(C) "..., '\n', 143) = 0x00f08153
[0x4022d1] memchr("#define TOLOWER(C) (ISUPPER(C) ?"..., '\n', 142) = 0x00f08186
[0x4022d1] memchr("\n/*#include "grep.h"*/\n/*#includ"..., '\n', 91) = 0x00f08187
[0x4022d1] memchr("/*#include "grep.h"*/\n/*#include"..., '\n', 90) = 0x00f0819d
[0x4022d1] memchr("/*#include "dfa.h"*/\n/*#include "..., '\n', 68) = 0x00f081b2
[0x4022d1] memchr("/*#include "kwset.h"*/\n/*#includ"..., '\n', 47) = 0x00f081c9
[0x4022d1] memchr("/*#include "regex.h"*/\n\n#define "..., '\n', 24) = 0x00f081e0
[0x4022d1] memchr("\n#define NCHAR (UCHAR_MAX + 1)\n\n"..., '\n', 1) = 0x00f081e1
[0x4022d1] memchr("#define NCHAR (UCHAR_MAX + 1)\n\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("10500:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("#define NCHAR (UCHAR_MAX + 1)\n\n#"..., 1, 30, 0x7fce6d444260) = 30
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n#if __STDC__\nstatic void Gcompi"..., '1', 10571) = 0x00f08592
[0x40cdf3] memchr("1;\n\n/* Regex compiled regexp. */"..., '\n', 9657) = 0x00f08594
[0x4022d1] memchr("\n#if __STDC__\nstatic void Gcompi"..., '\n', 892) = 0x00f08200
[0x4022d1] memchr("#if __STDC__\nstatic void Gcompil"..., '\n', 891) = 0x00f0820d
[0x4022d1] memchr("static void Gcompile(char *, siz"..., '\n', 878) = 0x00f08233
[0x4022d1] memchr("static void Ecompile(char *, siz"..., '\n', 840) = 0x00f08259
[0x4022d1] memchr("static char *EGexecute(char *, s"..., '\n', 802) = 0x00f0828a
[0x4022d1] memchr("static void Fcompile(char *, siz"..., '\n', 753) = 0x00f082b0
[0x4022d1] memchr("static char *Fexecute(char *, si"..., '\n', 715) = 0x00f082e0
[0x4022d1] memchr("#else\nstatic void Gcompile();\nst"..., '\n', 667) = 0x00f082e6
[0x4022d1] memchr("static void Gcompile();\nstatic v"..., '\n', 661) = 0x00f082fe
[0x4022d1] memchr("static void Ecompile();\nstatic c"..., '\n', 637) = 0x00f08316
[0x4022d1] memchr("static char *EGexecute();\nstatic"..., '\n', 613) = 0x00f08330
[0x4022d1] memchr("static void Fcompile();\nstatic c"..., '\n', 587) = 0x00f08348
[0x4022d1] memchr("static char *Fexecute();\n#endif\n"..., '\n', 563) = 0x00f08361
[0x4022d1] memchr("#endif\n\n/* Here is the matchers "..., '\n', 538) = 0x00f08368
[0x4022d1] memchr("\n/* Here is the matchers vector "..., '\n', 531) = 0x00f08369
[0x4022d1] memchr("/* Here is the matchers vector f"..., '\n', 530) = 0x00f083a1
[0x4022d1] memchr("struct matcher matchers[] = {\n  "..., '\n', 474) = 0x00f083bf
[0x4022d1] memchr("  { "default", Gcompile, EGexecu"..., '\n', 444) = 0x00f083e5
[0x4022d1] memchr("  { "grep", Gcompile, EGexecute "..., '\n', 406) = 0x00f08408
[0x4022d1] memchr("  { "ggrep", Gcompile, EGexecute"..., '\n', 371) = 0x00f0842c
[0x4022d1] memchr("  { "egrep", Ecompile, EGexecute"..., '\n', 335) = 0x00f08450
[0x4022d1] memchr("  { "posix-egrep", Ecompile, EGe"..., '\n', 299) = 0x00f0847a
[0x4022d1] memchr("  { "gegrep", Ecompile, EGexecut"..., '\n', 257) = 0x00f0849f
[0x4022d1] memchr("  { "fgrep", Fcompile, Fexecute "..., '\n', 220) = 0x00f084c2
[0x4022d1] memchr("  { "gfgrep", Fcompile, Fexecute"..., '\n', 185) = 0x00f084e6
[0x4022d1] memchr("  { 0, 0, 0 },\n};\n\n/* For -w, we"..., '\n', 149) = 0x00f084f5
[0x4022d1] memchr("};\n\n/* For -w, we also consider "..., '\n', 134) = 0x00f084f8
[0x4022d1] memchr("\n/* For -w, we also consider _ t"..., '\n', 131) = 0x00f084f9
[0x4022d1] memchr("/* For -w, we also consider _ to"..., '\n', 130) = 0x00f08533
[0x4022d1] memchr("#define WCHAR(C) (ISALNUM(C) || "..., '\n', 72) = 0x00f0855f
[0x4022d1] memchr("\n/* DFA compiled regexp. */\nstat"..., '\n', 28) = 0x00f08560
[0x4022d1] memchr("/* DFA compiled regexp. */\nstati"..., '\n', 27) = 0x00f0857b
[0x4022d1] memchr("static struct dfa dfa_1;\n\n/* Reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("10533:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("static struct dfa dfa_1;\n\n/* Reg"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n/* Regex compiled regexp. */\nst"..., '1', 9654) = 0x00f0899b
[0x40cdf3] memchr("1.musts)\n    {\n      kwsinit();\n"..., '\n', 8624) = 0x00f089a3
[0x4022d1] memchr("\n/* Regex compiled regexp. */\nst"..., '\n', 1020) = 0x00f08595
[0x4022d1] memchr("/* Regex compiled regexp. */\nsta"..., '\n', 1019) = 0x00f085b2
[0x4022d1] memchr("static struct re_pattern_buffer "..., '\n', 990) = 0x00f085d9
[0x4022d1] memchr("\n/* KWset compiled pattern.  For"..., '\n', 951) = 0x00f085da
[0x4022d1] memchr("/* KWset compiled pattern.  For "..., '\n', 950) = 0x00f0861c
[0x4022d1] memchr("   a list of strings, at least o"..., '\n', 884) = 0x00f0865d
[0x4022d1] memchr("   any string matching the regex"..., '\n', 819) = 0x00f08683
[0x4022d1] memchr("static kwset_t kwset;\n\n/* Last c"..., '\n', 781) = 0x00f08699
[0x4022d1] memchr("\n/* Last compiled fixed string k"..., '\n', 759) = 0x00f0869a
[0x4022d1] memchr("/* Last compiled fixed string kn"..., '\n', 758) = 0x00f086db
[0x4022d1] memchr("   If kwsexec() returns < lastex"..., '\n', 693) = 0x00f08716
[0x4022d1] memchr("   call the regexp matcher at al"..., '\n', 634) = 0x00f0873c
[0x4022d1] memchr("static int lastexact;\n\nvoid\ndfae"..., '\n', 596) = 0x00f08752
[0x4022d1] memchr("\nvoid\ndfaerror(mesg)\n     char *"..., '\n', 574) = 0x00f08753
[0x4022d1] memchr("void\ndfaerror(mesg)\n     char *m"..., '\n', 573) = 0x00f08758
[0x4022d1] memchr("dfaerror(mesg)\n     char *mesg;\n"..., '\n', 568) = 0x00f08767
[0x4022d1] memchr("     char *mesg;\n{\n  fatal(mesg,"..., '\n', 553) = 0x00f08778
[0x4022d1] memchr("{\n  fatal(mesg, 0);\n}\n\nstatic vo"..., '\n', 536) = 0x00f0877a
[0x4022d1] memchr("  fatal(mesg, 0);\n}\n\nstatic void"..., '\n', 534) = 0x00f0878c
[0x4022d1] memchr("}\n\nstatic void\nkwsinit()\n{\n  sta"..., '\n', 516) = 0x00f0878e
[0x4022d1] memchr("\nstatic void\nkwsinit()\n{\n  stati"..., '\n', 514) = 0x00f0878f
[0x4022d1] memchr("static void\nkwsinit()\n{\n  static"..., '\n', 513) = 0x00f0879b
[0x4022d1] memchr("kwsinit()\n{\n  static char trans["..., '\n', 501) = 0x00f087a5
[0x4022d1] memchr("{\n  static char trans[NCHAR];\n  "..., '\n', 491) = 0x00f087a7
[0x4022d1] memchr("  static char trans[NCHAR];\n  in"..., '\n', 489) = 0x00f087c3
[0x4022d1] memchr("  int i;\n\n  if (match_icase)\n   "..., '\n', 461) = 0x00f087cc
[0x4022d1] memchr("\n  if (match_icase)\n    for (i ="..., '\n', 452) = 0x00f087cd
[0x4022d1] memchr("  if (match_icase)\n    for (i = "..., '\n', 451) = 0x00f087e0
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 432) = 0x00f08800
[0x4022d1] memchr("      trans[i] = TOLOWER(i);\n\n  "..., '\n', 400) = 0x00f0881d
[0x4022d1] memchr("\n  if (!(kwset = kwsalloc(match_"..., '\n', 371) = 0x00f0881e
[0x4022d1] memchr("  if (!(kwset = kwsalloc(match_i"..., '\n', 370) = 0x00f0885b
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 309) = 0x00f0887d
[0x4022d1] memchr("}  \n\n/* If the DFA turns out to "..., '\n', 275) = 0x00f08881
[0x4022d1] memchr("\n/* If the DFA turns out to have"..., '\n', 271) = 0x00f08882
[0x4022d1] memchr("/* If the DFA turns out to have "..., '\n', 270) = 0x00f088c3
[0x4022d1] memchr("   which must occur in the match"..., '\n', 205) = 0x00f08903
[0x4022d1] memchr("   to find those strings, and th"..., '\n', 141) = 0x00f08944
[0x4022d1] memchr("   matches. */\nstatic void\nkwsmu"..., '\n', 76) = 0x00f08953
[0x4022d1] memchr("static void\nkwsmusts()\n{\n  struc"..., '\n', 61) = 0x00f0895f
[0x4022d1] memchr("kwsmusts()\n{\n  struct dfamust *d"..., '\n', 49) = 0x00f0896a
[0x4022d1] memchr("{\n  struct dfamust *dm;\n  char *"..., '\n', 38) = 0x00f0896c
[0x4022d1] memchr("  struct dfamust *dm;\n  char *er"..., '\n', 36) = 0x00f08982
[0x4022d1] memchr("  char *err;\n\n  if (dfa_1.musts)"..., '\n', 14) = 0x00f0898f
[0x4022d1] memchr("\n  if (dfa_1.musts)\n    {\n      "..., '\n', 1) = 0x00f08990
[0x4022d1] memchr("  if (dfa_1.musts)\n    {\n      k"..., '\n', 0) = NULL
[0x4023cc] fwrite("10579:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  if (dfa_1.musts)\n    {\n      k"..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      kwsinit();\n      /* "..., '1', 8615) = 0x00f08a6f
[0x40cdf3] memchr("1.musts; dm; dm = dm->next)\n\t{\n\t"..., '\n', 8412) = 0x00f08a8a
[0x4022d1] memchr("    {\n      kwsinit();\n      /* "..., '\n', 183) = 0x00f089a9
[0x4022d1] memchr("      kwsinit();\n      /* First,"..., '\n', 177) = 0x00f089ba
[0x4022d1] memchr("      /* First, we compile in th"..., '\n', 160) = 0x00f089f9
[0x4022d1] memchr("\t matches.  The kwset matcher wi"..., '\n', 97) = 0x00f08a2d
[0x4022d1] memchr("\t of the matching string that it"..., '\n', 45) = 0x00f08a5a
[0x4022d1] memchr("      for (dm = dfa_1.musts; dm;"..., '\n', 0) = NULL
[0x4023cc] fwrite("10585:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      for (dm = dfa_1.musts; dm;"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  if (!dm->exact)\n\t    conti"..., '1', 8384) = 0x00f08b8a
[0x40cdf3] memchr("1.musts; dm; dm = dm->next)\n\t{\n\t"..., '\n', 8129) = 0x00f08ba5
[0x4022d1] memchr("\t{\n\t  if (!dm->exact)\n\t    conti"..., '\n', 235) = 0x00f08a8d
[0x4022d1] memchr("\t  if (!dm->exact)\n\t    continue"..., '\n', 232) = 0x00f08aa0
[0x4022d1] memchr("\t    continue;\n\t  ++lastexact;\n\t"..., '\n', 213) = 0x00f08aaf
[0x4022d1] memchr("\t  ++lastexact;\n\t  if ((err = kw"..., '\n', 198) = 0x00f08abf
[0x4022d1] memchr("\t  if ((err = kwsincr(kwset, dm-"..., '\n', 182) = 0x00f08aff
[0x4022d1] memchr("\t    fatal(err, 0);\n\t}\n      /* "..., '\n', 118) = 0x00f08b13
[0x4022d1] memchr("\t}\n      /* Now, we compile the "..., '\n', 98) = 0x00f08b16
[0x4022d1] memchr("      /* Now, we compile the sub"..., '\n', 95) = 0x00f08b50
[0x4022d1] memchr("\t the use of the regexp matcher."..., '\n', 37) = 0x00f08b75
[0x4022d1] memchr("      for (dm = dfa_1.musts; dm;"..., '\n', 0) = NULL
[0x4023cc] fwrite("10595:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      for (dm = dfa_1.musts; dm;"..., 1, 48, 0x7fce6d444260) = 48
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t{\n\t  if (dm->exact)\n\t    contin"..., '1', 8101) = 0x00f08dbd
[0x40cdf3] memchr("1);\n\n  /* In the match_words and"..., '\n', 7566) = 0x00f08dc0
[0x4022d1] memchr("\t{\n\t  if (dm->exact)\n\t    contin"..., '\n', 520) = 0x00f08ba8
[0x4022d1] memchr("\t  if (dm->exact)\n\t    continue;"..., '\n', 517) = 0x00f08bba
[0x4022d1] memchr("\t    continue;\n\t  if ((err = kws"..., '\n', 499) = 0x00f08bc9
[0x4022d1] memchr("\t  if ((err = kwsincr(kwset, dm-"..., '\n', 484) = 0x00f08c09
[0x4022d1] memchr("\t    fatal(err, 0);\n\t}\n      if "..., '\n', 420) = 0x00f08c1d
[0x4022d1] memchr("\t}\n      if ((err = kwsprep(kwse"..., '\n', 400) = 0x00f08c20
[0x4022d1] memchr("      if ((err = kwsprep(kwset))"..., '\n', 397) = 0x00f08c47
[0x4022d1] memchr("\tfatal(err, 0);\n    }\n}\n\nstatic "..., '\n', 358) = 0x00f08c57
[0x4022d1] memchr("    }\n}\n\nstatic void\nGcompile(pa"..., '\n', 342) = 0x00f08c5d
[0x4022d1] memchr("}\n\nstatic void\nGcompile(pattern,"..., '\n', 336) = 0x00f08c5f
[0x4022d1] memchr("\nstatic void\nGcompile(pattern, s"..., '\n', 334) = 0x00f08c60
[0x4022d1] memchr("static void\nGcompile(pattern, si"..., '\n', 333) = 0x00f08c6c
[0x4022d1] memchr("Gcompile(pattern, size)\n     cha"..., '\n', 321) = 0x00f08c84
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 297) = 0x00f08c98
[0x4022d1] memchr("     size_t size;\n{\n#ifdef __STD"..., '\n', 277) = 0x00f08caa
[0x4022d1] memchr("{\n#ifdef __STDC__\n  const\n#endif"..., '\n', 259) = 0x00f08cac
[0x4022d1] memchr("#ifdef __STDC__\n  const\n#endif\n "..., '\n', 257) = 0x00f08cbc
[0x4022d1] memchr("  const\n#endif\n  char *err;\n\n  r"..., '\n', 241) = 0x00f08cc4
[0x4022d1] memchr("#endif\n  char *err;\n\n  re_set_sy"..., '\n', 233) = 0x00f08ccb
[0x4022d1] memchr("  char *err;\n\n  re_set_syntax(RE"..., '\n', 226) = 0x00f08cd8
[0x4022d1] memchr("\n  re_set_syntax(RE_SYNTAX_GREP "..., '\n', 213) = 0x00f08cd9
[0x4022d1] memchr("  re_set_syntax(RE_SYNTAX_GREP |"..., '\n', 212) = 0x00f08d15
[0x4022d1] memchr("  dfasyntax(RE_SYNTAX_GREP | RE_"..., '\n', 152) = 0x00f08d5a
[0x4022d1] memchr("\n  if ((err = re_compile_pattern"..., '\n', 83) = 0x00f08d5b
[0x4022d1] memchr("  if ((err = re_compile_pattern("..., '\n', 82) = 0x00f08d99
[0x4022d1] memchr("    fatal(err, 0);\n\n  dfainit(&d"..., '\n', 20) = 0x00f08dac
[0x4022d1] memchr("\n  dfainit(&dfa_1);\n\n  /* In the"..., '\n', 1) = 0x00f08dad
[0x4022d1] memchr("  dfainit(&dfa_1);\n\n  /* In the "..., '\n', 0) = NULL
[0x4023cc] fwrite("10623:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  dfainit(&dfa_1);\n\n  /* In the "..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* In the match_words and mat"..., '1', 7562) = 0x00f09180
[0x40cdf3] memchr("1, 1);\n    }\n  else\n    dfacomp("..., '\n', 6603) = 0x00f09186
[0x4022d1] memchr("\n  /* In the match_words and mat"..., '\n', 934) = 0x00f08dc1
[0x4022d1] memchr("  /* In the match_words and matc"..., '\n', 933) = 0x00f08e0b
[0x4022d1] memchr("     for the DFA matcher that wi"..., '\n', 859) = 0x00f08e57
[0x4022d1] memchr("     Then if DFA succeeds we do "..., '\n', 783) = 0x00f08ea0
[0x4022d1] memchr("     to decide whether the match"..., '\n', 710) = 0x00f08ed9
[0x4022d1] memchr("  if (match_words || match_lines"..., '\n', 653) = 0x00f08efb
[0x4022d1] memchr("    {\n      /* In the whole-word"..., '\n', 619) = 0x00f08f01
[0x4022d1] memchr("      /* In the whole-word case,"..., '\n', 613) = 0x00f08f36
[0x4022d1] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., '\n', 560) = 0x00f08f63
[0x4022d1] memchr("\t In the whole-line case, we use"..., '\n', 515) = 0x00f08f91
[0x4022d1] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., '\n', 469) = 0x00f08fa4
[0x4022d1] memchr("\t BUG: Using [A-Za-z_] is locale"..., '\n', 450) = 0x00f08fd4
[0x4022d1] memchr("\n      char *n = malloc(size + 5"..., '\n', 402) = 0x00f08fd5
[0x4022d1] memchr("      char *n = malloc(size + 50"..., '\n', 401) = 0x00f08ff8
[0x4022d1] memchr("      int i = 0;\n\n      strcpy(n"..., '\n', 366) = 0x00f09009
[0x4022d1] memchr("\n      strcpy(n, "");\n\n      if "..., '\n', 349) = 0x00f0900a
[0x4022d1] memchr("      strcpy(n, "");\n\n      if ("..., '\n', 348) = 0x00f0901f
[0x4022d1] memchr("\n      if (match_lines)\n\tstrcpy("..., '\n', 327) = 0x00f09020
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 326) = 0x00f09037
[0x4022d1] memchr("\tstrcpy(n, "^\\\\(");\n      if (ma"..., '\n', 303) = 0x00f0904b
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 283) = 0x00f09062
[0x4022d1] memchr("\tstrcpy(n, "\\\\(^\\\\|[^0-9A-Za-z_]"..., '\n', 260) = 0x00f0908c
[0x4022d1] memchr("\n      i = strlen(n);\n      bcop"..., '\n', 218) = 0x00f0908d
[0x4022d1] memchr("      i = strlen(n);\n      bcopy"..., '\n', 217) = 0x00f090a2
[0x4022d1] memchr("      bcopy(pattern, n + i, size"..., '\n', 196) = 0x00f090c5
[0x4022d1] memchr("      i += size;\n\n      if (matc"..., '\n', 161) = 0x00f090d6
[0x4022d1] memchr("\n      if (match_words)\n\tstrcpy("..., '\n', 144) = 0x00f090d7
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 143) = 0x00f090ee
[0x4022d1] memchr("\tstrcpy(n + i, "\\\\)\\\\([^0-9A-Za-"..., '\n', 120) = 0x00f0911c
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 74) = 0x00f09133
[0x4022d1] memchr("\tstrcpy(n + i, "\\\\)$");\n\n      i"..., '\n', 51) = 0x00f0914b
[0x4022d1] memchr("\n      i += strlen(n + i);\n     "..., '\n', 27) = 0x00f0914c
[0x4022d1] memchr("      i += strlen(n + i);\n      "..., '\n', 26) = 0x00f09166
[0x4022d1] memchr("      dfacomp(n, i, &dfa_1, 1);\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("10657:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      dfacomp(n, i, &dfa_1, 1);\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  else\n    dfacomp(pattern"..., '1', 6596) = 0x00f091b4
[0x40cdf3] memchr("1, 1);\n\n  kwsmusts();\n}\n\nstatic "..., '\n', 6551) = 0x00f091ba
[0x4022d1] memchr("    }\n  else\n    dfacomp(pattern"..., '\n', 13) = 0x00f0918c
[0x4022d1] memchr("  else\n    dfacomp(pattern, size"..., '\n', 7) = 0x00f09193
[0x4022d1] memchr("    dfacomp(pattern, size, &dfa_"..., '\n', 0) = NULL
[0x4023cc] fwrite("10660:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("    dfacomp(pattern, size, &dfa_"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  kwsmusts();\n}\n\nstatic void\nEc"..., '1', 6544) = 0x00f093a8
[0x40cdf3] memchr("1);\n\n  /* In the match_words and"..., '\n', 6051) = 0x00f093ab
[0x4022d1] memchr("\n  kwsmusts();\n}\n\nstatic void\nEc"..., '\n', 478) = 0x00f091bb
[0x4022d1] memchr("  kwsmusts();\n}\n\nstatic void\nEco"..., '\n', 477) = 0x00f091c9
[0x4022d1] memchr("}\n\nstatic void\nEcompile(pattern,"..., '\n', 463) = 0x00f091cb
[0x4022d1] memchr("\nstatic void\nEcompile(pattern, s"..., '\n', 461) = 0x00f091cc
[0x4022d1] memchr("static void\nEcompile(pattern, si"..., '\n', 460) = 0x00f091d8
[0x4022d1] memchr("Ecompile(pattern, size)\n     cha"..., '\n', 448) = 0x00f091f0
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 424) = 0x00f09204
[0x4022d1] memchr("     size_t size;\n{\n#ifdef __STD"..., '\n', 404) = 0x00f09216
[0x4022d1] memchr("{\n#ifdef __STDC__\n  const\n#endif"..., '\n', 386) = 0x00f09218
[0x4022d1] memchr("#ifdef __STDC__\n  const\n#endif\n "..., '\n', 384) = 0x00f09228
[0x4022d1] memchr("  const\n#endif\n  char *err;\n\n  i"..., '\n', 368) = 0x00f09230
[0x4022d1] memchr("#endif\n  char *err;\n\n  if (strcm"..., '\n', 360) = 0x00f09237
[0x4022d1] memchr("  char *err;\n\n  if (strcmp(match"..., '\n', 353) = 0x00f09244
[0x4022d1] memchr("\n  if (strcmp(matcher, "posix-eg"..., '\n', 340) = 0x00f09245
[0x4022d1] memchr("  if (strcmp(matcher, "posix-egr"..., '\n', 339) = 0x00f09270
[0x4022d1] memchr("    {\n      re_set_syntax(RE_SYN"..., '\n', 296) = 0x00f09276
[0x4022d1] memchr("      re_set_syntax(RE_SYNTAX_PO"..., '\n', 290) = 0x00f092a2
[0x4022d1] memchr("      dfasyntax(RE_SYNTAX_POSIX_"..., '\n', 246) = 0x00f092d7
[0x4022d1] memchr("    }\n  else\n    {\n      re_set_"..., '\n', 193) = 0x00f092dd
[0x4022d1] memchr("  else\n    {\n      re_set_syntax"..., '\n', 187) = 0x00f092e4
[0x4022d1] memchr("    {\n      re_set_syntax(RE_SYN"..., '\n', 180) = 0x00f092ea
[0x4022d1] memchr("      re_set_syntax(RE_SYNTAX_EG"..., '\n', 174) = 0x00f09310
[0x4022d1] memchr("      dfasyntax(RE_SYNTAX_EGREP,"..., '\n', 136) = 0x00f0933f
[0x4022d1] memchr("    }\n\n  if ((err = re_compile_p"..., '\n', 89) = 0x00f09345
[0x4022d1] memchr("\n  if ((err = re_compile_pattern"..., '\n', 83) = 0x00f09346
[0x4022d1] memchr("  if ((err = re_compile_pattern("..., '\n', 82) = 0x00f09384
[0x4022d1] memchr("    fatal(err, 0);\n\n  dfainit(&d"..., '\n', 20) = 0x00f09397
[0x4022d1] memchr("\n  dfainit(&dfa_1);\n\n  /* In the"..., '\n', 1) = 0x00f09398
[0x4022d1] memchr("  dfainit(&dfa_1);\n\n  /* In the "..., '\n', 0) = NULL
[0x4023cc] fwrite("10689:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  dfainit(&dfa_1);\n\n  /* In the "..., 1, 19, 0x7fce6d444260) = 19
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  /* In the match_words and mat"..., '1', 6047) = 0x00f09757
[0x40cdf3] memchr("1, 1);\n    }\n  else\n    dfacomp("..., '\n', 5108) = 0x00f0975d
[0x4022d1] memchr("\n  /* In the match_words and mat"..., '\n', 914) = 0x00f093ac
[0x4022d1] memchr("  /* In the match_words and matc"..., '\n', 913) = 0x00f093f6
[0x4022d1] memchr("     for the DFA matcher that wi"..., '\n', 839) = 0x00f09442
[0x4022d1] memchr("     Then if DFA succeeds we do "..., '\n', 763) = 0x00f0948b
[0x4022d1] memchr("     to decide whether the match"..., '\n', 690) = 0x00f094c4
[0x4022d1] memchr("  if (match_words || match_lines"..., '\n', 633) = 0x00f094e6
[0x4022d1] memchr("    {\n      /* In the whole-word"..., '\n', 599) = 0x00f094ec
[0x4022d1] memchr("      /* In the whole-word case,"..., '\n', 593) = 0x00f09521
[0x4022d1] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., '\n', 540) = 0x00f0954e
[0x4022d1] memchr("\t In the whole-line case, we use"..., '\n', 495) = 0x00f0957c
[0x4022d1] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., '\n', 449) = 0x00f0958f
[0x4022d1] memchr("\t BUG: Using [A-Za-z_] is locale"..., '\n', 430) = 0x00f095bf
[0x4022d1] memchr("\n      char *n = malloc(size + 5"..., '\n', 382) = 0x00f095c0
[0x4022d1] memchr("      char *n = malloc(size + 50"..., '\n', 381) = 0x00f095e3
[0x4022d1] memchr("      int i = 0;\n\n      strcpy(n"..., '\n', 346) = 0x00f095f4
[0x4022d1] memchr("\n      strcpy(n, "");\n\n      if "..., '\n', 329) = 0x00f095f5
[0x4022d1] memchr("      strcpy(n, "");\n\n      if ("..., '\n', 328) = 0x00f0960a
[0x4022d1] memchr("\n      if (match_lines)\n\tstrcpy("..., '\n', 307) = 0x00f0960b
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 306) = 0x00f09622
[0x4022d1] memchr("\tstrcpy(n, "^(");\n      if (matc"..., '\n', 283) = 0x00f09634
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 265) = 0x00f0964b
[0x4022d1] memchr("\tstrcpy(n, "(^|[^0-9A-Za-z_])(")"..., '\n', 242) = 0x00f0966d
[0x4022d1] memchr("\n      i = strlen(n);\n      bcop"..., '\n', 208) = 0x00f0966e
[0x4022d1] memchr("      i = strlen(n);\n      bcopy"..., '\n', 207) = 0x00f09683
[0x4022d1] memchr("      bcopy(pattern, n + i, size"..., '\n', 186) = 0x00f096a6
[0x4022d1] memchr("      i += size;\n\n      if (matc"..., '\n', 151) = 0x00f096b7
[0x4022d1] memchr("\n      if (match_words)\n\tstrcpy("..., '\n', 134) = 0x00f096b8
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 133) = 0x00f096cf
[0x4022d1] memchr("\tstrcpy(n + i, ")([^0-9A-Za-z_]|"..., '\n', 110) = 0x00f096f5
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 72) = 0x00f0970c
[0x4022d1] memchr("\tstrcpy(n + i, ")$");\n\n      i +"..., '\n', 49) = 0x00f09722
[0x4022d1] memchr("\n      i += strlen(n + i);\n     "..., '\n', 27) = 0x00f09723
[0x4022d1] memchr("      i += strlen(n + i);\n      "..., '\n', 26) = 0x00f0973d
[0x4022d1] memchr("      dfacomp(n, i, &dfa_1, 1);\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("10723:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("      dfacomp(n, i, &dfa_1, 1);\n"..., 1, 32, 0x7fce6d444260) = 32
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    }\n  else\n    dfacomp(pattern"..., '1', 5101) = 0x00f0978b
[0x40cdf3] memchr("1, 1);\n\n  kwsmusts();\n}\n\nstatic "..., '\n', 5056) = 0x00f09791
[0x4022d1] memchr("    }\n  else\n    dfacomp(pattern"..., '\n', 13) = 0x00f09763
[0x4022d1] memchr("  else\n    dfacomp(pattern, size"..., '\n', 7) = 0x00f0976a
[0x4022d1] memchr("    dfacomp(pattern, size, &dfa_"..., '\n', 0) = NULL
[0x4023cc] fwrite("10726:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("    dfacomp(pattern, size, &dfa_"..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\n  kwsmusts();\n}\n\nstatic char *\n"..., '1', 5049) = 0x00f0992d
[0x40cdf3] memchr("1)\n    {\n      if (kwset)\n\t{\n\t  "..., '\n', 4638) = 0x00f0992f
[0x4022d1] memchr("\n  kwsmusts();\n}\n\nstatic char *\n"..., '\n', 361) = 0x00f09792
[0x4022d1] memchr("  kwsmusts();\n}\n\nstatic char *\nE"..., '\n', 360) = 0x00f097a0
[0x4022d1] memchr("}\n\nstatic char *\nEGexecute(buf, "..., '\n', 346) = 0x00f097a2
[0x4022d1] memchr("\nstatic char *\nEGexecute(buf, si"..., '\n', 344) = 0x00f097a3
[0x4022d1] memchr("static char *\nEGexecute(buf, siz"..., '\n', 343) = 0x00f097b1
[0x4022d1] memchr("EGexecute(buf, size, endp)\n     "..., '\n', 329) = 0x00f097cc
[0x4022d1] memchr("     char *buf;\n     size_t size"..., '\n', 302) = 0x00f097dc
[0x4022d1] memchr("     size_t size;\n     char **en"..., '\n', 286) = 0x00f097ee
[0x4022d1] memchr("     char **endp;\n{\n  register c"..., '\n', 268) = 0x00f09800
[0x4022d1] memchr("{\n  register char *buflim, *beg,"..., '\n', 250) = 0x00f09802
[0x4022d1] memchr("  register char *buflim, *beg, *"..., '\n', 248) = 0x00f0982d
[0x4022d1] memchr("  int backref, start, len;\n  str"..., '\n', 205) = 0x00f09848
[0x4022d1] memchr("  struct kwsmatch kwsm;\n  static"..., '\n', 178) = 0x00f09860
[0x4022d1] memchr("  static struct re_registers reg"..., '\n', 154) = 0x00f098b0
[0x4022d1] memchr("\t\t\t\t    Q@#%!# library interface"..., '\n', 74) = 0x00f098e1
[0x4022d1] memchr("\n  buflim = buf + size;\n\n  for ("..., '\n', 25) = 0x00f098e2
[0x4022d1] memchr("  buflim = buf + size;\n\n  for (b"..., '\n', 24) = 0x00f098f9
[0x4022d1] memchr("\n  for (beg = end = buf; end < b"..., '\n', 1) = 0x00f098fa
[0x4022d1] memchr("  for (beg = end = buf; end < bu"..., '\n', 0) = NULL
[0x4023cc] fwrite("10745:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  for (beg = end = buf; end < bu"..., 1, 53, 0x7fce6d444260) = 53
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    {\n      if (kwset)\n\t{\n\t  /* "..., '1', 4635) = 0x00f09a94
[0x40cdf3] memchr("1] != '\\n')\n\t    --beg;\n\t  save "..., '\n', 4279) = 0x00f09a9f
[0x4022d1] memchr("    {\n      if (kwset)\n\t{\n\t  /* "..., '\n', 328) = 0x00f09935
[0x4022d1] memchr("      if (kwset)\n\t{\n\t  /* Find a"..., '\n', 322) = 0x00f09946
[0x4022d1] memchr("\t{\n\t  /* Find a possible match u"..., '\n', 305) = 0x00f09949
[0x4022d1] memchr("\t  /* Find a possible match usin"..., '\n', 302) = 0x00f09981
[0x4022d1] memchr("\t  beg = kwsexec(kwset, beg, buf"..., '\n', 246) = 0x00f099b4
[0x4022d1] memchr("\t  if (!beg)\n\t    goto failure;\n"..., '\n', 195) = 0x00f099c1
[0x4022d1] memchr("\t    goto failure;\n\t  /* Narrow "..., '\n', 182) = 0x00f099d4
[0x4022d1] memchr("\t  /* Narrow down to the line co"..., '\n', 163) = 0x00f09a10
[0x4022d1] memchr("\t     run it through DFA. */\n\t  "..., '\n', 103) = 0x00f09a2d
[0x4022d1] memchr("\t  end = memchr(beg, '\\n', bufli"..., '\n', 74) = 0x00f09a57
[0x4022d1] memchr("\t  if (!end)\n\t    end = buflim;\n"..., '\n', 32) = 0x00f09a64
[0x4022d1] memchr("\t    end = buflim;\n\t  while (beg"..., '\n', 19) = 0x00f09a77
[0x4022d1] memchr("\t  while (beg > buf && beg[-1] !"..., '\n', 0) = NULL
[0x4023cc] fwrite("10758:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t  while (beg > buf && beg[-1] !"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    --beg;\n\t  save = *end;\n\t  i"..., '1', 4267) = 0x00f09b03
[0x40cdf3] memchr("1, beg, end, 0, (int *) 0, &back"..., '\n', 4168) = 0x00f09b28
[0x4022d1] memchr("\t    --beg;\n\t  save = *end;\n\t  i"..., '\n', 78) = 0x00f09aab
[0x4022d1] memchr("\t  save = *end;\n\t  if (kwsm.inde"..., '\n', 66) = 0x00f09abb
[0x4022d1] memchr("\t  if (kwsm.index < lastexact)\n\t"..., '\n', 50) = 0x00f09ada
[0x4022d1] memchr("\t    goto success;\n\t  if (!dfaex"..., '\n', 19) = 0x00f09aed
[0x4022d1] memchr("\t  if (!dfaexec(&dfa_1, beg, end"..., '\n', 0) = NULL
[0x4023cc] fwrite("10763:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t  if (!dfaexec(&dfa_1, beg, end"..., 1, 59, 0x7fce6d444260) = 59
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    {\n\t      *end = save;\n\t    "..., '1', 4130) = 0x00f09c2e
[0x40cdf3] memchr("1, beg, buflim, 0, (int *) 0, &b"..., '\n', 3869) = 0x00f09c56
[0x4022d1] memchr("\t    {\n\t      *end = save;\n\t    "..., '\n', 239) = 0x00f09b2f
[0x4022d1] memchr("\t      *end = save;\n\t      conti"..., '\n', 232) = 0x00f09b43
[0x4022d1] memchr("\t      continue;\n\t    }\n\t  *end "..., '\n', 212) = 0x00f09b54
[0x4022d1] memchr("\t    }\n\t  *end = save;\n\t  /* Suc"..., '\n', 195) = 0x00f09b5b
[0x4022d1] memchr("\t  *end = save;\n\t  /* Successful"..., '\n', 188) = 0x00f09b6b
[0x4022d1] memchr("\t  /* Successful, no backreferen"..., '\n', 172) = 0x00f09b9f
[0x4022d1] memchr("\t  if (!backref)\n\t    goto succe"..., '\n', 120) = 0x00f09bb0
[0x4022d1] memchr("\t    goto success;\n\t}\n      else"..., '\n', 103) = 0x00f09bc3
[0x4022d1] memchr("\t}\n      else\n\t{\n\t  /* No good f"..., '\n', 84) = 0x00f09bc6
[0x4022d1] memchr("      else\n\t{\n\t  /* No good fixe"..., '\n', 81) = 0x00f09bd1
[0x4022d1] memchr("\t{\n\t  /* No good fixed strings; "..., '\n', 70) = 0x00f09bd4
[0x4022d1] memchr("\t  /* No good fixed strings; sta"..., '\n', 67) = 0x00f09c04
[0x4022d1] memchr("\t  save = *buflim;\n\t  beg = dfae"..., '\n', 19) = 0x00f09c17
[0x4022d1] memchr("\t  beg = dfaexec(&dfa_1, beg, bu"..., '\n', 0) = NULL
[0x4023cc] fwrite("10777:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t  beg = dfaexec(&dfa_1, beg, bu"..., 1, 63, 0x7fce6d444260) = 63
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t  *buflim = save;\n\t  if (!beg)\n"..., '1', 3828) = 0x00f09d1e
[0x40cdf3] memchr("1] != '\\n')\n\t    --beg;\n\t  /* Su"..., '\n', 3629) = 0x00f09d29
[0x4022d1] memchr("\t  *buflim = save;\n\t  if (!beg)\n"..., '\n', 171) = 0x00f09c69
[0x4022d1] memchr("\t  if (!beg)\n\t    goto failure;\n"..., '\n', 152) = 0x00f09c76
[0x4022d1] memchr("\t    goto failure;\n\t  /* Narrow "..., '\n', 139) = 0x00f09c89
[0x4022d1] memchr("\t  /* Narrow down to the line we"..., '\n', 120) = 0x00f09cb7
[0x4022d1] memchr("\t  end = memchr(beg, '\\n', bufli"..., '\n', 74) = 0x00f09ce1
[0x4022d1] memchr("\t  if (!end)\n\t    end = buflim;\n"..., '\n', 32) = 0x00f09cee
[0x4022d1] memchr("\t    end = buflim;\n\t  while (beg"..., '\n', 19) = 0x00f09d01
[0x4022d1] memchr("\t  while (beg > buf && beg[-1] !"..., '\n', 0) = NULL
[0x4023cc] fwrite("10785:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t  while (beg > buf && beg[-1] !"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    --beg;\n\t  /* Successful, no"..., '1', 3617) = 0x00f0a0a0
[0x40cdf3] memchr("1]))\n\t\t    && (len == end - beg "..., '\n', 2731) = 0x00f0a0a4
[0x4022d1] memchr("\t    --beg;\n\t  /* Successful, no"..., '\n', 846) = 0x00f09d35
[0x4022d1] memchr("\t  /* Successful, no backreferen"..., '\n', 834) = 0x00f09d69
[0x4022d1] memchr("\t  if (!backref)\n\t    goto succe"..., '\n', 782) = 0x00f09d7a
[0x4022d1] memchr("\t    goto success;\n\t}\n      /* I"..., '\n', 765) = 0x00f09d8d
[0x4022d1] memchr("\t}\n      /* If we've made it to "..., '\n', 746) = 0x00f09d90
[0x4022d1] memchr("      /* If we've made it to thi"..., '\n', 743) = 0x00f09dd1
[0x4022d1] memchr("\t a probable match, and we need "..., '\n', 678) = 0x00f09e0d
[0x4022d1] memchr("      regex.not_eol = 0;\n      i"..., '\n', 618) = 0x00f09e26
[0x4022d1] memchr("      if ((start = re_search(&re"..., '\n', 593) = 0x00f09e77
[0x4022d1] memchr("\t{\n\t  len = regs.end[0] - start;"..., '\n', 512) = 0x00f09e7a
[0x4022d1] memchr("\t  len = regs.end[0] - start;\n\t "..., '\n', 509) = 0x00f09e98
[0x4022d1] memchr("\t  if (!match_lines && !match_wo"..., '\n', 479) = 0x00f09ee0
[0x4022d1] memchr("\t    goto success;\n\t  /* If -w, "..., '\n', 407) = 0x00f09ef3
[0x4022d1] memchr("\t  /* If -w, check if the match "..., '\n', 388) = 0x00f09f30
[0x4022d1] memchr("\t     We do this iteratively bec"..., '\n', 327) = 0x00f09f56
[0x4022d1] memchr("\t     (a) the line may contain m"..., '\n', 289) = 0x00f09fa1
[0x4022d1] memchr("\t     (b) Several alternatives i"..., '\n', 214) = 0x00f09fe9
[0x4022d1] memchr("\t     point, and we may need to "..., '\n', 142) = 0x00f0a02f
[0x4022d1] memchr("\t     boundary. */\n\t  if (match_"..., '\n', 72) = 0x00f0a042
[0x4022d1] memchr("\t  if (match_words)\n\t    while ("..., '\n', 53) = 0x00f0a056
[0x4022d1] memchr("\t    while (start >= 0)\n\t      {"..., '\n', 33) = 0x00f0a06e
[0x4022d1] memchr("\t      {\n\t\tif ((start == 0 || !W"..., '\n', 9) = 0x00f0a077
[0x4022d1] memchr("\t\tif ((start == 0 || !WCHAR(beg["..., '\n', 0) = NULL
[0x4023cc] fwrite("10808:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\tif ((start == 0 || !WCHAR(beg["..., 1, 45, 0x7fce6d444260) = 45
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    && (len == end - beg || !W"..., '1', 2726) = 0x00f0a165
[0x40cdf3] memchr("1;\n\t\t    len = re_match(&regex, "..., '\n', 2534) = 0x00f0a167
[0x4022d1] memchr("\t\t    && (len == end - beg || !W"..., '\n', 170) = 0x00f0a0dd
[0x4022d1] memchr("\t\t  goto success;\n\t\tif (len > 0)"..., '\n', 113) = 0x00f0a0ef
[0x4022d1] memchr("\t\tif (len > 0)\n\t\t  {\n\t\t    /* Tr"..., '\n', 95) = 0x00f0a0fe
[0x4022d1] memchr("\t\t  {\n\t\t    /* Try a shorter len"..., '\n', 80) = 0x00f0a104
[0x4022d1] memchr("\t\t    /* Try a shorter length an"..., '\n', 74) = 0x00f0a141
[0x4022d1] memchr("\t\t    --len;\n\t\t    regex.not_eol"..., '\n', 13) = 0x00f0a14e
[0x4022d1] memchr("\t\t    regex.not_eol = 1;\n\t\t    l"..., '\n', 0) = NULL
[0x4023cc] fwrite("10815:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t\t    regex.not_eol = 1;\n\t\t    l"..., 1, 25, 0x7fce6d444260) = 25
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t\t    len = re_match(&regex, beg"..., '1', 2531) = 0x00f0a311
[0x40cdf3] memchr("1 : end;\n  return beg;\n}\n\nstatic"..., '\n', 2106) = 0x00f0a319
[0x4022d1] memchr("\t\t    len = re_match(&regex, beg"..., '\n', 394) = 0x00f0a1a5
[0x4022d1] memchr("\t\t  }\n\t\tif (len <= 0)\n\t\t  {\n\t\t  "..., '\n', 332) = 0x00f0a1ab
[0x4022d1] memchr("\t\tif (len <= 0)\n\t\t  {\n\t\t    /* T"..., '\n', 326) = 0x00f0a1bb
[0x4022d1] memchr("\t\t  {\n\t\t    /* Try looking furth"..., '\n', 310) = 0x00f0a1c1
[0x4022d1] memchr("\t\t    /* Try looking further on."..., '\n', 304) = 0x00f0a1e5
[0x4022d1] memchr("\t\t    if (start == end - beg)\n\t\t"..., '\n', 268) = 0x00f0a203
[0x4022d1] memchr("\t\t      break;\n\t\t    ++start;\n\t\t"..., '\n', 238) = 0x00f0a212
[0x4022d1] memchr("\t\t    ++start;\n\t\t    regex.not_e"..., '\n', 223) = 0x00f0a221
[0x4022d1] memchr("\t\t    regex.not_eol = 0;\n\t\t    s"..., '\n', 208) = 0x00f0a23a
[0x4022d1] memchr("\t\t    start = re_search(&regex, "..., '\n', 183) = 0x00f0a26a
[0x4022d1] memchr("\t\t\t\t      start, end - beg - sta"..., '\n', 135) = 0x00f0a296
[0x4022d1] memchr("\t\t    len = regs.end[0] - start;"..., '\n', 91) = 0x00f0a2b7
[0x4022d1] memchr("\t\t  }\n\t      }\n\t}\n    }\n\n failur"..., '\n', 58) = 0x00f0a2bd
[0x4022d1] memchr("\t      }\n\t}\n    }\n\n failure:\n  r"..., '\n', 52) = 0x00f0a2c6
[0x4022d1] memchr("\t}\n    }\n\n failure:\n  return 0;\n"..., '\n', 43) = 0x00f0a2c9
[0x4022d1] memchr("    }\n\n failure:\n  return 0;\n\n s"..., '\n', 40) = 0x00f0a2cf
[0x4022d1] memchr("\n failure:\n  return 0;\n\n success"..., '\n', 34) = 0x00f0a2d0
[0x4022d1] memchr(" failure:\n  return 0;\n\n success:"..., '\n', 33) = 0x00f0a2da
[0x4022d1] memchr("  return 0;\n\n success:\n  *endp ="..., '\n', 23) = 0x00f0a2e6
[0x4022d1] memchr("\n success:\n  *endp = end < bufli"..., '\n', 11) = 0x00f0a2e7
[0x4022d1] memchr(" success:\n  *endp = end < buflim"..., '\n', 10) = 0x00f0a2f1
[0x4022d1] memchr("  *endp = end < buflim ? end + 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("10837:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  *endp = end < buflim ? end + 1"..., 1, 40, 0x7fce6d444260) = 40
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("  return beg;\n}\n\nstatic void\nFco"..., '1', 2097) = 0x00f0a667
[0x40cdf3] memchr("1] != '\\n')\n\t    continue;\n\t  if"..., '\n', 1252) = 0x00f0a672
[0x4022d1] memchr("  return beg;\n}\n\nstatic void\nFco"..., '\n', 820) = 0x00f0a327
[0x4022d1] memchr("}\n\nstatic void\nFcompile(pattern,"..., '\n', 806) = 0x00f0a329
[0x4022d1] memchr("\nstatic void\nFcompile(pattern, s"..., '\n', 804) = 0x00f0a32a
[0x4022d1] memchr("static void\nFcompile(pattern, si"..., '\n', 803) = 0x00f0a336
[0x4022d1] memchr("Fcompile(pattern, size)\n     cha"..., '\n', 791) = 0x00f0a34e
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 767) = 0x00f0a362
[0x4022d1] memchr("     size_t size;\n{\n  char *beg,"..., '\n', 747) = 0x00f0a374
[0x4022d1] memchr("{\n  char *beg, *lim, *err;\n\n  kw"..., '\n', 729) = 0x00f0a376
[0x4022d1] memchr("  char *beg, *lim, *err;\n\n  kwsi"..., '\n', 727) = 0x00f0a38f
[0x4022d1] memchr("\n  kwsinit();\n  beg = pattern;\n "..., '\n', 702) = 0x00f0a390
[0x4022d1] memchr("  kwsinit();\n  beg = pattern;\n  "..., '\n', 701) = 0x00f0a39d
[0x4022d1] memchr("  beg = pattern;\n  do\n    {\n    "..., '\n', 688) = 0x00f0a3ae
[0x4022d1] memchr("  do\n    {\n      for (lim = beg;"..., '\n', 671) = 0x00f0a3b3
[0x4022d1] memchr("    {\n      for (lim = beg; lim "..., '\n', 666) = 0x00f0a3b9
[0x4022d1] memchr("      for (lim = beg; lim < patt"..., '\n', 660) = 0x00f0a3fc
[0x4022d1] memchr("\t;\n      if ((err = kwsincr(kwse"..., '\n', 593) = 0x00f0a3ff
[0x4022d1] memchr("      if ((err = kwsincr(kwset, "..., '\n', 590) = 0x00f0a436
[0x4022d1] memchr("\tfatal(err, 0);\n      if (lim < "..., '\n', 535) = 0x00f0a446
[0x4022d1] memchr("      if (lim < pattern + size)\n"..., '\n', 519) = 0x00f0a466
[0x4022d1] memchr("\t++lim;\n      beg = lim;\n    }\n "..., '\n', 487) = 0x00f0a46e
[0x4022d1] memchr("      beg = lim;\n    }\n  while ("..., '\n', 479) = 0x00f0a47f
[0x4022d1] memchr("    }\n  while (beg < pattern + s"..., '\n', 462) = 0x00f0a485
[0x4022d1] memchr("  while (beg < pattern + size);\n"..., '\n', 456) = 0x00f0a4a5
[0x4022d1] memchr("\n  if ((err = kwsprep(kwset)) !="..., '\n', 424) = 0x00f0a4a6
[0x4022d1] memchr("  if ((err = kwsprep(kwset)) != "..., '\n', 423) = 0x00f0a4c9
[0x4022d1] memchr("    fatal(err, 0);\n}\n\nstatic cha"..., '\n', 388) = 0x00f0a4dc
[0x4022d1] memchr("}\n\nstatic char *\nFexecute(buf, s"..., '\n', 369) = 0x00f0a4de
[0x4022d1] memchr("\nstatic char *\nFexecute(buf, siz"..., '\n', 367) = 0x00f0a4df
[0x4022d1] memchr("static char *\nFexecute(buf, size"..., '\n', 366) = 0x00f0a4ed
[0x4022d1] memchr("Fexecute(buf, size, endp)\n     c"..., '\n', 352) = 0x00f0a507
[0x4022d1] memchr("     char *buf;\n     size_t size"..., '\n', 326) = 0x00f0a517
[0x4022d1] memchr("     size_t size;\n     char **en"..., '\n', 310) = 0x00f0a529
[0x4022d1] memchr("     char **endp;\n{\n  register c"..., '\n', 292) = 0x00f0a53b
[0x4022d1] memchr("{\n  register char *beg, *try, *e"..., '\n', 274) = 0x00f0a53d
[0x4022d1] memchr("  register char *beg, *try, *end"..., '\n', 272) = 0x00f0a55f
[0x4022d1] memchr("  register size_t len;\n  struct "..., '\n', 238) = 0x00f0a576
[0x4022d1] memchr("  struct kwsmatch kwsmatch;\n\n  f"..., '\n', 215) = 0x00f0a592
[0x4022d1] memchr("\n  for (beg = buf; beg <= buf + "..., '\n', 187) = 0x00f0a593
[0x4022d1] memchr("  for (beg = buf; beg <= buf + s"..., '\n', 186) = 0x00f0a5bf
[0x4022d1] memchr("    {\n      if (!(beg = kwsexec("..., '\n', 142) = 0x00f0a5c5
[0x4022d1] memchr("      if (!(beg = kwsexec(kwset,"..., '\n', 136) = 0x00f0a60a
[0x4022d1] memchr("\treturn 0;\n      len = kwsmatch."..., '\n', 67) = 0x00f0a615
[0x4022d1] memchr("      len = kwsmatch.size[0];\n  "..., '\n', 56) = 0x00f0a633
[0x4022d1] memchr("      if (match_lines)\n\t{\n\t  if "..., '\n', 26) = 0x00f0a64a
[0x4022d1] memchr("\t{\n\t  if (beg > buf && beg[-1] !"..., '\n', 3) = 0x00f0a64d
[0x4022d1] memchr("\t  if (beg > buf && beg[-1] != '"..., '\n', 0) = NULL
[0x4023cc] fwrite("10883:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t  if (beg > buf && beg[-1] != '"..., 1, 37, 0x7fce6d444260) = 37
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t    continue;\n\t  if (beg + len "..., '1', 1240) = 0x00f0a748
[0x40cdf3] memchr("1]))\n\t      break;\n\t    if (try "..., '\n', 1027) = 0x00f0a74c
[0x4022d1] memchr("\t    continue;\n\t  if (beg + len "..., '\n', 164) = 0x00f0a681
[0x4022d1] memchr("\t  if (beg + len < buf + size &&"..., '\n', 149) = 0x00f0a6b4
[0x4022d1] memchr("\t    continue;\n\t  goto success;\n"..., '\n', 98) = 0x00f0a6c3
[0x4022d1] memchr("\t  goto success;\n\t}\n      else i"..., '\n', 83) = 0x00f0a6d4
[0x4022d1] memchr("\t}\n      else if (match_words)\n\t"..., '\n', 66) = 0x00f0a6d7
[0x4022d1] memchr("      else if (match_words)\n\tfor"..., '\n', 63) = 0x00f0a6f3
[0x4022d1] memchr("\tfor (try = beg; len && try;)\n\t "..., '\n', 35) = 0x00f0a711
[0x4022d1] memchr("\t  {\n\t    if (try > buf && WCHAR"..., '\n', 5) = 0x00f0a716
[0x4022d1] memchr("\t    if (try > buf && WCHAR((uns"..., '\n', 0) = NULL
[0x4023cc] fwrite("10892:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("\t    if (try > buf && WCHAR((uns"..., 1, 54, 0x7fce6d444260) = 54
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("\t      break;\n\t    if (try + len"..., '1', 1022) = 0x00f0a8f0
[0x40cdf3] memchr("1] != '\\n')\n    --beg;\n  return "..., '\n', 603) = 0x00f0a8fb
[0x4022d1] memchr("\t      break;\n\t    if (try + len"..., '\n', 392) = 0x00f0a75a
[0x4022d1] memchr("\t    if (try + len < buf + size "..., '\n', 378) = 0x00f0a79e
[0x4022d1] memchr("\t      {\n\t\ttry = kwsexec(kwset, "..., '\n', 310) = 0x00f0a7a7
[0x4022d1] memchr("\t\ttry = kwsexec(kwset, beg, --le"..., '\n', 301) = 0x00f0a7d6
[0x4022d1] memchr("\t\tlen = kwsmatch.size[0];\n\t     "..., '\n', 254) = 0x00f0a7f0
[0x4022d1] memchr("\t      }\n\t    else\n\t      goto s"..., '\n', 228) = 0x00f0a7f9
[0x4022d1] memchr("\t    else\n\t      goto success;\n\t"..., '\n', 219) = 0x00f0a803
[0x4022d1] memchr("\t      goto success;\n\t  }\n      "..., '\n', 209) = 0x00f0a818
[0x4022d1] memchr("\t  }\n      else\n\tgoto success;\n "..., '\n', 188) = 0x00f0a81d
[0x4022d1] memchr("      else\n\tgoto success;\n    }\n"..., '\n', 183) = 0x00f0a828
[0x4022d1] memchr("\tgoto success;\n    }\n\n  return 0"..., '\n', 172) = 0x00f0a837
[0x4022d1] memchr("    }\n\n  return 0;\n\n success:\n  "..., '\n', 157) = 0x00f0a83d
[0x4022d1] memchr("\n  return 0;\n\n success:\n  if ((e"..., '\n', 151) = 0x00f0a83e
[0x4022d1] memchr("  return 0;\n\n success:\n  if ((en"..., '\n', 150) = 0x00f0a84a
[0x4022d1] memchr("\n success:\n  if ((end = memchr(b"..., '\n', 138) = 0x00f0a84b
[0x4022d1] memchr(" success:\n  if ((end = memchr(be"..., '\n', 137) = 0x00f0a855
[0x4022d1] memchr("  if ((end = memchr(beg + len, '"..., '\n', 127) = 0x00f0a89d
[0x4022d1] memchr("    ++end;\n  else\n    end = buf "..., '\n', 55) = 0x00f0a8a8
[0x4022d1] memchr("  else\n    end = buf + size;\n  *"..., '\n', 44) = 0x00f0a8af
[0x4022d1] memchr("    end = buf + size;\n  *endp = "..., '\n', 37) = 0x00f0a8c5
[0x4022d1] memchr("  *endp = end;\n  while (beg > bu"..., '\n', 15) = 0x00f0a8d4
[0x4022d1] memchr("  while (beg > buf && beg[-1] !="..., '\n', 0) = NULL
[0x4023cc] fwrite("10914:", 1, 6, 0x7fce6d444260) = 6
[0x4024d9] fwrite("  while (beg > buf && beg[-1] !="..., 1, 39, 0x7fce6d444260) = 39
[0x4024e8] ferror(0x7fce6d444260)                = 0
[0x40bc2b] memchr("    --beg;\n  return beg;\n}\n\nif ("..., '1', 591) = NULL
[0x4022d1] memchr("    --beg;\n  return beg;\n}\n\nif ("..., '\n', 591) = 0x00f0a906
[0x4022d1] memchr("  return beg;\n}\n\nif (out)\nif (go"..., '\n', 580) = 0x00f0a914
[0x4022d1] memchr("}\n\nif (out)\nif (gout)\nif (gsth)\n"..., '\n', 566) = 0x00f0a916
[0x4022d1] memchr("\nif (out)\nif (gout)\nif (gsth)\nif"..., '\n', 564) = 0x00f0a917
[0x4022d1] memchr("if (out)\nif (gout)\nif (gsth)\nif "..., '\n', 563) = 0x00f0a920
[0x4022d1] memchr("if (gout)\nif (gsth)\nif out\nif go"..., '\n', 554) = 0x00f0a92a
[0x4022d1] memchr("if (gsth)\nif out\nif gout\nif agou"..., '\n', 544) = 0x00f0a934
[0x4022d1] memchr("if out\nif gout\nif agout\nif agout"..., '\n', 534) = 0x00f0a93b
[0x4022d1] memchr("if gout\nif agout\nif agout end = "..., '\n', 527) = 0x00f0a943
[0x4022d1] memchr("if agout\nif agout end = buf + si"..., '\n', 519) = 0x00f0a94c
[0x4022d1] memchr("if agout end = buf + size;\nif ao"..., '\n', 510) = 0x00f0a967
[0x4022d1] memchr("if aout\nif ag\nif g\nif a\n\nswswsif"..., '\n', 483) = 0x00f0a96f
[0x4022d1] memchr("if ag\nif g\nif a\n\nswswsif (out)\nw"..., '\n', 475) = 0x00f0a975
[0x4022d1] memchr("if g\nif a\n\nswswsif (out)\nwwif (g"..., '\n', 469) = 0x00f0a97a
[0x4022d1] memchr("if a\n\nswswsif (out)\nwwif (gout)\n"..., '\n', 464) = 0x00f0a97f
[0x4022d1] memchr("\nswswsif (out)\nwwif (gout)\nwssif"..., '\n', 459) = 0x00f0a980
[0x4022d1] memchr("swswsif (out)\nwwif (gout)\nwssif "..., '\n', 458) = 0x00f0a98e
[0x4022d1] memchr("wwif (gout)\nwssif (gsth)\nwswswsi"..., '\n', 444) = 0x00f0a99a
[0x4022d1] memchr("wssif (gsth)\nwswswsif out\n3if go"..., '\n', 432) = 0x00f0a9a7
[0x4022d1] memchr("wswswsif out\n3if gout\nwsif agout"..., '\n', 419) = 0x00f0a9b4
[0x4022d1] memchr("3if gout\nwsif agout\n3eif agout e"..., '\n', 406) = 0x00f0a9bd
[0x4022d1] memchr("wsif agout\n3eif agout end = buf "..., '\n', 397) = 0x00f0a9c8
[0x4022d1] memchr("3eif agout end = buf + size;\ndse"..., '\n', 386) = 0x00f0a9e5
[0x4022d1] memchr("dseif aout\ndsif ag\nisxsif g\nxxsx"..., '\n', 357) = 0x00f0a9f0
[0x4022d1] memchr("dsif ag\nisxsif g\nxxsxif awwsw\n\ns"..., '\n', 346) = 0x00f0a9f8
[0x4022d1] memchr("isxsif g\nxxsxif awwsw\n\nswswsif ("..., '\n', 338) = 0x00f0aa01
[0x4022d1] memchr("xxsxif awwsw\n\nswswsif (out)fvvfv"..., '\n', 329) = 0x00f0aa0e
[0x4022d1] memchr("\nswswsif (out)fvvfvf\nwwif (gout)"..., '\n', 316) = 0x00f0aa0f
[0x4022d1] memchr("swswsif (out)fvvfvf\nwwif (gout)\n"..., '\n', 315) = 0x00f0aa23
[0x4022d1] memchr("wwif (gout)\nwssif (gsth)\nwswswsi"..., '\n', 295) = 0x00f0aa2f
[0x4022d1] memchr("wssif (gsth)\nwswswsif outvfvf\n3i"..., '\n', 283) = 0x00f0aa3c
[0x4022d1] memchr("wswswsif outvfvf\n3if goutfvf\nwsi"..., '\n', 270) = 0x00f0aa4d
[0x4022d1] memchr("3if goutfvf\nwsif agoutvfv\n3eif a"..., '\n', 253) = 0x00f0aa59
[0x4022d1] memchr("wsif agoutvfv\n3eif agoutvf end ="..., '\n', 241) = 0x00f0aa67
[0x4022d1] memchr("3eif agoutvf end = buf + size;\nd"..., '\n', 227) = 0x00f0aa86
[0x4022d1] memchr("dseif aoutvfv\ndsif agvff\nisxsif "..., '\n', 196) = 0x00f0aa94
[0x4022d1] memchr("dsif agvff\nisxsif gvfv\nxxsxif aw"..., '\n', 182) = 0x00f0aa9f
[0x4022d1] memchr("isxsif gvfv\nxxsxif awwsw\n\ns  if "..., '\n', 171) = 0x00f0aaab
[0x4022d1] memchr("xxsxif awwsw\n\ns  if (out)\n    if"..., '\n', 159) = 0x00f0aab8
[0x4022d1] memchr("\ns  if (out)\n    if (gout)\n sds "..., '\n', 146) = 0x00f0aab9
[0x4022d1] memchr("s  if (out)\n    if (gout)\n sds i"..., '\n', 145) = 0x00f0aac5
[0x4022d1] memchr("    if (gout)\n sds if (gsth)\n  i"..., '\n', 133) = 0x00f0aad3
[0x4022d1] memchr(" sds if (gsth)\n  if out\ndc if go"..., '\n', 119) = 0x00f0aae2
[0x4022d1] memchr("  if out\ndc if gout\ndv if agout\n"..., '\n', 104) = 0x00f0aaeb
[0x4022d1] memchr("dc if gout\ndv if agout\nargue if "..., '\n', 95) = 0x00f0aaf6
[0x4022d1] memchr("dv if agout\nargue if agout end ="..., '\n', 84) = 0x00f0ab02
[0x4022d1] memchr("argue if agout end = buf + size;"..., '\n', 72) = 0x00f0ab23
[0x4022d1] memchr("  if aout\n          if ag\n  argu"..., '\n', 39) = 0x00f0ab2d
[0x4022d1] memchr("          if ag\n  argue if g\n if"..., '\n', 29) = 0x00f0ab3d
[0x4022d1] memchr("  argue if g\n if a\n\t  kwset->nex"..., '\n', 13) = 0x00f0ab4a
[0x4022d1] memchr(" if a\n\t  kwset->next[i] = next[("..., '\n', 0) = NULL
[0x4020b3] memmove(0xf05ffb, 0xf0ab4b, 5, 0xf0ab4b, 0x7fce6d444260) = 0xf05ffb
[0x402213] read(3, "", 32768)                    = 0
[0x40bc2b] memchr(" if a\nize;\n\n  /* Move the existi"..., '1', 6) = NULL
[0x40304f] close(3)                              = 0
[0x404145] fclose(0x7fce6d444260)                = 0
[0x404180] exit(0 <unfinished ...>
[0xffffffffffffffff] +++ exited (status 0) +++
