[0x401799] __libc_start_main(0x4037f0, 4, 0x7fff6bfab048, 0x4189a0, 0x418a30 <unfinished ...>
[0x403839] strrchr("target5", '/')               = NULL
[0x4038b8] setlocale(6, "")                      = "en_US.UTF-8"
[0x4038c7] bindtextdomain("grep", "/nfs/spectre/u4/jin/research/exp"...) = "/nfs/spectre/u4/jin/research/exp"...
[0x4038d1] textdomain("grep")                    = "grep"
[0x4038db] getenv("GREP_OPTIONS")                = NULL
[0x403ed4] getopt_long(4, 0x7fff6bfab048, "0123456789A:B:C::EFGHIUVX:abcd:e"..., 0x0061d1e0, NULL) = 110
[0x403ed4] getopt_long(4, 0x7fff6bfab048, "0123456789A:B:C::EFGHIUVX:abcd:e"..., 0x0061d1e0, NULL) = -1
[0x403537] strcmp("grep", "default")             = 3
[0x403537] strcmp("grep", "grep")                = 0
[0x401911] malloc(1280)                          = 0x0259a090
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x40d513] __ctype_b_loc()                       = 0x7f498168c6b8
[0x401911] malloc(32)                            = 0x0259a5a0
[0x412e46] free(0x0259a090)                      = <void>
[0x4041de] malloc(32)                            = 0x0259a090
[0x4041de] malloc(4)                             = 0x0259a0c0
[0x404224] realloc(0x0259a0c0, 8)                = 0x0259a0c0
[0x404224] realloc(0x0259a0c0, 16)               = 0x0259a0c0
[0x409e60] malloc(128)                           = 0x0259a0e0
[0x409ef1] malloc(8)                             = 0x0259a170
[0x409f0e] malloc(2)                             = 0x0259a190
[0x409f2c] malloc(2)                             = 0x0259a1b0
[0x409f4a] malloc(2)                             = 0x0259a1d0
[0x409ef1] malloc(8)                             = 0x0259a1f0
[0x409f0e] malloc(2)                             = 0x0259a210
[0x409f2c] malloc(2)                             = 0x0259a230
[0x409f4a] malloc(2)                             = 0x0259a250
[0x409ef1] malloc(8)                             = 0x0259a270
[0x409f0e] malloc(2)                             = 0x0259a290
[0x409f2c] malloc(2)                             = 0x0259a2b0
[0x409f4a] malloc(2)                             = 0x0259a2d0
[0x409ef1] malloc(8)                             = 0x0259a2f0
[0x409f0e] malloc(2)                             = 0x0259a310
[0x409f2c] malloc(2)                             = 0x0259a330
[0x409f4a] malloc(2)                             = 0x0259a350
[0x409777] malloc(2)                             = 0x0259a370
[0x4097c7] strcpy(0x0259a370, "I")               = 0x0259a370
[0x409a75] realloc(0x0259a170, 16)               = 0x0259a170
[0x40a42a] strcmp("I", "I")                      = 0
[0x40a78f] malloc(24)                            = 0x0259a390
[0x40a7d5] malloc(2)                             = 0x0259a3b0
[0x40a7f7] strcpy(0x0259a3b0, "I")               = 0x0259a3b0
[0x4098be] free(0x0259a370)                      = <void>
[0x409888] free(0x0259a170)                      = <void>
[0x409888] free(0x0259a190)                      = <void>
[0x409888] free(0x0259a1b0)                      = <void>
[0x409888] free(0x0259a1d0)                      = <void>
[0x409888] free(0x0259a1f0)                      = <void>
[0x409888] free(0x0259a210)                      = <void>
[0x409888] free(0x0259a230)                      = <void>
[0x409888] free(0x0259a250)                      = <void>
[0x409888] free(0x0259a270)                      = <void>
[0x409888] free(0x0259a290)                      = <void>
[0x409888] free(0x0259a2b0)                      = <void>
[0x409888] free(0x0259a2d0)                      = <void>
[0x409888] free(0x0259a2f0)                      = <void>
[0x409888] free(0x0259a310)                      = <void>
[0x409888] free(0x0259a330)                      = <void>
[0x409888] free(0x0259a350)                      = <void>
[0x40a8ce] free(0x0259a0e0)                      = <void>
[0x4041de] malloc(8)                             = 0x0259a350
[0x4041de] malloc(8)                             = 0x0259a330
[0x4041de] malloc(16)                            = 0x0259a310
[0x4041de] malloc(8)                             = 0x0259a2f0
[0x4041de] malloc(16)                            = 0x0259a2d0
[0x4041de] malloc(12)                            = 0x0259a2b0
[0x4041de] malloc(16)                            = 0x0259a290
[0x4041a3] calloc(3, 16)                         = 0x0259a0e0
[0x4041de] malloc(8)                             = 0x0259a270
[0x4041de] malloc(8)                             = 0x0259a250
[0x4041de] malloc(12)                            = 0x0259a230
[0x406f30] free(0x0259a230)                      = <void>
[0x4041de] malloc(12)                            = 0x0259a230
[0x406f30] free(0x0259a230)                      = <void>
[0x4041de] malloc(12)                            = 0x0259a230
[0x406f30] free(0x0259a230)                      = <void>
[0x4041de] malloc(32)                            = 0x0259a120
[0x4041de] malloc(8)                             = 0x0259a230
[0x407a45] free(0x0259a350)                      = <void>
[0x407a51] free(0x0259a330)                      = <void>
[0x407a5d] free(0x0259a310)                      = <void>
[0x407a69] free(0x0259a2f0)                      = <void>
[0x407a75] free(0x0259a2d0)                      = <void>
[0x407a81] free(0x0259a2b0)                      = <void>
[0x407a90] free(0x0259a290)                      = <void>
[0x401911] malloc(2440)                          = 0x0259a5d0
[0x40a92b] _obstack_begin(0x259a5d0, 0, 0, 0x4018f9, 0x401410 <unfinished ...>
[0x401911] malloc(4064)                          = 0x0259af60
[0x40a92b] <... _obstack_begin resumed> )        = 1
[0x4040e7] strcmp("../inputs/grep1.dat", "-")    = 1
[0x402e37] open("../inputs/grep1.dat", 0, 00)    = 3
[0x401bd7] getpagesize()                         = 4096
[0x401a6f] malloc(45056)                         = 0x0259bf50
[0x401d33] __fxstat(1, 3, 0x0061d808)            = 0
[0x4020b3] memmove(0x259e000, 0x259c000, 0, 0x259c000, 3) = 0x259e000
[0x402213] read(3, "/* grep.c - main driver file for"..., 32768) = 32768
[0x402a9f] memchr("/* grep.c - main driver file for"..., '\000', 32768) = NULL
[0x40bc2b] memchr("/* grep.c - main driver file for"..., 'I', 32740) = 0x0259e057
[0x40cdf3] memchr("Inc.\n\n   This program is free so"..., '\n', 32653) = 0x0259e05b
[0x4022d1] memchr("/* grep.c - main driver file for"..., '\n', 39) = 0x0259e026
[0x4022d1] memchr("   Copyright (C) 1992 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("2:", 1, 2, 0x7f498147f260)    = 2
[0x4024d9] fwrite("   Copyright (C) 1992 Free Softw"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., 'I', 32648) = 0x0259e196
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 32334) = 0x0259e1cf
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x0259e05c
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x0259e0a4
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 233) = 0x0259e0ec
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 161) = 0x0259e133
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 90) = 0x0259e149
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x0259e14a
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x0259e18d
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("10:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 32276) = 0x0259e1dd
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 32263) = 0x0259e210
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("11:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 32211) = 0x0259e2d5
[0x40cdf3] memchr("Inc., 675 Mass Ave, Cambridge, M"..., '\n', 32015) = 0x0259e302
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x0259e240
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x0259e241
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x0259e286
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x0259e2c5
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("16:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Written July 1992 by Mike Ha"..., 'I', 31969) = 0x0259e333
[0x40cdf3] memchr("I added a series define from mak"..., '\n', 31921) = 0x0259e374
[0x4022d1] memchr("\n   Written July 1992 by Mike Ha"..., '\n', 45) = 0x0259e303
[0x4022d1] memchr("   Written July 1992 by Mike Hae"..., '\n', 44) = 0x0259e32d
[0x4022d1] memchr("\n\n/* I added a series define fro"..., '\n', 2) = 0x0259e32e
[0x4022d1] memchr("\n/* I added a series define from"..., '\n', 1) = 0x0259e32f
[0x4022d1] memchr("/* I added a series define from "..., '\n', 0) = NULL
[0x4023cc] fwrite("21:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("/* I added a series define from "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define GREP 1\n#define STDC_HEAD"..., 'I', 31855) = 0x0259e3ab
[0x40cdf3] memchr("ING_H 1\n#define HAVE_SYS_PARAM_H"..., '\n', 31801) = 0x0259e3b2
[0x4022d1] memchr("#define GREP 1\n#define STDC_HEAD"..., '\n', 38) = 0x0259e383
[0x4022d1] memchr("#define STDC_HEADERS 1\n#define H"..., '\n', 23) = 0x0259e39a
[0x4022d1] memchr("#define HAVE_STRING_H 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("24:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#define HAVE_STRING_H 1\n#define "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define HAVE_SYS_PARAM_H 1\n#defi"..., 'I', 31793) = 0x0259e3dd
[0x40cdf3] memchr("ISTD_H 1\n#define HAVE_ALLOCA_H 1"..., '\n', 31751) = 0x0259e3e5
[0x4022d1] memchr("#define HAVE_SYS_PARAM_H 1\n#defi"..., '\n', 27) = 0x0259e3cd
[0x4022d1] memchr("#define HAVE_UNISTD_H 1\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("26:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#define HAVE_UNISTD_H 1\n#define "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define HAVE_ALLOCA_H 1\n#define "..., 'I', 31742) = 0x0259e413
[0x40cdf3] memchr("IZE 1\n#define HAVE_MEMCHR 1\n#def"..., '\n', 31697) = 0x0259e418
[0x4022d1] memchr("#define HAVE_ALLOCA_H 1\n#define "..., '\n', 24) = 0x0259e3fd
[0x4022d1] memchr("#define HAVE_GETPAGESIZE 1\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("28:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#define HAVE_GETPAGESIZE 1\n#defi"..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define HAVE_MEMCHR 1\n#define HA"..., 'I', 31691) = 0x0259e46e
[0x40cdf3] memchr("ING_MMAP 1\n/*** end of cfe purpo"..., '\n', 31606) = 0x0259e478
[0x4022d1] memchr("#define HAVE_MEMCHR 1\n#define HA"..., '\n', 68) = 0x0259e42e
[0x4022d1] memchr("#define HAVE_STRERROR 1\n#define "..., '\n', 46) = 0x0259e446
[0x4022d1] memchr("#define HAVE_VALLOC 1\n#define HA"..., '\n', 22) = 0x0259e45c
[0x4022d1] memchr("#define HAVE_WORKING_MMAP 1\n/***"..., '\n', 0) = NULL
[0x4023cc] fwrite("32:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#define HAVE_WORKING_MMAP 1\n/***"..., 1, 28, 0x7f498147f260) = 28
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/*** end of cfe purpose **/\n\n#in"..., 'I', 31595) = 0x0259e5c4
[0x40cdf3] memchr("ING_H)\n#include <string.h>\n#defi"..., '\n', 31264) = 0x0259e5ca
[0x4022d1] memchr("/*** end of cfe purpose **/\n\n#in"..., '\n', 286) = 0x0259e494
[0x4022d1] memchr("\n#include <errno.h>\n#include <st"..., '\n', 258) = 0x0259e495
[0x4022d1] memchr("#include <errno.h>\n#include <std"..., '\n', 257) = 0x0259e4a8
[0x4022d1] memchr("#include <stdio.h>\n\n#ifndef errn"..., '\n', 238) = 0x0259e4bb
[0x4022d1] memchr("\n#ifndef errno\nextern int errno;"..., '\n', 219) = 0x0259e4bc
[0x4022d1] memchr("#ifndef errno\nextern int errno;\n"..., '\n', 218) = 0x0259e4ca
[0x4022d1] memchr("extern int errno;\n#endif\n\n#ifdef"..., '\n', 204) = 0x0259e4dc
[0x4022d1] memchr("#endif\n\n#ifdef STDC_HEADERS\n#inc"..., '\n', 186) = 0x0259e4e3
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#include <s"..., '\n', 179) = 0x0259e4e4
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#include <st"..., '\n', 178) = 0x0259e4f8
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 158) = 0x0259e50c
[0x4022d1] memchr("#define flag_stdlib 1\n#else\n#inc"..., '\n', 138) = 0x0259e522
[0x4022d1] memchr("#else\n#include <sys/types.h>\n#de"..., '\n', 116) = 0x0259e528
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 110) = 0x0259e53f
[0x4022d1] memchr("#define flag_systypes 1\nextern c"..., '\n', 87) = 0x0259e557
[0x4022d1] memchr("extern char *malloc(), *realloc("..., '\n', 63) = 0x0259e57a
[0x4022d1] memchr("extern void free();\n#endif\n\n#if "..., '\n', 28) = 0x0259e58e
[0x4022d1] memchr("#endif\n\n#if defined(STDC_HEADERS"..., '\n', 8) = 0x0259e595
[0x4022d1] memchr("\n#if defined(STDC_HEADERS) || de"..., '\n', 1) = 0x0259e596
[0x4022d1] memchr("#if defined(STDC_HEADERS) || def"..., '\n', 0) = NULL
[0x4023cc] fwrite("52:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#if defined(STDC_HEADERS) || def"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#include <string.h>\n#define flag"..., 'I', 31257) = 0x0259e6e5
[0x40cdf3] memchr("ISTD_H\n#if flag_systypes==0\n#inc"..., '\n', 30975) = 0x0259e6eb
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 268) = 0x0259e5de
[0x4022d1] memchr("#define flag_string 1\n#ifdef NEE"..., '\n', 248) = 0x0259e5f4
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#include <m"..., '\n', 226) = 0x0259e609
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 205) = 0x0259e61d
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#el"..., '\n', 185) = 0x0259e633
[0x4022d1] memchr("#endif\n#else\n#include <strings.h"..., '\n', 163) = 0x0259e63a
[0x4022d1] memchr("#else\n#include <strings.h>\n#defi"..., '\n', 156) = 0x0259e640
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 150) = 0x0259e655
[0x4022d1] memchr("#define flag_strings 1\n#ifdef __"..., '\n', 129) = 0x0259e66c
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 106) = 0x0259e67c
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 90) = 0x0259e693
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 67) = 0x0259e699
[0x4022d1] memchr("extern char *memchr();\n#endif\n#d"..., '\n', 61) = 0x0259e6b0
[0x4022d1] memchr("#endif\n#define strrchr rindex\n#e"..., '\n', 38) = 0x0259e6b7
[0x4022d1] memchr("#define strrchr rindex\n#endif\n\n#"..., '\n', 31) = 0x0259e6ce
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_UNISTD_H\n#if"..., '\n', 8) = 0x0259e6d5
[0x4022d1] memchr("\n#ifdef HAVE_UNISTD_H\n#if flag_s"..., '\n', 1) = 0x0259e6d6
[0x4022d1] memchr("#ifdef HAVE_UNISTD_H\n#if flag_sy"..., '\n', 0) = NULL
[0x4023cc] fwrite("70:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#ifdef HAVE_UNISTD_H\n#if flag_sy"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if flag_systypes==0\n#include <s"..., 'I', 30968) = 0x0259e81a
[0x40cdf3] memchr("I features if necessary. */\n\n#if"..., '\n', 30666) = 0x0259e835
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 280) = 0x0259e700
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 259) = 0x0259e717
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 236) = 0x0259e72f
[0x4022d1] memchr("#endif\n#include <fcntl.h>\n#inclu"..., '\n', 212) = 0x0259e736
[0x4022d1] memchr("#include <fcntl.h>\n#include <uni"..., '\n', 205) = 0x0259e749
[0x4022d1] memchr("#include <unistd.h>\n#else\n#defin"..., '\n', 186) = 0x0259e75d
[0x4022d1] memchr("#else\n#define O_RDONLY 0\nextern "..., '\n', 166) = 0x0259e763
[0x4022d1] memchr("#define O_RDONLY 0\nextern int op"..., '\n', 160) = 0x0259e776
[0x4022d1] memchr("extern int open(), read(), close"..., '\n', 141) = 0x0259e79a
[0x4022d1] memchr("#endif\n\n#include "getpagesize.h""..., '\n', 105) = 0x0259e7a1
[0x4022d1] memchr("\n#include "getpagesize.h"\n#inclu"..., '\n', 98) = 0x0259e7a2
[0x4022d1] memchr("#include "getpagesize.h"\n#includ"..., '\n', 97) = 0x0259e7bb
[0x4022d1] memchr("#include "grep.h"\n\n#undef MAX\n#d"..., '\n', 72) = 0x0259e7cd
[0x4022d1] memchr("\n#undef MAX\n#define MAX(A,B) ((A"..., '\n', 54) = 0x0259e7ce
[0x4022d1] memchr("#undef MAX\n#define MAX(A,B) ((A)"..., '\n', 53) = 0x0259e7d9
[0x4022d1] memchr("#define MAX(A,B) ((A) > (B) ? (A"..., '\n', 42) = 0x0259e802
[0x4022d1] memchr("\n/* Provide missing ANSI feature"..., '\n', 1) = 0x0259e803
[0x4022d1] memchr("/* Provide missing ANSI features"..., '\n', 0) = NULL
[0x4023cc] fwrite("88:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("/* Provide missing ANSI features"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#ifndef HAVE_STRERROR\nextern in"..., 'I', 30638) = 0x0259e903
[0x40cdf3] memchr("ID void\n#else\n#define VOID char\n"..., '\n', 30433) = 0x0259e90a
[0x4022d1] memchr("\n#ifndef HAVE_STRERROR\nextern in"..., '\n', 195) = 0x0259e836
[0x4022d1] memchr("#ifndef HAVE_STRERROR\nextern int"..., '\n', 194) = 0x0259e84c
[0x4022d1] memchr("extern int sys_nerr;\nextern char"..., '\n', 172) = 0x0259e861
[0x4022d1] memchr("extern char *sys_errlist[];\n#def"..., '\n', 151) = 0x0259e87d
[0x4022d1] memchr("#define strerror(E) ((E) < sys_n"..., '\n', 123) = 0x0259e8cc
[0x4022d1] memchr("#endif\n\n#ifndef HAVE_MEMCHR\n#ifd"..., '\n', 44) = 0x0259e8d3
[0x4022d1] memchr("\n#ifndef HAVE_MEMCHR\n#ifdef __ST"..., '\n', 37) = 0x0259e8d4
[0x4022d1] memchr("#ifndef HAVE_MEMCHR\n#ifdef __STD"..., '\n', 36) = 0x0259e8e8
[0x4022d1] memchr("#ifdef __STDC__\n#define VOID voi"..., '\n', 16) = 0x0259e8f8
[0x4022d1] memchr("#define VOID void\n#else\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("98:", 1, 3, 0x7f498147f260)   = 3
[0x4024d9] fwrite("#define VOID void\n#else\n#define "..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define VOID char\n#endif\nV"..., 'I', 30425) = 0x0259e91b
[0x40cdf3] memchr("ID char\n#endif\nVOID *\nmemchr(vp,"..., '\n', 30409) = 0x0259e922
[0x4022d1] memchr("#else\n#define VOID char\n#endif\nV"..., '\n', 6) = 0x0259e910
[0x4022d1] memchr("#define VOID char\n#endif\nVOID *\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("100:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#define VOID char\n#endif\nVOID *\n"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\nVOID *\nmemchr(vp, c, n)\n "..., 'I', 30401) = 0x0259e92c
[0x40cdf3] memchr("ID *\nmemchr(vp, c, n)\n     VOID "..., '\n', 30392) = 0x0259e930
[0x4022d1] memchr("#endif\nVOID *\nmemchr(vp, c, n)\n "..., '\n', 7) = 0x0259e929
[0x4022d1] memchr("VOID *\nmemchr(vp, c, n)\n     VOI"..., '\n', 0) = NULL
[0x4023cc] fwrite("102:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("VOID *\nmemchr(vp, c, n)\n     VOI"..., 1, 7, 0x7f498147f260) = 7
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("memchr(vp, c, n)\n     VOID *vp;\n"..., 'I', 30387) = 0x0259e949
[0x40cdf3] memchr("ID *vp;\n     int c;\n     size_t "..., '\n', 30363) = 0x0259e950
[0x4022d1] memchr("memchr(vp, c, n)\n     VOID *vp;\n"..., '\n', 17) = 0x0259e941
[0x4022d1] memchr("     VOID *vp;\n     int c;\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("104:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("     VOID *vp;\n     int c;\n     "..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     int c;\n     size_t n;\n{\n  u"..., 'I', 30355) = 0x0259e9cf
[0x40cdf3] memchr("ID *) p;\n  return 0;\n}\n#endif\n  "..., '\n', 30229) = 0x0259e9d7
[0x4022d1] memchr("     int c;\n     size_t n;\n{\n  u"..., '\n', 110) = 0x0259e95c
[0x4022d1] memchr("     size_t n;\n{\n  unsigned char"..., '\n', 98) = 0x0259e96b
[0x4022d1] memchr("{\n  unsigned char *p;\n\n  for (p "..., '\n', 83) = 0x0259e96d
[0x4022d1] memchr("  unsigned char *p;\n\n  for (p = "..., '\n', 81) = 0x0259e981
[0x4022d1] memchr("\n  for (p = (unsigned char *) vp"..., '\n', 61) = 0x0259e982
[0x4022d1] memchr("  for (p = (unsigned char *) vp;"..., '\n', 60) = 0x0259e9ad
[0x4022d1] memchr("    if (*p == c)\n      return (V"..., '\n', 17) = 0x0259e9be
[0x4022d1] memchr("      return (VOID *) p;\n  retur"..., '\n', 0) = NULL
[0x4023cc] fwrite("112:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("      return (VOID *) p;\n  retur"..., 1, 25, 0x7f498147f260) = 25
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  return 0;\n}\n#endif\n    \n/* Def"..., 'I', 30220) = 0x0259ed29
[0x40cdf3] memchr("Interface to handle errors and f"..., '\n', 29371) = 0x0259ed5f
[0x4022d1] memchr("  return 0;\n}\n#endif\n    \n/* Def"..., '\n', 846) = 0x0259e9e3
[0x4022d1] memchr("}\n#endif\n    \n/* Define flags de"..., '\n', 834) = 0x0259e9e5
[0x4022d1] memchr("#endif\n    \n/* Define flags decl"..., '\n', 832) = 0x0259e9ec
[0x4022d1] memchr("    \n/* Define flags declared in"..., '\n', 825) = 0x0259e9f1
[0x4022d1] memchr("/* Define flags declared in grep"..., '\n', 820) = 0x0259ea18
[0x4022d1] memchr("char *matcher;\nint match_icase;\n"..., '\n', 781) = 0x0259ea27
[0x4022d1] memchr("int match_icase;\nint match_words"..., '\n', 766) = 0x0259ea38
[0x4022d1] memchr("int match_words;\nint match_lines"..., '\n', 749) = 0x0259ea49
[0x4022d1] memchr("int match_lines;\n\n/* Functions w"..., '\n', 732) = 0x0259ea5a
[0x4022d1] memchr("\n/* Functions we'll use to searc"..., '\n', 715) = 0x0259ea5b
[0x4022d1] memchr("/* Functions we'll use to search"..., '\n', 714) = 0x0259ea80
[0x4022d1] memchr("static void (*compile)();\nstatic"..., '\n', 677) = 0x0259ea9a
[0x4022d1] memchr("static char *(*execute)();\n\n/* F"..., '\n', 651) = 0x0259eab5
[0x4022d1] memchr("\n/* For error messages. */\nstati"..., '\n', 624) = 0x0259eab6
[0x4022d1] memchr("/* For error messages. */\nstatic"..., '\n', 623) = 0x0259ead0
[0x4022d1] memchr("static char *prog;\nstatic char *"..., '\n', 597) = 0x0259eae3
[0x4022d1] memchr("static char *filename;\nstatic in"..., '\n', 578) = 0x0259eafa
[0x4022d1] memchr("static int errseen;\n\n/* Print a "..., '\n', 555) = 0x0259eb0e
[0x4022d1] memchr("\n/* Print a message and possibly"..., '\n', 535) = 0x0259eb0f
[0x4022d1] memchr("/* Print a message and possibly "..., '\n', 534) = 0x0259eb4a
[0x4022d1] memchr("   that something awful happened"..., '\n', 475) = 0x0259eb6f
[0x4022d1] memchr("static void\nerror(mesg, errnum)\n"..., '\n', 438) = 0x0259eb7b
[0x4022d1] memchr("error(mesg, errnum)\n#ifdef __STD"..., '\n', 426) = 0x0259eb8f
[0x4022d1] memchr("#ifdef __STDC__\n     const\n#endi"..., '\n', 406) = 0x0259eb9f
[0x4022d1] memchr("     const\n#endif\n     char *mes"..., '\n', 390) = 0x0259ebaa
[0x4022d1] memchr("#endif\n     char *mesg;\n     int"..., '\n', 379) = 0x0259ebb1
[0x4022d1] memchr("     char *mesg;\n     int errnum"..., '\n', 372) = 0x0259ebc2
[0x4022d1] memchr("     int errnum;\n{\n  if (errnum)"..., '\n', 355) = 0x0259ebd3
[0x4022d1] memchr("{\n  if (errnum)\n    fprintf(stde"..., '\n', 338) = 0x0259ebd5
[0x4022d1] memchr("  if (errnum)\n    fprintf(stderr"..., '\n', 336) = 0x0259ebe3
[0x4022d1] memchr("    fprintf(stderr, "%s: %s: %s\\"..., '\n', 322) = 0x0259ec26
[0x4022d1] memchr("  else\n    fprintf(stderr, "%s: "..., '\n', 255) = 0x0259ec2d
[0x4022d1] memchr("    fprintf(stderr, "%s: %s\\n", "..., '\n', 248) = 0x0259ec5a
[0x4022d1] memchr("  errseen = 1;\n}\n\n/* Like error("..., '\n', 203) = 0x0259ec69
[0x4022d1] memchr("}\n\n/* Like error(), but die horr"..., '\n', 188) = 0x0259ec6b
[0x4022d1] memchr("\n/* Like error(), but die horrib"..., '\n', 186) = 0x0259ec6c
[0x4022d1] memchr("/* Like error(), but die horribl"..., '\n', 185) = 0x0259eca1
[0x4022d1] memchr("void\nfatal(mesg, errnum)\n#ifdef "..., '\n', 132) = 0x0259eca6
[0x4022d1] memchr("fatal(mesg, errnum)\n#ifdef __STD"..., '\n', 127) = 0x0259ecba
[0x4022d1] memchr("#ifdef __STDC__\n     const\n#endi"..., '\n', 107) = 0x0259ecca
[0x4022d1] memchr("     const\n#endif\n     char *mes"..., '\n', 91) = 0x0259ecd5
[0x4022d1] memchr("#endif\n     char *mesg;\n     int"..., '\n', 80) = 0x0259ecdc
[0x4022d1] memchr("     char *mesg;\n     int errnum"..., '\n', 73) = 0x0259eced
[0x4022d1] memchr("     int errnum;\n{\n  error(mesg,"..., '\n', 56) = 0x0259ecfe
[0x4022d1] memchr("{\n  error(mesg, errnum);\n  exit("..., '\n', 39) = 0x0259ed00
[0x4022d1] memchr("  error(mesg, errnum);\n  exit(2)"..., '\n', 37) = 0x0259ed17
[0x4022d1] memchr("  exit(2);\n}\n\n/* Interface to ha"..., '\n', 14) = 0x0259ed22
[0x4022d1] memchr("}\n\n/* Interface to handle errors"..., '\n', 3) = 0x0259ed24
[0x4022d1] memchr("\n/* Interface to handle errors a"..., '\n', 1) = 0x0259ed25
[0x4022d1] memchr("/* Interface to handle errors an"..., '\n', 0) = NULL
[0x4023cc] fwrite("162:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Interface to handle errors an"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("char *\nxmalloc(size)\n     size_t"..., 'I', 29316) = 0x0259ee03
[0x40cdf3] memchr("Interface to handle errors and f"..., '\n', 29153) = 0x0259ee3e
[0x4022d1] memchr("char *\nxmalloc(size)\n     size_t"..., '\n', 160) = 0x0259ed66
[0x4022d1] memchr("xmalloc(size)\n     size_t size;\n"..., '\n', 153) = 0x0259ed74
[0x4022d1] memchr("     size_t size;\n{\n  char *resu"..., '\n', 139) = 0x0259ed86
[0x4022d1] memchr("{\n  char *result;\n\n  result = ma"..., '\n', 121) = 0x0259ed88
[0x4022d1] memchr("  char *result;\n\n  result = mall"..., '\n', 119) = 0x0259ed98
[0x4022d1] memchr("\n  result = malloc(size);\n  if ("..., '\n', 103) = 0x0259ed99
[0x4022d1] memchr("  result = malloc(size);\n  if (s"..., '\n', 102) = 0x0259edb2
[0x4022d1] memchr("  if (size && !result)\n    fatal"..., '\n', 77) = 0x0259edc9
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 54) = 0x0259edeb
[0x4022d1] memchr("  return result;\n}\n\n/* Interface"..., '\n', 20) = 0x0259edfc
[0x4022d1] memchr("}\n\n/* Interface to handle errors"..., '\n', 3) = 0x0259edfe
[0x4022d1] memchr("\n/* Interface to handle errors a"..., '\n', 1) = 0x0259edff
[0x4022d1] memchr("/* Interface to handle errors an"..., '\n', 0) = NULL
[0x4023cc] fwrite("175:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Interface to handle errors an"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("char *\nxrealloc(ptr, size)\n     "..., 'I', 29093) = 0x0259f1a1
[0x40cdf3] memchr("ING_MMAP)\n#if flag_systypes==0\n#"..., '\n', 28227) = 0x0259f1aa
[0x4022d1] memchr("char *\nxrealloc(ptr, size)\n     "..., '\n', 845) = 0x0259ee45
[0x4022d1] memchr("xrealloc(ptr, size)\n     char *p"..., '\n', 838) = 0x0259ee59
[0x4022d1] memchr("     char *ptr;\n     size_t size"..., '\n', 818) = 0x0259ee69
[0x4022d1] memchr("     size_t size;\n{\n  char *resu"..., '\n', 802) = 0x0259ee7b
[0x4022d1] memchr("{\n  char *result;\n\n  if (ptr)\n  "..., '\n', 784) = 0x0259ee7d
[0x4022d1] memchr("  char *result;\n\n  if (ptr)\n    "..., '\n', 782) = 0x0259ee8d
[0x4022d1] memchr("\n  if (ptr)\n    result = realloc"..., '\n', 766) = 0x0259ee8e
[0x4022d1] memchr("  if (ptr)\n    result = realloc("..., '\n', 765) = 0x0259ee99
[0x4022d1] memchr("    result = realloc(ptr, size);"..., '\n', 754) = 0x0259eeba
[0x4022d1] memchr("  else\n    result = malloc(size)"..., '\n', 721) = 0x0259eec1
[0x4022d1] memchr("    result = malloc(size);\n  if "..., '\n', 714) = 0x0259eedc
[0x4022d1] memchr("  if (size && !result)\n    fatal"..., '\n', 687) = 0x0259eef3
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 664) = 0x0259ef15
[0x4022d1] memchr("  return result;\n}\n\n#if !defined"..., '\n', 630) = 0x0259ef26
[0x4022d1] memchr("}\n\n#if !defined(HAVE_VALLOC)\n#de"..., '\n', 613) = 0x0259ef28
[0x4022d1] memchr("\n#if !defined(HAVE_VALLOC)\n#defi"..., '\n', 611) = 0x0259ef29
[0x4022d1] memchr("#if !defined(HAVE_VALLOC)\n#defin"..., '\n', 610) = 0x0259ef43
[0x4022d1] memchr("#define valloc malloc\n#else\n#ifd"..., '\n', 584) = 0x0259ef59
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 562) = 0x0259ef5f
[0x4022d1] memchr("#ifdef __STDC__\nextern void *val"..., '\n', 556) = 0x0259ef6f
[0x4022d1] memchr("extern void *valloc(size_t);\n#el"..., '\n', 540) = 0x0259ef8c
[0x4022d1] memchr("#else\nextern char *valloc();\n#en"..., '\n', 511) = 0x0259ef92
[0x4022d1] memchr("extern char *valloc();\n#endif\n#e"..., '\n', 505) = 0x0259efa9
[0x4022d1] memchr("#endif\n#endif\n\n/* Hairy bufferin"..., '\n', 482) = 0x0259efb0
[0x4022d1] memchr("#endif\n\n/* Hairy buffering mecha"..., '\n', 475) = 0x0259efb7
[0x4022d1] memchr("\n/* Hairy buffering mechanism fo"..., '\n', 468) = 0x0259efb8
[0x4022d1] memchr("/* Hairy buffering mechanism for"..., '\n', 467) = 0x0259eff6
[0x4022d1] memchr("   all reads aligned on a page b"..., '\n', 405) = 0x0259f033
[0x4022d1] memchr("   page size. */\n\nstatic char *b"..., '\n', 344) = 0x0259f044
[0x4022d1] memchr("\nstatic char *buffer;\t\t/* Base o"..., '\n', 327) = 0x0259f045
[0x4022d1] memchr("static char *buffer;\t\t/* Base of"..., '\n', 326) = 0x0259f071
[0x4022d1] memchr("static size_t bufsalloc;\t/* Allo"..., '\n', 282) = 0x0259f0b6
[0x4022d1] memchr("static size_t bufalloc;\t\t/* Tota"..., '\n', 213) = 0x0259f0e8
[0x4022d1] memchr("static int bufdesc;\t\t/* File des"..., '\n', 163) = 0x0259f114
[0x4022d1] memchr("static char *bufbeg;\t\t/* Beginni"..., '\n', 119) = 0x0259f151
[0x4022d1] memchr("static char *buflim;\t\t/* Limit o"..., '\n', 58) = 0x0259f18a
[0x4022d1] memchr("\n#if defined(HAVE_WORKING_MMAP)\n"..., '\n', 1) = 0x0259f18b
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("213:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if defined(HAVE_WORKING_MMAP)\n#"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if flag_systypes==0\n#include <s"..., 'I', 28217) = 0x0259f2f5
[0x40cdf3] memchr("Initialize\n   on the first time "..., '\n', 27887) = 0x0259f2ff
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 293) = 0x0259f1bf
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 272) = 0x0259f1d6
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 249) = 0x0259f1ee
[0x4022d1] memchr("#endif\n#include <sys/stat.h>\n#in"..., '\n', 225) = 0x0259f1f5
[0x4022d1] memchr("#include <sys/stat.h>\n#include <"..., '\n', 218) = 0x0259f20b
[0x4022d1] memchr("#include <sys/mman.h>\n\nstatic in"..., '\n', 196) = 0x0259f221
[0x4022d1] memchr("\nstatic int bufmapped;\t\t/* True "..., '\n', 174) = 0x0259f222
[0x4022d1] memchr("static int bufmapped;\t\t/* True f"..., '\n', 173) = 0x0259f258
[0x4022d1] memchr("static struct stat bufstat;\t/* F"..., '\n', 119) = 0x0259f288
[0x4022d1] memchr("static off_t bufoffset;\t\t/* What"..., '\n', 71) = 0x0259f2c7
[0x4022d1] memchr("#endif\n\n/* Reset the buffer for "..., '\n', 8) = 0x0259f2ce
[0x4022d1] memchr("\n/* Reset the buffer for a new f"..., '\n', 1) = 0x0259f2cf
[0x4022d1] memchr("/* Reset the buffer for a new fi"..., '\n', 0) = NULL
[0x4023cc] fwrite("226:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Reset the buffer for a new fi"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   on the first time through. */"..., 'I', 27876) = 0x0259f571
[0x40cdf3] memchr("ING_MMAP)\n  if (fstat(fd, &bufst"..., '\n', 27251) = 0x0259f57a
[0x4022d1] memchr("   on the first time through. */"..., '\n', 604) = 0x0259f320
[0x4022d1] memchr("void\nreset(fd)\n     int fd;\n{\n  "..., '\n', 571) = 0x0259f325
[0x4022d1] memchr("reset(fd)\n     int fd;\n{\n  stati"..., '\n', 566) = 0x0259f32f
[0x4022d1] memchr("     int fd;\n{\n  static int init"..., '\n', 556) = 0x0259f33c
[0x4022d1] memchr("{\n  static int initialized;\n\n  i"..., '\n', 543) = 0x0259f33e
[0x4022d1] memchr("  static int initialized;\n\n  if "..., '\n', 541) = 0x0259f358
[0x4022d1] memchr("\n  if (!initialized)\n    {\n     "..., '\n', 515) = 0x0259f359
[0x4022d1] memchr("  if (!initialized)\n    {\n      "..., '\n', 514) = 0x0259f36d
[0x4022d1] memchr("    {\n      initialized = 1;\n#if"..., '\n', 494) = 0x0259f373
[0x4022d1] memchr("      initialized = 1;\n#ifndef B"..., '\n', 488) = 0x0259f38a
[0x4022d1] memchr("#ifndef BUFSALLOC\n      bufsallo"..., '\n', 465) = 0x0259f39c
[0x4022d1] memchr("      bufsalloc = MAX(8192, getp"..., '\n', 447) = 0x0259f3c8
[0x4022d1] memchr("#else\n      bufsalloc = BUFSALLO"..., '\n', 403) = 0x0259f3ce
[0x4022d1] memchr("      bufsalloc = BUFSALLOC;\n#en"..., '\n', 397) = 0x0259f3eb
[0x4022d1] memchr("#endif\n      bufalloc = 5 * bufs"..., '\n', 368) = 0x0259f3f2
[0x4022d1] memchr("      bufalloc = 5 * bufsalloc;\n"..., '\n', 361) = 0x0259f412
[0x4022d1] memchr("      /* The 1 byte of overflow "..., '\n', 329) = 0x0259f453
[0x4022d1] memchr("\t inserts a sentinel newline at "..., '\n', 264) = 0x0259f489
[0x4022d1] memchr("\t being searched.  There's gotta"..., '\n', 210) = 0x0259f4c0
[0x4022d1] memchr("      buffer = valloc(bufalloc +"..., '\n', 155) = 0x0259f4e5
[0x4022d1] memchr("      if (!buffer)\n\tfatal("memor"..., '\n', 118) = 0x0259f4f8
[0x4022d1] memchr("\tfatal("memory exhausted", 0);\n "..., '\n', 99) = 0x0259f517
[0x4022d1] memchr("      bufbeg = buffer;\n      buf"..., '\n', 68) = 0x0259f52e
[0x4022d1] memchr("      buflim = buffer;\n    }\n  b"..., '\n', 45) = 0x0259f545
[0x4022d1] memchr("    }\n  bufdesc = fd;\n#if define"..., '\n', 22) = 0x0259f54b
[0x4022d1] memchr("  bufdesc = fd;\n#if defined(HAVE"..., '\n', 16) = 0x0259f55b
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("253:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if defined(HAVE_WORKING_MMAP)\n "..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (fstat(fd, &bufstat) < 0 ||"..., 'I', 27241) = 0x0259f59f
[0x40cdf3] memchr("ISREG(bufstat.st_mode))\n    bufm"..., '\n', 27205) = 0x0259f5b6
[0x4022d1] memchr("  if (fstat(fd, &bufstat) < 0 ||"..., '\n', 0) = NULL
[0x4023cc] fwrite("254:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("  if (fstat(fd, &bufstat) < 0 ||"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    bufmapped = 0;\n  else\n    {\n"..., 'I', 27181) = 0x0259f76e
[0x40cdf3] memchr("ING_MMAP)\n  caddr_t maddr;\n#endi"..., '\n', 26742) = 0x0259f777
[0x4022d1] memchr("    bufmapped = 0;\n  else\n    {\n"..., '\n', 418) = 0x0259f5c9
[0x4022d1] memchr("  else\n    {\n      bufmapped = 1"..., '\n', 399) = 0x0259f5d0
[0x4022d1] memchr("    {\n      bufmapped = 1;\n     "..., '\n', 392) = 0x0259f5d6
[0x4022d1] memchr("      bufmapped = 1;\n      bufof"..., '\n', 386) = 0x0259f5eb
[0x4022d1] memchr("      bufoffset = lseek(fd, 0, 1"..., '\n', 365) = 0x0259f60e
[0x4022d1] memchr("    }\n#endif\n}\n\n/* Read new stuf"..., '\n', 330) = 0x0259f614
[0x4022d1] memchr("#endif\n}\n\n/* Read new stuff into"..., '\n', 324) = 0x0259f61b
[0x4022d1] memchr("}\n\n/* Read new stuff into the bu"..., '\n', 317) = 0x0259f61d
[0x4022d1] memchr("\n/* Read new stuff into the buff"..., '\n', 315) = 0x0259f61e
[0x4022d1] memchr("/* Read new stuff into the buffe"..., '\n', 314) = 0x0259f656
[0x4022d1] memchr("   amount of old stuff.  When we"..., '\n', 258) = 0x0259f690
[0x4022d1] memchr("   to the beginning of the buffe"..., '\n', 200) = 0x0259f6c9
[0x4022d1] memchr("   points just after the end.  R"..., '\n', 143) = 0x0259f706
[0x4022d1] memchr("static int\nfillbuf(save)\n     si"..., '\n', 82) = 0x0259f711
[0x4022d1] memchr("fillbuf(save)\n     size_t save;\n"..., '\n', 71) = 0x0259f71f
[0x4022d1] memchr("     size_t save;\n{\n  char *nbuf"..., '\n', 57) = 0x0259f731
[0x4022d1] memchr("{\n  char *nbuffer, *dp, *sp;\n  i"..., '\n', 39) = 0x0259f733
[0x4022d1] memchr("  char *nbuffer, *dp, *sp;\n  int"..., '\n', 37) = 0x0259f74e
[0x4022d1] memchr("  int cc;\n#if defined(HAVE_WORKI"..., '\n', 10) = 0x0259f758
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("274:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if defined(HAVE_WORKING_MMAP)\n "..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  caddr_t maddr;\n#endif\n  static"..., 'I', 26732) = 0x0259fa05
[0x40cdf3] memchr("ING_MMAP)\n  if (bufmapped && buf"..., '\n', 26079) = 0x0259fa0e
[0x4022d1] memchr("  caddr_t maddr;\n#endif\n  static"..., '\n', 632) = 0x0259f788
[0x4022d1] memchr("#endif\n  static int pagesize;\n\n "..., '\n', 615) = 0x0259f78f
[0x4022d1] memchr("  static int pagesize;\n\n  if (pa"..., '\n', 608) = 0x0259f7a6
[0x4022d1] memchr("\n  if (pagesize == 0 && (pagesiz"..., '\n', 585) = 0x0259f7a7
[0x4022d1] memchr("  if (pagesize == 0 && (pagesize"..., '\n', 584) = 0x0259f7df
[0x4022d1] memchr("    abort();\n\n  if (save > bufsa"..., '\n', 528) = 0x0259f7ec
[0x4022d1] memchr("\n  if (save > bufsalloc)\n    {\n "..., '\n', 515) = 0x0259f7ed
[0x4022d1] memchr("  if (save > bufsalloc)\n    {\n  "..., '\n', 514) = 0x0259f805
[0x4022d1] memchr("    {\n      while (save > bufsal"..., '\n', 490) = 0x0259f80b
[0x4022d1] memchr("      while (save > bufsalloc)\n\t"..., '\n', 484) = 0x0259f82a
[0x4022d1] memchr("\tbufsalloc *= 2;\n      bufalloc "..., '\n', 453) = 0x0259f83b
[0x4022d1] memchr("      bufalloc = 5 * bufsalloc;\n"..., '\n', 436) = 0x0259f85b
[0x4022d1] memchr("      nbuffer = valloc(bufalloc "..., '\n', 404) = 0x0259f881
[0x4022d1] memchr("      if (!nbuffer)\n\tfatal("memo"..., '\n', 366) = 0x0259f895
[0x4022d1] memchr("\tfatal("memory exhausted", 0);\n "..., '\n', 346) = 0x0259f8b4
[0x4022d1] memchr("    }\n  else\n    nbuffer = buffe"..., '\n', 315) = 0x0259f8ba
[0x4022d1] memchr("  else\n    nbuffer = buffer;\n\n  "..., '\n', 309) = 0x0259f8c1
[0x4022d1] memchr("    nbuffer = buffer;\n\n  sp = bu"..., '\n', 302) = 0x0259f8d7
[0x4022d1] memchr("\n  sp = buflim - save;\n  dp = nb"..., '\n', 280) = 0x0259f8d8
[0x4022d1] memchr("  sp = buflim - save;\n  dp = nbu"..., '\n', 279) = 0x0259f8ee
[0x4022d1] memchr("  dp = nbuffer + bufsalloc - sav"..., '\n', 257) = 0x0259f911
[0x4022d1] memchr("  bufbeg = dp;\n  while (save--)\n"..., '\n', 222) = 0x0259f920
[0x4022d1] memchr("  while (save--)\n    *dp++ = *sp"..., '\n', 207) = 0x0259f931
[0x4022d1] memchr("    *dp++ = *sp++;\n\n  /* We may "..., '\n', 190) = 0x0259f944
[0x4022d1] memchr("\n  /* We may have allocated a ne"..., '\n', 171) = 0x0259f945
[0x4022d1] memchr("  /* We may have allocated a new"..., '\n', 170) = 0x0259f97d
[0x4022d1] memchr("     there is no portable vfree("..., '\n', 114) = 0x0259f9b7
[0x4022d1] memchr("     about the old one.  Sorry. "..., '\n', 56) = 0x0259f9da
[0x4022d1] memchr("  buffer = nbuffer;\n\n#if defined"..., '\n', 21) = 0x0259f9ee
[0x4022d1] memchr("\n#if defined(HAVE_WORKING_MMAP)\n"..., '\n', 1) = 0x0259f9ef
[0x4022d1] memchr("#if defined(HAVE_WORKING_MMAP)\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("305:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if defined(HAVE_WORKING_MMAP)\n "..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (bufmapped && bufoffset % p"..., 'I', 26069) = 0x0259fae5
[0x40cdf3] memchr("ITE,\n\t\t   MAP_PRIVATE | MAP_FIXE"..., '\n', 25855) = 0x0259fae9
[0x4022d1] memchr("  if (bufmapped && bufoffset % p"..., '\n', 147) = 0x0259fa3b
[0x4022d1] memchr("      && bufstat.st_size - bufof"..., '\n', 102) = 0x0259fa79
[0x4022d1] memchr("    {\n      maddr = buffer + buf"..., '\n', 40) = 0x0259fa7f
[0x4022d1] memchr("      maddr = buffer + bufsalloc"..., '\n', 34) = 0x0259faa1
[0x4022d1] memchr("      maddr = mmap(maddr, bufall"..., '\n', 0) = NULL
[0x4023cc] fwrite("310:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("      maddr = mmap(maddr, bufall"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   MAP_PRIVATE | MAP_FIXED, bu"..., 'I', 25850) = 0x0259faf5
[0x40cdf3] memchr("IVATE | MAP_FIXED, bufdesc, bufo"..., '\n', 25839) = 0x0259fb1c
[0x4022d1] memchr("\t\t   MAP_PRIVATE | MAP_FIXED, bu"..., '\n', 0) = NULL
[0x4023cc] fwrite("311:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("\t\t   MAP_PRIVATE | MAP_FIXED, bu"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (maddr == (caddr_t) -1)"..., 'I', 25799) = 0x0259fbcf
[0x40cdf3] memchr("ILLNEED) would help,\n\t but it do"..., '\n', 25621) = 0x0259fbe3
[0x4022d1] memchr("      if (maddr == (caddr_t) -1)"..., '\n', 138) = 0x0259fb3d
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, "%s: warni"..., '\n', 105) = 0x0259fb40
[0x4022d1] memchr("\t  fprintf(stderr, "%s: warning:"..., '\n', 102) = 0x0259fb76
[0x4022d1] memchr("\t\t  strerror(errno));\n\t  goto tr"..., '\n', 48) = 0x0259fb8c
[0x4022d1] memchr("\t  goto tryread;\n\t}\n#if 0\n      "..., '\n', 26) = 0x0259fb9d
[0x4022d1] memchr("\t}\n#if 0\n      /* You might thin"..., '\n', 9) = 0x0259fba0
[0x4022d1] memchr("#if 0\n      /* You might thing t"..., '\n', 6) = 0x0259fba6
[0x4022d1] memchr("      /* You might thing this (o"..., '\n', 0) = NULL
[0x4023cc] fwrite("319:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("      /* You might thing this (o"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t but it doesn't, at least not o"..., 'I', 25600) = 0x0259fc1b
[0x40cdf3] memchr("In fact, it actually slows us do"..., '\n', 25545) = 0x0259fc4b
[0x4022d1] memchr("\t but it doesn't, at least not o"..., '\n', 53) = 0x0259fc18
[0x4022d1] memchr("\t In fact, it actually slows us "..., '\n', 0) = NULL
[0x4023cc] fwrite("321:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("\t In fact, it actually slows us "..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      madvise(maddr, bufalloc - "..., 'I', 25496) = 0x0259fc83
[0x40cdf3] memchr("IAL);\n#endif\n      cc = bufalloc"..., '\n', 25441) = 0x0259fc88
[0x4022d1] memchr("      madvise(maddr, bufalloc - "..., '\n', 0) = NULL
[0x4023cc] fwrite("322:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("      madvise(maddr, bufalloc - "..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n      cc = bufalloc - buf"..., 'I', 25435) = 0x025a006a
[0x40cdf3] memchr("Internal variables to keep track"..., '\n', 24442) = 0x025a00aa
[0x4022d1] memchr("#endif\n      cc = bufalloc - buf"..., '\n', 990) = 0x0259fc8f
[0x4022d1] memchr("      cc = bufalloc - bufsalloc;"..., '\n', 983) = 0x0259fcb0
[0x4022d1] memchr("      bufoffset += cc;\n    }\n  e"..., '\n', 950) = 0x0259fcc7
[0x4022d1] memchr("    }\n  else\n    {\n    tryread:\n"..., '\n', 927) = 0x0259fccd
[0x4022d1] memchr("  else\n    {\n    tryread:\n      "..., '\n', 921) = 0x0259fcd4
[0x4022d1] memchr("    {\n    tryread:\n      /* We c"..., '\n', 914) = 0x0259fcda
[0x4022d1] memchr("    tryread:\n      /* We come he"..., '\n', 908) = 0x0259fce7
[0x4022d1] memchr("      /* We come here when we're"..., '\n', 895) = 0x0259fd2a
[0x4022d1] memchr("\t Note that we need to synchroni"..., '\n', 828) = 0x0259fd61
[0x4022d1] memchr("\t first time through. */\n      i"..., '\n', 773) = 0x0259fd7a
[0x4022d1] memchr("      if (bufmapped)\n\t{\n\t  bufma"..., '\n', 748) = 0x0259fd8f
[0x4022d1] memchr("\t{\n\t  bufmapped = 0;\n\t  lseek(bu"..., '\n', 727) = 0x0259fd92
[0x4022d1] memchr("\t  bufmapped = 0;\n\t  lseek(bufde"..., '\n', 724) = 0x0259fda4
[0x4022d1] memchr("\t  lseek(bufdesc, bufoffset, 0);"..., '\n', 706) = 0x0259fdc5
[0x4022d1] memchr("\t}\n      cc = read(bufdesc, buff"..., '\n', 673) = 0x0259fdc8
[0x4022d1] memchr("      cc = read(bufdesc, buffer "..., '\n', 670) = 0x0259fe0c
[0x4022d1] memchr("    }\n#else\n  cc = read(bufdesc,"..., '\n', 602) = 0x0259fe12
[0x4022d1] memchr("#else\n  cc = read(bufdesc, buffe"..., '\n', 596) = 0x0259fe18
[0x4022d1] memchr("  cc = read(bufdesc, buffer + bu"..., '\n', 590) = 0x0259fe58
[0x4022d1] memchr("#endif\n  if (cc > 0)\n    buflim "..., '\n', 526) = 0x0259fe5f
[0x4022d1] memchr("  if (cc > 0)\n    buflim = buffe"..., '\n', 519) = 0x0259fe6d
[0x4022d1] memchr("    buflim = buffer + bufsalloc "..., '\n', 505) = 0x0259fe93
[0x4022d1] memchr("  else\n    buflim = buffer + buf"..., '\n', 467) = 0x0259fe9a
[0x4022d1] memchr("    buflim = buffer + bufsalloc;"..., '\n', 460) = 0x0259febb
[0x4022d1] memchr("  return cc;\n}\n\n/* Flags control"..., '\n', 427) = 0x0259fec8
[0x4022d1] memchr("}\n\n/* Flags controlling the styl"..., '\n', 414) = 0x0259feca
[0x4022d1] memchr("\n/* Flags controlling the style "..., '\n', 412) = 0x0259fecb
[0x4022d1] memchr("/* Flags controlling the style o"..., '\n', 411) = 0x0259fef8
[0x4022d1] memchr("static int out_quiet;\t\t/* Suppre"..., '\n', 366) = 0x0259ff31
[0x4022d1] memchr("static int out_invert;\t\t/* Print"..., '\n', 309) = 0x0259ff68
[0x4022d1] memchr("static int out_file;\t\t/* Print f"..., '\n', 254) = 0x0259ff95
[0x4022d1] memchr("static int out_line;\t\t/* Print l"..., '\n', 209) = 0x0259ffc5
[0x4022d1] memchr("static int out_byte;\t\t/* Print b"..., '\n', 161) = 0x0259fff5
[0x4022d1] memchr("static int out_before;\t\t/* Lines"..., '\n', 113) = 0x025a002d
[0x4022d1] memchr("static int out_after;\t\t/* Lines "..., '\n', 57) = 0x025a0065
[0x4022d1] memchr("\n/* Internal variables to keep t"..., '\n', 1) = 0x025a0066
[0x4022d1] memchr("/* Internal variables to keep tr"..., '\n', 0) = NULL
[0x4023cc] fwrite("359:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Internal variables to keep tr"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("static size_t totalcc;\t\t/* Total"..., 'I', 24377) = 0x025a04b4
[0x40cdf3] memchr("IM. */\nstatic void\nprpending(lim"..., '\n', 23344) = 0x025a04ba
[0x4022d1] memchr("static size_t totalcc;\t\t/* Total"..., '\n', 980) = 0x025a00ed
[0x4022d1] memchr("static char *lastnl;\t\t/* Pointer"..., '\n', 913) = 0x025a012d
[0x4022d1] memchr("static char *lastout;\t\t/* Pointe"..., '\n', 849) = 0x025a016c
[0x4022d1] memchr("\t\t\t\t   NULL if no character has "..., '\n', 786) = 0x025a0198
[0x4022d1] memchr("\t\t\t\t   or if it's conceptually b"..., '\n', 742) = 0x025a01c9
[0x4022d1] memchr("static size_t totalnl;\t\t/* Total"..., '\n', 693) = 0x025a020a
[0x4022d1] memchr("static int pending;\t\t/* Pending "..., '\n', 628) = 0x025a023e
[0x4022d1] memchr("\nstatic void\nnlscan(lim)\n     ch"..., '\n', 576) = 0x025a023f
[0x4022d1] memchr("static void\nnlscan(lim)\n     cha"..., '\n', 575) = 0x025a024b
[0x4022d1] memchr("nlscan(lim)\n     char *lim;\n{\n  "..., '\n', 563) = 0x025a0257
[0x4022d1] memchr("     char *lim;\n{\n  char *beg;\n\n"..., '\n', 551) = 0x025a0267
[0x4022d1] memchr("{\n  char *beg;\n\n  for (beg = las"..., '\n', 535) = 0x025a0269
[0x4022d1] memchr("  char *beg;\n\n  for (beg = lastn"..., '\n', 533) = 0x025a0276
[0x4022d1] memchr("\n  for (beg = lastnl; beg < lim;"..., '\n', 520) = 0x025a0277
[0x4022d1] memchr("  for (beg = lastnl; beg < lim; "..., '\n', 519) = 0x025a029e
[0x4022d1] memchr("    if (*beg == '\\n')\n      ++to"..., '\n', 480) = 0x025a02b4
[0x4022d1] memchr("      ++totalnl;\n  lastnl = beg;"..., '\n', 458) = 0x025a02c5
[0x4022d1] memchr("  lastnl = beg;\n}\n\nstatic void\np"..., '\n', 441) = 0x025a02d5
[0x4022d1] memchr("}\n\nstatic void\nprline(beg, lim, "..., '\n', 425) = 0x025a02d7
[0x4022d1] memchr("\nstatic void\nprline(beg, lim, se"..., '\n', 423) = 0x025a02d8
[0x4022d1] memchr("static void\nprline(beg, lim, sep"..., '\n', 422) = 0x025a02e4
[0x4022d1] memchr("prline(beg, lim, sep)\n     char "..., '\n', 410) = 0x025a02fa
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 388) = 0x025a030a
[0x4022d1] memchr("     char *lim;\n     char sep;\n{"..., '\n', 372) = 0x025a031a
[0x4022d1] memchr("     char sep;\n{\n  if (out_file)"..., '\n', 356) = 0x025a0329
[0x4022d1] memchr("{\n  if (out_file)\n    printf("%s"..., '\n', 341) = 0x025a032b
[0x4022d1] memchr("  if (out_file)\n    printf("%s%c"..., '\n', 339) = 0x025a033b
[0x4022d1] memchr("    printf("%s%c", filename, sep"..., '\n', 323) = 0x025a035e
[0x4022d1] memchr("  if (out_line)\n    {\n      nlsc"..., '\n', 288) = 0x025a036e
[0x4022d1] memchr("    {\n      nlscan(beg);\n      p"..., '\n', 272) = 0x025a0374
[0x4022d1] memchr("      nlscan(beg);\n      printf("..., '\n', 266) = 0x025a0387
[0x4022d1] memchr("      printf("%d%c", ++totalnl, "..., '\n', 247) = 0x025a03ad
[0x4022d1] memchr("      lastnl = lim;\n    }\n  if ("..., '\n', 209) = 0x025a03c1
[0x4022d1] memchr("    }\n  if (out_byte)\n    printf"..., '\n', 189) = 0x025a03c7
[0x4022d1] memchr("  if (out_byte)\n    printf("%lu%"..., '\n', 183) = 0x025a03d7
[0x4022d1] memchr("    printf("%lu%c", totalcc + (b"..., '\n', 167) = 0x025a040b
[0x4022d1] memchr("  fwrite(beg, 1, lim - beg, stdo"..., '\n', 115) = 0x025a0430
[0x4022d1] memchr("  if (ferror(stdout))\n    error("..., '\n', 78) = 0x025a0446
[0x4022d1] memchr("    error("writing output", errn"..., '\n', 56) = 0x025a046a
[0x4022d1] memchr("  lastout = lim;\n}\n\n/* Print pen"..., '\n', 20) = 0x025a047b
[0x4022d1] memchr("}\n\n/* Print pending lines of tra"..., '\n', 3) = 0x025a047d
[0x4022d1] memchr("\n/* Print pending lines of trail"..., '\n', 1) = 0x025a047e
[0x4022d1] memchr("/* Print pending lines of traili"..., '\n', 0) = NULL
[0x4023cc] fwrite("402:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Print pending lines of traili"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("static void\nprpending(lim)\n     "..., 'I', 23337) = 0x025a05ff
[0x40cdf3] memchr("IM.  Deal with context crap.\n   "..., '\n', 23013) = 0x025a061b
[0x4022d1] memchr("static void\nprpending(lim)\n     "..., '\n', 288) = 0x025a04c6
[0x4022d1] memchr("prpending(lim)\n     char *lim;\n{"..., '\n', 276) = 0x025a04d5
[0x4022d1] memchr("     char *lim;\n{\n  char *nl;\n\n "..., '\n', 261) = 0x025a04e5
[0x4022d1] memchr("{\n  char *nl;\n\n  if (!lastout)\n "..., '\n', 245) = 0x025a04e7
[0x4022d1] memchr("  char *nl;\n\n  if (!lastout)\n   "..., '\n', 243) = 0x025a04f3
[0x4022d1] memchr("\n  if (!lastout)\n    lastout = b"..., '\n', 231) = 0x025a04f4
[0x4022d1] memchr("  if (!lastout)\n    lastout = bu"..., '\n', 230) = 0x025a0504
[0x4022d1] memchr("    lastout = bufbeg;\n  while (p"..., '\n', 214) = 0x025a051a
[0x4022d1] memchr("  while (pending > 0 && lastout "..., '\n', 192) = 0x025a0541
[0x4022d1] memchr("    {\n      --pending;\n      if "..., '\n', 153) = 0x025a0547
[0x4022d1] memchr("      --pending;\n      if ((nl ="..., '\n', 147) = 0x025a0558
[0x4022d1] memchr("      if ((nl = memchr(lastout, "..., '\n', 130) = 0x025a0594
[0x4022d1] memchr("\t++nl;\n      else\n\tnl = lim;\n   "..., '\n', 70) = 0x025a059b
[0x4022d1] memchr("      else\n\tnl = lim;\n      prli"..., '\n', 63) = 0x025a05a6
[0x4022d1] memchr("\tnl = lim;\n      prline(lastout,"..., '\n', 52) = 0x025a05b1
[0x4022d1] memchr("      prline(lastout, nl, '-');\n"..., '\n', 41) = 0x025a05d1
[0x4022d1] memchr("    }\n}\n\n/* Print the lines betw"..., '\n', 9) = 0x025a05d7
[0x4022d1] memchr("}\n\n/* Print the lines between BE"..., '\n', 3) = 0x025a05d9
[0x4022d1] memchr("\n/* Print the lines between BEG "..., '\n', 1) = 0x025a05da
[0x4022d1] memchr("/* Print the lines between BEG a"..., '\n', 0) = NULL
[0x4023cc] fwrite("422:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Print the lines between BEG a"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   If NLINESP is non-null, store"..., 'I', 22984) = 0x025a061f
[0x40cdf3] memchr("If NLINESP is non-null, store a "..., '\n', 22981) = 0x025a0665
[0x4022d1] memchr("   If NLINESP is non-null, store"..., '\n', 0) = NULL
[0x4023cc] fwrite("423:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   If NLINESP is non-null, store"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("static void\nprtext(beg, lim, nli"..., 'I', 22910) = 0x025a0b26
[0x40cdf3] memchr("INVERT is true).  Return a count"..., '\n', 21694) = 0x025a0b49
[0x4022d1] memchr("static void\nprtext(beg, lim, nli"..., '\n', 1183) = 0x025a0671
[0x4022d1] memchr("prtext(beg, lim, nlinesp)\n     c"..., '\n', 1171) = 0x025a068b
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 1145) = 0x025a069b
[0x4022d1] memchr("     char *lim;\n     int *nlines"..., '\n', 1129) = 0x025a06ab
[0x4022d1] memchr("     int *nlinesp;\n{\n  static in"..., '\n', 1113) = 0x025a06be
[0x4022d1] memchr("{\n  static int used;\t\t/* avoid p"..., '\n', 1094) = 0x025a06c0
[0x4022d1] memchr("  static int used;\t\t/* avoid pri"..., '\n', 1092) = 0x025a0700
[0x4022d1] memchr("  char *bp, *p, *nl;\n  int i, n;"..., '\n', 1028) = 0x025a0715
[0x4022d1] memchr("  int i, n;\n\n  if (!out_quiet &&"..., '\n', 1007) = 0x025a0721
[0x4022d1] memchr("\n  if (!out_quiet && pending > 0"..., '\n', 995) = 0x025a0722
[0x4022d1] memchr("  if (!out_quiet && pending > 0)"..., '\n', 994) = 0x025a0743
[0x4022d1] memchr("    prpending(beg);\n\n  p = beg;\n"..., '\n', 961) = 0x025a0757
[0x4022d1] memchr("\n  p = beg;\n\n  if (!out_quiet)\n "..., '\n', 941) = 0x025a0758
[0x4022d1] memchr("  p = beg;\n\n  if (!out_quiet)\n  "..., '\n', 940) = 0x025a0763
[0x4022d1] memchr("\n  if (!out_quiet)\n    {\n      /"..., '\n', 929) = 0x025a0764
[0x4022d1] memchr("  if (!out_quiet)\n    {\n      /*"..., '\n', 928) = 0x025a0776
[0x4022d1] memchr("    {\n      /* Deal with leading"..., '\n', 910) = 0x025a077c
[0x4022d1] memchr("      /* Deal with leading conte"..., '\n', 904) = 0x025a07a8
[0x4022d1] memchr("\n      bp = lastout ? lastout : "..., '\n', 860) = 0x025a07a9
[0x4022d1] memchr("      bp = lastout ? lastout : b"..., '\n', 859) = 0x025a07d0
[0x4022d1] memchr("      for (i = 0; i < out_before"..., '\n', 820) = 0x025a07f7
[0x4022d1] memchr("\tif (p > bp)\n\t  do\n\t    --p;\n\t  "..., '\n', 781) = 0x025a0804
[0x4022d1] memchr("\t  do\n\t    --p;\n\t  while (p > bp"..., '\n', 768) = 0x025a080a
[0x4022d1] memchr("\t    --p;\n\t  while (p > bp && p["..., '\n', 762) = 0x025a0814
[0x4022d1] memchr("\t  while (p > bp && p[-1] != '\\n"..., '\n', 752) = 0x025a0838
[0x4022d1] memchr("\n      /* We only print the "--""..., '\n', 716) = 0x025a0839
[0x4022d1] memchr("      /* We only print the "--" "..., '\n', 715) = 0x025a0874
[0x4022d1] memchr("\t discontiguous from the last ou"..., '\n', 656) = 0x025a08a9
[0x4022d1] memchr("      if ((out_before || out_aft"..., '\n', 603) = 0x025a08e6
[0x4022d1] memchr("\tputs("--");\n\n      while (p < b"..., '\n', 542) = 0x025a08f3
[0x4022d1] memchr("\n      while (p < beg)\n\t{\n\t  nl "..., '\n', 529) = 0x025a08f4
[0x4022d1] memchr("      while (p < beg)\n\t{\n\t  nl ="..., '\n', 528) = 0x025a090a
[0x4022d1] memchr("\t{\n\t  nl = memchr(p, '\\n', beg -"..., '\n', 506) = 0x025a090d
[0x4022d1] memchr("\t  nl = memchr(p, '\\n', beg - p)"..., '\n', 503) = 0x025a092f
[0x4022d1] memchr("\t  prline(p, nl + 1, '-');\n\t  p "..., '\n', 469) = 0x025a094a
[0x4022d1] memchr("\t  p = nl + 1;\n\t}\n    }\n\n  if (n"..., '\n', 442) = 0x025a0959
[0x4022d1] memchr("\t}\n    }\n\n  if (nlinesp)\n    {\n "..., '\n', 427) = 0x025a095c
[0x4022d1] memchr("    }\n\n  if (nlinesp)\n    {\n    "..., '\n', 424) = 0x025a0962
[0x4022d1] memchr("\n  if (nlinesp)\n    {\n      /* C"..., '\n', 418) = 0x025a0963
[0x4022d1] memchr("  if (nlinesp)\n    {\n      /* Ca"..., '\n', 417) = 0x025a0972
[0x4022d1] memchr("    {\n      /* Caller wants a li"..., '\n', 402) = 0x025a0978
[0x4022d1] memchr("      /* Caller wants a line cou"..., '\n', 396) = 0x025a099f
[0x4022d1] memchr("      for (n = 0; p < lim; ++n)\n"..., '\n', 357) = 0x025a09bf
[0x4022d1] memchr("\t{\n\t  if ((nl = memchr(p, '\\n', "..., '\n', 325) = 0x025a09c2
[0x4022d1] memchr("\t  if ((nl = memchr(p, '\\n', lim"..., '\n', 322) = 0x025a09ef
[0x4022d1] memchr("\t    ++nl;\n\t  else\n\t    nl = lim"..., '\n', 277) = 0x025a09fa
[0x4022d1] memchr("\t  else\n\t    nl = lim;\n\t  if (!o"..., '\n', 266) = 0x025a0a02
[0x4022d1] memchr("\t    nl = lim;\n\t  if (!out_quiet"..., '\n', 258) = 0x025a0a11
[0x4022d1] memchr("\t  if (!out_quiet)\n\t    prline(p"..., '\n', 243) = 0x025a0a24
[0x4022d1] memchr("\t    prline(p, nl, ':');\n\t  p = "..., '\n', 224) = 0x025a0a3d
[0x4022d1] memchr("\t  p = nl;\n\t}\n      *nlinesp = n"..., '\n', 199) = 0x025a0a48
[0x4022d1] memchr("\t}\n      *nlinesp = n;\n    }\n  e"..., '\n', 188) = 0x025a0a4b
[0x4022d1] memchr("      *nlinesp = n;\n    }\n  else"..., '\n', 185) = 0x025a0a5f
[0x4022d1] memchr("    }\n  else\n    if (!out_quiet)"..., '\n', 165) = 0x025a0a65
[0x4022d1] memchr("  else\n    if (!out_quiet)\n     "..., '\n', 159) = 0x025a0a6c
[0x4022d1] memchr("    if (!out_quiet)\n      prline"..., '\n', 152) = 0x025a0a80
[0x4022d1] memchr("      prline(beg, lim, ':');\n\n  "..., '\n', 132) = 0x025a0a9d
[0x4022d1] memchr("\n  pending = out_after;\n  used ="..., '\n', 103) = 0x025a0a9e
[0x4022d1] memchr("  pending = out_after;\n  used = "..., '\n', 102) = 0x025a0ab5
[0x4022d1] memchr("  used = 1;\n}\n\n/* Scan the speci"..., '\n', 79) = 0x025a0ac1
[0x4022d1] memchr("}\n\n/* Scan the specified portion"..., '\n', 67) = 0x025a0ac3
[0x4022d1] memchr("\n/* Scan the specified portion o"..., '\n', 65) = 0x025a0ac4
[0x4022d1] memchr("/* Scan the specified portion of"..., '\n', 64) = 0x025a0b04
[0x4022d1] memchr("   between matching lines if OUT"..., '\n', 0) = NULL
[0x4023cc] fwrite("487:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   between matching lines if OUT"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   lines printed. */\nstatic int\n"..., 'I', 21658) = 0x025a1374
[0x40cdf3] memchr("If we find it, install it in com"..., '\n', 19568) = 0x025a13b7
[0x4022d1] memchr("   lines printed. */\nstatic int\n"..., '\n', 2087) = 0x025a0b5e
[0x4022d1] memchr("static int\ngrepbuf(beg, lim)\n   "..., '\n', 2066) = 0x025a0b69
[0x4022d1] memchr("grepbuf(beg, lim)\n     char *beg"..., '\n', 2055) = 0x025a0b7b
[0x4022d1] memchr("     char *beg;\n     char *lim;\n"..., '\n', 2037) = 0x025a0b8b
[0x4022d1] memchr("     char *lim;\n{\n  int nlines, "..., '\n', 2021) = 0x025a0b9b
[0x4022d1] memchr("{\n  int nlines, n;\n  register ch"..., '\n', 2005) = 0x025a0b9d
[0x4022d1] memchr("  int nlines, n;\n  register char"..., '\n', 2003) = 0x025a0bae
[0x4022d1] memchr("  register char *p, *b;\n  char *"..., '\n', 1986) = 0x025a0bc6
[0x4022d1] memchr("  char *endp;\n\n  nlines = 0;\n  p"..., '\n', 1962) = 0x025a0bd4
[0x4022d1] memchr("\n  nlines = 0;\n  p = beg;\n  whil"..., '\n', 1948) = 0x025a0bd5
[0x4022d1] memchr("  nlines = 0;\n  p = beg;\n  while"..., '\n', 1947) = 0x025a0be3
[0x4022d1] memchr("  p = beg;\n  while ((b = (*execu"..., '\n', 1933) = 0x025a0bee
[0x4022d1] memchr("  while ((b = (*execute)(p, lim "..., '\n', 1922) = 0x025a0c21
[0x4022d1] memchr("    {\n      /* Avoid matching th"..., '\n', 1871) = 0x025a0c27
[0x4022d1] memchr("      /* Avoid matching the empt"..., '\n', 1865) = 0x025a0c6b
[0x4022d1] memchr("      if (b == lim && ((b > beg "..., '\n', 1797) = 0x025a0cab
[0x4022d1] memchr("\tbreak;\n      if (!out_invert)\n\t"..., '\n', 1733) = 0x025a0cb3
[0x4022d1] memchr("      if (!out_invert)\n\t{\n\t  prt"..., '\n', 1725) = 0x025a0cca
[0x4022d1] memchr("\t{\n\t  prtext(b, endp, (int *) 0)"..., '\n', 1702) = 0x025a0ccd
[0x4022d1] memchr("\t  prtext(b, endp, (int *) 0);\n\t"..., '\n', 1699) = 0x025a0cec
[0x4022d1] memchr("\t  nlines += 1;\n\t}\n      else if"..., '\n', 1668) = 0x025a0cfc
[0x4022d1] memchr("\t}\n      else if (p < b)\n\t{\n\t  p"..., '\n', 1652) = 0x025a0cff
[0x4022d1] memchr("      else if (p < b)\n\t{\n\t  prte"..., '\n', 1649) = 0x025a0d15
[0x4022d1] memchr("\t{\n\t  prtext(p, b, &n);\n\t  nline"..., '\n', 1627) = 0x025a0d18
[0x4022d1] memchr("\t  prtext(p, b, &n);\n\t  nlines +"..., '\n', 1624) = 0x025a0d2d
[0x4022d1] memchr("\t  nlines += n;\n\t}\n      p = end"..., '\n', 1603) = 0x025a0d3d
[0x4022d1] memchr("\t}\n      p = endp;\n    }\n  if (o"..., '\n', 1587) = 0x025a0d40
[0x4022d1] memchr("      p = endp;\n    }\n  if (out_"..., '\n', 1584) = 0x025a0d50
[0x4022d1] memchr("    }\n  if (out_invert && p < li"..., '\n', 1568) = 0x025a0d56
[0x4022d1] memchr("  if (out_invert && p < lim)\n   "..., '\n', 1562) = 0x025a0d73
[0x4022d1] memchr("    {\n      prtext(p, lim, &n);\n"..., '\n', 1533) = 0x025a0d79
[0x4022d1] memchr("      prtext(p, lim, &n);\n      "..., '\n', 1527) = 0x025a0d93
[0x4022d1] memchr("      nlines += n;\n    }\n  retur"..., '\n', 1501) = 0x025a0da6
[0x4022d1] memchr("    }\n  return nlines;\n}\n\n/* Sea"..., '\n', 1482) = 0x025a0dac
[0x4022d1] memchr("  return nlines;\n}\n\n/* Search a "..., '\n', 1476) = 0x025a0dbd
[0x4022d1] memchr("}\n\n/* Search a given file.  Retu"..., '\n', 1459) = 0x025a0dbf
[0x4022d1] memchr("\n/* Search a given file.  Return"..., '\n', 1457) = 0x025a0dc0
[0x4022d1] memchr("/* Search a given file.  Return "..., '\n', 1456) = 0x025a0dfd
[0x4022d1] memchr("static int\ngrep(fd)\n     int fd;"..., '\n', 1395) = 0x025a0e08
[0x4022d1] memchr("grep(fd)\n     int fd;\n{\n  int nl"..., '\n', 1384) = 0x025a0e11
[0x4022d1] memchr("     int fd;\n{\n  int nlines, i;\n"..., '\n', 1375) = 0x025a0e1e
[0x4022d1] memchr("{\n  int nlines, i;\n  size_t resi"..., '\n', 1362) = 0x025a0e20
[0x4022d1] memchr("  int nlines, i;\n  size_t residu"..., '\n', 1360) = 0x025a0e31
[0x4022d1] memchr("  size_t residue, save;\n  char *"..., '\n', 1343) = 0x025a0e49
[0x4022d1] memchr("  char *beg, *lim;\n\n  reset(fd);"..., '\n', 1319) = 0x025a0e5c
[0x4022d1] memchr("\n  reset(fd);\n\n  totalcc = 0;\n  "..., '\n', 1300) = 0x025a0e5d
[0x4022d1] memchr("  reset(fd);\n\n  totalcc = 0;\n  l"..., '\n', 1299) = 0x025a0e6a
[0x4022d1] memchr("\n  totalcc = 0;\n  lastout = 0;\n "..., '\n', 1286) = 0x025a0e6b
[0x4022d1] memchr("  totalcc = 0;\n  lastout = 0;\n  "..., '\n', 1285) = 0x025a0e7a
[0x4022d1] memchr("  lastout = 0;\n  totalnl = 0;\n  "..., '\n', 1270) = 0x025a0e89
[0x4022d1] memchr("  totalnl = 0;\n  pending = 0;\n\n "..., '\n', 1255) = 0x025a0e98
[0x4022d1] memchr("  pending = 0;\n\n  nlines = 0;\n  "..., '\n', 1240) = 0x025a0ea7
[0x4022d1] memchr("\n  nlines = 0;\n  residue = 0;\n  "..., '\n', 1225) = 0x025a0ea8
[0x4022d1] memchr("  nlines = 0;\n  residue = 0;\n  s"..., '\n', 1224) = 0x025a0eb6
[0x4022d1] memchr("  residue = 0;\n  save = 0;\n\n  fo"..., '\n', 1210) = 0x025a0ec5
[0x4022d1] memchr("  save = 0;\n\n  for (;;)\n    {\n  "..., '\n', 1195) = 0x025a0ed1
[0x4022d1] memchr("\n  for (;;)\n    {\n      if (fill"..., '\n', 1183) = 0x025a0ed2
[0x4022d1] memchr("  for (;;)\n    {\n      if (fillb"..., '\n', 1182) = 0x025a0edd
[0x4022d1] memchr("    {\n      if (fillbuf(save) < "..., '\n', 1171) = 0x025a0ee3
[0x4022d1] memchr("      if (fillbuf(save) < 0)\n\t{\n"..., '\n', 1165) = 0x025a0f00
[0x4022d1] memchr("\t{\n\t  error(filename, errno);\n\t "..., '\n', 1136) = 0x025a0f03
[0x4022d1] memchr("\t  error(filename, errno);\n\t  re"..., '\n', 1133) = 0x025a0f1e
[0x4022d1] memchr("\t  return nlines;\n\t}\n      lastn"..., '\n', 1106) = 0x025a0f30
[0x4022d1] memchr("\t}\n      lastnl = bufbeg;\n      "..., '\n', 1088) = 0x025a0f33
[0x4022d1] memchr("      lastnl = bufbeg;\n      if "..., '\n', 1085) = 0x025a0f4a
[0x4022d1] memchr("      if (lastout)\n\tlastout = bu"..., '\n', 1062) = 0x025a0f5d
[0x4022d1] memchr("\tlastout = bufbeg;\n      if (buf"..., '\n', 1043) = 0x025a0f70
[0x4022d1] memchr("      if (buflim - bufbeg == sav"..., '\n', 1024) = 0x025a0f93
[0x4022d1] memchr("\tbreak;\n      beg = bufbeg + sav"..., '\n', 989) = 0x025a0f9b
[0x4022d1] memchr("      beg = bufbeg + save - resi"..., '\n', 981) = 0x025a0fc0
[0x4022d1] memchr("      for (lim = buflim; lim > b"..., '\n', 944) = 0x025a0ffe
[0x4022d1] memchr("\t;\n      residue = buflim - lim;"..., '\n', 882) = 0x025a1001
[0x4022d1] memchr("      residue = buflim - lim;\n  "..., '\n', 879) = 0x025a101f
[0x4022d1] memchr("      if (beg < lim)\n\t{\n\t  nline"..., '\n', 849) = 0x025a1034
[0x4022d1] memchr("\t{\n\t  nlines += grepbuf(beg, lim"..., '\n', 828) = 0x025a1037
[0x4022d1] memchr("\t  nlines += grepbuf(beg, lim);\n"..., '\n', 825) = 0x025a1057
[0x4022d1] memchr("\t  if (pending)\n\t    prpending(l"..., '\n', 793) = 0x025a1067
[0x4022d1] memchr("\t    prpending(lim);\n\t}\n      i "..., '\n', 777) = 0x025a107c
[0x4022d1] memchr("\t}\n      i = 0;\n      beg = lim;"..., '\n', 756) = 0x025a107f
[0x4022d1] memchr("      i = 0;\n      beg = lim;\n  "..., '\n', 753) = 0x025a108c
[0x4022d1] memchr("      beg = lim;\n      while (i "..., '\n', 740) = 0x025a109d
[0x4022d1] memchr("      while (i < out_before && b"..., '\n', 723) = 0x025a10dc
[0x4022d1] memchr("\t{\n\t  ++i;\n\t  do\n\t    --beg;\n\t  "..., '\n', 660) = 0x025a10df
[0x4022d1] memchr("\t  ++i;\n\t  do\n\t    --beg;\n\t  whi"..., '\n', 657) = 0x025a10e7
[0x4022d1] memchr("\t  do\n\t    --beg;\n\t  while (beg "..., '\n', 649) = 0x025a10ed
[0x4022d1] memchr("\t    --beg;\n\t  while (beg > bufb"..., '\n', 643) = 0x025a10f9
[0x4022d1] memchr("\t  while (beg > bufbeg && beg[-1"..., '\n', 631) = 0x025a1125
[0x4022d1] memchr("\t}\n      if (beg != lastout)\n\tla"..., '\n', 587) = 0x025a1128
[0x4022d1] memchr("      if (beg != lastout)\n\tlasto"..., '\n', 584) = 0x025a1142
[0x4022d1] memchr("\tlastout = 0;\n      save = resid"..., '\n', 558) = 0x025a1150
[0x4022d1] memchr("      save = residue + lim - beg"..., '\n', 544) = 0x025a1172
[0x4022d1] memchr("      totalcc += buflim - bufbeg"..., '\n', 510) = 0x025a119b
[0x4022d1] memchr("      if (out_line)\n\tnlscan(beg)"..., '\n', 469) = 0x025a11af
[0x4022d1] memchr("\tnlscan(beg);\n    }\n  if (residu"..., '\n', 449) = 0x025a11bd
[0x4022d1] memchr("    }\n  if (residue)\n    {\n     "..., '\n', 435) = 0x025a11c3
[0x4022d1] memchr("  if (residue)\n    {\n      nline"..., '\n', 429) = 0x025a11d2
[0x4022d1] memchr("    {\n      nlines += grepbuf(bu"..., '\n', 414) = 0x025a11d8
[0x4022d1] memchr("      nlines += grepbuf(bufbeg +"..., '\n', 408) = 0x025a1212
[0x4022d1] memchr("      if (pending)\n\tprpending(bu"..., '\n', 350) = 0x025a1225
[0x4022d1] memchr("\tprpending(buflim);\n    }\n  retu"..., '\n', 331) = 0x025a1239
[0x4022d1] memchr("    }\n  return nlines;\n}\n\nstatic"..., '\n', 311) = 0x025a123f
[0x4022d1] memchr("  return nlines;\n}\n\nstatic char "..., '\n', 305) = 0x025a1250
[0x4022d1] memchr("}\n\nstatic char version[] = "GNU "..., '\n', 288) = 0x025a1252
[0x4022d1] memchr("\nstatic char version[] = "GNU gr"..., '\n', 286) = 0x025a1253
[0x4022d1] memchr("static char version[] = "GNU gre"..., '\n', 285) = 0x025a1283
[0x4022d1] memchr("\n#define USAGE \\\n  "usage: %s [-"..., '\n', 237) = 0x025a1284
[0x4022d1] memchr("#define USAGE \\\n  "usage: %s [-["..., '\n', 236) = 0x025a1294
[0x4022d1] memchr("  "usage: %s [-[[AB] ]<num>] [-["..., '\n', 220) = 0x025a12e5
[0x4022d1] memchr("\nstatic void\nusage()\n{\n  fprintf"..., '\n', 139) = 0x025a12e6
[0x4022d1] memchr("static void\nusage()\n{\n  fprintf("..., '\n', 138) = 0x025a12f2
[0x4022d1] memchr("usage()\n{\n  fprintf(stderr, USAG"..., '\n', 126) = 0x025a12fa
[0x4022d1] memchr("{\n  fprintf(stderr, USAGE, prog)"..., '\n', 118) = 0x025a12fc
[0x4022d1] memchr("  fprintf(stderr, USAGE, prog);\n"..., '\n', 116) = 0x025a131c
[0x4022d1] memchr("  exit(2);\n}\n\n/* Go through the "..., '\n', 84) = 0x025a1327
[0x4022d1] memchr("}\n\n/* Go through the matchers ve"..., '\n', 73) = 0x025a1329
[0x4022d1] memchr("\n/* Go through the matchers vect"..., '\n', 71) = 0x025a132a
[0x4022d1] memchr("/* Go through the matchers vecto"..., '\n', 70) = 0x025a1370
[0x4022d1] memchr("   If we find it, install it in "..., '\n', 0) = NULL
[0x4023cc] fwrite("605:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   If we find it, install it in "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("int\nsetmatcher(name)\n     char *"..., 'I', 19500) = 0x025a1581
[0x40cdf3] memchr("ILE *fp;\n  extern char *optarg;\n"..., '\n', 19043) = 0x025a1589
[0x4022d1] memchr("int\nsetmatcher(name)\n     char *"..., '\n', 454) = 0x025a13bb
[0x4022d1] memchr("setmatcher(name)\n     char *name"..., '\n', 450) = 0x025a13cc
[0x4022d1] memchr("     char *name;\n{\n  int i;\n\n  f"..., '\n', 433) = 0x025a13dd
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; matche"..., '\n', 416) = 0x025a13df
[0x4022d1] memchr("  int i;\n\n  for (i = 0; matchers"..., '\n', 414) = 0x025a13e8
[0x4022d1] memchr("\n  for (i = 0; matchers[i].name;"..., '\n', 405) = 0x025a13e9
[0x4022d1] memchr("  for (i = 0; matchers[i].name; "..., '\n', 404) = 0x025a140e
[0x4022d1] memchr("    if (strcmp(name, matchers[i]"..., '\n', 367) = 0x025a143b
[0x4022d1] memchr("      {\n\tcompile = matchers[i].c"..., '\n', 322) = 0x025a1443
[0x4022d1] memchr("\tcompile = matchers[i].compile;\n"..., '\n', 314) = 0x025a1463
[0x4022d1] memchr("\texecute = matchers[i].execute;\n"..., '\n', 282) = 0x025a1483
[0x4022d1] memchr("\treturn 1;\n      }\n  return 0;\n}"..., '\n', 250) = 0x025a148e
[0x4022d1] memchr("      }\n  return 0;\n}  \n\nint\nmai"..., '\n', 239) = 0x025a1496
[0x4022d1] memchr("  return 0;\n}  \n\nint\nmain(argc, "..., '\n', 231) = 0x025a14a2
[0x4022d1] memchr("}  \n\nint\nmain(argc, argv)\n     i"..., '\n', 219) = 0x025a14a6
[0x4022d1] memchr("\nint\nmain(argc, argv)\n     int a"..., '\n', 215) = 0x025a14a7
[0x4022d1] memchr("int\nmain(argc, argv)\n     int ar"..., '\n', 214) = 0x025a14ab
[0x4022d1] memchr("main(argc, argv)\n     int argc;\n"..., '\n', 210) = 0x025a14bc
[0x4022d1] memchr("     int argc;\n     char *argv[]"..., '\n', 193) = 0x025a14cb
[0x4022d1] memchr("     char *argv[];\n{\n  char *key"..., '\n', 178) = 0x025a14de
[0x4022d1] memchr("{\n  char *keys;\n  size_t keycc, "..., '\n', 159) = 0x025a14e0
[0x4022d1] memchr("  char *keys;\n  size_t keycc, ol"..., '\n', 157) = 0x025a14ee
[0x4022d1] memchr("  size_t keycc, oldcc, keyalloc;"..., '\n', 143) = 0x025a150f
[0x4022d1] memchr("  int keyfound, count_matches, n"..., '\n', 110) = 0x025a1559
[0x4022d1] memchr("  int opt, cc, desc, count, stat"..., '\n', 36) = 0x025a157d
[0x4022d1] memchr("  FILE *fp;\n  extern char *optar"..., '\n', 0) = NULL
[0x4023cc] fwrite("631:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("  FILE *fp;\n  extern char *optar"..., 1, 12, 0x7f498147f260) = 12
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  extern char *optarg;\n  extern "..., 'I', 19034) = 0x025a1fb0
[0x40cdf3] memchr("Inspired by the same option in H"..., '\n', 16436) = 0x025a1fdd
[0x4022d1] memchr("  extern char *optarg;\n  extern "..., '\n', 2594) = 0x025a15a0
[0x4022d1] memchr("  extern int optind;\n\n  prog = a"..., '\n', 2571) = 0x025a15b5
[0x4022d1] memchr("\n  prog = argv[0];\n  if (prog &&"..., '\n', 2550) = 0x025a15b6
[0x4022d1] memchr("  prog = argv[0];\n  if (prog && "..., '\n', 2549) = 0x025a15c8
[0x4022d1] memchr("  if (prog && strrchr(prog, '/')"..., '\n', 2531) = 0x025a15ea
[0x4022d1] memchr("    prog = strrchr(prog, '/') + "..., '\n', 2497) = 0x025a160d
[0x4022d1] memchr("\n  keys = NULL;\n  keycc = 0;\n  k"..., '\n', 2462) = 0x025a160e
[0x4022d1] memchr("  keys = NULL;\n  keycc = 0;\n  ke"..., '\n', 2461) = 0x025a161d
[0x4022d1] memchr("  keycc = 0;\n  keyfound = 0;\n  c"..., '\n', 2446) = 0x025a162a
[0x4022d1] memchr("  keyfound = 0;\n  count_matches "..., '\n', 2433) = 0x025a163a
[0x4022d1] memchr("  count_matches = 0;\n  no_filena"..., '\n', 2417) = 0x025a164f
[0x4022d1] memchr("  no_filenames = 0;\n  list_files"..., '\n', 2396) = 0x025a1663
[0x4022d1] memchr("  list_files = 0;\n  suppress_err"..., '\n', 2376) = 0x025a1675
[0x4022d1] memchr("  suppress_errors = 0;\n  matcher"..., '\n', 2358) = 0x025a168c
[0x4022d1] memchr("  matcher = NULL;\n\n  while ((opt"..., '\n', 2335) = 0x025a169e
[0x4022d1] memchr("\n  while ((opt = getopt(argc, ar"..., '\n', 2317) = 0x025a169f
[0x4022d1] memchr("  while ((opt = getopt(argc, arg"..., '\n', 2316) = 0x025a16ed
[0x4022d1] memchr("\t != EOF)\n    switch (opt)\n     "..., '\n', 2238) = 0x025a16f7
[0x4022d1] memchr("    switch (opt)\n      {\n      c"..., '\n', 2228) = 0x025a1708
[0x4022d1] memchr("      {\n      case '0':\n      ca"..., '\n', 2211) = 0x025a1710
[0x4022d1] memchr("      case '0':\n      case '1':\n"..., '\n', 2203) = 0x025a1720
[0x4022d1] memchr("      case '1':\n      case '2':\n"..., '\n', 2187) = 0x025a1730
[0x4022d1] memchr("      case '2':\n      case '3':\n"..., '\n', 2171) = 0x025a1740
[0x4022d1] memchr("      case '3':\n      case '4':\n"..., '\n', 2155) = 0x025a1750
[0x4022d1] memchr("      case '4':\n      case '5':\n"..., '\n', 2139) = 0x025a1760
[0x4022d1] memchr("      case '5':\n      case '6':\n"..., '\n', 2123) = 0x025a1770
[0x4022d1] memchr("      case '6':\n      case '7':\n"..., '\n', 2107) = 0x025a1780
[0x4022d1] memchr("      case '7':\n      case '8':\n"..., '\n', 2091) = 0x025a1790
[0x4022d1] memchr("      case '8':\n      case '9':\n"..., '\n', 2075) = 0x025a17a0
[0x4022d1] memchr("      case '9':\n\tout_before = 10"..., '\n', 2059) = 0x025a17b0
[0x4022d1] memchr("\tout_before = 10 * out_before + "..., '\n', 2043) = 0x025a17db
[0x4022d1] memchr("\tout_after = 10 * out_after + op"..., '\n', 2000) = 0x025a1804
[0x4022d1] memchr("\tbreak;\n      case 'A':\n\tout_aft"..., '\n', 1959) = 0x025a180c
[0x4022d1] memchr("      case 'A':\n\tout_after = ato"..., '\n', 1951) = 0x025a181c
[0x4022d1] memchr("\tout_after = atoi(optarg);\n\tif ("..., '\n', 1935) = 0x025a1837
[0x4022d1] memchr("\tif (out_after < 0)\n\t  usage();\n"..., '\n', 1908) = 0x025a184b
[0x4022d1] memchr("\t  usage();\n\tbreak;\n      case '"..., '\n', 1888) = 0x025a1857
[0x4022d1] memchr("\tbreak;\n      case 'B':\n\tout_bef"..., '\n', 1876) = 0x025a185f
[0x4022d1] memchr("      case 'B':\n\tout_before = at"..., '\n', 1868) = 0x025a186f
[0x4022d1] memchr("\tout_before = atoi(optarg);\n\tif "..., '\n', 1852) = 0x025a188b
[0x4022d1] memchr("\tif (out_before < 0)\n\t  usage();"..., '\n', 1824) = 0x025a18a0
[0x4022d1] memchr("\t  usage();\n\tbreak;\n      case '"..., '\n', 1803) = 0x025a18ac
[0x4022d1] memchr("\tbreak;\n      case 'C':\n\tout_bef"..., '\n', 1791) = 0x025a18b4
[0x4022d1] memchr("      case 'C':\n\tout_before = ou"..., '\n', 1783) = 0x025a18c4
[0x4022d1] memchr("\tout_before = out_after = 2;\n\tbr"..., '\n', 1767) = 0x025a18e1
[0x4022d1] memchr("\tbreak;\n      case 'E':\n\tif (mat"..., '\n', 1738) = 0x025a18e9
[0x4022d1] memchr("      case 'E':\n\tif (matcher && "..., '\n', 1730) = 0x025a18f9
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 1714) = 0x025a1928
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 1667) = 0x025a1962
[0x4022d1] memchr("\tmatcher = "posix-egrep";\n\tbreak"..., '\n', 1609) = 0x025a197c
[0x4022d1] memchr("\tbreak;\n      case 'F':\n\tif (mat"..., '\n', 1583) = 0x025a1984
[0x4022d1] memchr("      case 'F':\n\tif (matcher && "..., '\n', 1575) = 0x025a1994
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 1559) = 0x025a19c3
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 1512) = 0x025a19fe
[0x4022d1] memchr("\tmatcher = "fgrep";\n\tbreak;\n    "..., '\n', 1453) = 0x025a1a12
[0x4022d1] memchr("\tbreak;\n      case 'G':\n\tif (mat"..., '\n', 1433) = 0x025a1a1a
[0x4022d1] memchr("      case 'G':\n\tif (matcher && "..., '\n', 1425) = 0x025a1a2a
[0x4022d1] memchr("\tif (matcher && strcmp(matcher, "..., '\n', 1409) = 0x025a1a58
[0x4022d1] memchr("\t  fatal("you may specify only o"..., '\n', 1363) = 0x025a1a92
[0x4022d1] memchr("\tmatcher = "grep";\n\tbreak;\n     "..., '\n', 1305) = 0x025a1aa5
[0x4022d1] memchr("\tbreak;\n      case 'V':\n\tfprintf"..., '\n', 1286) = 0x025a1aad
[0x4022d1] memchr("      case 'V':\n\tfprintf(stderr,"..., '\n', 1278) = 0x025a1abd
[0x4022d1] memchr("\tfprintf(stderr, "%s\\n", version"..., '\n', 1262) = 0x025a1ae0
[0x4022d1] memchr("\tbreak;\n      case 'X':\n\tif (mat"..., '\n', 1227) = 0x025a1ae8
[0x4022d1] memchr("      case 'X':\n\tif (matcher)\n\t "..., '\n', 1219) = 0x025a1af8
[0x4022d1] memchr("\tif (matcher)\n\t  fatal("matcher "..., '\n', 1203) = 0x025a1b06
[0x4022d1] memchr("\t  fatal("matcher already specif"..., '\n', 1189) = 0x025a1b30
[0x4022d1] memchr("\tmatcher = optarg;\n\tbreak;\n     "..., '\n', 1147) = 0x025a1b43
[0x4022d1] memchr("\tbreak;\n      case 'b':\n\tout_byt"..., '\n', 1128) = 0x025a1b4b
[0x4022d1] memchr("      case 'b':\n\tout_byte = 1;\n\t"..., '\n', 1120) = 0x025a1b5b
[0x4022d1] memchr("\tout_byte = 1;\n\tbreak;\n      cas"..., '\n', 1104) = 0x025a1b6a
[0x4022d1] memchr("\tbreak;\n      case 'c':\n\tout_qui"..., '\n', 1089) = 0x025a1b72
[0x4022d1] memchr("      case 'c':\n\tout_quiet = 1;\n"..., '\n', 1081) = 0x025a1b82
[0x4022d1] memchr("\tout_quiet = 1;\n\tcount_matches ="..., '\n', 1065) = 0x025a1b92
[0x4022d1] memchr("\tcount_matches = 1;\n\tbreak;\n    "..., '\n', 1049) = 0x025a1ba6
[0x4022d1] memchr("\tbreak;\n      case 'e':\n\tcc = st"..., '\n', 1029) = 0x025a1bae
[0x4022d1] memchr("      case 'e':\n\tcc = strlen(opt"..., '\n', 1021) = 0x025a1bbe
[0x4022d1] memchr("\tcc = strlen(optarg);\n\tkeys = xr"..., '\n', 1005) = 0x025a1bd4
[0x4022d1] memchr("\tkeys = xrealloc(keys, keycc + c"..., '\n', 983) = 0x025a1bfc
[0x4022d1] memchr("\tif (keyfound)\n\t  keys[keycc++] "..., '\n', 943) = 0x025a1c0b
[0x4022d1] memchr("\t  keys[keycc++] = '\\n';\n\tstrcpy"..., '\n', 928) = 0x025a1c24
[0x4022d1] memchr("\tstrcpy(&keys[keycc], optarg);\n\t"..., '\n', 903) = 0x025a1c43
[0x4022d1] memchr("\tkeycc += cc;\n\tkeyfound = 1;\n\tbr"..., '\n', 872) = 0x025a1c51
[0x4022d1] memchr("\tkeyfound = 1;\n\tbreak;\n      cas"..., '\n', 858) = 0x025a1c60
[0x4022d1] memchr("\tbreak;\n      case 'f':\n\tfp = st"..., '\n', 843) = 0x025a1c68
[0x4022d1] memchr("      case 'f':\n\tfp = strcmp(opt"..., '\n', 835) = 0x025a1c78
[0x4022d1] memchr("\tfp = strcmp(optarg, "-") != 0 ?"..., '\n', 819) = 0x025a1cb5
[0x4022d1] memchr("\tif (!fp)\n\t  fatal(optarg, errno"..., '\n', 758) = 0x025a1cbf
[0x4022d1] memchr("\t  fatal(optarg, errno);\n\tfor (k"..., '\n', 748) = 0x025a1cd8
[0x4022d1] memchr("\tfor (keyalloc = 1; keyalloc <= "..., '\n', 723) = 0x025a1d0e
[0x4022d1] memchr("\t  ;\n\tkeys = xrealloc(keys, keya"..., '\n', 669) = 0x025a1d13
[0x4022d1] memchr("\tkeys = xrealloc(keys, keyalloc)"..., '\n', 664) = 0x025a1d35
[0x4022d1] memchr("\toldcc = keycc;\n\tif (keyfound)\n\t"..., '\n', 630) = 0x025a1d45
[0x4022d1] memchr("\tif (keyfound)\n\t  keys[keycc++] "..., '\n', 614) = 0x025a1d54
[0x4022d1] memchr("\t  keys[keycc++] = '\\n';\n\twhile "..., '\n', 599) = 0x025a1d6d
[0x4022d1] memchr("\twhile (!feof(fp)\n\t       && (cc"..., '\n', 574) = 0x025a1d7f
[0x4022d1] memchr("\t       && (cc = fread(keys + ke"..., '\n', 556) = 0x025a1dc3
[0x4022d1] memchr("\t  {\n\t    keycc += cc;\n\t    if ("..., '\n', 488) = 0x025a1dc8
[0x4022d1] memchr("\t    keycc += cc;\n\t    if (keycc"..., '\n', 483) = 0x025a1dda
[0x4022d1] memchr("\t    if (keycc == keyalloc)\n\t   "..., '\n', 465) = 0x025a1df6
[0x4022d1] memchr("\t      keys = xrealloc(keys, key"..., '\n', 437) = 0x025a1e23
[0x4022d1] memchr("\t  }\n\tif (fp != stdin)\n\t  fclose"..., '\n', 392) = 0x025a1e28
[0x4022d1] memchr("\tif (fp != stdin)\n\t  fclose(fp);"..., '\n', 387) = 0x025a1e3a
[0x4022d1] memchr("\t  fclose(fp);\n\t/* Nuke the fina"..., '\n', 369) = 0x025a1e49
[0x4022d1] memchr("\t/* Nuke the final newline to av"..., '\n', 354) = 0x025a1e88
[0x4022d1] memchr("\tif (keycc - oldcc > 0 && keys[k"..., '\n', 291) = 0x025a1ebb
[0x4022d1] memchr("\t  --keycc;\n\tkeyfound = 1;\n\tbrea"..., '\n', 240) = 0x025a1ec7
[0x4022d1] memchr("\tkeyfound = 1;\n\tbreak;\n      cas"..., '\n', 228) = 0x025a1ed6
[0x4022d1] memchr("\tbreak;\n      case 'h':\n\tno_file"..., '\n', 213) = 0x025a1ede
[0x4022d1] memchr("      case 'h':\n\tno_filenames = "..., '\n', 205) = 0x025a1eee
[0x4022d1] memchr("\tno_filenames = 1;\n\tbreak;\n     "..., '\n', 189) = 0x025a1f01
[0x4022d1] memchr("\tbreak;\n      case 'i':\n      ca"..., '\n', 170) = 0x025a1f09
[0x4022d1] memchr("      case 'i':\n      case 'y':\t"..., '\n', 162) = 0x025a1f19
[0x4022d1] memchr("      case 'y':\t\t\t/* For old-tim"..., '\n', 146) = 0x025a1f46
[0x4022d1] memchr("\tmatch_icase = 1;\n\tbreak;\n      "..., '\n', 101) = 0x025a1f58
[0x4022d1] memchr("\tbreak;\n      case 'L':\n\t/* Like"..., '\n', 83) = 0x025a1f60
[0x4022d1] memchr("      case 'L':\n\t/* Like -l, exc"..., '\n', 75) = 0x025a1f70
[0x4022d1] memchr("\t/* Like -l, except list files t"..., '\n', 59) = 0x025a1fab
[0x4022d1] memchr("\t   Inspired by the same option "..., '\n', 0) = NULL
[0x4023cc] fwrite("750:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("\t   Inspired by the same option "..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tout_quiet = 1;\n\tlist_files = -1"..., 'I', 16390) = 0x025a2788
[0x40cdf3] memchr("Inc.\n\n   This program is free so"..., '\n', 14428) = 0x025a278c
[0x4022d1] memchr("\tout_quiet = 1;\n\tlist_files = -1"..., '\n', 1932) = 0x025a1fed
[0x4022d1] memchr("\tlist_files = -1;\n\tbreak;\n      "..., '\n', 1916) = 0x025a1fff
[0x4022d1] memchr("\tbreak;\n      case 'l':\n\tout_qui"..., '\n', 1898) = 0x025a2007
[0x4022d1] memchr("      case 'l':\n\tout_quiet = 1;\n"..., '\n', 1890) = 0x025a2017
[0x4022d1] memchr("\tout_quiet = 1;\n\tlist_files = 1;"..., '\n', 1874) = 0x025a2027
[0x4022d1] memchr("\tlist_files = 1;\n\tbreak;\n      c"..., '\n', 1858) = 0x025a2038
[0x4022d1] memchr("\tbreak;\n      case 'n':\n\tout_lin"..., '\n', 1841) = 0x025a2040
[0x4022d1] memchr("      case 'n':\n\tout_line = 1;\n\t"..., '\n', 1833) = 0x025a2050
[0x4022d1] memchr("\tout_line = 1;\n\tbreak;\n      cas"..., '\n', 1817) = 0x025a205f
[0x4022d1] memchr("\tbreak;\n      case 'q':\n\tout_qui"..., '\n', 1802) = 0x025a2067
[0x4022d1] memchr("      case 'q':\n\tout_quiet = 1;\n"..., '\n', 1794) = 0x025a2077
[0x4022d1] memchr("\tout_quiet = 1;\n\tbreak;\n      ca"..., '\n', 1778) = 0x025a2087
[0x4022d1] memchr("\tbreak;\n      case 's':\n\tsuppres"..., '\n', 1762) = 0x025a208f
[0x4022d1] memchr("      case 's':\n\tsuppress_errors"..., '\n', 1754) = 0x025a209f
[0x4022d1] memchr("\tsuppress_errors = 1;\n\tbreak;\n  "..., '\n', 1738) = 0x025a20b5
[0x4022d1] memchr("\tbreak;\n      case 'v':\n\tout_inv"..., '\n', 1716) = 0x025a20bd
[0x4022d1] memchr("      case 'v':\n\tout_invert = 1;"..., '\n', 1708) = 0x025a20cd
[0x4022d1] memchr("\tout_invert = 1;\n\tbreak;\n      c"..., '\n', 1692) = 0x025a20de
[0x4022d1] memchr("\tbreak;\n      case 'w':\n\tmatch_w"..., '\n', 1675) = 0x025a20e6
[0x4022d1] memchr("      case 'w':\n\tmatch_words = 1"..., '\n', 1667) = 0x025a20f6
[0x4022d1] memchr("\tmatch_words = 1;\n\tbreak;\n      "..., '\n', 1651) = 0x025a2108
[0x4022d1] memchr("\tbreak;\n      case 'x':\n\tmatch_l"..., '\n', 1633) = 0x025a2110
[0x4022d1] memchr("      case 'x':\n\tmatch_lines = 1"..., '\n', 1625) = 0x025a2120
[0x4022d1] memchr("\tmatch_lines = 1;\n\tbreak;\n      "..., '\n', 1609) = 0x025a2132
[0x4022d1] memchr("\tbreak;\n      default:\n\tusage();"..., '\n', 1591) = 0x025a213a
[0x4022d1] memchr("      default:\n\tusage();\n\tbreak;"..., '\n', 1583) = 0x025a2149
[0x4022d1] memchr("\tusage();\n\tbreak;\n      }\n\n  if "..., '\n', 1568) = 0x025a2153
[0x4022d1] memchr("\tbreak;\n      }\n\n  if (!keyfound"..., '\n', 1558) = 0x025a215b
[0x4022d1] memchr("      }\n\n  if (!keyfound)\n    if"..., '\n', 1550) = 0x025a2163
[0x4022d1] memchr("\n  if (!keyfound)\n    if (optind"..., '\n', 1542) = 0x025a2164
[0x4022d1] memchr("  if (!keyfound)\n    if (optind "..., '\n', 1541) = 0x025a2175
[0x4022d1] memchr("    if (optind < argc)\n      {\n\t"..., '\n', 1524) = 0x025a218c
[0x4022d1] memchr("      {\n\tkeys = argv[optind++];\n"..., '\n', 1501) = 0x025a2194
[0x4022d1] memchr("\tkeys = argv[optind++];\n\tkeycc ="..., '\n', 1493) = 0x025a21ac
[0x4022d1] memchr("\tkeycc = strlen(keys);\n      }\n "..., '\n', 1469) = 0x025a21c3
[0x4022d1] memchr("      }\n    else\n      usage();\n"..., '\n', 1446) = 0x025a21cb
[0x4022d1] memchr("    else\n      usage();\n\n  if (!"..., '\n', 1438) = 0x025a21d4
[0x4022d1] memchr("      usage();\n\n  if (!matcher)\n"..., '\n', 1429) = 0x025a21e3
[0x4022d1] memchr("\n  if (!matcher)\n    matcher = p"..., '\n', 1414) = 0x025a21e4
[0x4022d1] memchr("  if (!matcher)\n    matcher = pr"..., '\n', 1413) = 0x025a21f4
[0x4022d1] memchr("    matcher = prog;\n\n  if (!setm"..., '\n', 1397) = 0x025a2208
[0x4022d1] memchr("\n  if (!setmatcher(matcher) && !"..., '\n', 1377) = 0x025a2209
[0x4022d1] memchr("  if (!setmatcher(matcher) && !s"..., '\n', 1376) = 0x025a223f
[0x4022d1] memchr("    abort();\n\n  (*compile)(keys,"..., '\n', 1322) = 0x025a224c
[0x4022d1] memchr("\n  (*compile)(keys, keycc);\n\n  i"..., '\n', 1309) = 0x025a224d
[0x4022d1] memchr("  (*compile)(keys, keycc);\n\n  if"..., '\n', 1308) = 0x025a2268
[0x4022d1] memchr("\n  if (argc - optind > 1 && !no_"..., '\n', 1281) = 0x025a2269
[0x4022d1] memchr("  if (argc - optind > 1 && !no_f"..., '\n', 1280) = 0x025a2293
[0x4022d1] memchr("    out_file = 1;\n\n  status = 1;"..., '\n', 1238) = 0x025a22a5
[0x4022d1] memchr("\n  status = 1;\n\n  if (optind < a"..., '\n', 1220) = 0x025a22a6
[0x4022d1] memchr("  status = 1;\n\n  if (optind < ar"..., '\n', 1219) = 0x025a22b4
[0x4022d1] memchr("\n  if (optind < argc)\n    while "..., '\n', 1205) = 0x025a22b5
[0x4022d1] memchr("  if (optind < argc)\n    while ("..., '\n', 1204) = 0x025a22ca
[0x4022d1] memchr("    while (optind < argc)\n      "..., '\n', 1183) = 0x025a22e4
[0x4022d1] memchr("      {\n\tdesc = strcmp(argv[opti"..., '\n', 1157) = 0x025a22ec
[0x4022d1] memchr("\tdesc = strcmp(argv[optind], "-""..., '\n', 1149) = 0x025a2332
[0x4022d1] memchr("\tif (desc < 0)\n\t  {\n\t    if (!su"..., '\n', 1079) = 0x025a2341
[0x4022d1] memchr("\t  {\n\t    if (!suppress_errors)\n"..., '\n', 1064) = 0x025a2346
[0x4022d1] memchr("\t    if (!suppress_errors)\n\t    "..., '\n', 1059) = 0x025a2361
[0x4022d1] memchr("\t      error(argv[optind], errno"..., '\n', 1032) = 0x025a2384
[0x4022d1] memchr("\t  }\n\telse\n\t  {\n\t    filename = "..., '\n', 997) = 0x025a2389
[0x4022d1] memchr("\telse\n\t  {\n\t    filename = desc "..., '\n', 992) = 0x025a238f
[0x4022d1] memchr("\t  {\n\t    filename = desc == 0 ?"..., '\n', 986) = 0x025a2394
[0x4022d1] memchr("\t    filename = desc == 0 ? "(st"..., '\n', 981) = 0x025a23d3
[0x4022d1] memchr("\t    count = grep(desc);\n\t    if"..., '\n', 918) = 0x025a23ec
[0x4022d1] memchr("\t    if (count_matches)\n\t      {"..., '\n', 893) = 0x025a2404
[0x4022d1] memchr("\t      {\n\t\tif (out_file)\n\t\t  pri"..., '\n', 869) = 0x025a240d
[0x4022d1] memchr("\t\tif (out_file)\n\t\t  printf("%s:""..., '\n', 860) = 0x025a241d
[0x4022d1] memchr("\t\t  printf("%s:", filename);\n\t\tp"..., '\n', 844) = 0x025a243a
[0x4022d1] memchr("\t\tprintf("%d\\n", count);\n\t      "..., '\n', 815) = 0x025a2453
[0x4022d1] memchr("\t      }\n\t    if (count)\n\t      "..., '\n', 790) = 0x025a245c
[0x4022d1] memchr("\t    if (count)\n\t      {\n\t\tstatu"..., '\n', 781) = 0x025a246c
[0x4022d1] memchr("\t      {\n\t\tstatus = 0;\n\t\tif (lis"..., '\n', 765) = 0x025a2475
[0x4022d1] memchr("\t\tstatus = 0;\n\t\tif (list_files ="..., '\n', 756) = 0x025a2483
[0x4022d1] memchr("\t\tif (list_files == 1)\n\t\t  print"..., '\n', 742) = 0x025a249a
[0x4022d1] memchr("\t\t  printf("%s\\n", filename);\n\t "..., '\n', 719) = 0x025a24b8
[0x4022d1] memchr("\t      }\n\t    else if (list_file"..., '\n', 689) = 0x025a24c1
[0x4022d1] memchr("\t    else if (list_files == -1)\n"..., '\n', 680) = 0x025a24e1
[0x4022d1] memchr("\t      printf("%s\\n", filename);"..., '\n', 648) = 0x025a2502
[0x4022d1] memchr("\t  }\n\tif (desc != 0)\n\t  close(de"..., '\n', 615) = 0x025a2507
[0x4022d1] memchr("\tif (desc != 0)\n\t  close(desc);\n"..., '\n', 610) = 0x025a2517
[0x4022d1] memchr("\t  close(desc);\n\t++optind;\n     "..., '\n', 594) = 0x025a2527
[0x4022d1] memchr("\t++optind;\n      }\n  else\n    {\n"..., '\n', 578) = 0x025a2532
[0x4022d1] memchr("      }\n  else\n    {\n      filen"..., '\n', 567) = 0x025a253a
[0x4022d1] memchr("  else\n    {\n      filename = "("..., '\n', 559) = 0x025a2541
[0x4022d1] memchr("    {\n      filename = "(standar"..., '\n', 552) = 0x025a2547
[0x4022d1] memchr("      filename = "(standard inpu"..., '\n', 546) = 0x025a256c
[0x4022d1] memchr("      count = grep(0);\n      if "..., '\n', 509) = 0x025a2583
[0x4022d1] memchr("      if (count_matches)\n\tprintf"..., '\n', 486) = 0x025a259c
[0x4022d1] memchr("\tprintf("%d\\n", count);\n      if"..., '\n', 461) = 0x025a25b4
[0x4022d1] memchr("      if (count)\n\t{\n\t  status = "..., '\n', 437) = 0x025a25c5
[0x4022d1] memchr("\t{\n\t  status = 0;\n\t  if (list_fi"..., '\n', 420) = 0x025a25c8
[0x4022d1] memchr("\t  status = 0;\n\t  if (list_files"..., '\n', 417) = 0x025a25d7
[0x4022d1] memchr("\t  if (list_files == 1)\n\t    pri"..., '\n', 402) = 0x025a25ef
[0x4022d1] memchr("\t    printf("(standard input)\\n""..., '\n', 378) = 0x025a2612
[0x4022d1] memchr("\t}\n      else if (list_files == "..., '\n', 343) = 0x025a2615
[0x4022d1] memchr("      else if (list_files == -1)"..., '\n', 340) = 0x025a2636
[0x4022d1] memchr("\tprintf("(standard input)\\n");\n "..., '\n', 307) = 0x025a2655
[0x4022d1] memchr("    }\n\n  exit(errseen ? 2 : stat"..., '\n', 276) = 0x025a265b
[0x4022d1] memchr("\n  exit(errseen ? 2 : status);\n}"..., '\n', 270) = 0x025a265c
[0x4022d1] memchr("  exit(errseen ? 2 : status);\n}\n"..., '\n', 269) = 0x025a267a
[0x4022d1] memchr("}\n/* Getopt for GNU.\n   NOTE: ge"..., '\n', 239) = 0x025a267c
[0x4022d1] memchr("/* Getopt for GNU.\n   NOTE: geto"..., '\n', 237) = 0x025a268f
[0x4022d1] memchr("   NOTE: getopt is now part of t"..., '\n', 218) = 0x025a26d7
[0x4022d1] memchr("   "Keep this file name-space cl"..., '\n', 146) = 0x025a2721
[0x4022d1] memchr("   before changing it!\n\n   Copyr"..., '\n', 72) = 0x025a2738
[0x4022d1] memchr("\n   Copyright (C) 1987, 88, 89, "..., '\n', 49) = 0x025a2739
[0x4022d1] memchr("   Copyright (C) 1987, 88, 89, 9"..., '\n', 48) = 0x025a2769
[0x4022d1] memchr("   \tFree Software Foundation, In"..., '\n', 0) = NULL
[0x4023cc] fwrite("859:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   \tFree Software Foundation, In"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., 'I', 14423) = 0x025a28c7
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 14109) = 0x025a2900
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x025a278d
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x025a27d8
[0x4022d1] memchr("   under the terms of the GNU Ge"..., '\n', 230) = 0x025a2821
[0x4022d1] memchr("   Free Software Foundation; eit"..., '\n', 157) = 0x025a2868
[0x4022d1] memchr("   later version.\n\n   This progr"..., '\n', 86) = 0x025a287a
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x025a287b
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x025a28be
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("867:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 14051) = 0x025a290e
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 14038) = 0x025a2941
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("868:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 13986) = 0x025a2a41
[0x40cdf3] memchr("IX requires this to be the first"..., '\n', 13731) = 0x025a2a74
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 242) = 0x025a2971
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 194) = 0x025a2972
[0x4022d1] memchr("   You should have received a co"..., '\n', 193) = 0x025a29b7
[0x4022d1] memchr("   along with this program; if n"..., '\n', 124) = 0x025a29f6
[0x4022d1] memchr("   Foundation, 675 Mass Ave, Cam"..., '\n', 61) = 0x025a2a31
[0x4022d1] memchr("\014\n/* NOTE!!!  AIX requires this "..., '\n', 2) = 0x025a2a33
[0x4022d1] memchr("/* NOTE!!!  AIX requires this to"..., '\n', 0) = NULL
[0x4023cc] fwrite("875:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* NOTE!!!  AIX requires this to"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Do not put ANYTHING before it"..., 'I', 13679) = 0x025a2a88
[0x40cdf3] memchr("ING before it!  */\n#if !defined "..., '\n', 13660) = 0x025a2a9a
[0x4022d1] memchr("   Do not put ANYTHING before it"..., '\n', 0) = NULL
[0x4023cc] fwrite("876:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   Do not put ANYTHING before it"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if !defined (__GNUC__) && defin"..., 'I', 13641) = 0x025a2ac1
[0x40cdf3] memchr("IX)\n #pragma alloca\n#endif\n\n#ifd"..., '\n', 13603) = 0x025a2ac4
[0x4022d1] memchr("#if !defined (__GNUC__) && defin"..., '\n', 0) = NULL
[0x4023cc] fwrite("877:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if !defined (__GNUC__) && defin"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr(" #pragma alloca\n#endif\n\n#ifdef H"..., 'I', 13599) = 0x025a2aed
[0x40cdf3] memchr("IG_H\n#include "config.h"\n#define"..., '\n', 13559) = 0x025a2af1
[0x4022d1] memchr(" #pragma alloca\n#endif\n\n#ifdef H"..., '\n', 24) = 0x025a2ad4
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_CONFIG_H\n#in"..., '\n', 8) = 0x025a2adb
[0x4022d1] memchr("\n#ifdef HAVE_CONFIG_H\n#include ""..., '\n', 1) = 0x025a2adc
[0x4022d1] memchr("#ifdef HAVE_CONFIG_H\n#include "c"..., '\n', 0) = NULL
[0x4023cc] fwrite("881:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#ifdef HAVE_CONFIG_H\n#include "c"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#include "config.h"\n#define flag"..., 'I', 13554) = 0x025a2c24
[0x40cdf3] memchr("IX\nchar *alloca ();\n#endif\n#endi"..., '\n', 13248) = 0x025a2c26
[0x4022d1] memchr("#include "config.h"\n#define flag"..., '\n', 296) = 0x025a2b05
[0x4022d1] memchr("#define flag_config 1\n#endif\n\n#i"..., '\n', 276) = 0x025a2b1b
[0x4022d1] memchr("#endif\n\n#ifdef __GNUC__\n#define "..., '\n', 254) = 0x025a2b22
[0x4022d1] memchr("\n#ifdef __GNUC__\n#define alloca "..., '\n', 247) = 0x025a2b23
[0x4022d1] memchr("#ifdef __GNUC__\n#define alloca _"..., '\n', 246) = 0x025a2b33
[0x4022d1] memchr("#define alloca __builtin_alloca\n"..., '\n', 230) = 0x025a2b53
[0x4022d1] memchr("#else /* not __GNUC__ */\n#if def"..., '\n', 198) = 0x025a2b6c
[0x4022d1] memchr("#if defined (HAVE_ALLOCA_H) || ("..., '\n', 173) = 0x025a2be9
[0x4022d1] memchr("#include <alloca.h>\n#define flag"..., '\n', 48) = 0x025a2bfd
[0x4022d1] memchr("#define flag_alloca 1\n#else\n#ifn"..., '\n', 28) = 0x025a2c13
[0x4022d1] memchr("#else\n#ifndef _AIX\nchar *alloca "..., '\n', 6) = 0x025a2c19
[0x4022d1] memchr("#ifndef _AIX\nchar *alloca ();\n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("893:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#ifndef _AIX\nchar *alloca ();\n#e"..., 1, 13, 0x7f498147f260) = 13
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("char *alloca ();\n#endif\n#endif /"..., 'I', 13245) = 0x025a2c94
[0x40cdf3] memchr("IN_GCC\n#define const\n#endif\n\n/* "..., '\n', 13136) = 0x025a2c9a
[0x4022d1] memchr("char *alloca ();\n#endif\n#endif /"..., '\n', 73) = 0x025a2c37
[0x4022d1] memchr("#endif\n#endif /* alloca.h */\n#en"..., '\n', 56) = 0x025a2c3e
[0x4022d1] memchr("#endif /* alloca.h */\n#endif /* "..., '\n', 49) = 0x025a2c54
[0x4022d1] memchr("#endif /* not __GNUC__ */\n\n#if !"..., '\n', 27) = 0x025a2c6e
[0x4022d1] memchr("\n#if !__STDC__ && !defined(const"..., '\n', 1) = 0x025a2c6f
[0x4022d1] memchr("#if !__STDC__ && !defined(const)"..., '\n', 0) = NULL
[0x4023cc] fwrite("899:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if !__STDC__ && !defined(const)"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define const\n#endif\n\n/* This te"..., 'I', 13129) = 0x025a2f54
[0x40cdf3] memchr("IBC) || !defined (__GNU_LIBRARY_"..., '\n', 12432) = 0x025a2f76
[0x4022d1] memchr("#define const\n#endif\n\n/* This te"..., '\n', 682) = 0x025a2ca8
[0x4022d1] memchr("#endif\n\n/* This tells Alpha OSF/"..., '\n', 668) = 0x025a2caf
[0x4022d1] memchr("\n/* This tells Alpha OSF/1 not t"..., '\n', 661) = 0x025a2cb0
[0x4022d1] memchr("/* This tells Alpha OSF/1 not to"..., '\n', 660) = 0x025a2cfd
[0x4022d1] memchr("#ifndef _NO_PROTO\n#define _NO_PR"..., '\n', 583) = 0x025a2d0f
[0x4022d1] memchr("#define _NO_PROTO\n#endif\n\n/*#inc"..., '\n', 565) = 0x025a2d21
[0x4022d1] memchr("#endif\n\n/*#include <stdio.h> */\n"..., '\n', 547) = 0x025a2d28
[0x4022d1] memchr("\n/*#include <stdio.h> */\n\n/* Com"..., '\n', 540) = 0x025a2d29
[0x4022d1] memchr("/*#include <stdio.h> */\n\n/* Comm"..., '\n', 539) = 0x025a2d41
[0x4022d1] memchr("\n/* Comment out all this code if"..., '\n', 515) = 0x025a2d42
[0x4022d1] memchr("/* Comment out all this code if "..., '\n', 514) = 0x025a2d8e
[0x4022d1] memchr("   actually compiling the librar"..., '\n', 438) = 0x025a2dd8
[0x4022d1] memchr("   Library, but also included in"..., '\n', 364) = 0x025a2e22
[0x4022d1] memchr("   and linking in this code is a"..., '\n', 290) = 0x025a2e66
[0x4022d1] memchr("   (especially if it is a shared"..., '\n', 222) = 0x025a2eaf
[0x4022d1] memchr("   program understand `configure"..., '\n', 149) = 0x025a2efc
[0x4022d1] memchr("   it is simpler to just do this"..., '\n', 72) = 0x025a2f43
[0x4022d1] memchr("\n#if defined (_LIBC) || !defined"..., '\n', 1) = 0x025a2f44
[0x4022d1] memchr("#if defined (_LIBC) || !defined "..., '\n', 0) = NULL
[0x4023cc] fwrite("918:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#if defined (_LIBC) || !defined "..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* This needs to come after so"..., 'I', 12397) = 0x025a2fbc
[0x40cdf3] memchr("IBRARY__ defined.  */\n#ifdef\t__G"..., '\n', 12328) = 0x025a2fd1
[0x4022d1] memchr("\n\n/* This needs to come after so"..., '\n', 52) = 0x025a2f77
[0x4022d1] memchr("\n/* This needs to come after som"..., '\n', 51) = 0x025a2f78
[0x4022d1] memchr("/* This needs to come after some"..., '\n', 50) = 0x025a2faa
[0x4022d1] memchr("   to get __GNU_LIBRARY__ define"..., '\n', 0) = NULL
[0x4023cc] fwrite("922:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   to get __GNU_LIBRARY__ define"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#ifdef\t__GNU_LIBRARY__\n#undef\tal"..., 'I', 12306) = 0x025a2fe0
[0x40cdf3] memchr("IBRARY__\n#undef\talloca\n/* Don't "..., '\n', 12292) = 0x025a2fe8
[0x4022d1] memchr("#ifdef\t__GNU_LIBRARY__\n#undef\tal"..., '\n', 0) = NULL
[0x4023cc] fwrite("923:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("#ifdef\t__GNU_LIBRARY__\n#undef\tal"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef\talloca\n/* Don't include s"..., 'I', 12283) = 0x025a3110
[0x40cdf3] memchr("If GETOPT_COMPAT is defined, `+'"..., '\n', 11988) = 0x025a3150
[0x4022d1] memchr("#undef\talloca\n/* Don't include s"..., '\n', 292) = 0x025a2ff6
[0x4022d1] memchr("/* Don't include stdlib.h for no"..., '\n', 278) = 0x025a303d
[0x4022d1] memchr("   contain conflicting prototype"..., '\n', 207) = 0x025a306f
[0x4022d1] memchr("#if flag_stdlib==0   \n#include <"..., '\n', 157) = 0x025a3085
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 135) = 0x025a3099
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 115) = 0x025a30af
[0x4022d1] memchr("#endif\n#else\t/* Not GNU C librar"..., '\n', 93) = 0x025a30b6
[0x4022d1] memchr("#else\t/* Not GNU C library.  */\n"..., '\n', 86) = 0x025a30d6
[0x4022d1] memchr("#define\t__alloca\talloca\n#endif\t/"..., '\n', 54) = 0x025a30ee
[0x4022d1] memchr("#endif\t/* GNU C library.  */\n\n/*"..., '\n', 30) = 0x025a310b
[0x4022d1] memchr("\n/* If GETOPT_COMPAT is defined,"..., '\n', 1) = 0x025a310c
[0x4022d1] memchr("/* If GETOPT_COMPAT is defined, "..., '\n', 0) = NULL
[0x4023cc] fwrite("935:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* If GETOPT_COMPAT is defined, "..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   long-named option.  Because t"..., 'I', 11923) = 0x025a317f
[0x40cdf3] memchr("IX.2 compliant, it is\n   being p"..., '\n', 11877) = 0x025a3194
[0x4022d1] memchr("   long-named option.  Because t"..., '\n', 0) = NULL
[0x4023cc] fwrite("936:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   long-named option.  Because t"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   being phased out.  */\n/* #def"..., 'I', 11855) = 0x025a338e
[0x40cdf3] memchr("IXLY_CORRECT disables permutatio"..., '\n', 11350) = 0x025a33b0
[0x4022d1] memchr("   being phased out.  */\n/* #def"..., '\n', 466) = 0x025a31ad
[0x4022d1] memchr("/* #define GETOPT_COMPAT */\n\n/* "..., '\n', 441) = 0x025a31c9
[0x4022d1] memchr("\n/* This version of `getopt' app"..., '\n', 413) = 0x025a31ca
[0x4022d1] memchr("/* This version of `getopt' appe"..., '\n', 412) = 0x025a3218
[0x4022d1] memchr("   but it behaves differently fo"..., '\n', 334) = 0x025a325d
[0x4022d1] memchr("   to intersperse the options wi"..., '\n', 265) = 0x025a3295
[0x4022d1] memchr("\n   As `getopt' works, it permut"..., '\n', 209) = 0x025a3296
[0x4022d1] memchr("   As `getopt' works, it permute"..., '\n', 208) = 0x025a32d6
[0x4022d1] memchr("   when it is done, all the opti"..., '\n', 144) = 0x025a3319
[0x4022d1] memchr("   all application programs are "..., '\n', 77) = 0x025a3365
[0x4022d1] memchr("\n   Setting the environment vari"..., '\n', 1) = 0x025a3366
[0x4022d1] memchr("   Setting the environment varia"..., '\n', 0) = NULL
[0x4023cc] fwrite("948:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   Setting the environment varia"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Then the behavior is complete"..., 'I', 11315) = 0x025a3540
[0x40cdf3] memchr("IN_ORDER,\n   each non-option ARG"..., '\n', 10916) = 0x025a3549
[0x4022d1] memchr("   Then the behavior is complete"..., '\n', 364) = 0x025a33dd
[0x4022d1] memchr("\n   GNU application programs can"..., '\n', 319) = 0x025a33de
[0x4022d1] memchr("   GNU application programs can "..., '\n', 318) = 0x025a3424
[0x4022d1] memchr("   they can distinguish the rela"..., '\n', 248) = 0x025a3473
[0x4022d1] memchr("\n#include "getopt.h"\n\n/* For com"..., '\n', 169) = 0x025a3474
[0x4022d1] memchr("#include "getopt.h"\n\n/* For comm"..., '\n', 168) = 0x025a3488
[0x4022d1] memchr("\n/* For communication from `geto"..., '\n', 148) = 0x025a3489
[0x4022d1] memchr("/* For communication from `getop"..., '\n', 147) = 0x025a34bb
[0x4022d1] memchr("   When `getopt' finds an option"..., '\n', 97) = 0x025a34f4
[0x4022d1] memchr("   the argument value is returne"..., '\n', 40) = 0x025a351c
[0x4022d1] memchr("   Also, when `ordering' is RETU"..., '\n', 0) = NULL
[0x4023cc] fwrite("959:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   Also, when `ordering' is RETU"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   each non-option ARGV-element "..., 'I', 10906) = 0x025a3597
[0x40cdf3] memchr("Index in ARGV of the next elemen"..., '\n', 10829) = 0x025a35c7
[0x4022d1] memchr("   each non-option ARGV-element "..., '\n', 74) = 0x025a357f
[0x4022d1] memchr("\nchar *optarg = 0;\n\n/* Index in "..., '\n', 20) = 0x025a3580
[0x4022d1] memchr("char *optarg = 0;\n\n/* Index in A"..., '\n', 19) = 0x025a3592
[0x4022d1] memchr("\n/* Index in ARGV of the next el"..., '\n', 1) = 0x025a3593
[0x4022d1] memchr("/* Index in ARGV of the next ele"..., '\n', 0) = NULL
[0x4023cc] fwrite("964:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("/* Index in ARGV of the next ele"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   This is used for communicatio"..., 'I', 10780) = 0x025a3871
[0x40cdf3] memchr("If this is zero, or a null strin"..., '\n', 10099) = 0x025a38ac
[0x4022d1] memchr("   This is used for communicatio"..., '\n', 678) = 0x025a3600
[0x4022d1] memchr("   and for communication between"..., '\n', 621) = 0x025a363f
[0x4022d1] memchr("\n   On entry to `getopt', zero m"..., '\n', 558) = 0x025a3640
[0x4022d1] memchr("   On entry to `getopt', zero me"..., '\n', 557) = 0x025a3688
[0x4022d1] memchr("\n   When `getopt' returns EOF, t"..., '\n', 485) = 0x025a3689
[0x4022d1] memchr("   When `getopt' returns EOF, th"..., '\n', 484) = 0x025a36cd
[0x4022d1] memchr("   non-option elements that the "..., '\n', 416) = 0x025a3708
[0x4022d1] memchr("\n   Otherwise, `optind' communic"..., '\n', 357) = 0x025a3709
[0x4022d1] memchr("   Otherwise, `optind' communica"..., '\n', 356) = 0x025a3747
[0x4022d1] memchr("   how much of ARGV has been sca"..., '\n', 294) = 0x025a3778
[0x4022d1] memchr("\n/* XXX 1003.2 says this must be"..., '\n', 245) = 0x025a3779
[0x4022d1] memchr("/* XXX 1003.2 says this must be "..., '\n', 244) = 0x025a37b0
[0x4022d1] memchr("int optind = 0;\n\n/* The next cha"..., '\n', 189) = 0x025a37c0
[0x4022d1] memchr("\n/* The next char to be scanned "..., '\n', 173) = 0x025a37c1
[0x4022d1] memchr("/* The next char to be scanned i"..., '\n', 172) = 0x025a37f6
[0x4022d1] memchr("   in which the last option char"..., '\n', 119) = 0x025a3833
[0x4022d1] memchr("   This allows us to pick up the"..., '\n', 58) = 0x025a386c
[0x4022d1] memchr("\n   If this is zero, or a null s"..., '\n', 1) = 0x025a386d
[0x4022d1] memchr("   If this is zero, or a null st"..., '\n', 0) = NULL
[0x4023cc] fwrite("983:", 1, 4, 0x7f498147f260)  = 4
[0x4024d9] fwrite("   If this is zero, or a null st"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   by advancing to the next ARGV"..., 'I', 10039) = 0x025a3a67
[0x40cdf3] memchr("If the caller did not specify an"..., '\n', 9597) = 0x025a3a8e
[0x4022d1] memchr("   by advancing to the next ARGV"..., '\n', 439) = 0x025a38da
[0x4022d1] memchr("\nstatic char *nextchar;\n\n/* Call"..., '\n', 393) = 0x025a38db
[0x4022d1] memchr("static char *nextchar;\n\n/* Calle"..., '\n', 392) = 0x025a38f2
[0x4022d1] memchr("\n/* Callers store zero here to i"..., '\n', 369) = 0x025a38f3
[0x4022d1] memchr("/* Callers store zero here to in"..., '\n', 368) = 0x025a392b
[0x4022d1] memchr("   for unrecognized options.  */"..., '\n', 312) = 0x025a394c
[0x4022d1] memchr("\nint opterr = 1;\n\n/* Set to an o"..., '\n', 279) = 0x025a394d
[0x4022d1] memchr("int opterr = 1;\n\n/* Set to an op"..., '\n', 278) = 0x025a395d
[0x4022d1] memchr("\n/* Set to an option character w"..., '\n', 262) = 0x025a395e
[0x4022d1] memchr("/* Set to an option character wh"..., '\n', 261) = 0x025a3994
[0x4022d1] memchr("   This must be initialized on s"..., '\n', 207) = 0x025a39d8
[0x4022d1] memchr("   system's own getopt implement"..., '\n', 139) = 0x025a3a03
[0x4022d1] memchr("\nint optopt = '?';\n\n/* Describe "..., '\n', 96) = 0x025a3a04
[0x4022d1] memchr("int optopt = '?';\n\n/* Describe h"..., '\n', 95) = 0x025a3a16
[0x4022d1] memchr("\n/* Describe how to deal with op"..., '\n', 77) = 0x025a3a17
[0x4022d1] memchr("/* Describe how to deal with opt"..., '\n', 76) = 0x025a3a62
[0x4022d1] memchr("\n   If the caller did not specif"..., '\n', 1) = 0x025a3a63
[0x4022d1] memchr("   If the caller did not specify"..., '\n', 0) = NULL
[0x4023cc] fwrite("1001:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If the caller did not specify"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   the default is REQUIRE_ORDER "..., 'I', 9557) = 0x025a3aa5
[0x40cdf3] memchr("IRE_ORDER if the environment var"..., '\n', 9535) = 0x025a3aca
[0x4022d1] memchr("   the default is REQUIRE_ORDER "..., '\n', 0) = NULL
[0x4023cc] fwrite("1002:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   the default is REQUIRE_ORDER "..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   POSIXLY_CORRECT is defined, P"..., 'I', 9497) = 0x025a3ad1
[0x40cdf3] memchr("IXLY_CORRECT is defined, PERMUTE"..., '\n', 9491) = 0x025a3afc
[0x4022d1] memchr("   POSIXLY_CORRECT is defined, P"..., '\n', 0) = NULL
[0x4023cc] fwrite("1003:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   POSIXLY_CORRECT is defined, P"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   REQUIRE_ORDER means don't re"..., 'I', 9447) = 0x025a3b05
[0x40cdf3] memchr("IRE_ORDER means don't recognize "..., '\n', 9439) = 0x025a3b35
[0x4022d1] memchr("\n   REQUIRE_ORDER means don't re"..., '\n', 1) = 0x025a3afd
[0x4022d1] memchr("   REQUIRE_ORDER means don't rec"..., '\n', 0) = NULL
[0x4023cc] fwrite("1005:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   REQUIRE_ORDER means don't rec"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   stop option processing when t"..., 'I', 9390) = 0x025a3be5
[0x40cdf3] memchr("IXLY_CORRECT, or using `+' as th"..., '\n', 9215) = 0x025a3c16
[0x4022d1] memchr("   stop option processing when t"..., '\n', 160) = 0x025a3b72
[0x4022d1] memchr("   This is what Unix does.\n   Th"..., '\n', 99) = 0x025a3b8d
[0x4022d1] memchr("   This mode of operation is sel"..., '\n', 72) = 0x025a3bd5
[0x4022d1] memchr("   variable POSIXLY_CORRECT, or "..., '\n', 0) = NULL
[0x4023cc] fwrite("1009:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   variable POSIXLY_CORRECT, or "..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   of the list of option charact"..., 'I', 9165) = 0x025a3d38
[0x40cdf3] memchr("IN_ORDER is an option available "..., '\n', 8876) = 0x025a3d75
[0x4022d1] memchr("   of the list of option charact"..., '\n', 279) = 0x025a3c3b
[0x4022d1] memchr("\n   PERMUTE is the default.  We "..., '\n', 242) = 0x025a3c3c
[0x4022d1] memchr("   PERMUTE is the default.  We p"..., '\n', 241) = 0x025a3c84
[0x4022d1] memchr("   so that eventually all the no"..., '\n', 169) = 0x025a3cd3
[0x4022d1] memchr("   to be given in any order, eve"..., '\n', 90) = 0x025a3d1c
[0x4022d1] memchr("   expect this.\n\n   RETURN_IN_OR"..., '\n', 17) = 0x025a3d2c
[0x4022d1] memchr("\n   RETURN_IN_ORDER is an option"..., '\n', 1) = 0x025a3d2d
[0x4022d1] memchr("   RETURN_IN_ORDER is an option "..., '\n', 0) = NULL
[0x4023cc] fwrite("1017:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   RETURN_IN_ORDER is an option "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   to expect options and other A"..., 'I', 8814) = 0x025a3f1e
[0x40cdf3] memchr("In the case of RETURN_IN_ORDER, "..., '\n', 8390) = 0x025a3f42
[0x4022d1] memchr("   to expect options and other A"..., '\n', 392) = 0x025a3dc3
[0x4022d1] memchr("   the ordering of the two.  We "..., '\n', 314) = 0x025a3e09
[0x4022d1] memchr("   as if it were the argument of"..., '\n', 244) = 0x025a3e4b
[0x4022d1] memchr("   Using `-' as the first charac"..., '\n', 178) = 0x025a3e90
[0x4022d1] memchr("   selects this mode of operatio"..., '\n', 109) = 0x025a3eb3
[0x4022d1] memchr("\n   The special argument `--' fo"..., '\n', 74) = 0x025a3eb4
[0x4022d1] memchr("   The special argument `--' for"..., '\n', 73) = 0x025a3efd
[0x4022d1] memchr("   of the value of `ordering'.  "..., '\n', 0) = NULL
[0x4023cc] fwrite("1025:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   of the value of `ordering'.  "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   `--' can cause `getopt' to re"..., 'I', 8353) = 0x025a3f9c
[0x40cdf3] memchr("IRE_ORDER, PERMUTE, RETURN_IN_OR"..., '\n', 8264) = 0x025a3fbf
[0x4022d1] memchr("   `--' can cause `getopt' to re"..., '\n', 83) = 0x025a3f86
[0x4022d1] memchr("\nstatic enum\n{\n  REQUIRE_ORDER, "..., '\n', 15) = 0x025a3f87
[0x4022d1] memchr("static enum\n{\n  REQUIRE_ORDER, P"..., '\n', 14) = 0x025a3f93
[0x4022d1] memchr("{\n  REQUIRE_ORDER, PERMUTE, RETU"..., '\n', 2) = 0x025a3f95
[0x4022d1] memchr("  REQUIRE_ORDER, PERMUTE, RETURN"..., '\n', 0) = NULL
[0x4023cc] fwrite("1030:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  REQUIRE_ORDER, PERMUTE, RETURN"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("} ordering;\n\014\n#ifdef\t__GNU_LIBRA"..., 'I', 8228) = 0x025a3fdc
[0x40cdf3] memchr("IBRARY__\n/* We want to avoid inc"..., '\n', 8200) = 0x025a3fe4
[0x4022d1] memchr("} ordering;\n\014\n#ifdef\t__GNU_LIBRA"..., '\n', 14) = 0x025a3fcb
[0x4022d1] memchr("\014\n#ifdef\t__GNU_LIBRARY__\n/* We w"..., '\n', 2) = 0x025a3fcd
[0x4022d1] memchr("#ifdef\t__GNU_LIBRARY__\n/* We wan"..., '\n', 0) = NULL
[0x4023cc] fwrite("1033:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifdef\t__GNU_LIBRARY__\n/* We wan"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/* We want to avoid inclusion of"..., 'I', 8191) = 0x025a46b1
[0x40cdf3] memchr("Interchange the two blocks of da"..., '\n', 6451) = 0x025a46e0
[0x4022d1] memchr("/* We want to avoid inclusion of"..., '\n', 1735) = 0x025a4025
[0x4022d1] memchr("   because there are many ways i"..., '\n', 1670) = 0x025a405a
[0x4022d1] memchr("   On some systems, it contains "..., '\n', 1617) = 0x025a409f
[0x4022d1] memchr("   in GCC.  */\n#if flag_string=="..., '\n', 1548) = 0x025a40ae
[0x4022d1] memchr("#if flag_string==0   \n#include <"..., '\n', 1533) = 0x025a40c4
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 1511) = 0x025a40d8
[0x4022d1] memchr("#define flag_string 1\n#endif\n#de"..., '\n', 1491) = 0x025a40ee
[0x4022d1] memchr("#endif\n#define\tmy_index\tstrchr\n#"..., '\n', 1469) = 0x025a40f5
[0x4022d1] memchr("#define\tmy_index\tstrchr\n#define\t"..., '\n', 1462) = 0x025a410d
[0x4022d1] memchr("#define\tmy_bcopy(src, dst, n)\tme"..., '\n', 1438) = 0x025a4146
[0x4022d1] memchr("#else\n\n/* Avoid depending on lib"..., '\n', 1381) = 0x025a414c
[0x4022d1] memchr("\n/* Avoid depending on library f"..., '\n', 1375) = 0x025a414d
[0x4022d1] memchr("/* Avoid depending on library fu"..., '\n', 1374) = 0x025a417e
[0x4022d1] memchr("   whose names are inconsistent."..., '\n', 1325) = 0x025a41a3
[0x4022d1] memchr("\nchar *getenv ();\n\nstatic char *"..., '\n', 1288) = 0x025a41a4
[0x4022d1] memchr("char *getenv ();\n\nstatic char *\n"..., '\n', 1287) = 0x025a41b5
[0x4022d1] memchr("\nstatic char *\nmy_index (str, ch"..., '\n', 1270) = 0x025a41b6
[0x4022d1] memchr("static char *\nmy_index (str, chr"..., '\n', 1269) = 0x025a41c4
[0x4022d1] memchr("my_index (str, chr)\n     const c"..., '\n', 1255) = 0x025a41d8
[0x4022d1] memchr("     const char *str;\n     int c"..., '\n', 1235) = 0x025a41ee
[0x4022d1] memchr("     int chr;\n{\n  while (*str)\n "..., '\n', 1213) = 0x025a41fc
[0x4022d1] memchr("{\n  while (*str)\n    {\n      if "..., '\n', 1199) = 0x025a41fe
[0x4022d1] memchr("  while (*str)\n    {\n      if (*"..., '\n', 1197) = 0x025a420d
[0x4022d1] memchr("    {\n      if (*str == chr)\n\tre"..., '\n', 1182) = 0x025a4213
[0x4022d1] memchr("      if (*str == chr)\n\treturn ("..., '\n', 1176) = 0x025a422a
[0x4022d1] memchr("\treturn (char *) str;\n      str+"..., '\n', 1153) = 0x025a4240
[0x4022d1] memchr("      str++;\n    }\n  return 0;\n}"..., '\n', 1131) = 0x025a424d
[0x4022d1] memchr("    }\n  return 0;\n}\n\nstatic void"..., '\n', 1118) = 0x025a4253
[0x4022d1] memchr("  return 0;\n}\n\nstatic void\nmy_bc"..., '\n', 1112) = 0x025a425f
[0x4022d1] memchr("}\n\nstatic void\nmy_bcopy (from, t"..., '\n', 1100) = 0x025a4261
[0x4022d1] memchr("\nstatic void\nmy_bcopy (from, to,"..., '\n', 1098) = 0x025a4262
[0x4022d1] memchr("static void\nmy_bcopy (from, to, "..., '\n', 1097) = 0x025a426e
[0x4022d1] memchr("my_bcopy (from, to, size)\n     c"..., '\n', 1085) = 0x025a4288
[0x4022d1] memchr("     const char *from;\n     char"..., '\n', 1059) = 0x025a429f
[0x4022d1] memchr("     char *to;\n     int size;\n{\n"..., '\n', 1036) = 0x025a42ae
[0x4022d1] memchr("     int size;\n{\n  int i;\n  for "..., '\n', 1021) = 0x025a42bd
[0x4022d1] memchr("{\n  int i;\n  for (i = 0; i < siz"..., '\n', 1006) = 0x025a42bf
[0x4022d1] memchr("  int i;\n  for (i = 0; i < size;"..., '\n', 1004) = 0x025a42c8
[0x4022d1] memchr("  for (i = 0; i < size; i++)\n   "..., '\n', 995) = 0x025a42e5
[0x4022d1] memchr("    to[i] = from[i];\n}\n#endif\t\t\t"..., '\n', 966) = 0x025a42fa
[0x4022d1] memchr("}\n#endif\t\t\t\t/* GNU C library.  *"..., '\n', 945) = 0x025a42fc
[0x4022d1] memchr("#endif\t\t\t\t/* GNU C library.  */\n"..., '\n', 943) = 0x025a431c
[0x4022d1] memchr("\014\n/* Handle permutation of argum"..., '\n', 911) = 0x025a431e
[0x4022d1] memchr("/* Handle permutation of argumen"..., '\n', 909) = 0x025a4346
[0x4022d1] memchr("\n/* Describe the part of ARGV th"..., '\n', 869) = 0x025a4347
[0x4022d1] memchr("/* Describe the part of ARGV tha"..., '\n', 868) = 0x025a4388
[0x4022d1] memchr("   been skipped.  `first_nonopt'"..., '\n', 803) = 0x025a43d4
[0x4022d1] memchr("   `last_nonopt' is the index af"..., '\n', 727) = 0x025a440e
[0x4022d1] memchr("\nstatic int first_nonopt;\nstatic"..., '\n', 669) = 0x025a440f
[0x4022d1] memchr("static int first_nonopt;\nstatic "..., '\n', 668) = 0x025a4428
[0x4022d1] memchr("static int last_nonopt;\n\n/* Exch"..., '\n', 643) = 0x025a4440
[0x4022d1] memchr("\n/* Exchange two adjacent subseq"..., '\n', 619) = 0x025a4441
[0x4022d1] memchr("/* Exchange two adjacent subsequ"..., '\n', 618) = 0x025a4470
[0x4022d1] memchr("   One subsequence is elements ["..., '\n', 571) = 0x025a44aa
[0x4022d1] memchr("   which contains all the non-op"..., '\n', 513) = 0x025a44ef
[0x4022d1] memchr("   The other is elements [last_n"..., '\n', 444) = 0x025a4531
[0x4022d1] memchr("   the options processed since t"..., '\n', 378) = 0x025a4570
[0x4022d1] memchr("\n   `first_nonopt' and `last_non"..., '\n', 315) = 0x025a4571
[0x4022d1] memchr("   `first_nonopt' and `last_nono"..., '\n', 314) = 0x025a45b9
[0x4022d1] memchr("   the new indices of the non-op"..., '\n', 242) = 0x025a4601
[0x4022d1] memchr("\nstatic void\nexchange (argv)\n   "..., '\n', 170) = 0x025a4602
[0x4022d1] memchr("static void\nexchange (argv)\n    "..., '\n', 169) = 0x025a460e
[0x4022d1] memchr("exchange (argv)\n     char **argv"..., '\n', 157) = 0x025a461e
[0x4022d1] memchr("     char **argv;\n{\n  int nonopt"..., '\n', 141) = 0x025a4630
[0x4022d1] memchr("{\n  int nonopts_size = (last_non"..., '\n', 123) = 0x025a4632
[0x4022d1] memchr("  int nonopts_size = (last_nonop"..., '\n', 121) = 0x025a4677
[0x4022d1] memchr("  char **temp = (char **) __allo"..., '\n', 52) = 0x025a46aa
[0x4022d1] memchr("\n  /* Interchange the two blocks"..., '\n', 1) = 0x025a46ab
[0x4022d1] memchr("  /* Interchange the two blocks "..., '\n', 0) = NULL
[0x4023cc] fwrite("1102:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Interchange the two blocks "..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n  my_bcopy ((char *) &argv[firs"..., 'I', 6403) = 0x025a48ec
[0x40cdf3] memchr("ING.\n\n   If an element of ARGV s"..., '\n', 5880) = 0x025a48f0
[0x4022d1] memchr("\n  my_bcopy ((char *) &argv[firs"..., '\n', 505) = 0x025a46e1
[0x4022d1] memchr("  my_bcopy ((char *) &argv[first"..., '\n', 504) = 0x025a4729
[0x4022d1] memchr("  my_bcopy ((char *) &argv[last_"..., '\n', 432) = 0x025a4770
[0x4022d1] memchr("\t    (optind - last_nonopt) * si"..., '\n', 361) = 0x025a47a0
[0x4022d1] memchr("  my_bcopy ((char *) temp,\n\t    "..., '\n', 313) = 0x025a47bb
[0x4022d1] memchr("\t    (char *) &argv[first_nonopt"..., '\n', 286) = 0x025a47f5
[0x4022d1] memchr("\t    nonopts_size);\n\n  /* Update"..., '\n', 228) = 0x025a4809
[0x4022d1] memchr("\n  /* Update records for the slo"..., '\n', 208) = 0x025a480a
[0x4022d1] memchr("  /* Update records for the slot"..., '\n', 207) = 0x025a484c
[0x4022d1] memchr("\n  first_nonopt += (optind - las"..., '\n', 141) = 0x025a484d
[0x4022d1] memchr("  first_nonopt += (optind - last"..., '\n', 140) = 0x025a4877
[0x4022d1] memchr("  last_nonopt = optind;\n}\n\014\n/* S"..., '\n', 98) = 0x025a488f
[0x4022d1] memchr("}\n\014\n/* Scan elements of ARGV (wh"..., '\n', 74) = 0x025a4891
[0x4022d1] memchr("\014\n/* Scan elements of ARGV (whos"..., '\n', 72) = 0x025a4893
[0x4022d1] memchr("/* Scan elements of ARGV (whose "..., '\n', 70) = 0x025a48d9
[0x4022d1] memchr("   given in OPTSTRING.\n\n   If an"..., '\n', 0) = NULL
[0x4023cc] fwrite("1118:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   given in OPTSTRING.\n\n   If an"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   If an element of ARGV starts"..., 'I', 5875) = 0x025a48f5
[0x40cdf3] memchr("If an element of ARGV starts wit"..., '\n', 5871) = 0x025a493b
[0x4022d1] memchr("\n   If an element of ARGV starts"..., '\n', 1) = 0x025a48f1
[0x4022d1] memchr("   If an element of ARGV starts "..., '\n', 0) = NULL
[0x4023cc] fwrite("1120:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If an element of ARGV starts "..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   then it is an option element."..., 'I', 5800) = 0x025a49b5
[0x40cdf3] memchr("If `getopt'\n   is called repeate"..., '\n', 5679) = 0x025a49c0
[0x4022d1] memchr("   then it is an option element."..., '\n', 65) = 0x025a497c
[0x4022d1] memchr("   (aside from the initial '-') "..., '\n', 0) = NULL
[0x4023cc] fwrite("1122:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   (aside from the initial '-') "..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   is called repeatedly, it retu"..., 'I', 5667) = 0x025a4a39
[0x40cdf3] memchr("If `getopt' finds another option"..., '\n', 5547) = 0x025a4a7f
[0x4022d1] memchr("   is called repeatedly, it retu"..., '\n', 117) = 0x025a4a0f
[0x4022d1] memchr("   from each of the option eleme"..., '\n', 38) = 0x025a4a34
[0x4022d1] memchr("\n   If `getopt' finds another op"..., '\n', 1) = 0x025a4a35
[0x4022d1] memchr("   If `getopt' finds another opt"..., '\n', 0) = NULL
[0x4023cc] fwrite("1126:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If `getopt' finds another opt"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   updating `optind' and `nextch"..., 'I', 5476) = 0x025a4b16
[0x40cdf3] memchr("If there are no more option char"..., '\n', 5326) = 0x025a4b55
[0x4022d1] memchr("   updating `optind' and `nextch"..., '\n', 147) = 0x025a4ac9
[0x4022d1] memchr("   resume the scan with the foll"..., '\n', 73) = 0x025a4b11
[0x4022d1] memchr("\n   If there are no more option "..., '\n', 1) = 0x025a4b12
[0x4022d1] memchr("   If there are no more option c"..., '\n', 0) = NULL
[0x4023cc] fwrite("1130:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If there are no more option c"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Then `optind' is the index in"..., 'I', 5262) = 0x025a4c17
[0x40cdf3] memchr("ING is a string containing the l"..., '\n', 5069) = 0x025a4c53
[0x4022d1] memchr("   Then `optind' is the index in"..., '\n', 184) = 0x025a4b95
[0x4022d1] memchr("   that is not an option.  (The "..., '\n', 120) = 0x025a4bd6
[0x4022d1] memchr("   so that those that are not op"..., '\n', 55) = 0x025a4c0c
[0x4022d1] memchr("\n   OPTSTRING is a string contai"..., '\n', 1) = 0x025a4c0d
[0x4022d1] memchr("   OPTSTRING is a string contain"..., '\n', 0) = NULL
[0x4023cc] fwrite("1135:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   OPTSTRING is a string contain"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   If an option character is see"..., 'I', 5008) = 0x025a4c57
[0x40cdf3] memchr("If an option character is seen t"..., '\n', 5005) = 0x025a4c96
[0x4022d1] memchr("   If an option character is see"..., '\n', 0) = NULL
[0x4023cc] fwrite("1136:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If an option character is see"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   return '?' after printing an "..., 'I', 4941) = 0x025a4cc7
[0x40cdf3] memchr("If you set `opterr' to\n   zero, "..., '\n', 4893) = 0x025a4cdd
[0x4022d1] memchr("   return '?' after printing an "..., '\n', 0) = NULL
[0x4023cc] fwrite("1137:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   return '?' after printing an "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   zero, the error message is su"..., 'I', 4870) = 0x025a4d24
[0x40cdf3] memchr("If a char in OPTSTRING is follow"..., '\n', 4800) = 0x025a4d6e
[0x4022d1] memchr("   zero, the error message is su"..., '\n', 67) = 0x025a4d1f
[0x4022d1] memchr("\n   If a char in OPTSTRING is fo"..., '\n', 1) = 0x025a4d20
[0x4022d1] memchr("   If a char in OPTSTRING is fol"..., '\n', 0) = NULL
[0x4023cc] fwrite("1140:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If a char in OPTSTRING is fol"..., 1, 78, 0x7f498147f260) = 78
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   so the following text in the "..., 'I', 4725) = 0x025a4e97
[0x40cdf3] memchr("If OPTSTRING starts with `-' or "..., '\n', 4429) = 0x025a4edc
[0x4022d1] memchr("   so the following text in the "..., '\n', 293) = 0x025a4dbe
[0x4022d1] memchr("   ARGV-element, is returned in "..., '\n', 213) = 0x025a4e08
[0x4022d1] memchr("   wants an optional arg; if the"..., '\n', 139) = 0x025a4e50
[0x4022d1] memchr("   it is returned in `optarg', o"..., '\n', 67) = 0x025a4e92
[0x4022d1] memchr("\n   If OPTSTRING starts with `-'"..., '\n', 1) = 0x025a4e93
[0x4022d1] memchr("   If OPTSTRING starts with `-' "..., '\n', 0) = NULL
[0x4023cc] fwrite("1146:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If OPTSTRING starts with `-' "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   handling the non-option ARGV-"..., 'I', 4359) = 0x025a4f28
[0x40cdf3] memchr("IN_ORDER and REQUIRE_ORDER, abov"..., '\n', 4284) = 0x025a4f4a
[0x4022d1] memchr("   handling the non-option ARGV-"..., '\n', 42) = 0x025a4f06
[0x4022d1] memchr("   See the comments about RETURN"..., '\n', 0) = NULL
[0x4023cc] fwrite("1148:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   See the comments about RETURN"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Long-named options begin wit"..., 'I', 4249) = 0x025a4ffc
[0x40cdf3] memchr("If they have an\n   argument, it "..., '\n', 4072) = 0x025a500b
[0x4022d1] memchr("\n   Long-named options begin wit"..., '\n', 127) = 0x025a4f4b
[0x4022d1] memchr("   Long-named options begin with"..., '\n', 126) = 0x025a4f81
[0x4022d1] memchr("   Their names may be abbreviate"..., '\n', 72) = 0x025a4fc9
[0x4022d1] memchr("   or is an exact match for some"..., '\n', 0) = NULL
[0x4023cc] fwrite("1152:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   or is an exact match for some"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   argument, it follows the opti"..., 'I', 4056) = 0x025a5259
[0x40cdf3] memchr("IND returns the index in LONGOPT"..., '\n', 3467) = 0x025a5299
[0x4022d1] memchr("   argument, it follows the opti"..., '\n', 582) = 0x025a5057
[0x4022d1] memchr("   from the option name by a `='"..., '\n', 506) = 0x025a509b
[0x4022d1] memchr("   When `getopt' finds a long-na"..., '\n', 438) = 0x025a50e5
[0x4022d1] memchr("   `flag' field is nonzero, the "..., '\n', 364) = 0x025a5127
[0x4022d1] memchr("   if the `flag' field is zero.\n"..., '\n', 298) = 0x025a5147
[0x4022d1] memchr("\n   The elements of ARGV aren't "..., '\n', 266) = 0x025a5148
[0x4022d1] memchr("   The elements of ARGV aren't r"..., '\n', 265) = 0x025a518e
[0x4022d1] memchr("   But we pretend they're const "..., '\n', 195) = 0x025a51d0
[0x4022d1] memchr("   with other systems.\n\n   LONGO"..., '\n', 129) = 0x025a51e7
[0x4022d1] memchr("\n   LONGOPTS is a vector of `str"..., '\n', 106) = 0x025a51e8
[0x4022d1] memchr("   LONGOPTS is a vector of `stru"..., '\n', 105) = 0x025a5224
[0x4022d1] memchr("   element containing a name whi"..., '\n', 45) = 0x025a5250
[0x4022d1] memchr("\n   LONGIND returns the index in"..., '\n', 1) = 0x025a5251
[0x4022d1] memchr("   LONGIND returns the index in "..., '\n', 0) = NULL
[0x4023cc] fwrite("1166:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   LONGIND returns the index in "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   It is only valid when a long-"..., 'I', 3402) = 0x025a529d
[0x40cdf3] memchr("It is only valid when a long-nam"..., '\n', 3399) = 0x025a52e1
[0x4022d1] memchr("   It is only valid when a long-"..., '\n', 0) = NULL
[0x4023cc] fwrite("1167:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   It is only valid when a long-"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   recent call.\n\n   If LONG_ONLY"..., 'I', 3330) = 0x025a52f6
[0x40cdf3] memchr("If LONG_ONLY is nonzero, '-' as "..., '\n', 3310) = 0x025a5330
[0x4022d1] memchr("   recent call.\n\n   If LONG_ONLY"..., '\n', 17) = 0x025a52f1
[0x4022d1] memchr("\n   If LONG_ONLY is nonzero, '-'"..., '\n', 1) = 0x025a52f2
[0x4022d1] memchr("   If LONG_ONLY is nonzero, '-' "..., '\n', 0) = NULL
[0x4023cc] fwrite("1170:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If LONG_ONLY is nonzero, '-' "..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   long-named options.  */\n\nint\n"..., 'I', 3251) = 0x025a5451
[0x40cdf3] memchr("Initialize the internal data whe"..., '\n', 2963) = 0x025a548a
[0x4022d1] memchr("   long-named options.  */\n\nint\n"..., '\n', 283) = 0x025a534b
[0x4022d1] memchr("\nint\n_getopt_internal (argc, arg"..., '\n', 256) = 0x025a534c
[0x4022d1] memchr("int\n_getopt_internal (argc, argv"..., '\n', 255) = 0x025a5350
[0x4022d1] memchr("_getopt_internal (argc, argv, op"..., '\n', 251) = 0x025a5397
[0x4022d1] memchr("     int argc;\n     char *const "..., '\n', 180) = 0x025a53a6
[0x4022d1] memchr("     char *const *argv;\n     con"..., '\n', 165) = 0x025a53be
[0x4022d1] memchr("     const char *optstring;\n    "..., '\n', 141) = 0x025a53da
[0x4022d1] memchr("     const struct option *longop"..., '\n', 113) = 0x025a53fe
[0x4022d1] memchr("     int *longind;\n     int long"..., '\n', 77) = 0x025a5411
[0x4022d1] memchr("     int long_only;\n{\n  int opti"..., '\n', 58) = 0x025a5425
[0x4022d1] memchr("{\n  int option_index;\n\n  optarg "..., '\n', 38) = 0x025a5427
[0x4022d1] memchr("  int option_index;\n\n  optarg = "..., '\n', 36) = 0x025a543b
[0x4022d1] memchr("\n  optarg = 0;\n\n  /* Initialize "..., '\n', 16) = 0x025a543c
[0x4022d1] memchr("  optarg = 0;\n\n  /* Initialize t"..., '\n', 15) = 0x025a544a
[0x4022d1] memchr("\n  /* Initialize the internal da"..., '\n', 1) = 0x025a544b
[0x4022d1] memchr("  /* Initialize the internal dat"..., '\n', 0) = NULL
[0x4023cc] fwrite("1186:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize the internal dat"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     Start processing options wi"..., 'I', 2905) = 0x025a5624
[0x40cdf3] memchr("IN_ORDER;\n\t  ++optstring;\n\t}\n   "..., '\n', 2496) = 0x025a562d
[0x4022d1] memchr("     Start processing options wi"..., '\n', 388) = 0x025a54d2
[0x4022d1] memchr("     is the program name); the s"..., '\n', 316) = 0x025a5510
[0x4022d1] memchr("     non-option ARGV-elements is"..., '\n', 254) = 0x025a553c
[0x4022d1] memchr("\n  if (optind == 0)\n    {\n      "..., '\n', 210) = 0x025a553d
[0x4022d1] memchr("  if (optind == 0)\n    {\n      f"..., '\n', 209) = 0x025a5550
[0x4022d1] memchr("    {\n      first_nonopt = last_"..., '\n', 190) = 0x025a5556
[0x4022d1] memchr("      first_nonopt = last_nonopt"..., '\n', 184) = 0x025a5585
[0x4022d1] memchr("\n      nextchar = NULL;\n\n      /"..., '\n', 137) = 0x025a5586
[0x4022d1] memchr("      nextchar = NULL;\n\n      /*"..., '\n', 136) = 0x025a559d
[0x4022d1] memchr("\n      /* Determine how to handl"..., '\n', 113) = 0x025a559e
[0x4022d1] memchr("      /* Determine how to handle"..., '\n', 112) = 0x025a55eb
[0x4022d1] memchr("\n      if (optstring[0] == '-')\n"..., '\n', 35) = 0x025a55ec
[0x4022d1] memchr("      if (optstring[0] == '-')\n\t"..., '\n', 34) = 0x025a560b
[0x4022d1] memchr("\t{\n\t  ordering = RETURN_IN_ORDER"..., '\n', 3) = 0x025a560e
[0x4022d1] memchr("\t  ordering = RETURN_IN_ORDER;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("1201:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  ordering = RETURN_IN_ORDER;\n\t"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  ++optstring;\n\t}\n      else if"..., 'I', 2486) = 0x025a567a
[0x40cdf3] memchr("IRE_ORDER;\n\t  ++optstring;\n\t}\n  "..., '\n', 2410) = 0x025a5684
[0x4022d1] memchr("\t  ++optstring;\n\t}\n      else if"..., '\n', 58) = 0x025a563d
[0x4022d1] memchr("\t}\n      else if (optstring[0] ="..., '\n', 42) = 0x025a5640
[0x4022d1] memchr("      else if (optstring[0] == '"..., '\n', 39) = 0x025a5664
[0x4022d1] memchr("\t{\n\t  ordering = REQUIRE_ORDER;\n"..., '\n', 3) = 0x025a5667
[0x4022d1] memchr("\t  ordering = REQUIRE_ORDER;\n\t  "..., '\n', 0) = NULL
[0x4023cc] fwrite("1206:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  ordering = REQUIRE_ORDER;\n\t  "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  ++optstring;\n\t}\n      else if"..., 'I', 2399) = 0x025a56b3
[0x40cdf3] memchr("IXLY_CORRECT") != NULL)\n\torderin"..., '\n', 2353) = 0x025a56ca
[0x4022d1] memchr("\t  ++optstring;\n\t}\n      else if"..., '\n', 19) = 0x025a5694
[0x4022d1] memchr("\t}\n      else if (getenv ("POSIX"..., '\n', 3) = 0x025a5697
[0x4022d1] memchr("      else if (getenv ("POSIXLY_"..., '\n', 0) = NULL
[0x4023cc] fwrite("1209:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      else if (getenv ("POSIXLY_"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tordering = REQUIRE_ORDER;\n     "..., 'I', 2329) = 0x025a56db
[0x40cdf3] memchr("IRE_ORDER;\n      else\n\tordering "..., '\n', 2313) = 0x025a56e5
[0x4022d1] memchr("\tordering = REQUIRE_ORDER;\n     "..., '\n', 0) = NULL
[0x4023cc] fwrite("1210:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tordering = REQUIRE_ORDER;\n     "..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      else\n\tordering = PERMUTE;\n"..., 'I', 2302) = 0x025a5768
[0x40cdf3] memchr("If we have just processed some o"..., '\n', 2172) = 0x025a57aa
[0x4022d1] memchr("      else\n\tordering = PERMUTE;\n"..., '\n', 124) = 0x025a56f0
[0x4022d1] memchr("\tordering = PERMUTE;\n    }\n\n  if"..., '\n', 113) = 0x025a5705
[0x4022d1] memchr("    }\n\n  if (nextchar == NULL ||"..., '\n', 92) = 0x025a570b
[0x4022d1] memchr("\n  if (nextchar == NULL || *next"..., '\n', 86) = 0x025a570c
[0x4022d1] memchr("  if (nextchar == NULL || *nextc"..., '\n', 85) = 0x025a5739
[0x4022d1] memchr("    {\n      if (ordering == PERM"..., '\n', 40) = 0x025a573f
[0x4022d1] memchr("      if (ordering == PERMUTE)\n\t"..., '\n', 34) = 0x025a575e
[0x4022d1] memchr("\t{\n\t  /* If we have just process"..., '\n', 3) = 0x025a5761
[0x4022d1] memchr("\t  /* If we have just processed "..., '\n', 0) = NULL
[0x4023cc] fwrite("1219:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If we have just processed "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t     exchange them so that the "..., 'I', 2105) = 0x025a5bf5
[0x40cdf3] memchr("If we have done all the ARGV-ele"..., '\n', 1007) = 0x025a5c29
[0x4022d1] memchr("\t     exchange them so that the "..., '\n', 1089) = 0x025a57e2
[0x4022d1] memchr("\n\t  if (first_nonopt != last_non"..., '\n', 1033) = 0x025a57e3
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 1032) = 0x025a5820
[0x4022d1] memchr("\t    exchange ((char **) argv);\n"..., '\n', 971) = 0x025a5840
[0x4022d1] memchr("\t  else if (last_nonopt != optin"..., '\n', 939) = 0x025a5863
[0x4022d1] memchr("\t    first_nonopt = optind;\n\n\t  "..., '\n', 904) = 0x025a587f
[0x4022d1] memchr("\n\t  /* Now skip any additional n"..., '\n', 876) = 0x025a5880
[0x4022d1] memchr("\t  /* Now skip any additional no"..., '\n', 875) = 0x025a58aa
[0x4022d1] memchr("\t     and extend the range of no"..., '\n', 833) = 0x025a58ec
[0x4022d1] memchr("\n\t  while (optind < argc\n\t\t && ("..., '\n', 767) = 0x025a58ed
[0x4022d1] memchr("\t  while (optind < argc\n\t\t && (a"..., '\n', 766) = 0x025a5905
[0x4022d1] memchr("\t\t && (argv[optind][0] != '-' ||"..., '\n', 742) = 0x025a593f
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t\t && (long"..., '\n', 684) = 0x025a5954
[0x4022d1] memchr("\t\t && (longopts == NULL\n\t\t     |"..., '\n', 663) = 0x025a596c
[0x4022d1] memchr("\t\t     || argv[optind][0] != '+'"..., '\n', 639) = 0x025a59a9
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t\t"..., '\n', 578) = 0x025a59c7
[0x4022d1] memchr("\t\t )\n\t    optind++;\n\t  last_nono"..., '\n', 548) = 0x025a59cc
[0x4022d1] memchr("\t    optind++;\n\t  last_nonopt = "..., '\n', 543) = 0x025a59db
[0x4022d1] memchr("\t  last_nonopt = optind;\n\t}\n\n   "..., '\n', 528) = 0x025a59f4
[0x4022d1] memchr("\t}\n\n      /* Special ARGV-elemen"..., '\n', 503) = 0x025a59f7
[0x4022d1] memchr("\n      /* Special ARGV-element `"..., '\n', 500) = 0x025a59f8
[0x4022d1] memchr("      /* Special ARGV-element `-"..., '\n', 499) = 0x025a5a3b
[0x4022d1] memchr("\t Skip it like a null option,\n\t "..., '\n', 432) = 0x025a5a59
[0x4022d1] memchr("\t then exchange with previous no"..., '\n', 402) = 0x025a5a9c
[0x4022d1] memchr("\t then skip everything else like"..., '\n', 335) = 0x025a5acf
[0x4022d1] memchr("\n      if (optind != argc && !st"..., '\n', 284) = 0x025a5ad0
[0x4022d1] memchr("      if (optind != argc && !str"..., '\n', 283) = 0x025a5b0a
[0x4022d1] memchr("\t{\n\t  optind++;\n\n\t  if (first_no"..., '\n', 225) = 0x025a5b0d
[0x4022d1] memchr("\t  optind++;\n\n\t  if (first_nonop"..., '\n', 222) = 0x025a5b1a
[0x4022d1] memchr("\n\t  if (first_nonopt != last_non"..., '\n', 209) = 0x025a5b1b
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 208) = 0x025a5b58
[0x4022d1] memchr("\t    exchange ((char **) argv);\n"..., '\n', 147) = 0x025a5b78
[0x4022d1] memchr("\t  else if (first_nonopt == last"..., '\n', 115) = 0x025a5ba1
[0x4022d1] memchr("\t    first_nonopt = optind;\n\t  l"..., '\n', 74) = 0x025a5bbd
[0x4022d1] memchr("\t  last_nonopt = argc;\n\n\t  optin"..., '\n', 46) = 0x025a5bd4
[0x4022d1] memchr("\n\t  optind = argc;\n\t}\n\n      /* "..., '\n', 23) = 0x025a5bd5
[0x4022d1] memchr("\t  optind = argc;\n\t}\n\n      /* I"..., '\n', 22) = 0x025a5be7
[0x4022d1] memchr("\t}\n\n      /* If we have done all"..., '\n', 4) = 0x025a5bea
[0x4022d1] memchr("\n      /* If we have done all th"..., '\n', 1) = 0x025a5beb
[0x4022d1] memchr("      /* If we have done all the"..., '\n', 0) = NULL
[0x4023cc] fwrite("1259:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If we have done all the"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t and back over any non-options "..., 'I', 954) = 0x025a5d65
[0x40cdf3] memchr("If we have come to a non-option "..., '\n', 639) = 0x025a5d9c
[0x4022d1] memchr("\t and back over any non-options "..., '\n', 306) = 0x025a5c6b
[0x4022d1] memchr("\n      if (optind == argc)\n\t{\n\t "..., '\n', 240) = 0x025a5c6c
[0x4022d1] memchr("      if (optind == argc)\n\t{\n\t  "..., '\n', 239) = 0x025a5c86
[0x4022d1] memchr("\t{\n\t  /* Set the next-arg-index "..., '\n', 213) = 0x025a5c89
[0x4022d1] memchr("\t  /* Set the next-arg-index to "..., '\n', 210) = 0x025a5cc2
[0x4022d1] memchr("\t     that we previously skipped"..., '\n', 153) = 0x025a5d08
[0x4022d1] memchr("\t  if (first_nonopt != last_nono"..., '\n', 83) = 0x025a5d2c
[0x4022d1] memchr("\t    optind = first_nonopt;\n\t  r"..., '\n', 47) = 0x025a5d48
[0x4022d1] memchr("\t  return EOF;\n\t}\n\n      /* If w"..., '\n', 19) = 0x025a5d57
[0x4022d1] memchr("\t}\n\n      /* If we have come to "..., '\n', 4) = 0x025a5d5a
[0x4022d1] memchr("\n      /* If we have come to a n"..., '\n', 1) = 0x025a5d5b
[0x4022d1] memchr("      /* If we have come to a no"..., '\n', 0) = NULL
[0x4023cc] fwrite("1271:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If we have come to a no"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t either stop the scan or descri"..., 'I', 583) = 0x025a5ecb
[0x40cdf3] memchr("IRE_ORDER)\n\t    return EOF;\n\t  o"..., '\n', 281) = 0x025a5ed5
[0x4022d1] memchr("\t either stop the scan or descri"..., '\n', 279) = 0x025a5de4
[0x4022d1] memchr("\n      if ((argv[optind][0] != '"..., '\n', 207) = 0x025a5de5
[0x4022d1] memchr("      if ((argv[optind][0] != '-"..., '\n', 206) = 0x025a5e23
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  && (long"..., '\n', 144) = 0x025a5e38
[0x4022d1] memchr("\t  && (longopts == NULL\n\t      |"..., '\n', 123) = 0x025a5e50
[0x4022d1] memchr("\t      || argv[optind][0] != '+'"..., '\n', 99) = 0x025a5e8d
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 38) = 0x025a5eab
[0x4022d1] memchr("\t  )\n\t{\n\t  if (ordering == REQUI"..., '\n', 8) = 0x025a5eb0
[0x4022d1] memchr("\t{\n\t  if (ordering == REQUIRE_OR"..., '\n', 3) = 0x025a5eb3
[0x4022d1] memchr("\t  if (ordering == REQUIRE_ORDER"..., '\n', 0) = NULL
[0x4023cc] fwrite("1281:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (ordering == REQUIRE_ORDER"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    return EOF;\n\t  optarg = arg"..., 'I', 270) = NULL
[0x4022d1] memchr("\t    return EOF;\n\t  optarg = arg"..., '\n', 270) = 0x025a5ee6
[0x4022d1] memchr("\t  optarg = argv[optind++];\n\t  r"..., '\n', 253) = 0x025a5f02
[0x4022d1] memchr("\t  return 1;\n\t}\n\n      /* We hav"..., '\n', 225) = 0x025a5f0f
[0x4022d1] memchr("\t}\n\n      /* We have found anoth"..., '\n', 212) = 0x025a5f12
[0x4022d1] memchr("\n      /* We have found another "..., '\n', 209) = 0x025a5f13
[0x4022d1] memchr("      /* We have found another o"..., '\n', 208) = 0x025a5f47
[0x4022d1] memchr("\t Start decoding its characters."..., '\n', 156) = 0x025a5f6c
[0x4022d1] memchr("\n      nextchar = (argv[optind] "..., '\n', 119) = 0x025a5f6d
[0x4022d1] memchr("      nextchar = (argv[optind] +"..., '\n', 118) = 0x025a5f90
[0x4022d1] memchr("\t\t  + (longopts != NULL && argv["..., '\n', 83) = 0x025a5fc5
[0x4022d1] memchr("    }\n\n  if (longopts != NULL\n  "..., '\n', 30) = 0x025a5fcb
[0x4022d1] memchr("\n  if (longopts != NULL\n      &&"..., '\n', 24) = 0x025a5fcc
[0x4022d1] memchr("  if (longopts != NULL\n      && "..., '\n', 23) = 0x025a5fe3
[0x4022d1] memchr("      && ((argv[optind][0] =", '\n', 0) = NULL
[0x4020b3] memmove(0x259dfe4, 0x25a5fe4, 28, 0x25a5fe4, 0x7f498147f260) = 0x259dfe4
[0x402213] read(3, "= '-'\n\t   && (argv[optind][1] =="..., 32768) = 32768
[0x40bc2b] memchr("      && ((argv[optind][0] == '-"..., 'I', 32789) = 0x0259e92b
[0x40cdf3] memchr("If this is not getopt_long_only,"..., '\n', 30414) = 0x0259e94b
[0x4022d1] memchr("      && ((argv[optind][0] == '-"..., '\n', 2333) = 0x0259e005
[0x4022d1] memchr("\t   && (argv[optind][1] == '-' |"..., '\n', 2299) = 0x0259e033
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '\n', 2253) = 0x0259e048
[0x4022d1] memchr("\t  || argv[optind][0] == '+'\n#en"..., '\n', 2232) = 0x0259e065
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 2203) = 0x0259e083
[0x4022d1] memchr("\t  ))\n    {\n      const struct o"..., '\n', 2173) = 0x0259e089
[0x4022d1] memchr("    {\n      const struct option "..., '\n', 2167) = 0x0259e08f
[0x4022d1] memchr("      const struct option *p;\n  "..., '\n', 2161) = 0x0259e0ad
[0x4022d1] memchr("      char *s = nextchar;\n      "..., '\n', 2131) = 0x0259e0c7
[0x4022d1] memchr("      int exact = 0;\n      int a"..., '\n', 2105) = 0x0259e0dc
[0x4022d1] memchr("      int ambig = 0;\n      const"..., '\n', 2084) = 0x0259e0f1
[0x4022d1] memchr("      const struct option *pfoun"..., '\n', 2063) = 0x0259e11b
[0x4022d1] memchr("      int indfound;\n\n      while"..., '\n', 2021) = 0x0259e12f
[0x4022d1] memchr("\n      while (*s && *s != '=')\n\t"..., '\n', 2001) = 0x0259e130
[0x4022d1] memchr("      while (*s && *s != '=')\n\ts"..., '\n', 2000) = 0x0259e14e
[0x4022d1] memchr("\ts++;\n\n      /* Test all options"..., '\n', 1970) = 0x0259e154
[0x4022d1] memchr("\n      /* Test all options for e"..., '\n', 1964) = 0x0259e155
[0x4022d1] memchr("      /* Test all options for ei"..., '\n', 1963) = 0x0259e1a2
[0x4022d1] memchr("      for (p = longopts, option_"..., '\n', 1886) = 0x0259e1d6
[0x4022d1] memchr("\t   p++, option_index++)\n\tif (!s"..., '\n', 1834) = 0x0259e1ef
[0x4022d1] memchr("\tif (!strncmp (p->name, nextchar"..., '\n', 1809) = 0x0259e220
[0x4022d1] memchr("\t  {\n\t    if (s - nextchar == st"..., '\n', 1760) = 0x0259e225
[0x4022d1] memchr("\t    if (s - nextchar == strlen "..., '\n', 1755) = 0x0259e250
[0x4022d1] memchr("\t      {\n\t\t/* Exact match found."..., '\n', 1712) = 0x0259e259
[0x4022d1] memchr("\t\t/* Exact match found.  */\n\t\tpf"..., '\n', 1703) = 0x0259e275
[0x4022d1] memchr("\t\tpfound = p;\n\t\tindfound = optio"..., '\n', 1675) = 0x0259e283
[0x4022d1] memchr("\t\tindfound = option_index;\n\t\texa"..., '\n', 1661) = 0x0259e29e
[0x4022d1] memchr("\t\texact = 1;\n\t\tbreak;\n\t      }\n\t"..., '\n', 1634) = 0x0259e2ab
[0x4022d1] memchr("\t\tbreak;\n\t      }\n\t    else if ("..., '\n', 1621) = 0x0259e2b4
[0x4022d1] memchr("\t      }\n\t    else if (pfound =="..., '\n', 1612) = 0x0259e2bd
[0x4022d1] memchr("\t    else if (pfound == NULL)\n\t "..., '\n', 1603) = 0x0259e2db
[0x4022d1] memchr("\t      {\n\t\t/* First nonexact mat"..., '\n', 1573) = 0x0259e2e4
[0x4022d1] memchr("\t\t/* First nonexact match found."..., '\n', 1564) = 0x0259e309
[0x4022d1] memchr("\t\tpfound = p;\n\t\tindfound = optio"..., '\n', 1527) = 0x0259e317
[0x4022d1] memchr("\t\tindfound = option_index;\n\t    "..., '\n', 1513) = 0x0259e332
[0x4022d1] memchr("\t      }\n\t    else\n\t      /* Sec"..., '\n', 1486) = 0x0259e33b
[0x4022d1] memchr("\t    else\n\t      /* Second nonex"..., '\n', 1477) = 0x0259e345
[0x4022d1] memchr("\t      /* Second nonexact match "..., '\n', 1467) = 0x0259e370
[0x4022d1] memchr("\t      ambig = 1;\n\t  }\n\n      if"..., '\n', 1424) = 0x0259e382
[0x4022d1] memchr("\t  }\n\n      if (ambig && !exact)"..., '\n', 1406) = 0x0259e387
[0x4022d1] memchr("\n      if (ambig && !exact)\n\t{\n\t"..., '\n', 1401) = 0x0259e388
[0x4022d1] memchr("      if (ambig && !exact)\n\t{\n\t "..., '\n', 1400) = 0x0259e3a3
[0x4022d1] memchr("\t{\n\t  if (opterr)\n\t    fprintf ("..., '\n', 1373) = 0x0259e3a6
[0x4022d1] memchr("\t  if (opterr)\n\t    fprintf (std"..., '\n', 1370) = 0x0259e3b5
[0x4022d1] memchr("\t    fprintf (stderr, "%s: optio"..., '\n', 1355) = 0x0259e3ed
[0x4022d1] memchr("\t\t     argv[0], argv[optind]);\n\t"..., '\n', 1299) = 0x0259e40c
[0x4022d1] memchr("\t  nextchar += strlen (nextchar)"..., '\n', 1268) = 0x0259e42e
[0x4022d1] memchr("\t  optind++;\n\t  return '?';\n\t}\n\n"..., '\n', 1234) = 0x0259e43b
[0x4022d1] memchr("\t  return '?';\n\t}\n\n      if (pfo"..., '\n', 1221) = 0x0259e44a
[0x4022d1] memchr("\t}\n\n      if (pfound != NULL)\n\t{"..., '\n', 1206) = 0x0259e44d
[0x4022d1] memchr("\n      if (pfound != NULL)\n\t{\n\t "..., '\n', 1203) = 0x0259e44e
[0x4022d1] memchr("      if (pfound != NULL)\n\t{\n\t  "..., '\n', 1202) = 0x0259e468
[0x4022d1] memchr("\t{\n\t  option_index = indfound;\n\t"..., '\n', 1176) = 0x0259e46b
[0x4022d1] memchr("\t  option_index = indfound;\n\t  o"..., '\n', 1173) = 0x0259e487
[0x4022d1] memchr("\t  optind++;\n\t  if (*s)\n\t    {\n\t"..., '\n', 1145) = 0x0259e494
[0x4022d1] memchr("\t  if (*s)\n\t    {\n\t      /* Don'"..., '\n', 1132) = 0x0259e49f
[0x4022d1] memchr("\t    {\n\t      /* Don't test has_"..., '\n', 1121) = 0x0259e4a6
[0x4022d1] memchr("\t      /* Don't test has_arg wit"..., '\n', 1114) = 0x0259e4ea
[0x4022d1] memchr("\t\t allow it to be used on enums."..., '\n', 1046) = 0x0259e50f
[0x4022d1] memchr("\t      if (pfound->has_arg)\n\t\top"..., '\n', 1009) = 0x0259e52b
[0x4022d1] memchr("\t\toptarg = s + 1;\n\t      else\n\t\t"..., '\n', 981) = 0x0259e53d
[0x4022d1] memchr("\t      else\n\t\t{\n\t\t  if (opterr)\n"..., '\n', 963) = 0x0259e549
[0x4022d1] memchr("\t\t{\n\t\t  if (opterr)\n\t\t    {\n\t\t  "..., '\n', 951) = 0x0259e54d
[0x4022d1] memchr("\t\t  if (opterr)\n\t\t    {\n\t\t      "..., '\n', 947) = 0x0259e55d
[0x4022d1] memchr("\t\t    {\n\t\t      if (argv[optind "..., '\n', 931) = 0x0259e565
[0x4022d1] memchr("\t\t      if (argv[optind - 1][1] "..., '\n', 923) = 0x0259e58d
[0x4022d1] memchr("\t\t\t/* --option */\n\t\t\tfprintf (st"..., '\n', 883) = 0x0259e59f
[0x4022d1] memchr("\t\t\tfprintf (stderr,\n\t\t\t\t "%s: op"..., '\n', 865) = 0x0259e5b3
[0x4022d1] memchr("\t\t\t\t "%s: option `--%s' doesn't "..., '\n', 845) = 0x0259e5e9
[0x4022d1] memchr("\t\t\t\t argv[0], pfound->name);\n\t\t "..., '\n', 791) = 0x0259e606
[0x4022d1] memchr("\t\t      else\n\t\t\t/* +option or -o"..., '\n', 762) = 0x0259e613
[0x4022d1] memchr("\t\t\t/* +option or -option */\n\t\t\tf"..., '\n', 749) = 0x0259e62f
[0x4022d1] memchr("\t\t\tfprintf (stderr,\n\t\t\t     "%s:"..., '\n', 721) = 0x0259e643
[0x4022d1] memchr("\t\t\t     "%s: option `%c%s' doesn"..., '\n', 701) = 0x0259e67c
[0x4022d1] memchr("\t\t\t     argv[0], argv[optind - 1"..., '\n', 644) = 0x0259e6b1
[0x4022d1] memchr("\t\t    }\n\t\t  nextchar += strlen ("..., '\n', 591) = 0x0259e6b9
[0x4022d1] memchr("\t\t  nextchar += strlen (nextchar"..., '\n', 583) = 0x0259e6dc
[0x4022d1] memchr("\t\t  return '?';\n\t\t}\n\t    }\n\t  el"..., '\n', 548) = 0x0259e6ec
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else if (pfound->h"..., '\n', 532) = 0x0259e6f0
[0x4022d1] memchr("\t    }\n\t  else if (pfound->has_a"..., '\n', 528) = 0x0259e6f7
[0x4022d1] memchr("\t  else if (pfound->has_arg == 1"..., '\n', 521) = 0x0259e719
[0x4022d1] memchr("\t    {\n\t      if (optind < argc)"..., '\n', 487) = 0x0259e720
[0x4022d1] memchr("\t      if (optind < argc)\n\t\topta"..., '\n', 480) = 0x0259e73a
[0x4022d1] memchr("\t\toptarg = argv[optind++];\n\t    "..., '\n', 454) = 0x0259e755
[0x4022d1] memchr("\t      else\n\t\t{\n\t\t  if (opterr)\n"..., '\n', 427) = 0x0259e761
[0x4022d1] memchr("\t\t{\n\t\t  if (opterr)\n\t\t    fprint"..., '\n', 415) = 0x0259e765
[0x4022d1] memchr("\t\t  if (opterr)\n\t\t    fprintf (s"..., '\n', 411) = 0x0259e775
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 395) = 0x0259e7b6
[0x4022d1] memchr("\t\t\t     argv[0], argv[optind - 1"..., '\n', 330) = 0x0259e7da
[0x4022d1] memchr("\t\t  nextchar += strlen (nextchar"..., '\n', 294) = 0x0259e7fd
[0x4022d1] memchr("\t\t  return optstring[0] == ':' ?"..., '\n', 259) = 0x0259e829
[0x4022d1] memchr("\t\t}\n\t    }\n\t  nextchar += strlen"..., '\n', 215) = 0x0259e82d
[0x4022d1] memchr("\t    }\n\t  nextchar += strlen (ne"..., '\n', 211) = 0x0259e834
[0x4022d1] memchr("\t  nextchar += strlen (nextchar)"..., '\n', 204) = 0x0259e856
[0x4022d1] memchr("\t  if (longind != NULL)\n\t    *lo"..., '\n', 170) = 0x0259e86e
[0x4022d1] memchr("\t    *longind = option_index;\n\t "..., '\n', 146) = 0x0259e88c
[0x4022d1] memchr("\t  if (pfound->flag)\n\t    {\n\t   "..., '\n', 116) = 0x0259e8a1
[0x4022d1] memchr("\t    {\n\t      *(pfound->flag) = "..., '\n', 95) = 0x0259e8a8
[0x4022d1] memchr("\t      *(pfound->flag) = pfound-"..., '\n', 88) = 0x0259e8ce
[0x4022d1] memchr("\t      return 0;\n\t    }\n\t  retur"..., '\n', 50) = 0x0259e8df
[0x4022d1] memchr("\t    }\n\t  return pfound->val;\n\t}"..., '\n', 33) = 0x0259e8e6
[0x4022d1] memchr("\t  return pfound->val;\n\t}\n      "..., '\n', 26) = 0x0259e8fd
[0x4022d1] memchr("\t}\n      /* Can't find it as a l"..., '\n', 3) = 0x0259e900
[0x4022d1] memchr("      /* Can't find it as a long"..., '\n', 0) = NULL
[0x4023cc] fwrite("1398:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* Can't find it as a long"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t or the option starts with '--'"..., 'I', 30381) = 0x0259ec74
[0x40cdf3] memchr("Increment `optind' when we start"..., '\n', 29573) = 0x0259ecb7
[0x4022d1] memchr("\t or the option starts with '--'"..., '\n', 801) = 0x0259e984
[0x4022d1] memchr("\t option, then it's an error.\n\t "..., '\n', 744) = 0x0259e9a2
[0x4022d1] memchr("\t Otherwise interpret it as a sh"..., '\n', 714) = 0x0259e9d2
[0x4022d1] memchr("      if (!long_only || argv[opt"..., '\n', 666) = 0x0259ea01
[0x4022d1] memchr("#ifdef GETOPT_COMPAT\n\t  || argv["..., '\n', 619) = 0x0259ea16
[0x4022d1] memchr("\t  || argv[optind][0] == '+'\n#en"..., '\n', 598) = 0x0259ea33
[0x4022d1] memchr("#endif\t\t\t\t/* GETOPT_COMPAT */\n\t "..., '\n', 569) = 0x0259ea51
[0x4022d1] memchr("\t  || my_index (optstring, *next"..., '\n', 539) = 0x0259ea80
[0x4022d1] memchr("\t{\n\t  if (opterr)\n\t    {\n\t      "..., '\n', 492) = 0x0259ea83
[0x4022d1] memchr("\t  if (opterr)\n\t    {\n\t      if "..., '\n', 489) = 0x0259ea92
[0x4022d1] memchr("\t    {\n\t      if (argv[optind][1"..., '\n', 474) = 0x0259ea99
[0x4022d1] memchr("\t      if (argv[optind][1] == '-"..., '\n', 467) = 0x0259eabc
[0x4022d1] memchr("\t\t/* --option */\n\t\tfprintf (stde"..., '\n', 432) = 0x0259eacd
[0x4022d1] memchr("\t\tfprintf (stderr, "%s: unrecogn"..., '\n', 415) = 0x0259eb04
[0x4022d1] memchr("\t\t\t argv[0], nextchar);\n\t      e"..., '\n', 360) = 0x0259eb1c
[0x4022d1] memchr("\t      else\n\t\t/* +option or -opt"..., '\n', 336) = 0x0259eb28
[0x4022d1] memchr("\t\t/* +option or -option */\n\t\tfpr"..., '\n', 324) = 0x0259eb43
[0x4022d1] memchr("\t\tfprintf (stderr, "%s: unrecogn"..., '\n', 297) = 0x0259eb7a
[0x4022d1] memchr("\t\t\t argv[0], argv[optind][0], ne"..., '\n', 242) = 0x0259eba3
[0x4022d1] memchr("\t    }\n\t  nextchar = (char *) """..., '\n', 201) = 0x0259ebaa
[0x4022d1] memchr("\t  nextchar = (char *) "";\n\t  op"..., '\n', 194) = 0x0259ebc5
[0x4022d1] memchr("\t  optind++;\n\t  return '?';\n\t}\n "..., '\n', 167) = 0x0259ebd2
[0x4022d1] memchr("\t  return '?';\n\t}\n    }\n\n  /* Lo"..., '\n', 154) = 0x0259ebe1
[0x4022d1] memchr("\t}\n    }\n\n  /* Look at and handl"..., '\n', 139) = 0x0259ebe4
[0x4022d1] memchr("    }\n\n  /* Look at and handle t"..., '\n', 136) = 0x0259ebea
[0x4022d1] memchr("\n  /* Look at and handle the nex"..., '\n', 130) = 0x0259ebeb
[0x4022d1] memchr("  /* Look at and handle the next"..., '\n', 129) = 0x0259ec22
[0x4022d1] memchr("\n  {\n    char c = *nextchar++;\n "..., '\n', 74) = 0x0259ec23
[0x4022d1] memchr("  {\n    char c = *nextchar++;\n  "..., '\n', 73) = 0x0259ec27
[0x4022d1] memchr("    char c = *nextchar++;\n    ch"..., '\n', 69) = 0x0259ec41
[0x4022d1] memchr("    char *temp = my_index (optst"..., '\n', 43) = 0x0259ec6b
[0x4022d1] memchr("\n    /* Increment `optind' when "..., '\n', 1) = 0x0259ec6c
[0x4022d1] memchr("    /* Increment `optind' when w"..., '\n', 0) = NULL
[0x4023cc] fwrite("1431:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    /* Increment `optind' when w"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    if (*nextchar == '\\0')\n     "..., 'I', 29505) = 0x0259f02b
[0x40cdf3] memchr("If we end this ARGV-element by t"..., '\n', 28622) = 0x0259f064
[0x4022d1] memchr("    if (*nextchar == '\\0')\n     "..., '\n', 878) = 0x0259ecd2
[0x4022d1] memchr("      ++optind;\n\n    if (temp =="..., '\n', 851) = 0x0259ece2
[0x4022d1] memchr("\n    if (temp == NULL || c == ':"..., '\n', 835) = 0x0259ece3
[0x4022d1] memchr("    if (temp == NULL || c == ':'"..., '\n', 834) = 0x0259ed05
[0x4022d1] memchr("      {\n\tif (opterr)\n\t  {\n#if 0\n"..., '\n', 800) = 0x0259ed0d
[0x4022d1] memchr("\tif (opterr)\n\t  {\n#if 0\n\t    if "..., '\n', 792) = 0x0259ed1a
[0x4022d1] memchr("\t  {\n#if 0\n\t    if (c < 040 || c"..., '\n', 779) = 0x0259ed1f
[0x4022d1] memchr("#if 0\n\t    if (c < 040 || c >= 0"..., '\n', 774) = 0x0259ed25
[0x4022d1] memchr("\t    if (c < 040 || c >= 0177)\n\t"..., '\n', 768) = 0x0259ed44
[0x4022d1] memchr("\t      fprintf (stderr, "%s: unr"..., '\n', 737) = 0x0259ed8d
[0x4022d1] memchr("\t\t       argv[0], c);\n\t    else\n"..., '\n', 664) = 0x0259eda3
[0x4022d1] memchr("\t    else\n\t      fprintf (stderr"..., '\n', 642) = 0x0259edad
[0x4022d1] memchr("\t      fprintf (stderr, "%s: unr"..., '\n', 632) = 0x0259edf5
[0x4022d1] memchr("#else\n\t    /* 1003.2 specifies t"..., '\n', 560) = 0x0259edfb
[0x4022d1] memchr("\t    /* 1003.2 specifies the for"..., '\n', 554) = 0x0259ee34
[0x4022d1] memchr("\t    fprintf (stderr, "%s: illeg"..., '\n', 497) = 0x0259ee75
[0x4022d1] memchr("#endif\n\t  }\n\toptopt = c;\n\treturn"..., '\n', 432) = 0x0259ee7c
[0x4022d1] memchr("\t  }\n\toptopt = c;\n\treturn '?';\n "..., '\n', 425) = 0x0259ee81
[0x4022d1] memchr("\toptopt = c;\n\treturn '?';\n      "..., '\n', 420) = 0x0259ee8e
[0x4022d1] memchr("\treturn '?';\n      }\n    if (tem"..., '\n', 407) = 0x0259ee9b
[0x4022d1] memchr("      }\n    if (temp[1] == ':')\n"..., '\n', 394) = 0x0259eea3
[0x4022d1] memchr("    if (temp[1] == ':')\n      {\n"..., '\n', 386) = 0x0259eebb
[0x4022d1] memchr("      {\n\tif (temp[2] == ':')\n\t  "..., '\n', 362) = 0x0259eec3
[0x4022d1] memchr("\tif (temp[2] == ':')\n\t  {\n\t    /"..., '\n', 354) = 0x0259eed8
[0x4022d1] memchr("\t  {\n\t    /* This is an option t"..., '\n', 333) = 0x0259eedd
[0x4022d1] memchr("\t    /* This is an option that a"..., '\n', 328) = 0x0259ef20
[0x4022d1] memchr("\t    if (*nextchar != '\\0')\n\t   "..., '\n', 261) = 0x0259ef3c
[0x4022d1] memchr("\t      {\n\t\toptarg = nextchar;\n\t\t"..., '\n', 233) = 0x0259ef45
[0x4022d1] memchr("\t\toptarg = nextchar;\n\t\toptind++;"..., '\n', 224) = 0x0259ef5a
[0x4022d1] memchr("\t\toptind++;\n\t      }\n\t    else\n\t"..., '\n', 203) = 0x0259ef66
[0x4022d1] memchr("\t      }\n\t    else\n\t      optarg"..., '\n', 191) = 0x0259ef6f
[0x4022d1] memchr("\t    else\n\t      optarg = 0;\n\t  "..., '\n', 182) = 0x0259ef79
[0x4022d1] memchr("\t      optarg = 0;\n\t    nextchar"..., '\n', 172) = 0x0259ef8c
[0x4022d1] memchr("\t    nextchar = NULL;\n\t  }\n\telse"..., '\n', 153) = 0x0259efa2
[0x4022d1] memchr("\t  }\n\telse\n\t  {\n\t    /* This is "..., '\n', 131) = 0x0259efa7
[0x4022d1] memchr("\telse\n\t  {\n\t    /* This is an op"..., '\n', 126) = 0x0259efad
[0x4022d1] memchr("\t  {\n\t    /* This is an option t"..., '\n', 120) = 0x0259efb2
[0x4022d1] memchr("\t    /* This is an option that r"..., '\n', 115) = 0x0259efeb
[0x4022d1] memchr("\t    if (*nextchar != '\\0')\n\t   "..., '\n', 58) = 0x0259f007
[0x4022d1] memchr("\t      {\n\t\toptarg = nextchar;\n\t\t"..., '\n', 30) = 0x0259f010
[0x4022d1] memchr("\t\toptarg = nextchar;\n\t\t/* If we "..., '\n', 21) = 0x0259f025
[0x4022d1] memchr("\t\t/* If we end this ARGV-element"..., '\n', 0) = NULL
[0x4023cc] fwrite("1473:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t/* If we end this ARGV-element"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   we must advance to the next"..., 'I', 28564) = 0x0259f3f3
[0x40cdf3] memchr("IBC or not __GNU_LIBRARY__.  */\n"..., '\n', 27654) = 0x0259f412
[0x4022d1] memchr("\t\t   we must advance to the next"..., '\n', 898) = 0x0259f096
[0x4022d1] memchr("\t\toptind++;\n\t      }\n\t    else i"..., '\n', 848) = 0x0259f0a2
[0x4022d1] memchr("\t      }\n\t    else if (optind =="..., '\n', 836) = 0x0259f0ab
[0x4022d1] memchr("\t    else if (optind == argc)\n\t "..., '\n', 827) = 0x0259f0c9
[0x4022d1] memchr("\t      {\n\t\tif (opterr)\n\t\t  {\n#if"..., '\n', 797) = 0x0259f0d2
[0x4022d1] memchr("\t\tif (opterr)\n\t\t  {\n#if 0\n\t\t    "..., '\n', 788) = 0x0259f0e0
[0x4022d1] memchr("\t\t  {\n#if 0\n\t\t    fprintf (stder"..., '\n', 774) = 0x0259f0e6
[0x4022d1] memchr("#if 0\n\t\t    fprintf (stderr, "%s"..., '\n', 768) = 0x0259f0ec
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 762) = 0x0259f12e
[0x4022d1] memchr("\t\t\t     argv[0], c);\n#else\n\t\t   "..., '\n', 696) = 0x0259f143
[0x4022d1] memchr("#else\n\t\t    /* 1003.2 specifies "..., '\n', 675) = 0x0259f149
[0x4022d1] memchr("\t\t    /* 1003.2 specifies the fo"..., '\n', 669) = 0x0259f183
[0x4022d1] memchr("\t\t    fprintf (stderr, "%s: opti"..., '\n', 611) = 0x0259f1c5
[0x4022d1] memchr("\t\t\t     argv[0], c);\n#endif\n\t\t  "..., '\n', 545) = 0x0259f1da
[0x4022d1] memchr("#endif\n\t\t  }\n\t\toptopt = c;\n\t\tif "..., '\n', 524) = 0x0259f1e1
[0x4022d1] memchr("\t\t  }\n\t\toptopt = c;\n\t\tif (optstr"..., '\n', 517) = 0x0259f1e7
[0x4022d1] memchr("\t\toptopt = c;\n\t\tif (optstring[0]"..., '\n', 511) = 0x0259f1f5
[0x4022d1] memchr("\t\tif (optstring[0] == ':')\n\t\t  c"..., '\n', 497) = 0x0259f210
[0x4022d1] memchr("\t\t  c = ':';\n\t\telse\n\t\t  c = '?';"..., '\n', 470) = 0x0259f21d
[0x4022d1] memchr("\t\telse\n\t\t  c = '?';\n\t      }\n\t  "..., '\n', 457) = 0x0259f224
[0x4022d1] memchr("\t\t  c = '?';\n\t      }\n\t    else\n"..., '\n', 450) = 0x0259f231
[0x4022d1] memchr("\t      }\n\t    else\n\t      /* We "..., '\n', 437) = 0x0259f23a
[0x4022d1] memchr("\t    else\n\t      /* We already i"..., '\n', 428) = 0x0259f244
[0x4022d1] memchr("\t      /* We already incremented"..., '\n', 418) = 0x0259f274
[0x4022d1] memchr("\t\t increment it again when takin"..., '\n', 370) = 0x0259f2b5
[0x4022d1] memchr("\t      optarg = argv[optind++];\n"..., '\n', 305) = 0x0259f2d5
[0x4022d1] memchr("\t    nextchar = NULL;\n\t  }\n     "..., '\n', 273) = 0x0259f2eb
[0x4022d1] memchr("\t  }\n      }\n    return c;\n  }\n}"..., '\n', 251) = 0x0259f2f0
[0x4022d1] memchr("      }\n    return c;\n  }\n}\n\nint"..., '\n', 246) = 0x0259f2f8
[0x4022d1] memchr("    return c;\n  }\n}\n\nint\ngetopt "..., '\n', 238) = 0x0259f306
[0x4022d1] memchr("  }\n}\n\nint\ngetopt (argc, argv, o"..., '\n', 224) = 0x0259f30a
[0x4022d1] memchr("}\n\nint\ngetopt (argc, argv, optst"..., '\n', 220) = 0x0259f30c
[0x4022d1] memchr("\nint\ngetopt (argc, argv, optstri"..., '\n', 218) = 0x0259f30d
[0x4022d1] memchr("int\ngetopt (argc, argv, optstrin"..., '\n', 217) = 0x0259f311
[0x4022d1] memchr("getopt (argc, argv, optstring)\n "..., '\n', 213) = 0x0259f330
[0x4022d1] memchr("     int argc;\n     char *const "..., '\n', 182) = 0x0259f33f
[0x4022d1] memchr("     char *const *argv;\n     con"..., '\n', 167) = 0x0259f357
[0x4022d1] memchr("     const char *optstring;\n{\n  "..., '\n', 143) = 0x0259f373
[0x4022d1] memchr("{\n  return _getopt_internal (arg"..., '\n', 115) = 0x0259f375
[0x4022d1] memchr("  return _getopt_internal (argc,"..., '\n', 113) = 0x0259f3a7
[0x4022d1] memchr("\t\t\t   (const struct option *) 0,"..., '\n', 63) = 0x0259f3c8
[0x4022d1] memchr("\t\t\t   (int *) 0,\n\t\t\t   0);\n}\n\n#e"..., '\n', 30) = 0x0259f3d9
[0x4022d1] memchr("\t\t\t   0);\n}\n\n#endif\t/* _LIBC or "..., '\n', 13) = 0x0259f3e3
[0x4022d1] memchr("}\n\n#endif\t/* _LIBC or not __GNU_"..., '\n', 3) = 0x0259f3e5
[0x4022d1] memchr("\n#endif\t/* _LIBC or not __GNU_LI"..., '\n', 1) = 0x0259f3e6
[0x4022d1] memchr("#endif\t/* _LIBC or not __GNU_LIB"..., '\n', 0) = NULL
[0x4023cc] fwrite("1519:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#endif\t/* _LIBC or not __GNU_LIB"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\014\n#ifdef TEST\n\n/* Compile with -"..., 'I', 27622) = 0x0259f8f1
[0x40cdf3] memchr("Implements POSIX draft P10003.2/"..., '\n', 26376) = 0x0259f922
[0x4022d1] memchr("\014\n#ifdef TEST\n\n/* Compile with -"..., '\n', 1242) = 0x0259f414
[0x4022d1] memchr("#ifdef TEST\n\n/* Compile with -DT"..., '\n', 1240) = 0x0259f420
[0x4022d1] memchr("\n/* Compile with -DTEST to make "..., '\n', 1228) = 0x0259f421
[0x4022d1] memchr("/* Compile with -DTEST to make a"..., '\n', 1227) = 0x0259f461
[0x4022d1] memchr("   the above definition of `geto"..., '\n', 1163) = 0x0259f48a
[0x4022d1] memchr("\nint\nmain (argc, argv)\n     int "..., '\n', 1122) = 0x0259f48b
[0x4022d1] memchr("int\nmain (argc, argv)\n     int a"..., '\n', 1121) = 0x0259f48f
[0x4022d1] memchr("main (argc, argv)\n     int argc;"..., '\n', 1117) = 0x0259f4a1
[0x4022d1] memchr("     int argc;\n     char **argv;"..., '\n', 1099) = 0x0259f4b0
[0x4022d1] memchr("     char **argv;\n{\n  int c;\n  i"..., '\n', 1084) = 0x0259f4c2
[0x4022d1] memchr("{\n  int c;\n  int digit_optind = "..., '\n', 1066) = 0x0259f4c4
[0x4022d1] memchr("  int c;\n  int digit_optind = 0;"..., '\n', 1064) = 0x0259f4cd
[0x4022d1] memchr("  int digit_optind = 0;\n\n  while"..., '\n', 1055) = 0x0259f4e5
[0x4022d1] memchr("\n  while (1)\n    {\n      int thi"..., '\n', 1031) = 0x0259f4e6
[0x4022d1] memchr("  while (1)\n    {\n      int this"..., '\n', 1030) = 0x0259f4f2
[0x4022d1] memchr("    {\n      int this_option_opti"..., '\n', 1018) = 0x0259f4f8
[0x4022d1] memchr("      int this_option_optind = o"..., '\n', 1012) = 0x0259f52c
[0x4022d1] memchr("\n      c = getopt (argc, argv, ""..., '\n', 960) = 0x0259f52d
[0x4022d1] memchr("      c = getopt (argc, argv, "a"..., '\n', 959) = 0x0259f560
[0x4022d1] memchr("      if (c == EOF)\n\tbreak;\n\n   "..., '\n', 908) = 0x0259f574
[0x4022d1] memchr("\tbreak;\n\n      switch (c)\n\t{\n\tca"..., '\n', 888) = 0x0259f57c
[0x4022d1] memchr("\n      switch (c)\n\t{\n\tcase '0':\n"..., '\n', 880) = 0x0259f57d
[0x4022d1] memchr("      switch (c)\n\t{\n\tcase '0':\n\t"..., '\n', 879) = 0x0259f58e
[0x4022d1] memchr("\t{\n\tcase '0':\n\tcase '1':\n\tcase '"..., '\n', 862) = 0x0259f591
[0x4022d1] memchr("\tcase '0':\n\tcase '1':\n\tcase '2':"..., '\n', 859) = 0x0259f59c
[0x4022d1] memchr("\tcase '1':\n\tcase '2':\n\tcase '3':"..., '\n', 848) = 0x0259f5a7
[0x4022d1] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '\n', 837) = 0x0259f5b2
[0x4022d1] memchr("\tcase '3':\n\tcase '4':\n\tcase '5':"..., '\n', 826) = 0x0259f5bd
[0x4022d1] memchr("\tcase '4':\n\tcase '5':\n\tcase '6':"..., '\n', 815) = 0x0259f5c8
[0x4022d1] memchr("\tcase '5':\n\tcase '6':\n\tcase '7':"..., '\n', 804) = 0x0259f5d3
[0x4022d1] memchr("\tcase '6':\n\tcase '7':\n\tcase '8':"..., '\n', 793) = 0x0259f5de
[0x4022d1] memchr("\tcase '7':\n\tcase '8':\n\tcase '9':"..., '\n', 782) = 0x0259f5e9
[0x4022d1] memchr("\tcase '8':\n\tcase '9':\n\t  if (dig"..., '\n', 771) = 0x0259f5f4
[0x4022d1] memchr("\tcase '9':\n\t  if (digit_optind !"..., '\n', 760) = 0x0259f5ff
[0x4022d1] memchr("\t  if (digit_optind != 0 && digi"..., '\n', 749) = 0x0259f63f
[0x4022d1] memchr("\t    printf ("digits occur in tw"..., '\n', 685) = 0x0259f67f
[0x4022d1] memchr("\t  digit_optind = this_option_op"..., '\n', 621) = 0x0259f6a5
[0x4022d1] memchr("\t  printf ("option %c\\n", c);\n\t "..., '\n', 583) = 0x0259f6c3
[0x4022d1] memchr("\t  break;\n\n\tcase 'a':\n\t  printf "..., '\n', 553) = 0x0259f6cd
[0x4022d1] memchr("\n\tcase 'a':\n\t  printf ("option a"..., '\n', 543) = 0x0259f6ce
[0x4022d1] memchr("\tcase 'a':\n\t  printf ("option a\\"..., '\n', 542) = 0x0259f6d9
[0x4022d1] memchr("\t  printf ("option a\\n");\n\t  bre"..., '\n', 531) = 0x0259f6f3
[0x4022d1] memchr("\t  break;\n\n\tcase 'b':\n\t  printf "..., '\n', 505) = 0x0259f6fd
[0x4022d1] memchr("\n\tcase 'b':\n\t  printf ("option b"..., '\n', 495) = 0x0259f6fe
[0x4022d1] memchr("\tcase 'b':\n\t  printf ("option b\\"..., '\n', 494) = 0x0259f709
[0x4022d1] memchr("\t  printf ("option b\\n");\n\t  bre"..., '\n', 483) = 0x0259f723
[0x4022d1] memchr("\t  break;\n\n\tcase 'c':\n\t  printf "..., '\n', 457) = 0x0259f72d
[0x4022d1] memchr("\n\tcase 'c':\n\t  printf ("option c"..., '\n', 447) = 0x0259f72e
[0x4022d1] memchr("\tcase 'c':\n\t  printf ("option c "..., '\n', 446) = 0x0259f739
[0x4022d1] memchr("\t  printf ("option c with value "..., '\n', 435) = 0x0259f76b
[0x4022d1] memchr("\t  break;\n\n\tcase '?':\n\t  break;\n"..., '\n', 385) = 0x0259f775
[0x4022d1] memchr("\n\tcase '?':\n\t  break;\n\n\tdefault:"..., '\n', 375) = 0x0259f776
[0x4022d1] memchr("\tcase '?':\n\t  break;\n\n\tdefault:\n"..., '\n', 374) = 0x0259f781
[0x4022d1] memchr("\t  break;\n\n\tdefault:\n\t  printf ("..., '\n', 363) = 0x0259f78b
[0x4022d1] memchr("\n\tdefault:\n\t  printf ("?? getopt"..., '\n', 353) = 0x0259f78c
[0x4022d1] memchr("\tdefault:\n\t  printf ("?? getopt "..., '\n', 352) = 0x0259f796
[0x4022d1] memchr("\t  printf ("?? getopt returned c"..., '\n', 342) = 0x0259f7d3
[0x4022d1] memchr("\t}\n    }\n\n  if (optind < argc)\n "..., '\n', 281) = 0x0259f7d6
[0x4022d1] memchr("    }\n\n  if (optind < argc)\n    "..., '\n', 278) = 0x0259f7dc
[0x4022d1] memchr("\n  if (optind < argc)\n    {\n    "..., '\n', 272) = 0x0259f7dd
[0x4022d1] memchr("  if (optind < argc)\n    {\n     "..., '\n', 271) = 0x0259f7f2
[0x4022d1] memchr("    {\n      printf ("non-option "..., '\n', 250) = 0x0259f7f8
[0x4022d1] memchr("      printf ("non-option ARGV-e"..., '\n', 244) = 0x0259f825
[0x4022d1] memchr("      while (optind < argc)\n\tpri"..., '\n', 199) = 0x0259f841
[0x4022d1] memchr("\tprintf ("%s ", argv[optind++]);"..., '\n', 171) = 0x0259f862
[0x4022d1] memchr("      printf ("\\n");\n    }\n\n  ex"..., '\n', 138) = 0x0259f877
[0x4022d1] memchr("    }\n\n  exit (0);\n}\n\n#endif /* "..., '\n', 117) = 0x0259f87d
[0x4022d1] memchr("\n  exit (0);\n}\n\n#endif /* TEST *"..., '\n', 111) = 0x0259f87e
[0x4022d1] memchr("  exit (0);\n}\n\n#endif /* TEST */"..., '\n', 110) = 0x0259f88a
[0x4022d1] memchr("}\n\n#endif /* TEST */\n/* Extended"..., '\n', 98) = 0x0259f88c
[0x4022d1] memchr("\n#endif /* TEST */\n/* Extended r"..., '\n', 96) = 0x0259f88d
[0x4022d1] memchr("#endif /* TEST */\n/* Extended re"..., '\n', 95) = 0x0259f89f
[0x4022d1] memchr("/* Extended regular expression m"..., '\n', 77) = 0x0259f8db
[0x4022d1] memchr("   version 0.12.\n   (Implements "..., '\n', 17) = 0x0259f8ec
[0x4022d1] memchr("   (Implements POSIX draft P1000"..., '\n', 0) = NULL
[0x4023cc] fwrite("1594:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   (Implements POSIX draft P1000"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   internationalization features"..., 'I', 26326) = 0x0259f977
[0x40cdf3] memchr("Inc.\n\n   This program is free so"..., '\n', 26242) = 0x0259f97b
[0x4022d1] memchr("   internationalization features"..., '\n', 36) = 0x0259f945
[0x4022d1] memchr("\n   Copyright (C) 1993 Free Soft"..., '\n', 1) = 0x0259f946
[0x4022d1] memchr("   Copyright (C) 1993 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("1597:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Copyright (C) 1993 Free Softw"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., 'I', 26237) = 0x0259fab6
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 25923) = 0x0259faef
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x0259f97c
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x0259f9c4
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 233) = 0x0259fa0c
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 161) = 0x0259fa53
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 90) = 0x0259fa69
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x0259fa6a
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x0259faad
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("1605:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 25865) = 0x0259fafd
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 25852) = 0x0259fb30
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("1606:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 25800) = 0x0259fbf5
[0x40cdf3] memchr("Inc., 675 Mass Ave, Cambridge, M"..., '\n', 25604) = 0x0259fc26
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x0259fb60
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x0259fb61
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x0259fba6
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x0259fbe5
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("1611:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* AIX requires this to be the "..., 'I', 25554) = 0x0259fc2c
[0x40cdf3] memchr("IX requires this to be the first"..., '\n', 25549) = 0x0259fc62
[0x4022d1] memchr("\n/* AIX requires this to be the "..., '\n', 1) = 0x0259fc27
[0x4022d1] memchr("/* AIX requires this to be the f"..., '\n', 0) = NULL
[0x4023cc] fwrite("1613:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* AIX requires this to be the f"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if defined (_AIX) && !defined ("..., 'I', 25494) = 0x0259fc72
[0x40cdf3] memchr("IX) && !defined (REGEX_MALLOC)\n "..., '\n', 25479) = 0x0259fc90
[0x4022d1] memchr("#if defined (_AIX) && !defined ("..., '\n', 0) = NULL
[0x4023cc] fwrite("1614:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#if defined (_AIX) && !defined ("..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  #pragma alloca\n#endif\n\n#define"..., 'I', 25448) = 0x0259fd67
[0x40cdf3] memchr("IG_H\n#if flag_config==0\n#include"..., '\n', 25234) = 0x0259fd6b
[0x4022d1] memchr("  #pragma alloca\n#endif\n\n#define"..., '\n', 198) = 0x0259fca1
[0x4022d1] memchr("#endif\n\n#define _GNU_SOURCE\n\n/* "..., '\n', 181) = 0x0259fca8
[0x4022d1] memchr("\n#define _GNU_SOURCE\n\n/* We need"..., '\n', 174) = 0x0259fca9
[0x4022d1] memchr("#define _GNU_SOURCE\n\n/* We need "..., '\n', 173) = 0x0259fcbd
[0x4022d1] memchr("\n/* We need this for `regex.h', "..., '\n', 153) = 0x0259fcbe
[0x4022d1] memchr("/* We need this for `regex.h', a"..., '\n', 152) = 0x0259fd0a
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 76) = 0x0259fd1f
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 55) = 0x0259fd36
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n\n"..., '\n', 32) = 0x0259fd4e
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_CONFIG_H\n#if"..., '\n', 8) = 0x0259fd55
[0x4022d1] memchr("\n#ifdef HAVE_CONFIG_H\n#if flag_c"..., '\n', 1) = 0x0259fd56
[0x4022d1] memchr("#ifdef HAVE_CONFIG_H\n#if flag_co"..., '\n', 0) = NULL
[0x4023cc] fwrite("1626:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifdef HAVE_CONFIG_H\n#if flag_co"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if flag_config==0\n#include "con"..., 'I', 25229) = 0x0259fec9
[0x40cdf3] memchr("ING' here, but only GCC and Emac"..., '\n', 24880) = 0x0259fef1
[0x4022d1] memchr("#if flag_config==0\n#include "con"..., '\n', 321) = 0x0259fd7e
[0x4022d1] memchr("#include "config.h"\n#define flag"..., '\n', 302) = 0x0259fd92
[0x4022d1] memchr("#define flag_config 1\n#endif\n#en"..., '\n', 282) = 0x0259fda8
[0x4022d1] memchr("#endif\n#endif\n\n/* The `emacs' sw"..., '\n', 260) = 0x0259fdaf
[0x4022d1] memchr("#endif\n\n/* The `emacs' switch tu"..., '\n', 253) = 0x0259fdb6
[0x4022d1] memchr("\n/* The `emacs' switch turns on "..., '\n', 246) = 0x0259fdb7
[0x4022d1] memchr("/* The `emacs' switch turns on c"..., '\n', 245) = 0x0259fdf0
[0x4022d1] memchr("   that make sense only in Emacs"..., '\n', 188) = 0x0259fe15
[0x4022d1] memchr("#ifdef emacs\n\n#include "lisp.h"\n"..., '\n', 151) = 0x0259fe22
[0x4022d1] memchr("\n#include "lisp.h"\n#include "buf"..., '\n', 138) = 0x0259fe23
[0x4022d1] memchr("#include "lisp.h"\n#include "buff"..., '\n', 137) = 0x0259fe35
[0x4022d1] memchr("#include "buffer.h"\n#include "sy"..., '\n', 119) = 0x0259fe49
[0x4022d1] memchr("#include "syntax.h"\n\n/* Emacs us"..., '\n', 99) = 0x0259fe5d
[0x4022d1] memchr("\n/* Emacs uses `NULL' as a predi"..., '\n', 79) = 0x0259fe5e
[0x4022d1] memchr("/* Emacs uses `NULL' as a predic"..., '\n', 78) = 0x0259fe87
[0x4022d1] memchr("#undef NULL\n\n#else  /* not emacs"..., '\n', 37) = 0x0259fe93
[0x4022d1] memchr("\n#else  /* not emacs */\n\n/* We u"..., '\n', 25) = 0x0259fe94
[0x4022d1] memchr("#else  /* not emacs */\n\n/* We us"..., '\n', 24) = 0x0259feab
[0x4022d1] memchr("\n/* We used to test for `BSTRING"..., '\n', 1) = 0x0259feac
[0x4022d1] memchr("/* We used to test for `BSTRING'"..., '\n', 0) = NULL
[0x4023cc] fwrite("1646:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* We used to test for `BSTRING'"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   `BSTRING', as far as I know, "..., 'I', 24839) = 0x0259fefa
[0x40cdf3] memchr("ING', as far as I know, and neit"..., '\n', 24831) = 0x0259ff38
[0x4022d1] memchr("   `BSTRING', as far as I know, "..., '\n', 0) = NULL
[0x4023cc] fwrite("1647:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   `BSTRING', as far as I know, "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if HAVE_STRING_H || STDC_HEADER"..., 'I', 24768) = 0x0259ff45
[0x40cdf3] memchr("ING_H || STDC_HEADERS\n#if flag_s"..., '\n', 24756) = 0x0259ff5a
[0x4022d1] memchr("#if HAVE_STRING_H || STDC_HEADER"..., '\n', 0) = NULL
[0x4023cc] fwrite("1648:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#if HAVE_STRING_H || STDC_HEADER"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if flag_string==0\n#include <str"..., 'I', 24734) = 0x025a0292
[0x40cdf3] memchr("IZE 256\n\nstatic char re_syntax_t"..., '\n', 23911) = 0x025a0299
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 805) = 0x0259ff6d
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 786) = 0x0259ff81
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 766) = 0x0259ff97
[0x4022d1] memchr("#endif\n#ifndef bcmp\n#define bcmp"..., '\n', 744) = 0x0259ff9e
[0x4022d1] memchr("#ifndef bcmp\n#define bcmp(s1, s2"..., '\n', 737) = 0x0259ffab
[0x4022d1] memchr("#define bcmp(s1, s2, n)\tmemcmp ("..., '\n', 724) = 0x0259ffdc
[0x4022d1] memchr("#endif\n#ifndef bcopy\n#define bco"..., '\n', 675) = 0x0259ffe3
[0x4022d1] memchr("#ifndef bcopy\n#define bcopy(s, d"..., '\n', 668) = 0x0259fff1
[0x4022d1] memchr("#define bcopy(s, d, n)\tmemcpy (("..., '\n', 654) = 0x025a001f
[0x4022d1] memchr("#endif\n#ifndef bzero\n#define bze"..., '\n', 608) = 0x025a0026
[0x4022d1] memchr("#ifndef bzero\n#define bzero(s, n"..., '\n', 601) = 0x025a0034
[0x4022d1] memchr("#define bzero(s, n)\tmemset ((s),"..., '\n', 587) = 0x025a005d
[0x4022d1] memchr("#endif\n#else\n#if flag_strings==0"..., '\n', 546) = 0x025a0064
[0x4022d1] memchr("#else\n#if flag_strings==0\n#inclu"..., '\n', 539) = 0x025a006a
[0x4022d1] memchr("#if flag_strings==0\n#include <st"..., '\n', 533) = 0x025a007e
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 513) = 0x025a0093
[0x4022d1] memchr("#define flag_strings 1\n#endif\n#e"..., '\n', 492) = 0x025a00aa
[0x4022d1] memchr("#endif\n#endif\n\n#ifdef STDC_HEADE"..., '\n', 469) = 0x025a00b1
[0x4022d1] memchr("#endif\n\n#ifdef STDC_HEADERS\n#if "..., '\n', 462) = 0x025a00b8
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_st"..., '\n', 455) = 0x025a00b9
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_std"..., '\n', 454) = 0x025a00cd
[0x4022d1] memchr("#if flag_stdlib==0 \n#include <st"..., '\n', 434) = 0x025a00e1
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 414) = 0x025a00f5
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 394) = 0x025a010b
[0x4022d1] memchr("#endif\n#else\nchar *malloc ();\nch"..., '\n', 372) = 0x025a0112
[0x4022d1] memchr("#else\nchar *malloc ();\nchar *rea"..., '\n', 365) = 0x025a0118
[0x4022d1] memchr("char *malloc ();\nchar *realloc ("..., '\n', 359) = 0x025a0129
[0x4022d1] memchr("char *realloc ();\n#endif\n\n\n/* De"..., '\n', 342) = 0x025a013b
[0x4022d1] memchr("#endif\n\n\n/* Define the syntax st"..., '\n', 324) = 0x025a0142
[0x4022d1] memchr("\n\n/* Define the syntax stuff for"..., '\n', 317) = 0x025a0143
[0x4022d1] memchr("\n/* Define the syntax stuff for "..., '\n', 316) = 0x025a0144
[0x4022d1] memchr("/* Define the syntax stuff for \\"..., '\n', 315) = 0x025a0174
[0x4022d1] memchr("\n/* This must be nonzero for the"..., '\n', 267) = 0x025a0175
[0x4022d1] memchr("/* This must be nonzero for the "..., '\n', 266) = 0x025a01b6
[0x4022d1] memchr("   commands in re_match_2.  */\n#"..., '\n', 201) = 0x025a01d5
[0x4022d1] memchr("#ifndef Sword \n#define Sword 1\n#"..., '\n', 170) = 0x025a01e4
[0x4022d1] memchr("#define Sword 1\n#endif\n\n#ifdef S"..., '\n', 155) = 0x025a01f4
[0x4022d1] memchr("#endif\n\n#ifdef SYNTAX_TABLE\n\next"..., '\n', 139) = 0x025a01fb
[0x4022d1] memchr("\n#ifdef SYNTAX_TABLE\n\nextern cha"..., '\n', 132) = 0x025a01fc
[0x4022d1] memchr("#ifdef SYNTAX_TABLE\n\nextern char"..., '\n', 131) = 0x025a0210
[0x4022d1] memchr("\nextern char *re_syntax_table;\n\n"..., '\n', 111) = 0x025a0211
[0x4022d1] memchr("extern char *re_syntax_table;\n\n#"..., '\n', 110) = 0x025a022f
[0x4022d1] memchr("\n#else /* not SYNTAX_TABLE */\n\n/"..., '\n', 80) = 0x025a0230
[0x4022d1] memchr("#else /* not SYNTAX_TABLE */\n\n/*"..., '\n', 79) = 0x025a024d
[0x4022d1] memchr("\n/* How many characters in the c"..., '\n', 50) = 0x025a024e
[0x4022d1] memchr("/* How many characters in the ch"..., '\n', 49) = 0x025a027f
[0x4022d1] memchr("#define CHAR_SET_SIZE 256\n\nstati"..., '\n', 0) = NULL
[0x4023cc] fwrite("1695:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define CHAR_SET_SIZE 256\n\nstati"..., 1, 26, 0x7f498147f260) = 26
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nstatic char re_syntax_table[CHA"..., 'I', 23903) = 0x025a02c1
[0x40cdf3] memchr("IZE];\n\nstatic void\ninit_syntax_o"..., '\n', 23864) = 0x025a02c6
[0x4022d1] memchr("\nstatic char re_syntax_table[CHA"..., '\n', 1) = 0x025a029a
[0x4022d1] memchr("static char re_syntax_table[CHAR"..., '\n', 0) = NULL
[0x4023cc] fwrite("1697:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("static char re_syntax_table[CHAR"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nstatic void\ninit_syntax_once ()"..., 'I', 23858) = 0x025a05c3
[0x40cdf3] memchr("II (SGI's IRIX-4.0.5 is one such"..., '\n', 23094) = 0x025a05f1
[0x4022d1] memchr("\nstatic void\ninit_syntax_once ()"..., '\n', 741) = 0x025a02c7
[0x4022d1] memchr("static void\ninit_syntax_once ()\n"..., '\n', 740) = 0x025a02d3
[0x4022d1] memchr("init_syntax_once ()\n{\n   registe"..., '\n', 728) = 0x025a02e7
[0x4022d1] memchr("{\n   register int c;\n   static i"..., '\n', 708) = 0x025a02e9
[0x4022d1] memchr("   register int c;\n   static int"..., '\n', 706) = 0x025a02fc
[0x4022d1] memchr("   static int done = 0;\n\n   if ("..., '\n', 687) = 0x025a0314
[0x4022d1] memchr("\n   if (done)\n     return;\n\n   b"..., '\n', 663) = 0x025a0315
[0x4022d1] memchr("   if (done)\n     return;\n\n   bz"..., '\n', 662) = 0x025a0322
[0x4022d1] memchr("     return;\n\n   bzero (re_synta"..., '\n', 649) = 0x025a032f
[0x4022d1] memchr("\n   bzero (re_syntax_table, size"..., '\n', 636) = 0x025a0330
[0x4022d1] memchr("   bzero (re_syntax_table, sizeo"..., '\n', 635) = 0x025a0364
[0x4022d1] memchr("\n   for (c = 'a'; c <= 'z'; c++)"..., '\n', 583) = 0x025a0365
[0x4022d1] memchr("   for (c = 'a'; c <= 'z'; c++)\n"..., '\n', 582) = 0x025a0385
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 550) = 0x025a03a6
[0x4022d1] memchr("\n   for (c = 'A'; c <= 'Z'; c++)"..., '\n', 517) = 0x025a03a7
[0x4022d1] memchr("   for (c = 'A'; c <= 'Z'; c++)\n"..., '\n', 516) = 0x025a03c7
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 484) = 0x025a03e8
[0x4022d1] memchr("\n   for (c = '0'; c <= '9'; c++)"..., '\n', 451) = 0x025a03e9
[0x4022d1] memchr("   for (c = '0'; c <= '9'; c++)\n"..., '\n', 450) = 0x025a0409
[0x4022d1] memchr("     re_syntax_table[c] = Sword;"..., '\n', 418) = 0x025a042a
[0x4022d1] memchr("\n   re_syntax_table['_'] = Sword"..., '\n', 385) = 0x025a042b
[0x4022d1] memchr("   re_syntax_table['_'] = Sword;"..., '\n', 384) = 0x025a044c
[0x4022d1] memchr("\n   done = 1;\n}\n\n#endif /* not S"..., '\n', 351) = 0x025a044d
[0x4022d1] memchr("   done = 1;\n}\n\n#endif /* not SY"..., '\n', 350) = 0x025a045a
[0x4022d1] memchr("}\n\n#endif /* not SYNTAX_TABLE */"..., '\n', 337) = 0x025a045c
[0x4022d1] memchr("\n#endif /* not SYNTAX_TABLE */\n\n"..., '\n', 335) = 0x025a045d
[0x4022d1] memchr("#endif /* not SYNTAX_TABLE */\n\n#"..., '\n', 334) = 0x025a047b
[0x4022d1] memchr("\n#define SYNTAX(c) re_syntax_tab"..., '\n', 304) = 0x025a047c
[0x4022d1] memchr("#define SYNTAX(c) re_syntax_tabl"..., '\n', 303) = 0x025a04a1
[0x4022d1] memchr("\n#endif /* not emacs */\n\014\n/* Get"..., '\n', 266) = 0x025a04a2
[0x4022d1] memchr("#endif /* not emacs */\n\014\n/* Get "..., '\n', 265) = 0x025a04b9
[0x4022d1] memchr("\014\n/* Get the interface, includin"..., '\n', 242) = 0x025a04bb
[0x4022d1] memchr("/* Get the interface, including "..., '\n', 240) = 0x025a04f0
[0x4022d1] memchr("#include "regex.h"\n\n/* isalpha e"..., '\n', 187) = 0x025a0503
[0x4022d1] memchr("\n/* isalpha etc. are used for th"..., '\n', 168) = 0x025a0504
[0x4022d1] memchr("/* isalpha etc. are used for the"..., '\n', 167) = 0x025a053c
[0x4022d1] memchr("#include <ctype.h>\n\n/* Jim Meyer"..., '\n', 111) = 0x025a054f
[0x4022d1] memchr("\n/* Jim Meyering writes:\n\n   ".."..., '\n', 92) = 0x025a0550
[0x4022d1] memchr("/* Jim Meyering writes:\n\n   "..."..., '\n', 91) = 0x025a0568
[0x4022d1] memchr("\n   "... Some ctype macros are v"..., '\n', 67) = 0x025a0569
[0x4022d1] memchr("   "... Some ctype macros are va"..., '\n', 66) = 0x025a05ab
[0x4022d1] memchr("   isascii says are ASCII (SGI's"..., '\n', 0) = NULL
[0x4023cc] fwrite("1739:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   isascii says are ASCII (SGI's"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   using /bin/cc or gcc but with"..., 'I', 23047) = 0x025a0663
[0x40cdf3] memchr("ISPRINT...  If\n   STDC_HEADERS i"..., '\n', 22934) = 0x025a0671
[0x4022d1] memchr("   using /bin/cc or gcc but with"..., '\n', 69) = 0x025a0636
[0x4022d1] memchr("   ctype uses should be through "..., '\n', 0) = NULL
[0x4023cc] fwrite("1741:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   ctype uses should be through "..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   STDC_HEADERS is defined, then"..., 'I', 22919) = 0x025a07e3
[0x40cdf3] memchr("ISBLANK(c) (isascii (c) && isbla"..., '\n', 22550) = 0x025a080a
[0x4022d1] memchr("   STDC_HEADERS is defined, then"..., '\n', 361) = 0x025a06b7
[0x4022d1] memchr("   macros don't need to be guard"..., '\n', 291) = 0x025a06fa
[0x4022d1] memchr("   Defining isascii to 1 should "..., '\n', 224) = 0x025a073a
[0x4022d1] memchr("   eliminate the && through cons"..., '\n', 160) = 0x025a076d
[0x4022d1] memchr("#if ! defined (isascii) || defin"..., '\n', 109) = 0x025a079f
[0x4022d1] memchr("#undef isascii\n#define isascii(c"..., '\n', 59) = 0x025a07ae
[0x4022d1] memchr("#define isascii(c) 1\n#endif\n\n#if"..., '\n', 44) = 0x025a07c3
[0x4022d1] memchr("#endif\n\n#ifdef isblank\n#define I"..., '\n', 23) = 0x025a07ca
[0x4022d1] memchr("\n#ifdef isblank\n#define ISBLANK("..., '\n', 16) = 0x025a07cb
[0x4022d1] memchr("#ifdef isblank\n#define ISBLANK(c"..., '\n', 15) = 0x025a07da
[0x4022d1] memchr("#define ISBLANK(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1752:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISBLANK(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define ISBLANK(c) ((c) =="..., 'I', 22510) = 0x025a0819
[0x40cdf3] memchr("ISBLANK(c) ((c) == ' ' || (c) =="..., '\n', 22496) = 0x025a083f
[0x4022d1] memchr("#else\n#define ISBLANK(c) ((c) =="..., '\n', 6) = 0x025a0810
[0x4022d1] memchr("#define ISBLANK(c) ((c) == ' ' |"..., '\n', 0) = NULL
[0x4023cc] fwrite("1754:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISBLANK(c) ((c) == ' ' |"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n#ifdef isgraph\n#define IS"..., 'I', 22457) = 0x025a085e
[0x40cdf3] memchr("ISGRAPH(c) (isascii (c) && isgra"..., '\n', 22427) = 0x025a0885
[0x4022d1] memchr("#endif\n#ifdef isgraph\n#define IS"..., '\n', 22) = 0x025a0846
[0x4022d1] memchr("#ifdef isgraph\n#define ISGRAPH(c"..., '\n', 15) = 0x025a0855
[0x4022d1] memchr("#define ISGRAPH(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1757:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISGRAPH(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define ISGRAPH(c) (isasci"..., 'I', 22387) = 0x025a0894
[0x40cdf3] memchr("ISGRAPH(c) (isascii (c) && ispri"..., '\n', 22373) = 0x025a08cb
[0x4022d1] memchr("#else\n#define ISGRAPH(c) (isasci"..., '\n', 6) = 0x025a088b
[0x4022d1] memchr("#define ISGRAPH(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1759:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISGRAPH(c) (isascii (c) "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n#define ISPRINT(c) (isas"..., 'I', 22317) = 0x025a08dc
[0x40cdf3] memchr("ISPRINT(c) (isascii (c) && ispri"..., '\n', 22301) = 0x025a0903
[0x4022d1] memchr("#endif\n\n#define ISPRINT(c) (isas"..., '\n', 8) = 0x025a08d2
[0x4022d1] memchr("\n#define ISPRINT(c) (isascii (c)"..., '\n', 1) = 0x025a08d3
[0x4022d1] memchr("#define ISPRINT(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1762:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPRINT(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISDIGIT(c) (isascii (c) "..., 'I', 22261) = 0x025a090c
[0x40cdf3] memchr("ISDIGIT(c) (isascii (c) && isdig"..., '\n', 22253) = 0x025a0933
[0x4022d1] memchr("#define ISDIGIT(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1763:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISDIGIT(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISALNUM(c) (isascii (c) "..., 'I', 22213) = 0x025a093c
[0x40cdf3] memchr("ISALNUM(c) (isascii (c) && isaln"..., '\n', 22205) = 0x025a0963
[0x4022d1] memchr("#define ISALNUM(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1764:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALNUM(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISALPHA(c) (isascii (c) "..., 'I', 22165) = 0x025a096c
[0x40cdf3] memchr("ISALPHA(c) (isascii (c) && isalp"..., '\n', 22157) = 0x025a0993
[0x4022d1] memchr("#define ISALPHA(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1765:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALPHA(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISCNTRL(c) (isascii (c) "..., 'I', 22117) = 0x025a099c
[0x40cdf3] memchr("ISCNTRL(c) (isascii (c) && iscnt"..., '\n', 22109) = 0x025a09c3
[0x4022d1] memchr("#define ISCNTRL(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1766:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISCNTRL(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISLOWER(c) (isascii (c) "..., 'I', 22069) = 0x025a09cc
[0x40cdf3] memchr("ISLOWER(c) (isascii (c) && islow"..., '\n', 22061) = 0x025a09f3
[0x4022d1] memchr("#define ISLOWER(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1767:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISLOWER(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISPUNCT(c) (isascii (c) "..., 'I', 22021) = 0x025a09fc
[0x40cdf3] memchr("ISPUNCT(c) (isascii (c) && ispun"..., '\n', 22013) = 0x025a0a23
[0x4022d1] memchr("#define ISPUNCT(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1768:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPUNCT(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISSPACE(c) (isascii (c) "..., 'I', 21973) = 0x025a0a2c
[0x40cdf3] memchr("ISSPACE(c) (isascii (c) && isspa"..., '\n', 21965) = 0x025a0a53
[0x4022d1] memchr("#define ISSPACE(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1769:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISSPACE(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISUPPER(c) (isascii (c) "..., 'I', 21925) = 0x025a0a5c
[0x40cdf3] memchr("ISUPPER(c) (isascii (c) && isupp"..., '\n', 21917) = 0x025a0a83
[0x4022d1] memchr("#define ISUPPER(c) (isascii (c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("1770:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISUPPER(c) (isascii (c) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISXDIGIT(c) (isascii (c)"..., 'I', 21877) = 0x025a0a8c
[0x40cdf3] memchr("ISXDIGIT(c) (isascii (c) && isxd"..., '\n', 21869) = 0x025a0ab5
[0x4022d1] memchr("#define ISXDIGIT(c) (isascii (c)"..., '\n', 0) = NULL
[0x4023cc] fwrite("1771:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISXDIGIT(c) (isascii (c)"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#ifndef NULL\n#define NULL 0\n#en"..., 'I', 21827) = 0x025a0b05
[0x40cdf3] memchr("IGN_EXTEND_CHAR',\n   since ours "..., '\n', 21748) = 0x025a0b16
[0x4022d1] memchr("\n#ifndef NULL\n#define NULL 0\n#en"..., '\n', 37) = 0x025a0ab6
[0x4022d1] memchr("#ifndef NULL\n#define NULL 0\n#end"..., '\n', 36) = 0x025a0ac3
[0x4022d1] memchr("#define NULL 0\n#endif\n\n/* We rem"..., '\n', 23) = 0x025a0ad2
[0x4022d1] memchr("#endif\n\n/* We remove any previou"..., '\n', 8) = 0x025a0ad9
[0x4022d1] memchr("\n/* We remove any previous defin"..., '\n', 1) = 0x025a0ada
[0x4022d1] memchr("/* We remove any previous defini"..., '\n', 0) = NULL
[0x4023cc] fwrite("1777:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* We remove any previous defini"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   since ours (we hope) works pr"..., 'I', 21730) = 0x025a0bd5
[0x40cdf3] memchr("IGN_EXTEND_CHAR\n#if __STDC__\n#de"..., '\n', 21540) = 0x025a0be4
[0x4022d1] memchr("   since ours (we hope) works pr"..., '\n', 182) = 0x025a0b56
[0x4022d1] memchr("   machines, compilers, `char' a"..., '\n', 118) = 0x025a0b99
[0x4022d1] memchr("   (Per Bothner suggested the ba"..., '\n', 51) = 0x025a0bcc
[0x4022d1] memchr("#undef SIGN_EXTEND_CHAR\n#if __ST"..., '\n', 0) = NULL
[0x4023cc] fwrite("1781:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef SIGN_EXTEND_CHAR\n#if __ST"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if __STDC__\n#define SIGN_EXTEND"..., 'I', 21524) = 0x025a0bfb
[0x40cdf3] memchr("IGN_EXTEND_CHAR(c) ((signed char"..., '\n', 21502) = 0x025a0c21
[0x4022d1] memchr("#if __STDC__\n#define SIGN_EXTEND"..., '\n', 13) = 0x025a0bf1
[0x4022d1] memchr("#define SIGN_EXTEND_CHAR(c) ((si"..., '\n', 0) = NULL
[0x4023cc] fwrite("1783:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define SIGN_EXTEND_CHAR(c) ((si"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else  /* not __STDC__ */\n/* As "..., 'I', 21463) = 0x025a0c67
[0x40cdf3] memchr("IGN_EXTEND_CHAR(c) ((((unsigned "..., '\n', 21394) = 0x025a0c9f
[0x4022d1] memchr("#else  /* not __STDC__ */\n/* As "..., '\n', 60) = 0x025a0c3b
[0x4022d1] memchr("/* As in Harbison and Steele.  *"..., '\n', 34) = 0x025a0c5d
[0x4022d1] memchr("#define SIGN_EXTEND_CHAR(c) (((("..., '\n', 0) = NULL
[0x4023cc] fwrite("1786:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define SIGN_EXTEND_CHAR(c) (((("..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\014\n/* Should we use malloc"..., 'I', 21337) = 0x025a0ccd
[0x40cdf3] memchr("If REGEX_MALLOC is not defined, "..., '\n', 21292) = 0x025a0cef
[0x4022d1] memchr("#endif\n\014\n/* Should we use malloc"..., '\n', 9) = 0x025a0ca6
[0x4022d1] memchr("\014\n/* Should we use malloc or all"..., '\n', 2) = 0x025a0ca8
[0x4022d1] memchr("/* Should we use malloc or alloc"..., '\n', 0) = NULL
[0x4023cc] fwrite("1789:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Should we use malloc or alloc"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   use `alloca' instead of `mall"..., 'I', 21257) = 0x025a109a
[0x40cdf3] memchr("IX /* Already did AIX, up at the"..., '\n', 20319) = 0x025a10c3
[0x4022d1] memchr("   use `alloca' instead of `mall"..., '\n', 928) = 0x025a0d35
[0x4022d1] memchr("   re_search* or re_match* could"..., '\n', 858) = 0x025a0d7d
[0x4022d1] memchr("   Emacs; also, malloc is slower"..., '\n', 786) = 0x025a0dc4
[0x4022d1] memchr("   the other hand, malloc is mor"..., '\n', 715) = 0x025a0e07
[0x4022d1] memchr("   \n   Because we sometimes use "..., '\n', 648) = 0x025a0e0b
[0x4022d1] memchr("   Because we sometimes use allo"..., '\n', 644) = 0x025a0e50
[0x4022d1] memchr("   not functions -- `alloca'-all"..., '\n', 575) = 0x025a0e9a
[0x4022d1] memchr("   function it is called in.  */"..., '\n', 501) = 0x025a0ebb
[0x4022d1] memchr("\n#ifdef REGEX_MALLOC\n\n#define RE"..., '\n', 468) = 0x025a0ebc
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n\n#define REG"..., '\n', 467) = 0x025a0ed0
[0x4022d1] memchr("\n#define REGEX_ALLOCATE malloc\n#"..., '\n', 447) = 0x025a0ed1
[0x4022d1] memchr("#define REGEX_ALLOCATE malloc\n#d"..., '\n', 446) = 0x025a0eef
[0x4022d1] memchr("#define REGEX_REALLOCATE(source,"..., '\n', 416) = 0x025a0f36
[0x4022d1] memchr("\n#else /* not REGEX_MALLOC  */\n\n"..., '\n', 345) = 0x025a0f37
[0x4022d1] memchr("#else /* not REGEX_MALLOC  */\n\n/"..., '\n', 344) = 0x025a0f55
[0x4022d1] memchr("\n/* Emacs already defines alloca"..., '\n', 314) = 0x025a0f56
[0x4022d1] memchr("/* Emacs already defines alloca,"..., '\n', 313) = 0x025a0f86
[0x4022d1] memchr("#ifndef alloca\n\n/* Make alloca w"..., '\n', 265) = 0x025a0f95
[0x4022d1] memchr("\n/* Make alloca work the best po"..., '\n', 250) = 0x025a0f96
[0x4022d1] memchr("/* Make alloca work the best pos"..., '\n', 249) = 0x025a0fc5
[0x4022d1] memchr("#ifdef __GNUC__\n#define alloca _"..., '\n', 202) = 0x025a0fd5
[0x4022d1] memchr("#define alloca __builtin_alloca\n"..., '\n', 186) = 0x025a0ff5
[0x4022d1] memchr("#else /* not __GNUC__ */\n#if HAV"..., '\n', 154) = 0x025a100e
[0x4022d1] memchr("#if HAVE_ALLOCA_H\n#if flag_alloc"..., '\n', 129) = 0x025a1020
[0x4022d1] memchr("#if flag_alloca==0\n#include <all"..., '\n', 111) = 0x025a1033
[0x4022d1] memchr("#include <alloca.h>\n#define flag"..., '\n', 92) = 0x025a1047
[0x4022d1] memchr("#define flag_alloca 1\n#endif \n#e"..., '\n', 72) = 0x025a105d
[0x4022d1] memchr("#endif \n#else /* not __GNUC__ or"..., '\n', 50) = 0x025a1065
[0x4022d1] memchr("#else /* not __GNUC__ or HAVE_AL"..., '\n', 42) = 0x025a108f
[0x4022d1] memchr("#ifndef _AIX /* Already did AIX,"..., '\n', 0) = NULL
[0x4023cc] fwrite("1819:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifndef _AIX /* Already did AIX,"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("char *alloca ();\n#endif /* not _"..., 'I', 20277) = 0x025a10e5
[0x40cdf3] memchr("IX */\n#endif /* not HAVE_ALLOCA_"..., '\n', 20244) = 0x025a10ea
[0x4022d1] memchr("char *alloca ();\n#endif /* not _"..., '\n', 17) = 0x025a10d4
[0x4022d1] memchr("#endif /* not _AIX */\n#endif /* "..., '\n', 0) = NULL
[0x4023cc] fwrite("1821:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#endif /* not _AIX */\n#endif /* "..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif /* not HAVE_ALLOCA_H */ \n"..., 'I', 20238) = 0x025a12f7
[0x40cdf3] memchr("IRST_STRING_P(ptr) \t\t\t\t\t\\\n  (siz"..., '\n', 19714) = 0x025a1310
[0x4022d1] memchr("#endif /* not HAVE_ALLOCA_H */ \n"..., '\n', 515) = 0x025a110a
[0x4022d1] memchr("#endif /* not __GNUC__ */\n\n#endi"..., '\n', 483) = 0x025a1124
[0x4022d1] memchr("\n#endif /* not alloca */\n\n#defin"..., '\n', 457) = 0x025a1125
[0x4022d1] memchr("#endif /* not alloca */\n\n#define"..., '\n', 456) = 0x025a113d
[0x4022d1] memchr("\n#define REGEX_ALLOCATE alloca\n\n"..., '\n', 432) = 0x025a113e
[0x4022d1] memchr("#define REGEX_ALLOCATE alloca\n\n/"..., '\n', 431) = 0x025a115c
[0x4022d1] memchr("\n/* Assumes a `char *destination"..., '\n', 401) = 0x025a115d
[0x4022d1] memchr("/* Assumes a `char *destination'"..., '\n', 400) = 0x025a118c
[0x4022d1] memchr("#define REGEX_REALLOCATE(source,"..., '\n', 353) = 0x025a11c0
[0x4022d1] memchr("  (destination = (char *) alloca"..., '\n', 301) = 0x025a11ef
[0x4022d1] memchr("   bcopy (source, destination, o"..., '\n', 254) = 0x025a121c
[0x4022d1] memchr("   destination)\n\n#endif /* not R"..., '\n', 209) = 0x025a122c
[0x4022d1] memchr("\n#endif /* not REGEX_MALLOC */\n\n"..., '\n', 193) = 0x025a122d
[0x4022d1] memchr("#endif /* not REGEX_MALLOC */\n\n\n"..., '\n', 192) = 0x025a124b
[0x4022d1] memchr("\n\n/* True if `size1' is non-NULL"..., '\n', 162) = 0x025a124c
[0x4022d1] memchr("\n/* True if `size1' is non-NULL "..., '\n', 161) = 0x025a124d
[0x4022d1] memchr("/* True if `size1' is non-NULL a"..., '\n', 160) = 0x025a1290
[0x4022d1] memchr("   `string1' or just past its en"..., '\n', 93) = 0x025a12d8
[0x4022d1] memchr("   a good thing.  */\n#define FIR"..., '\n', 21) = 0x025a12ed
[0x4022d1] memchr("#define FIRST_STRING_P(ptr) \t\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("1841:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FIRST_STRING_P(ptr) \t\t\t\t"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  (size1 && string1 <= (ptr) && "..., 'I', 19688) = 0x025a1462
[0x40cdf3] memchr("IDTH 8 /* In bits.  */\n\n#define "..., '\n', 19351) = 0x025a1478
[0x4022d1] memchr("  (size1 && string1 <= (ptr) && "..., '\n', 324) = 0x025a134a
[0x4022d1] memchr("\n/* (Re)Allocate N items of type"..., '\n', 266) = 0x025a134b
[0x4022d1] memchr("/* (Re)Allocate N items of type "..., '\n', 265) = 0x025a1388
[0x4022d1] memchr("#define TALLOC(n, t) ((t *) mall"..., '\n', 204) = 0x025a13bf
[0x4022d1] memchr("#define RETALLOC(addr, n, t) ((a"..., '\n', 149) = 0x025a140e
[0x4022d1] memchr("#define REGEX_TALLOC(n, t) ((t *"..., '\n', 70) = 0x025a1453
[0x4022d1] memchr("\n#define BYTEWIDTH 8 /* In bits."..., '\n', 1) = 0x025a1454
[0x4022d1] memchr("#define BYTEWIDTH 8 /* In bits. "..., '\n', 0) = NULL
[0x4023cc] fwrite("1849:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define BYTEWIDTH 8 /* In bits. "..., 1, 36, 0x7f498147f260) = 36
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#define STREQ(s1, s2) ((strcmp "..., 'I', 19328) = 0x025a1513
[0x40cdf3] memchr("IN(a, b) ((a) < (b) ? (a) : (b))"..., '\n', 19174) = 0x025a1533
[0x4022d1] memchr("\n#define STREQ(s1, s2) ((strcmp "..., '\n', 145) = 0x025a1479
[0x4022d1] memchr("#define STREQ(s1, s2) ((strcmp ("..., '\n', 144) = 0x025a14a8
[0x4022d1] memchr("\n#undef MAX               /*****"..., '\n', 97) = 0x025a14a9
[0x4022d1] memchr("#undef MAX               /******"..., '\n', 96) = 0x025a14df
[0x4022d1] memchr("#define MAX(a, b) ((a) > (b) ? ("..., '\n', 42) = 0x025a1509
[0x4022d1] memchr("#define MIN(a, b) ((a) < (b) ? ("..., '\n', 0) = NULL
[0x4023cc] fwrite("1855:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define MIN(a, b) ((a) < (b) ? ("..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\ntypedef char boolean;\n#define f"..., 'I', 19141) = 0x025a2292
[0x40cdf3] memchr("If what follows this jump\n      "..., '\n', 15719) = 0x025a22ab
[0x4022d1] memchr("\ntypedef char boolean;\n#define f"..., '\n', 3375) = 0x025a1534
[0x4022d1] memchr("typedef char boolean;\n#define fa"..., '\n', 3374) = 0x025a154a
[0x4022d1] memchr("#define false 0\n#define true 1\n\014"..., '\n', 3352) = 0x025a155a
[0x4022d1] memchr("#define true 1\n\014\n/* These are th"..., '\n', 3336) = 0x025a1569
[0x4022d1] memchr("\014\n/* These are the command codes"..., '\n', 3321) = 0x025a156b
[0x4022d1] memchr("/* These are the command codes t"..., '\n', 3319) = 0x025a15aa
[0x4022d1] memchr("   expressions.  Some opcodes ar"..., '\n', 3256) = 0x025a15eb
[0x4022d1] memchr("   command code can specify any "..., '\n', 3191) = 0x025a162d
[0x4022d1] memchr("   arguments.  Zero bytes may ap"..., '\n', 3125) = 0x025a1676
[0x4022d1] memchr("\n   The value of `exactn' is nee"..., '\n', 3052) = 0x025a1677
[0x4022d1] memchr("   The value of `exactn' is need"..., '\n', 3051) = 0x025a16c0
[0x4022d1] memchr("   So regex.h defines a symbol `"..., '\n', 2978) = 0x025a1707
[0x4022d1] memchr("   `exactn' we use here must als"..., '\n', 2907) = 0x025a1733
[0x4022d1] memchr("\ntypedef enum\n{\n  no_op = 0,\n\n  "..., '\n', 2863) = 0x025a1734
[0x4022d1] memchr("typedef enum\n{\n  no_op = 0,\n\n   "..., '\n', 2862) = 0x025a1741
[0x4022d1] memchr("{\n  no_op = 0,\n\n        /* Follo"..., '\n', 2849) = 0x025a1743
[0x4022d1] memchr("  no_op = 0,\n\n        /* Followe"..., '\n', 2847) = 0x025a1750
[0x4022d1] memchr("\n        /* Followed by one byte"..., '\n', 2834) = 0x025a1751
[0x4022d1] memchr("        /* Followed by one byte "..., '\n', 2833) = 0x025a1798
[0x4022d1] memchr("  exactn = 1,\n\n        /* Matche"..., '\n', 2762) = 0x025a17a6
[0x4022d1] memchr("\n        /* Matches any (more or"..., '\n', 2748) = 0x025a17a7
[0x4022d1] memchr("        /* Matches any (more or "..., '\n', 2747) = 0x025a17dc
[0x4022d1] memchr("  anychar,\n\n        /* Matches a"..., '\n', 2694) = 0x025a17e7
[0x4022d1] memchr("\n        /* Matches any one char"..., '\n', 2683) = 0x025a17e8
[0x4022d1] memchr("        /* Matches any one char "..., '\n', 2682) = 0x025a182b
[0x4022d1] memchr("           following byte is num"..., '\n', 2615) = 0x025a1871
[0x4022d1] memchr("           for a bitmap saying w"..., '\n', 2545) = 0x025a18b7
[0x4022d1] memchr("           are ordered low-bit-f"..., '\n', 2475) = 0x025a18ff
[0x4022d1] memchr("           bit is 1.  A characte"..., '\n', 2403) = 0x025a1947
[0x4022d1] memchr("           automatically not in "..., '\n', 2331) = 0x025a1974
[0x4022d1] memchr("  charset,\n\n        /* Same para"..., '\n', 2286) = 0x025a197f
[0x4022d1] memchr("\n        /* Same parameters as c"..., '\n', 2275) = 0x025a1980
[0x4022d1] memchr("        /* Same parameters as ch"..., '\n', 2274) = 0x025a19c7
[0x4022d1] memchr("           not one of those spec"..., '\n', 2203) = 0x025a19f2
[0x4022d1] memchr("  charset_not,\n\n        /* Start"..., '\n', 2160) = 0x025a1a01
[0x4022d1] memchr("\n        /* Start remembering th"..., '\n', 2145) = 0x025a1a02
[0x4022d1] memchr("        /* Start remembering the"..., '\n', 2144) = 0x025a1a4a
[0x4022d1] memchr("           register.  Followed b"..., '\n', 2072) = 0x025a1a92
[0x4022d1] memchr("           the range 0 to one le"..., '\n', 2000) = 0x025a1ad7
[0x4022d1] memchr("           field.  Then followed"..., '\n', 1931) = 0x025a1b1e
[0x4022d1] memchr("           inner to this one.  ("..., '\n', 1860) = 0x025a1b5e
[0x4022d1] memchr("           start_memory only bec"..., '\n', 1796) = 0x025a1ba5
[0x4022d1] memchr("           of re_match_2.)  */\n "..., '\n', 1725) = 0x025a1bc4
[0x4022d1] memchr("  start_memory,\n\n        /* Stop"..., '\n', 1694) = 0x025a1bd4
[0x4022d1] memchr("\n        /* Stop remembering the"..., '\n', 1678) = 0x025a1bd5
[0x4022d1] memchr("        /* Stop remembering the "..., '\n', 1677) = 0x025a1c1c
[0x4022d1] memchr("           memory register.  Fol"..., '\n', 1606) = 0x025a1c60
[0x4022d1] memchr("           number, in the range "..., '\n', 1538) = 0x025a1ca4
[0x4022d1] memchr("           pattern buffer, and o"..., '\n', 1470) = 0x025a1ced
[0x4022d1] memchr("           just like `start_memo"..., '\n', 1397) = 0x025a1d30
[0x4022d1] memchr("           groups here because w"..., '\n', 1330) = 0x025a1d79
[0x4022d1] memchr("           corresponding start_m"..., '\n', 1257) = 0x025a1dc1
[0x4022d1] memchr("  stop_memory,\n\n        /* Match"..., '\n', 1185) = 0x025a1dd0
[0x4022d1] memchr("\n        /* Match a duplicate of"..., '\n', 1170) = 0x025a1dd1
[0x4022d1] memchr("        /* Match a duplicate of "..., '\n', 1169) = 0x025a1e17
[0x4022d1] memchr("           byte containing the r"..., '\n', 1099) = 0x025a1e4b
[0x4022d1] memchr("  duplicate,\n\n        /* Fail un"..., '\n', 1047) = 0x025a1e58
[0x4022d1] memchr("\n        /* Fail unless at begin"..., '\n', 1034) = 0x025a1e59
[0x4022d1] memchr("        /* Fail unless at beginn"..., '\n', 1033) = 0x025a1e8a
[0x4022d1] memchr("  begline,\n\n        /* Fail unle"..., '\n', 984) = 0x025a1e95
[0x4022d1] memchr("\n        /* Fail unless at end o"..., '\n', 973) = 0x025a1e96
[0x4022d1] memchr("        /* Fail unless at end of"..., '\n', 972) = 0x025a1ec1
[0x4022d1] memchr("  endline,\n\n        /* Succeeds "..., '\n', 929) = 0x025a1ecc
[0x4022d1] memchr("\n        /* Succeeds if at begin"..., '\n', 918) = 0x025a1ecd
[0x4022d1] memchr("        /* Succeeds if at beginn"..., '\n', 917) = 0x025a1f16
[0x4022d1] memchr("           of string to be match"..., '\n', 844) = 0x025a1f47
[0x4022d1] memchr("  begbuf,\n\n        /* Analogousl"..., '\n', 795) = 0x025a1f51
[0x4022d1] memchr("\n        /* Analogously, for end"..., '\n', 785) = 0x025a1f52
[0x4022d1] memchr("        /* Analogously, for end "..., '\n', 784) = 0x025a1f88
[0x4022d1] memchr("  endbuf,\n \n        /* Followed "..., '\n', 730) = 0x025a1f92
[0x4022d1] memchr(" \n        /* Followed by two byt"..., '\n', 720) = 0x025a1f94
[0x4022d1] memchr("        /* Followed by two byte "..., '\n', 718) = 0x025a1fdb
[0x4022d1] memchr("  jump, \n\n\t/* Same as jump, but "..., '\n', 647) = 0x025a1fe4
[0x4022d1] memchr("\n\t/* Same as jump, but marks the"..., '\n', 638) = 0x025a1fe5
[0x4022d1] memchr("\t/* Same as jump, but marks the "..., '\n', 637) = 0x025a2020
[0x4022d1] memchr("  jump_past_alt,\n\n        /* Fol"..., '\n', 578) = 0x025a2031
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 561) = 0x025a2032
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 560) = 0x025a2079
[0x4022d1] memchr("           in case of failure.  "..., '\n', 489) = 0x025a209c
[0x4022d1] memchr("  on_failure_jump,\n\t\n        /* "..., '\n', 454) = 0x025a20af
[0x4022d1] memchr("\t\n        /* Like on_failure_jum"..., '\n', 435) = 0x025a20b1
[0x4022d1] memchr("        /* Like on_failure_jump,"..., '\n', 433) = 0x025a20fa
[0x4022d1] memchr("           current string positi"..., '\n', 360) = 0x025a2130
[0x4022d1] memchr("  on_failure_keep_string_jump,\n "..., '\n', 306) = 0x025a214f
[0x4022d1] memchr("  \n        /* Throw away latest "..., '\n', 275) = 0x025a2152
[0x4022d1] memchr("        /* Throw away latest fai"..., '\n', 272) = 0x025a2198
[0x4022d1] memchr("           two-byte relative add"..., '\n', 202) = 0x025a21c2
[0x4022d1] memchr("  pop_failure_jump,\n\n        /* "..., '\n', 160) = 0x025a21d6
[0x4022d1] memchr("\n        /* Change to pop_failur"..., '\n', 140) = 0x025a21d7
[0x4022d1] memchr("        /* Change to pop_failure"..., '\n', 139) = 0x025a2220
[0x4022d1] memchr("           match; otherwise chan"..., '\n', 66) = 0x025a2262
[0x4022d1] memchr("           back to the beginning"..., '\n', 0) = NULL
[0x4023cc] fwrite("1947:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("           back to the beginning"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("           clearly won't match w"..., 'I', 15693) = 0x025a2acd
[0x40cdf3] memchr("INATION.  */\n\n#define STORE_NUMB"..., '\n', 13612) = 0x025a2ad9
[0x4022d1] memchr("           clearly won't match w"..., '\n', 2025) = 0x025a22f4
[0x4022d1] memchr("           sure that there is no"..., '\n', 1952) = 0x025a2339
[0x4022d1] memchr("           already matched, then"..., '\n', 1883) = 0x025a237e
[0x4022d1] memchr("           Followed by two-byte "..., '\n', 1814) = 0x025a23ab
[0x4022d1] memchr("  maybe_pop_jump,\n\n        /* Ju"..., '\n', 1769) = 0x025a23bd
[0x4022d1] memchr("\n        /* Jump to following tw"..., '\n', 1751) = 0x025a23be
[0x4022d1] memchr("        /* Jump to following two"..., '\n', 1750) = 0x025a2406
[0x4022d1] memchr("           point. This failure p"..., '\n', 1678) = 0x025a244d
[0x4022d1] memchr("           is made to use it for"..., '\n', 1607) = 0x025a2495
[0x4022d1] memchr("           before the first repe"..., '\n', 1535) = 0x025a24dc
[0x4022d1] memchr("           of jump when compilin"..., '\n', 1464) = 0x025a2512
[0x4022d1] memchr("  dummy_failure_jump,\n\n\t/* Push "..., '\n', 1410) = 0x025a2528
[0x4022d1] memchr("\n\t/* Push a dummy failure point "..., '\n', 1388) = 0x025a2529
[0x4022d1] memchr("\t/* Push a dummy failure point a"..., '\n', 1387) = 0x025a256a
[0x4022d1] memchr("\t   alternatives.  */\n  push_dum"..., '\n', 1322) = 0x025a2580
[0x4022d1] memchr("  push_dummy_failure,\n\n        /"..., '\n', 1300) = 0x025a2596
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 1278) = 0x025a2597
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 1277) = 0x025a25df
[0x4022d1] memchr("           After matching N time"..., '\n', 1205) = 0x025a2628
[0x4022d1] memchr("  succeed_n,\n\n        /* Followe"..., '\n', 1132) = 0x025a2635
[0x4022d1] memchr("\n        /* Followed by two-byte"..., '\n', 1119) = 0x025a2636
[0x4022d1] memchr("        /* Followed by two-byte "..., '\n', 1118) = 0x025a267f
[0x4022d1] memchr("           Jump to the address N"..., '\n', 1045) = 0x025a26b6
[0x4022d1] memchr("  jump_n,\n\n        /* Set the fo"..., '\n', 990) = 0x025a26c0
[0x4022d1] memchr("\n        /* Set the following tw"..., '\n', 980) = 0x025a26c1
[0x4022d1] memchr("        /* Set the following two"..., '\n', 979) = 0x025a26ff
[0x4022d1] memchr("           subsequent two-byte n"..., '\n', 917) = 0x025a2746
[0x4022d1] memchr("           bytes of number.  */\n"..., '\n', 846) = 0x025a2766
[0x4022d1] memchr("  set_number_at,\n\n  wordchar,\t/*"..., '\n', 814) = 0x025a2777
[0x4022d1] memchr("\n  wordchar,\t/* Matches any word"..., '\n', 797) = 0x025a2778
[0x4022d1] memchr("  wordchar,\t/* Matches any word-"..., '\n', 796) = 0x025a27b3
[0x4022d1] memchr("  notwordchar,\t/* Matches any ch"..., '\n', 737) = 0x025a27fa
[0x4022d1] memchr("\n  wordbeg,\t/* Succeeds if at wo"..., '\n', 666) = 0x025a27fb
[0x4022d1] memchr("  wordbeg,\t/* Succeeds if at wor"..., '\n', 665) = 0x025a282c
[0x4022d1] memchr("  wordend,\t/* Succeeds if at wor"..., '\n', 616) = 0x025a2857
[0x4022d1] memchr("\n  wordbound,\t/* Succeeds if at "..., '\n', 573) = 0x025a2858
[0x4022d1] memchr("  wordbound,\t/* Succeeds if at a"..., '\n', 572) = 0x025a288c
[0x4022d1] memchr("  notwordbound\t/* Succeeds if no"..., '\n', 520) = 0x025a28c6
[0x4022d1] memchr("\n#ifdef emacs\n  ,before_dot,\t/* "..., '\n', 462) = 0x025a28c7
[0x4022d1] memchr("#ifdef emacs\n  ,before_dot,\t/* S"..., '\n', 461) = 0x025a28d4
[0x4022d1] memchr("  ,before_dot,\t/* Succeeds if be"..., '\n', 448) = 0x025a2904
[0x4022d1] memchr("  at_dot,\t/* Succeeds if at poin"..., '\n', 400) = 0x025a292b
[0x4022d1] memchr("  after_dot,\t/* Succeeds if afte"..., '\n', 361) = 0x025a2958
[0x4022d1] memchr("\n\t/* Matches any character whose"..., '\n', 316) = 0x025a2959
[0x4022d1] memchr("\t/* Matches any character whose "..., '\n', 315) = 0x025a299b
[0x4022d1] memchr("           a byte which contains"..., '\n', 249) = 0x025a29dc
[0x4022d1] memchr("  syntaxspec,\n\n\t/* Matches any c"..., '\n', 184) = 0x025a29ea
[0x4022d1] memchr("\n\t/* Matches any character whose"..., '\n', 170) = 0x025a29eb
[0x4022d1] memchr("\t/* Matches any character whose "..., '\n', 169) = 0x025a2a2d
[0x4022d1] memchr("  notsyntaxspec\n#endif /* emacs "..., '\n', 103) = 0x025a2a3d
[0x4022d1] memchr("#endif /* emacs */\n} re_opcode_t"..., '\n', 87) = 0x025a2a50
[0x4022d1] memchr("} re_opcode_t;\n\014\n/* Common opera"..., '\n', 68) = 0x025a2a5f
[0x4022d1] memchr("\014\n/* Common operations on the co"..., '\n', 53) = 0x025a2a61
[0x4022d1] memchr("/* Common operations on the comp"..., '\n', 51) = 0x025a2a93
[0x4022d1] memchr("\n/* Store NUMBER in two contiguo"..., '\n', 1) = 0x025a2a94
[0x4022d1] memchr("/* Store NUMBER in two contiguou"..., '\n', 0) = NULL
[0x4023cc] fwrite("2003:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Store NUMBER in two contiguou"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#define STORE_NUMBER(destinatio"..., 'I', 13599) = 0x025a2bb2
[0x40cdf3] memchr("INATION to\n   the byte after whe"..., '\n', 13383) = 0x025a2bbc
[0x4022d1] memchr("\n#define STORE_NUMBER(destinatio"..., '\n', 170) = 0x025a2ada
[0x4022d1] memchr("#define STORE_NUMBER(destination"..., '\n', 169) = 0x025a2b09
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    (destinatio"..., '\n', 122) = 0x025a2b1a
[0x4022d1] memchr("    (destination)[0] = (number) "..., '\n', 105) = 0x025a2b48
[0x4022d1] memchr("    (destination)[1] = (number) "..., '\n', 59) = 0x025a2b74
[0x4022d1] memchr("  } while (0)\n\n/* Same as STORE_"..., '\n', 15) = 0x025a2b82
[0x4022d1] memchr("\n/* Same as STORE_NUMBER, except"..., '\n', 1) = 0x025a2b83
[0x4022d1] memchr("/* Same as STORE_NUMBER, except "..., '\n', 0) = NULL
[0x4023cc] fwrite("2011:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Same as STORE_NUMBER, except "..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   the byte after where the numb"..., 'I', 13372) = 0x025a2bfb
[0x40cdf3] memchr("INATION\n   must be an lvalue.  *"..., '\n', 13310) = 0x025a2c02
[0x4022d1] memchr("   the byte after where the numb"..., '\n', 0) = NULL
[0x4023cc] fwrite("2012:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   the byte after where the numb"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   must be an lvalue.  */\n\n#defi"..., 'I', 13302) = 0x025a2c37
[0x40cdf3] memchr("INCR(destination, number)\t\t\t\\\n  "..., '\n', 13250) = 0x025a2c54
[0x4022d1] memchr("   must be an lvalue.  */\n\n#defi"..., '\n', 27) = 0x025a2c1c
[0x4022d1] memchr("\n#define STORE_NUMBER_AND_INCR(d"..., '\n', 1) = 0x025a2c1d
[0x4022d1] memchr("#define STORE_NUMBER_AND_INCR(de"..., '\n', 0) = NULL
[0x4023cc] fwrite("2015:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define STORE_NUMBER_AND_INCR(de"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    STORE_NUMBE"..., 'I', 13220) = 0x025a2cd3
[0x40cdf3] memchr("INATION a number stored in two c"..., '\n', 13094) = 0x025a2d0b
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    STORE_NUMBE"..., '\n', 110) = 0x025a2c65
[0x4022d1] memchr("    STORE_NUMBER (destination, n"..., '\n', 93) = 0x025a2c93
[0x4022d1] memchr("    (destination) += 2;\t\t\t\t\t\t\t\\\n"..., '\n', 47) = 0x025a2cb3
[0x4022d1] memchr("  } while (0)\n\n/* Put into DESTI"..., '\n', 15) = 0x025a2cc1
[0x4022d1] memchr("\n/* Put into DESTINATION a numbe"..., '\n', 1) = 0x025a2cc2
[0x4022d1] memchr("/* Put into DESTINATION a number"..., '\n', 0) = NULL
[0x4023cc] fwrite("2021:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Put into DESTINATION a number"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   at SOURCE.  */\n\n#define EXTRA"..., 'I', 13037) = 0x025a2da3
[0x40cdf3] memchr("IGN_EXTEND_CHAR (*((source) + 1)"..., '\n', 12886) = 0x025a2dcd
[0x4022d1] memchr("   at SOURCE.  */\n\n#define EXTRA"..., '\n', 129) = 0x025a2d1d
[0x4022d1] memchr("\n#define EXTRACT_NUMBER(destinat"..., '\n', 111) = 0x025a2d1e
[0x4022d1] memchr("#define EXTRACT_NUMBER(destinati"..., '\n', 110) = 0x025a2d4f
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    (destinatio"..., '\n', 61) = 0x025a2d60
[0x4022d1] memchr("    (destination) = *(source) & "..., '\n', 44) = 0x025a2d8c
[0x4022d1] memchr("    (destination) += SIGN_EXTEND"..., '\n', 0) = NULL
[0x4023cc] fwrite("2027:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    (destination) += SIGN_EXTEND"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., 'I', 12843) = 0x025a2e4e
[0x40cdf3] memchr("IGN_EXTEND_CHAR (*(source + 1));"..., '\n', 12715) = 0x025a2e6f
[0x4022d1] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., '\n', 114) = 0x025a2ddb
[0x4022d1] memchr("\n#ifdef DEBUG\nstatic void\nextrac"..., '\n', 100) = 0x025a2ddc
[0x4022d1] memchr("#ifdef DEBUG\nstatic void\nextract"..., '\n', 99) = 0x025a2de9
[0x4022d1] memchr("static void\nextract_number (dest"..., '\n', 86) = 0x025a2df5
[0x4022d1] memchr("extract_number (dest, source)\n  "..., '\n', 74) = 0x025a2e13
[0x4022d1] memchr("    int *dest;\n    unsigned char"..., '\n', 44) = 0x025a2e22
[0x4022d1] memchr("    unsigned char *source;\n{\n  i"..., '\n', 29) = 0x025a2e3d
[0x4022d1] memchr("{\n  int temp = SIGN_EXTEND_CHAR "..., '\n', 2) = 0x025a2e3f
[0x4022d1] memchr("  int temp = SIGN_EXTEND_CHAR (*"..., '\n', 0) = NULL
[0x4023cc] fwrite("2036:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  int temp = SIGN_EXTEND_CHAR (*"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  *dest = *source & 0377;\n  *des"..., 'I', 12681) = 0x025a2fe4
[0x40cdf3] memchr("INCR(destination, source)\t\t\t\\\n  "..., '\n', 12309) = 0x025a3001
[0x4022d1] memchr("  *dest = *source & 0377;\n  *des"..., '\n', 345) = 0x025a2e89
[0x4022d1] memchr("  *dest += temp << 8;\n}\n\n#ifndef"..., '\n', 319) = 0x025a2e9f
[0x4022d1] memchr("}\n\n#ifndef EXTRACT_MACROS /* To "..., '\n', 297) = 0x025a2ea1
[0x4022d1] memchr("\n#ifndef EXTRACT_MACROS /* To de"..., '\n', 295) = 0x025a2ea2
[0x4022d1] memchr("#ifndef EXTRACT_MACROS /* To deb"..., '\n', 294) = 0x025a2ed5
[0x4022d1] memchr("#undef EXTRACT_NUMBER\n#define EX"..., '\n', 243) = 0x025a2eeb
[0x4022d1] memchr("#define EXTRACT_NUMBER(dest, src"..., '\n', 221) = 0x025a2f29
[0x4022d1] memchr("#endif /* not EXTRACT_MACROS */\n"..., '\n', 159) = 0x025a2f49
[0x4022d1] memchr("\n#endif /* DEBUG */\n\n/* Same as "..., '\n', 127) = 0x025a2f4a
[0x4022d1] memchr("#endif /* DEBUG */\n\n/* Same as E"..., '\n', 126) = 0x025a2f5d
[0x4022d1] memchr("\n/* Same as EXTRACT_NUMBER, exce"..., '\n', 107) = 0x025a2f5e
[0x4022d1] memchr("/* Same as EXTRACT_NUMBER, excep"..., '\n', 106) = 0x025a2fa6
[0x4022d1] memchr("   SOURCE must be an lvalue.  */"..., '\n', 34) = 0x025a2fc7
[0x4022d1] memchr("\n#define EXTRACT_NUMBER_AND_INCR"..., '\n', 1) = 0x025a2fc8
[0x4022d1] memchr("#define EXTRACT_NUMBER_AND_INCR("..., '\n', 0) = NULL
[0x4023cc] fwrite("2051:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define EXTRACT_NUMBER_AND_INCR("..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    EXTRACT_NUM"..., 'I', 12279) = 0x025a3156
[0x40cdf3] memchr("INCR\n#define EXTRACT_NUMBER_AND_"..., '\n', 11939) = 0x025a315a
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    EXTRACT_NUM"..., '\n', 314) = 0x025a3012
[0x4022d1] memchr("    EXTRACT_NUMBER (destination,"..., '\n', 297) = 0x025a3041
[0x4022d1] memchr("    (source) += 2; \t\t\t\t\t\t\t\\\n  } "..., '\n', 250) = 0x025a305d
[0x4022d1] memchr("  } while (0)\n\n#ifdef DEBUG\nstat"..., '\n', 222) = 0x025a306b
[0x4022d1] memchr("\n#ifdef DEBUG\nstatic void\nextrac"..., '\n', 208) = 0x025a306c
[0x4022d1] memchr("#ifdef DEBUG\nstatic void\nextract"..., '\n', 207) = 0x025a3079
[0x4022d1] memchr("static void\nextract_number_and_i"..., '\n', 194) = 0x025a3085
[0x4022d1] memchr("extract_number_and_incr (destina"..., '\n', 182) = 0x025a30b3
[0x4022d1] memchr("    int *destination;\n    unsign"..., '\n', 136) = 0x025a30c9
[0x4022d1] memchr("    unsigned char **source;\n{ \n "..., '\n', 114) = 0x025a30e5
[0x4022d1] memchr("{ \n  extract_number (destination"..., '\n', 86) = 0x025a30e8
[0x4022d1] memchr("  extract_number (destination, *"..., '\n', 83) = 0x025a3111
[0x4022d1] memchr("  *source += 2;\n}\n\n#ifndef EXTRA"..., '\n', 42) = 0x025a3121
[0x4022d1] memchr("}\n\n#ifndef EXTRACT_MACROS\n#undef"..., '\n', 26) = 0x025a3123
[0x4022d1] memchr("\n#ifndef EXTRACT_MACROS\n#undef E"..., '\n', 24) = 0x025a3124
[0x4022d1] memchr("#ifndef EXTRACT_MACROS\n#undef EX"..., '\n', 23) = 0x025a313b
[0x4022d1] memchr("#undef EXTRACT_NUMBER_AND_INCR\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("2068:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef EXTRACT_NUMBER_AND_INCR\n#"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define EXTRACT_NUMBER_AND_INCR("..., 'I', 11934) = 0x025a3176
[0x40cdf3] memchr("INCR(dest, src) \\\n  extract_numb"..., '\n', 11907) = 0x025a3187
[0x4022d1] memchr("#define EXTRACT_NUMBER_AND_INCR("..., '\n', 0) = NULL
[0x4023cc] fwrite("2069:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define EXTRACT_NUMBER_AND_INCR("..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  extract_number_and_incr (&dest"..., 'I', 11889) = 0x025a31e9
[0x40cdf3] memchr("If DEBUG is defined, Regex print"..., '\n', 11792) = 0x025a322e
[0x4022d1] memchr("  extract_number_and_incr (&dest"..., '\n', 94) = 0x025a31af
[0x4022d1] memchr("#endif /* not EXTRACT_MACROS */\n"..., '\n', 54) = 0x025a31cf
[0x4022d1] memchr("\n#endif /* DEBUG */\n\014\n/* If DEBU"..., '\n', 22) = 0x025a31d0
[0x4022d1] memchr("#endif /* DEBUG */\n\014\n/* If DEBUG"..., '\n', 21) = 0x025a31e3
[0x4022d1] memchr("\014\n/* If DEBUG is defined, Regex "..., '\n', 2) = 0x025a31e5
[0x4022d1] memchr("/* If DEBUG is defined, Regex pr"..., '\n', 0) = NULL
[0x4023cc] fwrite("2075:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* If DEBUG is defined, Regex pr"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   it is doing (if the variable "..., 'I', 11722) = 0x025a3265
[0x40cdf3] memchr("If linked with the\n   main progr"..., '\n', 11668) = 0x025a3277
[0x4022d1] memchr("   it is doing (if the variable "..., '\n', 0) = NULL
[0x4023cc] fwrite("2076:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   it is doing (if the variable "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   main program in `iregex.c', y"..., 'I', 11649) = 0x025a3367
[0x40cdf3] memchr("I/O for debugging.  */\n/*#includ"..., '\n', 11410) = 0x025a337d
[0x4022d1] memchr("   main program in `iregex.c', y"..., '\n', 220) = 0x025a32b9
[0x4022d1] memchr("   interactively.  And if linked"..., '\n', 154) = 0x025a3300
[0x4022d1] memchr("   the other test files, you can"..., '\n', 83) = 0x025a3344
[0x4022d1] memchr("\n#ifdef DEBUG\n\n/* We use standar"..., '\n', 15) = 0x025a3345
[0x4022d1] memchr("#ifdef DEBUG\n\n/* We use standard"..., '\n', 14) = 0x025a3352
[0x4022d1] memchr("\n/* We use standard I/O for debu"..., '\n', 1) = 0x025a3353
[0x4022d1] memchr("/* We use standard I/O for debug"..., '\n', 0) = NULL
[0x4023cc] fwrite("2083:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* We use standard I/O for debug"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/*#include <stdio.h>*/\n\n/* It is"..., 'I', 11387) = 0x025a3399
[0x40cdf3] memchr("It is useful to test things that"..., '\n', 11360) = 0x025a33de
[0x4022d1] memchr("/*#include <stdio.h>*/\n\n/* It is"..., '\n', 24) = 0x025a3394
[0x4022d1] memchr("\n/* It is useful to test things "..., '\n', 1) = 0x025a3395
[0x4022d1] memchr("/* It is useful to test things t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2086:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* It is useful to test things t"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#include <assert.h>\n\nstatic int "..., 'I', 11290) = 0x025a3438
[0x40cdf3] memchr("INT1(x) if (debug) printf (x)\n#d"..., '\n', 11201) = 0x025a3455
[0x4022d1] memchr("#include <assert.h>\n\nstatic int "..., '\n', 73) = 0x025a33f2
[0x4022d1] memchr("\nstatic int debug = 0;\n\n#define "..., '\n', 53) = 0x025a33f3
[0x4022d1] memchr("static int debug = 0;\n\n#define D"..., '\n', 52) = 0x025a3409
[0x4022d1] memchr("\n#define DEBUG_STATEMENT(e) e\n#d"..., '\n', 30) = 0x025a340a
[0x4022d1] memchr("#define DEBUG_STATEMENT(e) e\n#de"..., '\n', 29) = 0x025a3427
[0x4022d1] memchr("#define DEBUG_PRINT1(x) if (debu"..., '\n', 0) = NULL
[0x4023cc] fwrite("2092:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT1(x) if (debu"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT2(x1, x2) if "..., 'I', 11171) = 0x025a3466
[0x40cdf3] memchr("INT2(x1, x2) if (debug) printf ("..., '\n', 11155) = 0x025a348d
[0x4022d1] memchr("#define DEBUG_PRINT2(x1, x2) if "..., '\n', 0) = NULL
[0x4023cc] fwrite("2093:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT2(x1, x2) if "..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., 'I', 11115) = 0x025a349e
[0x40cdf3] memchr("INT3(x1, x2, x3) if (debug) prin"..., '\n', 11099) = 0x025a34cd
[0x4022d1] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2094:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT3(x1, x2, x3)"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., 'I', 11051) = 0x025a34de
[0x40cdf3] memchr("INT4(x1, x2, x3, x4) if (debug) "..., '\n', 11035) = 0x025a3515
[0x4022d1] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '\n', 0) = NULL
[0x4023cc] fwrite("2095:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT4(x1, x2, x3,"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., 'I', 10979) = 0x025a3526
[0x40cdf3] memchr("INT_COMPILED_PATTERN(p, s, e) \t\t"..., '\n', 10963) = 0x025a3549
[0x4022d1] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '\n', 0) = NULL
[0x4023cc] fwrite("2096:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_COMPILED_PAT"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (debug) print_partial_compi"..., 'I', 10927) = 0x025a358d
[0x40cdf3] memchr("INT_DOUBLE_STRING(w, s1, sz1, s2"..., '\n', 10860) = 0x025a35b7
[0x4022d1] memchr("  if (debug) print_partial_compi"..., '\n', 51) = 0x025a357c
[0x4022d1] memchr("#define DEBUG_PRINT_DOUBLE_STRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("2098:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_DOUBLE_STRIN"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (debug) print_double_string"..., 'I', 10817) = 0x025a36bb
[0x40cdf3] memchr("IDTH))\n    {\n      if (fastmap[i"..., '\n', 10558) = 0x025a36c1
[0x4022d1] memchr("  if (debug) print_double_string"..., '\n', 235) = 0x025a35ee
[0x4022d1] memchr("\n\nextern void printchar ();\n\n/* "..., '\n', 180) = 0x025a35ef
[0x4022d1] memchr("\nextern void printchar ();\n\n/* P"..., '\n', 179) = 0x025a35f0
[0x4022d1] memchr("extern void printchar ();\n\n/* Pr"..., '\n', 178) = 0x025a360a
[0x4022d1] memchr("\n/* Print the fastmap in human-r"..., '\n', 152) = 0x025a360b
[0x4022d1] memchr("/* Print the fastmap in human-re"..., '\n', 151) = 0x025a363c
[0x4022d1] memchr("\nvoid\nprint_fastmap (fastmap)\n  "..., '\n', 102) = 0x025a363d
[0x4022d1] memchr("void\nprint_fastmap (fastmap)\n   "..., '\n', 101) = 0x025a3642
[0x4022d1] memchr("print_fastmap (fastmap)\n    char"..., '\n', 96) = 0x025a365a
[0x4022d1] memchr("    char *fastmap;\n{\n  unsigned "..., '\n', 72) = 0x025a366d
[0x4022d1] memchr("{\n  unsigned was_a_range = 0;\n  "..., '\n', 53) = 0x025a366f
[0x4022d1] memchr("  unsigned was_a_range = 0;\n  un"..., '\n', 51) = 0x025a368b
[0x4022d1] memchr("  unsigned i = 0;  \n  \n  while ("..., '\n', 23) = 0x025a369f
[0x4022d1] memchr("  \n  while (i < (1 << BYTEWIDTH)"..., '\n', 3) = 0x025a36a2
[0x4022d1] memchr("  while (i < (1 << BYTEWIDTH))\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("2113:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  while (i < (1 << BYTEWIDTH))\n "..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      if (fastmap[i++])\n\t{"..., 'I', 10551) = 0x025a3734
[0x40cdf3] memchr("IDTH)  &&  fastmap[i])\n         "..., '\n', 10437) = 0x025a374a
[0x4022d1] memchr("    {\n      if (fastmap[i++])\n\t{"..., '\n', 82) = 0x025a36c7
[0x4022d1] memchr("      if (fastmap[i++])\n\t{\n\t  wa"..., '\n', 76) = 0x025a36df
[0x4022d1] memchr("\t{\n\t  was_a_range = 0;\n         "..., '\n', 52) = 0x025a36e2
[0x4022d1] memchr("\t  was_a_range = 0;\n          pr"..., '\n', 49) = 0x025a36f6
[0x4022d1] memchr("          printchar (i - 1);\n   "..., '\n', 29) = 0x025a3713
[0x4022d1] memchr("          while (i < (1 << BYTEW"..., '\n', 0) = NULL
[0x4023cc] fwrite("2119:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          while (i < (1 << BYTEW"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            {\n              was_"..., 'I', 10414) = 0x025a4fa8
[0x40cdf3] memchr("IRST_STRING_P (where))\n        {"..., '\n', 4177) = 0x025a4fbe
[0x4022d1] memchr("            {\n              was_"..., '\n', 6226) = 0x025a3758
[0x4022d1] memchr("              was_a_range = 1;\n "..., '\n', 6212) = 0x025a3777
[0x4022d1] memchr("              i++;\n            }"..., '\n', 6181) = 0x025a378a
[0x4022d1] memchr("            }\n\t  if (was_a_range"..., '\n', 6162) = 0x025a3798
[0x4022d1] memchr("\t  if (was_a_range)\n            "..., '\n', 6148) = 0x025a37ac
[0x4022d1] memchr("            {\n              prin"..., '\n', 6128) = 0x025a37ba
[0x4022d1] memchr("              printf ("-");\n    "..., '\n', 6114) = 0x025a37d6
[0x4022d1] memchr("              printchar (i - 1);"..., '\n', 6086) = 0x025a37f7
[0x4022d1] memchr("            }\n        }\n    }\n  "..., '\n', 6053) = 0x025a3805
[0x4022d1] memchr("        }\n    }\n  putchar ('\\n')"..., '\n', 6039) = 0x025a380f
[0x4022d1] memchr("    }\n  putchar ('\\n'); \n}\n\n\n/* "..., '\n', 6029) = 0x025a3815
[0x4022d1] memchr("  putchar ('\\n'); \n}\n\n\n/* Print "..., '\n', 6023) = 0x025a3828
[0x4022d1] memchr("}\n\n\n/* Print a compiled pattern "..., '\n', 6004) = 0x025a382a
[0x4022d1] memchr("\n\n/* Print a compiled pattern st"..., '\n', 6002) = 0x025a382b
[0x4022d1] memchr("\n/* Print a compiled pattern str"..., '\n', 6001) = 0x025a382c
[0x4022d1] memchr("/* Print a compiled pattern stri"..., '\n', 6000) = 0x025a3873
[0x4022d1] memchr("   the START pointer into it and"..., '\n', 5929) = 0x025a38bc
[0x4022d1] memchr("\nvoid\nprint_partial_compiled_pat"..., '\n', 5856) = 0x025a38bd
[0x4022d1] memchr("void\nprint_partial_compiled_patt"..., '\n', 5855) = 0x025a38c2
[0x4022d1] memchr("print_partial_compiled_pattern ("..., '\n', 5850) = 0x025a38ee
[0x4022d1] memchr("    unsigned char *start;\n    un"..., '\n', 5806) = 0x025a3908
[0x4022d1] memchr("    unsigned char *end;\n{\n  int "..., '\n', 5780) = 0x025a3920
[0x4022d1] memchr("{\n  int mcnt, mcnt2;\n  unsigned "..., '\n', 5756) = 0x025a3922
[0x4022d1] memchr("  int mcnt, mcnt2;\n  unsigned ch"..., '\n', 5754) = 0x025a3935
[0x4022d1] memchr("  unsigned char *p = start;\n  un"..., '\n', 5735) = 0x025a3951
[0x4022d1] memchr("  unsigned char *pend = end;\n\n  "..., '\n', 5707) = 0x025a396e
[0x4022d1] memchr("\n  if (start == NULL)\n    {\n    "..., '\n', 5678) = 0x025a396f
[0x4022d1] memchr("  if (start == NULL)\n    {\n     "..., '\n', 5677) = 0x025a3984
[0x4022d1] memchr("    {\n      printf ("(null)\\n");"..., '\n', 5656) = 0x025a398a
[0x4022d1] memchr("      printf ("(null)\\n");\n     "..., '\n', 5650) = 0x025a39a5
[0x4022d1] memchr("      return;\n    }\n    \n  /* Lo"..., '\n', 5623) = 0x025a39b3
[0x4022d1] memchr("    }\n    \n  /* Loop over patter"..., '\n', 5609) = 0x025a39b9
[0x4022d1] memchr("    \n  /* Loop over pattern comm"..., '\n', 5603) = 0x025a39be
[0x4022d1] memchr("  /* Loop over pattern commands."..., '\n', 5598) = 0x025a39e3
[0x4022d1] memchr("  while (p < pend)\n    {\n      p"..., '\n', 5561) = 0x025a39f6
[0x4022d1] memchr("    {\n      printf ("%d:\\t", p -"..., '\n', 5542) = 0x025a39fc
[0x4022d1] memchr("      printf ("%d:\\t", p - start"..., '\n', 5536) = 0x025a3a1f
[0x4022d1] memchr("\n      switch ((re_opcode_t) *p+"..., '\n', 5501) = 0x025a3a20
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 5500) = 0x025a3a42
[0x4022d1] memchr("\t{\n        case no_op:\n         "..., '\n', 5466) = 0x025a3a45
[0x4022d1] memchr("        case no_op:\n          pr"..., '\n', 5463) = 0x025a3a59
[0x4022d1] memchr("          printf ("/no_op");\n   "..., '\n', 5443) = 0x025a3a76
[0x4022d1] memchr("          break;\n\n\tcase exactn:\n"..., '\n', 5414) = 0x025a3a87
[0x4022d1] memchr("\n\tcase exactn:\n\t  mcnt = *p++;\n "..., '\n', 5397) = 0x025a3a88
[0x4022d1] memchr("\tcase exactn:\n\t  mcnt = *p++;\n  "..., '\n', 5396) = 0x025a3a96
[0x4022d1] memchr("\t  mcnt = *p++;\n          printf"..., '\n', 5382) = 0x025a3aa6
[0x4022d1] memchr("          printf ("/exactn/%d", "..., '\n', 5366) = 0x025a3acd
[0x4022d1] memchr("          do\n\t    {\n            "..., '\n', 5327) = 0x025a3ada
[0x4022d1] memchr("\t    {\n              putchar ('/"..., '\n', 5314) = 0x025a3ae1
[0x4022d1] memchr("              putchar ('/');\n\t  "..., '\n', 5307) = 0x025a3afe
[0x4022d1] memchr("\t      printchar (*p++);\n       "..., '\n', 5278) = 0x025a3b17
[0x4022d1] memchr("            }\n          while (-"..., '\n', 5253) = 0x025a3b25
[0x4022d1] memchr("          while (--mcnt);\n      "..., '\n', 5239) = 0x025a3b3f
[0x4022d1] memchr("          break;\n\n\tcase start_me"..., '\n', 5213) = 0x025a3b50
[0x4022d1] memchr("\n\tcase start_memory:\n          m"..., '\n', 5196) = 0x025a3b51
[0x4022d1] memchr("\tcase start_memory:\n          mc"..., '\n', 5195) = 0x025a3b65
[0x4022d1] memchr("          mcnt = *p++;\n         "..., '\n', 5175) = 0x025a3b7c
[0x4022d1] memchr("          printf ("/start_memory"..., '\n', 5152) = 0x025a3bb2
[0x4022d1] memchr("          break;\n\n\tcase stop_mem"..., '\n', 5098) = 0x025a3bc3
[0x4022d1] memchr("\n\tcase stop_memory:\n          mc"..., '\n', 5081) = 0x025a3bc4
[0x4022d1] memchr("\tcase stop_memory:\n          mcn"..., '\n', 5080) = 0x025a3bd7
[0x4022d1] memchr("          mcnt = *p++;\n\t  printf"..., '\n', 5061) = 0x025a3bee
[0x4022d1] memchr("\t  printf ("/stop_memory/%d/%d","..., '\n', 5038) = 0x025a3c1c
[0x4022d1] memchr("          break;\n\n\tcase duplicat"..., '\n', 4992) = 0x025a3c2d
[0x4022d1] memchr("\n\tcase duplicate:\n\t  printf ("/d"..., '\n', 4975) = 0x025a3c2e
[0x4022d1] memchr("\tcase duplicate:\n\t  printf ("/du"..., '\n', 4974) = 0x025a3c3f
[0x4022d1] memchr("\t  printf ("/duplicate/%d", *p++"..., '\n', 4957) = 0x025a3c62
[0x4022d1] memchr("\t  break;\n\n\tcase anychar:\n\t  pri"..., '\n', 4922) = 0x025a3c6c
[0x4022d1] memchr("\n\tcase anychar:\n\t  printf ("/any"..., '\n', 4912) = 0x025a3c6d
[0x4022d1] memchr("\tcase anychar:\n\t  printf ("/anyc"..., '\n', 4911) = 0x025a3c7c
[0x4022d1] memchr("\t  printf ("/anychar");\n\t  break"..., '\n', 4896) = 0x025a3c94
[0x4022d1] memchr("\t  break;\n\n\tcase charset:\n      "..., '\n', 4872) = 0x025a3c9e
[0x4022d1] memchr("\n\tcase charset:\n        case cha"..., '\n', 4862) = 0x025a3c9f
[0x4022d1] memchr("\tcase charset:\n        case char"..., '\n', 4861) = 0x025a3cae
[0x4022d1] memchr("        case charset_not:\n      "..., '\n', 4846) = 0x025a3cc8
[0x4022d1] memchr("          {\n            register"..., '\n', 4820) = 0x025a3cd4
[0x4022d1] memchr("            register int c, last"..., '\n', 4808) = 0x025a3cfd
[0x4022d1] memchr("\t    register int in_range = 0;\n"..., '\n', 4767) = 0x025a3d1d
[0x4022d1] memchr("\n\t    printf ("/charset [%s",\n\t "..., '\n', 4735) = 0x025a3d1e
[0x4022d1] memchr("\t    printf ("/charset [%s",\n\t  "..., '\n', 4734) = 0x025a3d3b
[0x4022d1] memchr("\t            (re_opcode_t) *(p -"..., '\n', 4705) = 0x025a3d7b
[0x4022d1] memchr("            \n            assert "..., '\n', 4641) = 0x025a3d88
[0x4022d1] memchr("            assert (p + *p < pen"..., '\n', 4628) = 0x025a3dac
[0x4022d1] memchr("\n            for (c = 0; c < 256"..., '\n', 4592) = 0x025a3dad
[0x4022d1] memchr("            for (c = 0; c < 256;"..., '\n', 4591) = 0x025a3dd3
[0x4022d1] memchr("\t      if (c / 8 < *p\n\t\t  && (p["..., '\n', 4553) = 0x025a3de9
[0x4022d1] memchr("\t\t  && (p[1 + (c/8)] & (1 << (c "..., '\n', 4531) = 0x025a3e11
[0x4022d1] memchr("\t\t{\n\t\t  /* Are we starting a ran"..., '\n', 4491) = 0x025a3e15
[0x4022d1] memchr("\t\t  /* Are we starting a range? "..., '\n', 4487) = 0x025a3e39
[0x4022d1] memchr("\t\t  if (last + 1 == c && ! in_ra"..., '\n', 4451) = 0x025a3e5e
[0x4022d1] memchr("\t\t    {\n\t\t      putchar ('-');\n\t"..., '\n', 4414) = 0x025a3e66
[0x4022d1] memchr("\t\t      putchar ('-');\n\t\t      i"..., '\n', 4406) = 0x025a3e7d
[0x4022d1] memchr("\t\t      in_range = 1;\n\t\t    }\n\t\t"..., '\n', 4383) = 0x025a3e93
[0x4022d1] memchr("\t\t    }\n\t\t  /* Have we broken a "..., '\n', 4361) = 0x025a3e9b
[0x4022d1] memchr("\t\t  /* Have we broken a range?  "..., '\n', 4353) = 0x025a3ebe
[0x4022d1] memchr("\t\t  else if (last + 1 != c && in"..., '\n', 4318) = 0x025a3ee6
[0x4022d1] memchr("              {\n\t\t      printcha"..., '\n', 4278) = 0x025a3ef6
[0x4022d1] memchr("\t\t      printchar (last);\n\t\t    "..., '\n', 4262) = 0x025a3f10
[0x4022d1] memchr("\t\t      in_range = 0;\n\t\t    }\n  "..., '\n', 4236) = 0x025a3f26
[0x4022d1] memchr("\t\t    }\n                \n\t\t  if "..., '\n', 4214) = 0x025a3f2e
[0x4022d1] memchr("                \n\t\t  if (! in_ra"..., '\n', 4206) = 0x025a3f3f
[0x4022d1] memchr("\t\t  if (! in_range)\n\t\t    printc"..., '\n', 4189) = 0x025a3f53
[0x4022d1] memchr("\t\t    printchar (c);\n\n\t\t  last ="..., '\n', 4169) = 0x025a3f68
[0x4022d1] memchr("\n\t\t  last = c;\n              }\n\n"..., '\n', 4148) = 0x025a3f69
[0x4022d1] memchr("\t\t  last = c;\n              }\n\n\t"..., '\n', 4147) = 0x025a3f77
[0x4022d1] memchr("              }\n\n\t    if (in_ran"..., '\n', 4133) = 0x025a3f87
[0x4022d1] memchr("\n\t    if (in_range)\n\t      print"..., '\n', 4117) = 0x025a3f88
[0x4022d1] memchr("\t    if (in_range)\n\t      printc"..., '\n', 4116) = 0x025a3f9b
[0x4022d1] memchr("\t      printchar (last);\n\n\t    p"..., '\n', 4097) = 0x025a3fb4
[0x4022d1] memchr("\n\t    putchar (']');\n\n\t    p += "..., '\n', 4072) = 0x025a3fb5
[0x4022d1] memchr("\t    putchar (']');\n\n\t    p += 1"..., '\n', 4071) = 0x025a3fc9
[0x4022d1] memchr("\n\t    p += 1 + *p;\n\t  }\n\t  break"..., '\n', 4051) = 0x025a3fca
[0x4022d1] memchr("\t    p += 1 + *p;\n\t  }\n\t  break;"..., '\n', 4050) = 0x025a3fdc
[0x4022d1] memchr("\t  }\n\t  break;\n\n\tcase begline:\n\t"..., '\n', 4032) = 0x025a3fe1
[0x4022d1] memchr("\t  break;\n\n\tcase begline:\n\t  pri"..., '\n', 4027) = 0x025a3feb
[0x4022d1] memchr("\n\tcase begline:\n\t  printf ("/beg"..., '\n', 4017) = 0x025a3fec
[0x4022d1] memchr("\tcase begline:\n\t  printf ("/begl"..., '\n', 4016) = 0x025a3ffb
[0x4022d1] memchr("\t  printf ("/begline");\n        "..., '\n', 4001) = 0x025a4013
[0x4022d1] memchr("          break;\n\n\tcase endline:"..., '\n', 3977) = 0x025a4024
[0x4022d1] memchr("\n\tcase endline:\n          printf"..., '\n', 3960) = 0x025a4025
[0x4022d1] memchr("\tcase endline:\n          printf "..., '\n', 3959) = 0x025a4034
[0x4022d1] memchr("          printf ("/endline");\n "..., '\n', 3944) = 0x025a4053
[0x4022d1] memchr("          break;\n\n\tcase on_failu"..., '\n', 3913) = 0x025a4064
[0x4022d1] memchr("\n\tcase on_failure_jump:\n        "..., '\n', 3896) = 0x025a4065
[0x4022d1] memchr("\tcase on_failure_jump:\n         "..., '\n', 3895) = 0x025a407c
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 3872) = 0x025a40ab
[0x4022d1] memchr("  \t  printf ("/on_failure_jump t"..., '\n', 3825) = 0x025a40e5
[0x4022d1] memchr("          break;\n\n\tcase on_failu"..., '\n', 3767) = 0x025a40f6
[0x4022d1] memchr("\n\tcase on_failure_keep_string_ju"..., '\n', 3750) = 0x025a40f7
[0x4022d1] memchr("\tcase on_failure_keep_string_jum"..., '\n', 3749) = 0x025a411a
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 3714) = 0x025a4149
[0x4022d1] memchr("  \t  printf ("/on_failure_keep_s"..., '\n', 3667) = 0x025a418f
[0x4022d1] memchr("          break;\n\n\tcase dummy_fa"..., '\n', 3597) = 0x025a41a0
[0x4022d1] memchr("\n\tcase dummy_failure_jump:\n     "..., '\n', 3580) = 0x025a41a1
[0x4022d1] memchr("\tcase dummy_failure_jump:\n      "..., '\n', 3579) = 0x025a41bb
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 3553) = 0x025a41ea
[0x4022d1] memchr("  \t  printf ("/dummy_failure_jum"..., '\n', 3506) = 0x025a4227
[0x4022d1] memchr("          break;\n\n\tcase push_dum"..., '\n', 3445) = 0x025a4238
[0x4022d1] memchr("\n\tcase push_dummy_failure:\n     "..., '\n', 3428) = 0x025a4239
[0x4022d1] memchr("\tcase push_dummy_failure:\n      "..., '\n', 3427) = 0x025a4253
[0x4022d1] memchr("          printf ("/push_dummy_f"..., '\n', 3401) = 0x025a427d
[0x4022d1] memchr("          break;\n          \n    "..., '\n', 3359) = 0x025a428e
[0x4022d1] memchr("          \n        case maybe_po"..., '\n', 3342) = 0x025a4299
[0x4022d1] memchr("        case maybe_pop_jump:\n   "..., '\n', 3331) = 0x025a42b6
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 3302) = 0x025a42e5
[0x4022d1] memchr("  \t  printf ("/maybe_pop_jump to"..., '\n', 3255) = 0x025a431e
[0x4022d1] memchr("\t  break;\n\n        case pop_fail"..., '\n', 3198) = 0x025a4328
[0x4022d1] memchr("\n        case pop_failure_jump:\n"..., '\n', 3188) = 0x025a4329
[0x4022d1] memchr("        case pop_failure_jump:\n\t"..., '\n', 3187) = 0x025a4348
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 3156) = 0x025a4370
[0x4022d1] memchr("  \t  printf ("/pop_failure_jump "..., '\n', 3116) = 0x025a43ab
[0x4022d1] memchr("\t  break;          \n          \n "..., '\n', 3057) = 0x025a43bf
[0x4022d1] memchr("          \n        case jump_pas"..., '\n', 3037) = 0x025a43ca
[0x4022d1] memchr("        case jump_past_alt:\n\t  e"..., '\n', 3026) = 0x025a43e6
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 2998) = 0x025a440e
[0x4022d1] memchr("  \t  printf ("/jump_past_alt to "..., '\n', 2958) = 0x025a4446
[0x4022d1] memchr("\t  break;          \n          \n "..., '\n', 2902) = 0x025a445a
[0x4022d1] memchr("          \n        case jump:\n\t "..., '\n', 2882) = 0x025a4465
[0x4022d1] memchr("        case jump:\n\t  extract_nu"..., '\n', 2871) = 0x025a4478
[0x4022d1] memchr("\t  extract_number_and_incr (&mcn"..., '\n', 2852) = 0x025a44a0
[0x4022d1] memchr("  \t  printf ("/jump to %d", p + "..., '\n', 2812) = 0x025a44cf
[0x4022d1] memchr("\t  break;\n\n        case succeed_"..., '\n', 2765) = 0x025a44d9
[0x4022d1] memchr("\n        case succeed_n: \n      "..., '\n', 2755) = 0x025a44da
[0x4022d1] memchr("        case succeed_n: \n       "..., '\n', 2754) = 0x025a44f3
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2729) = 0x025a4522
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2682) = 0x025a4552
[0x4022d1] memchr("\t  printf ("/succeed_n to %d, %d"..., '\n', 2634) = 0x025a4595
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 2567) = 0x025a45a6
[0x4022d1] memchr("        \n        case jump_n: \n "..., '\n', 2550) = 0x025a45af
[0x4022d1] memchr("        case jump_n: \n          "..., '\n', 2541) = 0x025a45c5
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2519) = 0x025a45f4
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2472) = 0x025a4624
[0x4022d1] memchr("\t  printf ("/jump_n to %d, %d ti"..., '\n', 2424) = 0x025a4664
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 2360) = 0x025a4675
[0x4022d1] memchr("        \n        case set_number"..., '\n', 2343) = 0x025a467e
[0x4022d1] memchr("        case set_number_at: \n   "..., '\n', 2334) = 0x025a469b
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2305) = 0x025a46ca
[0x4022d1] memchr("          extract_number_and_inc"..., '\n', 2258) = 0x025a46fa
[0x4022d1] memchr("\t  printf ("/set_number_at locat"..., '\n', 2210) = 0x025a4743
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 2137) = 0x025a4754
[0x4022d1] memchr("        \n        case wordbound:"..., '\n', 2120) = 0x025a475d
[0x4022d1] memchr("        case wordbound:\n\t  print"..., '\n', 2111) = 0x025a4775
[0x4022d1] memchr("\t  printf ("/wordbound");\n\t  bre"..., '\n', 2087) = 0x025a478f
[0x4022d1] memchr("\t  break;\n\n\tcase notwordbound:\n\t"..., '\n', 2061) = 0x025a4799
[0x4022d1] memchr("\n\tcase notwordbound:\n\t  printf ("..., '\n', 2051) = 0x025a479a
[0x4022d1] memchr("\tcase notwordbound:\n\t  printf (""..., '\n', 2050) = 0x025a47ae
[0x4022d1] memchr("\t  printf ("/notwordbound");\n   "..., '\n', 2030) = 0x025a47cb
[0x4022d1] memchr("          break;\n\n\tcase wordbeg:"..., '\n', 2001) = 0x025a47dc
[0x4022d1] memchr("\n\tcase wordbeg:\n\t  printf ("/wor"..., '\n', 1984) = 0x025a47dd
[0x4022d1] memchr("\tcase wordbeg:\n\t  printf ("/word"..., '\n', 1983) = 0x025a47ec
[0x4022d1] memchr("\t  printf ("/wordbeg");\n\t  break"..., '\n', 1968) = 0x025a4804
[0x4022d1] memchr("\t  break;\n          \n\tcase worde"..., '\n', 1944) = 0x025a480e
[0x4022d1] memchr("          \n\tcase wordend:\n\t  pri"..., '\n', 1934) = 0x025a4819
[0x4022d1] memchr("\tcase wordend:\n\t  printf ("/word"..., '\n', 1923) = 0x025a4828
[0x4022d1] memchr("\t  printf ("/wordend");\n        "..., '\n', 1908) = 0x025a4840
[0x4022d1] memchr("          \n#ifdef emacs\n\tcase be"..., '\n', 1884) = 0x025a484b
[0x4022d1] memchr("#ifdef emacs\n\tcase before_dot:\n\t"..., '\n', 1873) = 0x025a4858
[0x4022d1] memchr("\tcase before_dot:\n\t  printf ("/b"..., '\n', 1860) = 0x025a486a
[0x4022d1] memchr("\t  printf ("/before_dot");\n     "..., '\n', 1842) = 0x025a4885
[0x4022d1] memchr("          break;\n\n\tcase at_dot:\n"..., '\n', 1815) = 0x025a4896
[0x4022d1] memchr("\n\tcase at_dot:\n\t  printf ("/at_d"..., '\n', 1798) = 0x025a4897
[0x4022d1] memchr("\tcase at_dot:\n\t  printf ("/at_do"..., '\n', 1797) = 0x025a48a5
[0x4022d1] memchr("\t  printf ("/at_dot");\n         "..., '\n', 1783) = 0x025a48bc
[0x4022d1] memchr("          break;\n\n\tcase after_do"..., '\n', 1760) = 0x025a48cd
[0x4022d1] memchr("\n\tcase after_dot:\n\t  printf ("/a"..., '\n', 1743) = 0x025a48ce
[0x4022d1] memchr("\tcase after_dot:\n\t  printf ("/af"..., '\n', 1742) = 0x025a48df
[0x4022d1] memchr("\t  printf ("/after_dot");\n      "..., '\n', 1725) = 0x025a48f9
[0x4022d1] memchr("          break;\n\n\tcase syntaxsp"..., '\n', 1699) = 0x025a490a
[0x4022d1] memchr("\n\tcase syntaxspec:\n          pri"..., '\n', 1682) = 0x025a490b
[0x4022d1] memchr("\tcase syntaxspec:\n          prin"..., '\n', 1681) = 0x025a491d
[0x4022d1] memchr("          printf ("/syntaxspec")"..., '\n', 1663) = 0x025a493f
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  printf ("/%d""..., '\n', 1629) = 0x025a494f
[0x4022d1] memchr("\t  printf ("/%d", mcnt);\n       "..., '\n', 1613) = 0x025a4968
[0x4022d1] memchr("          break;\n\t  \n\tcase notsy"..., '\n', 1588) = 0x025a4979
[0x4022d1] memchr("\t  \n\tcase notsyntaxspec:\n       "..., '\n', 1571) = 0x025a497d
[0x4022d1] memchr("\tcase notsyntaxspec:\n          p"..., '\n', 1567) = 0x025a4992
[0x4022d1] memchr("          printf ("/notsyntaxspe"..., '\n', 1546) = 0x025a49b7
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  printf ("/%d""..., '\n', 1509) = 0x025a49c7
[0x4022d1] memchr("\t  printf ("/%d", mcnt);\n\t  brea"..., '\n', 1493) = 0x025a49e0
[0x4022d1] memchr("\t  break;\n#endif /* emacs */\n\n\tc"..., '\n', 1468) = 0x025a49ea
[0x4022d1] memchr("#endif /* emacs */\n\n\tcase wordch"..., '\n', 1458) = 0x025a49fd
[0x4022d1] memchr("\n\tcase wordchar:\n\t  printf ("/wo"..., '\n', 1439) = 0x025a49fe
[0x4022d1] memchr("\tcase wordchar:\n\t  printf ("/wor"..., '\n', 1438) = 0x025a4a0e
[0x4022d1] memchr("\t  printf ("/wordchar");\n       "..., '\n', 1422) = 0x025a4a27
[0x4022d1] memchr("          break;\n\t  \n\tcase notwo"..., '\n', 1397) = 0x025a4a38
[0x4022d1] memchr("\t  \n\tcase notwordchar:\n\t  printf"..., '\n', 1380) = 0x025a4a3c
[0x4022d1] memchr("\tcase notwordchar:\n\t  printf ("/"..., '\n', 1376) = 0x025a4a4f
[0x4022d1] memchr("\t  printf ("/notwordchar");\n    "..., '\n', 1357) = 0x025a4a6b
[0x4022d1] memchr("          break;\n\n\tcase begbuf:\n"..., '\n', 1329) = 0x025a4a7c
[0x4022d1] memchr("\n\tcase begbuf:\n\t  printf ("/begb"..., '\n', 1312) = 0x025a4a7d
[0x4022d1] memchr("\tcase begbuf:\n\t  printf ("/begbu"..., '\n', 1311) = 0x025a4a8b
[0x4022d1] memchr("\t  printf ("/begbuf");\n         "..., '\n', 1297) = 0x025a4aa2
[0x4022d1] memchr("          break;\n\n\tcase endbuf:\n"..., '\n', 1274) = 0x025a4ab3
[0x4022d1] memchr("\n\tcase endbuf:\n\t  printf ("/endb"..., '\n', 1257) = 0x025a4ab4
[0x4022d1] memchr("\tcase endbuf:\n\t  printf ("/endbu"..., '\n', 1256) = 0x025a4ac2
[0x4022d1] memchr("\t  printf ("/endbuf");\n         "..., '\n', 1242) = 0x025a4ad9
[0x4022d1] memchr("          break;\n\n        defaul"..., '\n', 1219) = 0x025a4aea
[0x4022d1] memchr("\n        default:\n          prin"..., '\n', 1202) = 0x025a4aeb
[0x4022d1] memchr("        default:\n          print"..., '\n', 1201) = 0x025a4afc
[0x4022d1] memchr("          printf ("?%d", *(p-1))"..., '\n', 1184) = 0x025a4b1e
[0x4022d1] memchr("\t}\n\n      putchar ('\\n');\n    }\n"..., '\n', 1150) = 0x025a4b21
[0x4022d1] memchr("\n      putchar ('\\n');\n    }\n\n  "..., '\n', 1147) = 0x025a4b22
[0x4022d1] memchr("      putchar ('\\n');\n    }\n\n  p"..., '\n', 1146) = 0x025a4b38
[0x4022d1] memchr("    }\n\n  printf ("%d:\\tend of pa"..., '\n', 1124) = 0x025a4b3e
[0x4022d1] memchr("\n  printf ("%d:\\tend of pattern."..., '\n', 1118) = 0x025a4b3f
[0x4022d1] memchr("  printf ("%d:\\tend of pattern.\\"..., '\n', 1117) = 0x025a4b6f
[0x4022d1] memchr("}\n\n\nvoid\nprint_compiled_pattern "..., '\n', 1069) = 0x025a4b71
[0x4022d1] memchr("\n\nvoid\nprint_compiled_pattern (b"..., '\n', 1067) = 0x025a4b72
[0x4022d1] memchr("\nvoid\nprint_compiled_pattern (bu"..., '\n', 1066) = 0x025a4b73
[0x4022d1] memchr("void\nprint_compiled_pattern (buf"..., '\n', 1065) = 0x025a4b78
[0x4022d1] memchr("print_compiled_pattern (bufp)\n  "..., '\n', 1060) = 0x025a4b96
[0x4022d1] memchr("    struct re_pattern_buffer *bu"..., '\n', 1030) = 0x025a4bba
[0x4022d1] memchr("{\n  unsigned char *buffer = bufp"..., '\n', 994) = 0x025a4bbc
[0x4022d1] memchr("  unsigned char *buffer = bufp->"..., '\n', 992) = 0x025a4be4
[0x4022d1] memchr("\n  print_partial_compiled_patter"..., '\n', 952) = 0x025a4be5
[0x4022d1] memchr("  print_partial_compiled_pattern"..., '\n', 951) = 0x025a4c25
[0x4022d1] memchr("  printf ("%d bytes used/%d byte"..., '\n', 887) = 0x025a4c74
[0x4022d1] memchr("\n  if (bufp->fastmap_accurate &&"..., '\n', 808) = 0x025a4c75
[0x4022d1] memchr("  if (bufp->fastmap_accurate && "..., '\n', 807) = 0x025a4ca4
[0x4022d1] memchr("    {\n      printf ("fastmap: ")"..., '\n', 760) = 0x025a4caa
[0x4022d1] memchr("      printf ("fastmap: ");\n    "..., '\n', 754) = 0x025a4cc6
[0x4022d1] memchr("      print_fastmap (bufp->fastm"..., '\n', 726) = 0x025a4ceb
[0x4022d1] memchr("    }\n\n  printf ("re_nsub: %d\\t""..., '\n', 689) = 0x025a4cf1
[0x4022d1] memchr("\n  printf ("re_nsub: %d\\t", bufp"..., '\n', 683) = 0x025a4cf2
[0x4022d1] memchr("  printf ("re_nsub: %d\\t", bufp-"..., '\n', 682) = 0x025a4d1d
[0x4022d1] memchr("  printf ("regs_alloc: %d\\t", bu"..., '\n', 639) = 0x025a4d52
[0x4022d1] memchr("  printf ("can_be_null: %d\\t", b"..., '\n', 586) = 0x025a4d85
[0x4022d1] memchr("  printf ("newline_anchor: %d\\n""..., '\n', 535) = 0x025a4dbe
[0x4022d1] memchr("  printf ("no_sub: %d\\t", bufp->"..., '\n', 478) = 0x025a4de7
[0x4022d1] memchr("  printf ("not_bol: %d\\t", bufp-"..., '\n', 437) = 0x025a4e12
[0x4022d1] memchr("  printf ("not_eol: %d\\t", bufp-"..., '\n', 394) = 0x025a4e3d
[0x4022d1] memchr("  printf ("syntax: %d\\n", bufp->"..., '\n', 351) = 0x025a4e66
[0x4022d1] memchr("  /* Perhaps we should print the"..., '\n', 310) = 0x025a4e9c
[0x4022d1] memchr("}\n\n\nvoid\nprint_double_string (wh"..., '\n', 256) = 0x025a4e9e
[0x4022d1] memchr("\n\nvoid\nprint_double_string (wher"..., '\n', 254) = 0x025a4e9f
[0x4022d1] memchr("\nvoid\nprint_double_string (where"..., '\n', 253) = 0x025a4ea0
[0x4022d1] memchr("void\nprint_double_string (where,"..., '\n', 252) = 0x025a4ea5
[0x4022d1] memchr("print_double_string (where, stri"..., '\n', 247) = 0x025a4ee1
[0x4022d1] memchr("    const char *where;\n    const"..., '\n', 187) = 0x025a4ef8
[0x4022d1] memchr("    const char *string1;\n    con"..., '\n', 164) = 0x025a4f11
[0x4022d1] memchr("    const char *string2;\n    int"..., '\n', 139) = 0x025a4f2a
[0x4022d1] memchr("    int size1;\n    int size2;\n{\n"..., '\n', 114) = 0x025a4f39
[0x4022d1] memchr("    int size2;\n{\n  unsigned this"..., '\n', 99) = 0x025a4f48
[0x4022d1] memchr("{\n  unsigned this_char;\n  \n  if "..., '\n', 84) = 0x025a4f4a
[0x4022d1] memchr("  unsigned this_char;\n  \n  if (w"..., '\n', 82) = 0x025a4f60
[0x4022d1] memchr("  \n  if (where == NULL)\n    prin"..., '\n', 60) = 0x025a4f63
[0x4022d1] memchr("  if (where == NULL)\n    printf "..., '\n', 57) = 0x025a4f78
[0x4022d1] memchr("    printf ("(null)");\n  else\n  "..., '\n', 36) = 0x025a4f8f
[0x4022d1] memchr("  else\n    {\n      if (FIRST_STR"..., '\n', 13) = 0x025a4f96
[0x4022d1] memchr("    {\n      if (FIRST_STRING_P ("..., '\n', 6) = 0x025a4f9c
[0x4022d1] memchr("      if (FIRST_STRING_P (where)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2410:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      if (FIRST_STRING_P (where)"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        {\n          for (this_ch"..., 'I', 4154) = 0x025a5148
[0x40cdf3] memchr("INT1(x)\n#define DEBUG_PRINT2(x1,"..., '\n', 3761) = 0x025a514f
[0x4022d1] memchr("        {\n          for (this_ch"..., '\n', 377) = 0x025a4fc8
[0x4022d1] memchr("          for (this_char = where"..., '\n', 367) = 0x025a5014
[0x4022d1] memchr("            printchar (string1[t"..., '\n', 291) = 0x025a5040
[0x4022d1] memchr("\n          where = string2;    \n"..., '\n', 247) = 0x025a5041
[0x4022d1] memchr("          where = string2;    \n "..., '\n', 246) = 0x025a5060
[0x4022d1] memchr("        }\n\n      for (this_char "..., '\n', 215) = 0x025a506a
[0x4022d1] memchr("\n      for (this_char = where - "..., '\n', 205) = 0x025a506b
[0x4022d1] memchr("      for (this_char = where - s"..., '\n', 204) = 0x025a50b3
[0x4022d1] memchr("        printchar (string2[this_"..., '\n', 132) = 0x025a50db
[0x4022d1] memchr("    }\n}\n\n#else /* not DEBUG */\n\n"..., '\n', 92) = 0x025a50e1
[0x4022d1] memchr("}\n\n#else /* not DEBUG */\n\n#undef"..., '\n', 86) = 0x025a50e3
[0x4022d1] memchr("\n#else /* not DEBUG */\n\n#undef a"..., '\n', 84) = 0x025a50e4
[0x4022d1] memchr("#else /* not DEBUG */\n\n#undef as"..., '\n', 83) = 0x025a50fa
[0x4022d1] memchr("\n#undef assert\n#define assert(e)"..., '\n', 61) = 0x025a50fb
[0x4022d1] memchr("#undef assert\n#define assert(e)\n"..., '\n', 60) = 0x025a5109
[0x4022d1] memchr("#define assert(e)\n\n#define DEBUG"..., '\n', 46) = 0x025a511b
[0x4022d1] memchr("\n#define DEBUG_STATEMENT(e)\n#def"..., '\n', 28) = 0x025a511c
[0x4022d1] memchr("#define DEBUG_STATEMENT(e)\n#defi"..., '\n', 27) = 0x025a5137
[0x4022d1] memchr("#define DEBUG_PRINT1(x)\n#define "..., '\n', 0) = NULL
[0x4023cc] fwrite("2429:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT1(x)\n#define "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT2(x1, x2)\n#de"..., 'I', 3753) = 0x025a5160
[0x40cdf3] memchr("INT2(x1, x2)\n#define DEBUG_PRINT"..., '\n', 3737) = 0x025a516c
[0x4022d1] memchr("#define DEBUG_PRINT2(x1, x2)\n#de"..., '\n', 0) = NULL
[0x4023cc] fwrite("2430:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT2(x1, x2)\n#de"..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., 'I', 3724) = 0x025a517d
[0x40cdf3] memchr("INT3(x1, x2, x3)\n#define DEBUG_P"..., '\n', 3708) = 0x025a518d
[0x4022d1] memchr("#define DEBUG_PRINT3(x1, x2, x3)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2431:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT3(x1, x2, x3)"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., 'I', 3691) = 0x025a519e
[0x40cdf3] memchr("INT4(x1, x2, x3, x4)\n#define DEB"..., '\n', 3675) = 0x025a51b2
[0x4022d1] memchr("#define DEBUG_PRINT4(x1, x2, x3,"..., '\n', 0) = NULL
[0x4023cc] fwrite("2432:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT4(x1, x2, x3,"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., 'I', 3654) = 0x025a51c3
[0x40cdf3] memchr("INT_COMPILED_PATTERN(p, s, e)\n#d"..., '\n', 3638) = 0x025a51e0
[0x4022d1] memchr("#define DEBUG_PRINT_COMPILED_PAT"..., '\n', 0) = NULL
[0x4023cc] fwrite("2433:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_COMPILED_PAT"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_PRINT_DOUBLE_STRIN"..., 'I', 3608) = 0x025a51f1
[0x40cdf3] memchr("INT_DOUBLE_STRING(w, s1, sz1, s2"..., '\n', 3592) = 0x025a5217
[0x4022d1] memchr("#define DEBUG_PRINT_DOUBLE_STRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("2434:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PRINT_DOUBLE_STRIN"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#endif /* not DEBUG */\n\014\n/* Set"..., 'I', 3553) = 0x025a55fb
[0x40cdf3] memchr("Invalid regular expression",\t\t/*"..., '\n', 2558) = 0x025a5629
[0x4022d1] memchr("\n#endif /* not DEBUG */\n\014\n/* Set"..., '\n', 990) = 0x025a5218
[0x4022d1] memchr("#endif /* not DEBUG */\n\014\n/* Set "..., '\n', 989) = 0x025a522f
[0x4022d1] memchr("\014\n/* Set by `re_set_syntax' to t"..., '\n', 966) = 0x025a5231
[0x4022d1] memchr("/* Set by `re_set_syntax' to the"..., '\n', 964) = 0x025a527b
[0x4022d1] memchr("   also be assigned to arbitrari"..., '\n', 890) = 0x025a52c2
[0x4022d1] memchr("   syntax, so it can be changed "..., '\n', 819) = 0x025a5302
[0x4022d1] memchr("reg_syntax_t re_syntax_options ="..., '\n', 755) = 0x025a5334
[0x4022d1] memchr("\n\n/* Specify the precise syntax "..., '\n', 705) = 0x025a5335
[0x4022d1] memchr("\n/* Specify the precise syntax o"..., '\n', 704) = 0x025a5336
[0x4022d1] memchr("/* Specify the precise syntax of"..., '\n', 703) = 0x025a537f
[0x4022d1] memchr("   for compatibility for various"..., '\n', 630) = 0x025a53c2
[0x4022d1] memchr("   different, incompatible synta"..., '\n', 563) = 0x025a53e7
[0x4022d1] memchr("\n   The argument SYNTAX is a bit"..., '\n', 526) = 0x025a53e8
[0x4022d1] memchr("   The argument SYNTAX is a bit "..., '\n', 525) = 0x025a542b
[0x4022d1] memchr("   defined in regex.h.  We retur"..., '\n', 458) = 0x025a5461
[0x4022d1] memchr("\nreg_syntax_t\nre_set_syntax (syn"..., '\n', 404) = 0x025a5462
[0x4022d1] memchr("reg_syntax_t\nre_set_syntax (synt"..., '\n', 403) = 0x025a546f
[0x4022d1] memchr("re_set_syntax (syntax)\n    reg_s"..., '\n', 390) = 0x025a5486
[0x4022d1] memchr("    reg_syntax_t syntax;\n{\n  reg"..., '\n', 367) = 0x025a549f
[0x4022d1] memchr("{\n  reg_syntax_t ret = re_syntax"..., '\n', 342) = 0x025a54a1
[0x4022d1] memchr("  reg_syntax_t ret = re_syntax_o"..., '\n', 340) = 0x025a54c9
[0x4022d1] memchr("  \n  re_syntax_options = syntax;"..., '\n', 300) = 0x025a54cc
[0x4022d1] memchr("  re_syntax_options = syntax;\n  "..., '\n', 297) = 0x025a54ea
[0x4022d1] memchr("  return ret;\n}\n\014\n/* This table "..., '\n', 267) = 0x025a54f8
[0x4022d1] memchr("}\n\014\n/* This table gives an error"..., '\n', 253) = 0x025a54fa
[0x4022d1] memchr("\014\n/* This table gives an error m"..., '\n', 251) = 0x025a54fc
[0x4022d1] memchr("/* This table gives an error mes"..., '\n', 249) = 0x025a5544
[0x4022d1] memchr("   in regex.h.  Obviously the or"..., '\n', 177) = 0x025a558a
[0x4022d1] memchr("\nstatic const char *re_error_msg"..., '\n', 107) = 0x025a558b
[0x4022d1] memchr("static const char *re_error_msg["..., '\n', 106) = 0x025a55af
[0x4022d1] memchr("  { NULL,\t\t\t\t\t/* REG_NOERROR */\n"..., '\n', 70) = 0x025a55cf
[0x4022d1] memchr("    "No match",\t\t\t\t\t/* REG_NOMAT"..., '\n', 38) = 0x025a55f5
[0x4022d1] memchr("    "Invalid regular expression""..., '\n', 0) = NULL
[0x4023cc] fwrite("2467:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid regular expression""..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Invalid collation character"..., 'I', 2511) = 0x025a562f
[0x40cdf3] memchr("Invalid collation character",\t\t/"..., '\n', 2506) = 0x025a5660
[0x4022d1] memchr("    "Invalid collation character"..., '\n', 0) = NULL
[0x4023cc] fwrite("2468:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid collation character"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Invalid character class nam"..., 'I', 2456) = 0x025a5666
[0x40cdf3] memchr("Invalid character class name",\t\t"..., '\n', 2451) = 0x025a5696
[0x4022d1] memchr("    "Invalid character class nam"..., '\n', 0) = NULL
[0x4023cc] fwrite("2469:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid character class nam"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Trailing backslash",\t\t\t/* R"..., 'I', 2402) = 0x025a56ca
[0x40cdf3] memchr("Invalid back reference",\t\t\t/* RE"..., '\n', 2351) = 0x025a56f6
[0x4022d1] memchr("    "Trailing backslash",\t\t\t/* R"..., '\n', 46) = 0x025a56c4
[0x4022d1] memchr("    "Invalid back reference",\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2471:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid back reference",\t\t\t"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Unmatched [ or [^",\t\t\t/* RE"..., 'I', 2306) = 0x025a577e
[0x40cdf3] memchr("Invalid content of \\\\{\\\\}",\t\t/* "..., '\n', 2171) = 0x025a57aa
[0x4022d1] memchr("    "Unmatched [ or [^",\t\t\t/* RE"..., '\n', 130) = 0x025a5722
[0x4022d1] memchr("    "Unmatched ( or \\\\(",\t\t\t/* R"..., '\n', 86) = 0x025a574f
[0x4022d1] memchr("    "Unmatched \\\\{",\t\t\t\t/* REG_E"..., '\n', 41) = 0x025a5778
[0x4022d1] memchr("    "Invalid content of \\\\{\\\\}","..., '\n', 0) = NULL
[0x4023cc] fwrite("2475:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid content of \\\\{\\\\}","..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Invalid range end",\t\t\t/* RE"..., 'I', 2126) = 0x025a57b0
[0x40cdf3] memchr("Invalid range end",\t\t\t/* REG_ERA"..., '\n', 2121) = 0x025a57d6
[0x4022d1] memchr("    "Invalid range end",\t\t\t/* RE"..., '\n', 0) = NULL
[0x4023cc] fwrite("2476:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid range end",\t\t\t/* RE"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Memory exhausted",\t\t\t\t/* RE"..., 'I', 2082) = 0x025a5808
[0x40cdf3] memchr("Invalid preceding regular expres"..., '\n', 2033) = 0x025a583f
[0x4022d1] memchr("    "Memory exhausted",\t\t\t\t/* RE"..., '\n', 44) = 0x025a5802
[0x4022d1] memchr("    "Invalid preceding regular e"..., '\n', 0) = NULL
[0x4023cc] fwrite("2478:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Invalid preceding regular e"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Premature end of regular ex"..., 'I', 1977) = 0x025a58a6
[0x40cdf3] memchr("IZE */\n    "Unmatched ) or \\\\)","..., '\n', 1875) = 0x025a58ac
[0x4022d1] memchr("    "Premature end of regular ex"..., '\n', 58) = 0x025a5879
[0x4022d1] memchr("    "Regular expression too big""..., '\n', 0) = NULL
[0x4023cc] fwrite("2480:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    "Regular expression too big""..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    "Unmatched ) or \\\\)",\t\t\t/* R"..., 'I', 1868) = 0x025a5ccc
[0x40cdf3] memchr("If `translate' is non-null, retu"..., '\n', 813) = 0x025a5d0d
[0x4022d1] memchr("    "Unmatched ) or \\\\)",\t\t\t/* R"..., '\n', 1052) = 0x025a58da
[0x4022d1] memchr("  };\n\014\n/* Subroutine declaration"..., '\n', 1006) = 0x025a58df
[0x4022d1] memchr("\014\n/* Subroutine declarations and"..., '\n', 1001) = 0x025a58e1
[0x4022d1] memchr("/* Subroutine declarations and m"..., '\n', 999) = 0x025a591e
[0x4022d1] memchr("\nstatic void store_op1 (), store"..., '\n', 938) = 0x025a591f
[0x4022d1] memchr("static void store_op1 (), store_"..., '\n', 937) = 0x025a5947
[0x4022d1] memchr("static void insert_op1 (), inser"..., '\n', 897) = 0x025a5971
[0x4022d1] memchr("static boolean at_begline_loc_p "..., '\n', 855) = 0x025a59aa
[0x4022d1] memchr("static boolean group_in_compile_"..., '\n', 798) = 0x025a59d4
[0x4022d1] memchr("static reg_errcode_t compile_ran"..., '\n', 756) = 0x025a59fb
[0x4022d1] memchr("\n/* Fetch the next character in "..., '\n', 717) = 0x025a59fc
[0x4022d1] memchr("/* Fetch the next character in t"..., '\n', 716) = 0x025a5a44
[0x4022d1] memchr("   if necessary.  Also cast from"..., '\n', 644) = 0x025a5a88
[0x4022d1] memchr("   string passed to us by the us"..., '\n', 576) = 0x025a5acf
[0x4022d1] memchr("   as an array index (in, e.g., "..., '\n', 505) = 0x025a5b01
[0x4022d1] memchr("#define PATFETCH(c)\t\t\t\t\t\t\t\\\n  do"..., '\n', 455) = 0x025a5b1d
[0x4022d1] memchr("  do {if (p == pend) return REG_"..., '\n', 427) = 0x025a5b49
[0x4022d1] memchr("    c = (unsigned char) *p++;\t\t\t"..., '\n', 383) = 0x025a5b6e
[0x4022d1] memchr("    if (translate) c = translate"..., '\n', 346) = 0x025a5b9a
[0x4022d1] memchr("  } while (0)\n\n/* Fetch the next"..., '\n', 302) = 0x025a5ba8
[0x4022d1] memchr("\n/* Fetch the next character in "..., '\n', 288) = 0x025a5ba9
[0x4022d1] memchr("/* Fetch the next character in t"..., '\n', 287) = 0x025a5be8
[0x4022d1] memchr("   translation.  */\n#define PATF"..., '\n', 224) = 0x025a5bfc
[0x4022d1] memchr("#define PATFETCH_RAW(c)\t\t\t\t\t\t\t\\\n"..., '\n', 204) = 0x025a5c1c
[0x4022d1] memchr("  do {if (p == pend) return REG_"..., '\n', 172) = 0x025a5c48
[0x4022d1] memchr("    c = (unsigned char) *p++; \t\t"..., '\n', 128) = 0x025a5c6e
[0x4022d1] memchr("  } while (0)\n\n/* Go backwards o"..., '\n', 90) = 0x025a5c7c
[0x4022d1] memchr("\n/* Go backwards one character i"..., '\n', 76) = 0x025a5c7d
[0x4022d1] memchr("/* Go backwards one character in"..., '\n', 75) = 0x025a5caf
[0x4022d1] memchr("#define PATUNFETCH p--\n\n\n/* If `"..., '\n', 25) = 0x025a5cc6
[0x4022d1] memchr("\n\n/* If `translate' is non-null,"..., '\n', 2) = 0x025a5cc7
[0x4022d1] memchr("\n/* If `translate' is non-null, "..., '\n', 1) = 0x025a5cc8
[0x4022d1] memchr("/* If `translate' is non-null, r"..., '\n', 0) = NULL
[0x4023cc] fwrite("2513:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* If `translate' is non-null, r"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   cast the subscript to transla"..., 'I', 747) = 0x025a5e6f
[0x40cdf3] memchr("If the buffer isn't allocated wh"..., '\n', 394) = 0x025a5eac
[0x4022d1] memchr("   cast the subscript to transla"..., '\n', 350) = 0x025a5d51
[0x4022d1] memchr("   `char *', to avoid warnings w"..., '\n', 282) = 0x025a5d97
[0x4022d1] memchr("   when we use a character as a "..., '\n', 212) = 0x025a5ddf
[0x4022d1] memchr("#define TRANSLATE(d) (translate "..., '\n', 140) = 0x025a5e27
[0x4022d1] memchr("\n\n/* Macros for outputting the c"..., '\n', 68) = 0x025a5e28
[0x4022d1] memchr("\n/* Macros for outputting the co"..., '\n', 67) = 0x025a5e29
[0x4022d1] memchr("/* Macros for outputting the com"..., '\n', 66) = 0x025a5e6a
[0x4022d1] memchr("\n/* If the buffer isn't allocate"..., '\n', 1) = 0x025a5e6b
[0x4022d1] memchr("/* If the buffer isn't allocated"..., '\n', 0) = NULL
[0x4023cc] fwrite("2522:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* If the buffer isn't allocated"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define INIT_BUF_SIZE  32\n\n/* Ma"..., 'I', 332) = 0x025a5eb5
[0x40cdf3] memchr("INIT_BUF_SIZE  32\n\n/* Make sure "..., '\n', 324) = 0x025a5ec6
[0x4022d1] memchr("#define INIT_BUF_SIZE  32\n\n/* Ma"..., '\n', 0) = NULL
[0x4023cc] fwrite("2523:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INIT_BUF_SIZE  32\n\n/* Ma"..., 1, 26, 0x7f498147f260) = 26
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Make sure we have at least N"..., 'I', 306) = NULL
[0x4022d1] memchr("\n/* Make sure we have at least N"..., '\n', 306) = 0x025a5ec7
[0x4022d1] memchr("/* Make sure we have at least N "..., '\n', 305) = 0x025a5f0a
[0x4022d1] memchr("#define GET_BUFFER_SPACE(n)\t\t\t\t\t"..., '\n', 238) = 0x025a5f2d
[0x4022d1] memchr("    while (b - bufp->buffer + (n"..., '\n', 203) = 0x025a5f66
[0x4022d1] memchr("      EXTEND_BUFFER ()\n\n/* Make "..., '\n', 146) = 0x025a5f7d
[0x4022d1] memchr("\n/* Make sure we have one more b"..., '\n', 123) = 0x025a5f7e
[0x4022d1] memchr("/* Make sure we have one more by"..., '\n', 122) = 0x025a5fcb
[0x4022d1] memchr("#define BUF_PUSH(c)\t\t\t\t\t\t\t\\\n  do"..., '\n', 45) = 0x025a5fe7
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET", '\n', 17) = 0x025a5ff8
[0x4022d1] memchr("    GET", '\n', 0)            = NULL
[0x4020b3] memmove(0x259dff9, 0x25a5ff9, 7, 0x25a5ff9, 0x7f498147f260) = 0x259dff9
[0x402213] read(3, "_BUFFER_SPACE (1);\t\t\t\t\t\t\\\n    *b"..., 32768) = 32768
[0x40bc2b] memchr("    GET_BUFFER_SPACE (1);\t\t\t\t\t\t\\"..., 'I', 32737) = 0x0259e410
[0x40cdf3] memchr("INSERT_JUMP(op, loc, to) \\\n  ins"..., '\n', 31690) = 0x0259e42a
[0x4022d1] memchr("    GET_BUFFER_SPACE (1);\t\t\t\t\t\t\\"..., '\n', 1039) = 0x0259e019
[0x4022d1] memchr("    *b++ = (unsigned char) (c);\t"..., '\n', 1006) = 0x0259e040
[0x4022d1] memchr("  } while (0)\n\n\n/* Ensure we hav"..., '\n', 967) = 0x0259e04e
[0x4022d1] memchr("\n\n/* Ensure we have two more byt"..., '\n', 953) = 0x0259e04f
[0x4022d1] memchr("\n/* Ensure we have two more byte"..., '\n', 952) = 0x0259e050
[0x4022d1] memchr("/* Ensure we have two more bytes"..., '\n', 951) = 0x0259e0a0
[0x4022d1] memchr("#define BUF_PUSH_2(c1, c2)\t\t\t\t\t\t"..., '\n', 871) = 0x0259e0c2
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '\n', 837) = 0x0259e0d3
[0x4022d1] memchr("    GET_BUFFER_SPACE (2);\t\t\t\t\t\t\\"..., '\n', 820) = 0x0259e0f4
[0x4022d1] memchr("    *b++ = (unsigned char) (c1);"..., '\n', 787) = 0x0259e11b
[0x4022d1] memchr("    *b++ = (unsigned char) (c2);"..., '\n', 748) = 0x0259e142
[0x4022d1] memchr("  } while (0)\n\n\n/* As with BUF_P"..., '\n', 709) = 0x0259e150
[0x4022d1] memchr("\n\n/* As with BUF_PUSH_2, except "..., '\n', 695) = 0x0259e151
[0x4022d1] memchr("\n/* As with BUF_PUSH_2, except f"..., '\n', 694) = 0x0259e152
[0x4022d1] memchr("/* As with BUF_PUSH_2, except fo"..., '\n', 693) = 0x0259e185
[0x4022d1] memchr("#define BUF_PUSH_3(c1, c2, c3)\t\t"..., '\n', 642) = 0x0259e1ab
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    GET_BUFFER_"..., '\n', 604) = 0x0259e1bc
[0x4022d1] memchr("    GET_BUFFER_SPACE (3);\t\t\t\t\t\t\\"..., '\n', 587) = 0x0259e1dd
[0x4022d1] memchr("    *b++ = (unsigned char) (c1);"..., '\n', 554) = 0x0259e204
[0x4022d1] memchr("    *b++ = (unsigned char) (c2);"..., '\n', 515) = 0x0259e22b
[0x4022d1] memchr("    *b++ = (unsigned char) (c3);"..., '\n', 476) = 0x0259e252
[0x4022d1] memchr("  } while (0)\n\n\n/* Store a jump "..., '\n', 437) = 0x0259e260
[0x4022d1] memchr("\n\n/* Store a jump with opcode OP"..., '\n', 423) = 0x0259e261
[0x4022d1] memchr("\n/* Store a jump with opcode OP "..., '\n', 422) = 0x0259e262
[0x4022d1] memchr("/* Store a jump with opcode OP a"..., '\n', 421) = 0x0259e2a4
[0x4022d1] memchr("   relative address offset by th"..., '\n', 355) = 0x0259e2f0
[0x4022d1] memchr("#define STORE_JUMP(op, loc, to) "..., '\n', 279) = 0x0259e312
[0x4022d1] memchr("  store_op1 (op, loc, (to) - (lo"..., '\n', 245) = 0x0259e33a
[0x4022d1] memchr("\n/* Likewise, for a two-argument"..., '\n', 205) = 0x0259e33b
[0x4022d1] memchr("/* Likewise, for a two-argument "..., '\n', 204) = 0x0259e365
[0x4022d1] memchr("#define STORE_JUMP2(op, loc, to,"..., '\n', 162) = 0x0259e38d
[0x4022d1] memchr("  store_op2 (op, loc, (to) - (lo"..., '\n', 122) = 0x0259e3ba
[0x4022d1] memchr("\n/* Like `STORE_JUMP', but for i"..., '\n', 77) = 0x0259e3bb
[0x4022d1] memchr("/* Like `STORE_JUMP', but for in"..., '\n', 76) = 0x0259e407
[0x4022d1] memchr("#define INSERT_JUMP(op, loc, to)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2567:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INSERT_JUMP(op, loc, to)"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  insert_op1 (op, loc, (to) - (l"..., 'I', 31663) = 0x0259e4ad
[0x40cdf3] memchr("INSERT_JUMP2(op, loc, to, arg) \\"..., '\n', 31533) = 0x0259e4cd
[0x4022d1] memchr("  insert_op1 (op, loc, (to) - (l"..., '\n', 122) = 0x0259e456
[0x4022d1] memchr("\n/* Like `STORE_JUMP2', but for "..., '\n', 78) = 0x0259e457
[0x4022d1] memchr("/* Like `STORE_JUMP2', but for i"..., '\n', 77) = 0x0259e4a4
[0x4022d1] memchr("#define INSERT_JUMP2(op, loc, to"..., '\n', 0) = NULL
[0x4023cc] fwrite("2571:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INSERT_JUMP2(op, loc, to"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  insert_op2 (op, loc, (to) - (l"..., 'I', 31500) = 0x0259e5d9
[0x40cdf3] memchr("IZE (1L << 16)\n\n\n/* Extend the b"..., '\n', 31233) = 0x0259e5e7
[0x4022d1] memchr("  insert_op2 (op, loc, (to) - (l"..., '\n', 250) = 0x0259e4fe
[0x4022d1] memchr("\n\n/* This is not an arbitrary li"..., '\n', 201) = 0x0259e4ff
[0x4022d1] memchr("\n/* This is not an arbitrary lim"..., '\n', 200) = 0x0259e500
[0x4022d1] memchr("/* This is not an arbitrary limi"..., '\n', 199) = 0x0259e549
[0x4022d1] memchr("   into the pattern are two byte"..., '\n', 126) = 0x0259e590
[0x4022d1] memchr("   be too small, many things wou"..., '\n', 55) = 0x0259e5c7
[0x4022d1] memchr("#define MAX_BUF_SIZE (1L << 16)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("2578:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define MAX_BUF_SIZE (1L << 16)\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Extend the buffer by twice "..., 'I', 31218) = 0x0259e692
[0x40cdf3] memchr("If extending the buffer results "..., '\n', 31048) = 0x0259e6b7
[0x4022d1] memchr("\n\n/* Extend the buffer by twice "..., '\n', 135) = 0x0259e5e8
[0x4022d1] memchr("\n/* Extend the buffer by twice i"..., '\n', 134) = 0x0259e5e9
[0x4022d1] memchr("/* Extend the buffer by twice it"..., '\n', 133) = 0x0259e628
[0x4022d1] memchr("   reset the pointers that point"..., '\n', 70) = 0x0259e66e
[0x4022d1] memchr("   correct places in the new one"..., '\n', 0) = NULL
[0x4023cc] fwrite("2583:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   correct places in the new one"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   being larger than MAX_BUF_SIZ"..., 'I', 31010) = 0x0259e6d6
[0x40cdf3] memchr("IZE, then flag memory exhausted."..., '\n', 30980) = 0x0259e6fa
[0x4022d1] memchr("   being larger than MAX_BUF_SIZ"..., '\n', 0) = NULL
[0x4023cc] fwrite("2584:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   being larger than MAX_BUF_SIZ"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define EXTEND_BUFFER()\t\t\t\t\t\t\t\\\n"..., 'I', 30943) = 0x0259e784
[0x40cdf3] memchr("IZE) \t\t\t\t\\\n      return REG_ESIZ"..., '\n', 30806) = 0x0259e78e
[0x4022d1] memchr("#define EXTEND_BUFFER()\t\t\t\t\t\t\t\\\n"..., '\n', 101) = 0x0259e71a
[0x4022d1] memchr("  do { \t\t\t\t\t\t\t\t\t\\\n    unsigned c"..., '\n', 69) = 0x0259e72c
[0x4022d1] memchr("    unsigned char *old_buffer = "..., '\n', 51) = 0x0259e75f
[0x4022d1] memchr("    if (bufp->allocated == MAX_B"..., '\n', 0) = NULL
[0x4023cc] fwrite("2588:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    if (bufp->allocated == MAX_B"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      return REG_ESIZE;\t\t\t\t\t\t\t\\\n"..., 'I', 30795) = 0x0259e7a2
[0x40cdf3] memchr("IZE;\t\t\t\t\t\t\t\\\n    bufp->allocated"..., '\n', 30776) = 0x0259e7ae
[0x4022d1] memchr("      return REG_ESIZE;\t\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("2589:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      return REG_ESIZE;\t\t\t\t\t\t\t\\\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    bufp->allocated <<= 1;\t\t\t\t\t\t"..., 'I', 30763) = 0x0259e7f4
[0x40cdf3] memchr("IZE)\t\t\t\t\t\\\n      bufp->allocated"..., '\n', 30694) = 0x0259e7fe
[0x4022d1] memchr("    bufp->allocated <<= 1;\t\t\t\t\t\t"..., '\n', 34) = 0x0259e7d0
[0x4022d1] memchr("    if (bufp->allocated > MAX_BU"..., '\n', 0) = NULL
[0x4023cc] fwrite("2591:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    if (bufp->allocated > MAX_BU"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      bufp->allocated = MAX_BUF_"..., 'I', 30683) = 0x0259e820
[0x40cdf3] memchr("IZE; \t\t\t\t\t\\\n    bufp->buffer = ("..., '\n', 30650) = 0x0259e82b
[0x4022d1] memchr("      bufp->allocated = MAX_BUF_"..., '\n', 0) = NULL
[0x4023cc] fwrite("2592:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      bufp->allocated = MAX_BUF_"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    bufp->buffer = (unsigned cha"..., 'I', 30638) = 0x0259e8c7
[0x40cdf3] memchr("If the buffer moved, move all th"..., '\n', 30483) = 0x0259e901
[0x4022d1] memchr("    bufp->buffer = (unsigned cha"..., '\n', 148) = 0x0259e87a
[0x4022d1] memchr("    if (bufp->buffer == NULL)\t\t\t"..., '\n', 69) = 0x0259e89f
[0x4022d1] memchr("      return REG_ESPACE;\t\t\t\t\t\t\\\n"..., '\n', 32) = 0x0259e8bf
[0x4022d1] memchr("    /* If the buffer moved, move"..., '\n', 0) = NULL
[0x4023cc] fwrite("2596:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    /* If the buffer moved, move"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    if (old_buffer != bufp->buff"..., 'I', 30424) = 0x0259eceb
[0x40cdf3] memchr("IZE - 1) to MAX_BUF_SIZE - 1.  *"..., '\n', 29423) = 0x0259ed0c
[0x4022d1] memchr("    if (old_buffer != bufp->buff"..., '\n', 959) = 0x0259e92b
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n        b = (b"..., '\n', 917) = 0x0259e93d
[0x4022d1] memchr("        b = (b - old_buffer) + b"..., '\n', 899) = 0x0259e96f
[0x4022d1] memchr("        begalt = (begalt - old_b"..., '\n', 849) = 0x0259e9aa
[0x4022d1] memchr("        if (fixup_alt_jump)\t\t\t\t\t"..., '\n', 790) = 0x0259e9cd
[0x4022d1] memchr("          fixup_alt_jump = (fixu"..., '\n', 755) = 0x0259ea17
[0x4022d1] memchr("        if (laststart)\t\t\t\t\t\t\t\\\n "..., '\n', 681) = 0x0259ea36
[0x4022d1] memchr("          laststart = (laststart"..., '\n', 650) = 0x0259ea78
[0x4022d1] memchr("        if (pending_exact)\t\t\t\t\t\t"..., '\n', 584) = 0x0259ea9a
[0x4022d1] memchr("          pending_exact = (pendi"..., '\n', 550) = 0x0259eae3
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n  } while (0)\n"..., '\n', 477) = 0x0259eaf5
[0x4022d1] memchr("  } while (0)\n\n\n/* Since we have"..., '\n', 459) = 0x0259eb03
[0x4022d1] memchr("\n\n/* Since we have one byte rese"..., '\n', 445) = 0x0259eb04
[0x4022d1] memchr("\n/* Since we have one byte reser"..., '\n', 444) = 0x0259eb05
[0x4022d1] memchr("/* Since we have one byte reserv"..., '\n', 443) = 0x0259eb4c
[0x4022d1] memchr("   {start,stop}_memory, the maxi"..., '\n', 372) = 0x0259eb8f
[0x4022d1] memchr("   things about is what fits in "..., '\n', 305) = 0x0259ebbe
[0x4022d1] memchr("#define MAX_REGNUM 255\n\n/* But p"..., '\n', 258) = 0x0259ebd5
[0x4022d1] memchr("\n/* But patterns can have more t"..., '\n', 235) = 0x0259ebd6
[0x4022d1] memchr("/* But patterns can have more th"..., '\n', 234) = 0x0259ec1a
[0x4022d1] memchr("   ignore the excess.  */\ntypede"..., '\n', 166) = 0x0259ec34
[0x4022d1] memchr("typedef unsigned regnum_t;\n\n\n/* "..., '\n', 140) = 0x0259ec4f
[0x4022d1] memchr("\n\n/* Macros for the compile stac"..., '\n', 113) = 0x0259ec50
[0x4022d1] memchr("\n/* Macros for the compile stack"..., '\n', 112) = 0x0259ec51
[0x4022d1] memchr("/* Macros for the compile stack."..., '\n', 111) = 0x0259ec76
[0x4022d1] memchr("\n/* Since offsets can go either "..., '\n', 74) = 0x0259ec77
[0x4022d1] memchr("/* Since offsets can go either f"..., '\n', 73) = 0x0259ecc0
[0x4022d1] memchr("   be able to hold values from -"..., '\n', 0) = NULL
[0x4023cc] fwrite("2624:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   be able to hold values from -"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("typedef int pattern_offset_t;\n\nt"..., 'I', 29389) = 0x0259ee95
[0x40cdf3] memchr("INIT_COMPILE_STACK_SIZE 32\n\n#def"..., '\n', 28997) = 0x0259eeaf
[0x4022d1] memchr("typedef int pattern_offset_t;\n\nt"..., '\n', 384) = 0x0259ed2a
[0x4022d1] memchr("\ntypedef struct\n{\n  pattern_offs"..., '\n', 354) = 0x0259ed2b
[0x4022d1] memchr("typedef struct\n{\n  pattern_offse"..., '\n', 353) = 0x0259ed3a
[0x4022d1] memchr("{\n  pattern_offset_t begalt_offs"..., '\n', 338) = 0x0259ed3c
[0x4022d1] memchr("  pattern_offset_t begalt_offset"..., '\n', 336) = 0x0259ed5e
[0x4022d1] memchr("  pattern_offset_t fixup_alt_jum"..., '\n', 302) = 0x0259ed81
[0x4022d1] memchr("  pattern_offset_t inner_group_o"..., '\n', 267) = 0x0259eda8
[0x4022d1] memchr("  pattern_offset_t laststart_off"..., '\n', 228) = 0x0259edcf
[0x4022d1] memchr("  regnum_t regnum;\n} compile_sta"..., '\n', 189) = 0x0259ede2
[0x4022d1] memchr("} compile_stack_elt_t;\n\n\ntypedef"..., '\n', 170) = 0x0259edf9
[0x4022d1] memchr("\n\ntypedef struct\n{\n  compile_sta"..., '\n', 147) = 0x0259edfa
[0x4022d1] memchr("\ntypedef struct\n{\n  compile_stac"..., '\n', 146) = 0x0259edfb
[0x4022d1] memchr("typedef struct\n{\n  compile_stack"..., '\n', 145) = 0x0259ee0a
[0x4022d1] memchr("{\n  compile_stack_elt_t *stack;\n"..., '\n', 130) = 0x0259ee0c
[0x4022d1] memchr("  compile_stack_elt_t *stack;\n  "..., '\n', 128) = 0x0259ee2a
[0x4022d1] memchr("  unsigned size;\n  unsigned avai"..., '\n', 98) = 0x0259ee3b
[0x4022d1] memchr("  unsigned avail;\t\t\t/* Offset of"..., '\n', 81) = 0x0259ee74
[0x4022d1] memchr("} compile_stack_type;\n\n\n#define "..., '\n', 24) = 0x0259ee8a
[0x4022d1] memchr("\n\n#define INIT_COMPILE_STACK_SIZ"..., '\n', 2) = 0x0259ee8b
[0x4022d1] memchr("\n#define INIT_COMPILE_STACK_SIZE"..., '\n', 1) = 0x0259ee8c
[0x4022d1] memchr("#define INIT_COMPILE_STACK_SIZE "..., '\n', 0) = NULL
[0x4023cc] fwrite("2645:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INIT_COMPILE_STACK_SIZE "..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#define COMPILE_STACK_EMPTY  (c"..., 'I', 28970) = 0x0259eebd
[0x40cdf3] memchr("ILE_STACK_EMPTY  (compile_stack."..., '\n', 28957) = 0x0259eee8
[0x4022d1] memchr("\n#define COMPILE_STACK_EMPTY  (c"..., '\n', 1) = 0x0259eeb0
[0x4022d1] memchr("#define COMPILE_STACK_EMPTY  (co"..., '\n', 0) = NULL
[0x4023cc] fwrite("2647:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define COMPILE_STACK_EMPTY  (co"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define COMPILE_STACK_FULL  (com"..., 'I', 28913) = 0x0259eef5
[0x40cdf3] memchr("ILE_STACK_FULL  (compile_stack.a"..., '\n', 28901) = 0x0259ef30
[0x4022d1] memchr("#define COMPILE_STACK_FULL  (com"..., '\n', 0) = NULL
[0x4023cc] fwrite("2648:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define COMPILE_STACK_FULL  (com"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* The next available element. "..., 'I', 28841) = 0x0259ef61
[0x40cdf3] memchr("ILE_STACK_TOP (compile_stack.sta"..., '\n', 28793) = 0x0259ef99
[0x4022d1] memchr("\n/* The next available element. "..., '\n', 36) = 0x0259ef31
[0x4022d1] memchr("/* The next available element.  "..., '\n', 35) = 0x0259ef54
[0x4022d1] memchr("#define COMPILE_STACK_TOP (compi"..., '\n', 0) = NULL
[0x4023cc] fwrite("2651:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define COMPILE_STACK_TOP (compi"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Set the bit for character C"..., 'I', 28736) = 0x0259efd7
[0x40cdf3] memchr("IST_BIT(c)                      "..., '\n', 28675) = 0x0259f001
[0x4022d1] memchr("\n\n/* Set the bit for character C"..., '\n', 48) = 0x0259ef9a
[0x4022d1] memchr("\n/* Set the bit for character C "..., '\n', 47) = 0x0259ef9b
[0x4022d1] memchr("/* Set the bit for character C i"..., '\n', 46) = 0x0259efc9
[0x4022d1] memchr("#define SET_LIST_BIT(c)         "..., '\n', 0) = NULL
[0x4023cc] fwrite("2655:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define SET_LIST_BIT(c)         "..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  (b[((unsigned char) (c)) / BYT"..., 'I', 28632) = 0x0259f024
[0x40cdf3] memchr("IDTH]               \\\n   |= 1 <<"..., '\n', 28598) = 0x0259f039
[0x4022d1] memchr("  (b[((unsigned char) (c)) / BYT"..., '\n', 0) = NULL
[0x4023cc] fwrite("2656:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  (b[((unsigned char) (c)) / BYT"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   |= 1 << (((unsigned char) c) "..., 'I', 28576) = 0x0259f061
[0x40cdf3] memchr("IDTH))\n\n\n/* Get the next unsigne"..., '\n', 28537) = 0x0259f067
[0x4022d1] memchr("   |= 1 << (((unsigned char) c) "..., '\n', 0) = NULL
[0x4023cc] fwrite("2657:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   |= 1 << (((unsigned char) c) "..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Get the next unsigned numbe"..., 'I', 28530) = 0x0259f0b8
[0x40cdf3] memchr("IGNED_NUMBER(num) \t\t\t\t\t\\\n  { if "..., '\n', 28450) = 0x0259f0d0
[0x4022d1] memchr("\n\n/* Get the next unsigned numbe"..., '\n', 65) = 0x0259f068
[0x4022d1] memchr("\n/* Get the next unsigned number"..., '\n', 64) = 0x0259f069
[0x4022d1] memchr("/* Get the next unsigned number "..., '\n', 63) = 0x0259f0a8
[0x4022d1] memchr("#define GET_UNSIGNED_NUMBER(num)"..., '\n', 0) = NULL
[0x4023cc] fwrite("2661:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define GET_UNSIGNED_NUMBER(num)"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  { if (p != pend)\t\t\t\t\t\t\t\\\n     "..., 'I', 28425) = 0x0259f129
[0x40cdf3] memchr("ISDIGIT (c)) \t\t\t\t\t\t\\\n         { "..., '\n', 28337) = 0x0259f13d
[0x4022d1] memchr("  { if (p != pend)\t\t\t\t\t\t\t\\\n     "..., '\n', 74) = 0x0259f0eb
[0x4022d1] memchr("     {\t\t\t\t\t\t\t\t\t\\\n       PATFETCH"..., '\n', 47) = 0x0259f0fc
[0x4022d1] memchr("       PATFETCH (c); \t\t\t\t\t\t\t\\\n  "..., '\n', 30) = 0x0259f11a
[0x4022d1] memchr("       while (ISDIGIT (c)) \t\t\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2665:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("       while (ISDIGIT (c)) \t\t\t\t\t"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("         { \t\t\t\t\t\t\t\t\\\n           "..., 'I', 28316) = 0x0259f292
[0x40cdf3] memchr("IS_CHAR_CLASS(string)\t\t\t\t\t\t\\\n   "..., '\n', 27976) = 0x0259f2ae
[0x4022d1] memchr("         { \t\t\t\t\t\t\t\t\\\n           "..., '\n', 332) = 0x0259f152
[0x4022d1] memchr("           if (num < 0)\t\t\t\t\t\t\t\\\n"..., '\n', 311) = 0x0259f172
[0x4022d1] memchr("              num = 0;\t\t\t\t\t\t\t\\\n "..., '\n', 279) = 0x0259f191
[0x4022d1] memchr("           num = num * 10 + c - "..., '\n', 248) = 0x0259f1bd
[0x4022d1] memchr("           if (p == pend) \t\t\t\t\t\t"..., '\n', 204) = 0x0259f1df
[0x4022d1] memchr("              break; \t\t\t\t\t\t\t\\\n  "..., '\n', 170) = 0x0259f1fd
[0x4022d1] memchr("           PATFETCH (c);\t\t\t\t\t\t\\\n"..., '\n', 140) = 0x0259f21d
[0x4022d1] memchr("         } \t\t\t\t\t\t\t\t\\\n       } \t\t"..., '\n', 108) = 0x0259f232
[0x4022d1] memchr("       } \t\t\t\t\t\t\t\t\\\n    }\t\t\n\n#def"..., '\n', 87) = 0x0259f245
[0x4022d1] memchr("    }\t\t\n\n#define CHAR_CLASS_MAX_"..., '\n', 68) = 0x0259f24d
[0x4022d1] memchr("\n#define CHAR_CLASS_MAX_LENGTH  "..., '\n', 60) = 0x0259f24e
[0x4022d1] memchr("#define CHAR_CLASS_MAX_LENGTH  6"..., '\n', 59) = 0x0259f288
[0x4022d1] memchr("\n#define IS_CHAR_CLASS(string)\t\t"..., '\n', 1) = 0x0259f289
[0x4022d1] memchr("#define IS_CHAR_CLASS(string)\t\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("2679:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define IS_CHAR_CLASS(string)\t\t\t"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   (STREQ (string, "alpha") || S"..., 'I', 27947) = 0x0259f44c
[0x40cdf3] memchr("IZE) according to SYNTAX.\n   Ret"..., '\n', 27534) = 0x0259f465
[0x4022d1] memchr("   (STREQ (string, "alpha") || S"..., '\n', 365) = 0x0259f2e9
[0x4022d1] memchr("    || STREQ (string, "lower") |"..., '\n', 306) = 0x0259f326
[0x4022d1] memchr("    || STREQ (string, "alnum") |"..., '\n', 245) = 0x0259f364
[0x4022d1] memchr("    || STREQ (string, "space") |"..., '\n', 183) = 0x0259f3a1
[0x4022d1] memchr("    || STREQ (string, "punct") |"..., '\n', 122) = 0x0259f3de
[0x4022d1] memchr("    || STREQ (string, "cntrl") |"..., '\n', 61) = 0x0259f419
[0x4022d1] memchr("\014\n/* `regex_compile' compiles PA"..., '\n', 2) = 0x0259f41b
[0x4022d1] memchr("/* `regex_compile' compiles PATT"..., '\n', 0) = NULL
[0x4023cc] fwrite("2687:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* `regex_compile' compiles PATT"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Returns one of error codes de"..., 'I', 27508) = 0x0259f51a
[0x40cdf3] memchr("If it succeeds, results are put "..., '\n', 27328) = 0x0259f55e
[0x4022d1] memchr("   Returns one of error codes de"..., '\n', 177) = 0x0259f4ae
[0x4022d1] memchr("\n   Assumes the `allocated' (and"..., '\n', 104) = 0x0259f4af
[0x4022d1] memchr("   Assumes the `allocated' (and "..., '\n', 103) = 0x0259f4f1
[0x4022d1] memchr("   fields are set in BUFP on ent"..., '\n', 37) = 0x0259f515
[0x4022d1] memchr("\n   If it succeeds, results are "..., '\n', 1) = 0x0259f516
[0x4022d1] memchr("   If it succeeds, results are p"..., '\n', 0) = NULL
[0x4023cc] fwrite("2693:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If it succeeds, results are p"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   contents of BUFP are undefine"..., 'I', 27259) = 0x0259ff1b
[0x40cdf3] memchr("INT1 ("\\nCompiling pattern: ");\n"..., '\n', 24767) = 0x0259ff3a
[0x4022d1] memchr("   contents of BUFP are undefine"..., '\n', 2482) = 0x0259f582
[0x4022d1] memchr("     `buffer' is the compiled pa"..., '\n', 2446) = 0x0259f5a9
[0x4022d1] memchr("     `syntax' is set to SYNTAX;\n"..., '\n', 2407) = 0x0259f5c9
[0x4022d1] memchr("     `used' is set to the length"..., '\n', 2375) = 0x0259f603
[0x4022d1] memchr("     `fastmap_accurate' is zero;"..., '\n', 2317) = 0x0259f624
[0x4022d1] memchr("     `re_nsub' is the number of "..., '\n', 2284) = 0x0259f65f
[0x4022d1] memchr("     `not_bol' and `not_eol' are"..., '\n', 2225) = 0x0259f686
[0x4022d1] memchr("   \n   The `fastmap' and `newlin"..., '\n', 2186) = 0x0259f68a
[0x4022d1] memchr("   The `fastmap' and `newline_an"..., '\n', 2182) = 0x0259f6c3
[0x4022d1] memchr("   examined nor set.  */\n\nstatic"..., '\n', 2125) = 0x0259f6dc
[0x4022d1] memchr("\nstatic reg_errcode_t\nregex_comp"..., '\n', 2100) = 0x0259f6dd
[0x4022d1] memchr("static reg_errcode_t\nregex_compi"..., '\n', 2099) = 0x0259f6f2
[0x4022d1] memchr("regex_compile (pattern, size, sy"..., '\n', 2078) = 0x0259f71e
[0x4022d1] memchr("     const char *pattern;\n     i"..., '\n', 2034) = 0x0259f738
[0x4022d1] memchr("     int size;\n     reg_syntax_t"..., '\n', 2008) = 0x0259f747
[0x4022d1] memchr("     reg_syntax_t syntax;\n     s"..., '\n', 1993) = 0x0259f761
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 1967) = 0x0259f786
[0x4022d1] memchr("{\n  /* We fetch characters from "..., '\n', 1930) = 0x0259f788
[0x4022d1] memchr("  /* We fetch characters from PA"..., '\n', 1928) = 0x0259f7cc
[0x4022d1] memchr("     `char *' (i.e., signed), we"..., '\n', 1860) = 0x0259f815
[0x4022d1] memchr("     they can be reliably used a"..., '\n', 1787) = 0x0259f84a
[0x4022d1] memchr("  register unsigned char c, c1;\n"..., '\n', 1734) = 0x0259f86a
[0x4022d1] memchr("  \n  /* A random tempory spot in"..., '\n', 1702) = 0x0259f86d
[0x4022d1] memchr("  /* A random tempory spot in PA"..., '\n', 1699) = 0x0259f898
[0x4022d1] memchr("  const char *p1;\n\n  /* Points t"..., '\n', 1656) = 0x0259f8aa
[0x4022d1] memchr("\n  /* Points to the end of the b"..., '\n', 1638) = 0x0259f8ab
[0x4022d1] memchr("  /* Points to the end of the bu"..., '\n', 1637) = 0x0259f8ed
[0x4022d1] memchr("  register unsigned char *b;\n  \n"..., '\n', 1571) = 0x0259f90a
[0x4022d1] memchr("  \n  /* Keeps track of unclosed "..., '\n', 1542) = 0x0259f90d
[0x4022d1] memchr("  /* Keeps track of unclosed gro"..., '\n', 1539) = 0x0259f936
[0x4022d1] memchr("  compile_stack_type compile_sta"..., '\n', 1498) = 0x0259f95a
[0x4022d1] memchr("\n  /* Points to the current (end"..., '\n', 1462) = 0x0259f95b
[0x4022d1] memchr("  /* Points to the current (endi"..., '\n', 1461) = 0x0259f99c
[0x4022d1] memchr("  const char *p = pattern;\n  con"..., '\n', 1396) = 0x0259f9b7
[0x4022d1] memchr("  const char *pend = pattern + s"..., '\n', 1369) = 0x0259f9dc
[0x4022d1] memchr("  \n  /* How to translate the cha"..., '\n', 1332) = 0x0259f9df
[0x4022d1] memchr("  /* How to translate the charac"..., '\n', 1329) = 0x0259fa18
[0x4022d1] memchr("  char *translate = bufp->transl"..., '\n', 1272) = 0x0259fa3d
[0x4022d1] memchr("\n  /* Address of the count-byte "..., '\n', 1235) = 0x0259fa3e
[0x4022d1] memchr("  /* Address of the count-byte o"..., '\n', 1234) = 0x0259fa84
[0x4022d1] memchr("     command.  This makes it pos"..., '\n', 1164) = 0x0259fac7
[0x4022d1] memchr("     character can be added to t"..., '\n', 1097) = 0x0259fb10
[0x4022d1] memchr("     a new `exactn' command.  */"..., '\n', 1024) = 0x0259fb31
[0x4022d1] memchr("  unsigned char *pending_exact ="..., '\n', 991) = 0x0259fb55
[0x4022d1] memchr("\n  /* Address of start of the mo"..., '\n', 955) = 0x0259fb56
[0x4022d1] memchr("  /* Address of start of the mos"..., '\n', 954) = 0x0259fb96
[0x4022d1] memchr("     This tells, e.g., postfix *"..., '\n', 890) = 0x0259fbd6
[0x4022d1] memchr("     operand.  Reset at the begi"..., '\n', 826) = 0x0259fc1c
[0x4022d1] memchr("  unsigned char *laststart = 0;\n"..., '\n', 756) = 0x0259fc3c
[0x4022d1] memchr("\n  /* Address of beginning of re"..., '\n', 724) = 0x0259fc3d
[0x4022d1] memchr("  /* Address of beginning of reg"..., '\n', 723) = 0x0259fc7f
[0x4022d1] memchr("  unsigned char *begalt;\n\n  /* P"..., '\n', 657) = 0x0259fc98
[0x4022d1] memchr("\n  /* Place in the uncompiled pa"..., '\n', 632) = 0x0259fc99
[0x4022d1] memchr("  /* Place in the uncompiled pat"..., '\n', 631) = 0x0259fccf
[0x4022d1] memchr("     which to go back if the int"..., '\n', 577) = 0x0259fd05
[0x4022d1] memchr("  const char *beg_interval;\n    "..., '\n', 523) = 0x0259fd21
[0x4022d1] memchr("                \n  /* Address of"..., '\n', 495) = 0x0259fd32
[0x4022d1] memchr("  /* Address of the place where "..., '\n', 478) = 0x0259fd79
[0x4022d1] memchr("     the containing expression. "..., '\n', 407) = 0x0259fdc4
[0x4022d1] memchr("     last -- ends with a forward"..., '\n', 332) = 0x0259fdfc
[0x4022d1] memchr("  unsigned char *fixup_alt_jump "..., '\n', 276) = 0x0259fe21
[0x4022d1] memchr("\n  /* Counts open-groups as they"..., '\n', 239) = 0x0259fe22
[0x4022d1] memchr("  /* Counts open-groups as they "..., '\n', 238) = 0x0259fe67
[0x4022d1] memchr("     matching close-group on the"..., '\n', 169) = 0x0259feac
[0x4022d1] memchr("     number is put in the stop_m"..., '\n', 100) = 0x0259feeb
[0x4022d1] memchr("  regnum_t regnum = 0;\n\n#ifdef D"..., '\n', 37) = 0x0259ff02
[0x4022d1] memchr("\n#ifdef DEBUG\n  DEBUG_PRINT1 ("\\"..., '\n', 14) = 0x0259ff03
[0x4022d1] memchr("#ifdef DEBUG\n  DEBUG_PRINT1 ("\\n"..., '\n', 13) = 0x0259ff10
[0x4022d1] memchr("  DEBUG_PRINT1 ("\\nCompiling pat"..., '\n', 0) = NULL
[0x4023cc] fwrite("2762:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("\\nCompiling pat"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (debug)\n    {\n      unsigne"..., 'I', 24735) = 0x025a000f
[0x40cdf3] memchr("Initialize the compile stack.  *"..., '\n', 24523) = 0x025a0030
[0x4022d1] memchr("  if (debug)\n    {\n      unsigne"..., '\n', 207) = 0x0259ff47
[0x4022d1] memchr("    {\n      unsigned debug_count"..., '\n', 194) = 0x0259ff4d
[0x4022d1] memchr("      unsigned debug_count;\n    "..., '\n', 188) = 0x0259ff69
[0x4022d1] memchr("      \n      for (debug_count = "..., '\n', 160) = 0x0259ff70
[0x4022d1] memchr("      for (debug_count = 0; debu"..., '\n', 153) = 0x0259ffaf
[0x4022d1] memchr("        printchar (pattern[debug"..., '\n', 90) = 0x0259ffd9
[0x4022d1] memchr("      putchar ('\\n');\n    }\n#end"..., '\n', 48) = 0x0259ffef
[0x4022d1] memchr("    }\n#endif /* DEBUG */\n\n  /* I"..., '\n', 26) = 0x0259fff5
[0x4022d1] memchr("#endif /* DEBUG */\n\n  /* Initial"..., '\n', 20) = 0x025a0008
[0x4022d1] memchr("\n  /* Initialize the compile sta"..., '\n', 1) = 0x025a0009
[0x4022d1] memchr("  /* Initialize the compile stac"..., '\n', 0) = NULL
[0x4023cc] fwrite("2773:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize the compile stac"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  compile_stack.stack = TALLOC ("..., 'I', 24489) = 0x025a0051
[0x40cdf3] memchr("INIT_COMPILE_STACK_SIZE, compile"..., '\n', 24457) = 0x025a007f
[0x4022d1] memchr("  compile_stack.stack = TALLOC ("..., '\n', 0) = NULL
[0x4023cc] fwrite("2774:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  compile_stack.stack = TALLOC ("..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (compile_stack.stack == NUL"..., 'I', 24410) = 0x025a00d2
[0x40cdf3] memchr("INIT_COMPILE_STACK_SIZE;\n  compi"..., '\n', 24328) = 0x025a00ea
[0x4022d1] memchr("  if (compile_stack.stack == NUL"..., '\n', 59) = 0x025a00a2
[0x4022d1] memchr("    return REG_ESPACE;\n\n  compil"..., '\n', 24) = 0x025a00b9
[0x4022d1] memchr("\n  compile_stack.size = INIT_COM"..., '\n', 1) = 0x025a00ba
[0x4022d1] memchr("  compile_stack.size = INIT_COMP"..., '\n', 0) = NULL
[0x4023cc] fwrite("2778:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  compile_stack.size = INIT_COMP"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  compile_stack.avail = 0;\n\n  /*"..., 'I', 24303) = 0x025a010c
[0x40cdf3] memchr("Initialize the pattern buffer.  "..., '\n', 24270) = 0x025a012e
[0x4022d1] memchr("  compile_stack.avail = 0;\n\n  /*"..., '\n', 28) = 0x025a0105
[0x4022d1] memchr("\n  /* Initialize the pattern buf"..., '\n', 1) = 0x025a0106
[0x4022d1] memchr("  /* Initialize the pattern buff"..., '\n', 0) = NULL
[0x4023cc] fwrite("2781:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize the pattern buff"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  bufp->syntax = syntax;\n  bufp-"..., 'I', 24235) = 0x025a02d4
[0x40cdf3] memchr("Initialize the syntax table.  */"..., '\n', 23814) = 0x025a02f4
[0x4022d1] memchr("  bufp->syntax = syntax;\n  bufp-"..., '\n', 416) = 0x025a0147
[0x4022d1] memchr("  bufp->fastmap_accurate = 0;\n  "..., '\n', 391) = 0x025a0165
[0x4022d1] memchr("  bufp->not_bol = bufp->not_eol "..., '\n', 361) = 0x025a018a
[0x4022d1] memchr("\n  /* Set `used' to zero, so tha"..., '\n', 324) = 0x025a018b
[0x4022d1] memchr("  /* Set `used' to zero, so that"..., '\n', 323) = 0x025a01cf
[0x4022d1] memchr("     printer (for debugging) wil"..., '\n', 255) = 0x025a0218
[0x4022d1] memchr("     at the end.  */\n  bufp->use"..., '\n', 182) = 0x025a022d
[0x4022d1] memchr("  bufp->used = 0;\n  \n  /* Always"..., '\n', 161) = 0x025a023f
[0x4022d1] memchr("  \n  /* Always count groups, whe"..., '\n', 143) = 0x025a0242
[0x4022d1] memchr("  /* Always count groups, whethe"..., '\n', 140) = 0x025a0284
[0x4022d1] memchr("  bufp->re_nsub = 0;\t\t\t\t\n\n#if !d"..., '\n', 74) = 0x025a029d
[0x4022d1] memchr("\n#if !defined (emacs) && !define"..., '\n', 49) = 0x025a029e
[0x4022d1] memchr("#if !defined (emacs) && !defined"..., '\n', 48) = 0x025a02ce
[0x4022d1] memchr("  /* Initialize the syntax table"..., '\n', 0) = NULL
[0x4023cc] fwrite("2795:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize the syntax table"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   init_syntax_once ();\n#endif\n\n"..., 'I', 23781) = 0x025a0355
[0x40cdf3] memchr("If zero allocated, but buffer is"..., '\n', 23685) = 0x025a038e
[0x4022d1] memchr("   init_syntax_once ();\n#endif\n\n"..., '\n', 90) = 0x025a030c
[0x4022d1] memchr("#endif\n\n  if (bufp->allocated =="..., '\n', 66) = 0x025a0313
[0x4022d1] memchr("\n  if (bufp->allocated == 0)\n   "..., '\n', 59) = 0x025a0314
[0x4022d1] memchr("  if (bufp->allocated == 0)\n    "..., '\n', 58) = 0x025a0330
[0x4022d1] memchr("    {\n      if (bufp->buffer)\n\t{"..., '\n', 30) = 0x025a0336
[0x4022d1] memchr("      if (bufp->buffer)\n\t{ /* If"..., '\n', 24) = 0x025a034e
[0x4022d1] memchr("\t{ /* If zero allocated, but buf"..., '\n', 0) = NULL
[0x4023cc] fwrite("2802:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t{ /* If zero allocated, but buf"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             enough space.  This"..., 'I', 23627) = 0x025a042e
[0x40cdf3] memchr("INIT_BUF_SIZE, unsigned char);\n "..., '\n', 23468) = 0x025a044c
[0x4022d1] memchr("             enough space.  This"..., '\n', 125) = 0x025a03d7
[0x4022d1] memchr("             that is the user's "..., '\n', 52) = 0x025a040b
[0x4022d1] memchr("          RETALLOC (bufp->buffer"..., '\n', 0) = NULL
[0x4023cc] fwrite("2805:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          RETALLOC (bufp->buffer"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        }\n      else\n        { /"..., 'I', 23437) = 0x025a04c7
[0x40cdf3] memchr("INIT_BUF_SIZE, unsigned char);\n "..., '\n', 23315) = 0x025a04e5
[0x4022d1] memchr("        }\n      else\n        { /"..., '\n', 89) = 0x025a0456
[0x4022d1] memchr("      else\n        { /* Caller d"..., '\n', 79) = 0x025a0461
[0x4022d1] memchr("        { /* Caller did not allo"..., '\n', 68) = 0x025a04a5
[0x4022d1] memchr("          bufp->buffer = TALLOC "..., '\n', 0) = NULL
[0x4023cc] fwrite("2809:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          bufp->buffer = TALLOC "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        }\n      if (!bufp->buffe"..., 'I', 23284) = 0x025a0535
[0x40cdf3] memchr("INIT_BUF_SIZE;\n    }\n\n  begalt ="..., '\n', 23205) = 0x025a0543
[0x4022d1] memchr("        }\n      if (!bufp->buffe"..., '\n', 55) = 0x025a04ef
[0x4022d1] memchr("      if (!bufp->buffer) return "..., '\n', 45) = 0x025a051b
[0x4022d1] memchr("\n      bufp->allocated = INIT_BU"..., '\n', 1) = 0x025a051c
[0x4022d1] memchr("      bufp->allocated = INIT_BUF"..., '\n', 0) = NULL
[0x4023cc] fwrite("2813:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      bufp->allocated = INIT_BUF"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n\n  begalt = b = bufp->buff"..., 'I', 23190) = 0x025a062c
[0x40cdf3] memchr("If at start of pattern, it's an "..., '\n', 22958) = 0x025a0659
[0x4022d1] memchr("    }\n\n  begalt = b = bufp->buff"..., '\n', 210) = 0x025a0549
[0x4022d1] memchr("\n  begalt = b = bufp->buffer;\n\n "..., '\n', 204) = 0x025a054a
[0x4022d1] memchr("  begalt = b = bufp->buffer;\n\n  "..., '\n', 203) = 0x025a0567
[0x4022d1] memchr("\n  /* Loop through the uncompile"..., '\n', 174) = 0x025a0568
[0x4022d1] memchr("  /* Loop through the uncompiled"..., '\n', 173) = 0x025a05ad
[0x4022d1] memchr("  while (p != pend)\n    {\n      "..., '\n', 104) = 0x025a05c1
[0x4022d1] memchr("    {\n      PATFETCH (c);\n\n     "..., '\n', 84) = 0x025a05c7
[0x4022d1] memchr("      PATFETCH (c);\n\n      switc"..., '\n', 78) = 0x025a05db
[0x4022d1] memchr("\n      switch (c)\n        {\n    "..., '\n', 58) = 0x025a05dc
[0x4022d1] memchr("      switch (c)\n        {\n     "..., '\n', 57) = 0x025a05ed
[0x4022d1] memchr("        {\n        case '^':\n    "..., '\n', 40) = 0x025a05f7
[0x4022d1] memchr("        case '^':\n          {\n  "..., '\n', 30) = 0x025a0609
[0x4022d1] memchr("          {\n            if (   /"..., '\n', 12) = 0x025a0615
[0x4022d1] memchr("            if (   /* If at star"..., '\n', 0) = NULL
[0x4023cc] fwrite("2827:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            if (   /* If at star"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   p == pattern "..., 'I', 22912) = 0x025a0694
[0x40cdf3] memchr("If context independent, it's an "..., '\n', 22854) = 0x025a06c1
[0x4022d1] memchr("                   p == pattern "..., '\n', 36) = 0x025a067d
[0x4022d1] memchr("                   /* If context"..., '\n', 0) = NULL
[0x4023cc] fwrite("2829:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                   /* If context"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                || syntax & RE_C"..., 'I', 22808) = 0x025a06e9
[0x40cdf3] memchr("INDEP_ANCHORS\n                  "..., '\n', 22769) = 0x025a06f6
[0x4022d1] memchr("                || syntax & RE_C"..., '\n', 0) = NULL
[0x4023cc] fwrite("2830:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                || syntax & RE_C"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   /* Otherwise,"..., 'I', 22755) = 0x025a081b
[0x40cdf3] memchr("If at end of pattern, it's an op"..., '\n', 22463) = 0x025a0846
[0x4022d1] memchr("                   /* Otherwise,"..., '\n', 270) = 0x025a073a
[0x4022d1] memchr("                || at_begline_lo"..., '\n', 202) = 0x025a0774
[0x4022d1] memchr("              BUF_PUSH (begline)"..., '\n', 144) = 0x025a0796
[0x4022d1] memchr("            else\n              g"..., '\n', 110) = 0x025a07a7
[0x4022d1] memchr("              goto normal_char;\n"..., '\n', 93) = 0x025a07c7
[0x4022d1] memchr("          }\n          break;\n\n\n "..., '\n', 61) = 0x025a07d3
[0x4022d1] memchr("          break;\n\n\n        case "..., '\n', 49) = 0x025a07e4
[0x4022d1] memchr("\n\n        case '$':\n          {\n"..., '\n', 32) = 0x025a07e5
[0x4022d1] memchr("\n        case '$':\n          {\n "..., '\n', 31) = 0x025a07e6
[0x4022d1] memchr("        case '$':\n          {\n  "..., '\n', 30) = 0x025a07f8
[0x4022d1] memchr("          {\n            if (   /"..., '\n', 12) = 0x025a0804
[0x4022d1] memchr("            if (   /* If at end "..., '\n', 0) = NULL
[0x4023cc] fwrite("2842:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            if (   /* If at end "..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   p == pend \n  "..., 'I', 22419) = 0x025a087b
[0x40cdf3] memchr("If context independent, it's an "..., '\n', 22367) = 0x025a08a8
[0x4022d1] memchr("                   p == pend \n  "..., '\n', 30) = 0x025a0864
[0x4022d1] memchr("                   /* If context"..., '\n', 0) = NULL
[0x4023cc] fwrite("2844:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                   /* If context"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                || syntax & RE_C"..., 'I', 22321) = 0x025a08d0
[0x40cdf3] memchr("INDEP_ANCHORS\n                  "..., '\n', 22282) = 0x025a08dd
[0x4022d1] memchr("                || syntax & RE_C"..., '\n', 0) = NULL
[0x4023cc] fwrite("2845:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                || syntax & RE_C"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   /* Otherwise,"..., 'I', 22268) = 0x025a0a2c
[0x40cdf3] memchr("IMITED_OPS))\n            goto no"..., '\n', 21934) = 0x025a0a38
[0x4022d1] memchr("                   /* Otherwise,"..., '\n', 303) = 0x025a091a
[0x4022d1] memchr("                || at_endline_lo"..., '\n', 242) = 0x025a0951
[0x4022d1] memchr("               BUF_PUSH (endline"..., '\n', 187) = 0x025a0974
[0x4022d1] memchr("             else\n              "..., '\n', 152) = 0x025a0986
[0x4022d1] memchr("               goto normal_char;"..., '\n', 134) = 0x025a09a7
[0x4022d1] memchr("           }\n           break;\n\n"..., '\n', 101) = 0x025a09b4
[0x4022d1] memchr("           break;\n\n\n\tcase '+':\n "..., '\n', 88) = 0x025a09c6
[0x4022d1] memchr("\n\n\tcase '+':\n        case '?':\n "..., '\n', 70) = 0x025a09c7
[0x4022d1] memchr("\n\tcase '+':\n        case '?':\n  "..., '\n', 69) = 0x025a09c8
[0x4022d1] memchr("\tcase '+':\n        case '?':\n   "..., '\n', 68) = 0x025a09d3
[0x4022d1] memchr("        case '?':\n          if ("..., '\n', 57) = 0x025a09e5
[0x4022d1] memchr("          if ((syntax & RE_BK_PL"..., '\n', 39) = 0x025a0a0c
[0x4022d1] memchr("              || (syntax & RE_LI"..., '\n', 0) = NULL
[0x4023cc] fwrite("2858:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              || (syntax & RE_LI"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            goto normal_char;\n  "..., 'I', 21921) = 0x025a0a8b
[0x40cdf3] memchr("If there is no previous pattern."..., '\n', 21839) = 0x025a0ab0
[0x4022d1] memchr("            goto normal_char;\n  "..., '\n', 69) = 0x025a0a56
[0x4022d1] memchr("        handle_plus:\n        cas"..., '\n', 39) = 0x025a0a6b
[0x4022d1] memchr("        case '*':\n          /* I"..., '\n', 18) = 0x025a0a7d
[0x4022d1] memchr("          /* If there is no prev"..., '\n', 0) = NULL
[0x4023cc] fwrite("2862:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If there is no prev"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (!laststart)\n      "..., 'I', 21801) = 0x025a0aff
[0x40cdf3] memchr("INVALID_OPS)\n                ret"..., '\n', 21723) = 0x025a0b0b
[0x4022d1] memchr("          if (!laststart)\n      "..., '\n', 40) = 0x025a0aca
[0x4022d1] memchr("            {\n              if ("..., '\n', 14) = 0x025a0ad8
[0x4022d1] memchr("              if (syntax & RE_CO"..., '\n', 0) = NULL
[0x4023cc] fwrite("2865:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (syntax & RE_CO"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                return REG_BADRP"..., 'I', 21710) = 0x025a0b5c
[0x40cdf3] memchr("INDEP_OPS))\n                goto"..., '\n', 21630) = 0x025a0b67
[0x4022d1] memchr("                return REG_BADRP"..., '\n', 35) = 0x025a0b2e
[0x4022d1] memchr("              else if (!(syntax "..., '\n', 0) = NULL
[0x4023cc] fwrite("2867:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              else if (!(syntax "..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                goto normal_char"..., 'I', 21618) = 0x025a0c8f
[0x40cdf3] memchr("If there is a sequence of repeti"..., '\n', 21323) = 0x025a0cc6
[0x4022d1] memchr("                goto normal_char"..., '\n', 280) = 0x025a0b89
[0x4022d1] memchr("            }\n\n          {\n     "..., '\n', 246) = 0x025a0b97
[0x4022d1] memchr("\n          {\n            /* Are "..., '\n', 232) = 0x025a0b98
[0x4022d1] memchr("          {\n            /* Are w"..., '\n', 231) = 0x025a0ba4
[0x4022d1] memchr("            /* Are we optimizing"..., '\n', 219) = 0x025a0bd4
[0x4022d1] memchr("            boolean keep_string_"..., '\n', 171) = 0x025a0bff
[0x4022d1] memchr("            \n            /* 1 me"..., '\n', 128) = 0x025a0c0c
[0x4022d1] memchr("            /* 1 means zero (man"..., '\n', 115) = 0x025a0c47
[0x4022d1] memchr("            char zero_times_ok ="..., '\n', 56) = 0x025a0c7e
[0x4022d1] memchr("\n            /* If there is a se"..., '\n', 1) = 0x025a0c7f
[0x4022d1] memchr("            /* If there is a seq"..., '\n', 0) = NULL
[0x4023cc] fwrite("2878:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            /* If there is a seq"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               down to just one "..., 'I', 21267) = 0x025a1120
[0x40cdf3] memchr("If we get here, we found another"..., '\n', 20154) = 0x025a1156
[0x4022d1] memchr("               down to just one "..., '\n', 1094) = 0x025a0d09
[0x4022d1] memchr("               interval operator"..., '\n', 1027) = 0x025a0d51
[0x4022d1] memchr("               which should only"..., '\n', 955) = 0x025a0d94
[0x4022d1] memchr("\n            for (;;)\n          "..., '\n', 888) = 0x025a0d95
[0x4022d1] memchr("            for (;;)\n           "..., '\n', 887) = 0x025a0daa
[0x4022d1] memchr("              {\n                "..., '\n', 866) = 0x025a0dba
[0x4022d1] memchr("                zero_times_ok |="..., '\n', 850) = 0x025a0de5
[0x4022d1] memchr("                many_times_ok |="..., '\n', 807) = 0x025a0e10
[0x4022d1] memchr("\n                if (p == pend)\n"..., '\n', 764) = 0x025a0e11
[0x4022d1] memchr("                if (p == pend)\n "..., '\n', 763) = 0x025a0e30
[0x4022d1] memchr("                  break;\n\n      "..., '\n', 732) = 0x025a0e49
[0x4022d1] memchr("\n                PATFETCH (c);\n\n"..., '\n', 707) = 0x025a0e4a
[0x4022d1] memchr("                PATFETCH (c);\n\n "..., '\n', 706) = 0x025a0e68
[0x4022d1] memchr("\n                if (c == '*'\n  "..., '\n', 676) = 0x025a0e69
[0x4022d1] memchr("                if (c == '*'\n   "..., '\n', 675) = 0x025a0e86
[0x4022d1] memchr("                    || (!(syntax"..., '\n', 646) = 0x025a0ed4
[0x4022d1] memchr("                  ;\n\n           "..., '\n', 568) = 0x025a0ee8
[0x4022d1] memchr("\n                else if (syntax"..., '\n', 548) = 0x025a0ee9
[0x4022d1] memchr("                else if (syntax "..., '\n', 547) = 0x025a0f29
[0x4022d1] memchr("                  {\n            "..., '\n', 483) = 0x025a0f3d
[0x4022d1] memchr("                    if (p == pen"..., '\n', 463) = 0x025a0f74
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 408) = 0x025a0f75
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 407) = 0x025a0f98
[0x4022d1] memchr("                    if (!(c1 == "..., '\n', 372) = 0x025a0fcb
[0x4022d1] memchr("                      {\n        "..., '\n', 321) = 0x025a0fe3
[0x4022d1] memchr("                        PATUNFET"..., '\n', 297) = 0x025a1007
[0x4022d1] memchr("                        PATUNFET"..., '\n', 261) = 0x025a102b
[0x4022d1] memchr("                        break;\n "..., '\n', 225) = 0x025a104a
[0x4022d1] memchr("                      }\n\n       "..., '\n', 194) = 0x025a1062
[0x4022d1] memchr("\n                    c = c1;\n   "..., '\n', 170) = 0x025a1063
[0x4022d1] memchr("                    c = c1;\n    "..., '\n', 169) = 0x025a107f
[0x4022d1] memchr("                  }\n            "..., '\n', 141) = 0x025a1093
[0x4022d1] memchr("                else\n           "..., '\n', 121) = 0x025a10a8
[0x4022d1] memchr("                  {\n            "..., '\n', 100) = 0x025a10bc
[0x4022d1] memchr("                    PATUNFETCH;\n"..., '\n', 80) = 0x025a10dc
[0x4022d1] memchr("                    break;\n     "..., '\n', 48) = 0x025a10f7
[0x4022d1] memchr("                  }\n\n           "..., '\n', 21) = 0x025a110b
[0x4022d1] memchr("\n                /* If we get he"..., '\n', 1) = 0x025a110c
[0x4022d1] memchr("                /* If we get her"..., '\n', 0) = NULL
[0x4023cc] fwrite("2917:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                /* If we get her"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               }\n\n            /*"..., 'I', 20099) = 0x025a17c1
[0x40cdf3] memchr("INE))\n                  { /* We "..., '\n', 18457) = 0x025a17c6
[0x4022d1] memchr("               }\n\n            /*"..., '\n', 1597) = 0x025a1167
[0x4022d1] memchr("\n            /* Star, etc. appli"..., '\n', 1580) = 0x025a1168
[0x4022d1] memchr("            /* Star, etc. applie"..., '\n', 1579) = 0x025a11ac
[0x4022d1] memchr("               to an empty patte"..., '\n', 1511) = 0x025a11d4
[0x4022d1] memchr("            if (!laststart)  \n  "..., '\n', 1471) = 0x025a11f2
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1441) = 0x025a1207
[0x4022d1] memchr("\n            /* Now we know whet"..., '\n', 1420) = 0x025a1208
[0x4022d1] memchr("            /* Now we know wheth"..., '\n', 1419) = 0x025a124a
[0x4022d1] memchr("               and also whether "..., '\n', 1353) = 0x025a1295
[0x4022d1] memchr("            if (many_times_ok)\n "..., '\n', 1278) = 0x025a12b4
[0x4022d1] memchr("              { /* More than one"..., '\n', 1247) = 0x025a12fd
[0x4022d1] memchr("                   end a backwar"..., '\n', 1174) = 0x025a1349
[0x4022d1] memchr("                   jump we're go"..., '\n', 1098) = 0x025a138f
[0x4022d1] memchr("                   laststart to "..., '\n', 1028) = 0x025a13c3
[0x4022d1] memchr("\n                   But if we ar"..., '\n', 976) = 0x025a13c4
[0x4022d1] memchr("                   But if we are"..., '\n', 975) = 0x025a140e
[0x4022d1] memchr("                   insert an unc"..., '\n', 901) = 0x025a1452
[0x4022d1] memchr("                   instead of th"..., '\n', 833) = 0x025a149d
[0x4022d1] memchr("                   push a failur"..., '\n', 758) = 0x025a14e1
[0x4022d1] memchr("                   through the l"..., '\n', 690) = 0x025a150a
[0x4022d1] memchr("                assert (p - 1 > "..., '\n', 649) = 0x025a1534
[0x4022d1] memchr("\n                /* Allocate the"..., '\n', 607) = 0x025a1535
[0x4022d1] memchr("                /* Allocate the "..., '\n', 606) = 0x025a156d
[0x4022d1] memchr("                GET_BUFFER_SPACE"..., '\n', 550) = 0x025a1593
[0x4022d1] memchr("\n                /* We know we a"..., '\n', 512) = 0x025a1594
[0x4022d1] memchr("                /* We know we ar"..., '\n', 511) = 0x025a15e1
[0x4022d1] memchr("                   because lasts"..., '\n', 434) = 0x025a1626
[0x4022d1] memchr("                   incremented `"..., '\n', 365) = 0x025a1670
[0x4022d1] memchr("                   the `*'.  Do "..., '\n', 291) = 0x025a16b7
[0x4022d1] memchr("                   for null byte"..., '\n', 220) = 0x025a16fa
[0x4022d1] memchr("                if (TRANSLATE (*"..., '\n', 153) = 0x025a1736
[0x4022d1] memchr("\t\t    && zero_times_ok\n         "..., '\n', 93) = 0x025a174d
[0x4022d1] memchr("                    && p < pend "..., '\n', 70) = 0x025a1793
[0x4022d1] memchr("                    && !(syntax "..., '\n', 0) = NULL
[0x4023cc] fwrite("2951:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    && !(syntax "..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  { /* We have ."..., 'I', 18451) = 0x025a1a03
[0x40cdf3] memchr("INSERT_JUMP (keep_string_p ? on_"..., '\n', 17879) = 0x025a1a3b
[0x4022d1] memchr("                  { /* We have ."..., '\n', 560) = 0x025a17ef
[0x4022d1] memchr("                    STORE_JUMP ("..., '\n', 519) = 0x025a1824
[0x4022d1] memchr("                    keep_string_"..., '\n', 466) = 0x025a184e
[0x4022d1] memchr("                  }\n            "..., '\n', 424) = 0x025a1862
[0x4022d1] memchr("                else\n           "..., '\n', 404) = 0x025a1877
[0x4022d1] memchr("                  /* Anything el"..., '\n', 383) = 0x025a189f
[0x4022d1] memchr("                  STORE_JUMP (ma"..., '\n', 343) = 0x025a18e0
[0x4022d1] memchr("\n                /* We've added "..., '\n', 278) = 0x025a18e1
[0x4022d1] memchr("                /* We've added m"..., '\n', 277) = 0x025a191e
[0x4022d1] memchr("                b += 3;\n        "..., '\n', 216) = 0x025a1936
[0x4022d1] memchr("              }\n\n            /* "..., '\n', 192) = 0x025a1946
[0x4022d1] memchr("\n            /* On failure, jump"..., '\n', 176) = 0x025a1947
[0x4022d1] memchr("            /* On failure, jump "..., '\n', 175) = 0x025a1992
[0x4022d1] memchr("               end of the buffer"..., '\n', 100) = 0x025a19d4
[0x4022d1] memchr("            GET_BUFFER_SPACE (3)"..., '\n', 34) = 0x025a19f6
[0x4022d1] memchr("            INSERT_JUMP (keep_st"..., '\n', 0) = NULL
[0x4023cc] fwrite("2967:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            INSERT_JUMP (keep_st"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 17822) = 0x025a1c6e
[0x40cdf3] memchr("INSERT_JUMP (dummy_failure_jump,"..., '\n', 17260) = 0x025a1ca9
[0x4022d1] memchr("                                "..., '\n', 546) = 0x025a1a75
[0x4022d1] memchr("                         laststa"..., '\n', 488) = 0x025a1aa1
[0x4022d1] memchr("            pending_exact = 0;\n "..., '\n', 444) = 0x025a1ac0
[0x4022d1] memchr("            b += 3;\n\n           "..., '\n', 413) = 0x025a1ad4
[0x4022d1] memchr("\n            if (!zero_times_ok)"..., '\n', 393) = 0x025a1ad5
[0x4022d1] memchr("            if (!zero_times_ok)\n"..., '\n', 392) = 0x025a1af5
[0x4022d1] memchr("              {\n                "..., '\n', 360) = 0x025a1b05
[0x4022d1] memchr("                /* At least one "..., '\n', 344) = 0x025a1b49
[0x4022d1] memchr("                   `dummy_failur"..., '\n', 276) = 0x025a1b84
[0x4022d1] memchr("                   `on_failure_j"..., '\n', 217) = 0x025a1bc7
[0x4022d1] memchr("                   effects a ski"..., '\n', 150) = 0x025a1c0e
[0x4022d1] memchr("                   we hit that l"..., '\n', 79) = 0x025a1c37
[0x4022d1] memchr("                GET_BUFFER_SPACE"..., '\n', 38) = 0x025a1c5d
[0x4022d1] memchr("                INSERT_JUMP (dum"..., '\n', 0) = NULL
[0x4023cc] fwrite("2981:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                INSERT_JUMP (dum"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                b += 3;\n        "..., 'I', 17200) = 0x025a202a
[0x40cdf3] memchr("IDTH) / BYTEWIDTH);\n\n           "..., '\n', 16304) = 0x025a203d
[0x4022d1] memchr("                b += 3;\n        "..., '\n', 863) = 0x025a1cc1
[0x4022d1] memchr("              }\n            }\n\t "..., '\n', 839) = 0x025a1cd1
[0x4022d1] memchr("            }\n\t  break;\n\n\n\tcase "..., '\n', 823) = 0x025a1cdf
[0x4022d1] memchr("\t  break;\n\n\n\tcase '.':\n         "..., '\n', 809) = 0x025a1ce9
[0x4022d1] memchr("\n\n\tcase '.':\n          laststart"..., '\n', 799) = 0x025a1cea
[0x4022d1] memchr("\n\tcase '.':\n          laststart "..., '\n', 798) = 0x025a1ceb
[0x4022d1] memchr("\tcase '.':\n          laststart ="..., '\n', 797) = 0x025a1cf6
[0x4022d1] memchr("          laststart = b;\n       "..., '\n', 786) = 0x025a1d0f
[0x4022d1] memchr("          BUF_PUSH (anychar);\n  "..., '\n', 761) = 0x025a1d2d
[0x4022d1] memchr("          break;\n\n\n        case "..., '\n', 731) = 0x025a1d3e
[0x4022d1] memchr("\n\n        case '[':\n          {\n"..., '\n', 714) = 0x025a1d3f
[0x4022d1] memchr("\n        case '[':\n          {\n "..., '\n', 713) = 0x025a1d40
[0x4022d1] memchr("        case '[':\n          {\n  "..., '\n', 712) = 0x025a1d52
[0x4022d1] memchr("          {\n            boolean "..., '\n', 694) = 0x025a1d5e
[0x4022d1] memchr("            boolean had_char_cla"..., '\n', 682) = 0x025a1d8a
[0x4022d1] memchr("\n            if (p == pend) retu"..., '\n', 638) = 0x025a1d8b
[0x4022d1] memchr("            if (p == pend) retur"..., '\n', 637) = 0x025a1db9
[0x4022d1] memchr("\n            /* Ensure that we h"..., '\n', 591) = 0x025a1dba
[0x4022d1] memchr("            /* Ensure that we ha"..., '\n', 590) = 0x025a1e01
[0x4022d1] memchr("               opcode, the lengt"..., '\n', 519) = 0x025a1e4f
[0x4022d1] memchr("\t    GET_BUFFER_SPACE (34);\n\n   "..., '\n', 441) = 0x025a1e6b
[0x4022d1] memchr("\n            laststart = b;\n\n   "..., '\n', 413) = 0x025a1e6c
[0x4022d1] memchr("            laststart = b;\n\n    "..., '\n', 412) = 0x025a1e87
[0x4022d1] memchr("\n            /* We test `*p == '"..., '\n', 385) = 0x025a1e88
[0x4022d1] memchr("            /* We test `*p == '^"..., '\n', 384) = 0x025a1ec8
[0x4022d1] memchr("               statement, so we "..., '\n', 320) = 0x025a1f04
[0x4022d1] memchr("            BUF_PUSH (*p == '^' "..., '\n', 260) = 0x025a1f3f
[0x4022d1] memchr("            if (*p == '^')\n     "..., '\n', 201) = 0x025a1f5a
[0x4022d1] memchr("              p++;\n\n            "..., '\n', 174) = 0x025a1f6d
[0x4022d1] memchr("\n            /* Remember the fir"..., '\n', 155) = 0x025a1f6e
[0x4022d1] memchr("            /* Remember the firs"..., '\n', 154) = 0x025a1fb8
[0x4022d1] memchr("            p1 = p;\n\n           "..., '\n', 80) = 0x025a1fcc
[0x4022d1] memchr("\n            /* Push the number "..., '\n', 60) = 0x025a1fcd
[0x4022d1] memchr("            /* Push the number o"..., '\n', 59) = 0x025a2008
[0x4022d1] memchr("            BUF_PUSH ((1 << BYTE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3016:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            BUF_PUSH ((1 << BYTE"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n            /* Clear the whole "..., 'I', 16284) = 0x025a2088
[0x40cdf3] memchr("IDTH) / BYTEWIDTH);\n\n           "..., '\n', 16210) = 0x025a209b
[0x4022d1] memchr("\n            /* Clear the whole "..., '\n', 41) = 0x025a203e
[0x4022d1] memchr("            /* Clear the whole m"..., '\n', 40) = 0x025a2066
[0x4022d1] memchr("            bzero (b, (1 << BYTE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3019:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            bzero (b, (1 << BYTE"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n            /* charset_not matc"..., 'I', 16190) = 0x025a213f
[0x40cdf3] memchr("ISTS_NOT_NEWLINE))\n             "..., '\n', 16027) = 0x025a2151
[0x4022d1] memchr("\n            /* charset_not matc"..., '\n', 126) = 0x025a209c
[0x4022d1] memchr("            /* charset_not match"..., '\n', 125) = 0x025a20e6
[0x4022d1] memchr("            if ((re_opcode_t) b["..., '\n', 51) = 0x025a2119
[0x4022d1] memchr("                && (syntax & RE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3023:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                && (syntax & RE_"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              SET_LIST_BIT ('\\n'"..., 'I', 16008) = 0x025a2165
[0x40cdf3] memchr("IST_BIT ('\\n');\n\n            /* "..., '\n', 15989) = 0x025a2174
[0x4022d1] memchr("              SET_LIST_BIT ('\\n'"..., '\n', 0) = NULL
[0x4023cc] fwrite("3024:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              SET_LIST_BIT ('\\n'"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n            /* Read in characte"..., 'I', 15973) = 0x025a22ad
[0x40cdf3] memchr("IN_LISTS) && c == '\\\\')\n        "..., '\n', 15661) = 0x025a22c4
[0x4022d1] memchr("\n            /* Read in characte"..., '\n', 262) = 0x025a2175
[0x4022d1] memchr("            /* Read in character"..., '\n', 261) = 0x025a21b9
[0x4022d1] memchr("            for (;;)\n           "..., '\n', 193) = 0x025a21ce
[0x4022d1] memchr("              {\n                "..., '\n', 172) = 0x025a21de
[0x4022d1] memchr("                if (p == pend) r"..., '\n', 156) = 0x025a2210
[0x4022d1] memchr("\n                PATFETCH (c);\n\n"..., '\n', 106) = 0x025a2211
[0x4022d1] memchr("                PATFETCH (c);\n\n "..., '\n', 105) = 0x025a222f
[0x4022d1] memchr("\n                /* \\ might esca"..., '\n', 75) = 0x025a2230
[0x4022d1] memchr("                /* \\ might escap"..., '\n', 74) = 0x025a227a
[0x4022d1] memchr("                if ((syntax & RE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3034:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                if ((syntax & RE"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  {\n            "..., 'I', 15637) = 0x025a234d
[0x40cdf3] memchr("IST_BIT (c1);\n                  "..., '\n', 15501) = 0x025a235a
[0x4022d1] memchr("                  {\n            "..., '\n', 111) = 0x025a22d8
[0x4022d1] memchr("                    if (p == pen"..., '\n', 91) = 0x025a230f
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 36) = 0x025a2310
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 35) = 0x025a2333
[0x4022d1] memchr("                    SET_LIST_BIT"..., '\n', 0) = NULL
[0x4023cc] fwrite("3039:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    SET_LIST_BIT"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    continue;\n  "..., 'I', 15487) = 0x025a23ce
[0x40cdf3] memchr("If it's\n                   not ("..., '\n', 15372) = 0x025a23d5
[0x4022d1] memchr("                    continue;\n  "..., '\n', 51) = 0x025a2378
[0x4022d1] memchr("                  }\n\n           "..., '\n', 21) = 0x025a238c
[0x4022d1] memchr("\n                /* Could be the"..., '\n', 1) = 0x025a238d
[0x4022d1] memchr("                /* Could be the "..., '\n', 0) = NULL
[0x4023cc] fwrite("3043:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                /* Could be the "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   not (i.e., wh"..., 'I', 15364) = 0x025a2b1c
[0x40cdf3] memchr("If pattern is `[[:'.  */\n       "..., '\n', 13502) = 0x025a2b34
[0x4022d1] memchr("                   not (i.e., wh"..., '\n', 1839) = 0x025a241a
[0x4022d1] memchr("                   far), the ']'"..., '\n', 1770) = 0x025a2461
[0x4022d1] memchr("                if (c == ']' && "..., '\n', 1699) = 0x025a248e
[0x4022d1] memchr("                  break;\n\n      "..., '\n', 1654) = 0x025a24a7
[0x4022d1] memchr("\n                /* Look ahead t"..., '\n', 1629) = 0x025a24a8
[0x4022d1] memchr("                /* Look ahead to"..., '\n', 1628) = 0x025a24f1
[0x4022d1] memchr("                   was a charact"..., '\n', 1555) = 0x025a251f
[0x4022d1] memchr("                if (had_char_cla"..., '\n', 1509) = 0x025a255c
[0x4022d1] memchr("                  return REG_ERA"..., '\n', 1448) = 0x025a2581
[0x4022d1] memchr("\n                /* Look ahead t"..., '\n', 1411) = 0x025a2582
[0x4022d1] memchr("                /* Look ahead to"..., '\n', 1410) = 0x025a25cb
[0x4022d1] memchr("                   was a charact"..., '\n', 1337) = 0x025a260e
[0x4022d1] memchr("                   beginning or "..., '\n', 1270) = 0x025a2655
[0x4022d1] memchr("                   operator.  */"..., '\n', 1199) = 0x025a2676
[0x4022d1] memchr("                if (c == '-' \n  "..., '\n', 1166) = 0x025a2694
[0x4022d1] memchr("                    && !(p - 2 >"..., '\n', 1136) = 0x025a26d0
[0x4022d1] memchr("                    && !(p - 3 >"..., '\n', 1076) = 0x025a271b
[0x4022d1] memchr("                    && *p != ']'"..., '\n', 1001) = 0x025a273d
[0x4022d1] memchr("                  {\n            "..., '\n', 967) = 0x025a2751
[0x4022d1] memchr("                    reg_errcode_"..., '\n', 947) = 0x025a2777
[0x4022d1] memchr("                      = compile_"..., '\n', 909) = 0x025a27bf
[0x4022d1] memchr("                    if (ret != R"..., '\n', 837) = 0x025a27f7
[0x4022d1] memchr("                  }\n\n           "..., '\n', 781) = 0x025a280b
[0x4022d1] memchr("\n                else if (p[0] ="..., '\n', 761) = 0x025a280c
[0x4022d1] memchr("                else if (p[0] =="..., '\n', 760) = 0x025a2841
[0x4022d1] memchr("                  { /* This hand"..., '\n', 707) = 0x025a288c
[0x4022d1] memchr("                    reg_errcode_"..., '\n', 632) = 0x025a28b3
[0x4022d1] memchr("\n\t\t    /* Move past the `-'.  */"..., '\n', 593) = 0x025a28b4
[0x4022d1] memchr("\t\t    /* Move past the `-'.  */\n"..., '\n', 592) = 0x025a28d4
[0x4022d1] memchr("                    PATFETCH (c1"..., '\n', 560) = 0x025a28f7
[0x4022d1] memchr("                    \n           "..., '\n', 525) = 0x025a290c
[0x4022d1] memchr("                    ret = compil"..., '\n', 504) = 0x025a2956
[0x4022d1] memchr("                    if (ret != R"..., '\n', 430) = 0x025a298e
[0x4022d1] memchr("                  }\n\n           "..., '\n', 374) = 0x025a29a2
[0x4022d1] memchr("\n                /* See if we're"..., '\n', 354) = 0x025a29a3
[0x4022d1] memchr("                /* See if we're "..., '\n', 353) = 0x025a29ec
[0x4022d1] memchr("                   class.  */\n\n "..., '\n', 280) = 0x025a2a0a
[0x4022d1] memchr("\n                else if (syntax"..., '\n', 250) = 0x025a2a0b
[0x4022d1] memchr("                else if (syntax "..., '\n', 249) = 0x025a2a57
[0x4022d1] memchr("                  { /* Leave roo"..., '\n', 173) = 0x025a2a8b
[0x4022d1] memchr("                    char str[CHA"..., '\n', 121) = 0x025a2ac4
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 64) = 0x025a2ac5
[0x4022d1] memchr("                    PATFETCH (c)"..., '\n', 63) = 0x025a2ae7
[0x4022d1] memchr("                    c1 = 0;\n\n   "..., '\n', 29) = 0x025a2b03
[0x4022d1] memchr("\n                    /* If patte"..., '\n', 1) = 0x025a2b04
[0x4022d1] memchr("                    /* If patter"..., '\n', 0) = NULL
[0x4023cc] fwrite("3089:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    /* If patter"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    if (p == pen"..., 'I', 13477) = 0x025a2cdd
[0x40cdf3] memchr("If isn't a word bracketed by `[:"..., '\n', 13053) = 0x025a2d07
[0x4022d1] memchr("                    if (p == pen"..., '\n', 401) = 0x025a2b6a
[0x4022d1] memchr("\n                    for (;;)\n  "..., '\n', 347) = 0x025a2b6b
[0x4022d1] memchr("                    for (;;)\n   "..., '\n', 346) = 0x025a2b88
[0x4022d1] memchr("                      {\n        "..., '\n', 317) = 0x025a2ba0
[0x4022d1] memchr("                        PATFETCH"..., '\n', 293) = 0x025a2bc6
[0x4022d1] memchr("                        if (c =="..., '\n', 255) = 0x025a2c04
[0x4022d1] memchr("                            || c"..., '\n', 193) = 0x025a2c40
[0x4022d1] memchr("                          break;"..., '\n', 133) = 0x025a2c61
[0x4022d1] memchr("                        str[c1++"..., '\n', 100) = 0x025a2c88
[0x4022d1] memchr("                      }\n        "..., '\n', 61) = 0x025a2ca0
[0x4022d1] memchr("                    str[c1] = '\\"..., '\n', 37) = 0x025a2cc4
[0x4022d1] memchr("\n                    /* If isn't"..., '\n', 1) = 0x025a2cc5
[0x4022d1] memchr("                    /* If isn't "..., '\n', 0) = NULL
[0x4023cc] fwrite("3102:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    /* If isn't "..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                       undo the "..., 'I', 13010) = 0x025a3149
[0x40cdf3] memchr("IS_CHAR_CLASS (str)) return REG_"..., '\n', 11921) = 0x025a3170
[0x4022d1] memchr("                       undo the "..., '\n', 1060) = 0x025a2d51
[0x4022d1] memchr("                       the leadi"..., '\n', 986) = 0x025a2d9d
[0x4022d1] memchr("                    if (c == ':'"..., '\n', 910) = 0x025a2dcc
[0x4022d1] memchr("                      {\n        "..., '\n', 863) = 0x025a2de4
[0x4022d1] memchr("                        int ch;\n"..., '\n', 839) = 0x025a2e04
[0x4022d1] memchr("                        boolean "..., '\n', 807) = 0x025a2e45
[0x4022d1] memchr("                        boolean "..., '\n', 742) = 0x025a2e86
[0x4022d1] memchr("                        boolean "..., '\n', 677) = 0x025a2ec7
[0x4022d1] memchr("                        boolean "..., '\n', 612) = 0x025a2f08
[0x4022d1] memchr("                        boolean "..., '\n', 547) = 0x025a2f49
[0x4022d1] memchr("                        boolean "..., '\n', 482) = 0x025a2f8a
[0x4022d1] memchr("                        boolean "..., '\n', 417) = 0x025a2fcb
[0x4022d1] memchr("                        boolean "..., '\n', 352) = 0x025a300c
[0x4022d1] memchr("                        boolean "..., '\n', 287) = 0x025a304d
[0x4022d1] memchr("                        boolean "..., '\n', 222) = 0x025a308e
[0x4022d1] memchr("                        boolean "..., '\n', 157) = 0x025a30cf
[0x4022d1] memchr("                        boolean "..., '\n', 92) = 0x025a3112
[0x4022d1] memchr("                        \n       "..., '\n', 25) = 0x025a312b
[0x4022d1] memchr("                        if (!IS_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3121:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                        if (!IS_"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n                        /* Thro"..., 'I', 11881) = 0x025a327b
[0x40cdf3] memchr("IDTH; ch++)\n                    "..., '\n', 11615) = 0x025a3286
[0x4022d1] memchr("\n                        /* Thro"..., '\n', 214) = 0x025a3171
[0x4022d1] memchr("                        /* Throw"..., '\n', 213) = 0x025a31b9
[0x4022d1] memchr("                           class"..., '\n', 141) = 0x025a31df
[0x4022d1] memchr("                        PATFETCH"..., '\n', 103) = 0x025a320a
[0x4022d1] memchr("\n                        if (p ="..., '\n', 60) = 0x025a320b
[0x4022d1] memchr("                        if (p =="..., '\n', 59) = 0x025a3245
[0x4022d1] memchr("\n                        for (ch"..., '\n', 1) = 0x025a3246
[0x4022d1] memchr("                        for (ch "..., '\n', 0) = NULL
[0x4023cc] fwrite("3129:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                        for (ch "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                          {\n    "..., 'I', 11603) = 0x025a32d4
[0x40cdf3] memchr("ISALNUM (ch))\n                  "..., '\n', 11526) = 0x025a32e1
[0x4022d1] memchr("                          {\n    "..., '\n', 28) = 0x025a32a2
[0x4022d1] memchr("                            if ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3131:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                            if ("..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11512) = 0x025a3313
[0x40cdf3] memchr("ISALPHA (ch))\n                  "..., '\n', 11463) = 0x025a3320
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3132:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11449) = 0x025a3352
[0x40cdf3] memchr("ISBLANK (ch))\n                  "..., '\n', 11400) = 0x025a335f
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3133:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11386) = 0x025a3391
[0x40cdf3] memchr("ISCNTRL (ch))\n                  "..., '\n', 11337) = 0x025a339e
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3134:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11323) = 0x025a33d0
[0x40cdf3] memchr("ISDIGIT (ch))\n                  "..., '\n', 11274) = 0x025a33dd
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3135:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11260) = 0x025a340f
[0x40cdf3] memchr("ISGRAPH (ch))\n                  "..., '\n', 11211) = 0x025a341c
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3136:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11197) = 0x025a344e
[0x40cdf3] memchr("ISLOWER (ch))\n                  "..., '\n', 11148) = 0x025a345b
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3137:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11134) = 0x025a348d
[0x40cdf3] memchr("ISPRINT (ch))\n                  "..., '\n', 11085) = 0x025a349a
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3138:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11071) = 0x025a34cc
[0x40cdf3] memchr("ISPUNCT (ch))\n                  "..., '\n', 11022) = 0x025a34d9
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3139:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 11008) = 0x025a350b
[0x40cdf3] memchr("ISSPACE (ch))\n                  "..., '\n', 10959) = 0x025a3518
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3140:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 10945) = 0x025a354a
[0x40cdf3] memchr("ISUPPER (ch))\n                  "..., '\n', 10896) = 0x025a3557
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3141:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 10882) = 0x025a3589
[0x40cdf3] memchr("ISXDIGIT (ch)))\n                "..., '\n', 10833) = 0x025a3598
[0x4022d1] memchr("                                "..., '\n', 0) = NULL
[0x4023cc] fwrite("3142:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                                "..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                            SET_"..., 'I', 10817) = 0x025a35ba
[0x40cdf3] memchr("IST_BIT (ch);\n                  "..., '\n', 10784) = 0x025a35c7
[0x4022d1] memchr("                            SET_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3143:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                            SET_"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                          }\n    "..., 'I', 10770) = 0x025a36e6
[0x40cdf3] memchr("IST_BIT ('[');\n                 "..., '\n', 10484) = 0x025a36f4
[0x4022d1] memchr("                          }\n    "..., '\n', 257) = 0x025a35e3
[0x4022d1] memchr("                        had_char"..., '\n', 229) = 0x025a3612
[0x4022d1] memchr("                      }\n        "..., '\n', 182) = 0x025a362a
[0x4022d1] memchr("                    else\n       "..., '\n', 158) = 0x025a3643
[0x4022d1] memchr("                      {\n        "..., '\n', 133) = 0x025a365b
[0x4022d1] memchr("                        c1++;\n  "..., '\n', 109) = 0x025a3679
[0x4022d1] memchr("                        while (c"..., '\n', 79) = 0x025a36a2
[0x4022d1] memchr("                          PATUNF"..., '\n', 38) = 0x025a36c8
[0x4022d1] memchr("                        SET_LIST"..., '\n', 0) = NULL
[0x4023cc] fwrite("3152:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                        SET_LIST"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        SET_LIST"..., 'I', 10469) = 0x025a3712
[0x40cdf3] memchr("IST_BIT (':');\n                 "..., '\n', 10440) = 0x025a3720
[0x4022d1] memchr("                        SET_LIST"..., '\n', 0) = NULL
[0x4023cc] fwrite("3153:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                        SET_LIST"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        had_char"..., 'I', 10425) = 0x025a37eb
[0x40cdf3] memchr("IST_BIT (c);\n                  }"..., '\n', 10223) = 0x025a37f7
[0x4022d1] memchr("                        had_char"..., '\n', 177) = 0x025a3750
[0x4022d1] memchr("                      }\n        "..., '\n', 129) = 0x025a3768
[0x4022d1] memchr("                  }\n            "..., '\n', 105) = 0x025a377c
[0x4022d1] memchr("                else\n           "..., '\n', 85) = 0x025a3791
[0x4022d1] memchr("                  {\n            "..., '\n', 64) = 0x025a37a5
[0x4022d1] memchr("                    had_char_cla"..., '\n', 44) = 0x025a37d1
[0x4022d1] memchr("                    SET_LIST_BIT"..., '\n', 0) = NULL
[0x4023cc] fwrite("3160:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    SET_LIST_BIT"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  }\n            "..., 'I', 10210) = 0x025a3a6f
[0x40cdf3] memchr("INE_ALT)\n            goto handle"..., '\n', 9579) = 0x025a3a77
[0x4022d1] memchr("                  }\n            "..., '\n', 601) = 0x025a380b
[0x4022d1] memchr("              }\n\n            /* "..., '\n', 581) = 0x025a381b
[0x4022d1] memchr("\n            /* Discard any (non"..., '\n', 565) = 0x025a381c
[0x4022d1] memchr("            /* Discard any (non)"..., '\n', 564) = 0x025a3866
[0x4022d1] memchr("               end of the map.  "..., '\n', 490) = 0x025a38ac
[0x4022d1] memchr("            while ((int) b[-1] >"..., '\n', 420) = 0x025a38e6
[0x4022d1] memchr("              b[-1]--; \n        "..., '\n', 362) = 0x025a38fe
[0x4022d1] memchr("            b += b[-1];\n        "..., '\n', 338) = 0x025a3916
[0x4022d1] memchr("          }\n          break;\n\n\n\t"..., '\n', 314) = 0x025a3922
[0x4022d1] memchr("          break;\n\n\n\tcase '(':\n  "..., '\n', 302) = 0x025a3933
[0x4022d1] memchr("\n\n\tcase '(':\n          if (synta"..., '\n', 285) = 0x025a3934
[0x4022d1] memchr("\n\tcase '(':\n          if (syntax"..., '\n', 284) = 0x025a3935
[0x4022d1] memchr("\tcase '(':\n          if (syntax "..., '\n', 283) = 0x025a3940
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 272) = 0x025a3968
[0x4022d1] memchr("            goto handle_open;\n  "..., '\n', 232) = 0x025a3986
[0x4022d1] memchr("          else\n            goto "..., '\n', 202) = 0x025a3995
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 187) = 0x025a39b3
[0x4022d1] memchr("\n\n        case ')':\n          if"..., '\n', 157) = 0x025a39b4
[0x4022d1] memchr("\n        case ')':\n          if "..., '\n', 156) = 0x025a39b5
[0x4022d1] memchr("        case ')':\n          if ("..., '\n', 155) = 0x025a39c7
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 137) = 0x025a39ef
[0x4022d1] memchr("            goto handle_close;\n "..., '\n', 97) = 0x025a3a0e
[0x4022d1] memchr("          else\n            goto "..., '\n', 66) = 0x025a3a1d
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 51) = 0x025a3a3b
[0x4022d1] memchr("\n\n        case '\\n':\n          i"..., '\n', 21) = 0x025a3a3c
[0x4022d1] memchr("\n        case '\\n':\n          if"..., '\n', 20) = 0x025a3a3d
[0x4022d1] memchr("        case '\\n':\n          if "..., '\n', 19) = 0x025a3a50
[0x4022d1] memchr("          if (syntax & RE_NEWLIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("3188:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (syntax & RE_NEWLIN"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            goto handle_alt;\n   "..., 'I', 9570) = 0x025a3b6e
[0x40cdf3] memchr("INTERVALS && syntax & RE_NO_BK_B"..., '\n', 9324) = 0x025a3b94
[0x4022d1] memchr("            goto handle_alt;\n   "..., '\n', 219) = 0x025a3a94
[0x4022d1] memchr("          else\n            goto "..., '\n', 190) = 0x025a3aa3
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 175) = 0x025a3ac1
[0x4022d1] memchr("\n\n\tcase '|':\n          if (synta"..., '\n', 145) = 0x025a3ac2
[0x4022d1] memchr("\n\tcase '|':\n          if (syntax"..., '\n', 144) = 0x025a3ac3
[0x4022d1] memchr("\tcase '|':\n          if (syntax "..., '\n', 143) = 0x025a3ace
[0x4022d1] memchr("          if (syntax & RE_NO_BK_"..., '\n', 132) = 0x025a3af4
[0x4022d1] memchr("            goto handle_alt;\n   "..., '\n', 94) = 0x025a3b11
[0x4022d1] memchr("          else\n            goto "..., '\n', 65) = 0x025a3b20
[0x4022d1] memchr("            goto normal_char;\n\n\n"..., '\n', 50) = 0x025a3b3e
[0x4022d1] memchr("\n\n        case '{':\n           i"..., '\n', 20) = 0x025a3b3f
[0x4022d1] memchr("\n        case '{':\n           if"..., '\n', 19) = 0x025a3b40
[0x4022d1] memchr("        case '{':\n           if "..., '\n', 18) = 0x025a3b52
[0x4022d1] memchr("           if (syntax & RE_INTER"..., '\n', 0) = NULL
[0x4023cc] fwrite("3202:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("           if (syntax & RE_INTER"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             goto handle_interva"..., 'I', 9285) = 0x025a3df3
[0x40cdf3] memchr("ILE_STACK_FULL)\n                "..., '\n', 8679) = 0x025a3e02
[0x4022d1] memchr("             goto handle_interva"..., '\n', 584) = 0x025a3bb7
[0x4022d1] memchr("           else\n             got"..., '\n', 549) = 0x025a3bc7
[0x4022d1] memchr("             goto normal_char;\n\n"..., '\n', 533) = 0x025a3be6
[0x4022d1] memchr("\n\n        case '\\\\':\n          i"..., '\n', 502) = 0x025a3be7
[0x4022d1] memchr("\n        case '\\\\':\n          if"..., '\n', 501) = 0x025a3be8
[0x4022d1] memchr("        case '\\\\':\n          if "..., '\n', 500) = 0x025a3bfb
[0x4022d1] memchr("          if (p == pend) return "..., '\n', 481) = 0x025a3c28
[0x4022d1] memchr("\n          /* Do not translate t"..., '\n', 436) = 0x025a3c29
[0x4022d1] memchr("          /* Do not translate th"..., '\n', 435) = 0x025a3c71
[0x4022d1] memchr("             distinguish, e.g., "..., '\n', 363) = 0x025a3cb7
[0x4022d1] memchr("             translate, e.g., B "..., '\n', 293) = 0x025a3ce1
[0x4022d1] memchr("          PATFETCH_RAW (c);\n\n   "..., '\n', 251) = 0x025a3cfd
[0x4022d1] memchr("\n          switch (c)\n          "..., '\n', 223) = 0x025a3cfe
[0x4022d1] memchr("          switch (c)\n           "..., '\n', 222) = 0x025a3d13
[0x4022d1] memchr("            {\n            case '"..., '\n', 201) = 0x025a3d21
[0x4022d1] memchr("            case '(':\n          "..., '\n', 187) = 0x025a3d37
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 165) = 0x025a3d63
[0x4022d1] memchr("                goto normal_back"..., '\n', 121) = 0x025a3d8a
[0x4022d1] memchr("\n            handle_open:\n      "..., '\n', 82) = 0x025a3d8b
[0x4022d1] memchr("            handle_open:\n       "..., '\n', 81) = 0x025a3da4
[0x4022d1] memchr("              bufp->re_nsub++;\n "..., '\n', 56) = 0x025a3dc3
[0x4022d1] memchr("              regnum++;\n\n       "..., '\n', 25) = 0x025a3ddb
[0x4022d1] memchr("\n              if (COMPILE_STACK"..., '\n', 1) = 0x025a3ddc
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3226:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (COMPILE_STACK_"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                { \n             "..., 'I', 8663) = 0x025a4022
[0x40cdf3] memchr("ILE_STACK_TOP.begalt_offset = be"..., '\n', 8120) = 0x025a4056
[0x4022d1] memchr("                { \n             "..., '\n', 525) = 0x025a3e15
[0x4022d1] memchr("                  RETALLOC (comp"..., '\n', 506) = 0x025a3e5f
[0x4022d1] memchr("                            comp"..., '\n', 432) = 0x025a3e91
[0x4022d1] memchr("                  if (compile_st"..., '\n', 382) = 0x025a3ed7
[0x4022d1] memchr("\n                  compile_stack"..., '\n', 312) = 0x025a3ed8
[0x4022d1] memchr("                  compile_stack."..., '\n', 311) = 0x025a3f04
[0x4022d1] memchr("                }\n\n             "..., '\n', 267) = 0x025a3f16
[0x4022d1] memchr("\n              /* These are the "..., '\n', 249) = 0x025a3f17
[0x4022d1] memchr("              /* These are the v"..., '\n', 248) = 0x025a3f60
[0x4022d1] memchr("                 group.  They ar"..., '\n', 175) = 0x025a3fa7
[0x4022d1] memchr("                 whole pattern m"..., '\n', 104) = 0x025a3ff0
[0x4022d1] memchr("                 be valid.  */\n "..., '\n', 31) = 0x025a400f
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 0) = NULL
[0x4023cc] fwrite("3239:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              COMPILE_STACK_TOP."..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              COMPILE_STACK_TOP."..., 'I', 8067) = 0x025a4069
[0x40cdf3] memchr("ILE_STACK_TOP.fixup_alt_jump \n  "..., '\n', 8049) = 0x025a4086
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 0) = NULL
[0x4023cc] fwrite("3240:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              COMPILE_STACK_TOP."..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                = fixup_alt_jump"..., 'I', 8019) = 0x025a40e3
[0x40cdf3] memchr("ILE_STACK_TOP.laststart_offset ="..., '\n', 7927) = 0x025a4115
[0x4022d1] memchr("                = fixup_alt_jump"..., '\n', 74) = 0x025a40d0
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 0) = NULL
[0x4023cc] fwrite("3242:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              COMPILE_STACK_TOP."..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              COMPILE_STACK_TOP."..., 'I', 7876) = 0x025a4128
[0x40cdf3] memchr("ILE_STACK_TOP.regnum = regnum;\n\n"..., '\n', 7858) = 0x025a4146
[0x4022d1] memchr("              COMPILE_STACK_TOP."..., '\n', 0) = NULL
[0x4023cc] fwrite("3243:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              COMPILE_STACK_TOP."..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n              /* We will eventu"..., 'I', 7827) = 0x025a4297
[0x40cdf3] memchr("ILE_STACK_TOP.inner_group_offset"..., '\n', 7491) = 0x025a42cf
[0x4022d1] memchr("\n              /* We will eventu"..., '\n', 314) = 0x025a4147
[0x4022d1] memchr("              /* We will eventua"..., '\n', 313) = 0x025a418c
[0x4022d1] memchr("                 groups inner to"..., '\n', 244) = 0x025a41ca
[0x4022d1] memchr("                 start_memory fo"..., '\n', 182) = 0x025a420e
[0x4022d1] memchr("                 represent in th"..., '\n', 114) = 0x025a4246
[0x4022d1] memchr("              if (regnum <= MAX_"..., '\n', 58) = 0x025a426e
[0x4022d1] memchr("                {\n              "..., '\n', 18) = 0x025a4280
[0x4022d1] memchr("                  COMPILE_STACK_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3251:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  COMPILE_STACK_"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  BUF_PUSH_3 (st"..., 'I', 7434) = 0x025a43b4
[0x40cdf3] memchr("If we've reached MAX_REGNUM grou"..., '\n', 7206) = 0x025a43e6
[0x4022d1] memchr("                  BUF_PUSH_3 (st"..., '\n', 218) = 0x025a4307
[0x4022d1] memchr("                }\n              "..., '\n', 162) = 0x025a4319
[0x4022d1] memchr("                \n              c"..., '\n', 144) = 0x025a432a
[0x4022d1] memchr("              compile_stack.avai"..., '\n', 127) = 0x025a434f
[0x4022d1] memchr("\n              fixup_alt_jump = "..., '\n', 90) = 0x025a4350
[0x4022d1] memchr("              fixup_alt_jump = 0"..., '\n', 89) = 0x025a4372
[0x4022d1] memchr("              laststart = 0;\n   "..., '\n', 55) = 0x025a438f
[0x4022d1] memchr("              begalt = b;\n\t     "..., '\n', 26) = 0x025a43a9
[0x4022d1] memchr("\t      /* If we've reached MAX_R"..., '\n', 0) = NULL
[0x4023cc] fwrite("3260:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      /* If we've reached MAX_R"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t won't actually generate any c"..., 'I', 7155) = 0x025a44e5
[0x40cdf3] memchr("ILE_STACK_EMPTY)\n               "..., '\n', 6901) = 0x025a44f5
[0x4022d1] memchr("\t\t won't actually generate any c"..., '\n', 232) = 0x025a441c
[0x4022d1] memchr("\t\t clear pending_exact explicitl"..., '\n', 178) = 0x025a4443
[0x4022d1] memchr("\t      pending_exact = 0;\n      "..., '\n', 139) = 0x025a445d
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 113) = 0x025a4472
[0x4022d1] memchr("\n\n            case ')':\n        "..., '\n', 92) = 0x025a4473
[0x4022d1] memchr("\n            case ')':\n         "..., '\n', 91) = 0x025a4474
[0x4022d1] memchr("            case ')':\n          "..., '\n', 90) = 0x025a448a
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 68) = 0x025a44cd
[0x4022d1] memchr("\n              if (COMPILE_STACK"..., '\n', 1) = 0x025a44ce
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3270:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (COMPILE_STACK_"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                if (syntax & RE_"..., 'I', 6884) = 0x025a4521
[0x40cdf3] memchr("IGHT_PAREN_ORD)\n                "..., '\n', 6841) = 0x025a4530
[0x4022d1] memchr("                if (syntax & RE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3271:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                if (syntax & RE_"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  goto normal_ba"..., 'I', 6825) = 0x025a485a
[0x40cdf3] memchr("ILE_STACK_EMPTY)\n               "..., '\n', 6016) = 0x025a486a
[0x4022d1] memchr("                  goto normal_ba"..., '\n', 787) = 0x025a4559
[0x4022d1] memchr("                else\n           "..., '\n', 746) = 0x025a456e
[0x4022d1] memchr("                  return REG_ERP"..., '\n', 725) = 0x025a4594
[0x4022d1] memchr("\n            handle_close:\n     "..., '\n', 687) = 0x025a4595
[0x4022d1] memchr("            handle_close:\n      "..., '\n', 686) = 0x025a45af
[0x4022d1] memchr("              if (fixup_alt_jump"..., '\n', 660) = 0x025a45d1
[0x4022d1] memchr("                { /* Push a dumm"..., '\n', 626) = 0x025a4613
[0x4022d1] memchr("                     alternative"..., '\n', 560) = 0x025a464a
[0x4022d1] memchr("                     `pop_failur"..., '\n', 505) = 0x025a468b
[0x4022d1] memchr("                     `push_dummy"..., '\n', 440) = 0x025a46ca
[0x4022d1] memchr("                  BUF_PUSH (push"..., '\n', 377) = 0x025a46fb
[0x4022d1] memchr("                  \n             "..., '\n', 328) = 0x025a470e
[0x4022d1] memchr("                  /* We allocate"..., '\n', 309) = 0x025a4755
[0x4022d1] memchr("                     to `fixup_a"..., '\n', 238) = 0x025a47a3
[0x4022d1] memchr("                  STORE_JUMP (ju"..., '\n', 160) = 0x025a47e8
[0x4022d1] memchr("                }\n\n             "..., '\n', 91) = 0x025a47fa
[0x4022d1] memchr("\n              /* See similar co"..., '\n', 73) = 0x025a47fb
[0x4022d1] memchr("              /* See similar cod"..., '\n', 72) = 0x025a4843
[0x4022d1] memchr("              if (COMPILE_STACK_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3290:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (COMPILE_STACK_"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                if (syntax & RE_"..., 'I', 5999) = 0x025a4896
[0x40cdf3] memchr("IGHT_PAREN_ORD)\n                "..., '\n', 5956) = 0x025a48a5
[0x4022d1] memchr("                if (syntax & RE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3291:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                if (syntax & RE_"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  goto normal_ch"..., 'I', 5940) = 0x025a4b09
[0x40cdf3] memchr("ILE_STACK_TOP.begalt_offset;\n   "..., '\n', 5329) = 0x025a4b25
[0x4022d1] memchr("                  goto normal_ch"..., '\n', 567) = 0x025a48c9
[0x4022d1] memchr("                else\n           "..., '\n', 531) = 0x025a48de
[0x4022d1] memchr("                  return REG_ERP"..., '\n', 510) = 0x025a4904
[0x4022d1] memchr("\n              /* Since we just "..., '\n', 472) = 0x025a4905
[0x4022d1] memchr("              /* Since we just c"..., '\n', 471) = 0x025a494b
[0x4022d1] memchr("                 ``can't happen'"..., '\n', 401) = 0x025a4972
[0x4022d1] memchr("              assert (compile_st"..., '\n', 362) = 0x025a49a3
[0x4022d1] memchr("              {\n                "..., '\n', 313) = 0x025a49b3
[0x4022d1] memchr("                /* We don't just"..., '\n', 297) = 0x025a49fb
[0x4022d1] memchr("                   later groups "..., '\n', 225) = 0x025a4a42
[0x4022d1] memchr("                   as in `(ab)c("..., '\n', 154) = 0x025a4a86
[0x4022d1] memchr("                regnum_t this_gr"..., '\n', 86) = 0x025a4ab2
[0x4022d1] memchr("\n                compile_stack.a"..., '\n', 42) = 0x025a4ab3
[0x4022d1] memchr("                compile_stack.av"..., '\n', 41) = 0x025a4adc
[0x4022d1] memchr("                begalt = bufp->b"..., '\n', 0) = NULL
[0x4023cc] fwrite("3306:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                begalt = bufp->b"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                fixup_alt_jump\n "..., 'I', 5300) = 0x025a4b5d
[0x40cdf3] memchr("ILE_STACK_TOP.fixup_alt_jump\n   "..., '\n', 5245) = 0x025a4b79
[0x4022d1] memchr("                fixup_alt_jump\n "..., '\n', 31) = 0x025a4b44
[0x4022d1] memchr("                  = COMPILE_STAC"..., '\n', 0) = NULL
[0x4023cc] fwrite("3308:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  = COMPILE_STAC"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    ? bufp->buff"..., 'I', 5216) = 0x025a4ba3
[0x40cdf3] memchr("ILE_STACK_TOP.fixup_alt_jump - 1"..., '\n', 5175) = 0x025a4bc4
[0x4022d1] memchr("                    ? bufp->buff"..., '\n', 0) = NULL
[0x4023cc] fwrite("3309:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    ? bufp->buff"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    : 0;\n       "..., 'I', 5141) = 0x025a4c0d
[0x40cdf3] memchr("ILE_STACK_TOP.laststart_offset;\n"..., '\n', 5069) = 0x025a4c2c
[0x4022d1] memchr("                    : 0;\n       "..., '\n', 25) = 0x025a4bdd
[0x4022d1] memchr("                laststart = bufp"..., '\n', 0) = NULL
[0x4023cc] fwrite("3311:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                laststart = bufp"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                this_group_regnu"..., 'I', 5037) = 0x025a4c55
[0x40cdf3] memchr("ILE_STACK_TOP.regnum;\n\t\t/* If we"..., '\n', 4997) = 0x025a4c6a
[0x4022d1] memchr("                this_group_regnu"..., '\n', 0) = NULL
[0x4023cc] fwrite("3312:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                this_group_regnu"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t/* If we've reached MAX_REGNUM"..., 'I', 4975) = 0x025a4c70
[0x40cdf3] memchr("If we've reached MAX_REGNUM grou"..., '\n', 4970) = 0x025a4ca2
[0x4022d1] memchr("\t\t/* If we've reached MAX_REGNUM"..., '\n', 0) = NULL
[0x4023cc] fwrite("3313:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t/* If we've reached MAX_REGNUM"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   won't actually generate any"..., 'I', 4919) = 0x025a4e3f
[0x40cdf3] memchr("ILE_STACK_TOP.inner_group_offset"..., '\n', 4507) = 0x025a4e60
[0x4022d1] memchr("\t\t   won't actually generate any"..., '\n', 369) = 0x025a4cda
[0x4022d1] memchr("\t\t   clear pending_exact explici"..., '\n', 313) = 0x025a4d03
[0x4022d1] memchr("\t\tpending_exact = 0;\n\n          "..., '\n', 272) = 0x025a4d18
[0x4022d1] memchr("\n                /* We're at the"..., '\n', 251) = 0x025a4d19
[0x4022d1] memchr("                /* We're at the "..., '\n', 250) = 0x025a4d63
[0x4022d1] memchr("                   groups were i"..., '\n', 176) = 0x025a4d97
[0x4022d1] memchr("                if (this_group_r"..., '\n', 124) = 0x025a4dcc
[0x4022d1] memchr("                  {\n            "..., '\n', 71) = 0x025a4de0
[0x4022d1] memchr("                    unsigned cha"..., '\n', 51) = 0x025a4e13
[0x4022d1] memchr("                      = bufp->bu"..., '\n', 0) = NULL
[0x4023cc] fwrite("3323:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      = bufp->bu"..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    \n           "..., 'I', 4473) = 0x025a4fb7
[0x40cdf3] memchr("IMITED_OPS || syntax & RE_NO_BK_"..., '\n', 4131) = 0x025a4fdc
[0x4022d1] memchr("                    \n           "..., '\n', 311) = 0x025a4e75
[0x4022d1] memchr("                    *inner_group"..., '\n', 290) = 0x025a4eb8
[0x4022d1] memchr("                    BUF_PUSH_3 ("..., '\n', 223) = 0x025a4ef8
[0x4022d1] memchr("                                "..., '\n', 159) = 0x025a4f35
[0x4022d1] memchr("                  }\n            "..., '\n', 98) = 0x025a4f49
[0x4022d1] memchr("              }\n              br"..., '\n', 78) = 0x025a4f59
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 62) = 0x025a4f6e
[0x4022d1] memchr("\n\n            case '|':\t\t\t\t\t/* `"..., '\n', 41) = 0x025a4f6f
[0x4022d1] memchr("\n            case '|':\t\t\t\t\t/* `\\"..., '\n', 40) = 0x025a4f70
[0x4022d1] memchr("            case '|':\t\t\t\t\t/* `\\|"..., '\n', 39) = 0x025a4f97
[0x4022d1] memchr("              if (syntax & RE_LI"..., '\n', 0) = NULL
[0x4023cc] fwrite("3334:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (syntax & RE_LI"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                goto normal_back"..., 'I', 4093) = 0x025a503b
[0x40cdf3] memchr("IMITED_OPS)\n                goto"..., '\n', 3999) = 0x025a5046
[0x4022d1] memchr("                goto normal_back"..., '\n', 63) = 0x025a5003
[0x4022d1] memchr("            handle_alt:\n        "..., '\n', 24) = 0x025a501b
[0x4022d1] memchr("              if (syntax & RE_LI"..., '\n', 0) = NULL
[0x4023cc] fwrite("3337:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (syntax & RE_LI"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                goto normal_char"..., 'I', 3987) = 0x025a507b
[0x40cdf3] memchr("Insert before the previous alter"..., '\n', 3935) = 0x025a50ae
[0x4022d1] memchr("                goto normal_char"..., '\n', 35) = 0x025a5068
[0x4022d1] memchr("\n              /* Insert before "..., '\n', 1) = 0x025a5069
[0x4022d1] memchr("              /* Insert before t"..., '\n', 0) = NULL
[0x4023cc] fwrite("3340:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* Insert before t"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 jumps to this a"..., 'I', 3883) = 0x025a5125
[0x40cdf3] memchr("INSERT_JUMP (on_failure_jump, be"..., '\n', 3765) = 0x025a5152
[0x4022d1] memchr("                 jumps to this a"..., '\n', 104) = 0x025a50f2
[0x4022d1] memchr("              GET_BUFFER_SPACE ("..., '\n', 36) = 0x025a5116
[0x4022d1] memchr("              INSERT_JUMP (on_fa"..., '\n', 0) = NULL
[0x4023cc] fwrite("3343:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              INSERT_JUMP (on_fa"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              pending_exact = 0;"..., 'I', 3719) = 0x025a53e9
[0x40cdf3] memchr("If we are at `b', then fixup_alt"..., '\n', 3057) = 0x025a5424
[0x4022d1] memchr("              pending_exact = 0;"..., '\n', 645) = 0x025a5173
[0x4022d1] memchr("              b += 3;\n\n         "..., '\n', 612) = 0x025a5189
[0x4022d1] memchr("\n              /* The alternativ"..., '\n', 590) = 0x025a518a
[0x4022d1] memchr("              /* The alternative"..., '\n', 589) = 0x025a51cf
[0x4022d1] memchr("                 which gets exec"..., '\n', 520) = 0x025a5215
[0x4022d1] memchr("                 jump so it will"..., '\n', 450) = 0x025a525b
[0x4022d1] memchr("                 jump (put in be"..., '\n', 380) = 0x025a52a4
[0x4022d1] memchr("                 (if any) altern"..., '\n', 307) = 0x025a52ed
[0x4022d1] memchr("                 jump jumps to t"..., '\n', 234) = 0x025a5337
[0x4022d1] memchr("                          _____ "..., '\n', 160) = 0x025a535e
[0x4022d1] memchr("                          |   | "..., '\n', 121) = 0x025a5387
[0x4022d1] memchr("                          |   v "..., '\n', 80) = 0x025a53ae
[0x4022d1] memchr("                         a | b  "..., '\n', 41) = 0x025a53d6
[0x4022d1] memchr("\n                 If we are at `"..., '\n', 1) = 0x025a53d7
[0x4022d1] memchr("                 If we are at `b"..., '\n', 0) = NULL
[0x4023cc] fwrite("3358:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                 If we are at `b"..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 three-byte spac"..., 'I', 2997) = 0x025a5713
[0x40cdf3] memchr("If \\{ is a literal.  */\n        "..., '\n', 2247) = 0x025a572a
[0x4022d1] memchr("                 three-byte spac"..., '\n', 733) = 0x025a546d
[0x4022d1] memchr("                 fixup_alt_jump "..., '\n', 660) = 0x025a54b8
[0x4022d1] memchr("                 bytes which we'"..., '\n', 585) = 0x025a5501
[0x4022d1] memchr("\n              if (fixup_alt_jum"..., '\n', 512) = 0x025a5502
[0x4022d1] memchr("              if (fixup_alt_jump"..., '\n', 511) = 0x025a5524
[0x4022d1] memchr("                STORE_JUMP (jump"..., '\n', 477) = 0x025a5563
[0x4022d1] memchr("\n              /* Mark and leave"..., '\n', 414) = 0x025a5564
[0x4022d1] memchr("              /* Mark and leave "..., '\n', 413) = 0x025a55ad
[0x4022d1] memchr("                 to be filled in"..., '\n', 340) = 0x025a55f2
[0x4022d1] memchr("                 when know we're"..., '\n', 271) = 0x025a563f
[0x4022d1] memchr("              fixup_alt_jump = b"..., '\n', 194) = 0x025a5661
[0x4022d1] memchr("              GET_BUFFER_SPACE ("..., '\n', 160) = 0x025a5685
[0x4022d1] memchr("              b += 3;\n\n         "..., '\n', 124) = 0x025a569b
[0x4022d1] memchr("\n              laststart = 0;\n  "..., '\n', 102) = 0x025a569c
[0x4022d1] memchr("              laststart = 0;\n   "..., '\n', 101) = 0x025a56b9
[0x4022d1] memchr("              begalt = b;\n      "..., '\n', 72) = 0x025a56d3
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 46) = 0x025a56e8
[0x4022d1] memchr("\n\n            case '{': \n       "..., '\n', 25) = 0x025a56e9
[0x4022d1] memchr("\n            case '{': \n        "..., '\n', 24) = 0x025a56ea
[0x4022d1] memchr("            case '{': \n         "..., '\n', 23) = 0x025a5701
[0x4022d1] memchr("              /* If \\{ is a lite"..., '\n', 0) = NULL
[0x4023cc] fwrite("3379:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If \\{ is a lite"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              if (!(syntax & RE_"..., 'I', 2223) = 0x025a574b
[0x40cdf3] memchr("INTERVALS)\n                     "..., '\n', 2191) = 0x025a5755
[0x4022d1] memchr("              if (!(syntax & RE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3380:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (!(syntax & RE_"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     /* If we're"..., 'I', 2180) = 0x025a576e
[0x40cdf3] memchr("If we're at `\\{' and it's not th"..., '\n', 2156) = 0x025a579e
[0x4022d1] memchr("                     /* If we're"..., '\n', 0) = NULL
[0x4023cc] fwrite("3381:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     /* If we're"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        operator"..., 'I', 2107) = 0x025a57e8
[0x40cdf3] memchr("INTERVALS) && (syntax & RE_NO_BK"..., '\n', 2034) = 0x025a5811
[0x4022d1] memchr("                        operator"..., '\n', 38) = 0x025a57c4
[0x4022d1] memchr("                  || ((syntax & "..., '\n', 0) = NULL
[0x4023cc] fwrite("3383:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  || ((syntax & "..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  || (p - 2 == p"..., 'I', 1992) = 0x025a58b2
[0x40cdf3] memchr("If got here, then the syntax all"..., '\n', 1832) = 0x025a58e4
[0x4022d1] memchr("                  || (p - 2 == p"..., '\n', 141) = 0x025a5849
[0x4022d1] memchr("                goto normal_back"..., '\n', 85) = 0x025a5870
[0x4022d1] memchr("\n            handle_interval:\n  "..., '\n', 46) = 0x025a5871
[0x4022d1] memchr("            handle_interval:\n   "..., '\n', 45) = 0x025a588e
[0x4022d1] memchr("              {\n                "..., '\n', 16) = 0x025a589e
[0x4022d1] memchr("                /* If got here, "..., '\n', 0) = NULL
[0x4023cc] fwrite("3389:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                /* If got here, "..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n                /* At least (mo"..., 'I', 1781) = 0x025a5a8d
[0x40cdf3] memchr("IGNED_NUMBER (lower_bound);\n\n   "..., '\n', 1357) = 0x025a5aa8
[0x4022d1] memchr("\n                /* At least (mo"..., '\n', 401) = 0x025a58e5
[0x4022d1] memchr("                /* At least (mos"..., '\n', 400) = 0x025a592c
[0x4022d1] memchr("                int lower_bound "..., '\n', 329) = 0x025a5964
[0x4022d1] memchr("\n                beg_interval = "..., '\n', 273) = 0x025a5965
[0x4022d1] memchr("                beg_interval = p"..., '\n', 272) = 0x025a598b
[0x4022d1] memchr("\n                if (p == pend)\n"..., '\n', 234) = 0x025a598c
[0x4022d1] memchr("                if (p == pend)\n "..., '\n', 233) = 0x025a59ab
[0x4022d1] memchr("                  {\n            "..., '\n', 202) = 0x025a59bf
[0x4022d1] memchr("                    if (syntax &"..., '\n', 182) = 0x025a59f1
[0x4022d1] memchr("                      goto unfet"..., '\n', 132) = 0x025a5a1e
[0x4022d1] memchr("                    else\n       "..., '\n', 87) = 0x025a5a37
[0x4022d1] memchr("                      return REG"..., '\n', 62) = 0x025a5a60
[0x4022d1] memchr("                  }\n\n           "..., '\n', 21) = 0x025a5a74
[0x4022d1] memchr("\n                GET_UNSIGNED_NU"..., '\n', 1) = 0x025a5a75
[0x4022d1] memchr("                GET_UNSIGNED_NUM"..., '\n', 0) = NULL
[0x4023cc] fwrite("3404:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                GET_UNSIGNED_NUM"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n                if (c == ',')\n "..., 'I', 1329) = 0x025a5af7
[0x40cdf3] memchr("IGNED_NUMBER (upper_bound);\n    "..., '\n', 1251) = 0x025a5b12
[0x4022d1] memchr("\n                if (c == ',')\n "..., '\n', 51) = 0x025a5aa9
[0x4022d1] memchr("                if (c == ',')\n  "..., '\n', 50) = 0x025a5ac7
[0x4022d1] memchr("                  {\n            "..., '\n', 20) = 0x025a5adb
[0x4022d1] memchr("                    GET_UNSIGNED"..., '\n', 0) = NULL
[0x4023cc] fwrite("3408:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    GET_UNSIGNED"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    if (upper_bo"..., 'I', 1223) = 0x025a5b94
[0x40cdf3] memchr("Interval such as `{1}' => match "..., '\n', 1094) = 0x025a5bc4
[0x4022d1] memchr("                    if (upper_bo"..., '\n', 108) = 0x025a5b55
[0x4022d1] memchr("                  }\n            "..., '\n', 41) = 0x025a5b69
[0x4022d1] memchr("                else\n           "..., '\n', 21) = 0x025a5b7e
[0x4022d1] memchr("                  /* Interval su"..., '\n', 0) = NULL
[0x4023cc] fwrite("3412:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  /* Interval su"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  upper_bound = "..., 'I', 1045) = 0x025a5f17
[0x40cdf3] memchr("If it's invalid to have no prece"..., '\n', 195) = 0x025a5f43
[0x4022d1] memchr("                  upper_bound = "..., '\n', 831) = 0x025a5bf1
[0x4022d1] memchr("\n                if (lower_bound"..., '\n', 786) = 0x025a5bf2
[0x4022d1] memchr("                if (lower_bound "..., '\n', 785) = 0x025a5c32
[0x4022d1] memchr("                    || lower_bou"..., '\n', 721) = 0x025a5c64
[0x4022d1] memchr("                  {\n            "..., '\n', 671) = 0x025a5c78
[0x4022d1] memchr("                    if (syntax &"..., '\n', 651) = 0x025a5caa
[0x4022d1] memchr("                      goto unfet"..., '\n', 601) = 0x025a5cd7
[0x4022d1] memchr("                    else \n      "..., '\n', 556) = 0x025a5cf1
[0x4022d1] memchr("                      return REG"..., '\n', 530) = 0x025a5d19
[0x4022d1] memchr("                  }\n\n           "..., '\n', 490) = 0x025a5d2d
[0x4022d1] memchr("\n                if (!(syntax & "..., '\n', 470) = 0x025a5d2e
[0x4022d1] memchr("                if (!(syntax & R"..., '\n', 469) = 0x025a5d60
[0x4022d1] memchr("                  {\n            "..., '\n', 419) = 0x025a5d74
[0x4022d1] memchr("                    if (c != '\\\\"..., '\n', 399) = 0x025a5daa
[0x4022d1] memchr("\n                    PATFETCH (c"..., '\n', 345) = 0x025a5dab
[0x4022d1] memchr("                    PATFETCH (c)"..., '\n', 344) = 0x025a5dcd
[0x4022d1] memchr("                  }\n\n           "..., '\n', 310) = 0x025a5de1
[0x4022d1] memchr("\n                if (c != '}')\n "..., '\n', 290) = 0x025a5de2
[0x4022d1] memchr("                if (c != '}')\n  "..., '\n', 289) = 0x025a5e00
[0x4022d1] memchr("                  {\n            "..., '\n', 259) = 0x025a5e14
[0x4022d1] memchr("                    if (syntax &"..., '\n', 239) = 0x025a5e46
[0x4022d1] memchr("                      goto unfet"..., '\n', 189) = 0x025a5e73
[0x4022d1] memchr("                    else \n      "..., '\n', 144) = 0x025a5e8d
[0x4022d1] memchr("                      return REG"..., '\n', 118) = 0x025a5eb5
[0x4022d1] memchr("                  }\n\n           "..., '\n', 78) = 0x025a5ec9
[0x4022d1] memchr("\n                /* We just pars"..., '\n', 58) = 0x025a5eca
[0x4022d1] memchr("                /* We just parse"..., '\n', 57) = 0x025a5f02
[0x4022d1] memchr("\n                /* If it's inva"..., '\n', 1) = 0x025a5f03
[0x4022d1] memchr("                /* If it's inval"..., '\n', 0) = NULL
[0x4023cc] fwrite("3441:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                /* If it's inval"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                if (!laststart)\n"..., 'I', 150) = 0x025a5fa4
[0x40cdf3] memchr("INVALID_OPS)\n                   "..., '\n', 54) = 0x025a5fb0
[0x4022d1] memchr("                if (!laststart)\n"..., '\n', 52) = 0x025a5f63
[0x4022d1] memchr("                  {\n            "..., '\n', 20) = 0x025a5f77
[0x4022d1] memchr("                    if (syntax &"..., '\n', 0) = NULL
[0x4023cc] fwrite("3444:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    if (syntax &"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      return REG"..., 'I', 41) = NULL
[0x4022d1] memchr("                      return REG"..., '\n', 41) = 0x025a5fd9
[0x4022d1] memchr("                    else if (syn"..., '\n', 0) = NULL
[0x4020b3] memmove(0x259dfda, 0x25a5fda, 38, 0x25a5fda, 0x7f498147f260) = 0x259dfda
[0x402213] read(3, "RE_CONTEXT_INDEP_OPS)\n          "..., 32768) = 32768
[0x40bc2b] memchr("                    else if (syn"..., 'I', 32802) = 0x0259e00b
[0x40cdf3] memchr("INDEP_OPS)\n                     "..., '\n', 32753) = 0x0259e015
[0x4022d1] memchr("                    else if (syn"..., '\n', 0) = NULL
[0x4023cc] fwrite("3446:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    else if (syn"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      laststart "..., 'I', 32742) = 0x0259e0a9
[0x40cdf3] memchr("If the upper bound is zero, don'"..., '\n', 32595) = 0x0259e0dd
[0x4022d1] memchr("                      laststart "..., '\n', 128) = 0x0259e03a
[0x4022d1] memchr("                    else\n       "..., '\n', 91) = 0x0259e053
[0x4022d1] memchr("                      goto unfet"..., '\n', 66) = 0x0259e080
[0x4022d1] memchr("                  }\n\n           "..., '\n', 21) = 0x0259e094
[0x4022d1] memchr("\n                /* If the upper"..., '\n', 1) = 0x0259e095
[0x4022d1] memchr("                /* If the upper "..., '\n', 0) = NULL
[0x4023cc] fwrite("3452:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                /* If the upper "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   all; jump fro"..., 'I', 32542) = 0x0259e1e9
[0x40cdf3] memchr("INSERT_JUMP (jump, laststart, b "..., '\n', 32275) = 0x0259e20e
[0x4022d1] memchr("                   all; jump fro"..., '\n', 246) = 0x0259e125
[0x4022d1] memchr("                   the end of th"..., '\n', 174) = 0x0259e16c
[0x4022d1] memchr("                 if (upper_bound"..., '\n', 103) = 0x0259e193
[0x4022d1] memchr("                   {\n           "..., '\n', 64) = 0x0259e1a8
[0x4022d1] memchr("                     GET_BUFFER_"..., '\n', 43) = 0x0259e1d3
[0x4022d1] memchr("                     INSERT_JUMP"..., '\n', 0) = NULL
[0x4023cc] fwrite("3458:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     INSERT_JUMP"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     b += 3;\n   "..., 'I', 32237) = 0x0259e491
[0x40cdf3] memchr("If the upper bound is > 1, we ne"..., '\n', 31595) = 0x0259e4bd
[0x4022d1] memchr("                     b += 3;\n   "..., '\n', 618) = 0x0259e22b
[0x4022d1] memchr("                   }\n\n          "..., '\n', 589) = 0x0259e240
[0x4022d1] memchr("\n                 /* Otherwise, "..., '\n', 568) = 0x0259e241
[0x4022d1] memchr("                 /* Otherwise, w"..., '\n', 567) = 0x0259e285
[0x4022d1] memchr("                    we're all do"..., '\n', 499) = 0x0259e2c5
[0x4022d1] memchr("                      set_number"..., '\n', 435) = 0x0259e304
[0x4022d1] memchr("                      set_number"..., '\n', 372) = 0x0259e348
[0x4022d1] memchr("                      succeed_n "..., '\n', 304) = 0x0259e38b
[0x4022d1] memchr("                      <body of l"..., '\n', 237) = 0x0259e3b0
[0x4022d1] memchr("                      jump_n <su"..., '\n', 200) = 0x0259e3eb
[0x4022d1] memchr("                    (The upper b"..., '\n', 141) = 0x0259e42c
[0x4022d1] memchr("                    `upper_bound"..., '\n', 76) = 0x0259e461
[0x4022d1] memchr("                 else \n         "..., '\n', 23) = 0x0259e478
[0x4022d1] memchr("                   { /* If the u"..., '\n', 0) = NULL
[0x4023cc] fwrite("3472:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                   { /* If the u"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        more at "..., 'I', 31550) = 0x0259e585
[0x40cdf3] memchr("Initialize lower bound of the `s"..., '\n', 31351) = 0x0259e5b4
[0x4022d1] memchr("                        more at "..., '\n', 175) = 0x0259e4f6
[0x4022d1] memchr("                     unsigned nb"..., '\n', 118) = 0x0259e53a
[0x4022d1] memchr("\n                     GET_BUFFER"..., '\n', 50) = 0x0259e53b
[0x4022d1] memchr("                     GET_BUFFER_"..., '\n', 49) = 0x0259e56b
[0x4022d1] memchr("\n                     /* Initial"..., '\n', 1) = 0x0259e56c
[0x4022d1] memchr("                     /* Initiali"..., '\n', 0) = NULL
[0x4023cc] fwrite("3478:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     /* Initiali"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        though i"..., 'I', 31303) = 0x0259e6de
[0x40cdf3] memchr("INSERT_JUMP2 (succeed_n, laststa"..., '\n', 31006) = 0x0259e701
[0x4022d1] memchr("                        though i"..., '\n', 276) = 0x0259e5f9
[0x4022d1] memchr("                        attendan"..., '\n', 207) = 0x0259e63c
[0x4022d1] memchr("                        because "..., '\n', 140) = 0x0259e680
[0x4022d1] memchr("                        Jump to "..., '\n', 72) = 0x0259e6c8
[0x4022d1] memchr("                     INSERT_JUMP"..., '\n', 0) = NULL
[0x4023cc] fwrite("3483:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     INSERT_JUMP"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 30970) = 0x0259e7d0
[0x40cdf3] memchr("Insert \n                        "..., '\n', 30764) = 0x0259e7d7
[0x4022d1] memchr("                                "..., '\n', 145) = 0x0259e743
[0x4022d1] memchr("                                "..., '\n', 79) = 0x0259e774
[0x4022d1] memchr("                     b += 5;\n\n  "..., '\n', 30) = 0x0259e791
[0x4022d1] memchr("\n                     /* Code to"..., '\n', 1) = 0x0259e792
[0x4022d1] memchr("                     /* Code to "..., '\n', 0) = NULL
[0x4023cc] fwrite("3488:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     /* Code to "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        before t"..., 'I', 30756) = 0x0259f081
[0x40cdf3] memchr("If an invalid interval, match th"..., '\n', 28539) = 0x0259f0be
[0x4022d1] memchr("                        before t"..., '\n', 2200) = 0x0259e820
[0x4022d1] memchr("                        bytes of"..., '\n', 2127) = 0x0259e867
[0x4022d1] memchr("                        the foll"..., '\n', 2056) = 0x0259e89e
[0x4022d1] memchr("                     insert_op2 "..., '\n', 2001) = 0x0259e8ed
[0x4022d1] memchr("                     b += 5;\n\n  "..., '\n', 1922) = 0x0259e90a
[0x4022d1] memchr("\n                     if (upper_"..., '\n', 1893) = 0x0259e90b
[0x4022d1] memchr("                     if (upper_b"..., '\n', 1892) = 0x0259e935
[0x4022d1] memchr("                       { /* More"..., '\n', 1850) = 0x0259e979
[0x4022d1] memchr("                            appe"..., '\n', 1782) = 0x0259e9bf
[0x4022d1] memchr("                            that"..., '\n', 1712) = 0x0259e9f6
[0x4022d1] memchr("                            \n   "..., '\n', 1657) = 0x0259ea13
[0x4022d1] memchr("                            When"..., '\n', 1628) = 0x0259ea58
[0x4022d1] memchr("                            we'l"..., '\n', 1559) = 0x0259ea9d
[0x4022d1] memchr("                            jump"..., '\n', 1490) = 0x0259eae5
[0x4022d1] memchr("                         STORE_J"..., '\n', 1418) = 0x0259eb25
[0x4022d1] memchr("                                "..., '\n', 1354) = 0x0259eb5d
[0x4022d1] memchr("                         b += 5;"..., '\n', 1298) = 0x0259eb7e
[0x4022d1] memchr("\n                         /* The"..., '\n', 1265) = 0x0259eb7f
[0x4022d1] memchr("                         /* The "..., '\n', 1264) = 0x0259ebc5
[0x4022d1] memchr("                            para"..., '\n', 1194) = 0x0259ec0d
[0x4022d1] memchr("                            an a"..., '\n', 1122) = 0x0259ec53
[0x4022d1] memchr("                            the "..., '\n', 1052) = 0x0259ec9a
[0x4022d1] memchr("                            `las"..., '\n', 981) = 0x0259ece2
[0x4022d1] memchr("                            for "..., '\n', 909) = 0x0259ed24
[0x4022d1] memchr("                            inse"..., '\n', 843) = 0x0259ed6c
[0x4022d1] memchr("                            so e"..., '\n', 771) = 0x0259edb0
[0x4022d1] memchr("                            Conc"..., '\n', 703) = 0x0259edf7
[0x4022d1] memchr("                            i.e."..., '\n', 632) = 0x0259ee28
[0x4022d1] memchr("                            \n   "..., '\n', 583) = 0x0259ee45
[0x4022d1] memchr("                            We i"..., '\n', 554) = 0x0259ee8d
[0x4022d1] memchr("                            so t"..., '\n', 482) = 0x0259eed3
[0x4022d1] memchr("                            rein"..., '\n', 412) = 0x0259ef0c
[0x4022d1] memchr("                         insert_"..., '\n', 355) = 0x0259ef5a
[0x4022d1] memchr("                                "..., '\n', 277) = 0x0259ef94
[0x4022d1] memchr("                         b += 5;"..., '\n', 219) = 0x0259efb5
[0x4022d1] memchr("                       }\n       "..., '\n', 186) = 0x0259efce
[0x4022d1] memchr("                   }\n           "..., '\n', 161) = 0x0259efe3
[0x4022d1] memchr("                pending_exact = "..., '\n', 140) = 0x0259f006
[0x4022d1] memchr("                beg_interval = N"..., '\n', 105) = 0x0259f02b
[0x4022d1] memchr("              }\n              br"..., '\n', 68) = 0x0259f03b
[0x4022d1] memchr("              break;\n\n          "..., '\n', 52) = 0x0259f050
[0x4022d1] memchr("\n            unfetch_interval:\n "..., '\n', 31) = 0x0259f051
[0x4022d1] memchr("            unfetch_interval:\n  "..., '\n', 30) = 0x0259f06f
[0x4022d1] memchr("              /* If an invalid i"..., '\n', 0) = NULL
[0x4023cc] fwrite("3532:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If an invalid i"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               assert (beg_inter"..., 'I', 28477) = 0x0259fbcd
[0x40cdf3] memchr("If no exactn currently being bui"..., '\n', 25647) = 0x0259fbf4
[0x4022d1] memchr("               assert (beg_inter"..., '\n', 2820) = 0x0259f0e4
[0x4022d1] memchr("               p = beg_interval;"..., '\n', 2782) = 0x0259f105
[0x4022d1] memchr("               beg_interval = NU"..., '\n', 2749) = 0x0259f129
[0x4022d1] memchr("\n               /* normal_char a"..., '\n', 2713) = 0x0259f12a
[0x4022d1] memchr("               /* normal_char an"..., '\n', 2712) = 0x0259f16b
[0x4022d1] memchr("               PATFETCH (c);\t\n\n "..., '\n', 2647) = 0x0259f189
[0x4022d1] memchr("\n               if (!(syntax & R"..., '\n', 2617) = 0x0259f18a
[0x4022d1] memchr("               if (!(syntax & RE"..., '\n', 2616) = 0x0259f1ba
[0x4022d1] memchr("                 {\n             "..., '\n', 2568) = 0x0259f1cd
[0x4022d1] memchr("                   if (p > patte"..., '\n', 2549) = 0x0259f204
[0x4022d1] memchr("                     goto normal"..., '\n', 2494) = 0x0259f230
[0x4022d1] memchr("                 }\n             "..., '\n', 2450) = 0x0259f243
[0x4022d1] memchr("               goto normal_char;"..., '\n', 2431) = 0x0259f264
[0x4022d1] memchr("\n#ifdef emacs\n            /* The"..., '\n', 2398) = 0x0259f265
[0x4022d1] memchr("#ifdef emacs\n            /* Ther"..., '\n', 2397) = 0x0259f272
[0x4022d1] memchr("            /* There is no way t"..., '\n', 2384) = 0x0259f2b9
[0x4022d1] memchr("               operators.  rms s"..., '\n', 2313) = 0x0259f2f5
[0x4022d1] memchr("            case '=':\n          "..., '\n', 2253) = 0x0259f30b
[0x4022d1] memchr("              BUF_PUSH (at_dot);"..., '\n', 2231) = 0x0259f32c
[0x4022d1] memchr("              break;\n\n          "..., '\n', 2198) = 0x0259f341
[0x4022d1] memchr("\n            case 's':\t\n        "..., '\n', 2177) = 0x0259f342
[0x4022d1] memchr("            case 's':\t\n         "..., '\n', 2176) = 0x0259f359
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 2153) = 0x0259f376
[0x4022d1] memchr("              PATFETCH (c);\n    "..., '\n', 2124) = 0x0259f392
[0x4022d1] memchr("              BUF_PUSH_2 (syntax"..., '\n', 2096) = 0x0259f3ce
[0x4022d1] memchr("              break;\n\n          "..., '\n', 2036) = 0x0259f3e3
[0x4022d1] memchr("\n            case 'S':\n         "..., '\n', 2015) = 0x0259f3e4
[0x4022d1] memchr("            case 'S':\n          "..., '\n', 2014) = 0x0259f3fa
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 1992) = 0x0259f417
[0x4022d1] memchr("              PATFETCH (c);\n    "..., '\n', 1963) = 0x0259f433
[0x4022d1] memchr("              BUF_PUSH_2 (notsyn"..., '\n', 1935) = 0x0259f472
[0x4022d1] memchr("              break;\n#endif /* e"..., '\n', 1872) = 0x0259f487
[0x4022d1] memchr("#endif /* emacs */\n\n\n           "..., '\n', 1851) = 0x0259f49a
[0x4022d1] memchr("\n\n            case 'w':\n        "..., '\n', 1832) = 0x0259f49b
[0x4022d1] memchr("\n            case 'w':\n         "..., '\n', 1831) = 0x0259f49c
[0x4022d1] memchr("            case 'w':\n          "..., '\n', 1830) = 0x0259f4b2
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 1808) = 0x0259f4cf
[0x4022d1] memchr("              BUF_PUSH (wordchar"..., '\n', 1779) = 0x0259f4f2
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 1744) = 0x0259f507
[0x4022d1] memchr("\n\n            case 'W':\n        "..., '\n', 1723) = 0x0259f508
[0x4022d1] memchr("\n            case 'W':\n         "..., '\n', 1722) = 0x0259f509
[0x4022d1] memchr("            case 'W':\n          "..., '\n', 1721) = 0x0259f51f
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 1699) = 0x0259f53c
[0x4022d1] memchr("              BUF_PUSH (notwordc"..., '\n', 1670) = 0x0259f562
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 1632) = 0x0259f577
[0x4022d1] memchr("\n\n            case '<':\n        "..., '\n', 1611) = 0x0259f578
[0x4022d1] memchr("\n            case '<':\n         "..., '\n', 1610) = 0x0259f579
[0x4022d1] memchr("            case '<':\n          "..., '\n', 1609) = 0x0259f58f
[0x4022d1] memchr("              BUF_PUSH (wordbeg)"..., '\n', 1587) = 0x0259f5b1
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1553) = 0x0259f5c6
[0x4022d1] memchr("\n            case '>':\n         "..., '\n', 1532) = 0x0259f5c7
[0x4022d1] memchr("            case '>':\n          "..., '\n', 1531) = 0x0259f5dd
[0x4022d1] memchr("              BUF_PUSH (wordend)"..., '\n', 1509) = 0x0259f5ff
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1475) = 0x0259f614
[0x4022d1] memchr("\n            case 'b':\n         "..., '\n', 1454) = 0x0259f615
[0x4022d1] memchr("            case 'b':\n          "..., '\n', 1453) = 0x0259f62b
[0x4022d1] memchr("              BUF_PUSH (wordboun"..., '\n', 1431) = 0x0259f64f
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1395) = 0x0259f664
[0x4022d1] memchr("\n            case 'B':\n         "..., '\n', 1374) = 0x0259f665
[0x4022d1] memchr("            case 'B':\n          "..., '\n', 1373) = 0x0259f67b
[0x4022d1] memchr("              BUF_PUSH (notwordb"..., '\n', 1351) = 0x0259f6a2
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1312) = 0x0259f6b7
[0x4022d1] memchr("\n            case '`':\n         "..., '\n', 1291) = 0x0259f6b8
[0x4022d1] memchr("            case '`':\n          "..., '\n', 1290) = 0x0259f6ce
[0x4022d1] memchr("              BUF_PUSH (begbuf);"..., '\n', 1268) = 0x0259f6ef
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1235) = 0x0259f704
[0x4022d1] memchr("\n            case '\\'':\n        "..., '\n', 1214) = 0x0259f705
[0x4022d1] memchr("            case '\\'':\n         "..., '\n', 1213) = 0x0259f71c
[0x4022d1] memchr("              BUF_PUSH (endbuf);"..., '\n', 1190) = 0x0259f73d
[0x4022d1] memchr("              break;\n\n          "..., '\n', 1157) = 0x0259f752
[0x4022d1] memchr("\n            case '1': case '2':"..., '\n', 1136) = 0x0259f753
[0x4022d1] memchr("            case '1': case '2': "..., '\n', 1135) = 0x0259f791
[0x4022d1] memchr("            case '6': case '7': "..., '\n', 1073) = 0x0259f7c5
[0x4022d1] memchr("              if (syntax & RE_NO"..., '\n', 1021) = 0x0259f7ef
[0x4022d1] memchr("                goto normal_char"..., '\n', 979) = 0x0259f811
[0x4022d1] memchr("\n              c1 = c - '0';\n\n  "..., '\n', 945) = 0x0259f812
[0x4022d1] memchr("              c1 = c - '0';\n\n   "..., '\n', 944) = 0x0259f82e
[0x4022d1] memchr("\n              if (c1 > regnum)\n"..., '\n', 916) = 0x0259f82f
[0x4022d1] memchr("              if (c1 > regnum)\n "..., '\n', 915) = 0x0259f84e
[0x4022d1] memchr("                return REG_ESUBR"..., '\n', 884) = 0x0259f872
[0x4022d1] memchr("\n              /* Can't back ref"..., '\n', 848) = 0x0259f873
[0x4022d1] memchr("              /* Can't back refe"..., '\n', 847) = 0x0259f8c1
[0x4022d1] memchr("              if (group_in_compi"..., '\n', 769) = 0x0259f8ff
[0x4022d1] memchr("                goto normal_char"..., '\n', 707) = 0x0259f921
[0x4022d1] memchr("\n              laststart = b;\n  "..., '\n', 673) = 0x0259f922
[0x4022d1] memchr("              laststart = b;\n   "..., '\n', 672) = 0x0259f93f
[0x4022d1] memchr("              BUF_PUSH_2 (duplic"..., '\n', 643) = 0x0259f969
[0x4022d1] memchr("              break;\n\n\n         "..., '\n', 601) = 0x0259f97e
[0x4022d1] memchr("\n\n            case '+':\n        "..., '\n', 580) = 0x0259f97f
[0x4022d1] memchr("\n            case '+':\n         "..., '\n', 579) = 0x0259f980
[0x4022d1] memchr("            case '+':\n          "..., '\n', 578) = 0x0259f996
[0x4022d1] memchr("            case '?':\n          "..., '\n', 556) = 0x0259f9ac
[0x4022d1] memchr("              if (syntax & RE_BK"..., '\n', 534) = 0x0259f9d6
[0x4022d1] memchr("                goto handle_plus"..., '\n', 492) = 0x0259f9f8
[0x4022d1] memchr("              else\n             "..., '\n', 458) = 0x0259fa0b
[0x4022d1] memchr("                goto normal_back"..., '\n', 439) = 0x0259fa32
[0x4022d1] memchr("\n            default:\n          "..., '\n', 400) = 0x0259fa33
[0x4022d1] memchr("            default:\n           "..., '\n', 399) = 0x0259fa48
[0x4022d1] memchr("            normal_backslash:\n  "..., '\n', 378) = 0x0259fa66
[0x4022d1] memchr("              /* You might think"..., '\n', 348) = 0x0259faa8
[0x4022d1] memchr("                 not to translat"..., '\n', 282) = 0x0259fae8
[0x4022d1] memchr("                 it will never m"..., '\n', 218) = 0x0259fb1b
[0x4022d1] memchr("              c = TRANSLATE (c);"..., '\n', 167) = 0x0259fb3c
[0x4022d1] memchr("              goto normal_char;\n"..., '\n', 134) = 0x0259fb5c
[0x4022d1] memchr("            }\n          break;\n\n"..., '\n', 102) = 0x0259fb6a
[0x4022d1] memchr("          break;\n\n\n\tdefault:\n   "..., '\n', 88) = 0x0259fb7b
[0x4022d1] memchr("\n\n\tdefault:\n        /* Expects t"..., '\n', 71) = 0x0259fb7c
[0x4022d1] memchr("\n\tdefault:\n        /* Expects th"..., '\n', 70) = 0x0259fb7d
[0x4022d1] memchr("\tdefault:\n        /* Expects the"..., '\n', 69) = 0x0259fb87
[0x4022d1] memchr("        /* Expects the character"..., '\n', 59) = 0x0259fbb4
[0x4022d1] memchr("\tnormal_char:\n\t      /* If no ex"..., '\n', 14) = 0x0259fbc2
[0x4022d1] memchr("\t      /* If no exactn currently"..., '\n', 0) = NULL
[0x4023cc] fwrite("3644:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      /* If no exactn currently"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (!pending_exact \n\n "..., 'I', 25607) = 0x0259fc25
[0x40cdf3] memchr("If last exactn not at current po"..., '\n', 25559) = 0x0259fc50
[0x4022d1] memchr("          if (!pending_exact \n\n "..., '\n', 31) = 0x0259fc12
[0x4022d1] memchr("\n              /* If last exactn"..., '\n', 1) = 0x0259fc13
[0x4022d1] memchr("              /* If last exactn "..., '\n', 0) = NULL
[0x4023cc] fwrite("3647:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If last exactn "..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              || pending_exact +"..., 'I', 25515) = 0x0259fd0f
[0x40cdf3] memchr("IDTH) - 1\n\n              /* If f"..., '\n', 25325) = 0x0259fd18
[0x4022d1] memchr("              || pending_exact +"..., '\n', 151) = 0x0259fc89
[0x4022d1] memchr("              \n              /* "..., '\n', 94) = 0x0259fc98
[0x4022d1] memchr("              /* We have only on"..., '\n', 79) = 0x0259fce7
[0x4022d1] memchr("\t      || *pending_exact == (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("3651:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      || *pending_exact == (1 <"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n              /* If followed by"..., 'I', 25315) = 0x0259fd2b
[0x40cdf3] memchr("If followed by a repetition oper"..., '\n', 25297) = 0x0259fd54
[0x4022d1] memchr("\n              /* If followed by"..., '\n', 1) = 0x0259fd19
[0x4022d1] memchr("              /* If followed by "..., '\n', 0) = NULL
[0x4023cc] fwrite("3653:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If followed by "..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              || *p == '*' || *p"..., 'I', 25255) = 0x0259fe0a
[0x40cdf3] memchr("INTERVALS)\n                  && "..., '\n', 25074) = 0x0259fe14
[0x4022d1] memchr("              || *p == '*' || *p"..., '\n', 157) = 0x0259fd7c
[0x4022d1] memchr("\t      || ((syntax & RE_BK_PLUS_"..., '\n', 117) = 0x0259fda0
[0x4022d1] memchr("\t\t  ? *p == '\\\\' && (p[1] == '+'"..., '\n', 81) = 0x0259fdd1
[0x4022d1] memchr("\t\t  : (*p == '+' || *p == '?'))\n"..., '\n', 32) = 0x0259fdf1
[0x4022d1] memchr("\t      || ((syntax & RE_INTERVAL"..., '\n', 0) = NULL
[0x4023cc] fwrite("3658:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      || ((syntax & RE_INTERVAL"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  && ((syntax & "..., 'I', 25063) = 0x025a0038
[0x40cdf3] memchr("ILE_STACK_EMPTY) \n    return REG"..., '\n', 24516) = 0x025a0049
[0x4022d1] memchr("                  && ((syntax & "..., '\n', 536) = 0x0259fe45
[0x4022d1] memchr("\t\t      ? *p == '{'\n            "..., '\n', 487) = 0x0259fe59
[0x4022d1] memchr("                      : (p[0] =="..., '\n', 467) = 0x0259fe92
[0x4022d1] memchr("\t    {\n\t      /* Start building "..., '\n', 410) = 0x0259fe99
[0x4022d1] memchr("\t      /* Start building a new e"..., '\n', 403) = 0x0259fec4
[0x4022d1] memchr("              \n              las"..., '\n', 360) = 0x0259fed3
[0x4022d1] memchr("              laststart = b;\n\n\t "..., '\n', 345) = 0x0259fef0
[0x4022d1] memchr("\n\t      BUF_PUSH_2 (exactn, 0);\n"..., '\n', 316) = 0x0259fef1
[0x4022d1] memchr("\t      BUF_PUSH_2 (exactn, 0);\n\t"..., '\n', 315) = 0x0259ff10
[0x4022d1] memchr("\t      pending_exact = b - 1;\n  "..., '\n', 284) = 0x0259ff2e
[0x4022d1] memchr("            }\n            \n\t  BU"..., '\n', 254) = 0x0259ff3c
[0x4022d1] memchr("            \n\t  BUF_PUSH (c);\n  "..., '\n', 240) = 0x0259ff49
[0x4022d1] memchr("\t  BUF_PUSH (c);\n          (*pen"..., '\n', 227) = 0x0259ff5a
[0x4022d1] memchr("          (*pending_exact)++;\n\t "..., '\n', 210) = 0x0259ff78
[0x4022d1] memchr("\t  break;\n        } /* switch (c"..., '\n', 180) = 0x0259ff82
[0x4022d1] memchr("        } /* switch (c) */\n    }"..., '\n', 170) = 0x0259ff9d
[0x4022d1] memchr("    } /* while p != pend */\n\n  \n"..., '\n', 143) = 0x0259ffb9
[0x4022d1] memchr("\n  \n  /* Through the pattern now"..., '\n', 115) = 0x0259ffba
[0x4022d1] memchr("  \n  /* Through the pattern now."..., '\n', 114) = 0x0259ffbd
[0x4022d1] memchr("  /* Through the pattern now.  *"..., '\n', 111) = 0x0259ffdf
[0x4022d1] memchr("  \n  if (fixup_alt_jump)\n    STO"..., '\n', 77) = 0x0259ffe2
[0x4022d1] memchr("  if (fixup_alt_jump)\n    STORE_"..., '\n', 74) = 0x0259fff8
[0x4022d1] memchr("    STORE_JUMP (jump_past_alt, f"..., '\n', 52) = 0x025a002b
[0x4022d1] memchr("\n  if (!COMPILE_STACK_EMPTY) \n  "..., '\n', 1) = 0x025a002c
[0x4022d1] memchr("  if (!COMPILE_STACK_EMPTY) \n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("3683:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (!COMPILE_STACK_EMPTY) \n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    return REG_EPAREN;\n\n  free ("..., 'I', 24498) = 0x025a010b
[0x40cdf3] memchr("INT1 ("\\nCompiled pattern: \\n");"..., '\n', 24305) = 0x025a012b
[0x4022d1] memchr("    return REG_EPAREN;\n\n  free ("..., '\n', 179) = 0x025a0060
[0x4022d1] memchr("\n  free (compile_stack.stack);\n\n"..., '\n', 156) = 0x025a0061
[0x4022d1] memchr("  free (compile_stack.stack);\n\n "..., '\n', 155) = 0x025a007f
[0x4022d1] memchr("\n  /* We have succeeded; set the"..., '\n', 125) = 0x025a0080
[0x4022d1] memchr("  /* We have succeeded; set the "..., '\n', 124) = 0x025a00ba
[0x4022d1] memchr("  bufp->used = b - bufp->buffer;"..., '\n', 66) = 0x025a00db
[0x4022d1] memchr("\n#ifdef DEBUG\n  if (debug)\n    {"..., '\n', 33) = 0x025a00dc
[0x4022d1] memchr("#ifdef DEBUG\n  if (debug)\n    {\n"..., '\n', 32) = 0x025a00e9
[0x4022d1] memchr("  if (debug)\n    {\n      DEBUG_P"..., '\n', 19) = 0x025a00f6
[0x4022d1] memchr("    {\n      DEBUG_PRINT1 ("\\nCom"..., '\n', 6) = 0x025a00fc
[0x4022d1] memchr("      DEBUG_PRINT1 ("\\nCompiled "..., '\n', 0) = NULL
[0x4023cc] fwrite("3694:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT1 ("\\nCompiled "..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      print_compiled_pattern (bu"..., 'I', 24272) = 0x025a0c1f
[0x40cdf3] memchr("ILE_STACK's elements and \n   fal"..., '\n', 21469) = 0x025a0c38
[0x4022d1] memchr("      print_compiled_pattern (bu"..., '\n', 2760) = 0x025a0150
[0x4022d1] memchr("    }\n#endif /* DEBUG */\n\n  retu"..., '\n', 2723) = 0x025a0156
[0x4022d1] memchr("#endif /* DEBUG */\n\n  return REG"..., '\n', 2717) = 0x025a0169
[0x4022d1] memchr("\n  return REG_NOERROR;\n} /* rege"..., '\n', 2698) = 0x025a016a
[0x4022d1] memchr("  return REG_NOERROR;\n} /* regex"..., '\n', 2697) = 0x025a0180
[0x4022d1] memchr("} /* regex_compile */\n\014\n/* Subro"..., '\n', 2675) = 0x025a0196
[0x4022d1] memchr("\014\n/* Subroutines for `regex_comp"..., '\n', 2653) = 0x025a0198
[0x4022d1] memchr("/* Subroutines for `regex_compil"..., '\n', 2651) = 0x025a01c0
[0x4022d1] memchr("\n/* Store OP at LOC followed by "..., '\n', 2611) = 0x025a01c1
[0x4022d1] memchr("/* Store OP at LOC followed by t"..., '\n', 2610) = 0x025a0204
[0x4022d1] memchr("\nstatic void\nstore_op1 (op, loc,"..., '\n', 2543) = 0x025a0205
[0x4022d1] memchr("static void\nstore_op1 (op, loc, "..., '\n', 2542) = 0x025a0211
[0x4022d1] memchr("store_op1 (op, loc, arg)\n    re_"..., '\n', 2530) = 0x025a022a
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 2505) = 0x025a023e
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 2485) = 0x025a0256
[0x4022d1] memchr("    int arg;\n{\n  *loc = (unsigne"..., '\n', 2461) = 0x025a0263
[0x4022d1] memchr("{\n  *loc = (unsigned char) op;\n "..., '\n', 2448) = 0x025a0265
[0x4022d1] memchr("  *loc = (unsigned char) op;\n  S"..., '\n', 2446) = 0x025a0282
[0x4022d1] memchr("  STORE_NUMBER (loc + 1, arg);\n}"..., '\n', 2417) = 0x025a02a1
[0x4022d1] memchr("}\n\n\n/* Like `store_op1', but" fo"..., '\n', 2386) = 0x025a02a3
[0x4022d1] memchr("\n\n/* Like `store_op1', but" for "..., '\n', 2384) = 0x025a02a4
[0x4022d1] memchr("\n/* Like `store_op1', but" for '"..., '\n', 2383) = 0x025a02a5
[0x4022d1] memchr("/* Like `store_op1', but" for 't"..., '\n', 2382) = 0x025a02ef
[0x4022d1] memchr("\nstatic void\nstore_op2 (op, loc,"..., '\n', 2308) = 0x025a02f0
[0x4022d1] memchr("static void\nstore_op2 (op, loc, "..., '\n', 2307) = 0x025a02fc
[0x4022d1] memchr("store_op2 (op, loc, arg1, arg2)\n"..., '\n', 2295) = 0x025a031c
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 2263) = 0x025a0330
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 2243) = 0x025a0348
[0x4022d1] memchr("    int arg1, arg2;\n{\n  *loc = ("..., '\n', 2219) = 0x025a035c
[0x4022d1] memchr("{\n  *loc = (unsigned char) op;\n "..., '\n', 2199) = 0x025a035e
[0x4022d1] memchr("  *loc = (unsigned char) op;\n  S"..., '\n', 2197) = 0x025a037b
[0x4022d1] memchr("  STORE_NUMBER (loc + 1, arg1);\n"..., '\n', 2168) = 0x025a039b
[0x4022d1] memchr("  STORE_NUMBER (loc + 3, arg2);\n"..., '\n', 2136) = 0x025a03bb
[0x4022d1] memchr("}\n\n\n/* Copy the bytes from LOC t"..., '\n', 2104) = 0x025a03bd
[0x4022d1] memchr("\n\n/* Copy the bytes from LOC to "..., '\n', 2102) = 0x025a03be
[0x4022d1] memchr("\n/* Copy the bytes from LOC to E"..., '\n', 2101) = 0x025a03bf
[0x4022d1] memchr("/* Copy the bytes from LOC to EN"..., '\n', 2100) = 0x025a0408
[0x4022d1] memchr("   for OP followed by two-byte i"..., '\n', 2027) = 0x025a0442
[0x4022d1] memchr("\nstatic void\ninsert_op1 (op, loc"..., '\n', 1969) = 0x025a0443
[0x4022d1] memchr("static void\ninsert_op1 (op, loc,"..., '\n', 1968) = 0x025a044f
[0x4022d1] memchr("insert_op1 (op, loc, arg, end)\n "..., '\n', 1956) = 0x025a046e
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 1925) = 0x025a0482
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 1905) = 0x025a049a
[0x4022d1] memchr("    int arg;\n    unsigned char *"..., '\n', 1881) = 0x025a04a7
[0x4022d1] memchr("    unsigned char *end;    \n{\n  "..., '\n', 1868) = 0x025a04c3
[0x4022d1] memchr("{\n  register unsigned char *pfro"..., '\n', 1840) = 0x025a04c5
[0x4022d1] memchr("  register unsigned char *pfrom "..., '\n', 1838) = 0x025a04ec
[0x4022d1] memchr("  register unsigned char *pto = "..., '\n', 1799) = 0x025a0515
[0x4022d1] memchr("\n  while (pfrom != loc)\n    *--p"..., '\n', 1758) = 0x025a0516
[0x4022d1] memchr("  while (pfrom != loc)\n    *--pt"..., '\n', 1757) = 0x025a052d
[0x4022d1] memchr("    *--pto = *--pfrom;\n    \n  st"..., '\n', 1734) = 0x025a0544
[0x4022d1] memchr("    \n  store_op1 (op, loc, arg);"..., '\n', 1711) = 0x025a0549
[0x4022d1] memchr("  store_op1 (op, loc, arg);\n}\n\n\n"..., '\n', 1706) = 0x025a0565
[0x4022d1] memchr("}\n\n\n/* Like `insert_op1', but fo"..., '\n', 1678) = 0x025a0567
[0x4022d1] memchr("\n\n/* Like `insert_op1', but for "..., '\n', 1676) = 0x025a0568
[0x4022d1] memchr("\n/* Like `insert_op1', but for t"..., '\n', 1675) = 0x025a0569
[0x4022d1] memchr("/* Like `insert_op1', but for tw"..., '\n', 1674) = 0x025a05b2
[0x4022d1] memchr("\nstatic void\ninsert_op2 (op, loc"..., '\n', 1601) = 0x025a05b3
[0x4022d1] memchr("static void\ninsert_op2 (op, loc,"..., '\n', 1600) = 0x025a05bf
[0x4022d1] memchr("insert_op2 (op, loc, arg1, arg2,"..., '\n', 1588) = 0x025a05e5
[0x4022d1] memchr("    re_opcode_t op;\n    unsigned"..., '\n', 1550) = 0x025a05f9
[0x4022d1] memchr("    unsigned char *loc;\n    int "..., '\n', 1530) = 0x025a0611
[0x4022d1] memchr("    int arg1, arg2;\n    unsigned"..., '\n', 1506) = 0x025a0625
[0x4022d1] memchr("    unsigned char *end;    \n{\n  "..., '\n', 1486) = 0x025a0641
[0x4022d1] memchr("{\n  register unsigned char *pfro"..., '\n', 1458) = 0x025a0643
[0x4022d1] memchr("  register unsigned char *pfrom "..., '\n', 1456) = 0x025a066a
[0x4022d1] memchr("  register unsigned char *pto = "..., '\n', 1417) = 0x025a0693
[0x4022d1] memchr("\n  while (pfrom != loc)\n    *--p"..., '\n', 1376) = 0x025a0694
[0x4022d1] memchr("  while (pfrom != loc)\n    *--pt"..., '\n', 1375) = 0x025a06ab
[0x4022d1] memchr("    *--pto = *--pfrom;\n    \n  st"..., '\n', 1352) = 0x025a06c2
[0x4022d1] memchr("    \n  store_op2 (op, loc, arg1,"..., '\n', 1329) = 0x025a06c7
[0x4022d1] memchr("  store_op2 (op, loc, arg1, arg2"..., '\n', 1324) = 0x025a06ea
[0x4022d1] memchr("}\n\n\n/* P points to just after a "..., '\n', 1289) = 0x025a06ec
[0x4022d1] memchr("\n\n/* P points to just after a ^ "..., '\n', 1287) = 0x025a06ed
[0x4022d1] memchr("\n/* P points to just after a ^ i"..., '\n', 1286) = 0x025a06ee
[0x4022d1] memchr("/* P points to just after a ^ in"..., '\n', 1285) = 0x025a0735
[0x4022d1] memchr("   after an alternative or a beg"..., '\n', 1214) = 0x025a077e
[0x4022d1] memchr("   least one character before th"..., '\n', 1141) = 0x025a07a7
[0x4022d1] memchr("\nstatic boolean\nat_begline_loc_p"..., '\n', 1100) = 0x025a07a8
[0x4022d1] memchr("static boolean\nat_begline_loc_p "..., '\n', 1099) = 0x025a07b7
[0x4022d1] memchr("at_begline_loc_p (pattern, p, sy"..., '\n', 1084) = 0x025a07dd
[0x4022d1] memchr("    const char *pattern, *p;\n   "..., '\n', 1046) = 0x025a07fa
[0x4022d1] memchr("    reg_syntax_t syntax;\n{\n  con"..., '\n', 1017) = 0x025a0813
[0x4022d1] memchr("{\n  const char *prev = p - 2;\n  "..., '\n', 992) = 0x025a0815
[0x4022d1] memchr("  const char *prev = p - 2;\n  bo"..., '\n', 990) = 0x025a0831
[0x4022d1] memchr("  boolean prev_prev_backslash = "..., '\n', 962) = 0x025a0875
[0x4022d1] memchr("  \n  return\n       /* After a su"..., '\n', 894) = 0x025a0878
[0x4022d1] memchr("  return\n       /* After a subex"..., '\n', 891) = 0x025a0881
[0x4022d1] memchr("       /* After a subexpression?"..., '\n', 882) = 0x025a08a6
[0x4022d1] memchr("       (*prev == '(' && (syntax "..., '\n', 845) = 0x025a08f1
[0x4022d1] memchr("       /* After an alternative? "..., '\n', 770) = 0x025a0915
[0x4022d1] memchr("    || (*prev == '|' && (syntax "..., '\n', 734) = 0x025a095f
[0x4022d1] memchr("}\n\n\n/* The dual of at_begline_lo"..., '\n', 660) = 0x025a0961
[0x4022d1] memchr("\n\n/* The dual of at_begline_loc_"..., '\n', 658) = 0x025a0962
[0x4022d1] memchr("\n/* The dual of at_begline_loc_p"..., '\n', 657) = 0x025a0963
[0x4022d1] memchr("/* The dual of at_begline_loc_p."..., '\n', 656) = 0x025a09ac
[0x4022d1] memchr("   at least one character after "..., '\n', 583) = 0x025a09e9
[0x4022d1] memchr("\nstatic boolean\nat_endline_loc_p"..., '\n', 522) = 0x025a09ea
[0x4022d1] memchr("static boolean\nat_endline_loc_p "..., '\n', 521) = 0x025a09f9
[0x4022d1] memchr("at_endline_loc_p (p, pend, synta"..., '\n', 506) = 0x025a0a1c
[0x4022d1] memchr("    const char *p, *pend;\n    in"..., '\n', 471) = 0x025a0a36
[0x4022d1] memchr("    int syntax;\n{\n  const char *"..., '\n', 445) = 0x025a0a46
[0x4022d1] memchr("{\n  const char *next = p;\n  bool"..., '\n', 429) = 0x025a0a48
[0x4022d1] memchr("  const char *next = p;\n  boolea"..., '\n', 427) = 0x025a0a60
[0x4022d1] memchr("  boolean next_backslash = *next"..., '\n', 403) = 0x025a0a8a
[0x4022d1] memchr("  const char *next_next = p + 1 "..., '\n', 361) = 0x025a0ac1
[0x4022d1] memchr("  \n  return\n       /* Before a s"..., '\n', 306) = 0x025a0ac4
[0x4022d1] memchr("  return\n       /* Before a sube"..., '\n', 303) = 0x025a0acd
[0x4022d1] memchr("       /* Before a subexpression"..., '\n', 294) = 0x025a0af3
[0x4022d1] memchr("       (syntax & RE_NO_BK_PARENS"..., '\n', 256) = 0x025a0b23
[0x4022d1] memchr("        : next_backslash && next"..., '\n', 208) = 0x025a0b5f
[0x4022d1] memchr("       /* Before an alternative?"..., '\n', 148) = 0x025a0b84
[0x4022d1] memchr("    || (syntax & RE_NO_BK_VBAR ?"..., '\n', 111) = 0x025a0bb2
[0x4022d1] memchr("        : next_backslash && next"..., '\n', 65) = 0x025a0bef
[0x4022d1] memchr("}\n\n\n/* Returns true if REGNUM is"..., '\n', 4) = 0x025a0bf1
[0x4022d1] memchr("\n\n/* Returns true if REGNUM is i"..., '\n', 2) = 0x025a0bf2
[0x4022d1] memchr("\n/* Returns true if REGNUM is in"..., '\n', 1) = 0x025a0bf3
[0x4022d1] memchr("/* Returns true if REGNUM is in "..., '\n', 0) = NULL
[0x4023cc] fwrite("3812:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Returns true if REGNUM is in "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   false if it's not.  */\n\nstati"..., 'I', 21443) = 0x025a1303
[0x40cdf3] memchr("If the start is after the end, t"..., '\n', 19705) = 0x025a1339
[0x4022d1] memchr("   false if it's not.  */\n\nstati"..., '\n', 1733) = 0x025a0c52
[0x4022d1] memchr("\nstatic boolean\ngroup_in_compile"..., '\n', 1707) = 0x025a0c53
[0x4022d1] memchr("static boolean\ngroup_in_compile_"..., '\n', 1706) = 0x025a0c62
[0x4022d1] memchr("group_in_compile_stack (compile_"..., '\n', 1691) = 0x025a0c91
[0x4022d1] memchr("    compile_stack_type compile_s"..., '\n', 1644) = 0x025a0cb7
[0x4022d1] memchr("    regnum_t regnum;\n{\n  int thi"..., '\n', 1606) = 0x025a0ccc
[0x4022d1] memchr("{\n  int this_element;\n\n  for (th"..., '\n', 1585) = 0x025a0cce
[0x4022d1] memchr("  int this_element;\n\n  for (this"..., '\n', 1583) = 0x025a0ce2
[0x4022d1] memchr("\n  for (this_element = compile_s"..., '\n', 1563) = 0x025a0ce3
[0x4022d1] memchr("  for (this_element = compile_st"..., '\n', 1562) = 0x025a0d14
[0x4022d1] memchr("       this_element >= 0; \n     "..., '\n', 1513) = 0x025a0d2f
[0x4022d1] memchr("       this_element--)\n    if (c"..., '\n', 1486) = 0x025a0d46
[0x4022d1] memchr("    if (compile_stack.stack[this"..., '\n', 1463) = 0x025a0d82
[0x4022d1] memchr("      return true;\n\n  return fal"..., '\n', 1403) = 0x025a0d95
[0x4022d1] memchr("\n  return false;\n}\n\n\n/* Read the"..., '\n', 1384) = 0x025a0d96
[0x4022d1] memchr("  return false;\n}\n\n\n/* Read the "..., '\n', 1383) = 0x025a0da6
[0x4022d1] memchr("}\n\n\n/* Read the ending character"..., '\n', 1367) = 0x025a0da8
[0x4022d1] memchr("\n\n/* Read the ending character o"..., '\n', 1365) = 0x025a0da9
[0x4022d1] memchr("\n/* Read the ending character of"..., '\n', 1364) = 0x025a0daa
[0x4022d1] memchr("/* Read the ending character of "..., '\n', 1363) = 0x025a0df5
[0x4022d1] memchr("   uncompiled pattern *P_PTR (wh"..., '\n', 1288) = 0x025a0e37
[0x4022d1] memchr("   starting character is in `P[-"..., '\n', 1222) = 0x025a0e7d
[0x4022d1] memchr("   Then we set the translation o"..., '\n', 1152) = 0x025a0ec1
[0x4022d1] memchr("   ending characters (inclusive)"..., '\n', 1084) = 0x025a0efd
[0x4022d1] memchr("   \n   Return an error code.\n   "..., '\n', 1024) = 0x025a0f01
[0x4022d1] memchr("   Return an error code.\n   \n   "..., '\n', 1020) = 0x025a0f1a
[0x4022d1] memchr("   \n   We use these short variab"..., '\n', 995) = 0x025a0f1e
[0x4022d1] memchr("   We use these short variable n"..., '\n', 991) = 0x025a0f64
[0x4022d1] memchr("   `regex_compile' itself.  */\n\n"..., '\n', 921) = 0x025a0f83
[0x4022d1] memchr("\nstatic reg_errcode_t\ncompile_ra"..., '\n', 890) = 0x025a0f84
[0x4022d1] memchr("static reg_errcode_t\ncompile_ran"..., '\n', 889) = 0x025a0f99
[0x4022d1] memchr("compile_range (p_ptr, pend, tran"..., '\n', 868) = 0x025a0fcb
[0x4022d1] memchr("    const char **p_ptr, *pend;\n "..., '\n', 818) = 0x025a0fea
[0x4022d1] memchr("    char *translate;\n    reg_syn"..., '\n', 787) = 0x025a0fff
[0x4022d1] memchr("    reg_syntax_t syntax;\n    uns"..., '\n', 766) = 0x025a1018
[0x4022d1] memchr("    unsigned char *b;\n{\n  unsign"..., '\n', 741) = 0x025a102e
[0x4022d1] memchr("{\n  unsigned this_char;\n\n  const"..., '\n', 719) = 0x025a1030
[0x4022d1] memchr("  unsigned this_char;\n\n  const c"..., '\n', 717) = 0x025a1046
[0x4022d1] memchr("\n  const char *p = *p_ptr;\n  int"..., '\n', 695) = 0x025a1047
[0x4022d1] memchr("  const char *p = *p_ptr;\n  int "..., '\n', 694) = 0x025a1061
[0x4022d1] memchr("  int range_start, range_end;\n  "..., '\n', 668) = 0x025a107f
[0x4022d1] memchr("  \n  if (p == pend)\n    return R"..., '\n', 638) = 0x025a1082
[0x4022d1] memchr("  if (p == pend)\n    return REG_"..., '\n', 635) = 0x025a1093
[0x4022d1] memchr("    return REG_ERANGE;\n\n  /* Eve"..., '\n', 618) = 0x025a10aa
[0x4022d1] memchr("\n  /* Even though the pattern is"..., '\n', 595) = 0x025a10ab
[0x4022d1] memchr("  /* Even though the pattern is "..., '\n', 594) = 0x025a10ef
[0x4022d1] memchr("     with unsigned char *'s; if "..., '\n', 526) = 0x025a1135
[0x4022d1] memchr("     is set, the range endpoints"..., '\n', 456) = 0x025a117b
[0x4022d1] memchr("     signed char *.\n\n     We als"..., '\n', 386) = 0x025a118f
[0x4022d1] memchr("\n     We also want to fetch the "..., '\n', 366) = 0x025a1190
[0x4022d1] memchr("     We also want to fetch the e"..., '\n', 365) = 0x025a11d8
[0x4022d1] memchr("     appropriate translation is "..., '\n', 293) = 0x025a1220
[0x4022d1] memchr("  range_start = ((unsigned char "..., '\n', 221) = 0x025a124b
[0x4022d1] memchr("  range_end   = ((unsigned char "..., '\n', 178) = 0x025a1275
[0x4022d1] memchr("\n  /* Have to increment the poin"..., '\n', 136) = 0x025a1276
[0x4022d1] memchr("  /* Have to increment the point"..., '\n', 135) = 0x025a12b9
[0x4022d1] memchr("     caller isn't still at the e"..., '\n', 68) = 0x025a12ee
[0x4022d1] memchr("  (*p_ptr)++;\n\n  /* If the start"..., '\n', 15) = 0x025a12fc
[0x4022d1] memchr("\n  /* If the start is after the "..., '\n', 1) = 0x025a12fd
[0x4022d1] memchr("  /* If the start is after the e"..., '\n', 0) = NULL
[0x4023cc] fwrite("3872:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If the start is after the e"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (range_start > range_end)\n "..., 'I', 19650) = 0x025a14ed
[0x40cdf3] memchr("IST_BIT (TRANSLATE (this_char));"..., '\n', 19215) = 0x025a150d
[0x4022d1] memchr("  if (range_start > range_end)\n "..., '\n', 424) = 0x025a1358
[0x4022d1] memchr("    return syntax & RE_NO_EMPTY_"..., '\n', 393) = 0x025a139b
[0x4022d1] memchr("\n  /* Here we see why `this_char"..., '\n', 326) = 0x025a139c
[0x4022d1] memchr("  /* Here we see why `this_char'"..., '\n', 325) = 0x025a13e0
[0x4022d1] memchr("     char' -- the range is inclu"..., '\n', 257) = 0x025a1420
[0x4022d1] memchr("     (assuming 8-bit characters)"..., '\n', 193) = 0x025a1469
[0x4022d1] memchr("     loop, since all characters "..., '\n', 120) = 0x025a1496
[0x4022d1] memchr("  for (this_char = range_start; "..., '\n', 75) = 0x025a14db
[0x4022d1] memchr("    {\n      SET_LIST_BIT (TRANSL"..., '\n', 6) = 0x025a14e1
[0x4022d1] memchr("      SET_LIST_BIT (TRANSLATE (t"..., '\n', 0) = NULL
[0x4023cc] fwrite("3882:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      SET_LIST_BIT (TRANSLATE (t"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n  \n  return REG_NOERROR;\n}"..., 'I', 19182) = 0x025a162f
[0x40cdf3] memchr("If this number is exceeded, we a"..., '\n', 18893) = 0x025a165b
[0x4022d1] memchr("    }\n  \n  return REG_NOERROR;\n}"..., '\n', 270) = 0x025a1513
[0x4022d1] memchr("  \n  return REG_NOERROR;\n}\n\014\n/* "..., '\n', 264) = 0x025a1516
[0x4022d1] memchr("  return REG_NOERROR;\n}\n\014\n/* Fai"..., '\n', 261) = 0x025a152c
[0x4022d1] memchr("}\n\014\n/* Failure stack declaration"..., '\n', 239) = 0x025a152e
[0x4022d1] memchr("\014\n/* Failure stack declarations "..., '\n', 237) = 0x025a1530
[0x4022d1] memchr("/* Failure stack declarations an"..., '\n', 235) = 0x025a1576
[0x4022d1] memchr("   re_match_2 use a failure stac"..., '\n', 165) = 0x025a15bd
[0x4022d1] memchr("   REGEX_ALLOCATE.  */\n   \n\n/* N"..., '\n', 94) = 0x025a15d4
[0x4022d1] memchr("   \n\n/* Number of failure points"..., '\n', 71) = 0x025a15d8
[0x4022d1] memchr("\n/* Number of failure points for"..., '\n', 67) = 0x025a15d9
[0x4022d1] memchr("/* Number of failure points for "..., '\n', 66) = 0x025a161b
[0x4022d1] memchr("   when matching.  If this numbe"..., '\n', 0) = NULL
[0x4023cc] fwrite("3894:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   when matching.  If this numbe"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   space, so it is not a hard li"..., 'I', 18848) = 0x025a168d
[0x40cdf3] memchr("INIT_FAILURE_ALLOC\n#define INIT_"..., '\n', 18799) = 0x025a169f
[0x4022d1] memchr("   space, so it is not a hard li"..., '\n', 41) = 0x025a1684
[0x4022d1] memchr("#ifndef INIT_FAILURE_ALLOC\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("3896:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifndef INIT_FAILURE_ALLOC\n#defi"..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define INIT_FAILURE_ALLOC 5\n#en"..., 'I', 18780) = 0x025a16a8
[0x40cdf3] memchr("INIT_FAILURE_ALLOC 5\n#endif\n\n/* "..., '\n', 18772) = 0x025a16bc
[0x4022d1] memchr("#define INIT_FAILURE_ALLOC 5\n#en"..., '\n', 0) = NULL
[0x4023cc] fwrite("3897:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INIT_FAILURE_ALLOC 5\n#en"..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n/* Roughly the maximum n"..., 'I', 18751) = 0x025a1732
[0x40cdf3] memchr("ILURE_SPACE each time we failed."..., '\n', 18634) = 0x025a1752
[0x4022d1] memchr("#endif\n\n/* Roughly the maximum n"..., '\n', 80) = 0x025a16c3
[0x4022d1] memchr("\n/* Roughly the maximum number o"..., '\n', 73) = 0x025a16c4
[0x4022d1] memchr("/* Roughly the maximum number of"..., '\n', 72) = 0x025a170c
[0x4022d1] memchr("   exactly that if always used M"..., '\n', 0) = NULL
[0x4023cc] fwrite("3901:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   exactly that if always used M"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   This is a variable only so us"..., 'I', 18601) = 0x025a1898
[0x40cdf3] memchr("IL_STACK_EMPTY()     (fail_stack"..., '\n', 18276) = 0x025a18c4
[0x4022d1] memchr("   This is a variable only so us"..., '\n', 315) = 0x025a179a
[0x4022d1] memchr("   change it ourselves.  */\nint "..., '\n', 243) = 0x025a17b6
[0x4022d1] memchr("int re_max_failures = 2000;\n\ntyp"..., '\n', 215) = 0x025a17d2
[0x4022d1] memchr("\ntypedef const unsigned char *fa"..., '\n', 187) = 0x025a17d3
[0x4022d1] memchr("typedef const unsigned char *fai"..., '\n', 186) = 0x025a1802
[0x4022d1] memchr("\ntypedef struct\n{\n  fail_stack_e"..., '\n', 139) = 0x025a1803
[0x4022d1] memchr("typedef struct\n{\n  fail_stack_el"..., '\n', 138) = 0x025a1812
[0x4022d1] memchr("{\n  fail_stack_elt_t *stack;\n  u"..., '\n', 123) = 0x025a1814
[0x4022d1] memchr("  fail_stack_elt_t *stack;\n  uns"..., '\n', 121) = 0x025a182f
[0x4022d1] memchr("  unsigned size;\n  unsigned avai"..., '\n', 94) = 0x025a1840
[0x4022d1] memchr("  unsigned avail;\t\t\t/* Offset of"..., '\n', 77) = 0x025a1879
[0x4022d1] memchr("} fail_stack_type;\n\n#define FAIL"..., '\n', 20) = 0x025a188c
[0x4022d1] memchr("\n#define FAIL_STACK_EMPTY()     "..., '\n', 1) = 0x025a188d
[0x4022d1] memchr("#define FAIL_STACK_EMPTY()     ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3915:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FAIL_STACK_EMPTY()     ("..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define FAIL_STACK_PTR_EMPTY() ("..., 'I', 18231) = 0x025a18cf
[0x40cdf3] memchr("IL_STACK_PTR_EMPTY() (fail_stack"..., '\n', 18221) = 0x025a1900
[0x4022d1] memchr("#define FAIL_STACK_PTR_EMPTY() ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3916:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FAIL_STACK_PTR_EMPTY() ("..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define FAIL_STACK_FULL()      ("..., 'I', 18171) = 0x025a190b
[0x40cdf3] memchr("IL_STACK_FULL()      (fail_stack"..., '\n', 18161) = 0x025a1945
[0x4022d1] memchr("#define FAIL_STACK_FULL()      ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3917:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FAIL_STACK_FULL()      ("..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define FAIL_STACK_TOP()       ("..., 'I', 18102) = 0x025a1950
[0x40cdf3] memchr("IL_STACK_TOP()       (fail_stack"..., '\n', 18092) = 0x025a1989
[0x4022d1] memchr("#define FAIL_STACK_TOP()       ("..., '\n', 0) = NULL
[0x4023cc] fwrite("3918:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FAIL_STACK_TOP()       ("..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Initialize `fail_stack'.  D"..., 'I', 18034) = 0x025a198f
[0x40cdf3] memchr("Initialize `fail_stack'.  Do `re"..., '\n', 18029) = 0x025a19cf
[0x4022d1] memchr("\n\n/* Initialize `fail_stack'.  D"..., '\n', 2) = 0x025a198a
[0x4022d1] memchr("\n/* Initialize `fail_stack'.  Do"..., '\n', 1) = 0x025a198b
[0x4022d1] memchr("/* Initialize `fail_stack'.  Do "..., '\n', 0) = NULL
[0x4023cc] fwrite("3921:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Initialize `fail_stack'.  Do "..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#define INIT_FAIL_STACK()\t\t\t\t\t\t"..., 'I', 17964) = 0x025a19d9
[0x40cdf3] memchr("INIT_FAIL_STACK()\t\t\t\t\t\t\\\n  do {\t"..., '\n', 17955) = 0x025a19f1
[0x4022d1] memchr("\n#define INIT_FAIL_STACK()\t\t\t\t\t\t"..., '\n', 1) = 0x025a19d0
[0x4022d1] memchr("#define INIT_FAIL_STACK()\t\t\t\t\t\t\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("3923:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INIT_FAIL_STACK()\t\t\t\t\t\t\\"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    fail_stack."..., 'I', 17930) = 0x025a1a4a
[0x40cdf3] memchr("INIT_FAILURE_ALLOC * sizeof (fai"..., '\n', 17842) = 0x025a1a7c
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    fail_stack."..., '\n', 66) = 0x025a1a02
[0x4022d1] memchr("    fail_stack.stack = (fail_sta"..., '\n', 49) = 0x025a1a33
[0x4022d1] memchr("      REGEX_ALLOCATE (INIT_FAILU"..., '\n', 0) = NULL
[0x4023cc] fwrite("3926:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      REGEX_ALLOCATE (INIT_FAILU"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    if (fail_stack.st"..., 'I', 17791) = 0x025a1aea
[0x40cdf3] memchr("INIT_FAILURE_ALLOC;\t\t\t\t\\\n    fai"..., '\n', 17682) = 0x025a1b02
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    if (fail_stack.st"..., '\n', 87) = 0x025a1a87
[0x4022d1] memchr("    if (fail_stack.stack == NULL"..., '\n', 76) = 0x025a1aaf
[0x4022d1] memchr("      return -2;\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t"..., '\n', 36) = 0x025a1ac8
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    fail_stack.size ="..., '\n', 11) = 0x025a1ad3
[0x4022d1] memchr("    fail_stack.size = INIT_FAILU"..., '\n', 0) = NULL
[0x4023cc] fwrite("3931:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    fail_stack.size = INIT_FAILU"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    fail_stack.avail = 0;\t\t\t\t\t\t\\"..., 'I', 17657) = 0x025a1b4c
[0x40cdf3] memchr("IL_STACK, up to approximately `r"..., '\n', 17584) = 0x025a1b82
[0x4022d1] memchr("    fail_stack.avail = 0;\t\t\t\t\t\t\\"..., '\n', 49) = 0x025a1b23
[0x4022d1] memchr("  } while (0)\n\n\n/* Double the si"..., '\n', 16) = 0x025a1b31
[0x4022d1] memchr("\n\n/* Double the size of FAIL_STA"..., '\n', 2) = 0x025a1b32
[0x4022d1] memchr("\n/* Double the size of FAIL_STAC"..., '\n', 1) = 0x025a1b33
[0x4022d1] memchr("/* Double the size of FAIL_STACK"..., '\n', 0) = NULL
[0x4023cc] fwrite("3936:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Double the size of FAIL_STACK"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Return 1 if succeeds, and 0 "..., 'I', 17529) = 0x025a1c4c
[0x40cdf3] memchr("IL_STACK(fail_stack)\t\t\t\t\t\\\n  ((f"..., '\n', 17328) = 0x025a1c66
[0x4022d1] memchr("\n   Return 1 if succeeds, and 0 "..., '\n', 184) = 0x025a1b83
[0x4022d1] memchr("   Return 1 if succeeds, and 0 i"..., '\n', 183) = 0x025a1bbe
[0x4022d1] memchr("   allocating space for it or it"..., '\n', 124) = 0x025a1bf8
[0x4022d1] memchr("   \n   REGEX_REALLOCATE requires"..., '\n', 66) = 0x025a1bfc
[0x4022d1] memchr("   REGEX_REALLOCATE requires `de"..., '\n', 62) = 0x025a1c39
[0x4022d1] memchr("\n#define DOUBLE_FAIL_STACK(fail_"..., '\n', 1) = 0x025a1c3a
[0x4022d1] memchr("#define DOUBLE_FAIL_STACK(fail_s"..., '\n', 0) = NULL
[0x4023cc] fwrite("3943:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DOUBLE_FAIL_STACK(fail_s"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  ((fail_stack).size > re_max_fa"..., 'I', 17301) = 0x025a1c96
[0x40cdf3] memchr("ILURE_ITEMS\t\t\\\n   ? 0\t\t\t\t\t\t\t\t\t\\\n"..., '\n', 17254) = 0x025a1ca4
[0x4022d1] memchr("  ((fail_stack).size > re_max_fa"..., '\n', 0) = NULL
[0x4023cc] fwrite("3944:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  ((fail_stack).size > re_max_fa"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   ? 0\t\t\t\t\t\t\t\t\t\\\n   : ((fail_sta"..., 'I', 17239) = 0x025a1e34
[0x40cdf3] memchr("IL_STACK. \n\n   Return 1 if was a"..., '\n', 16840) = 0x025a1e3e
[0x4022d1] memchr("   ? 0\t\t\t\t\t\t\t\t\t\\\n   : ((fail_sta"..., '\n', 375) = 0x025a1cb5
[0x4022d1] memchr("   : ((fail_stack).stack = (fail"..., '\n', 358) = 0x025a1cea
[0x4022d1] memchr("        REGEX_REALLOCATE ((fail_"..., '\n', 305) = 0x025a1d1e
[0x4022d1] memchr("          (fail_stack).size * si"..., '\n', 253) = 0x025a1d5a
[0x4022d1] memchr("          ((fail_stack).size << "..., '\n', 193) = 0x025a1d9d
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      (fail_stack).st"..., '\n', 126) = 0x025a1da8
[0x4022d1] memchr("      (fail_stack).stack == NULL"..., '\n', 115) = 0x025a1dcf
[0x4022d1] memchr("      ? 0\t\t\t\t\t\t\t\t\\\n      : ((fai"..., '\n', 76) = 0x025a1de2
[0x4022d1] memchr("      : ((fail_stack).size <<= 1"..., '\n', 57) = 0x025a1e0b
[0x4022d1] memchr("         1)))\n\n\n/* Push PATTERN_"..., '\n', 16) = 0x025a1e19
[0x4022d1] memchr("\n\n/* Push PATTERN_OP on FAIL_STA"..., '\n', 2) = 0x025a1e1a
[0x4022d1] memchr("\n/* Push PATTERN_OP on FAIL_STAC"..., '\n', 1) = 0x025a1e1b
[0x4022d1] memchr("/* Push PATTERN_OP on FAIL_STACK"..., '\n', 0) = NULL
[0x4023cc] fwrite("3957:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Push PATTERN_OP on FAIL_STACK"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Return 1 if was able to do s"..., 'I', 16829) = 0x025a1ed9
[0x40cdf3] memchr("IL_STACK_FULL ()\t\t\t\t\t\t\t\\\n    && "..., '\n', 16675) = 0x025a1ef1
[0x4022d1] memchr("\n   Return 1 if was able to do s"..., '\n', 148) = 0x025a1e3f
[0x4022d1] memchr("   Return 1 if was able to do so"..., '\n', 147) = 0x025a1e86
[0x4022d1] memchr("   space to do so.  */\n#define P"..., '\n', 76) = 0x025a1e9d
[0x4022d1] memchr("#define PUSH_PATTERN_OP(pattern_"..., '\n', 53) = 0x025a1ed2
[0x4022d1] memchr("  ((FAIL_STACK_FULL ()\t\t\t\t\t\t\t\\\n "..., '\n', 0) = NULL
[0x4023cc] fwrite("3962:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  ((FAIL_STACK_FULL ()\t\t\t\t\t\t\t\\\n "..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    && !DOUBLE_FAIL_STACK (fail_"..., 'I', 16650) = 0x025a1f03
[0x40cdf3] memchr("IL_STACK (fail_stack))\t\t\t\t\t\\\n   "..., '\n', 16633) = 0x025a1f1f
[0x4022d1] memchr("    && !DOUBLE_FAIL_STACK (fail_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3963:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    && !DOUBLE_FAIL_STACK (fail_"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    ? 0\t\t\t\t\t\t\t\t\t\\\n    : ((fail_s"..., 'I', 16604) = 0x025a2028
[0x40cdf3] memchr("ILURE_POINT'.  */\n#define PUSH_F"..., '\n', 16340) = 0x025a2039
[0x4022d1] memchr("    ? 0\t\t\t\t\t\t\t\t\t\\\n    : ((fail_s"..., '\n', 231) = 0x025a1f31
[0x4022d1] memchr("    : ((fail_stack).stack[(fail_"..., '\n', 213) = 0x025a1f72
[0x4022d1] memchr("       1))\n\n/* This pushes an it"..., '\n', 148) = 0x025a1f7d
[0x4022d1] memchr("\n/* This pushes an item onto the"..., '\n', 137) = 0x025a1f7e
[0x4022d1] memchr("/* This pushes an item onto the "..., '\n', 136) = 0x025a1fc2
[0x4022d1] memchr("   value.  Assumes the variable "..., '\n', 68) = 0x025a2006
[0x4022d1] memchr("   be called from within `PUSH_F"..., '\n', 0) = NULL
[0x4023cc] fwrite("3970:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   be called from within `PUSH_F"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define PUSH_FAILURE_ITEM(item)\t"..., 'I', 16322) = 0x025a2049
[0x40cdf3] memchr("ILURE_ITEM(item)\t\t\t\t\t\t\\\n  fail_s"..., '\n', 16307) = 0x025a2060
[0x4022d1] memchr("#define PUSH_FAILURE_ITEM(item)\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("3971:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define PUSH_FAILURE_ITEM(item)\t"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  fail_stack.stack[fail_stack.av"..., 'I', 16283) = 0x025a20f5
[0x40cdf3] memchr("ILURE_ITEM() fail_stack.stack[--"..., '\n', 16135) = 0x025a2126
[0x4022d1] memchr("  fail_stack.stack[fail_stack.av"..., '\n', 134) = 0x025a20a1
[0x4022d1] memchr("\n/* The complement operation.  A"..., '\n', 69) = 0x025a20a2
[0x4022d1] memchr("/* The complement operation.  As"..., '\n', 68) = 0x025a20e6
[0x4022d1] memchr("#define POP_FAILURE_ITEM() fail_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3975:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define POP_FAILURE_ITEM() fail_"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Used to omit pushing failure"..., 'I', 16085) = 0x025a2198
[0x40cdf3] memchr("ILURE_ITEM\n#define DEBUG_POP(ite"..., '\n', 15972) = 0x025a21a2
[0x4022d1] memchr("\n/* Used to omit pushing failure"..., '\n', 87) = 0x025a2127
[0x4022d1] memchr("/* Used to omit pushing failure "..., '\n', 86) = 0x025a2170
[0x4022d1] memchr("#ifdef DEBUG\n#define DEBUG_PUSH "..., '\n', 13) = 0x025a217d
[0x4022d1] memchr("#define DEBUG_PUSH PUSH_FAILURE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("3979:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_PUSH PUSH_FAILURE_"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define DEBUG_POP(item_addr) *(i"..., 'I', 15961) = 0x025a21d5
[0x40cdf3] memchr("ILURE_ITEM ()\n#else\n#define DEBU"..., '\n', 15911) = 0x025a21e2
[0x4022d1] memchr("#define DEBUG_POP(item_addr) *(i"..., '\n', 0) = NULL
[0x4023cc] fwrite("3980:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define DEBUG_POP(item_addr) *(i"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define DEBUG_PUSH(item)\n#"..., 'I', 15897) = 0x025a22e7
[0x40cdf3] memchr("IL_STACK requires `destination' "..., '\n', 15637) = 0x025a2309
[0x4022d1] memchr("#else\n#define DEBUG_PUSH(item)\n#"..., '\n', 225) = 0x025a21e8
[0x4022d1] memchr("#define DEBUG_PUSH(item)\n#define"..., '\n', 219) = 0x025a2201
[0x4022d1] memchr("#define DEBUG_POP(item_addr)\n#en"..., '\n', 194) = 0x025a221e
[0x4022d1] memchr("#endif\n\n\n/* Push the information"..., '\n', 165) = 0x025a2225
[0x4022d1] memchr("\n\n/* Push the information about "..., '\n', 158) = 0x025a2226
[0x4022d1] memchr("\n/* Push the information about t"..., '\n', 157) = 0x025a2227
[0x4022d1] memchr("/* Push the information about th"..., '\n', 156) = 0x025a225c
[0x4022d1] memchr("   if we ever fail back to it.  "..., '\n', 103) = 0x025a227d
[0x4022d1] memchr("   \n   Requires variables fail_s"..., '\n', 70) = 0x025a2281
[0x4022d1] memchr("   Requires variables fail_stack"..., '\n', 66) = 0x025a22c3
[0x4022d1] memchr("   num_regs be declared.  DOUBLE"..., '\n', 0) = NULL
[0x4023cc] fwrite("3991:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   num_regs be declared.  DOUBLE"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   declared.\n   \n   Does `return"..., 'I', 15602) = 0x025a232d
[0x40cdf3] memchr("ILURE_CODE' if runs out of memor"..., '\n', 15567) = 0x025a2353
[0x4022d1] memchr("   declared.\n   \n   Does `return"..., '\n', 17) = 0x025a2316
[0x4022d1] memchr("   \n   Does `return FAILURE_CODE"..., '\n', 4) = 0x025a231a
[0x4022d1] memchr("   Does `return FAILURE_CODE' if"..., '\n', 0) = NULL
[0x4023cc] fwrite("3994:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Does `return FAILURE_CODE' if"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#define PUSH_FAILURE_POINT(patt"..., 'I', 15528) = 0x025a2364
[0x40cdf3] memchr("ILURE_POINT(pattern_place, strin"..., '\n', 15512) = 0x025a239c
[0x4022d1] memchr("\n#define PUSH_FAILURE_POINT(patt"..., '\n', 1) = 0x025a2354
[0x4022d1] memchr("#define PUSH_FAILURE_POINT(patte"..., '\n', 0) = NULL
[0x4023cc] fwrite("3996:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define PUSH_FAILURE_POINT(patte"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    char *desti"..., 'I', 15455) = 0x025a24dd
[0x40cdf3] memchr("INT2 ("\\nPUSH_FAILURE_POINT #%u:"..., '\n', 15135) = 0x025a2511
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    char *desti"..., '\n', 308) = 0x025a23ad
[0x4022d1] memchr("    char *destination;\t\t\t\t\t\t\t\\\n "..., '\n', 291) = 0x025a23cc
[0x4022d1] memchr("    /* Must be int, so when we d"..., '\n', 260) = 0x025a2416
[0x4022d1] memchr("       of 0 + -1 isn't done as u"..., '\n', 186) = 0x025a2448
[0x4022d1] memchr("    int this_reg;\t\t\t\t\t\t\t\\\n    \t\t"..., '\n', 136) = 0x025a2462
[0x4022d1] memchr("    \t\t\t\t\t\t\t\t\t\\\n    DEBUG_STATEME"..., '\n', 110) = 0x025a2471
[0x4022d1] memchr("    DEBUG_STATEMENT (failure_id+"..., '\n', 95) = 0x025a249b
[0x4022d1] memchr("    DEBUG_STATEMENT (nfailure_po"..., '\n', 53) = 0x025a24d0
[0x4022d1] memchr("    DEBUG_PRINT2 ("\\nPUSH_FAILUR"..., '\n', 0) = NULL
[0x4023cc] fwrite("4005:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("\\nPUSH_FAILUR"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PRINT2 ("  Before push"..., 'I', 15082) = 0x025a251e
[0x40cdf3] memchr("INT2 ("  Before push, next avail"..., '\n', 15070) = 0x025a255c
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Before push"..., '\n', 0) = NULL
[0x4023cc] fwrite("4006:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Before push"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PRINT2 ("             "..., 'I', 15007) = 0x025a2569
[0x40cdf3] memchr("INT2 ("                     size"..., '\n', 14995) = 0x025a25a6
[0x4022d1] memchr("    DEBUG_PRINT2 ("             "..., '\n', 0) = NULL
[0x4023cc] fwrite("4007:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("             "..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., 'I', 14933) = 0x025a25be
[0x40cdf3] memchr("INT2 ("  slots needed: %d\\n", NU"..., '\n', 14910) = 0x025a25f2
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a25b1
[0x4022d1] memchr("    DEBUG_PRINT2 ("  slots neede"..., '\n', 0) = NULL
[0x4023cc] fwrite("4009:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  slots neede"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PRINT2 ("     availabl"..., 'I', 14857) = 0x025a25ff
[0x40cdf3] memchr("INT2 ("     available: %d\\n", RE"..., '\n', 14845) = 0x025a2636
[0x4022d1] memchr("    DEBUG_PRINT2 ("     availabl"..., '\n', 0) = NULL
[0x4023cc] fwrite("4010:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("     availabl"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    /* Ensure we have"..., 'I', 14789) = 0x025a269b
[0x40cdf3] memchr("INING_AVAIL_SLOTS < NUM_FAILURE_"..., '\n', 14689) = 0x025a26c5
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    /* Ensure we have"..., '\n', 85) = 0x025a2641
[0x4022d1] memchr("    /* Ensure we have enough spa"..., '\n', 74) = 0x025a268b
[0x4022d1] memchr("    while (REMAINING_AVAIL_SLOTS"..., '\n', 0) = NULL
[0x4023cc] fwrite("4013:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    while (REMAINING_AVAIL_SLOTS"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      {\t\t\t\t\t\t\t\t\t\\\n        if (!D"..., 'I', 14646) = 0x025a26ee
[0x40cdf3] memchr("IL_STACK (fail_stack))\t\t\t\\\n     "..., '\n', 14606) = 0x025a2708
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n        if (!D"..., '\n', 18) = 0x025a26d7
[0x4022d1] memchr("        if (!DOUBLE_FAIL_STACK ("..., '\n', 0) = NULL
[0x4023cc] fwrite("4015:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        if (!DOUBLE_FAIL_STACK ("..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          return failure_code;\t\t"..., 'I', 14579) = 0x025a274a
[0x40cdf3] memchr("INT2 ("\\n  Doubled stack; size n"..., '\n', 14514) = 0x025a2777
[0x4022d1] memchr("          return failure_code;\t\t"..., '\n', 49) = 0x025a272e
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n        DEBUG_PRINT2 "..., '\n', 11) = 0x025a2739
[0x4022d1] memchr("        DEBUG_PRINT2 ("\\n  Doubl"..., '\n', 0) = NULL
[0x4023cc] fwrite("4018:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 ("\\n  Doubl"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t       (fail_stack).size);\t\t\t\t"..., 'I', 14468) = 0x025a27aa
[0x40cdf3] memchr("INT2 ("  slots available: %d\\n","..., '\n', 14418) = 0x025a27e3
[0x4022d1] memchr("\t\t       (fail_stack).size);\t\t\t\t"..., '\n', 34) = 0x025a2799
[0x4022d1] memchr("        DEBUG_PRINT2 ("  slots a"..., '\n', 0) = NULL
[0x4023cc] fwrite("4020:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 ("  slots a"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., 'I', 14360) = 0x025a2848
[0x40cdf3] memchr("INT1 ("\\n");\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n "..., '\n', 14260) = 0x025a285b
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., '\n', 88) = 0x025a27f5
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    /* Push the info,"..., '\n', 70) = 0x025a2800
[0x4022d1] memchr("    /* Push the info, starting w"..., '\n', 59) = 0x025a283b
[0x4022d1] memchr("    DEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4024:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    for (this_reg = l"..., 'I', 14240) = 0x025a28e8
[0x40cdf3] memchr("INT2 ("  Pushing reg: %d\\n", thi"..., '\n', 14100) = 0x025a2913
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    for (this_reg = l"..., '\n', 131) = 0x025a2866
[0x4022d1] memchr("    for (this_reg = lowest_activ"..., '\n', 120) = 0x025a28af
[0x4022d1] memchr("         this_reg++)\t\t\t\t\t\t\t\\\n   "..., '\n', 47) = 0x025a28cc
[0x4022d1] memchr("      {\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 "..., '\n', 18) = 0x025a28de
[0x4022d1] memchr("\tDEBUG_PRINT2 ("  Pushing reg: %"..., '\n', 0) = NULL
[0x4023cc] fwrite("4029:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT2 ("  Pushing reg: %"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        DEBUG_STATEMENT (num_reg"..., 'I', 14056) = 0x025a295a
[0x40cdf3] memchr("INT2 ("    start: 0x%x\\n", regst"..., '\n', 13986) = 0x025a298c
[0x4022d1] memchr("        DEBUG_STATEMENT (num_reg"..., '\n', 61) = 0x025a2945
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 ("    s"..., '\n', 11) = 0x025a2950
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    start: 0x%x\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("4032:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT2 ("    start: 0x%x\\"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        PUSH_FAILURE_ITEM (regst"..., 'I', 13935) = 0x025a299c
[0x40cdf3] memchr("ILURE_ITEM (regstart[this_reg]);"..., '\n', 13920) = 0x025a29c1
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (regst"..., '\n', 0) = NULL
[0x4023cc] fwrite("4033:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        PUSH_FAILURE_ITEM (regst"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 13882) = 0x025a2a15
[0x40cdf3] memchr("INT2 ("    end: 0x%x\\n", regend["..., '\n', 13799) = 0x025a2a43
[0x4022d1] memchr("                                "..., '\n', 74) = 0x025a2a0b
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    end: 0x%x\\n""..., '\n', 0) = NULL
[0x4023cc] fwrite("4035:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT2 ("    end: 0x%x\\n""..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        PUSH_FAILURE_ITEM (regen"..., 'I', 13752) = 0x025a2a53
[0x40cdf3] memchr("ILURE_ITEM (regend[this_reg]);\t\t"..., '\n', 13737) = 0x025a2a76
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (regen"..., '\n', 0) = NULL
[0x4023cc] fwrite("4036:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        PUSH_FAILURE_ITEM (regen"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 ("    i"..., 'I', 13701) = 0x025a2a8b
[0x40cdf3] memchr("INT2 ("    info: 0x%x\\n      ", "..., '\n', 13681) = 0x025a2ac1
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n\tDEBUG_PRINT2 ("    i"..., '\n', 11) = 0x025a2a81
[0x4022d1] memchr("\tDEBUG_PRINT2 ("    info: 0x%x\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4038:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT2 ("    info: 0x%x\\n"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        DEBUG_PRINT2 (" match_nu"..., 'I', 13626) = 0x025a2ad2
[0x40cdf3] memchr("INT2 (" match_null=%d",\t\t\t\t\t\\\n  "..., '\n', 13610) = 0x025a2aef
[0x4022d1] memchr("        DEBUG_PRINT2 (" match_nu"..., '\n', 0) = NULL
[0x4023cc] fwrite("4039:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 (" match_nu"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      REG_MATCH_"..., 'I', 13580) = 0x025a2b18
[0x40cdf3] memchr("ING_P (reg_info[this_reg]));\t\\\n "..., '\n', 13540) = 0x025a2b36
[0x4022d1] memchr("                      REG_MATCH_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4040:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      REG_MATCH_"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        DEBUG_PRINT2 (" active=%"..., 'I', 13509) = 0x025a2b47
[0x40cdf3] memchr("INT2 (" active=%d", IS_ACTIVE (r"..., '\n', 13493) = 0x025a2b7d
[0x4022d1] memchr("        DEBUG_PRINT2 (" active=%"..., '\n', 0) = NULL
[0x4023cc] fwrite("4041:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 (" active=%"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        DEBUG_PRINT2 (" matched_"..., 'I', 13438) = 0x025a2b8e
[0x40cdf3] memchr("INT2 (" matched_something=%d",\t\t"..., '\n', 13422) = 0x025a2bb1
[0x4022d1] memchr("        DEBUG_PRINT2 (" matched_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4042:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 (" matched_"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      MATCHED_SO"..., 'I', 13386) = 0x025a2bd6
[0x40cdf3] memchr("ING (reg_info[this_reg]));\t\t\\\n  "..., '\n', 13350) = 0x025a2bf3
[0x4022d1] memchr("                      MATCHED_SO"..., '\n', 0) = NULL
[0x4023cc] fwrite("4043:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      MATCHED_SO"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        DEBUG_PRINT2 (" ever_mat"..., 'I', 13320) = 0x025a2c04
[0x40cdf3] memchr("INT2 (" ever_matched=%d",\t\t\t\t\\\n "..., '\n', 13304) = 0x025a2c22
[0x4022d1] memchr("        DEBUG_PRINT2 (" ever_mat"..., '\n', 0) = NULL
[0x4023cc] fwrite("4044:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        DEBUG_PRINT2 (" ever_mat"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      EVER_MATCH"..., 'I', 13273) = 0x025a2c4c
[0x40cdf3] memchr("ING (reg_info[this_reg]));\t\\\n\tDE"..., '\n', 13232) = 0x025a2c68
[0x4022d1] memchr("                      EVER_MATCH"..., '\n', 0) = NULL
[0x4023cc] fwrite("4045:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      EVER_MATCH"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tDEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n   "..., 'I', 13203) = 0x025a2c72
[0x40cdf3] memchr("INT1 ("\\n");\t\t\t\t\t\t\\\n        PUSH"..., '\n', 13194) = 0x025a2c85
[0x4022d1] memchr("\tDEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("4046:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tDEBUG_PRINT1 ("\\n");\t\t\t\t\t\t\\\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        PUSH_FAILURE_ITEM (reg_i"..., 'I', 13174) = 0x025a2c95
[0x40cdf3] memchr("ILURE_ITEM (reg_info[this_reg].w"..., '\n', 13159) = 0x025a2cbe
[0x4022d1] memchr("        PUSH_FAILURE_ITEM (reg_i"..., '\n', 0) = NULL
[0x4023cc] fwrite("4047:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        PUSH_FAILURE_ITEM (reg_i"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., 'I', 13117) = 0x025a2ce8
[0x40cdf3] memchr("INT2 ("  Pushing  low active reg"..., '\n', 13076) = 0x025a2d25
[0x4022d1] memchr("      }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n   "..., '\n', 29) = 0x025a2cd0
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a2cdb
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing  lo"..., '\n', 0) = NULL
[0x4023cc] fwrite("4050:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Pushing  lo"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    PUSH_FAILURE_ITEM (lowest_ac"..., 'I', 13014) = 0x025a2d31
[0x40cdf3] memchr("ILURE_ITEM (lowest_active_reg);\t"..., '\n', 13003) = 0x025a2d55
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (lowest_ac"..., '\n', 0) = NULL
[0x4023cc] fwrite("4051:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    PUSH_FAILURE_ITEM (lowest_ac"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., 'I', 12966) = 0x025a2d6d
[0x40cdf3] memchr("INT2 ("  Pushing high active reg"..., '\n', 12943) = 0x025a2dab
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a2d60
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing hig"..., '\n', 0) = NULL
[0x4023cc] fwrite("4053:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Pushing hig"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    PUSH_FAILURE_ITEM (highest_a"..., 'I', 12880) = 0x025a2db7
[0x40cdf3] memchr("ILURE_ITEM (highest_active_reg);"..., '\n', 12869) = 0x025a2ddc
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (highest_a"..., '\n', 0) = NULL
[0x4023cc] fwrite("4054:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    PUSH_FAILURE_ITEM (highest_a"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., 'I', 12831) = 0x025a2df4
[0x40cdf3] memchr("INT2 ("  Pushing pattern 0x%x: ""..., '\n', 12808) = 0x025a2e28
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a2de7
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing pat"..., '\n', 0) = NULL
[0x4023cc] fwrite("4056:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Pushing pat"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PRINT_COMPILED_PATTERN"..., 'I', 12755) = 0x025a2e35
[0x40cdf3] memchr("INT_COMPILED_PATTERN (bufp, patt"..., '\n', 12743) = 0x025a2e69
[0x4022d1] memchr("    DEBUG_PRINT_COMPILED_PATTERN"..., '\n', 0) = NULL
[0x4023cc] fwrite("4057:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT_COMPILED_PATTERN"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    PUSH_FAILURE_ITEM (pattern_p"..., 'I', 12690) = 0x025a2e75
[0x40cdf3] memchr("ILURE_ITEM (pattern_place);\t\t\t\t\t"..., '\n', 12679) = 0x025a2e96
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (pattern_p"..., '\n', 0) = NULL
[0x4023cc] fwrite("4058:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    PUSH_FAILURE_ITEM (pattern_p"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., 'I', 12645) = 0x025a2eae
[0x40cdf3] memchr("INT2 ("  Pushing string 0x%x: `""..., '\n', 12622) = 0x025a2ee1
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a2ea1
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing str"..., '\n', 0) = NULL
[0x4023cc] fwrite("4060:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Pushing str"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PRINT_DOUBLE_STRING (s"..., 'I', 12570) = 0x025a2eee
[0x40cdf3] memchr("INT_DOUBLE_STRING (string_place,"..., '\n', 12558) = 0x025a2f2b
[0x4022d1] memchr("    DEBUG_PRINT_DOUBLE_STRING (s"..., '\n', 0) = NULL
[0x4023cc] fwrite("4061:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT_DOUBLE_STRING (s"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t size2);\t\t\t\t\\\n    DEBUG_PRIN"..., 'I', 12496) = 0x025a2f4a
[0x40cdf3] memchr("INT1 ("'\\n");\t\t\t\t\t\t\\\n    PUSH_FA"..., '\n', 12466) = 0x025a2f5e
[0x4022d1] memchr("\t\t\t\t size2);\t\t\t\t\\\n    DEBUG_PRIN"..., '\n', 18) = 0x025a2f3d
[0x4022d1] memchr("    DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("4063:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\\"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    PUSH_FAILURE_ITEM (string_pl"..., 'I', 12445) = 0x025a2f6a
[0x40cdf3] memchr("ILURE_ITEM (string_place);\t\t\t\t\t\\"..., '\n', 12434) = 0x025a2f8a
[0x4022d1] memchr("    PUSH_FAILURE_ITEM (string_pl"..., '\n', 0) = NULL
[0x4023cc] fwrite("4064:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    PUSH_FAILURE_ITEM (string_pl"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., 'I', 12401) = 0x025a2fa2
[0x40cdf3] memchr("INT2 ("  Pushing failure id: %u\\"..., '\n', 12378) = 0x025a2fd5
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n    DEBUG_PRINT2 ("  "..., '\n', 11) = 0x025a2f95
[0x4022d1] memchr("    DEBUG_PRINT2 ("  Pushing fai"..., '\n', 0) = NULL
[0x4023cc] fwrite("4066:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    DEBUG_PRINT2 ("  Pushing fai"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    DEBUG_PUSH (failure_id);\t\t\t\t"..., 'I', 12326) = 0x025a307a
[0x40cdf3] memchr("ITEMS  3\n\n/* Individual items as"..., '\n', 12162) = 0x025a3082
[0x4022d1] memchr("    DEBUG_PUSH (failure_id);\t\t\t\t"..., '\n', 148) = 0x025a2ff9
[0x4022d1] memchr("  } while (0)\n\n/* This is the nu"..., '\n', 112) = 0x025a3007
[0x4022d1] memchr("\n/* This is the number of items "..., '\n', 98) = 0x025a3008
[0x4022d1] memchr("/* This is the number of items t"..., '\n', 97) = 0x025a304f
[0x4022d1] memchr("   for each register.  */\n#defin"..., '\n', 26) = 0x025a3069
[0x4022d1] memchr("#define NUM_REG_ITEMS  3\n\n/* Ind"..., '\n', 0) = NULL
[0x4023cc] fwrite("4072:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NUM_REG_ITEMS  3\n\n/* Ind"..., 1, 25, 0x7f498147f260) = 25
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Individual items aside from "..., 'I', 12153) = 0x025a3087
[0x40cdf3] memchr("Individual items aside from the "..., '\n', 12149) = 0x025a30b5
[0x4022d1] memchr("\n/* Individual items aside from "..., '\n', 1) = 0x025a3083
[0x4022d1] memchr("/* Individual items aside from t"..., '\n', 0) = NULL
[0x4023cc] fwrite("4074:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Individual items aside from t"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#ifdef DEBUG\n#define NUM_NONREG_"..., 'I', 12102) = 0x025a30d6
[0x40cdf3] memchr("ITEMS 5 /* Includes failure poin"..., '\n', 12070) = 0x025a30ff
[0x4022d1] memchr("#ifdef DEBUG\n#define NUM_NONREG_"..., '\n', 13) = 0x025a30c2
[0x4022d1] memchr("#define NUM_NONREG_ITEMS 5 /* In"..., '\n', 0) = NULL
[0x4023cc] fwrite("4076:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NUM_NONREG_ITEMS 5 /* In"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define NUM_NONREG_ITEMS 4"..., 'I', 12028) = 0x025a3119
[0x40cdf3] memchr("ITEMS 4\n#endif\n\n/* We push at mo"..., '\n', 12003) = 0x025a3120
[0x4022d1] memchr("#else\n#define NUM_NONREG_ITEMS 4"..., '\n', 6) = 0x025a3105
[0x4022d1] memchr("#define NUM_NONREG_ITEMS 4\n#endi"..., '\n', 0) = NULL
[0x4023cc] fwrite("4078:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NUM_NONREG_ITEMS 4\n#endi"..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n/* We push at most this "..., 'I', 11995) = 0x025a316c
[0x40cdf3] memchr("ILURE_ITEMS ((num_regs - 1) * NU"..., '\n', 11920) = 0x025a31ab
[0x4022d1] memchr("#endif\n\n/* We push at most this "..., '\n', 61) = 0x025a3127
[0x4022d1] memchr("\n/* We push at most this many it"..., '\n', 54) = 0x025a3128
[0x4022d1] memchr("/* We push at most this many ite"..., '\n', 53) = 0x025a315d
[0x4022d1] memchr("#define MAX_FAILURE_ITEMS ((num_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4082:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define MAX_FAILURE_ITEMS ((num_"..., 1, 78, 0x7f498147f260) = 78
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* We actually push this many i"..., 'I', 11856) = 0x025a31e4
[0x40cdf3] memchr("ILURE_ITEMS\t\t\t\t\t\t\\\n  ((highest_a"..., '\n', 11800) = 0x025a31f6
[0x4022d1] memchr("\n/* We actually push this many i"..., '\n', 42) = 0x025a31ac
[0x4022d1] memchr("/* We actually push this many it"..., '\n', 41) = 0x025a31d5
[0x4022d1] memchr("#define NUM_FAILURE_ITEMS\t\t\t\t\t\t\\"..., '\n', 0) = NULL
[0x4023cc] fwrite("4085:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NUM_FAILURE_ITEMS\t\t\t\t\t\t\\"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  ((highest_active_reg - lowest_"..., 'I', 11781) = 0x025a3231
[0x40cdf3] memchr("ITEMS \t\\\n    + NUM_NONREG_ITEMS)"..., '\n', 11723) = 0x025a3239
[0x4022d1] memchr("  ((highest_active_reg - lowest_"..., '\n', 0) = NULL
[0x4023cc] fwrite("4086:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  ((highest_active_reg - lowest_"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    + NUM_NONREG_ITEMS)\n\n/* How "..., 'I', 11714) = 0x025a324b
[0x40cdf3] memchr("ITEMS)\n\n/* How many items can st"..., '\n', 11697) = 0x025a3251
[0x4022d1] memchr("    + NUM_NONREG_ITEMS)\n\n/* How "..., '\n', 0) = NULL
[0x4023cc] fwrite("4087:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    + NUM_NONREG_ITEMS)\n\n/* How "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* How many items can still be "..., 'I', 11690) = 0x025a32ad
[0x40cdf3] memchr("INING_AVAIL_SLOTS ((fail_stack)."..., '\n', 11599) = 0x025a32e7
[0x4022d1] memchr("\n/* How many items can still be "..., '\n', 79) = 0x025a3252
[0x4022d1] memchr("/* How many items can still be a"..., '\n', 78) = 0x025a32a0
[0x4022d1] memchr("#define REMAINING_AVAIL_SLOTS (("..., '\n', 0) = NULL
[0x4023cc] fwrite("4090:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define REMAINING_AVAIL_SLOTS (("..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Pops what PUSH_FAIL_STACK p"..., 'I', 11540) = 0x025a32fe
[0x40cdf3] memchr("IL_STACK pushes.\n\n   We restore "..., '\n', 11518) = 0x025a330e
[0x4022d1] memchr("\n\n/* Pops what PUSH_FAIL_STACK p"..., '\n', 2) = 0x025a32e8
[0x4022d1] memchr("\n/* Pops what PUSH_FAIL_STACK pu"..., '\n', 1) = 0x025a32e9
[0x4022d1] memchr("/* Pops what PUSH_FAIL_STACK pus"..., '\n', 0) = NULL
[0x4023cc] fwrite("4093:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Pops what PUSH_FAIL_STACK pus"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   We restore into the paramete"..., 'I', 11501) = 0x025a33af
[0x40cdf3] memchr("IGH_REG -- the highest and lowes"..., '\n', 11341) = 0x025a33e2
[0x4022d1] memchr("\n   We restore into the paramete"..., '\n', 145) = 0x025a330f
[0x4022d1] memchr("   We restore into the parameter"..., '\n', 144) = 0x025a3352
[0x4022d1] memchr("     STR -- the saved data posit"..., '\n', 77) = 0x025a3377
[0x4022d1] memchr("     PAT -- the saved pattern po"..., '\n', 40) = 0x025a339f
[0x4022d1] memchr("     LOW_REG, HIGH_REG -- the hi"..., '\n', 0) = NULL
[0x4023cc] fwrite("4098:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     LOW_REG, HIGH_REG -- the hi"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     REGSTART, REGEND -- arrays "..., 'I', 11289) = 0x025a3421
[0x40cdf3] memchr("INFO -- array of information abo"..., '\n', 11227) = 0x025a3457
[0x4022d1] memchr("     REGSTART, REGEND -- arrays "..., '\n', 53) = 0x025a3417
[0x4022d1] memchr("     REG_INFO -- array of inform"..., '\n', 0) = NULL
[0x4023cc] fwrite("4100:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     REG_INFO -- array of inform"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   \n   Also assumes the variable"..., 'I', 11172) = 0x025a34ed
[0x40cdf3] memchr("ILURE_POINT(str, pat, low_reg, h"..., '\n', 11023) = 0x025a3532
[0x4022d1] memchr("   \n   Also assumes the variable"..., '\n', 135) = 0x025a345b
[0x4022d1] memchr("   Also assumes the variables `f"..., '\n', 131) = 0x025a34a2
[0x4022d1] memchr("   `pend', `string1', `size1', `"..., '\n', 60) = 0x025a34dd
[0x4022d1] memchr("\n#define POP_FAILURE_POINT(str, "..., '\n', 1) = 0x025a34de
[0x4022d1] memchr("#define POP_FAILURE_POINT(str, p"..., '\n', 0) = NULL
[0x4023cc] fwrite("4105:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define POP_FAILURE_POINT(str, p"..., 1, 84, 0x7f498147f260) = 84
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("{\t\t\t\t\t\t\t\t\t\\\n  DEBUG_STATEMENT (f"..., 'I', 10953) = 0x025a35cf
[0x40cdf3] memchr("IL_STACK_EMPTY ());\t\t\t\t\t\\\n\t\t\t\t\t\t"..., '\n', 10797) = 0x025a35e8
[0x4022d1] memchr("{\t\t\t\t\t\t\t\t\t\\\n  DEBUG_STATEMENT (f"..., '\n', 143) = 0x025a353e
[0x4022d1] memchr("  DEBUG_STATEMENT (fail_stack_el"..., '\n', 131) = 0x025a3573
[0x4022d1] memchr("  int this_reg;\t\t\t\t\t\t\t\t\\\n  const"..., '\n', 78) = 0x025a358c
[0x4022d1] memchr("  const unsigned char *string_te"..., '\n', 53) = 0x025a35b6
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  assert (!FAIL_STACK"..., '\n', 11) = 0x025a35c1
[0x4022d1] memchr("  assert (!FAIL_STACK_EMPTY ());"..., '\n', 0) = NULL
[0x4023cc] fwrite("4111:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  assert (!FAIL_STACK_EMPTY ());"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Remove failure p"..., 'I', 10771) = 0x025a3642
[0x40cdf3] memchr("INT1 ("POP_FAILURE_POINT:\\n");\t\t"..., '\n', 10682) = 0x025a3665
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Remove failure p"..., '\n', 79) = 0x025a35f3
[0x4022d1] memchr("  /* Remove failure points and p"..., '\n', 68) = 0x025a3637
[0x4022d1] memchr("  DEBUG_PRINT1 ("POP_FAILURE_POI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4114:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("POP_FAILURE_POI"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("  Before pop, n"..., 'I', 10646) = 0x025a3670
[0x40cdf3] memchr("INT2 ("  Before pop, next avail:"..., '\n', 10636) = 0x025a36ac
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Before pop, n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4115:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Before pop, n"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("               "..., 'I', 10575) = 0x025a36b7
[0x40cdf3] memchr("INT2 ("                    size:"..., '\n', 10565) = 0x025a36f2
[0x4022d1] memchr("  DEBUG_PRINT2 ("               "..., '\n', 0) = NULL
[0x4023cc] fwrite("4116:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("               "..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  assert (fail_stack."..., 'I', 10505) = 0x025a3727
[0x40cdf3] memchr("ITEMS);\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  DEBUG_P"..., '\n', 10453) = 0x025a3732
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  assert (fail_stack."..., '\n', 11) = 0x025a36fd
[0x4022d1] memchr("  assert (fail_stack.avail >= NU"..., '\n', 0) = NULL
[0x4023cc] fwrite("4118:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  assert (fail_stack.avail >= NU"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_POP (&failure"..., 'I', 10441) = 0x025a376a
[0x40cdf3] memchr("INT2 ("  Popping failure id: %u\\"..., '\n', 10386) = 0x025a379d
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_POP (&failure"..., '\n', 45) = 0x025a373d
[0x4022d1] memchr("  DEBUG_POP (&failure_id);\t\t\t\t\t\t"..., '\n', 34) = 0x025a375f
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping failu"..., '\n', 0) = NULL
[0x4023cc] fwrite("4121:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Popping failu"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* If the saved str"..., 'I', 10334) = 0x025a37ae
[0x40cdf3] memchr("If the saved string location is "..., '\n', 10318) = 0x025a37e6
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* If the saved str"..., '\n', 11) = 0x025a37a8
[0x4022d1] memchr("  /* If the saved string locatio"..., '\n', 0) = NULL
[0x4023cc] fwrite("4123:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If the saved string locatio"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     on_failure_keep_string_jump"..., 'I', 10261) = 0x025a3890
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\t\t\t\\\n  if (strin"..., '\n', 10092) = 0x025a38a4
[0x4022d1] memchr("     on_failure_keep_string_jump"..., '\n', 147) = 0x025a382f
[0x4022d1] memchr("     saved NULL, thus retaining "..., '\n', 74) = 0x025a3879
[0x4022d1] memchr("  string_temp = POP_FAILURE_ITEM"..., '\n', 0) = NULL
[0x4023cc] fwrite("4126:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  string_temp = POP_FAILURE_ITEM"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (string_temp != NULL)\t\t\t\t\t\t"..., 'I', 10071) = 0x025a3908
[0x40cdf3] memchr("INT2 ("  Popping string 0x%x: `""..., '\n', 9972) = 0x025a3933
[0x4022d1] memchr("  if (string_temp != NULL)\t\t\t\t\t\t"..., '\n', 89) = 0x025a38c6
[0x4022d1] memchr("    str = (const char *) string_"..., '\n', 55) = 0x025a38f2
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_PRINT2 ("  Po"..., '\n', 11) = 0x025a38fd
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("4130:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Popping strin"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_DOUBLE_STRING (str"..., 'I', 9928) = 0x025a393e
[0x40cdf3] memchr("INT_DOUBLE_STRING (str, string1,"..., '\n', 9918) = 0x025a3978
[0x4022d1] memchr("  DEBUG_PRINT_DOUBLE_STRING (str"..., '\n', 0) = NULL
[0x4023cc] fwrite("4131:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_DOUBLE_STRING (str"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., 'I', 9859) = 0x025a3983
[0x40cdf3] memchr("INT1 ("'\\n");\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\"..., '\n', 9849) = 0x025a3998
[0x4022d1] memchr("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4132:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("'\\n");\t\t\t\t\t\t\t\\\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  pat = (unsigned cha"..., 'I', 9827) = 0x025a39c4
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\t\t\\\n  DEBUG_PRIN"..., '\n', 9784) = 0x025a39d7
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  pat = (unsigned cha"..., '\n', 11) = 0x025a39a3
[0x4022d1] memchr("  pat = (unsigned char *) POP_FA"..., '\n', 0) = NULL
[0x4023cc] fwrite("4134:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  pat = (unsigned char *) POP_FA"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("  Popping patte"..., 'I', 9764) = 0x025a39e2
[0x40cdf3] memchr("INT2 ("  Popping pattern 0x%x: ""..., '\n', 9754) = 0x025a3a0d
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping patte"..., '\n', 0) = NULL
[0x4023cc] fwrite("4135:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Popping patte"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., 'I', 9710) = 0x025a3a18
[0x40cdf3] memchr("INT_COMPILED_PATTERN (bufp, pat,"..., '\n', 9700) = 0x025a3a43
[0x4022d1] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., '\n', 0) = NULL
[0x4023cc] fwrite("4136:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_COMPILED_PATTERN ("..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Restore register"..., 'I', 9656) = 0x025a3a94
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\t\t\\\n  DEBUG_PRIN"..., '\n', 9576) = 0x025a3aa7
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  /* Restore register"..., '\n', 50) = 0x025a3a4e
[0x4022d1] memchr("  /* Restore register info.  */\t"..., '\n', 39) = 0x025a3a75
[0x4022d1] memchr("  high_reg = (unsigned) POP_FAIL"..., '\n', 0) = NULL
[0x4023cc] fwrite("4139:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  high_reg = (unsigned) POP_FAIL"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("  Popping high "..., 'I', 9556) = 0x025a3ab2
[0x40cdf3] memchr("INT2 ("  Popping high active reg"..., '\n', 9546) = 0x025a3ae8
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping high "..., '\n', 0) = NULL
[0x4023cc] fwrite("4140:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Popping high "..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  low_reg = (unsigned"..., 'I', 9491) = 0x025a3b11
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\t\t\\\n  DEBUG_PRIN"..., '\n', 9451) = 0x025a3b24
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  low_reg = (unsigned"..., '\n', 11) = 0x025a3af3
[0x4022d1] memchr("  low_reg = (unsigned) POP_FAILU"..., '\n', 0) = NULL
[0x4023cc] fwrite("4142:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  low_reg = (unsigned) POP_FAILU"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT2 ("  Popping  low "..., 'I', 9431) = 0x025a3b2f
[0x40cdf3] memchr("INT2 ("  Popping  low active reg"..., '\n', 9421) = 0x025a3b64
[0x4022d1] memchr("  DEBUG_PRINT2 ("  Popping  low "..., '\n', 0) = NULL
[0x4023cc] fwrite("4143:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT2 ("  Popping  low "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n  for (this_reg = hig"..., 'I', 9367) = 0x025a3bce
[0x40cdf3] memchr("INT2 ("    Popping reg: %d\\n", t"..., '\n', 9262) = 0x025a3bfb
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  for (this_reg = hig"..., '\n', 91) = 0x025a3b6f
[0x4022d1] memchr("  for (this_reg = high_reg; this"..., '\n', 80) = 0x025a3baf
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      DEBUG_PRIN"..., '\n', 16) = 0x025a3bbf
[0x4022d1] memchr("      DEBUG_PRINT2 ("    Popping"..., '\n', 0) = NULL
[0x4023cc] fwrite("4147:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT2 ("    Popping"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n      reg_info[this_r"..., 'I', 9216) = 0x025a3c2d
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\t\\\n      DEBUG_P"..., '\n', 9167) = 0x025a3c3f
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      reg_info[this_r"..., '\n', 11) = 0x025a3c06
[0x4022d1] memchr("      reg_info[this_reg].word = "..., '\n', 0) = NULL
[0x4023cc] fwrite("4149:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      reg_info[this_reg].word = "..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      DEBUG_PRINT2 ("      info:"..., 'I', 9148) = 0x025a3c4e
[0x40cdf3] memchr("INT2 ("      info: 0x%x\\n", reg_"..., '\n', 9134) = 0x025a3c81
[0x4022d1] memchr("      DEBUG_PRINT2 ("      info:"..., '\n', 0) = NULL
[0x4023cc] fwrite("4150:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT2 ("      info:"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n      regend[this_reg"..., 'I', 9082) = 0x025a3cbb
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\\\n      DEBUG_PR"..., '\n', 9025) = 0x025a3ccc
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      regend[this_reg"..., '\n', 11) = 0x025a3c8c
[0x4022d1] memchr("      regend[this_reg] = (const "..., '\n', 0) = NULL
[0x4023cc] fwrite("4152:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      regend[this_reg] = (const "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      DEBUG_PRINT2 ("      end: "..., 'I', 9007) = 0x025a3cdb
[0x40cdf3] memchr("INT2 ("      end: 0x%x\\n", regen"..., '\n', 8993) = 0x025a3d0b
[0x4022d1] memchr("      DEBUG_PRINT2 ("      end: "..., '\n', 0) = NULL
[0x4023cc] fwrite("4153:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT2 ("      end: "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t\t\t\t\t\\\n      regstart[this_r"..., 'I', 8944) = 0x025a3d47
[0x40cdf3] memchr("ILURE_ITEM ();\t\t\\\n      DEBUG_PR"..., '\n', 8885) = 0x025a3d58
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n      regstart[this_r"..., '\n', 11) = 0x025a3d16
[0x4022d1] memchr("      regstart[this_reg] = (cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("4155:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      regstart[this_reg] = (cons"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      DEBUG_PRINT2 ("      start"..., 'I', 8867) = 0x025a3d67
[0x40cdf3] memchr("INT2 ("      start: 0x%x\\n", reg"..., '\n', 8853) = 0x025a3d9b
[0x4022d1] memchr("      DEBUG_PRINT2 ("      start"..., '\n', 0) = NULL
[0x4023cc] fwrite("4156:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT2 ("      start"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  DEB"..., 'I', 8800) = 0x025a3df5
[0x40cdf3] memchr("ILURE_POINT */\n\014\n/* re_compile_f"..., '\n', 8711) = 0x025a3e03
[0x4022d1] memchr("    }\t\t\t\t\t\t\t\t\t\\\n\t\t\t\t\t\t\t\t\t\\\n  DEB"..., '\n', 78) = 0x025a3dab
[0x4022d1] memchr("\t\t\t\t\t\t\t\t\t\\\n  DEBUG_STATEMENT (nf"..., '\n', 62) = 0x025a3db6
[0x4022d1] memchr("  DEBUG_STATEMENT (nfailure_poin"..., '\n', 51) = 0x025a3de9
[0x4022d1] memchr("} /* POP_FAILURE_POINT */\n\014\n/* r"..., '\n', 0) = NULL
[0x4023cc] fwrite("4160:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("} /* POP_FAILURE_POINT */\n\014\n/* r"..., 1, 26, 0x7f498147f260) = 26
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\014\n/* re_compile_fastmap computes"..., 'I', 8696) = 0x025a3e83
[0x40cdf3] memchr("IDTH) possible\n   characters can"..., '\n', 8569) = 0x025a3e91
[0x4022d1] memchr("\014\n/* re_compile_fastmap computes"..., '\n', 75) = 0x025a3e05
[0x4022d1] memchr("/* re_compile_fastmap computes a"..., '\n', 73) = 0x025a3e4e
[0x4022d1] memchr("   BUFP.  A fastmap records whic"..., '\n', 0) = NULL
[0x4023cc] fwrite("4163:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   BUFP.  A fastmap records whic"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   characters can start a string"..., 'I', 8554) = 0x025a3f5b
[0x40cdf3] memchr("IDTH)-byte data\n   area as BUFP-"..., '\n', 8353) = 0x025a3f6a
[0x4022d1] memchr("   characters can start a string"..., '\n', 147) = 0x025a3eda
[0x4022d1] memchr("   is used by re_search to skip "..., '\n', 74) = 0x025a3f23
[0x4022d1] memchr("\n   The caller must supply the a"..., '\n', 1) = 0x025a3f24
[0x4022d1] memchr("   The caller must supply the ad"..., '\n', 0) = NULL
[0x4023cc] fwrite("4167:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   The caller must supply the ad"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   area as BUFP->fastmap.\n   \n  "..., 'I', 8337) = 0x025a4383
[0x40cdf3] memchr("INIT_FAIL_STACK ();\n  bzero (fas"..., '\n', 7289) = 0x025a4396
[0x4022d1] memchr("   area as BUFP->fastmap.\n   \n  "..., '\n', 1046) = 0x025a3f84
[0x4022d1] memchr("   \n   We set the `fastmap', `fa"..., '\n', 1020) = 0x025a3f88
[0x4022d1] memchr("   We set the `fastmap', `fastma"..., '\n', 1016) = 0x025a3fd1
[0x4022d1] memchr("   the pattern buffer.\n\n   Retur"..., '\n', 943) = 0x025a3fe8
[0x4022d1] memchr("\n   Returns 0 if we succeed, -2 "..., '\n', 920) = 0x025a3fe9
[0x4022d1] memchr("   Returns 0 if we succeed, -2 i"..., '\n', 919) = 0x025a4023
[0x4022d1] memchr("\nint\nre_compile_fastmap (bufp)\n "..., '\n', 861) = 0x025a4024
[0x4022d1] memchr("int\nre_compile_fastmap (bufp)\n  "..., '\n', 860) = 0x025a4028
[0x4022d1] memchr("re_compile_fastmap (bufp)\n     s"..., '\n', 856) = 0x025a4042
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 830) = 0x025a4067
[0x4022d1] memchr("{\n  int j, k;\n  fail_stack_type "..., '\n', 793) = 0x025a4069
[0x4022d1] memchr("  int j, k;\n  fail_stack_type fa"..., '\n', 791) = 0x025a4075
[0x4022d1] memchr("  fail_stack_type fail_stack;\n#i"..., '\n', 779) = 0x025a4093
[0x4022d1] memchr("#ifndef REGEX_MALLOC\n  char *des"..., '\n', 749) = 0x025a40a8
[0x4022d1] memchr("  char *destination;\n#endif\n  /*"..., '\n', 728) = 0x025a40bd
[0x4022d1] memchr("#endif\n  /* We don't push any re"..., '\n', 707) = 0x025a40c4
[0x4022d1] memchr("  /* We don't push any register "..., '\n', 700) = 0x025a410c
[0x4022d1] memchr("  unsigned num_regs = 0;\n  \n  re"..., '\n', 628) = 0x025a4125
[0x4022d1] memchr("  \n  register char *fastmap = bu"..., '\n', 603) = 0x025a4128
[0x4022d1] memchr("  register char *fastmap = bufp-"..., '\n', 600) = 0x025a4152
[0x4022d1] memchr("  unsigned char *pattern = bufp-"..., '\n', 558) = 0x025a417b
[0x4022d1] memchr("  unsigned long size = bufp->use"..., '\n', 517) = 0x025a419e
[0x4022d1] memchr("  const unsigned char *p = patte"..., '\n', 482) = 0x025a41c2
[0x4022d1] memchr("  register unsigned char *pend ="..., '\n', 446) = 0x025a41f3
[0x4022d1] memchr("\n  /* Assume that each path thro"..., '\n', 397) = 0x025a41f4
[0x4022d1] memchr("  /* Assume that each path throu"..., '\n', 396) = 0x025a4235
[0x4022d1] memchr("     proven otherwise.  We set t"..., '\n', 331) = 0x025a4277
[0x4022d1] memchr("     statement, to which we get "..., '\n', 265) = 0x025a42b9
[0x4022d1] memchr("     match the empty string.  */"..., '\n', 199) = 0x025a42da
[0x4022d1] memchr("  boolean path_can_be_null = tru"..., '\n', 166) = 0x025a42fd
[0x4022d1] memchr("\n  /* We aren't doing a `succeed"..., '\n', 131) = 0x025a42fe
[0x4022d1] memchr("  /* We aren't doing a `succeed_"..., '\n', 130) = 0x025a4334
[0x4022d1] memchr("  boolean succeed_n_p = false;\n\n"..., '\n', 76) = 0x025a4353
[0x4022d1] memchr("\n  assert (fastmap != NULL && p "..., '\n', 45) = 0x025a4354
[0x4022d1] memchr("  assert (fastmap != NULL && p !"..., '\n', 44) = 0x025a437d
[0x4022d1] memchr("  \n  INIT_FAIL_STACK ();\n  bzero"..., '\n', 3) = 0x025a4380
[0x4022d1] memchr("  INIT_FAIL_STACK ();\n  bzero (f"..., '\n', 0) = NULL
[0x4023cc] fwrite("4204:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  INIT_FAIL_STACK ();\n  bzero (f"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  bzero (fastmap, 1 << BYTEWIDTH"..., 'I', 7269) = 0x025a43b3
[0x40cdf3] memchr("IDTH);  /* Assume nothing's vali"..., '\n', 7241) = 0x025a43d9
[0x4022d1] memchr("  bzero (fastmap, 1 << BYTEWIDTH"..., '\n', 0) = NULL
[0x4023cc] fwrite("4205:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  bzero (fastmap, 1 << BYTEWIDTH"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  bufp->fastmap_accurate = 1;\t  "..., 'I', 7202) = 0x025a43ff
[0x40cdf3] memchr("It will be when we're done.  */\n"..., '\n', 7165) = 0x025a441e
[0x4022d1] memchr("  bufp->fastmap_accurate = 1;\t  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4206:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  bufp->fastmap_accurate = 1;\t  "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  bufp->can_be_null = 0;\n      \n"..., 'I', 7133) = 0x025a4458
[0x40cdf3] memchr("IL_STACK_EMPTY ())\n    {\n      i"..., '\n', 7076) = 0x025a446a
[0x4022d1] memchr("  bufp->can_be_null = 0;\n      \n"..., '\n', 32) = 0x025a4437
[0x4022d1] memchr("      \n  while (p != pend || !FA"..., '\n', 7) = 0x025a443e
[0x4022d1] memchr("  while (p != pend || !FAIL_STAC"..., '\n', 0) = NULL
[0x4023cc] fwrite("4209:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  while (p != pend || !FAIL_STAC"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      if (p == pend)\n     "..., 'I', 7057) = 0x025a45cc
[0x40cdf3] memchr("ITCH_ENUM_BUG\n      switch ((int"..., '\n', 6704) = 0x025a45d9
[0x4022d1] memchr("    {\n      if (p == pend)\n     "..., '\n', 344) = 0x025a4470
[0x4022d1] memchr("      if (p == pend)\n        {\n "..., '\n', 338) = 0x025a4485
[0x4022d1] memchr("        {\n          bufp->can_be"..., '\n', 317) = 0x025a448f
[0x4022d1] memchr("          bufp->can_be_null |= p"..., '\n', 307) = 0x025a44c0
[0x4022d1] memchr("          \n          /* Reset fo"..., '\n', 258) = 0x025a44cb
[0x4022d1] memchr("          /* Reset for next path"..., '\n', 247) = 0x025a44f1
[0x4022d1] memchr("          path_can_be_null = tru"..., '\n', 209) = 0x025a4514
[0x4022d1] memchr("          \n          p = fail_st"..., '\n', 174) = 0x025a451f
[0x4022d1] memchr("          p = fail_stack.stack[-"..., '\n', 163) = 0x025a4553
[0x4022d1] memchr("\t}\n\n      /* We should never be "..., '\n', 111) = 0x025a4556
[0x4022d1] memchr("\n      /* We should never be abo"..., '\n', 108) = 0x025a4557
[0x4022d1] memchr("      /* We should never be abou"..., '\n', 107) = 0x025a45a2
[0x4022d1] memchr("      assert (p < pend);\n      \n"..., '\n', 32) = 0x025a45bb
[0x4022d1] memchr("      \n#ifdef SWITCH_ENUM_BUG\n  "..., '\n', 7) = 0x025a45c2
[0x4022d1] memchr("#ifdef SWITCH_ENUM_BUG\n      swi"..., '\n', 0) = NULL
[0x4023cc] fwrite("4224:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifdef SWITCH_ENUM_BUG\n      swi"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      switch ((int) ((re_opcode_"..., 'I', 6690) = 0x025a4642
[0x40cdf3] memchr("I guess the idea here is to simp"..., '\n', 6586) = 0x025a467e
[0x4022d1] memchr("      switch ((int) ((re_opcode_"..., '\n', 93) = 0x025a4603
[0x4022d1] memchr("#else\n      switch ((re_opcode_t"..., '\n', 51) = 0x025a4609
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 45) = 0x025a462b
[0x4022d1] memchr("#endif\n\t{\n\n        /* I guess th"..., '\n', 11) = 0x025a4632
[0x4022d1] memchr("\t{\n\n        /* I guess the idea "..., '\n', 4) = 0x025a4635
[0x4022d1] memchr("\n        /* I guess the idea her"..., '\n', 1) = 0x025a4636
[0x4022d1] memchr("        /* I guess the idea here"..., '\n', 0) = NULL
[0x4023cc] fwrite("4231:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        /* I guess the idea here"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("           if a backreference is"..., 'I', 6525) = 0x025a487d
[0x40cdf3] memchr("IDTH - 1; j >= 0; j--)\n\t    if ("..., '\n', 6015) = 0x025a4893
[0x4022d1] memchr("           if a backreference is"..., '\n', 479) = 0x025a46c7
[0x4022d1] memchr("           the fastmap for the c"..., '\n', 406) = 0x025a4704
[0x4022d1] memchr("           `can_be_null' stops `"..., '\n', 345) = 0x025a474c
[0x4022d1] memchr("           that is all we do.  *"..., '\n', 273) = 0x025a476e
[0x4022d1] memchr("\tcase duplicate:\n\t  bufp->can_be"..., '\n', 239) = 0x025a477f
[0x4022d1] memchr("\t  bufp->can_be_null = 1;\n      "..., '\n', 222) = 0x025a4799
[0x4022d1] memchr("          return 0;\n\n\n      /* F"..., '\n', 196) = 0x025a47ad
[0x4022d1] memchr("\n\n      /* Following are the cas"..., '\n', 176) = 0x025a47ae
[0x4022d1] memchr("\n      /* Following are the case"..., '\n', 175) = 0x025a47af
[0x4022d1] memchr("      /* Following are the cases"..., '\n', 174) = 0x025a47f4
[0x4022d1] memchr("         with `break'.  */\n\n\tcas"..., '\n', 105) = 0x025a480f
[0x4022d1] memchr("\n\tcase exactn:\n          fastmap"..., '\n', 78) = 0x025a4810
[0x4022d1] memchr("\tcase exactn:\n          fastmap["..., '\n', 77) = 0x025a481e
[0x4022d1] memchr("          fastmap[p[1]] = 1;\n\t  "..., '\n', 63) = 0x025a483b
[0x4022d1] memchr("\t  break;\n\n\n        case charset"..., '\n', 34) = 0x025a4845
[0x4022d1] memchr("\n\n        case charset:\n        "..., '\n', 24) = 0x025a4846
[0x4022d1] memchr("\n        case charset:\n         "..., '\n', 23) = 0x025a4847
[0x4022d1] memchr("        case charset:\n          "..., '\n', 22) = 0x025a485d
[0x4022d1] memchr("          for (j = *p++ * BYTEWI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4250:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          for (j = *p++ * BYTEWI"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (p[j / BYTEWIDTH] & (1 <"..., 'I', 5992) = 0x025a48a8
[0x40cdf3] memchr("IDTH] & (1 << (j % BYTEWIDTH)))\n"..., '\n', 5972) = 0x025a48c7
[0x4022d1] memchr("\t    if (p[j / BYTEWIDTH] & (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("4251:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    if (p[j / BYTEWIDTH] & (1 <"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              fastmap[j] = 1;\n\t "..., 'I', 5940) = 0x025a494e
[0x40cdf3] memchr("IDTH; j < (1 << BYTEWIDTH); j++)"..., '\n', 5806) = 0x025a496e
[0x4022d1] memchr("              fastmap[j] = 1;\n\t "..., '\n', 112) = 0x025a48e5
[0x4022d1] memchr("\t  break;\n\n\n\tcase charset_not:\n\t"..., '\n', 82) = 0x025a48ef
[0x4022d1] memchr("\n\n\tcase charset_not:\n\t  /* Chars"..., '\n', 72) = 0x025a48f0
[0x4022d1] memchr("\n\tcase charset_not:\n\t  /* Chars "..., '\n', 71) = 0x025a48f1
[0x4022d1] memchr("\tcase charset_not:\n\t  /* Chars b"..., '\n', 70) = 0x025a4904
[0x4022d1] memchr("\t  /* Chars beyond end of map mu"..., '\n', 51) = 0x025a4937
[0x4022d1] memchr("\t  for (j = *p * BYTEWIDTH; j < "..., '\n', 0) = NULL
[0x4023cc] fwrite("4258:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = *p * BYTEWIDTH; j < "..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            fastmap[j] = 1;\n\n\t  "..., 'I', 5773) = 0x025a49a4
[0x40cdf3] memchr("IDTH - 1; j >= 0; j--)\n\t    if ("..., '\n', 5720) = 0x025a49ba
[0x4022d1] memchr("            fastmap[j] = 1;\n\n\t  "..., '\n', 29) = 0x025a498a
[0x4022d1] memchr("\n\t  for (j = *p++ * BYTEWIDTH - "..., '\n', 1) = 0x025a498b
[0x4022d1] memchr("\t  for (j = *p++ * BYTEWIDTH - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4261:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = *p++ * BYTEWIDTH - 1"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (!(p[j / BYTEWIDTH] & (1"..., 'I', 5697) = 0x025a49d1
[0x40cdf3] memchr("IDTH] & (1 << (j % BYTEWIDTH))))"..., '\n', 5675) = 0x025a49f1
[0x4022d1] memchr("\t    if (!(p[j / BYTEWIDTH] & (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4262:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    if (!(p[j / BYTEWIDTH] & (1"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              fastmap[j] = 1;\n  "..., 'I', 5642) = 0x025a4a51
[0x40cdf3] memchr("IDTH); j++)\n\t    if (SYNTAX (j) "..., '\n', 5547) = 0x025a4a5c
[0x4022d1] memchr("              fastmap[j] = 1;\n  "..., '\n', 65) = 0x025a4a0f
[0x4022d1] memchr("          break;\n\n\n\tcase wordcha"..., '\n', 35) = 0x025a4a20
[0x4022d1] memchr("\n\n\tcase wordchar:\n\t  for (j = 0;"..., '\n', 18) = 0x025a4a21
[0x4022d1] memchr("\n\tcase wordchar:\n\t  for (j = 0; "..., '\n', 17) = 0x025a4a22
[0x4022d1] memchr("\tcase wordchar:\n\t  for (j = 0; j"..., '\n', 16) = 0x025a4a32
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4268:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) == Sword)\n\t "..., 'I', 5535) = 0x025a4acf
[0x40cdf3] memchr("IDTH); j++)\n\t    if (SYNTAX (j) "..., '\n', 5421) = 0x025a4ada
[0x4022d1] memchr("\t    if (SYNTAX (j) == Sword)\n\t "..., '\n', 84) = 0x025a4a7a
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 54) = 0x025a4a91
[0x4022d1] memchr("\t  break;\n\n\n\tcase notwordchar:\n\t"..., '\n', 31) = 0x025a4a9b
[0x4022d1] memchr("\n\n\tcase notwordchar:\n\t  for (j ="..., '\n', 21) = 0x025a4a9c
[0x4022d1] memchr("\n\tcase notwordchar:\n\t  for (j = "..., '\n', 20) = 0x025a4a9d
[0x4022d1] memchr("\tcase notwordchar:\n\t  for (j = 0"..., '\n', 19) = 0x025a4ab0
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4275:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) != Sword)\n\t "..., 'I', 5409) = 0x025a4b7a
[0x40cdf3] memchr("IDTH); j++)\n            fastmap["..., '\n', 5250) = 0x025a4b85
[0x4022d1] memchr("\t    if (SYNTAX (j) != Sword)\n\t "..., '\n', 129) = 0x025a4af8
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 99) = 0x025a4b0f
[0x4022d1] memchr("\t  break;\n\n\n        case anychar"..., '\n', 76) = 0x025a4b19
[0x4022d1] memchr("\n\n        case anychar:\n        "..., '\n', 66) = 0x025a4b1a
[0x4022d1] memchr("\n        case anychar:\n         "..., '\n', 65) = 0x025a4b1b
[0x4022d1] memchr("        case anychar:\n          "..., '\n', 64) = 0x025a4b31
[0x4022d1] memchr("          /* `.' matches anythin"..., '\n', 42) = 0x025a4b5b
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4283:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            fastmap[j] = 1;\n\n   "..., 'I', 5238) = 0x025a4bfa
[0x40cdf3] memchr("INE))\n            fastmap['\\n'] "..., '\n', 5122) = 0x025a4bff
[0x4022d1] memchr("            fastmap[j] = 1;\n\n   "..., '\n', 74) = 0x025a4ba1
[0x4022d1] memchr("\n          /* ... except perhaps"..., '\n', 46) = 0x025a4ba2
[0x4022d1] memchr("          /* ... except perhaps "..., '\n', 45) = 0x025a4bcf
[0x4022d1] memchr("          if (!(bufp->syntax & R"..., '\n', 0) = NULL
[0x4023cc] fwrite("4287:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (!(bufp->syntax & R"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            fastmap['\\n'] = 0;\n\n"..., 'I', 5116) = 0x025a4d79
[0x40cdf3] memchr("IDTH); j++)\n\t    if (SYNTAX (j) "..., '\n', 4739) = 0x025a4d84
[0x4022d1] memchr("            fastmap['\\n'] = 0;\n\n"..., '\n', 347) = 0x025a4c1e
[0x4022d1] memchr("\n          /* Return if we have "..., '\n', 316) = 0x025a4c1f
[0x4022d1] memchr("          /* Return if we have a"..., '\n', 315) = 0x025a4c65
[0x4022d1] memchr("             then the fastmap is"..., '\n', 245) = 0x025a4caf
[0x4022d1] memchr("\t  else if (bufp->can_be_null)\n\t"..., '\n', 171) = 0x025a4cce
[0x4022d1] memchr("\t    return 0;\n\n          /* Oth"..., '\n', 140) = 0x025a4cdd
[0x4022d1] memchr("\n          /* Otherwise, have to"..., '\n', 125) = 0x025a4cde
[0x4022d1] memchr("          /* Otherwise, have to "..., '\n', 124) = 0x025a4d1b
[0x4022d1] memchr("\t  break;\n\n\n#ifdef emacs\n       "..., '\n', 63) = 0x025a4d25
[0x4022d1] memchr("\n\n#ifdef emacs\n        case synt"..., '\n', 53) = 0x025a4d26
[0x4022d1] memchr("\n#ifdef emacs\n        case synta"..., '\n', 52) = 0x025a4d27
[0x4022d1] memchr("#ifdef emacs\n        case syntax"..., '\n', 51) = 0x025a4d34
[0x4022d1] memchr("        case syntaxspec:\n\t  k = "..., '\n', 38) = 0x025a4d4d
[0x4022d1] memchr("\t  k = *p++;\n\t  for (j = 0; j < "..., '\n', 13) = 0x025a4d5a
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4302:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) == (enum syn"..., 'I', 4727) = 0x025a4e14
[0x40cdf3] memchr("IDTH); j++)\n\t    if (SYNTAX (j) "..., '\n', 4584) = 0x025a4e1f
[0x4022d1] memchr("\t    if (SYNTAX (j) == (enum syn"..., '\n', 113) = 0x025a4db0
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 69) = 0x025a4dc7
[0x4022d1] memchr("\t  break;\n\n\n\tcase notsyntaxspec:"..., '\n', 46) = 0x025a4dd1
[0x4022d1] memchr("\n\n\tcase notsyntaxspec:\n\t  k = *p"..., '\n', 36) = 0x025a4dd2
[0x4022d1] memchr("\n\tcase notsyntaxspec:\n\t  k = *p+"..., '\n', 35) = 0x025a4dd3
[0x4022d1] memchr("\tcase notsyntaxspec:\n\t  k = *p++"..., '\n', 34) = 0x025a4de8
[0x4022d1] memchr("\t  k = *p++;\n\t  for (j = 0; j < "..., '\n', 13) = 0x025a4df5
[0x4022d1] memchr("\t  for (j = 0; j < (1 << BYTEWID"..., '\n', 0) = NULL
[0x4023cc] fwrite("4310:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < (1 << BYTEWID"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    if (SYNTAX (j) != (enum syn"..., 'I', 4572) = 0x025a50a6
[0x40cdf3] memchr("INCR (j, p);\n\t  p += j;\t\n\t  if ("..., '\n', 3926) = 0x025a50b2
[0x4022d1] memchr("\t    if (SYNTAX (j) != (enum syn"..., '\n', 617) = 0x025a4e4b
[0x4022d1] memchr("\t      fastmap[j] = 1;\n\t  break;"..., '\n', 573) = 0x025a4e62
[0x4022d1] memchr("\t  break;\n\n\n      /* All cases a"..., '\n', 550) = 0x025a4e6c
[0x4022d1] memchr("\n\n      /* All cases after this "..., '\n', 540) = 0x025a4e6d
[0x4022d1] memchr("\n      /* All cases after this m"..., '\n', 539) = 0x025a4e6e
[0x4022d1] memchr("      /* All cases after this ma"..., '\n', 538) = 0x025a4eb4
[0x4022d1] memchr("         `continue'.  */\n\n\n\tcase"..., '\n', 468) = 0x025a4ecd
[0x4022d1] memchr("\n\n\tcase before_dot:\n\tcase at_dot"..., '\n', 443) = 0x025a4ece
[0x4022d1] memchr("\n\tcase before_dot:\n\tcase at_dot:"..., '\n', 442) = 0x025a4ecf
[0x4022d1] memchr("\tcase before_dot:\n\tcase at_dot:\n"..., '\n', 441) = 0x025a4ee1
[0x4022d1] memchr("\tcase at_dot:\n\tcase after_dot:\n "..., '\n', 423) = 0x025a4eef
[0x4022d1] memchr("\tcase after_dot:\n          conti"..., '\n', 409) = 0x025a4f00
[0x4022d1] memchr("          continue;\n#endif /* no"..., '\n', 392) = 0x025a4f14
[0x4022d1] memchr("#endif /* not emacs */\n\n\n       "..., '\n', 372) = 0x025a4f2b
[0x4022d1] memchr("\n\n        case no_op:\n        ca"..., '\n', 349) = 0x025a4f2c
[0x4022d1] memchr("\n        case no_op:\n        cas"..., '\n', 348) = 0x025a4f2d
[0x4022d1] memchr("        case no_op:\n        case"..., '\n', 347) = 0x025a4f41
[0x4022d1] memchr("        case begline:\n        ca"..., '\n', 327) = 0x025a4f57
[0x4022d1] memchr("        case endline:\n\tcase begb"..., '\n', 305) = 0x025a4f6d
[0x4022d1] memchr("\tcase begbuf:\n\tcase endbuf:\n\tcas"..., '\n', 283) = 0x025a4f7b
[0x4022d1] memchr("\tcase endbuf:\n\tcase wordbound:\n\t"..., '\n', 269) = 0x025a4f89
[0x4022d1] memchr("\tcase wordbound:\n\tcase notwordbo"..., '\n', 255) = 0x025a4f9a
[0x4022d1] memchr("\tcase notwordbound:\n\tcase wordbe"..., '\n', 238) = 0x025a4fae
[0x4022d1] memchr("\tcase wordbeg:\n\tcase wordend:\n  "..., '\n', 218) = 0x025a4fbd
[0x4022d1] memchr("\tcase wordend:\n        case push"..., '\n', 203) = 0x025a4fcc
[0x4022d1] memchr("        case push_dummy_failure:"..., '\n', 188) = 0x025a4fed
[0x4022d1] memchr("          continue;\n\n\n\tcase jump"..., '\n', 155) = 0x025a5001
[0x4022d1] memchr("\n\n\tcase jump_n:\n        case pop"..., '\n', 135) = 0x025a5002
[0x4022d1] memchr("\n\tcase jump_n:\n        case pop_"..., '\n', 134) = 0x025a5003
[0x4022d1] memchr("\tcase jump_n:\n        case pop_f"..., '\n', 133) = 0x025a5011
[0x4022d1] memchr("        case pop_failure_jump:\n\t"..., '\n', 119) = 0x025a5030
[0x4022d1] memchr("\tcase maybe_pop_jump:\n\tcase jump"..., '\n', 88) = 0x025a5046
[0x4022d1] memchr("\tcase jump:\n        case jump_pa"..., '\n', 66) = 0x025a5052
[0x4022d1] memchr("        case jump_past_alt:\n\tcas"..., '\n', 54) = 0x025a506e
[0x4022d1] memchr("\tcase dummy_failure_jump:\n      "..., '\n', 26) = 0x025a5088
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("4346:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  p += j;\t\n\t  if (j > 0)\n\t    c"..., 'I', 3913) = 0x025a52d6
[0x40cdf3] memchr("INCR (j, p);\n          p += j;\t\t"..., '\n', 3366) = 0x025a52e2
[0x4022d1] memchr("\t  p += j;\t\n\t  if (j > 0)\n\t    c"..., '\n', 518) = 0x025a50be
[0x4022d1] memchr("\t  if (j > 0)\n\t    continue;\n   "..., '\n', 506) = 0x025a50cc
[0x4022d1] memchr("\t    continue;\n            \n    "..., '\n', 492) = 0x025a50db
[0x4022d1] memchr("            \n          /* Jump b"..., '\n', 477) = 0x025a50e8
[0x4022d1] memchr("          /* Jump backward impli"..., '\n', 464) = 0x025a512e
[0x4022d1] memchr("             loop and matched no"..., '\n', 394) = 0x025a5171
[0x4022d1] memchr("             `on_failure_jump' o"..., '\n', 327) = 0x025a51b7
[0x4022d1] memchr("             ordinary jump.  For"..., '\n', 257) = 0x025a51fc
[0x4022d1] memchr("             point already; if s"..., '\n', 188) = 0x025a523e
[0x4022d1] memchr("          if ((re_opcode_t) *p !"..., '\n', 122) = 0x025a5270
[0x4022d1] memchr("\t      && (re_opcode_t) *p != su"..., '\n', 72) = 0x025a5299
[0x4022d1] memchr("\t    continue;\n\n          p++;\n "..., '\n', 31) = 0x025a52a8
[0x4022d1] memchr("\n          p++;\n          EXTRAC"..., '\n', 16) = 0x025a52a9
[0x4022d1] memchr("          p++;\n          EXTRACT"..., '\n', 15) = 0x025a52b8
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("4361:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          p += j;\t\t\n\t  \n        "..., 'I', 3353) = 0x025a5308
[0x40cdf3] memchr("If what's on the stack is where "..., '\n', 3316) = 0x025a533f
[0x4022d1] memchr("          p += j;\t\t\n\t  \n        "..., '\n', 24) = 0x025a52f6
[0x4022d1] memchr("\t  \n          /* If what's on th"..., '\n', 4) = 0x025a52fa
[0x4022d1] memchr("          /* If what's on the st"..., '\n', 0) = NULL
[0x4023cc] fwrite("4364:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If what's on the st"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (!FAIL_STACK_EMPTY "..., 'I', 3260) = 0x025a5351
[0x40cdf3] memchr("IL_STACK_EMPTY () \n\t      && fai"..., '\n', 3243) = 0x025a5363
[0x4022d1] memchr("          if (!FAIL_STACK_EMPTY "..., '\n', 0) = NULL
[0x4023cc] fwrite("4365:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (!FAIL_STACK_EMPTY "..., 1, 36, 0x7f498147f260) = 36
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      && fail_stack.stack[fail_"..., 'I', 3224) = 0x025a5450
[0x40cdf3] memchr("INCR (j, p);\n\n          /* For s"..., '\n', 2988) = 0x025a545c
[0x4022d1] memchr("\t      && fail_stack.stack[fail_"..., '\n', 207) = 0x025a539a
[0x4022d1] memchr("            fail_stack.avail--;\n"..., '\n', 152) = 0x025a53ba
[0x4022d1] memchr("\n          continue;\n\n\n        c"..., '\n', 120) = 0x025a53bb
[0x4022d1] memchr("          continue;\n\n\n        ca"..., '\n', 119) = 0x025a53cf
[0x4022d1] memchr("\n\n        case on_failure_jump:\n"..., '\n', 99) = 0x025a53d0
[0x4022d1] memchr("\n        case on_failure_jump:\n "..., '\n', 98) = 0x025a53d1
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 97) = 0x025a53ef
[0x4022d1] memchr("        case on_failure_keep_str"..., '\n', 67) = 0x025a5419
[0x4022d1] memchr("\thandle_on_failure_jump:\n       "..., '\n', 25) = 0x025a5432
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("4375:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* For some patterns,"..., 'I', 2975) = 0x025a573a
[0x40cdf3] memchr("INCR (k, p);\t/* Skip the n.  */\n"..., '\n', 2242) = 0x025a5759
[0x4022d1] memchr("\n          /* For some patterns,"..., '\n', 700) = 0x025a545d
[0x4022d1] memchr("          /* For some patterns, "..., '\n', 699) = 0x025a54a5
[0x4022d1] memchr("             end of the pattern."..., '\n', 627) = 0x025a54eb
[0x4022d1] memchr("             since when we resto"..., '\n', 557) = 0x025a5531
[0x4022d1] memchr("             increment `p' past "..., '\n', 487) = 0x025a5578
[0x4022d1] memchr("             to push such a poin"..., '\n', 416) = 0x025a55c1
[0x4022d1] memchr("             fastmap entries bey"..., '\n', 343) = 0x025a5607
[0x4022d1] memchr("             the null string, th"..., '\n', 273) = 0x025a5631
[0x4022d1] memchr("          if (p + j < pend)\n    "..., '\n', 231) = 0x025a564d
[0x4022d1] memchr("            {\n              if ("..., '\n', 203) = 0x025a565b
[0x4022d1] memchr("              if (!PUSH_PATTERN_"..., '\n', 189) = 0x025a5693
[0x4022d1] memchr("                return -2;\n     "..., '\n', 133) = 0x025a56ae
[0x4022d1] memchr("            }\n          else\n   "..., '\n', 106) = 0x025a56bc
[0x4022d1] memchr("          else\n            bufp-"..., '\n', 92) = 0x025a56cb
[0x4022d1] memchr("            bufp->can_be_null = "..., '\n', 77) = 0x025a56ee
[0x4022d1] memchr("\n          if (succeed_n_p)\n    "..., '\n', 42) = 0x025a56ef
[0x4022d1] memchr("          if (succeed_n_p)\n     "..., '\n', 41) = 0x025a570a
[0x4022d1] memchr("            {\n              EXTR"..., '\n', 14) = 0x025a5718
[0x4022d1] memchr("              EXTRACT_NUMBER_AND"..., '\n', 0) = NULL
[0x4023cc] fwrite("4394:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              EXTRACT_NUMBER_AND"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              succeed_n_p = fals"..., 'I', 2210) = 0x025a5806
[0x40cdf3] memchr("Increment p past the n for when "..., '\n', 2038) = 0x025a5831
[0x4022d1] memchr("              succeed_n_p = fals"..., '\n', 159) = 0x025a577c
[0x4022d1] memchr("\t    }\n\n          continue;\n\n\n\tc"..., '\n', 124) = 0x025a5783
[0x4022d1] memchr("\n          continue;\n\n\n\tcase suc"..., '\n', 117) = 0x025a5784
[0x4022d1] memchr("          continue;\n\n\n\tcase succ"..., '\n', 116) = 0x025a5798
[0x4022d1] memchr("\n\n\tcase succeed_n:\n          /* "..., '\n', 96) = 0x025a5799
[0x4022d1] memchr("\n\tcase succeed_n:\n          /* G"..., '\n', 95) = 0x025a579a
[0x4022d1] memchr("\tcase succeed_n:\n          /* Ge"..., '\n', 94) = 0x025a57ab
[0x4022d1] memchr("          /* Get to the number o"..., '\n', 77) = 0x025a57e3
[0x4022d1] memchr("          p += 2;\t\t\n\n          /"..., '\n', 21) = 0x025a57f7
[0x4022d1] memchr("\n          /* Increment p past t"..., '\n', 1) = 0x025a57f8
[0x4022d1] memchr("          /* Increment p past th"..., '\n', 0) = NULL
[0x4023cc] fwrite("4405:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* Increment p past th"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          EXTRACT_NUMBER_AND_INC"..., 'I', 1994) = 0x025a584f
[0x40cdf3] memchr("INCR (k, p);\n          if (k == "..., '\n', 1965) = 0x025a585b
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("4406:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (k == 0)\n\t    {\n   "..., 'I', 1952) = 0x025a5ad4
[0x40cdf3] memchr("Instead, look at the next altern"..., '\n', 1320) = 0x025a5b0c
[0x4022d1] memchr("          if (k == 0)\n\t    {\n   "..., '\n', 623) = 0x025a5871
[0x4022d1] memchr("\t    {\n              p -= 4;\n  \t"..., '\n', 601) = 0x025a5878
[0x4022d1] memchr("              p -= 4;\n  \t      s"..., '\n', 594) = 0x025a588e
[0x4022d1] memchr("  \t      succeed_n_p = true;  /*"..., '\n', 572) = 0x025a58c9
[0x4022d1] memchr("              goto handle_on_fai"..., '\n', 513) = 0x025a58f4
[0x4022d1] memchr("            }\n          continue"..., '\n', 470) = 0x025a5902
[0x4022d1] memchr("          continue;\n\n\n\tcase set_"..., '\n', 456) = 0x025a5916
[0x4022d1] memchr("\n\n\tcase set_number_at:\n         "..., '\n', 436) = 0x025a5917
[0x4022d1] memchr("\n\tcase set_number_at:\n          "..., '\n', 435) = 0x025a5918
[0x4022d1] memchr("\tcase set_number_at:\n          p"..., '\n', 434) = 0x025a592d
[0x4022d1] memchr("          p += 4;\n          cont"..., '\n', 413) = 0x025a593f
[0x4022d1] memchr("          continue;\n\n\n\tcase star"..., '\n', 395) = 0x025a5953
[0x4022d1] memchr("\n\n\tcase start_memory:\n        ca"..., '\n', 375) = 0x025a5954
[0x4022d1] memchr("\n\tcase start_memory:\n        cas"..., '\n', 374) = 0x025a5955
[0x4022d1] memchr("\tcase start_memory:\n        case"..., '\n', 373) = 0x025a5969
[0x4022d1] memchr("        case stop_memory:\n\t  p +"..., '\n', 353) = 0x025a5983
[0x4022d1] memchr("\t  p += 2;\n\t  continue;\n\n\n\tdefau"..., '\n', 327) = 0x025a598e
[0x4022d1] memchr("\t  continue;\n\n\n\tdefault:\n       "..., '\n', 316) = 0x025a599b
[0x4022d1] memchr("\n\n\tdefault:\n          abort (); "..., '\n', 303) = 0x025a599c
[0x4022d1] memchr("\n\tdefault:\n          abort (); /"..., '\n', 302) = 0x025a599d
[0x4022d1] memchr("\tdefault:\n          abort (); /*"..., '\n', 301) = 0x025a59a7
[0x4022d1] memchr("          abort (); /* We have l"..., '\n', 291) = 0x025a59e0
[0x4022d1] memchr("        } /* switch *p++ */\n\n   "..., '\n', 234) = 0x025a59fc
[0x4022d1] memchr("\n      /* Getting here means we "..., '\n', 206) = 0x025a59fd
[0x4022d1] memchr("      /* Getting here means we h"..., '\n', 205) = 0x025a5a3d
[0x4022d1] memchr("         characters for one path"..., '\n', 141) = 0x025a5a83
[0x4022d1] memchr("         string does not match. "..., '\n', 71) = 0x025a5aca
[0x4022d1] memchr("         Instead, look at the ne"..., '\n', 0) = NULL
[0x4023cc] fwrite("4434:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("         Instead, look at the ne"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("         stack), or quit if no m"..., 'I', 1263) = 0x025a5db8
[0x40cdf3] memchr("If NUM_REGS == 0, then subsequen"..., '\n', 580) = 0x025a5dfb
[0x4022d1] memchr("         stack), or quit if no m"..., '\n', 680) = 0x025a5b52
[0x4022d1] memchr("         does these things.  */\n"..., '\n', 610) = 0x025a5b72
[0x4022d1] memchr("      path_can_be_null = false;\n"..., '\n', 578) = 0x025a5b92
[0x4022d1] memchr("      p = pend;\n    } /* while p"..., '\n', 546) = 0x025a5ba2
[0x4022d1] memchr("    } /* while p */\n\n  /* Set `c"..., '\n', 530) = 0x025a5bb6
[0x4022d1] memchr("\n  /* Set `can_be_null' for the "..., '\n', 510) = 0x025a5bb7
[0x4022d1] memchr("  /* Set `can_be_null' for the l"..., '\n', 509) = 0x025a5bfd
[0x4022d1] memchr("     pattern is empty).  */\n  bu"..., '\n', 439) = 0x025a5c19
[0x4022d1] memchr("  bufp->can_be_null |= path_can_"..., '\n', 411) = 0x025a5c42
[0x4022d1] memchr("  return 0;\n} /* re_compile_fast"..., '\n', 370) = 0x025a5c4e
[0x4022d1] memchr("} /* re_compile_fastmap */\n\014\n/* "..., '\n', 358) = 0x025a5c69
[0x4022d1] memchr("\014\n/* Set REGS to hold NUM_REGS r"..., '\n', 331) = 0x025a5c6b
[0x4022d1] memchr("/* Set REGS to hold NUM_REGS reg"..., '\n', 329) = 0x025a5cae
[0x4022d1] memchr("   ENDS.  Subsequent matches usi"..., '\n', 262) = 0x025a5cf2
[0x4022d1] memchr("   this memory for recording reg"..., '\n', 194) = 0x025a5d36
[0x4022d1] memchr("   must be allocated using the m"..., '\n', 126) = 0x025a5d7b
[0x4022d1] memchr("   be at least NUM_REGS * sizeof"..., '\n', 57) = 0x025a5db3
[0x4022d1] memchr("\n   If NUM_REGS == 0, then subse"..., '\n', 1) = 0x025a5db4
[0x4022d1] memchr("   If NUM_REGS == 0, then subseq"..., '\n', 0) = NULL
[0x4023cc] fwrite("4453:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If NUM_REGS == 0, then subseq"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   register data.\n\n   Unless thi"..., 'I', 512) = NULL
[0x4022d1] memchr("   register data.\n\n   Unless thi"..., '\n', 512) = 0x025a5e0d
[0x4022d1] memchr("\n   Unless this function is call"..., '\n', 494) = 0x025a5e0e
[0x4022d1] memchr("   Unless this function is calle"..., '\n', 493) = 0x025a5e51
[0x4022d1] memchr("   PATTERN_BUFFER will allocate "..., '\n', 426) = 0x025a5e90
[0x4022d1] memchr("   freeing the old data.  */\n\nvo"..., '\n', 363) = 0x025a5ead
[0x4022d1] memchr("\nvoid\nre_set_registers (bufp, re"..., '\n', 334) = 0x025a5eae
[0x4022d1] memchr("void\nre_set_registers (bufp, reg"..., '\n', 333) = 0x025a5eb3
[0x4022d1] memchr("re_set_registers (bufp, regs, nu"..., '\n', 328) = 0x025a5ee9
[0x4022d1] memchr("    struct re_pattern_buffer *bu"..., '\n', 274) = 0x025a5f0d
[0x4022d1] memchr("    struct re_registers *regs;\n "..., '\n', 238) = 0x025a5f2c
[0x4022d1] memchr("    unsigned num_regs;\n    regof"..., '\n', 207) = 0x025a5f43
[0x4022d1] memchr("    regoff_t *starts, *ends;\n{\n "..., '\n', 184) = 0x025a5f60
[0x4022d1] memchr("{\n  if (num_regs)\n    {\n      bu"..., '\n', 155) = 0x025a5f62
[0x4022d1] memchr("  if (num_regs)\n    {\n      bufp"..., '\n', 153) = 0x025a5f72
[0x4022d1] memchr("    {\n      bufp->regs_allocated"..., '\n', 137) = 0x025a5f78
[0x4022d1] memchr("      bufp->regs_allocated = REG"..., '\n', 131) = 0x025a5fa6
[0x4022d1] memchr("      regs->num_regs = num_regs;"..., '\n', 85) = 0x025a5fc7
[0x4022d1] memchr("      regs->start = starts;\n    "..., '\n', 52) = 0x025a5fe3
[0x4022d1] memchr("      regs->end = ends;\n    ", '\n', 24) = 0x025a5ffb
[0x4022d1] memchr("    ", '\n', 0)               = NULL
[0x4020b3] memmove(0x259dffc, 0x25a5ffc, 4, 0x25a5ffc, 0x7f498147f260) = 0x259dffc
[0x402213] read(3, "}\n  else\n    {\n      bufp->regs_"..., 32768) = 32768
[0x40bc2b] memchr("    }\n  else\n    {\n      bufp->r"..., 'I', 32752) = 0x0259e2a0
[0x40cdf3] memchr("ING1 and STRING2, starting first"..., '\n', 32076) = 0x0259e2c9
[0x4022d1] memchr("    }\n  else\n    {\n      bufp->r"..., '\n', 645) = 0x0259e001
[0x4022d1] memchr("  else\n    {\n      bufp->regs_al"..., '\n', 639) = 0x0259e008
[0x4022d1] memchr("    {\n      bufp->regs_allocated"..., '\n', 632) = 0x0259e00e
[0x4022d1] memchr("      bufp->regs_allocated = REG"..., '\n', 626) = 0x0259e03d
[0x4022d1] memchr("      regs->num_regs = 0;\n      "..., '\n', 579) = 0x0259e057
[0x4022d1] memchr("      regs->start = regs->end = "..., '\n', 553) = 0x0259e085
[0x4022d1] memchr("    }\n}\n\014\n/* Searching routines."..., '\n', 507) = 0x0259e08b
[0x4022d1] memchr("}\n\014\n/* Searching routines.  */\n\n"..., '\n', 501) = 0x0259e08d
[0x4022d1] memchr("\014\n/* Searching routines.  */\n\n/*"..., '\n', 499) = 0x0259e08f
[0x4022d1] memchr("/* Searching routines.  */\n\n/* L"..., '\n', 497) = 0x0259e0aa
[0x4022d1] memchr("\n/* Like re_search_2, below, but"..., '\n', 470) = 0x0259e0ab
[0x4022d1] memchr("/* Like re_search_2, below, but "..., '\n', 469) = 0x0259e0ed
[0x4022d1] memchr("   doesn't let you say where to "..., '\n', 403) = 0x0259e11f
[0x4022d1] memchr("\nint\nre_search (bufp, string, si"..., '\n', 353) = 0x0259e120
[0x4022d1] memchr("int\nre_search (bufp, string, siz"..., '\n', 352) = 0x0259e124
[0x4022d1] memchr("re_search (bufp, string, size, s"..., '\n', 348) = 0x0259e15a
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 294) = 0x0259e17f
[0x4022d1] memchr("     const char *string;\n     in"..., '\n', 257) = 0x0259e198
[0x4022d1] memchr("     int size, startpos, range;\n"..., '\n', 232) = 0x0259e1b8
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 200) = 0x0259e1d8
[0x4022d1] memchr("{\n  return re_search_2 (bufp, NU"..., '\n', 168) = 0x0259e1da
[0x4022d1] memchr("  return re_search_2 (bufp, NULL"..., '\n', 166) = 0x0259e21f
[0x4022d1] memchr("\t\t      regs, size);\n}\n\n\n/* Usin"..., '\n', 97) = 0x0259e234
[0x4022d1] memchr("}\n\n\n/* Using the compiled patter"..., '\n', 76) = 0x0259e236
[0x4022d1] memchr("\n\n/* Using the compiled pattern "..., '\n', 74) = 0x0259e237
[0x4022d1] memchr("\n/* Using the compiled pattern i"..., '\n', 73) = 0x0259e238
[0x4022d1] memchr("/* Using the compiled pattern in"..., '\n', 72) = 0x0259e280
[0x4022d1] memchr("   virtual concatenation of STRI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4500:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   virtual concatenation of STRI"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   STARTPOS, then at STARTPOS + "..., 'I', 32034) = 0x0259e302
[0x40cdf3] memchr("ING1 and STRING2 have length SIZ"..., '\n', 31978) = 0x0259e33d
[0x4022d1] memchr("   STARTPOS, then at STARTPOS + "..., '\n', 50) = 0x0259e2f7
[0x4022d1] memchr("   \n   STRING1 and STRING2 have "..., '\n', 4) = 0x0259e2fb
[0x4022d1] memchr("   STRING1 and STRING2 have leng"..., '\n', 0) = NULL
[0x4023cc] fwrite("4503:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   STRING1 and STRING2 have leng"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   \n   RANGE is how far to scan "..., 'I', 31918) = 0x0259e3df
[0x40cdf3] memchr("In REGS, return the indices of t"..., '\n', 31757) = 0x0259e422
[0x4022d1] memchr("   \n   RANGE is how far to scan "..., '\n', 158) = 0x0259e341
[0x4022d1] memchr("   RANGE is how far to scan whil"..., '\n', 154) = 0x0259e389
[0x4022d1] memchr("   only at STARTPOS; in general,"..., '\n', 82) = 0x0259e3cd
[0x4022d1] memchr("   RANGE.\n   \n   In REGS, return"..., '\n', 14) = 0x0259e3d7
[0x4022d1] memchr("   \n   In REGS, return the indic"..., '\n', 4) = 0x0259e3db
[0x4022d1] memchr("   In REGS, return the indices o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4509:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   In REGS, return the indices o"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   and STRING2 that matched the "..., 'I', 31689) = 0x0259e42d
[0x40cdf3] memchr("ING2 that matched the entire BUF"..., '\n', 31679) = 0x0259e468
[0x4022d1] memchr("   and STRING2 that matched the "..., '\n', 0) = NULL
[0x4023cc] fwrite("4510:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   and STRING2 that matched the "..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   subexpressions.\n   \n   Do not"..., 'I', 31619) = 0x0259e4da
[0x40cdf3] memchr("ING1 and STRING2.\n\n   We return "..., '\n', 31506) = 0x0259e4eb
[0x4022d1] memchr("   subexpressions.\n   \n   Do not"..., '\n', 90) = 0x0259e47b
[0x4022d1] memchr("   \n   Do not consider matching "..., '\n', 71) = 0x0259e47f
[0x4022d1] memchr("   Do not consider matching one "..., '\n', 67) = 0x0259e4c2
[0x4022d1] memchr("   concatenation of STRING1 and "..., '\n', 0) = NULL
[0x4023cc] fwrite("4514:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   concatenation of STRING1 and "..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   We return either the positio"..., 'I', 31488) = 0x0259e7ff
[0x40cdf3] memchr("ING1 and STRING2.  */\n  if (endp"..., '\n', 30701) = 0x0259e814
[0x4022d1] memchr("\n   We return either the positio"..., '\n', 750) = 0x0259e4ec
[0x4022d1] memchr("   We return either the position"..., '\n', 749) = 0x0259e533
[0x4022d1] memchr("   found, -1 if no match, or -2 "..., '\n', 678) = 0x0259e56d
[0x4022d1] memchr("   stack overflow).  */\n\nint\nre_"..., '\n', 620) = 0x0259e585
[0x4022d1] memchr("\nint\nre_search_2 (bufp, string1,"..., '\n', 596) = 0x0259e586
[0x4022d1] memchr("int\nre_search_2 (bufp, string1, "..., '\n', 595) = 0x0259e58a
[0x4022d1] memchr("re_search_2 (bufp, string1, size"..., '\n', 591) = 0x0259e5da
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 511) = 0x0259e5ff
[0x4022d1] memchr("     const char *string1, *strin"..., '\n', 474) = 0x0259e623
[0x4022d1] memchr("     int size1, size2;\n     int "..., '\n', 438) = 0x0259e63a
[0x4022d1] memchr("     int startpos;\n     int rang"..., '\n', 415) = 0x0259e64d
[0x4022d1] memchr("     int range;\n     struct re_r"..., '\n', 396) = 0x0259e65d
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 380) = 0x0259e67d
[0x4022d1] memchr("     int stop;\n{\n  int val;\n  re"..., '\n', 348) = 0x0259e68c
[0x4022d1] memchr("{\n  int val;\n  register char *fa"..., '\n', 333) = 0x0259e68e
[0x4022d1] memchr("  int val;\n  register char *fast"..., '\n', 331) = 0x0259e699
[0x4022d1] memchr("  register char *fastmap = bufp-"..., '\n', 320) = 0x0259e6c3
[0x4022d1] memchr("  register char *translate = buf"..., '\n', 278) = 0x0259e6f1
[0x4022d1] memchr("  int total_size = size1 + size2"..., '\n', 232) = 0x0259e713
[0x4022d1] memchr("  int endpos = startpos + range;"..., '\n', 198) = 0x0259e734
[0x4022d1] memchr("\n  /* Check for out-of-range STA"..., '\n', 165) = 0x0259e735
[0x4022d1] memchr("  /* Check for out-of-range STAR"..., '\n', 164) = 0x0259e75f
[0x4022d1] memchr("  if (startpos < 0 || startpos >"..., '\n', 122) = 0x0259e78c
[0x4022d1] memchr("    return -1;\n    \n  /* Fix up "..., '\n', 77) = 0x0259e79b
[0x4022d1] memchr("    \n  /* Fix up RANGE if it mig"..., '\n', 62) = 0x0259e7a0
[0x4022d1] memchr("  /* Fix up RANGE if it might ev"..., '\n', 57) = 0x0259e7d9
[0x4022d1] memchr("     the virtual concatenation o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4541:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     the virtual concatenation o"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (endpos < -1)\n    range = -"..., 'I', 30679) = 0x0259e88c
[0x40cdf3] memchr("If the search isn't to be a back"..., '\n', 30560) = 0x0259e8cc
[0x4022d1] memchr("  if (endpos < -1)\n    range = -"..., '\n', 114) = 0x0259e827
[0x4022d1] memchr("    range = -1 - startpos;\n  els"..., '\n', 95) = 0x0259e842
[0x4022d1] memchr("  else if (endpos > total_size)\n"..., '\n', 68) = 0x0259e862
[0x4022d1] memchr("    range = total_size - startpo"..., '\n', 36) = 0x0259e885
[0x4022d1] memchr("\n  /* If the search isn't to be "..., '\n', 1) = 0x0259e886
[0x4022d1] memchr("  /* If the search isn't to be a"..., '\n', 0) = NULL
[0x4023cc] fwrite("4547:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If the search isn't to be a"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     search for a pattern that m"..., 'I', 30495) = 0x0259ea9b
[0x40cdf3] memchr("If a fastmap is supplied, skip q"..., '\n', 30033) = 0x0259ead6
[0x4022d1] memchr("     search for a pattern that m"..., '\n', 453) = 0x0259e901
[0x4022d1] memchr("  if (bufp->used > 0 && (re_opco"..., '\n', 400) = 0x0259e94f
[0x4022d1] memchr("    {\n      if (startpos > 0)\n\tr"..., '\n', 322) = 0x0259e955
[0x4022d1] memchr("      if (startpos > 0)\n\treturn "..., '\n', 316) = 0x0259e96d
[0x4022d1] memchr("\treturn -1;\n      else\n\trange = "..., '\n', 292) = 0x0259e979
[0x4022d1] memchr("      else\n\trange = 1;\n    }\n\n  "..., '\n', 280) = 0x0259e984
[0x4022d1] memchr("\trange = 1;\n    }\n\n  /* Update t"..., '\n', 269) = 0x0259e990
[0x4022d1] memchr("    }\n\n  /* Update the fastmap n"..., '\n', 257) = 0x0259e996
[0x4022d1] memchr("\n  /* Update the fastmap now if "..., '\n', 251) = 0x0259e997
[0x4022d1] memchr("  /* Update the fastmap now if n"..., '\n', 250) = 0x0259e9cf
[0x4022d1] memchr("  if (fastmap && !bufp->fastmap_"..., '\n', 194) = 0x0259e9f9
[0x4022d1] memchr("    if (re_compile_fastmap (bufp"..., '\n', 152) = 0x0259ea22
[0x4022d1] memchr("      return -2;\n  \n  /* Loop th"..., '\n', 111) = 0x0259ea33
[0x4022d1] memchr("  \n  /* Loop through the string,"..., '\n', 94) = 0x0259ea36
[0x4022d1] memchr("  /* Loop through the string, lo"..., '\n', 91) = 0x0259ea7f
[0x4022d1] memchr("  for (;;)\n    { \n      /* If a "..., '\n', 18) = 0x0259ea8a
[0x4022d1] memchr("    { \n      /* If a fastmap is "..., '\n', 7) = 0x0259ea91
[0x4022d1] memchr("      /* If a fastmap is supplie"..., '\n', 0) = NULL
[0x4023cc] fwrite("4565:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If a fastmap is supplie"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("         cannot be the start of "..., 'I', 29973) = 0x0259eb01
[0x40cdf3] memchr("If the pattern can match the\n   "..., '\n', 29931) = 0x0259eb1d
[0x4022d1] memchr("         cannot be the start of "..., '\n', 0) = NULL
[0x4023cc] fwrite("4566:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("         cannot be the start of "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("         null string, however, w"..., 'I', 29902) = 0x0259f007
[0x40cdf3] memchr("If can't match the null string, "..., '\n', 28645) = 0x0259f04d
[0x4022d1] memchr("         null string, however, w"..., '\n', 1248) = 0x0259eb66
[0x4022d1] memchr("         the first null string. "..., '\n', 1175) = 0x0259eb8a
[0x4022d1] memchr("      if (fastmap && startpos < "..., '\n', 1139) = 0x0259ebcc
[0x4022d1] memchr("\t{\n\t  if (range > 0)\t/* Searchin"..., '\n', 1073) = 0x0259ebcf
[0x4022d1] memchr("\t  if (range > 0)\t/* Searching f"..., '\n', 1070) = 0x0259ebfc
[0x4022d1] memchr("\t    {\n\t      register const cha"..., '\n', 1025) = 0x0259ec03
[0x4022d1] memchr("\t      register const char *d;\n\t"..., '\n', 1018) = 0x0259ec22
[0x4022d1] memchr("\t      register int lim = 0;\n\t  "..., '\n', 987) = 0x0259ec3f
[0x4022d1] memchr("\t      int irange = range;\n\n    "..., '\n', 958) = 0x0259ec5a
[0x4022d1] memchr("\n              if (startpos < si"..., '\n', 931) = 0x0259ec5b
[0x4022d1] memchr("              if (startpos < siz"..., '\n', 930) = 0x0259ec9c
[0x4022d1] memchr("                lim = range - (s"..., '\n', 865) = 0x0259ecce
[0x4022d1] memchr("\n\t      d = (startpos >= size1 ?"..., '\n', 815) = 0x0259eccf
[0x4022d1] memchr("\t      d = (startpos >= size1 ? "..., '\n', 814) = 0x0259ed16
[0x4022d1] memchr("   \n              /* Written out"..., '\n', 743) = 0x0259ed1a
[0x4022d1] memchr("              /* Written out as "..., '\n', 739) = 0x0259ed62
[0x4022d1] memchr("                 inside the loop"..., '\n', 667) = 0x0259ed88
[0x4022d1] memchr("\t      if (translate)\n          "..., '\n', 629) = 0x0259ed9e
[0x4022d1] memchr("                while (range > l"..., '\n', 607) = 0x0259edc1
[0x4022d1] memchr("                       && !fastm"..., '\n', 572) = 0x0259edf4
[0x4022d1] memchr("\t\t\t\t   translate[(unsigned char)"..., '\n', 521) = 0x0259ee1d
[0x4022d1] memchr("                  range--;\n\t    "..., '\n', 480) = 0x0259ee38
[0x4022d1] memchr("\t      else\n                whil"..., '\n', 453) = 0x0259ee44
[0x4022d1] memchr("                while (range > l"..., '\n', 441) = 0x0259ee8a
[0x4022d1] memchr("                  range--;\n\n\t   "..., '\n', 371) = 0x0259eea5
[0x4022d1] memchr("\n\t      startpos += irange - ran"..., '\n', 344) = 0x0259eea6
[0x4022d1] memchr("\t      startpos += irange - rang"..., '\n', 343) = 0x0259eec9
[0x4022d1] memchr("\t    }\n\t  else\t\t\t\t/* Searching b"..., '\n', 308) = 0x0259eed0
[0x4022d1] memchr("\t  else\t\t\t\t/* Searching backward"..., '\n', 301) = 0x0259eef7
[0x4022d1] memchr("\t    {\n\t      register char c = "..., '\n', 262) = 0x0259eefe
[0x4022d1] memchr("\t      register char c = (size1 "..., '\n', 255) = 0x0259ef38
[0x4022d1] memchr("                                "..., '\n', 197) = 0x0259ef76
[0x4022d1] memchr("                                "..., '\n', 135) = 0x0259efad
[0x4022d1] memchr("\n\t      if (!fastmap[(unsigned c"..., '\n', 80) = 0x0259efae
[0x4022d1] memchr("\t      if (!fastmap[(unsigned ch"..., '\n', 79) = 0x0259efe2
[0x4022d1] memchr("\t\tgoto advance;\n\t    }\n\t}\n\n     "..., '\n', 27) = 0x0259eff2
[0x4022d1] memchr("\t    }\n\t}\n\n      /* If can't mat"..., '\n', 11) = 0x0259eff9
[0x4022d1] memchr("\t}\n\n      /* If can't match the "..., '\n', 4) = 0x0259effc
[0x4022d1] memchr("\n      /* If can't match the nul"..., '\n', 1) = 0x0259effd
[0x4022d1] memchr("      /* If can't match the null"..., '\n', 0) = NULL
[0x4023cc] fwrite("4606:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If can't match the null"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (range >= 0 && startpos"..., 'I', 28574) = 0x0259f625
[0x40cdf3] memchr("If not yet determined,  `MATCH_N"..., '\n', 27079) = 0x0259f65a
[0x4022d1] memchr("      if (range >= 0 && startpos"..., '\n', 1472) = 0x0259f087
[0x4022d1] memchr("          && !bufp->can_be_null)"..., '\n', 1414) = 0x0259f0a8
[0x4022d1] memchr("\treturn -1;\n\n      val = re_matc"..., '\n', 1381) = 0x0259f0b4
[0x4022d1] memchr("\n      val = re_match_2 (bufp, s"..., '\n', 1369) = 0x0259f0b5
[0x4022d1] memchr("      val = re_match_2 (bufp, st"..., '\n', 1368) = 0x0259f0f3
[0x4022d1] memchr("\t                startpos, regs,"..., '\n', 1306) = 0x0259f11b
[0x4022d1] memchr("      if (val >= 0)\n\treturn star"..., '\n', 1266) = 0x0259f12f
[0x4022d1] memchr("\treturn startpos;\n        \n     "..., '\n', 1246) = 0x0259f141
[0x4022d1] memchr("        \n      if (val == -2)\n\tr"..., '\n', 1228) = 0x0259f14a
[0x4022d1] memchr("      if (val == -2)\n\treturn -2;"..., '\n', 1219) = 0x0259f15f
[0x4022d1] memchr("\treturn -2;\n\n    advance:\n      "..., '\n', 1198) = 0x0259f16b
[0x4022d1] memchr("\n    advance:\n      if (!range) "..., '\n', 1186) = 0x0259f16c
[0x4022d1] memchr("    advance:\n      if (!range) \n"..., '\n', 1185) = 0x0259f179
[0x4022d1] memchr("      if (!range) \n        break"..., '\n', 1172) = 0x0259f18c
[0x4022d1] memchr("        break;\n      else if (ra"..., '\n', 1153) = 0x0259f19b
[0x4022d1] memchr("      else if (range > 0) \n     "..., '\n', 1138) = 0x0259f1b6
[0x4022d1] memchr("        {\n          range--; \n  "..., '\n', 1111) = 0x0259f1c0
[0x4022d1] memchr("          range--; \n          st"..., '\n', 1101) = 0x0259f1d4
[0x4022d1] memchr("          startpos++;\n        }\n"..., '\n', 1081) = 0x0259f1ea
[0x4022d1] memchr("        }\n      else\n        {\n "..., '\n', 1059) = 0x0259f1f4
[0x4022d1] memchr("      else\n        {\n          r"..., '\n', 1049) = 0x0259f1ff
[0x4022d1] memchr("        {\n          range++; \n  "..., '\n', 1038) = 0x0259f209
[0x4022d1] memchr("          range++; \n          st"..., '\n', 1028) = 0x0259f21d
[0x4022d1] memchr("          startpos--;\n        }\n"..., '\n', 1008) = 0x0259f233
[0x4022d1] memchr("        }\n    }\n  return -1;\n} /"..., '\n', 986) = 0x0259f23d
[0x4022d1] memchr("    }\n  return -1;\n} /* re_searc"..., '\n', 976) = 0x0259f243
[0x4022d1] memchr("  return -1;\n} /* re_search_2 */"..., '\n', 970) = 0x0259f250
[0x4022d1] memchr("} /* re_search_2 */\n\014\n/* Declara"..., '\n', 957) = 0x0259f264
[0x4022d1] memchr("\014\n/* Declarations and macros for"..., '\n', 937) = 0x0259f266
[0x4022d1] memchr("/* Declarations and macros for r"..., '\n', 935) = 0x0259f295
[0x4022d1] memchr("\nstatic int bcmp_translate ();\ns"..., '\n', 888) = 0x0259f296
[0x4022d1] memchr("static int bcmp_translate ();\nst"..., '\n', 887) = 0x0259f2b4
[0x4022d1] memchr("static boolean alt_match_null_st"..., '\n', 857) = 0x0259f2df
[0x4022d1] memchr("               common_op_match_n"..., '\n', 814) = 0x0259f310
[0x4022d1] memchr("               group_match_null_"..., '\n', 765) = 0x0259f33d
[0x4022d1] memchr("\n/* Structure for per-register ("..., '\n', 720) = 0x0259f33e
[0x4022d1] memchr("/* Structure for per-register (a"..., '\n', 719) = 0x0259f37c
[0x4022d1] memchr("   This must not be longer than "..., '\n', 657) = 0x0259f3c1
[0x4022d1] memchr("   onto the failure stack.  Othe"..., '\n', 588) = 0x0259f405
[0x4022d1] memchr("   starting and ending positions"..., '\n', 520) = 0x0259f44d
[0x4022d1] memchr("   inner groups (which is a bits"..., '\n', 448) = 0x0259f48f
[0x4022d1] memchr("   variables.  \n   \n   We are ma"..., '\n', 382) = 0x0259f49f
[0x4022d1] memchr("   \n   We are making a (strictly"..., '\n', 366) = 0x0259f4a3
[0x4022d1] memchr("   We are making a (strictly spe"..., '\n', 362) = 0x0259f4ec
[0x4022d1] memchr("   the compiler will pack our bi"..., '\n', 289) = 0x0259f533
[0x4022d1] memchr("   the type of `word', i.e., is "..., '\n', 218) = 0x0259f57c
[0x4022d1] memchr("   failure stack.  */\ntypedef un"..., '\n', 145) = 0x0259f592
[0x4022d1] memchr("typedef union\n{\n  fail_stack_elt"..., '\n', 123) = 0x0259f5a0
[0x4022d1] memchr("{\n  fail_stack_elt_t word;\n  str"..., '\n', 109) = 0x0259f5a2
[0x4022d1] memchr("  fail_stack_elt_t word;\n  struc"..., '\n', 107) = 0x0259f5bb
[0x4022d1] memchr("  struct\n  {\n      /* This field"..., '\n', 82) = 0x0259f5c4
[0x4022d1] memchr("  {\n      /* This field is one i"..., '\n', 73) = 0x0259f5c8
[0x4022d1] memchr("      /* This field is one if th"..., '\n', 69) = 0x0259f60d
[0x4022d1] memchr("         zero if not.  If not ye"..., '\n', 0) = NULL
[0x4023cc] fwrite("4660:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("         zero if not.  If not ye"..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define MATCH_NULL_UNSET_VALUE 3"..., 'I', 27025) = 0x0259f746
[0x40cdf3] memchr("ING_P(R)  ((R).bits.match_null_s"..., '\n', 26790) = 0x0259f76e
[0x4022d1] memchr("#define MATCH_NULL_UNSET_VALUE 3"..., '\n', 209) = 0x0259f67b
[0x4022d1] memchr("    unsigned match_null_string_p"..., '\n', 176) = 0x0259f6a1
[0x4022d1] memchr("    unsigned is_active : 1;\n    "..., '\n', 138) = 0x0259f6bd
[0x4022d1] memchr("    unsigned matched_something :"..., '\n', 110) = 0x0259f6e1
[0x4022d1] memchr("    unsigned ever_matched_someth"..., '\n', 74) = 0x0259f70a
[0x4022d1] memchr("  } bits;\n} register_info_type;\n"..., '\n', 33) = 0x0259f714
[0x4022d1] memchr("} register_info_type;\n\n#define R"..., '\n', 23) = 0x0259f72a
[0x4022d1] memchr("\n#define REG_MATCH_NULL_STRING_P"..., '\n', 1) = 0x0259f72b
[0x4022d1] memchr("#define REG_MATCH_NULL_STRING_P("..., '\n', 0) = NULL
[0x4023cc] fwrite("4669:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define REG_MATCH_NULL_STRING_P("..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define IS_ACTIVE(R)  ((R).bits."..., 'I', 26749) = 0x0259f777
[0x40cdf3] memchr("IS_ACTIVE(R)  ((R).bits.is_activ"..., '\n', 26741) = 0x0259f799
[0x4022d1] memchr("#define IS_ACTIVE(R)  ((R).bits."..., '\n', 0) = NULL
[0x4023cc] fwrite("4670:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define IS_ACTIVE(R)  ((R).bits."..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define MATCHED_SOMETHING(R)  (("..., 'I', 26706) = 0x0259f7b0
[0x40cdf3] memchr("ING(R)  ((R).bits.matched_someth"..., '\n', 26684) = 0x0259f7d4
[0x4022d1] memchr("#define MATCHED_SOMETHING(R)  (("..., '\n', 0) = NULL
[0x4023cc] fwrite("4671:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define MATCHED_SOMETHING(R)  (("..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define EVER_MATCHED_SOMETHING(R"..., 'I', 26647) = 0x0259f7f0
[0x40cdf3] memchr("ING(R)  ((R).bits.ever_matched_s"..., '\n', 26620) = 0x0259f819
[0x4022d1] memchr("#define EVER_MATCHED_SOMETHING(R"..., '\n', 0) = NULL
[0x4023cc] fwrite("4672:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define EVER_MATCHED_SOMETHING(R"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Call this when have matched"..., 'I', 26578) = 0x0259f99e
[0x40cdf3] memchr("ING (reg_info[r])\t\t\t\t\\\n         "..., '\n', 26190) = 0x0259f9b4
[0x4022d1] memchr("\n\n/* Call this when have matched"..., '\n', 364) = 0x0259f81a
[0x4022d1] memchr("\n/* Call this when have matched "..., '\n', 363) = 0x0259f81b
[0x4022d1] memchr("/* Call this when have matched a"..., '\n', 362) = 0x0259f864
[0x4022d1] memchr("   for the subexpressions which "..., '\n', 289) = 0x0259f8ab
[0x4022d1] memchr("   that those subexprs have matc"..., '\n', 218) = 0x0259f8d4
[0x4022d1] memchr("#define SET_REGS_MATCHED()\t\t\t\t\t\t"..., '\n', 177) = 0x0259f8f6
[0x4022d1] memchr("  do\t\t\t\t\t\t\t\t\t\\\n    {\t\t\t\t\t\t\t\t\t\\\n "..., '\n', 143) = 0x0259f905
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      unsigned r"..., '\n', 128) = 0x0259f915
[0x4022d1] memchr("      unsigned r;\t\t\t\t\t\t\t\\\n      "..., '\n', 112) = 0x0259f92f
[0x4022d1] memchr("      for (r = lowest_active_reg"..., '\n', 86) = 0x0259f972
[0x4022d1] memchr("        {\t\t\t\t\t\t\t\t\\\n          MAT"..., '\n', 19) = 0x0259f985
[0x4022d1] memchr("          MATCHED_SOMETHING (reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("4684:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          MATCHED_SOMETHING (reg"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            = EVER_MATCHED_SOMET"..., 'I', 26167) = 0x0259f9d6
[0x40cdf3] memchr("ING (reg_info[r])\t\t\t\\\n          "..., '\n', 26134) = 0x0259f9eb
[0x4022d1] memchr("            = EVER_MATCHED_SOMET"..., '\n', 0) = NULL
[0x4023cc] fwrite("4685:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            = EVER_MATCHED_SOMET"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            = 1;\t\t\t\t\t\t\t\\\n       "..., 'I', 26112) = 0x0259fad0
[0x40cdf3] memchr("INTER_TO_OFFSET(ptr)\t\t\t\t\t\t\\\n  (F"..., '\n', 25884) = 0x0259faeb
[0x4022d1] memchr("            = 1;\t\t\t\t\t\t\t\\\n       "..., '\n', 218) = 0x0259fa04
[0x4022d1] memchr("        }\t\t\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t"..., '\n', 193) = 0x0259fa17
[0x4022d1] memchr("    }\t\t\t\t\t\t\t\t\t\\\n  while (0)\n\n\n/*"..., '\n', 174) = 0x0259fa27
[0x4022d1] memchr("  while (0)\n\n\n/* This converts P"..., '\n', 158) = 0x0259fa33
[0x4022d1] memchr("\n\n/* This converts PTR, a pointe"..., '\n', 146) = 0x0259fa34
[0x4022d1] memchr("\n/* This converts PTR, a pointer"..., '\n', 145) = 0x0259fa35
[0x4022d1] memchr("/* This converts PTR, a pointer "..., '\n', 144) = 0x0259fa7e
[0x4022d1] memchr("   and `string2' into an offset "..., '\n', 71) = 0x0259fac5
[0x4022d1] memchr("#define POINTER_TO_OFFSET(ptr)\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("4694:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define POINTER_TO_OFFSET(ptr)\t\t"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  (FIRST_STRING_P (ptr) ? (ptr) "..., 'I', 25856) = 0x0259faf0
[0x40cdf3] memchr("IRST_STRING_P (ptr) ? (ptr) - st"..., '\n', 25852) = 0x0259fb30
[0x4022d1] memchr("  (FIRST_STRING_P (ptr) ? (ptr) "..., '\n', 0) = NULL
[0x4023cc] fwrite("4695:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  (FIRST_STRING_P (ptr) ? (ptr) "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Registers are set to a senti"..., 'I', 25787) = 0x0259fc1c
[0x40cdf3] memchr("ING_IN_FIRST_STRING  (dend == en"..., '\n', 25552) = 0x0259fc46
[0x4022d1] memchr("\n/* Registers are set to a senti"..., '\n', 222) = 0x0259fb31
[0x4022d1] memchr("/* Registers are set to a sentin"..., '\n', 221) = 0x0259fb77
[0x4022d1] memchr("#define REG_UNSET_VALUE ((char *"..., '\n', 151) = 0x0259fb9d
[0x4022d1] memchr("#define REG_UNSET(e) ((e) == REG"..., '\n', 113) = 0x0259fbcb
[0x4022d1] memchr("\n\n/* Macros for dealing with the"..., '\n', 67) = 0x0259fbcc
[0x4022d1] memchr("\n/* Macros for dealing with the "..., '\n', 66) = 0x0259fbcd
[0x4022d1] memchr("/* Macros for dealing with the s"..., '\n', 65) = 0x0259fc0d
[0x4022d1] memchr("\n#define MATCHING_IN_FIRST_STRIN"..., '\n', 1) = 0x0259fc0e
[0x4022d1] memchr("#define MATCHING_IN_FIRST_STRING"..., '\n', 0) = NULL
[0x4023cc] fwrite("4704:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define MATCHING_IN_FIRST_STRING"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Call before fetching a chara"..., 'I', 25509) = 0x0259fe4d
[0x40cdf3] memchr("If only one string, it's `string"..., '\n', 24991) = 0x0259fe74
[0x4022d1] memchr("\n/* Call before fetching a chara"..., '\n', 486) = 0x0259fc47
[0x4022d1] memchr("/* Call before fetching a charac"..., '\n', 485) = 0x0259fc8b
[0x4022d1] memchr("   string2 if necessary.  */\n#de"..., '\n', 417) = 0x0259fca8
[0x4022d1] memchr("#define PREFETCH()\t\t\t\t\t\t\t\\\n  whi"..., '\n', 388) = 0x0259fcc3
[0x4022d1] memchr("  while (d == dend)\t\t\t\t\t\t    \t\\\n"..., '\n', 361) = 0x0259fce3
[0x4022d1] memchr("    {\t\t\t\t\t\t\t\t\t\\\n      /* End of "..., '\n', 329) = 0x0259fcf3
[0x4022d1] memchr("      /* End of string2 => fail."..., '\n', 313) = 0x0259fd1e
[0x4022d1] memchr("      if (dend == end_match_2) \t"..., '\n', 270) = 0x0259fd45
[0x4022d1] memchr("        goto fail;\t\t\t\t\t\t\t\\\n     "..., '\n', 231) = 0x0259fd60
[0x4022d1] memchr("      /* End of string1 => advan"..., '\n', 204) = 0x0259fd98
[0x4022d1] memchr("      d = string2;\t\t\t\t\t\t        "..., '\n', 148) = 0x0259fdba
[0x4022d1] memchr("      dend = end_match_2;\t\t\t\t\t\t\\"..., '\n', 114) = 0x0259fddb
[0x4022d1] memchr("    }\n\n\n/* Test if at very begin"..., '\n', 81) = 0x0259fde1
[0x4022d1] memchr("\n\n/* Test if at very beginning o"..., '\n', 75) = 0x0259fde2
[0x4022d1] memchr("\n/* Test if at very beginning or"..., '\n', 74) = 0x0259fde3
[0x4022d1] memchr("/* Test if at very beginning or "..., '\n', 73) = 0x0259fe2c
[0x4022d1] memchr("   of `string1' and `string2'.  "..., '\n', 0) = NULL
[0x4023cc] fwrite("4721:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   of `string1' and `string2'.  "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define AT_STRINGS_BEG(d) ((d) ="..., 'I', 24951) = 0x0259fe83
[0x40cdf3] memchr("INGS_BEG(d) ((d) == (size1 ? str"..., '\n', 24937) = 0x0259febd
[0x4022d1] memchr("#define AT_STRINGS_BEG(d) ((d) ="..., '\n', 0) = NULL
[0x4023cc] fwrite("4722:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define AT_STRINGS_BEG(d) ((d) ="..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define AT_STRINGS_END(d) ((d) ="..., 'I', 24878) = 0x0259fecc
[0x40cdf3] memchr("INGS_END(d) ((d) == end2)\t\n\n\n/* "..., '\n', 24864) = 0x0259fee6
[0x4022d1] memchr("#define AT_STRINGS_END(d) ((d) ="..., '\n', 0) = NULL
[0x4023cc] fwrite("4723:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define AT_STRINGS_END(d) ((d) ="..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n/* Test if D points to a chara"..., 'I', 24837) = 0x025a0113
[0x40cdf3] memchr("INGS_BEG (d) || AT_STRINGS_END ("..., '\n', 24281) = 0x025a013a
[0x4022d1] memchr("\n\n/* Test if D points to a chara"..., '\n', 547) = 0x0259fee7
[0x4022d1] memchr("\n/* Test if D points to a charac"..., '\n', 546) = 0x0259fee8
[0x4022d1] memchr("/* Test if D points to a charact"..., '\n', 545) = 0x0259ff2f
[0x4022d1] memchr("   two special cases to check fo"..., '\n', 474) = 0x0259ff76
[0x4022d1] memchr("   the first character in string"..., '\n', 403) = 0x0259ffb8
[0x4022d1] memchr("   string2, look at the last cha"..., '\n', 337) = 0x0259ffef
[0x4022d1] memchr("#define WORDCHAR_P(d)\t\t\t\t\t\t\t\\\n  "..., '\n', 282) = 0x025a000d
[0x4022d1] memchr("  (SYNTAX ((d) == end1 ? *string"..., '\n', 252) = 0x025a0035
[0x4022d1] memchr("           : (d) == string2 - 1 "..., '\n', 212) = 0x025a006f
[0x4022d1] memchr("   == Sword)\n\n/* Test if the cha"..., '\n', 154) = 0x025a007c
[0x4022d1] memchr("\n/* Test if the character before"..., '\n', 141) = 0x025a007d
[0x4022d1] memchr("/* Test if the character before "..., '\n', 140) = 0x025a00c4
[0x4022d1] memchr("   to being word-constituent.  *"..., '\n', 69) = 0x025a00e6
[0x4022d1] memchr("#define AT_WORD_BOUNDARY(d)\t\t\t\t\t"..., '\n', 35) = 0x025a0109
[0x4022d1] memchr("  (AT_STRINGS_BEG (d) || AT_STRI"..., '\n', 0) = NULL
[0x4023cc] fwrite("4738:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  (AT_STRINGS_BEG (d) || AT_STRI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   || WORDCHAR_P (d - 1) != WORD"..., 'I', 24241) = 0x025a01e5
[0x40cdf3] memchr("IABLES()\t\t\t\t\t\t\\\n  do {\t\t\t\t\t\t\t\t\t\\"..., '\n', 24071) = 0x025a01f4
[0x4022d1] memchr("   || WORDCHAR_P (d - 1) != WORD"..., '\n', 154) = 0x025a0166
[0x4022d1] memchr("\n\n/* Free everything we malloc. "..., '\n', 110) = 0x025a0167
[0x4022d1] memchr("\n/* Free everything we malloc.  "..., '\n', 109) = 0x025a0168
[0x4022d1] memchr("/* Free everything we malloc.  *"..., '\n', 108) = 0x025a018a
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n#define FREE"..., '\n', 74) = 0x025a019e
[0x4022d1] memchr("#define FREE_VAR(var) if (var) f"..., '\n', 54) = 0x025a01d4
[0x4022d1] memchr("#define FREE_VARIABLES()\t\t\t\t\t\t\\\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("4745:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FREE_VARIABLES()\t\t\t\t\t\t\\\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    FREE_VAR (f"..., 'I', 24055) = 0x025a0395
[0x40cdf3] memchr("IPS systems (at least) want this"..., '\n', 23639) = 0x025a03d3
[0x4022d1] memchr("  do {\t\t\t\t\t\t\t\t\t\\\n    FREE_VAR (f"..., '\n', 407) = 0x025a0205
[0x4022d1] memchr("    FREE_VAR (fail_stack.stack);"..., '\n', 390) = 0x025a022c
[0x4022d1] memchr("    FREE_VAR (regstart);\t\t\t\t\t\t\\\n"..., '\n', 351) = 0x025a024c
[0x4022d1] memchr("    FREE_VAR (regend);\t\t\t\t\t\t\t\\\n "..., '\n', 319) = 0x025a026b
[0x4022d1] memchr("    FREE_VAR (old_regstart);\t\t\t\t"..., '\n', 288) = 0x025a028f
[0x4022d1] memchr("    FREE_VAR (old_regend);\t\t\t\t\t\t"..., '\n', 252) = 0x025a02b1
[0x4022d1] memchr("    FREE_VAR (best_regstart);\t\t\t"..., '\n', 218) = 0x025a02d6
[0x4022d1] memchr("    FREE_VAR (best_regend);\t\t\t\t\t"..., '\n', 181) = 0x025a02f9
[0x4022d1] memchr("    FREE_VAR (reg_info);\t\t\t\t\t\t\\\n"..., '\n', 146) = 0x025a0319
[0x4022d1] memchr("    FREE_VAR (reg_dummy);\t\t\t\t\t\t\\"..., '\n', 114) = 0x025a033a
[0x4022d1] memchr("    FREE_VAR (reg_info_dummy);\t\t"..., '\n', 81) = 0x025a0360
[0x4022d1] memchr("  } while (0)\n#else /* not REGEX"..., '\n', 43) = 0x025a036e
[0x4022d1] memchr("#else /* not REGEX_MALLOC */\n/* "..., '\n', 29) = 0x025a038b
[0x4022d1] memchr("/* Some MIPS systems (at least) "..., '\n', 0) = NULL
[0x4023cc] fwrite("4759:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Some MIPS systems (at least) "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define FREE_VARIABLES() alloca "..., 'I', 23576) = 0x025a03e4
[0x40cdf3] memchr("IABLES() alloca (0)\n#endif /* no"..., '\n', 23560) = 0x025a03f7
[0x4022d1] memchr("#define FREE_VARIABLES() alloca "..., '\n', 0) = NULL
[0x4023cc] fwrite("4760:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define FREE_VARIABLES() alloca "..., 1, 36, 0x7f498147f260) = 36
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif /* not REGEX_MALLOC */\n\n\n"..., 'I', 23540) = 0x025a0537
[0x40cdf3] memchr("ILURE_ITEMS above.  And the valu"..., '\n', 23221) = 0x025a0575
[0x4022d1] memchr("#endif /* not REGEX_MALLOC */\n\n\n"..., '\n', 310) = 0x025a0415
[0x4022d1] memchr("\n\n/* These values must meet seve"..., '\n', 280) = 0x025a0416
[0x4022d1] memchr("\n/* These values must meet sever"..., '\n', 279) = 0x025a0417
[0x4022d1] memchr("/* These values must meet severa"..., '\n', 278) = 0x025a045e
[0x4022d1] memchr("   register values; since we hav"..., '\n', 207) = 0x025a04a2
[0x4022d1] memchr("   we use only one byte in the p"..., '\n', 139) = 0x025a04ea
[0x4022d1] memchr("   use numbers larger than 255. "..., '\n', 67) = 0x025a052d
[0x4022d1] memchr("   NUM_FAILURE_ITEMS above.  And"..., '\n', 0) = NULL
[0x4023cc] fwrite("4768:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   NUM_FAILURE_ITEMS above.  And"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   be larger than the value for "..., 'I', 23158) = 0x025a0605
[0x40cdf3] memchr("IGHEST_ACTIVE_REG (1 << BYTEWIDT"..., '\n', 23015) = 0x025a0627
[0x4022d1] memchr("   be larger than the value for "..., '\n', 131) = 0x025a05bc
[0x4022d1] memchr("   to actually save any register"..., '\n', 60) = 0x025a05f8
[0x4022d1] memchr("#define NO_HIGHEST_ACTIVE_REG (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("4771:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NO_HIGHEST_ACTIVE_REG (1"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define NO_LOWEST_ACTIVE_REG (NO"..., 'I', 22980) = 0x025a063d
[0x40cdf3] memchr("IVE_REG (NO_HIGHEST_ACTIVE_REG +"..., '\n', 22959) = 0x025a0660
[0x4022d1] memchr("#define NO_LOWEST_ACTIVE_REG (NO"..., '\n', 0) = NULL
[0x4023cc] fwrite("4772:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define NO_LOWEST_ACTIVE_REG (NO"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\014\n/* Matching routines.  */\n\n#if"..., 'I', 22923) = 0x025a085c
[0x40cdf3] memchr("ING1 and STRING2 (of length SIZE"..., '\n', 22416) = 0x025a087d
[0x4022d1] memchr("\014\n/* Matching routines.  */\n\n#if"..., '\n', 470) = 0x025a0662
[0x4022d1] memchr("/* Matching routines.  */\n\n#ifnd"..., '\n', 468) = 0x025a067c
[0x4022d1] memchr("\n#ifndef emacs   /* Emacs never "..., '\n', 442) = 0x025a067d
[0x4022d1] memchr("#ifndef emacs   /* Emacs never u"..., '\n', 441) = 0x025a06ab
[0x4022d1] memchr("/* re_match is like re_match_2 e"..., '\n', 395) = 0x025a06f4
[0x4022d1] memchr("\nint\nre_match (bufp, string, siz"..., '\n', 322) = 0x025a06f5
[0x4022d1] memchr("int\nre_match (bufp, string, size"..., '\n', 321) = 0x025a06f9
[0x4022d1] memchr("re_match (bufp, string, size, po"..., '\n', 317) = 0x025a0722
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 276) = 0x025a0747
[0x4022d1] memchr("     const char *string;\n     in"..., '\n', 239) = 0x025a0760
[0x4022d1] memchr("     int size, pos;\n     struct "..., '\n', 214) = 0x025a0774
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 194) = 0x025a0794
[0x4022d1] memchr(" {\n  return re_match_2 (bufp, NU"..., '\n', 162) = 0x025a0797
[0x4022d1] memchr("  return re_match_2 (bufp, NULL,"..., '\n', 159) = 0x025a07dc
[0x4022d1] memchr("}\n#endif /* not emacs */\n\n\n/* re"..., '\n', 90) = 0x025a07de
[0x4022d1] memchr("#endif /* not emacs */\n\n\n/* re_m"..., '\n', 88) = 0x025a07f5
[0x4022d1] memchr("\n\n/* re_match_2 matches the comp"..., '\n', 65) = 0x025a07f6
[0x4022d1] memchr("\n/* re_match_2 matches the compi"..., '\n', 64) = 0x025a07f7
[0x4022d1] memchr("/* re_match_2 matches the compil"..., '\n', 63) = 0x025a0836
[0x4022d1] memchr("   the (virtual) concatenation o"..., '\n', 0) = NULL
[0x4023cc] fwrite("4792:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   the (virtual) concatenation o"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   and SIZE2, respectively).  We"..., 'I', 22382) = 0x025a0886
[0x40cdf3] memchr("IZE2, respectively).  We start m"..., '\n', 22374) = 0x025a08be
[0x4022d1] memchr("   and SIZE2, respectively).  We"..., '\n', 0) = NULL
[0x4023cc] fwrite("4793:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   and SIZE2, respectively).  We"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   matching at STOP.\n   \n   If R"..., 'I', 22317) = 0x025a08db
[0x40cdf3] memchr("If REGS is non-null and the `no_"..., '\n', 22289) = 0x025a091c
[0x4022d1] memchr("   matching at STOP.\n   \n   If R"..., '\n', 25) = 0x025a08d3
[0x4022d1] memchr("   \n   If REGS is non-null and t"..., '\n', 4) = 0x025a08d7
[0x4022d1] memchr("   If REGS is non-null and the `"..., '\n', 0) = NULL
[0x4023cc] fwrite("4796:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If REGS is non-null and the `"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   store offsets for the substri"..., 'I', 22223) = 0x025a0e2c
[0x40cdf3] memchr("It consists of\n     restart, reg"..., '\n', 20928) = 0x025a0e3a
[0x4022d1] memchr("   store offsets for the substri"..., '\n', 1237) = 0x025a0964
[0x4022d1] memchr("   documentation for exactly how"..., '\n', 1165) = 0x025a099a
[0x4022d1] memchr("\n   We return -1 if no match, -2"..., '\n', 1111) = 0x025a099b
[0x4022d1] memchr("   We return -1 if no match, -2 "..., '\n', 1110) = 0x025a09dd
[0x4022d1] memchr("   failure stack overflowing).  "..., '\n', 1044) = 0x025a0a24
[0x4022d1] memchr("   matched substring.  */\n\nint\nr"..., '\n', 973) = 0x025a0a3e
[0x4022d1] memchr("\nint\nre_match_2 (bufp, string1, "..., '\n', 947) = 0x025a0a3f
[0x4022d1] memchr("int\nre_match_2 (bufp, string1, s"..., '\n', 946) = 0x025a0a43
[0x4022d1] memchr("re_match_2 (bufp, string1, size1"..., '\n', 942) = 0x025a0a86
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 875) = 0x025a0aab
[0x4022d1] memchr("     const char *string1, *strin"..., '\n', 838) = 0x025a0acf
[0x4022d1] memchr("     int size1, size2;\n     int "..., '\n', 802) = 0x025a0ae6
[0x4022d1] memchr("     int pos;\n     struct re_reg"..., '\n', 779) = 0x025a0af4
[0x4022d1] memchr("     struct re_registers *regs;\n"..., '\n', 765) = 0x025a0b14
[0x4022d1] memchr("     int stop;\n{\n  /* General te"..., '\n', 733) = 0x025a0b23
[0x4022d1] memchr("{\n  /* General temporaries.  */\n"..., '\n', 718) = 0x025a0b25
[0x4022d1] memchr("  /* General temporaries.  */\n  "..., '\n', 716) = 0x025a0b43
[0x4022d1] memchr("  int mcnt;\n  unsigned char *p1;"..., '\n', 686) = 0x025a0b4f
[0x4022d1] memchr("  unsigned char *p1;\n\n  /* Just "..., '\n', 674) = 0x025a0b64
[0x4022d1] memchr("\n  /* Just past the end of the c"..., '\n', 653) = 0x025a0b65
[0x4022d1] memchr("  /* Just past the end of the co"..., '\n', 652) = 0x025a0b9d
[0x4022d1] memchr("  const char *end1, *end2;\n\n  /*"..., '\n', 596) = 0x025a0bb8
[0x4022d1] memchr("\n  /* Pointers into string1 and "..., '\n', 569) = 0x025a0bb9
[0x4022d1] memchr("  /* Pointers into string1 and s"..., '\n', 568) = 0x025a0c02
[0x4022d1] memchr("     each to consider matching. "..., '\n', 495) = 0x025a0c26
[0x4022d1] memchr("  const char *end_match_1, *end_"..., '\n', 459) = 0x025a0c4f
[0x4022d1] memchr("\n  /* Where we are in the data, "..., '\n', 418) = 0x025a0c50
[0x4022d1] memchr("  /* Where we are in the data, a"..., '\n', 417) = 0x025a0c96
[0x4022d1] memchr("  const char *d, *dend;\n  \n  /* "..., '\n', 347) = 0x025a0cae
[0x4022d1] memchr("  \n  /* Where we are in the patt"..., '\n', 323) = 0x025a0cb1
[0x4022d1] memchr("  /* Where we are in the pattern"..., '\n', 320) = 0x025a0cf3
[0x4022d1] memchr("  unsigned char *p = bufp->buffe"..., '\n', 254) = 0x025a0d16
[0x4022d1] memchr("  register unsigned char *pend ="..., '\n', 219) = 0x025a0d47
[0x4022d1] memchr("\n  /* We use this to map every c"..., '\n', 170) = 0x025a0d48
[0x4022d1] memchr("  /* We use this to map every ch"..., '\n', 169) = 0x025a0d83
[0x4022d1] memchr("  char *translate = bufp->transl"..., '\n', 110) = 0x025a0da8
[0x4022d1] memchr("\n  /* Failure point stack.  Each"..., '\n', 73) = 0x025a0da9
[0x4022d1] memchr("  /* Failure point stack.  Each "..., '\n', 72) = 0x025a0df1
[0x4022d1] memchr("     down the line pushes a fail"..., '\n', 0) = NULL
[0x4023cc] fwrite("4835:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     down the line pushes a fail"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     restart, regend, and reg_in"..., 'I', 20913) = 0x025a0f73
[0x40cdf3] memchr("If the latter is zero, the failu"..., '\n', 20601) = 0x025a0f9e
[0x4022d1] memchr("     restart, regend, and reg_in"..., '\n', 284) = 0x025a0e80
[0x4022d1] memchr("     the subexpressions we're cu"..., '\n', 214) = 0x025a0ec8
[0x4022d1] memchr("     registers, and, finally, tw"..., '\n', 142) = 0x025a0f0f
[0x4022d1] memchr("     to resume scanning the patt"..., '\n', 71) = 0x025a0f56
[0x4022d1] memchr("     scanning the strings.  If t"..., '\n', 0) = NULL
[0x4023cc] fwrite("4840:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     scanning the strings.  If t"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     a ``dummy''; if a failure h"..., 'I', 20557) = 0x025a11e7
[0x40cdf3] memchr("IVE_REG;\n  unsigned highest_acti"..., '\n', 19973) = 0x025a11ef
[0x4022d1] memchr("     a ``dummy''; if a failure h"..., '\n', 540) = 0x025a0fe7
[0x4022d1] memchr("     it gets discarded and the n"..., '\n', 467) = 0x025a1022
[0x4022d1] memchr("  fail_stack_type fail_stack;\n#i"..., '\n', 408) = 0x025a1040
[0x4022d1] memchr("#ifdef DEBUG\n  static unsigned f"..., '\n', 378) = 0x025a104d
[0x4022d1] memchr("  static unsigned failure_id = 0"..., '\n', 365) = 0x025a106f
[0x4022d1] memchr("  unsigned nfailure_points_pushe"..., '\n', 331) = 0x025a10b2
[0x4022d1] memchr("#endif\n\n  /* We fill all the reg"..., '\n', 264) = 0x025a10b9
[0x4022d1] memchr("\n  /* We fill all the registers "..., '\n', 257) = 0x025a10ba
[0x4022d1] memchr("  /* We fill all the registers i"..., '\n', 256) = 0x025a10fc
[0x4022d1] memchr("     return, for use in backrefe"..., '\n', 190) = 0x025a113e
[0x4022d1] memchr("     an element for register zer"..., '\n', 124) = 0x025a1165
[0x4022d1] memchr("  unsigned num_regs = bufp->re_n"..., '\n', 85) = 0x025a118e
[0x4022d1] memchr("  \n  /* The currently active reg"..., '\n', 44) = 0x025a1191
[0x4022d1] memchr("  /* The currently active regist"..., '\n', 41) = 0x025a11ba
[0x4022d1] memchr("  unsigned lowest_active_reg = N"..., '\n', 0) = NULL
[0x4023cc] fwrite("4855:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  unsigned lowest_active_reg = N"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  unsigned highest_active_reg = "..., 'I', 19964) = 0x025a1214
[0x40cdf3] memchr("IGHEST_ACTIVE_REG;\n\n  /* Informa"..., '\n', 19928) = 0x025a1226
[0x4022d1] memchr("  unsigned highest_active_reg = "..., '\n', 0) = NULL
[0x4023cc] fwrite("4856:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  unsigned highest_active_reg = "..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n  /* Information on the content"..., 'I', 19909) = 0x025a122d
[0x40cdf3] memchr("Information on the contents of r"..., '\n', 19903) = 0x025a126e
[0x4022d1] memchr("\n  /* Information on the content"..., '\n', 1) = 0x025a1227
[0x4022d1] memchr("  /* Information on the contents"..., '\n', 0) = NULL
[0x4023cc] fwrite("4858:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Information on the contents"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     the input strings; they rec"..., 'I', 19837) = 0x025a142e
[0x40cdf3] memchr("If a group that's operated upon "..., '\n', 19390) = 0x025a146f
[0x4022d1] memchr("     the input strings; they rec"..., '\n', 442) = 0x025a12b1
[0x4022d1] memchr("     attempt) by a subexpression"..., '\n', 375) = 0x025a12f4
[0x4022d1] memchr("     regnum-th regstart pointer "..., '\n', 308) = 0x025a133c
[0x4022d1] memchr("     matching and the regnum-th "..., '\n', 236) = 0x025a1382
[0x4022d1] memchr("     stopped matching the regnum"..., '\n', 166) = 0x025a13cb
[0x4022d1] memchr("     keeps track of what the who"..., '\n', 93) = 0x025a1404
[0x4022d1] memchr("  const char **regstart, **regen"..., '\n', 36) = 0x025a1427
[0x4022d1] memchr("\n  /* If a group that's operated"..., '\n', 1) = 0x025a1428
[0x4022d1] memchr("  /* If a group that's operated "..., '\n', 0) = NULL
[0x4023cc] fwrite("4867:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If a group that's operated "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     match anything, then the re"..., 'I', 19324) = 0x025a1bcc
[0x40cdf3] memchr("INT1 ("\\n\\nEntering re_match_2.\\"..., '\n', 17440) = 0x025a1bf0
[0x4022d1] memchr("     match anything, then the re"..., '\n', 1874) = 0x025a14b4
[0x4022d1] memchr("     restored because it will ha"..., '\n', 1805) = 0x025a14fd
[0x4022d1] memchr("     are when we last see its op"..., '\n', 1732) = 0x025a1541
[0x4022d1] memchr("     register's end.  */\n  const"..., '\n', 1664) = 0x025a155a
[0x4022d1] memchr("  const char **old_regstart, **o"..., '\n', 1639) = 0x025a1585
[0x4022d1] memchr("\n  /* The is_active field of reg"..., '\n', 1596) = 0x025a1586
[0x4022d1] memchr("  /* The is_active field of reg_"..., '\n', 1595) = 0x025a15d2
[0x4022d1] memchr("     nested) subexpressions we a"..., '\n', 1519) = 0x025a1619
[0x4022d1] memchr("     field of reg_info[reg_num] "..., '\n', 1448) = 0x025a165e
[0x4022d1] memchr("     matched any of the pattern "..., '\n', 1379) = 0x025a16a6
[0x4022d1] memchr("     subexpression.  These two f"..., '\n', 1307) = 0x025a16ec
[0x4022d1] memchr("     loop their register is in. "..., '\n', 1237) = 0x025a1710
[0x4022d1] memchr("  register_info_type *reg_info; "..., '\n', 1201) = 0x025a1731
[0x4022d1] memchr("\n  /* The following record the r"..., '\n', 1168) = 0x025a1732
[0x4022d1] memchr("  /* The following record the re"..., '\n', 1167) = 0x025a1774
[0x4022d1] memchr("     variables when we find a ma"..., '\n', 1101) = 0x025a17bc
[0x4022d1] memchr("     This happens as we backtrac"..., '\n', 1029) = 0x025a1803
[0x4022d1] memchr("     turn happens only if we hav"..., '\n', 958) = 0x025a184b
[0x4022d1] memchr("  unsigned best_regs_set = false"..., '\n', 886) = 0x025a186d
[0x4022d1] memchr("  const char **best_regstart, **"..., '\n', 852) = 0x025a189a
[0x4022d1] memchr("  \n  /* Logically, this is `best"..., '\n', 807) = 0x025a189d
[0x4022d1] memchr("  /* Logically, this is `best_re"..., '\n', 804) = 0x025a18e5
[0x4022d1] memchr("     allocate space for that if "..., '\n', 732) = 0x025a192d
[0x4022d1] memchr("     else (see below).  Also, we"..., '\n', 660) = 0x025a1973
[0x4022d1] memchr("     any of the other register v"..., '\n', 590) = 0x025a19bb
[0x4022d1] memchr("     treat `best_regend' differe"..., '\n', 518) = 0x025a1a04
[0x4022d1] memchr("     the end of the best match s"..., '\n', 445) = 0x025a1a46
[0x4022d1] memchr("     initialize this to NULL so "..., '\n', 379) = 0x025a1a8c
[0x4022d1] memchr("     and need to test it, it's n"..., '\n', 309) = 0x025a1abc
[0x4022d1] memchr("  const char *match_end = NULL;\n"..., '\n', 261) = 0x025a1adc
[0x4022d1] memchr("\n  /* Used when we pop values we"..., '\n', 229) = 0x025a1add
[0x4022d1] memchr("  /* Used when we pop values we "..., '\n', 228) = 0x025a1b13
[0x4022d1] memchr("  const char **reg_dummy;\n  regi"..., '\n', 174) = 0x025a1b2d
[0x4022d1] memchr("  register_info_type *reg_info_d"..., '\n', 148) = 0x025a1b53
[0x4022d1] memchr("\n#ifdef DEBUG\n  /* Counts the to"..., '\n', 110) = 0x025a1b54
[0x4022d1] memchr("#ifdef DEBUG\n  /* Counts the tot"..., '\n', 109) = 0x025a1b61
[0x4022d1] memchr("  /* Counts the total number of "..., '\n', 96) = 0x025a1b97
[0x4022d1] memchr("  unsigned num_regs_pushed = 0; "..., '\n', 42) = 0x025a1bb9
[0x4022d1] memchr("#endif\n\n  DEBUG_PRINT1 ("\\n\\nEnt"..., '\n', 8) = 0x025a1bc0
[0x4022d1] memchr("\n  DEBUG_PRINT1 ("\\n\\nEntering r"..., '\n', 1) = 0x025a1bc1
[0x4022d1] memchr("  DEBUG_PRINT1 ("\\n\\nEntering re"..., '\n', 0) = NULL
[0x4023cc] fwrite("4908:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("\\n\\nEntering re"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  \n  INIT_FAIL_STACK ();\n  \n  /*"..., 'I', 17403) = 0x025a1bf6
[0x40cdf3] memchr("INIT_FAIL_STACK ();\n  \n  /* Do n"..., '\n', 17398) = 0x025a1c09
[0x4022d1] memchr("  \n  INIT_FAIL_STACK ();\n  \n  /*"..., '\n', 3) = 0x025a1bf3
[0x4022d1] memchr("  INIT_FAIL_STACK ();\n  \n  /* Do"..., '\n', 0) = NULL
[0x4023cc] fwrite("4910:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  INIT_FAIL_STACK ();\n  \n  /* Do"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  \n  /* Do not bother to initial"..., 'I', 17378) = 0x025a1c99
[0x40cdf3] memchr("If\n     there are groups, we inc"..., '\n', 17235) = 0x025a1c9b
[0x4022d1] memchr("  \n  /* Do not bother to initial"..., '\n', 76) = 0x025a1c0c
[0x4022d1] memchr("  /* Do not bother to initialize"..., '\n', 73) = 0x025a1c55
[0x4022d1] memchr("     no groups in the pattern, a"..., '\n', 0) = NULL
[0x4023cc] fwrite("4913:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     no groups in the pattern, a"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     there are groups, we includ"..., 'I', 17232) = 0x025a2037
[0x40cdf3] memchr("IABLES ();\n          return -2;\n"..., '\n', 16309) = 0x025a2041
[0x4022d1] memchr("     there are groups, we includ"..., '\n', 905) = 0x025a1cdd
[0x4022d1] memchr("     pattern), even though we ne"..., '\n', 839) = 0x025a1d21
[0x4022d1] memchr("     array indexing.  We should "..., '\n', 771) = 0x025a1d4f
[0x4022d1] memchr("  if (bufp->re_nsub)\n    {\n     "..., '\n', 725) = 0x025a1d64
[0x4022d1] memchr("    {\n      regstart = REGEX_TAL"..., '\n', 704) = 0x025a1d6a
[0x4022d1] memchr("      regstart = REGEX_TALLOC (n"..., '\n', 698) = 0x025a1da2
[0x4022d1] memchr("      regend = REGEX_TALLOC (num"..., '\n', 642) = 0x025a1dd8
[0x4022d1] memchr("      old_regstart = REGEX_TALLO"..., '\n', 588) = 0x025a1e14
[0x4022d1] memchr("      old_regend = REGEX_TALLOC "..., '\n', 528) = 0x025a1e4e
[0x4022d1] memchr("      best_regstart = REGEX_TALL"..., '\n', 470) = 0x025a1e8b
[0x4022d1] memchr("      best_regend = REGEX_TALLOC"..., '\n', 409) = 0x025a1ec6
[0x4022d1] memchr("      reg_info = REGEX_TALLOC (n"..., '\n', 350) = 0x025a1f04
[0x4022d1] memchr("      reg_dummy = REGEX_TALLOC ("..., '\n', 288) = 0x025a1f3d
[0x4022d1] memchr("      reg_info_dummy = REGEX_TAL"..., '\n', 231) = 0x025a1f81
[0x4022d1] memchr("\n      if (!(regstart && regend "..., '\n', 163) = 0x025a1f82
[0x4022d1] memchr("      if (!(regstart && regend &"..., '\n', 162) = 0x025a1fcc
[0x4022d1] memchr("            && best_regstart && "..., '\n', 88) = 0x025a201a
[0x4022d1] memchr("        {\n          FREE_VARIABL"..., '\n', 10) = 0x025a2024
[0x4022d1] memchr("          FREE_VARIABLES ();\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("4932:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          FREE_VARIABLES ();\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          return -2;\n        }\n "..., 'I', 16298) = 0x025a20d9
[0x40cdf3] memchr("IABLES' doesn't try to free them"..., '\n', 16147) = 0x025a20fe
[0x4022d1] memchr("          return -2;\n        }\n "..., '\n', 133) = 0x025a2056
[0x4022d1] memchr("        }\n    }\n#ifdef REGEX_MAL"..., '\n', 112) = 0x025a2060
[0x4022d1] memchr("    }\n#ifdef REGEX_MALLOC\n  else"..., '\n', 102) = 0x025a2066
[0x4022d1] memchr("#ifdef REGEX_MALLOC\n  else\n    {"..., '\n', 96) = 0x025a207a
[0x4022d1] memchr("  else\n    {\n      /* We must in"..., '\n', 76) = 0x025a2081
[0x4022d1] memchr("    {\n      /* We must initializ"..., '\n', 69) = 0x025a2087
[0x4022d1] memchr("      /* We must initialize all "..., '\n', 63) = 0x025a20c6
[0x4022d1] memchr("         `FREE_VARIABLES' doesn'"..., '\n', 0) = NULL
[0x4023cc] fwrite("4940:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("         `FREE_VARIABLES' doesn'"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      regstart = regend = old_re"..., 'I', 16109) = 0x025a2230
[0x40cdf3] memchr("IABLES ();\n      return -1;\n    "..., '\n', 15804) = 0x025a223a
[0x4022d1] memchr("      regstart = regend = old_re"..., '\n', 291) = 0x025a2142
[0x4022d1] memchr("        = best_regend = reg_dumm"..., '\n', 223) = 0x025a216c
[0x4022d1] memchr("      reg_info = reg_info_dummy "..., '\n', 181) = 0x025a21ab
[0x4022d1] memchr("    }\n#endif /* REGEX_MALLOC */\n"..., '\n', 118) = 0x025a21b1
[0x4022d1] memchr("#endif /* REGEX_MALLOC */\n\n  /* "..., '\n', 112) = 0x025a21cb
[0x4022d1] memchr("\n  /* The starting position is b"..., '\n', 86) = 0x025a21cc
[0x4022d1] memchr("  /* The starting position is bo"..., '\n', 85) = 0x025a21f5
[0x4022d1] memchr("  if (pos < 0 || pos > size1 + s"..., '\n', 44) = 0x025a221b
[0x4022d1] memchr("    {\n      FREE_VARIABLES ();\n "..., '\n', 6) = 0x025a2221
[0x4022d1] memchr("      FREE_VARIABLES ();\n      r"..., '\n', 0) = NULL
[0x4023cc] fwrite("4950:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      FREE_VARIABLES ();\n      r"..., 1, 25, 0x7f498147f260) = 25
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      return -1;\n    }\n    \n  /*"..., 'I', 15793) = 0x025a225c
[0x40cdf3] memchr("Initialize subexpression text po"..., '\n', 15760) = 0x025a229e
[0x4022d1] memchr("      return -1;\n    }\n    \n  /*"..., '\n', 28) = 0x025a224b
[0x4022d1] memchr("    }\n    \n  /* Initialize subex"..., '\n', 11) = 0x025a2251
[0x4022d1] memchr("    \n  /* Initialize subexpressi"..., '\n', 5) = 0x025a2256
[0x4022d1] memchr("  /* Initialize subexpression te"..., '\n', 0) = NULL
[0x4023cc] fwrite("4954:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize subexpression te"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     start_memory/stop_memory ha"..., 'I', 15693) = 0x025a23c3
[0x40cdf3] memchr("ING_P (reg_info[mcnt]) = MATCH_N"..., '\n', 15401) = 0x025a23f3
[0x4022d1] memchr("     start_memory/stop_memory ha"..., '\n', 268) = 0x025a22e3
[0x4022d1] memchr("     register information struct"..., '\n', 199) = 0x025a2309
[0x4022d1] memchr("  for (mcnt = 1; mcnt < num_regs"..., '\n', 161) = 0x025a2333
[0x4022d1] memchr("    {\n      regstart[mcnt] = reg"..., '\n', 119) = 0x025a2339
[0x4022d1] memchr("      regstart[mcnt] = regend[mc"..., '\n', 113) = 0x025a235e
[0x4022d1] memchr("        = old_regstart[mcnt] = o"..., '\n', 76) = 0x025a23a1
[0x4022d1] memchr("        \n      REG_MATCH_NULL_ST"..., '\n', 9) = 0x025a23aa
[0x4022d1] memchr("      REG_MATCH_NULL_STRING_P (r"..., '\n', 0) = NULL
[0x4023cc] fwrite("4962:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      REG_MATCH_NULL_STRING_P (r"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      IS_ACTIVE (reg_info[mcnt])"..., 'I', 15352) = 0x025a23fa
[0x40cdf3] memchr("IS_ACTIVE (reg_info[mcnt]) = 0;\n"..., '\n', 15346) = 0x025a2419
[0x4022d1] memchr("      IS_ACTIVE (reg_info[mcnt])"..., '\n', 0) = NULL
[0x4023cc] fwrite("4963:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      IS_ACTIVE (reg_info[mcnt])"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      MATCHED_SOMETHING (reg_inf"..., 'I', 15314) = 0x025a242e
[0x40cdf3] memchr("ING (reg_info[mcnt]) = 0;\n      "..., '\n', 15294) = 0x025a2447
[0x4022d1] memchr("      MATCHED_SOMETHING (reg_inf"..., '\n', 0) = NULL
[0x4023cc] fwrite("4964:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      MATCHED_SOMETHING (reg_inf"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      EVER_MATCHED_SOMETHING (re"..., 'I', 15268) = 0x025a2461
[0x40cdf3] memchr("ING (reg_info[mcnt]) = 0;\n    }\n"..., '\n', 15243) = 0x025a247a
[0x4022d1] memchr("      EVER_MATCHED_SOMETHING (re"..., '\n', 0) = NULL
[0x4023cc] fwrite("4965:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      EVER_MATCHED_SOMETHING (re"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n  \n  /* We move `string1' "..., 'I', 15217) = 0x025a28d1
[0x40cdf3] memchr("INT1 ("The compiled pattern is: "..., '\n', 14107) = 0x025a28f4
[0x4022d1] memchr("    }\n  \n  /* We move `string1' "..., '\n', 1100) = 0x025a2480
[0x4022d1] memchr("  \n  /* We move `string1' into `"..., '\n', 1094) = 0x025a2483
[0x4022d1] memchr("  /* We move `string1' into `str"..., '\n', 1091) = 0x025a24cd
[0x4022d1] memchr("     `string1' is null.  */\n  if"..., '\n', 1017) = 0x025a24e9
[0x4022d1] memchr("  if (size2 == 0 && string1 != N"..., '\n', 989) = 0x025a250e
[0x4022d1] memchr("    {\n      string2 = string1;\n "..., '\n', 952) = 0x025a2514
[0x4022d1] memchr("      string2 = string1;\n      s"..., '\n', 946) = 0x025a252d
[0x4022d1] memchr("      size2 = size1;\n      strin"..., '\n', 921) = 0x025a2542
[0x4022d1] memchr("      string1 = 0;\n      size1 ="..., '\n', 900) = 0x025a2555
[0x4022d1] memchr("      size1 = 0;\n    }\n  end1 = "..., '\n', 881) = 0x025a2566
[0x4022d1] memchr("    }\n  end1 = string1 + size1;\n"..., '\n', 864) = 0x025a256c
[0x4022d1] memchr("  end1 = string1 + size1;\n  end2"..., '\n', 858) = 0x025a2586
[0x4022d1] memchr("  end2 = string2 + size2;\n\n  /* "..., '\n', 832) = 0x025a25a0
[0x4022d1] memchr("\n  /* Compute where to stop matc"..., '\n', 806) = 0x025a25a1
[0x4022d1] memchr("  /* Compute where to stop match"..., '\n', 805) = 0x025a25e2
[0x4022d1] memchr("  if (stop <= size1)\n    {\n     "..., '\n', 740) = 0x025a25f7
[0x4022d1] memchr("    {\n      end_match_1 = string"..., '\n', 719) = 0x025a25fd
[0x4022d1] memchr("      end_match_1 = string1 + st"..., '\n', 713) = 0x025a2621
[0x4022d1] memchr("      end_match_2 = string2;\n   "..., '\n', 677) = 0x025a263e
[0x4022d1] memchr("    }\n  else\n    {\n      end_mat"..., '\n', 648) = 0x025a2644
[0x4022d1] memchr("  else\n    {\n      end_match_1 ="..., '\n', 642) = 0x025a264b
[0x4022d1] memchr("    {\n      end_match_1 = end1;\n"..., '\n', 635) = 0x025a2651
[0x4022d1] memchr("      end_match_1 = end1;\n      "..., '\n', 629) = 0x025a266b
[0x4022d1] memchr("      end_match_2 = string2 + st"..., '\n', 603) = 0x025a2697
[0x4022d1] memchr("    }\n\n  /* `p' scans through th"..., '\n', 559) = 0x025a269d
[0x4022d1] memchr("\n  /* `p' scans through the patt"..., '\n', 553) = 0x025a269e
[0x4022d1] memchr("  /* `p' scans through the patte"..., '\n', 552) = 0x025a26e1
[0x4022d1] memchr("     `dend' is the end of the in"..., '\n', 485) = 0x025a2729
[0x4022d1] memchr("     is advanced into the follow"..., '\n', 413) = 0x025a2772
[0x4022d1] memchr("     this happens before fetchin"..., '\n', 340) = 0x025a27b8
[0x4022d1] memchr("     loop, `d' can be pointing a"..., '\n', 270) = 0x025a27fd
[0x4022d1] memchr("     equal `string2'.  */\n  if ("..., '\n', 201) = 0x025a2817
[0x4022d1] memchr("  if (size1 > 0 && pos <= size1)"..., '\n', 175) = 0x025a2838
[0x4022d1] memchr("    {\n      d = string1 + pos;\n "..., '\n', 142) = 0x025a283e
[0x4022d1] memchr("      d = string1 + pos;\n      d"..., '\n', 136) = 0x025a2857
[0x4022d1] memchr("      dend = end_match_1;\n    }\n"..., '\n', 111) = 0x025a2871
[0x4022d1] memchr("    }\n  else\n    {\n      d = str"..., '\n', 85) = 0x025a2877
[0x4022d1] memchr("  else\n    {\n      d = string2 +"..., '\n', 79) = 0x025a287e
[0x4022d1] memchr("    {\n      d = string2 + pos - "..., '\n', 72) = 0x025a2884
[0x4022d1] memchr("      d = string2 + pos - size1;"..., '\n', 66) = 0x025a28a5
[0x4022d1] memchr("      dend = end_match_2;\n    }\n"..., '\n', 33) = 0x025a28bf
[0x4022d1] memchr("    }\n\n  DEBUG_PRINT1 ("The comp"..., '\n', 7) = 0x025a28c5
[0x4022d1] memchr("\n  DEBUG_PRINT1 ("The compiled p"..., '\n', 1) = 0x025a28c6
[0x4022d1] memchr("  DEBUG_PRINT1 ("The compiled pa"..., '\n', 0) = NULL
[0x4023cc] fwrite("5009:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("The compiled pa"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., 'I', 14071) = 0x025a28ff
[0x40cdf3] memchr("INT_COMPILED_PATTERN (bufp, p, p"..., '\n', 14061) = 0x025a2924
[0x4022d1] memchr("  DEBUG_PRINT_COMPILED_PATTERN ("..., '\n', 0) = NULL
[0x4023cc] fwrite("5010:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_COMPILED_PATTERN ("..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT1 ("The string to m"..., 'I', 14023) = 0x025a292f
[0x40cdf3] memchr("INT1 ("The string to match is: `"..., '\n', 14013) = 0x025a2952
[0x4022d1] memchr("  DEBUG_PRINT1 ("The string to m"..., '\n', 0) = NULL
[0x4023cc] fwrite("5011:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("The string to m"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT_DOUBLE_STRING (d, "..., 'I', 13977) = 0x025a295d
[0x40cdf3] memchr("INT_DOUBLE_STRING (d, string1, s"..., '\n', 13967) = 0x025a2993
[0x4022d1] memchr("  DEBUG_PRINT_DOUBLE_STRING (d, "..., '\n', 0) = NULL
[0x4023cc] fwrite("5012:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT_DOUBLE_STRING (d, "..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., 'I', 13912) = 0x025a299e
[0x40cdf3] memchr("INT1 ("'\\n");\n  \n  /* This loops"..., '\n', 13902) = 0x025a29ab
[0x4022d1] memchr("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., '\n', 0) = NULL
[0x4023cc] fwrite("5013:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  DEBUG_PRINT1 ("'\\n");\n  \n  /* "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  \n  /* This loops over pattern "..., 'I', 13888) = 0x025a29d7
[0x40cdf3] memchr("It exits by returning from the\n "..., '\n', 13845) = 0x025a29f5
[0x4022d1] memchr("  \n  /* This loops over pattern "..., '\n', 3) = 0x025a29ae
[0x4022d1] memchr("  /* This loops over pattern com"..., '\n', 0) = NULL
[0x4023cc] fwrite("5015:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* This loops over pattern com"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     function if the match is co"..., 'I', 13814) = 0x025a2a97
[0x40cdf3] memchr("INT2 ("\\n0x%x: ", p);\n\n      if "..., '\n', 13653) = 0x025a2aac
[0x4022d1] memchr("     function if the match is co"..., '\n', 147) = 0x025a2a3e
[0x4022d1] memchr("     fails at this starting poin"..., '\n', 74) = 0x025a2a77
[0x4022d1] memchr("  for (;;)\n    {\n      DEBUG_PRI"..., '\n', 17) = 0x025a2a82
[0x4022d1] memchr("    {\n      DEBUG_PRINT2 ("\\n0x%"..., '\n', 6) = 0x025a2a88
[0x4022d1] memchr("      DEBUG_PRINT2 ("\\n0x%x: ", "..., '\n', 0) = NULL
[0x4023cc] fwrite("5020:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      DEBUG_PRINT2 ("\\n0x%x: ", "..., 1, 36, 0x7f498147f260) = 36
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n      if (p == pend)\n\t{ /* End "..., 'I', 13631) = 0x025a2b0d
[0x40cdf3] memchr("INT1 ("end of pattern ... ");\n  "..., '\n', 13535) = 0x025a2b2a
[0x4022d1] memchr("\n      if (p == pend)\n\t{ /* End "..., '\n', 78) = 0x025a2aad
[0x4022d1] memchr("      if (p == pend)\n\t{ /* End o"..., '\n', 77) = 0x025a2ac2
[0x4022d1] memchr("\t{ /* End of pattern means we mi"..., '\n', 56) = 0x025a2afa
[0x4022d1] memchr("          DEBUG_PRINT1 ("end of "..., '\n', 0) = NULL
[0x4023cc] fwrite("5024:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("end of "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n\t  /* If we haven't m"..., 'I', 13505) = 0x025a2b3c
[0x40cdf3] memchr("If we haven't matched the entire"..., '\n', 13488) = 0x025a2b74
[0x4022d1] memchr("          \n\t  /* If we haven't m"..., '\n', 11) = 0x025a2b35
[0x4022d1] memchr("\t  /* If we haven't matched the "..., '\n', 0) = NULL
[0x4023cc] fwrite("5026:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If we haven't matched the "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             longest match, try "..., 'I', 13431) = 0x025a2be4
[0x40cdf3] memchr("INT1 ("backtracking.\\n");\n      "..., '\n', 13320) = 0x025a2bfd
[0x4022d1] memchr("             longest match, try "..., '\n', 89) = 0x025a2ba6
[0x4022d1] memchr("          if (d != end_match_2)\n"..., '\n', 39) = 0x025a2bc6
[0x4022d1] memchr("\t    {\n              DEBUG_PRINT"..., '\n', 7) = 0x025a2bcd
[0x4022d1] memchr("              DEBUG_PRINT1 ("bac"..., '\n', 0) = NULL
[0x4023cc] fwrite("5030:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              DEBUG_PRINT1 ("bac"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              \n              if "..., 'I', 13294) = 0x025a2c22
[0x40cdf3] memchr("IL_STACK_EMPTY ())\n             "..., '\n', 13258) = 0x025a2c34
[0x4022d1] memchr("              \n              if "..., '\n', 15) = 0x025a2c0c
[0x4022d1] memchr("              if (!FAIL_STACK_EM"..., '\n', 0) = NULL
[0x4023cc] fwrite("5032:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (!FAIL_STACK_EM"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                { /* More failur"..., 'I', 13239) = 0x025a2c93
[0x40cdf3] memchr("IRST_STRING_P (match_end) \n\t    "..., '\n', 13145) = 0x025a2cad
[0x4022d1] memchr("                { /* More failur"..., '\n', 53) = 0x025a2c69
[0x4022d1] memchr("                  boolean same_s"..., '\n', 0) = NULL
[0x4023cc] fwrite("5034:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  boolean same_s"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t        \t                == MAT"..., 'I', 13118) = 0x025a2cd0
[0x40cdf3] memchr("ING_IN_FIRST_STRING);\n\n         "..., '\n', 13084) = 0x025a2ce5
[0x4022d1] memchr("\t        \t                == MAT"..., '\n', 0) = NULL
[0x4023cc] fwrite("5035:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t        \t                == MAT"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n                  /* If exceeds"..., 'I', 13062) = 0x025a2cfc
[0x40cdf3] memchr("If exceeds best match so far, sa"..., '\n', 13040) = 0x025a2d26
[0x4022d1] memchr("\n                  /* If exceeds"..., '\n', 1) = 0x025a2ce6
[0x4022d1] memchr("                  /* If exceeds "..., '\n', 0) = NULL
[0x4023cc] fwrite("5037:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  /* If exceeds "..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  if (!best_regs"..., 'I', 12997) = 0x025a2db2
[0x40cdf3] memchr("ING_IN_FIRST_STRING))\n          "..., '\n', 12858) = 0x025a2dc7
[0x4022d1] memchr("                  if (!best_regs"..., '\n', 92) = 0x025a2d4b
[0x4022d1] memchr("                      || (same_s"..., '\n', 55) = 0x025a2d82
[0x4022d1] memchr("                      || (!same_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5040:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      || (!same_"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    {\n          "..., 'I', 12836) = 0x025a2e64
[0x40cdf3] memchr("INT1 ("\\nSAVING match as best so"..., '\n', 12680) = 0x025a2e8e
[0x4022d1] memchr("                    {\n          "..., '\n', 126) = 0x025a2ddd
[0x4022d1] memchr("                      best_regs_"..., '\n', 104) = 0x025a2e09
[0x4022d1] memchr("                      match_end "..., '\n', 60) = 0x025a2e2e
[0x4022d1] memchr("                      \n         "..., '\n', 23) = 0x025a2e45
[0x4022d1] memchr("                      DEBUG_PRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5045:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      DEBUG_PRIN"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      \n         "..., 'I', 12637) = 0x025a2ff3
[0x40cdf3] memchr("If no failure points, don't rest"..., '\n', 12281) = 0x025a3023
[0x4022d1] memchr("                      \n         "..., '\n', 339) = 0x025a2ea5
[0x4022d1] memchr("                      for (mcnt "..., '\n', 316) = 0x025a2ee3
[0x4022d1] memchr("                        {\n      "..., '\n', 254) = 0x025a2efd
[0x4022d1] memchr("                          best_r"..., '\n', 228) = 0x025a2f3d
[0x4022d1] memchr("                          best_r"..., '\n', 164) = 0x025a2f79
[0x4022d1] memchr("                        }\n      "..., '\n', 104) = 0x025a2f93
[0x4022d1] memchr("                    }\n          "..., '\n', 78) = 0x025a2fa9
[0x4022d1] memchr("                  goto fail;\t   "..., '\n', 56) = 0x025a2fce
[0x4022d1] memchr("                }\n\n             "..., '\n', 19) = 0x025a2fe0
[0x4022d1] memchr("\n              /* If no failure "..., '\n', 1) = 0x025a2fe1
[0x4022d1] memchr("              /* If no failure p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5056:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If no failure p"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              else if (best_regs"..., 'I', 12232) = 0x025a30a7
[0x40cdf3] memchr("It may happen that `dend ==\n    "..., '\n', 12101) = 0x025a30c2
[0x4022d1] memchr("              else if (best_regs"..., '\n', 89) = 0x025a304c
[0x4022d1] memchr("                {\n  \t        res"..., '\n', 48) = 0x025a305e
[0x4022d1] memchr("  \t        restore_best_regs:\n  "..., '\n', 30) = 0x025a307c
[0x4022d1] memchr("                  /* Restore bes"..., '\n', 0) = NULL
[0x4023cc] fwrite("5060:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  /* Restore bes"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     end_match_1"..., 'I', 12073) = 0x025a31e0
[0x40cdf3] memchr("INT1 ("Restoring best registers."..., '\n', 11788) = 0x025a3205
[0x4022d1] memchr("                     end_match_1"..., '\n', 259) = 0x025a3108
[0x4022d1] memchr("                     For example"..., '\n', 189) = 0x025a314c
[0x4022d1] memchr("                     strings `x-"..., '\n', 121) = 0x025a3191
[0x4022d1] memchr("                     not consecu"..., '\n', 52) = 0x025a31c5
[0x4022d1] memchr("                  DEBUG_PRINT1 ("..., '\n', 0) = NULL
[0x4023cc] fwrite("5065:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  DEBUG_PRINT1 ("..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  \n             "..., 'I', 11750) = 0x025a337a
[0x40cdf3] memchr("INT1 ("Accepting match.\\n");\n\n  "..., '\n', 11378) = 0x025a3396
[0x4022d1] memchr("                  \n             "..., '\n', 354) = 0x025a3218
[0x4022d1] memchr("                  d = match_end;"..., '\n', 335) = 0x025a3239
[0x4022d1] memchr("                  dend = ((d >= "..., '\n', 302) = 0x025a326f
[0x4022d1] memchr("\t\t           ? end_match_1 : end"..., '\n', 248) = 0x025a329a
[0x4022d1] memchr("\n\t\t  for (mcnt = 1; mcnt < num_r"..., '\n', 205) = 0x025a329b
[0x4022d1] memchr("\t\t  for (mcnt = 1; mcnt < num_re"..., '\n', 204) = 0x025a32c7
[0x4022d1] memchr("\t\t    {\n\t\t      regstart[mcnt] ="..., '\n', 160) = 0x025a32cf
[0x4022d1] memchr("\t\t      regstart[mcnt] = best_re"..., '\n', 152) = 0x025a32fd
[0x4022d1] memchr("\t\t      regend[mcnt] = best_rege"..., '\n', 106) = 0x025a3327
[0x4022d1] memchr("\t\t    }\n                }\n      "..., '\n', 64) = 0x025a332f
[0x4022d1] memchr("                }\n            } "..., '\n', 56) = 0x025a3341
[0x4022d1] memchr("            } /* d != end_match_"..., '\n', 38) = 0x025a3366
[0x4022d1] memchr("\n          DEBUG_PRINT1 ("Accept"..., '\n', 1) = 0x025a3367
[0x4022d1] memchr("          DEBUG_PRINT1 ("Accepti"..., '\n', 0) = NULL
[0x4023cc] fwrite("5079:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("Accepti"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* If caller wants re"..., 'I', 11349) = 0x025a33a5
[0x40cdf3] memchr("If caller wants register content"..., '\n', 11335) = 0x025a33dc
[0x4022d1] memchr("\n          /* If caller wants re"..., '\n', 1) = 0x025a3397
[0x4022d1] memchr("          /* If caller wants reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("5081:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If caller wants reg"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (regs && !bufp->no_"..., 'I', 11279) = 0x025a3709
[0x40cdf3] memchr("If we need more elements than we"..., '\n', 10467) = 0x025a3733
[0x4022d1] memchr("          if (regs && !bufp->no_"..., '\n', 785) = 0x025a3401
[0x4022d1] memchr("\t    {\n              /* Have the"..., '\n', 748) = 0x025a3408
[0x4022d1] memchr("              /* Have the regist"..., '\n', 741) = 0x025a344b
[0x4022d1] memchr("              if (bufp->regs_all"..., '\n', 674) = 0x025a3487
[0x4022d1] memchr("                { /* No.  So all"..., '\n', 614) = 0x025a34cc
[0x4022d1] memchr("                     extra eleme"..., '\n', 545) = 0x025a3515
[0x4022d1] memchr("                     GNU code us"..., '\n', 472) = 0x025a353d
[0x4022d1] memchr("                  regs->num_regs"..., '\n', 432) = 0x025a357e
[0x4022d1] memchr("                  regs->start = "..., '\n', 367) = 0x025a35c1
[0x4022d1] memchr("                  regs->end = TA"..., '\n', 300) = 0x025a3602
[0x4022d1] memchr("                  if (regs->star"..., '\n', 235) = 0x025a3642
[0x4022d1] memchr("                    return -2;\n "..., '\n', 171) = 0x025a3661
[0x4022d1] memchr("                  bufp->regs_all"..., '\n', 140) = 0x025a369b
[0x4022d1] memchr("                }\n              "..., '\n', 82) = 0x025a36ad
[0x4022d1] memchr("              else if (bufp->reg"..., '\n', 64) = 0x025a36ed
[0x4022d1] memchr("                { /* Yes.  If we"..., '\n', 0) = NULL
[0x4023cc] fwrite("5097:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                { /* Yes.  If we"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     allocated, "..., 'I', 10424) = 0x025a3766
[0x40cdf3] memchr("If we need fewer, just\n         "..., '\n', 10374) = 0x025a377c
[0x4022d1] memchr("                     allocated, "..., '\n', 0) = NULL
[0x4023cc] fwrite("5098:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                     allocated, "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     leave it al"..., 'I', 10351) = 0x025a3a02
[0x40cdf3] memchr("IXED);\n\t\t}\n\n              /* Con"..., '\n', 9706) = 0x025a3a08
[0x4022d1] memchr("                     leave it al"..., '\n', 603) = 0x025a37a5
[0x4022d1] memchr("                  if (regs->num_"..., '\n', 562) = 0x025a37da
[0x4022d1] memchr("                    {\n          "..., '\n', 509) = 0x025a37f0
[0x4022d1] memchr("                      regs->num_"..., '\n', 487) = 0x025a3825
[0x4022d1] memchr("                      RETALLOC ("..., '\n', 434) = 0x025a386d
[0x4022d1] memchr("                      RETALLOC ("..., '\n', 362) = 0x025a38b3
[0x4022d1] memchr("                      if (regs->"..., '\n', 292) = 0x025a38f7
[0x4022d1] memchr("                        return -"..., '\n', 224) = 0x025a391a
[0x4022d1] memchr("                    }\n          "..., '\n', 189) = 0x025a3930
[0x4022d1] memchr("                }\n              "..., '\n', 167) = 0x025a3942
[0x4022d1] memchr("              else\n\t\t{\n\t\t  /* Th"..., '\n', 149) = 0x025a3955
[0x4022d1] memchr("\t\t{\n\t\t  /* These braces fend off"..., '\n', 130) = 0x025a3959
[0x4022d1] memchr("\t\t  /* These braces fend off a ""..., '\n', 126) = 0x025a399a
[0x4022d1] memchr("\t\t     warning under GCC when as"..., '\n', 61) = 0x025a39d7
[0x4022d1] memchr("\t\t  assert (bufp->regs_allocated"..., '\n', 0) = NULL
[0x4023cc] fwrite("5113:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t  assert (bufp->regs_allocated"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t}\n\n              /* Convert th"..., 'I', 9699) = 0x025a3b66
[0x40cdf3] memchr("ING_IN_FIRST_STRING ? d - string"..., '\n', 9350) = 0x025a3b87
[0x4022d1] memchr("\t\t}\n\n              /* Convert th"..., '\n', 310) = 0x025a3a0c
[0x4022d1] memchr("\n              /* Convert the po"..., '\n', 306) = 0x025a3a0d
[0x4022d1] memchr("              /* Convert the poi"..., '\n', 305) = 0x025a3a55
[0x4022d1] memchr("                 indices.  Regis"..., '\n', 233) = 0x025a3a99
[0x4022d1] memchr("                 since we haven'"..., '\n', 165) = 0x025a3ade
[0x4022d1] memchr("              if (regs->num_regs"..., '\n', 96) = 0x025a3b04
[0x4022d1] memchr("                {\n              "..., '\n', 58) = 0x025a3b16
[0x4022d1] memchr("                  regs->start[0]"..., '\n', 40) = 0x025a3b3e
[0x4022d1] memchr("                  regs->end[0] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("5122:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  regs->end[0] ="..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t          : d - string2 + siz"..., 'I', 9316) = 0x025a3c75
[0x40cdf3] memchr("IN (num_regs, regs->num_regs); m"..., '\n', 9079) = 0x025a3c9b
[0x4022d1] memchr("\t\t\t          : d - string2 + siz"..., '\n', 207) = 0x025a3bac
[0x4022d1] memchr("                }\n              "..., '\n', 170) = 0x025a3bbe
[0x4022d1] memchr("              \n              /* "..., '\n', 152) = 0x025a3bcd
[0x4022d1] memchr("              /* Go through the "..., '\n', 137) = 0x025a3c14
[0x4022d1] memchr("                 registers, sinc"..., '\n', 66) = 0x025a3c56
[0x4022d1] memchr("\t      for (mcnt = 1; mcnt < MIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5128:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      for (mcnt = 1; mcnt < MIN"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t{\n                  if (REG_UN"..., 'I', 9040) = 0x025a3d77
[0x40cdf3] memchr("INTER_TO_OFFSET (regstart[mcnt])"..., '\n', 8821) = 0x025a3d98
[0x4022d1] memchr("\t\t{\n                  if (REG_UN"..., '\n', 189) = 0x025a3c9f
[0x4022d1] memchr("                  if (REG_UNSET "..., '\n', 185) = 0x025a3ced
[0x4022d1] memchr("                    regs->start["..., '\n', 107) = 0x025a3d2b
[0x4022d1] memchr("                  else\n         "..., '\n', 45) = 0x025a3d42
[0x4022d1] memchr("                    {\n\t\t      re"..., '\n', 22) = 0x025a3d58
[0x4022d1] memchr("\t\t      regs->start[mcnt] = POIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5134:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t      regs->start[mcnt] = POIN"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      regs->end["..., 'I', 8787) = 0x025a3dc3
[0x40cdf3] memchr("INTER_TO_OFFSET (regend[mcnt]);\n"..., '\n', 8745) = 0x025a3de2
[0x4022d1] memchr("                      regs->end["..., '\n', 0) = NULL
[0x4023cc] fwrite("5135:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      regs->end["..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                    }\n\t\t}\n      "..., 'I', 8713) = 0x025a3e1d
[0x40cdf3] memchr("If the regs structure we return "..., '\n', 8655) = 0x025a3e53
[0x4022d1] memchr("                    }\n\t\t}\n      "..., '\n', 41) = 0x025a3df8
[0x4022d1] memchr("\t\t}\n              \n             "..., '\n', 19) = 0x025a3dfc
[0x4022d1] memchr("              \n              /* "..., '\n', 15) = 0x025a3e0b
[0x4022d1] memchr("              /* If the regs str"..., '\n', 0) = NULL
[0x4023cc] fwrite("5139:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If the regs str"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 were in the pat"..., 'I', 8600) = 0x025a3e99
[0x40cdf3] memchr("If\n                 we (re)alloc"..., '\n', 8531) = 0x025a3e9b
[0x4022d1] memchr("                 were in the pat"..., '\n', 0) = NULL
[0x4023cc] fwrite("5140:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                 were in the pat"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 we (re)allocate"..., 'I', 8528) = 0x025a3ffe
[0x40cdf3] memchr("IABLES ();\n          DEBUG_PRINT"..., '\n', 8174) = 0x025a4008
[0x4022d1] memchr("                 we (re)allocate"..., '\n', 336) = 0x025a3ede
[0x4022d1] memchr("                 because we alwa"..., '\n', 269) = 0x025a3f26
[0x4022d1] memchr("                 -1 at the end. "..., '\n', 197) = 0x025a3f4a
[0x4022d1] memchr("              for (mcnt = num_re"..., '\n', 161) = 0x025a3f8d
[0x4022d1] memchr("                regs->start[mcnt"..., '\n', 94) = 0x025a3fc7
[0x4022d1] memchr("\t    } /* regs && !bufp->no_sub "..., '\n', 36) = 0x025a3fea
[0x4022d1] memchr("\n          FREE_VARIABLES ();\n  "..., '\n', 1) = 0x025a3feb
[0x4022d1] memchr("          FREE_VARIABLES ();\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("5148:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          FREE_VARIABLES ();\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          DEBUG_PRINT4 ("%u fail"..., 'I', 8163) = 0x025a401b
[0x40cdf3] memchr("INT4 ("%u failure points pushed,"..., '\n', 8145) = 0x025a4056
[0x4022d1] memchr("          DEBUG_PRINT4 ("%u fail"..., '\n', 0) = NULL
[0x4023cc] fwrite("5149:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT4 ("%u fail"..., 1, 78, 0x7f498147f260) = 78
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                        nfailure"..., 'I', 8085) = 0x025a40fb
[0x40cdf3] memchr("INT2 ("%u registers pushed.\\n", "..., '\n', 7921) = 0x025a412c
[0x4022d1] memchr("                        nfailure"..., '\n', 146) = 0x025a409e
[0x4022d1] memchr("                        nfailure"..., '\n', 74) = 0x025a40e8
[0x4022d1] memchr("          DEBUG_PRINT2 ("%u regi"..., '\n', 0) = NULL
[0x4023cc] fwrite("5152:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("%u regi"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          mcnt = d - pos - (MAT"..., 'I', 7871) = 0x025a414f
[0x40cdf3] memchr("ING_IN_FIRST_STRING \n\t\t\t    ? st"..., '\n', 7837) = 0x025a4163
[0x4022d1] memchr("\n          mcnt = d - pos - (MAT"..., '\n', 1) = 0x025a412d
[0x4022d1] memchr("          mcnt = d - pos - (MATC"..., '\n', 0) = NULL
[0x4023cc] fwrite("5154:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          mcnt = d - pos - (MATC"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t    ? string1 \n\t\t\t    : strin"..., 'I', 7816) = 0x025a41a4
[0x40cdf3] memchr("INT2 ("Returning %d from re_matc"..., '\n', 7752) = 0x025a41d3
[0x4022d1] memchr("\t\t\t    ? string1 \n\t\t\t    : strin"..., '\n', 46) = 0x025a4175
[0x4022d1] memchr("\t\t\t    : string2 - size1);\n\n    "..., '\n', 28) = 0x025a4190
[0x4022d1] memchr("\n          DEBUG_PRINT2 ("Return"..., '\n', 1) = 0x025a4191
[0x4022d1] memchr("          DEBUG_PRINT2 ("Returni"..., '\n', 0) = NULL
[0x4023cc] fwrite("5158:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("Returni"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          return mcnt;\n        "..., 'I', 7704) = 0x025a4233
[0x40cdf3] memchr("ITCH_ENUM_BUG\n      switch ((int"..., '\n', 7609) = 0x025a4240
[0x4022d1] memchr("\n          return mcnt;\n        "..., '\n', 86) = 0x025a41d4
[0x4022d1] memchr("          return mcnt;\n        }"..., '\n', 85) = 0x025a41eb
[0x4022d1] memchr("        }\n\n      /* Otherwise ma"..., '\n', 62) = 0x025a41f5
[0x4022d1] memchr("\n      /* Otherwise match next p"..., '\n', 52) = 0x025a41f6
[0x4022d1] memchr("      /* Otherwise match next pa"..., '\n', 51) = 0x025a4229
[0x4022d1] memchr("#ifdef SWITCH_ENUM_BUG\n      swi"..., '\n', 0) = NULL
[0x4023cc] fwrite("5164:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#ifdef SWITCH_ENUM_BUG\n      swi"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      switch ((int) ((re_opcode_"..., 'I', 7595) = 0x025a42a8
[0x40cdf3] memchr("Ignore these.  Used to ignore th"..., '\n', 7492) = 0x025a42e0
[0x4022d1] memchr("      switch ((int) ((re_opcode_"..., '\n', 92) = 0x025a426a
[0x4022d1] memchr("#else\n      switch ((re_opcode_t"..., '\n', 50) = 0x025a4270
[0x4022d1] memchr("      switch ((re_opcode_t) *p++"..., '\n', 44) = 0x025a4292
[0x4022d1] memchr("#endif\n\t{\n        /* Ignore thes"..., '\n', 10) = 0x025a4299
[0x4022d1] memchr("\t{\n        /* Ignore these.  Use"..., '\n', 3) = 0x025a429c
[0x4022d1] memchr("        /* Ignore these.  Used t"..., '\n', 0) = NULL
[0x4023cc] fwrite("5170:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        /* Ignore these.  Used t"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("           currently have n == 0"..., 'I', 7435) = 0x025a432d
[0x40cdf3] memchr("INT1 ("EXECUTING no_op.\\n");\n   "..., '\n', 7359) = 0x025a4349
[0x4022d1] memchr("           currently have n == 0"..., '\n', 58) = 0x025a4306
[0x4022d1] memchr("        case no_op:\n          DE"..., '\n', 20) = 0x025a431a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5173:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          break;\n\n\n        /* Ma"..., 'I', 7330) = 0x025a4445
[0x40cdf3] memchr("INT2 ("EXECUTING exactn %d.\\n", "..., '\n', 7079) = 0x025a446b
[0x4022d1] memchr("          break;\n\n\n        /* Ma"..., '\n', 233) = 0x025a435a
[0x4022d1] memchr("\n\n        /* Match the next n pa"..., '\n', 216) = 0x025a435b
[0x4022d1] memchr("\n        /* Match the next n pat"..., '\n', 215) = 0x025a435c
[0x4022d1] memchr("        /* Match the next n patt"..., '\n', 214) = 0x025a43a3
[0x4022d1] memchr("           byte in the pattern d"..., '\n', 143) = 0x025a43e8
[0x4022d1] memchr("           are the characters to"..., '\n', 74) = 0x025a4414
[0x4022d1] memchr("\tcase exactn:\n\t  mcnt = *p++;\n  "..., '\n', 30) = 0x025a4422
[0x4022d1] memchr("\t  mcnt = *p++;\n          DEBUG_"..., '\n', 16) = 0x025a4432
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5182:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* This is written ou"..., 'I', 7040) = 0x025a46ad
[0x40cdf3] memchr("INT1 ("EXECUTING anychar.\\n");\n\n"..., '\n', 6463) = 0x025a46cb
[0x4022d1] memchr("\n          /* This is written ou"..., '\n', 559) = 0x025a446c
[0x4022d1] memchr("          /* This is written out"..., '\n', 558) = 0x025a44b2
[0x4022d1] memchr("             testing `translate'"..., '\n', 488) = 0x025a44e8
[0x4022d1] memchr("          if (translate)\n\t    {\n"..., '\n', 434) = 0x025a4501
[0x4022d1] memchr("\t    {\n\t      do\n\t\t{\n\t\t  PREFETC"..., '\n', 409) = 0x025a4508
[0x4022d1] memchr("\t      do\n\t\t{\n\t\t  PREFETCH ();\n\t"..., '\n', 402) = 0x025a4512
[0x4022d1] memchr("\t\t{\n\t\t  PREFETCH ();\n\t\t  if (tra"..., '\n', 392) = 0x025a4516
[0x4022d1] memchr("\t\t  PREFETCH ();\n\t\t  if (transla"..., '\n', 388) = 0x025a4527
[0x4022d1] memchr("\t\t  if (translate[(unsigned char"..., '\n', 371) = 0x025a455f
[0x4022d1] memchr("                    goto fail;\n\t"..., '\n', 315) = 0x025a457e
[0x4022d1] memchr("\t\t}\n\t      while (--mcnt);\n\t    "..., '\n', 284) = 0x025a4582
[0x4022d1] memchr("\t      while (--mcnt);\n\t    }\n\t "..., '\n', 280) = 0x025a4599
[0x4022d1] memchr("\t    }\n\t  else\n\t    {\n\t      do\n"..., '\n', 257) = 0x025a45a0
[0x4022d1] memchr("\t  else\n\t    {\n\t      do\n\t\t{\n\t\t "..., '\n', 250) = 0x025a45a8
[0x4022d1] memchr("\t    {\n\t      do\n\t\t{\n\t\t  PREFETC"..., '\n', 242) = 0x025a45af
[0x4022d1] memchr("\t      do\n\t\t{\n\t\t  PREFETCH ();\n\t"..., '\n', 235) = 0x025a45b9
[0x4022d1] memchr("\t\t{\n\t\t  PREFETCH ();\n\t\t  if (*d+"..., '\n', 225) = 0x025a45bd
[0x4022d1] memchr("\t\t  PREFETCH ();\n\t\t  if (*d++ !="..., '\n', 221) = 0x025a45ce
[0x4022d1] memchr("\t\t  if (*d++ != (char) *p++) got"..., '\n', 204) = 0x025a45f6
[0x4022d1] memchr("\t\t}\n\t      while (--mcnt);\n\t    "..., '\n', 164) = 0x025a45fa
[0x4022d1] memchr("\t      while (--mcnt);\n\t    }\n\t "..., '\n', 160) = 0x025a4611
[0x4022d1] memchr("\t    }\n\t  SET_REGS_MATCHED ();\n "..., '\n', 137) = 0x025a4618
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 130) = 0x025a4630
[0x4022d1] memchr("          break;\n\n\n        /* Ma"..., '\n', 106) = 0x025a4641
[0x4022d1] memchr("\n\n        /* Match any character"..., '\n', 89) = 0x025a4642
[0x4022d1] memchr("\n        /* Match any character "..., '\n', 88) = 0x025a4643
[0x4022d1] memchr("        /* Match any character e"..., '\n', 87) = 0x025a468b
[0x4022d1] memchr("\tcase anychar:\n          DEBUG_P"..., '\n', 15) = 0x025a469a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5211:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          PREFETCH ();\n\n       "..., 'I', 6432) = 0x025a4710
[0x40cdf3] memchr("INE) && TRANSLATE (*d) == '\\n')\n"..., '\n', 6364) = 0x025a472f
[0x4022d1] memchr("\n          PREFETCH ();\n\n       "..., '\n', 25) = 0x025a46cc
[0x4022d1] memchr("          PREFETCH ();\n\n        "..., '\n', 24) = 0x025a46e3
[0x4022d1] memchr("\n          if ((!(bufp->syntax &"..., '\n', 1) = 0x025a46e4
[0x4022d1] memchr("          if ((!(bufp->syntax & "..., '\n', 0) = NULL
[0x4023cc] fwrite("5215:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if ((!(bufp->syntax & "..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              || (bufp->syntax &"..., 'I', 6332) = 0x025a47c1
[0x40cdf3] memchr("INT2 ("  Matched `%d'.\\n", *d);\n"..., '\n', 6187) = 0x025a47e0
[0x4022d1] memchr("              || (bufp->syntax &"..., '\n', 127) = 0x025a477e
[0x4022d1] memchr("\t    goto fail;\n\n          SET_R"..., '\n', 48) = 0x025a478e
[0x4022d1] memchr("\n          SET_REGS_MATCHED ();\n"..., '\n', 32) = 0x025a478f
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n "..., '\n', 31) = 0x025a47ae
[0x4022d1] memchr("          DEBUG_PRINT2 ("  Match"..., '\n', 0) = NULL
[0x4023cc] fwrite("5220:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("  Match"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          d++;\n\t  break;\n\n\n\tcase"..., 'I', 6155) = 0x025a4891
[0x40cdf3] memchr("INT2 ("EXECUTING charset%s.\\n", "..., '\n', 5979) = 0x025a48c4
[0x4022d1] memchr("          d++;\n\t  break;\n\n\n\tcase"..., '\n', 156) = 0x025a47ef
[0x4022d1] memchr("\t  break;\n\n\n\tcase charset:\n\tcase"..., '\n', 141) = 0x025a47f9
[0x4022d1] memchr("\n\n\tcase charset:\n\tcase charset_n"..., '\n', 131) = 0x025a47fa
[0x4022d1] memchr("\n\tcase charset:\n\tcase charset_no"..., '\n', 130) = 0x025a47fb
[0x4022d1] memchr("\tcase charset:\n\tcase charset_not"..., '\n', 129) = 0x025a480a
[0x4022d1] memchr("\tcase charset_not:\n\t  {\n\t    reg"..., '\n', 114) = 0x025a481d
[0x4022d1] memchr("\t  {\n\t    register unsigned char"..., '\n', 95) = 0x025a4822
[0x4022d1] memchr("\t    register unsigned char c;\n\t"..., '\n', 90) = 0x025a4841
[0x4022d1] memchr("\t    boolean not = (re_opcode_t)"..., '\n', 59) = 0x025a487b
[0x4022d1] memchr("\n            DEBUG_PRINT2 ("EXEC"..., '\n', 1) = 0x025a487c
[0x4022d1] memchr("            DEBUG_PRINT2 ("EXECU"..., '\n', 0) = NULL
[0x4023cc] fwrite("5231:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT2 ("EXECU"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\t    PREFETCH ();\n\t    c = TRAN"..., 'I', 5927) = 0x025a49b2
[0x40cdf3] memchr("IDTH)\n\t\t&& p[1 + c / BYTEWIDTH] "..., '\n', 5690) = 0x025a49b7
[0x4022d1] memchr("\n\t    PREFETCH ();\n\t    c = TRAN"..., '\n', 202) = 0x025a48c5
[0x4022d1] memchr("\t    PREFETCH ();\n\t    c = TRANS"..., '\n', 201) = 0x025a48d7
[0x4022d1] memchr("\t    c = TRANSLATE (*d); /* The "..., '\n', 183) = 0x025a490f
[0x4022d1] memchr("\n            /* Cast to `unsigne"..., '\n', 127) = 0x025a4910
[0x4022d1] memchr("            /* Cast to `unsigned"..., '\n', 126) = 0x025a4959
[0x4022d1] memchr("               bit list is a ful"..., '\n', 53) = 0x025a498e
[0x4022d1] memchr("\t    if (c < (unsigned) (*p * BY"..., '\n', 0) = NULL
[0x4023cc] fwrite("5238:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    if (c < (unsigned) (*p * BY"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t&& p[1 + c / BYTEWIDTH] & (1 <"..., 'I', 5684) = 0x025a49cc
[0x40cdf3] memchr("IDTH] & (1 << (c % BYTEWIDTH)))\n"..., '\n', 5664) = 0x025a49eb
[0x4022d1] memchr("\t\t&& p[1 + c / BYTEWIDTH] & (1 <"..., '\n', 0) = NULL
[0x4023cc] fwrite("5239:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t&& p[1 + c / BYTEWIDTH] & (1 <"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      not = !not;\n\n\t    p += 1 "..., 'I', 5632) = 0x025a4bf7
[0x40cdf3] memchr("INT3 ("EXECUTING start_memory %d"..., '\n', 5109) = 0x025a4c2c
[0x4022d1] memchr("\t      not = !not;\n\n\t    p += 1 "..., '\n', 512) = 0x025a49fe
[0x4022d1] memchr("\n\t    p += 1 + *p;\n\n\t    if (!no"..., '\n', 493) = 0x025a49ff
[0x4022d1] memchr("\t    p += 1 + *p;\n\n\t    if (!not"..., '\n', 492) = 0x025a4a11
[0x4022d1] memchr("\n\t    if (!not) goto fail;\n     "..., '\n', 474) = 0x025a4a12
[0x4022d1] memchr("\t    if (!not) goto fail;\n      "..., '\n', 473) = 0x025a4a2c
[0x4022d1] memchr("            \n\t    SET_REGS_MATCH"..., '\n', 447) = 0x025a4a39
[0x4022d1] memchr("\t    SET_REGS_MATCHED ();\n      "..., '\n', 434) = 0x025a4a53
[0x4022d1] memchr("            d++;\n\t    break;\n\t  "..., '\n', 408) = 0x025a4a64
[0x4022d1] memchr("\t    break;\n\t  }\n\n\n        /* Th"..., '\n', 391) = 0x025a4a70
[0x4022d1] memchr("\t  }\n\n\n        /* The beginning "..., '\n', 379) = 0x025a4a75
[0x4022d1] memchr("\n\n        /* The beginning of a "..., '\n', 374) = 0x025a4a76
[0x4022d1] memchr("\n        /* The beginning of a g"..., '\n', 373) = 0x025a4a77
[0x4022d1] memchr("        /* The beginning of a gr"..., '\n', 372) = 0x025a4abb
[0x4022d1] memchr("           The arguments are the"..., '\n', 304) = 0x025a4b06
[0x4022d1] memchr("           number of groups inne"..., '\n', 229) = 0x025a4b4b
[0x4022d1] memchr("           matched within the gr"..., '\n', 160) = 0x025a4b8c
[0x4022d1] memchr("           registers data struct"..., '\n', 95) = 0x025a4bd0
[0x4022d1] memchr("        case start_memory:\n\t  DE"..., '\n', 27) = 0x025a4beb
[0x4022d1] memchr("\t  DEBUG_PRINT3 ("EXECUTING star"..., '\n', 0) = NULL
[0x4023cc] fwrite("5258:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT3 ("EXECUTING star"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* Find out if this g"..., 'I', 5055) = 0x025a4cd6
[0x40cdf3] memchr("ING_P (reg_info[*p]) == MATCH_NU"..., '\n', 4886) = 0x025a4d05
[0x4022d1] memchr("\n          /* Find out if this g"..., '\n', 137) = 0x025a4c2d
[0x4022d1] memchr("          /* Find out if this gr"..., '\n', 136) = 0x025a4c71
[0x4022d1] memchr("\t  p1 = p;\t\t/* To send to group_"..., '\n', 68) = 0x025a4caa
[0x4022d1] memchr("          \n          if (REG_MAT"..., '\n', 11) = 0x025a4cb5
[0x4022d1] memchr("          if (REG_MATCH_NULL_STR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5263:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (REG_MATCH_NULL_STR"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            REG_MATCH_NULL_STRIN"..., 'I', 4838) = 0x025a4d24
[0x40cdf3] memchr("ING_P (reg_info[*p]) \n          "..., '\n', 4808) = 0x025a4d39
[0x4022d1] memchr("            REG_MATCH_NULL_STRIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5264:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            REG_MATCH_NULL_STRIN"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              = group_match_null"..., 'I', 4786) = 0x025a4f0a
[0x40cdf3] memchr("ING_P (reg_info[*p])\n           "..., '\n', 4322) = 0x025a4f1e
[0x4022d1] memchr("              = group_match_null"..., '\n', 417) = 0x025a4d7a
[0x4022d1] memchr("\n          /* Save the position "..., '\n', 352) = 0x025a4d7b
[0x4022d1] memchr("          /* Save the position i"..., '\n', 351) = 0x025a4dc4
[0x4022d1] memchr("             we were at this ope"..., '\n', 278) = 0x025a4e0a
[0x4022d1] memchr("             operated upon by a "..., '\n', 208) = 0x025a4e53
[0x4022d1] memchr("             against `ab'; then "..., '\n', 135) = 0x025a4e99
[0x4022d1] memchr("             the string in case "..., '\n', 65) = 0x025a4eda
[0x4022d1] memchr("          old_regstart[*p] = REG"..., '\n', 0) = NULL
[0x4023cc] fwrite("5272:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          old_regstart[*p] = REG"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                             ? R"..., 'I', 4301) = 0x025a4fa2
[0x40cdf3] memchr("INT2 ("  old_regstart: %d\\n", \n\t"..., '\n', 4170) = 0x025a4fc0
[0x4022d1] memchr("                             ? R"..., '\n', 120) = 0x025a4f69
[0x4022d1] memchr("                             : r"..., '\n', 45) = 0x025a4f96
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("  old_regstart"..., '\n', 0) = NULL
[0x4023cc] fwrite("5275:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT2 ("  old_regstart"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t POINTER_TO_OFFSET (old_regst"..., 'I', 4139) = 0x025a4fc7
[0x40cdf3] memchr("INTER_TO_OFFSET (old_regstart[*p"..., '\n', 4133) = 0x025a4feb
[0x4022d1] memchr("\t\t\t POINTER_TO_OFFSET (old_regst"..., '\n', 0) = NULL
[0x4023cc] fwrite("5276:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t\t POINTER_TO_OFFSET (old_regst"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          regstart[*p] = d;\n\t  "..., 'I', 4096) = 0x025a5014
[0x40cdf3] memchr("INT2 ("  regstart: %d\\n", POINTE"..., '\n', 4056) = 0x025a5050
[0x4022d1] memchr("\n          regstart[*p] = d;\n\t  "..., '\n', 29) = 0x025a4fec
[0x4022d1] memchr("          regstart[*p] = d;\n\t  D"..., '\n', 28) = 0x025a5008
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("  regstart: %d"..., '\n', 0) = NULL
[0x4023cc] fwrite("5279:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT2 ("  regstart: %d"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          IS_ACTIVE (reg_info[*"..., 'I', 3995) = 0x025a505c
[0x40cdf3] memchr("IS_ACTIVE (reg_info[*p]) = 1;\n  "..., '\n', 3984) = 0x025a5079
[0x4022d1] memchr("\n          IS_ACTIVE (reg_info[*"..., '\n', 1) = 0x025a5051
[0x4022d1] memchr("          IS_ACTIVE (reg_info[*p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5281:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          IS_ACTIVE (reg_info[*p"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          MATCHED_SOMETHING (reg"..., 'I', 3954) = 0x025a5092
[0x40cdf3] memchr("ING (reg_info[*p]) = 0;\n        "..., '\n', 3930) = 0x025a50a9
[0x4022d1] memchr("          MATCHED_SOMETHING (reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("5282:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          MATCHED_SOMETHING (reg"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n          /* This is "..., 'I', 3906) = 0x025a512a
[0x40cdf3] memchr("If nothing was active before, th"..., '\n', 3778) = 0x025a5165
[0x4022d1] memchr("          \n          /* This is "..., '\n', 115) = 0x025a50b4
[0x4022d1] memchr("          /* This is the new hig"..., '\n', 104) = 0x025a50ee
[0x4022d1] memchr("          highest_active_reg = *"..., '\n', 46) = 0x025a5111
[0x4022d1] memchr("          \n          /* If nothi"..., '\n', 11) = 0x025a511c
[0x4022d1] memchr("          /* If nothing was acti"..., '\n', 0) = NULL
[0x4023cc] fwrite("5287:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If nothing was acti"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             register.  */\n     "..., 'I', 3718) = 0x025a51b1
[0x40cdf3] memchr("IVE_REG)\n            lowest_acti"..., '\n', 3643) = 0x025a51b9
[0x4022d1] memchr("             register.  */\n     "..., '\n', 27) = 0x025a5180
[0x4022d1] memchr("          if (lowest_active_reg "..., '\n', 0) = NULL
[0x4023cc] fwrite("5289:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (lowest_active_reg "..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            lowest_active_reg = "..., 'I', 3634) = 0x025a528c
[0x40cdf3] memchr("Its\n           arguments are the"..., '\n', 3424) = 0x025a528f
[0x4022d1] memchr("            lowest_active_reg = "..., '\n', 144) = 0x025a51dd
[0x4022d1] memchr("\n          /* Move past the regi"..., '\n', 108) = 0x025a51de
[0x4022d1] memchr("          /* Move past the regis"..., '\n', 107) = 0x025a5224
[0x4022d1] memchr("          p += 2;\n          brea"..., '\n', 37) = 0x025a5236
[0x4022d1] memchr("          break;\n\n\n        /* Th"..., '\n', 19) = 0x025a5247
[0x4022d1] memchr("\n\n        /* The stop_memory opc"..., '\n', 2) = 0x025a5248
[0x4022d1] memchr("\n        /* The stop_memory opco"..., '\n', 1) = 0x025a5249
[0x4022d1] memchr("        /* The stop_memory opcod"..., '\n', 0) = NULL
[0x4023cc] fwrite("5297:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        /* The stop_memory opcod"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("           arguments are the sam"..., 'I', 3420) = 0x025a5327
[0x40cdf3] memchr("INT3 ("EXECUTING stop_memory %d "..., '\n', 3269) = 0x025a535b
[0x4022d1] memchr("           arguments are the sam"..., '\n', 140) = 0x025a52d1
[0x4022d1] memchr("           number, and the numbe"..., '\n', 74) = 0x025a5308
[0x4022d1] memchr("\tcase stop_memory:\n\t  DEBUG_PRIN"..., '\n', 19) = 0x025a531b
[0x4022d1] memchr("\t  DEBUG_PRINT3 ("EXECUTING stop"..., '\n', 0) = NULL
[0x4023cc] fwrite("5301:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT3 ("EXECUTING stop"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             \n          /* We ne"..., 'I', 3216) = 0x025a54f5
[0x40cdf3] memchr("ING_P (reg_info[*p])\n           "..., '\n', 2807) = 0x025a5509
[0x4022d1] memchr("             \n          /* We ne"..., '\n', 364) = 0x025a5369
[0x4022d1] memchr("          /* We need to save the"..., '\n', 350) = 0x025a53b3
[0x4022d1] memchr("             this close-group op"..., '\n', 276) = 0x025a53f8
[0x4022d1] memchr("             upon by a repetitio"..., '\n', 207) = 0x025a543f
[0x4022d1] memchr("             against `aba'; then"..., '\n', 136) = 0x025a5486
[0x4022d1] memchr("             the string in case "..., '\n', 65) = 0x025a54c7
[0x4022d1] memchr("          old_regend[*p] = REG_M"..., '\n', 0) = NULL
[0x4023cc] fwrite("5308:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          old_regend[*p] = REG_M"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                           ? REG"..., 'I', 2786) = 0x025a556e
[0x40cdf3] memchr("INT2 ("      old_regend: %d\\n", "..., '\n', 2686) = 0x025a558e
[0x4022d1] memchr("                           ? REG"..., '\n', 89) = 0x025a554e
[0x4022d1] memchr("\t\t\t   : regend[*p];\n\t  DEBUG_PRI"..., '\n', 20) = 0x025a5562
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("      old_rege"..., '\n', 0) = NULL
[0x4023cc] fwrite("5311:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT2 ("      old_rege"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t POINTER_TO_OFFSET (old_regen"..., 'I', 2653) = 0x025a5595
[0x40cdf3] memchr("INTER_TO_OFFSET (old_regend[*p])"..., '\n', 2647) = 0x025a55b7
[0x4022d1] memchr("\t\t\t POINTER_TO_OFFSET (old_regen"..., '\n', 0) = NULL
[0x4023cc] fwrite("5312:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t\t POINTER_TO_OFFSET (old_regen"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          regend[*p] = d;\n\t  DE"..., 'I', 2612) = 0x025a55de
[0x40cdf3] memchr("INT2 ("      regend: %d\\n", POIN"..., '\n', 2574) = 0x025a561a
[0x4022d1] memchr("\n          regend[*p] = d;\n\t  DE"..., '\n', 27) = 0x025a55b8
[0x4022d1] memchr("          regend[*p] = d;\n\t  DEB"..., '\n', 26) = 0x025a55d2
[0x4022d1] memchr("\t  DEBUG_PRINT2 ("      regend: "..., '\n', 0) = NULL
[0x4023cc] fwrite("5315:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  DEBUG_PRINT2 ("      regend: "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* This register isn'"..., 'I', 2513) = 0x025a565b
[0x40cdf3] memchr("IS_ACTIVE (reg_info[*p]) = 0;\n  "..., '\n', 2449) = 0x025a5678
[0x4022d1] memchr("\n          /* This register isn'"..., '\n', 54) = 0x025a561b
[0x4022d1] memchr("          /* This register isn't"..., '\n', 53) = 0x025a5650
[0x4022d1] memchr("          IS_ACTIVE (reg_info[*p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5318:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          IS_ACTIVE (reg_info[*p"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n          /* If this "..., 'I', 2419) = 0x025a5691
[0x40cdf3] memchr("If this was the only register ac"..., '\n', 2395) = 0x025a56c8
[0x4022d1] memchr("          \n          /* If this "..., '\n', 11) = 0x025a5683
[0x4022d1] memchr("          /* If this was the onl"..., '\n', 0) = NULL
[0x4023cc] fwrite("5320:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If this was the onl"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             anymore.  */\n      "..., 'I', 2339) = 0x025a5757
[0x40cdf3] memchr("IVE_REG;\n              highest_a"..., '\n', 2197) = 0x025a575f
[0x4022d1] memchr("             anymore.  */\n      "..., '\n', 95) = 0x025a56e2
[0x4022d1] memchr("          if (lowest_active_reg "..., '\n', 69) = 0x025a5719
[0x4022d1] memchr("            {\n              lowe"..., '\n', 14) = 0x025a5727
[0x4022d1] memchr("              lowest_active_reg "..., '\n', 0) = NULL
[0x4023cc] fwrite("5324:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              lowest_active_reg "..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              highest_active_reg"..., 'I', 2188) = 0x025a5787
[0x40cdf3] memchr("IGHEST_ACTIVE_REG;\n            }"..., '\n', 2149) = 0x025a5799
[0x4022d1] memchr("              highest_active_reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("5325:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              highest_active_reg"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            }\n          else\n   "..., 'I', 2130) = 0x025a5908
[0x40cdf3] memchr("IS_ACTIVE (reg_info[r]))\n       "..., '\n', 1764) = 0x025a5920
[0x4022d1] memchr("            }\n          else\n   "..., '\n', 335) = 0x025a57a7
[0x4022d1] memchr("          else\n            { /* "..., '\n', 321) = 0x025a57b6
[0x4022d1] memchr("            { /* We must scan fo"..., '\n', 306) = 0x025a57ff
[0x4022d1] memchr("                 it isn't necess"..., '\n', 233) = 0x025a5841
[0x4022d1] memchr("                 (a(b)c(d(e)f)g)"..., '\n', 167) = 0x025a5889
[0x4022d1] memchr("                 new highest act"..., '\n', 95) = 0x025a58c0
[0x4022d1] memchr("              unsigned char r = "..., '\n', 40) = 0x025a58e8
[0x4022d1] memchr("              while (r > 0 && !I"..., '\n', 0) = NULL
[0x4023cc] fwrite("5333:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              while (r > 0 && !I"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                r--;\n           "..., 'I', 1739) = 0x025a5956
[0x40cdf3] memchr("If we end up at register zero, t"..., '\n', 1686) = 0x025a598d
[0x4022d1] memchr("                r--;\n           "..., '\n', 36) = 0x025a5935
[0x4022d1] memchr("              \n              /* "..., '\n', 15) = 0x025a5944
[0x4022d1] memchr("              /* If we end up at"..., '\n', 0) = NULL
[0x4023cc] fwrite("5336:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If we end up at"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 the registers a"..., 'I', 1630) = 0x025a5b72
[0x40cdf3] memchr("IVE_REG;\n                  highe"..., '\n', 1146) = 0x025a5b7a
[0x4022d1] memchr("                 the registers a"..., '\n', 433) = 0x025a59d7
[0x4022d1] memchr("                 a `start_memory"..., '\n', 359) = 0x025a5a1e
[0x4022d1] memchr("                 `stop_memory'. "..., '\n', 288) = 0x025a5a5e
[0x4022d1] memchr("                 registers 1 and"..., '\n', 224) = 0x025a5aa7
[0x4022d1] memchr("                 back to the sec"..., '\n', 151) = 0x025a5aeb
[0x4022d1] memchr("                 Thus, nothing i"..., '\n', 83) = 0x025a5b19
[0x4022d1] memchr("\t      if (r == 0)\n             "..., '\n', 37) = 0x025a5b2c
[0x4022d1] memchr("                {\n              "..., '\n', 18) = 0x025a5b3e
[0x4022d1] memchr("                  lowest_active_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5345:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  lowest_active_"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  highest_active"..., 'I', 1137) = 0x025a5ba6
[0x40cdf3] memchr("IGHEST_ACTIVE_REG;\n             "..., '\n', 1094) = 0x025a5bb8
[0x4022d1] memchr("                  highest_active"..., '\n', 0) = NULL
[0x4023cc] fwrite("5346:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  highest_active"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                }\n              "..., 'I', 1075) = 0x025a5c2c
[0x40cdf3] memchr("If just failed to match somethin"..., '\n', 960) = 0x025a5c65
[0x4022d1] memchr("                }\n              "..., '\n', 102) = 0x025a5bca
[0x4022d1] memchr("              else\n             "..., '\n', 84) = 0x025a5bdd
[0x4022d1] memchr("                highest_active_r"..., '\n', 65) = 0x025a5c05
[0x4022d1] memchr("            }\n          \n       "..., '\n', 25) = 0x025a5c13
[0x4022d1] memchr("          \n          /* If just "..., '\n', 11) = 0x025a5c1e
[0x4022d1] memchr("          /* If just failed to m"..., '\n', 0) = NULL
[0x4023cc] fwrite("5352:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If just failed to m"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             group that's operat"..., 'I', 902) = 0x025a5d73
[0x40cdf3] memchr("ING (reg_info[*p])\n             "..., '\n', 633) = 0x025a5d85
[0x4022d1] memchr("             group that's operat"..., '\n', 239) = 0x025a5cac
[0x4022d1] memchr("             force exit from the"..., '\n', 168) = 0x025a5cf0
[0x4022d1] memchr("             information for thi"..., '\n', 100) = 0x025a5d37
[0x4022d1] memchr("             last match.  */\n   "..., '\n', 29) = 0x025a5d54
[0x4022d1] memchr("          if ((!MATCHED_SOMETHIN"..., '\n', 0) = NULL
[0x4023cc] fwrite("5357:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if ((!MATCHED_SOMETHIN"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               || (re_opcode_t) "..., 'I', 614) = 0x025a5f6a
[0x40cdf3] memchr("INCR (mcnt, p1);\n\t\t    if (is_a_"..., '\n', 130) = 0x025a5f7a
[0x4022d1] memchr("               || (re_opcode_t) "..., '\n', 445) = 0x025a5dbc
[0x4022d1] memchr("\t      && (p + 2) < pend)       "..., '\n', 390) = 0x025a5de4
[0x4022d1] memchr("            {\n              bool"..., '\n', 350) = 0x025a5df2
[0x4022d1] memchr("              boolean is_a_jump_"..., '\n', 336) = 0x025a5e1d
[0x4022d1] memchr("              \n              p1 "..., '\n', 293) = 0x025a5e2c
[0x4022d1] memchr("              p1 = p + 2;\n      "..., '\n', 278) = 0x025a5e46
[0x4022d1] memchr("              mcnt = 0;\n        "..., '\n', 252) = 0x025a5e5e
[0x4022d1] memchr("              switch ((re_opcode"..., '\n', 228) = 0x025a5e89
[0x4022d1] memchr("                {\n              "..., '\n', 185) = 0x025a5e9b
[0x4022d1] memchr("                  case jump_n:\n\t"..., '\n', 167) = 0x025a5eba
[0x4022d1] memchr("\t\t    is_a_jump_n = true;\n      "..., '\n', 136) = 0x025a5ed4
[0x4022d1] memchr("                  case pop_failu"..., '\n', 110) = 0x025a5efd
[0x4022d1] memchr("\t\t  case maybe_pop_jump:\n\t\t  cas"..., '\n', 69) = 0x025a5f16
[0x4022d1] memchr("\t\t  case jump:\n\t\t  case dummy_fa"..., '\n', 44) = 0x025a5f25
[0x4022d1] memchr("\t\t  case dummy_failure_jump:\n   "..., '\n', 29) = 0x025a5f42
[0x4022d1] memchr("                    EXTRACT_NUMB"..., '\n', 0) = NULL
[0x4023cc] fwrite("5373:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    EXTRACT_NUMB"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t    if (is_a_jump_n)\n\t\t      p"..., 'I', 113) = NULL
[0x4022d1] memchr("\t\t    if (is_a_jump_n)\n\t\t      p"..., '\n', 113) = 0x025a5f91
[0x4022d1] memchr("\t\t      p1 += 2;\n               "..., '\n', 90) = 0x025a5fa2
[0x4022d1] memchr("                    break;\n     "..., '\n', 73) = 0x025a5fbd
[0x4022d1] memchr("                  \n             "..., '\n', 46) = 0x025a5fd0
[0x4022d1] memchr("                  default:\n     "..., '\n', 27) = 0x025a5feb
[0x4022d1] memchr("                    ", '\n', 0) = NULL
[0x4020b3] memmove(0x259dfec, 0x25a5fec, 20, 0x25a5fec, 0x7f498147f260) = 0x259dfec
[0x402213] read(3, "/* do nothing */ ;\n             "..., 32768) = 32768
[0x40bc2b] memchr("                    /* do nothin"..., 'I', 32767) = 0x0259e052
[0x40cdf3] memchr("If the next operation is a jump "..., '\n', 32665) = 0x0259e08a
[0x4022d1] memchr("                    /* do nothin"..., '\n', 85) = 0x0259e012
[0x4022d1] memchr("                }\n\t      p1 += m"..., '\n', 46) = 0x0259e024
[0x4022d1] memchr("\t      p1 += mcnt;\n        \n    "..., '\n', 28) = 0x0259e037
[0x4022d1] memchr("        \n              /* If the"..., '\n', 9) = 0x0259e040
[0x4022d1] memchr("              /* If the next ope"..., '\n', 0) = NULL
[0x4023cc] fwrite("5383:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If the next ope"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t         to an on_failure_jump "..., 'I', 32608) = 0x0259e23d
[0x40cdf3] memchr("If this group ever matched anyth"..., '\n', 32174) = 0x0259e26e
[0x4022d1] memchr("\t         to an on_failure_jump "..., '\n', 413) = 0x0259e0c8
[0x4022d1] memchr("                 corresponding t"..., '\n', 351) = 0x0259e10f
[0x4022d1] memchr("                 by forcing a fa"..., '\n', 280) = 0x0259e154
[0x4022d1] memchr("                 on_failure_jump"..., '\n', 211) = 0x0259e197
[0x4022d1] memchr("              if (mcnt < 0 && (r"..., '\n', 144) = 0x0259e1da
[0x4022d1] memchr("                  && (re_opcode_"..., '\n', 77) = 0x0259e223
[0x4022d1] memchr("\t\t{\n                  /* If this"..., '\n', 4) = 0x0259e227
[0x4022d1] memchr("                  /* If this gro"..., '\n', 0) = NULL
[0x4023cc] fwrite("5391:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  /* If this gro"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                     what its re"..., 'I', 32124) = 0x0259e485
[0x40cdf3] memchr("ING (reg_info[*p]))\n\t\t    {\n\t\t  "..., '\n', 31590) = 0x0259e498
[0x4022d1] memchr("                     what its re"..., '\n', 493) = 0x0259e2b3
[0x4022d1] memchr("                     failed matc"..., '\n', 424) = 0x0259e2fb
[0x4022d1] memchr("                     regstart[1]"..., '\n', 352) = 0x0259e33d
[0x4022d1] memchr("                     against `ab"..., '\n', 286) = 0x0259e36f
[0x4022d1] memchr("                     \n          "..., '\n', 236) = 0x0259e385
[0x4022d1] memchr("                     Also restor"..., '\n', 214) = 0x0259e3cb
[0x4022d1] memchr("                     e.g., `((a*"..., '\n', 144) = 0x0259e414
[0x4022d1] memchr("                     otherwise g"..., '\n', 71) = 0x0259e445
[0x4022d1] memchr("                     \n          "..., '\n', 22) = 0x0259e45b
[0x4022d1] memchr("                  if (EVER_MATCH"..., '\n', 0) = NULL
[0x4023cc] fwrite("5401:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  if (EVER_MATCH"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t    {\n\t\t      unsigned r; \n   "..., 'I', 31570) = 0x0259e4e8
[0x40cdf3] memchr("ING (reg_info[*p]) = 0;\n        "..., '\n', 31491) = 0x0259e4ff
[0x4022d1] memchr("\t\t    {\n\t\t      unsigned r; \n   "..., '\n', 38) = 0x0259e4a0
[0x4022d1] memchr("\t\t      unsigned r; \n        \n  "..., '\n', 30) = 0x0259e4b5
[0x4022d1] memchr("        \n                      E"..., '\n', 9) = 0x0259e4be
[0x4022d1] memchr("                      EVER_MATCH"..., '\n', 0) = NULL
[0x4023cc] fwrite("5405:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                      EVER_MATCH"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      \n\t\t      /"..., 'I', 31467) = 0x0259e6fe
[0x40cdf3] memchr("INCR (mcnt, p1);\n               "..., '\n', 30957) = 0x0259e70e
[0x4022d1] memchr("                      \n\t\t      /"..., '\n', 473) = 0x0259e516
[0x4022d1] memchr("\t\t      /* Restore this and inne"..., '\n', 450) = 0x0259e558
[0x4022d1] memchr("                      for (r = *"..., '\n', 384) = 0x0259e593
[0x4022d1] memchr("                        {\n      "..., '\n', 325) = 0x0259e5ad
[0x4022d1] memchr("                          regsta"..., '\n', 299) = 0x0259e5e6
[0x4022d1] memchr("\n                          /* xx"..., '\n', 242) = 0x0259e5e7
[0x4022d1] memchr("                          /* xx "..., '\n', 241) = 0x0259e61a
[0x4022d1] memchr("                          if ((i"..., '\n', 190) = 0x0259e662
[0x4022d1] memchr("                            rege"..., '\n', 118) = 0x0259e699
[0x4022d1] memchr("                        }     \n "..., '\n', 63) = 0x0259e6b8
[0x4022d1] memchr("                    }\n\t\t  p1++;\n"..., '\n', 32) = 0x0259e6ce
[0x4022d1] memchr("\t\t  p1++;\n                  EXTR"..., '\n', 10) = 0x0259e6d8
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("5418:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  PUSH_FAILURE_P"..., 'I', 30940) = 0x0259e728
[0x40cdf3] memchr("ILURE_POINT (p1 + mcnt, d, -2);\n"..., '\n', 30915) = 0x0259e747
[0x4022d1] memchr("                  PUSH_FAILURE_P"..., '\n', 0) = NULL
[0x4023cc] fwrite("5419:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  PUSH_FAILURE_P"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n                  goto fail;\n  "..., 'I', 30883) = 0x0259e926
[0x40cdf3] memchr("INT2 ("EXECUTING duplicate %d.\\n"..., '\n', 30405) = 0x0259e950
[0x4022d1] memchr("\n                  goto fail;\n  "..., '\n', 465) = 0x0259e748
[0x4022d1] memchr("                  goto fail;\n   "..., '\n', 464) = 0x0259e765
[0x4022d1] memchr("                }\n            }\n"..., '\n', 435) = 0x0259e777
[0x4022d1] memchr("            }\n          \n       "..., '\n', 417) = 0x0259e785
[0x4022d1] memchr("          \n          /* Move pas"..., '\n', 403) = 0x0259e790
[0x4022d1] memchr("          /* Move past the regis"..., '\n', 392) = 0x0259e7da
[0x4022d1] memchr("          p += 2;\n          brea"..., '\n', 318) = 0x0259e7ec
[0x4022d1] memchr("          break;\n\n\n\t/* \\<digit> "..., '\n', 300) = 0x0259e7fd
[0x4022d1] memchr("\n\n\t/* \\<digit> has been turned i"..., '\n', 283) = 0x0259e7fe
[0x4022d1] memchr("\n\t/* \\<digit> has been turned in"..., '\n', 282) = 0x0259e7ff
[0x4022d1] memchr("\t/* \\<digit> has been turned int"..., '\n', 281) = 0x0259e840
[0x4022d1] memchr("           followed by the numer"..., '\n', 216) = 0x0259e890
[0x4022d1] memchr("        case duplicate:\n\t  {\n\t  "..., '\n', 136) = 0x0259e8a8
[0x4022d1] memchr("\t  {\n\t    register const char *d"..., '\n', 112) = 0x0259e8ad
[0x4022d1] memchr("\t    register const char *d2, *d"..., '\n', 107) = 0x0259e8d3
[0x4022d1] memchr("\t    int regno = *p++;   /* Get "..., '\n', 69) = 0x0259e918
[0x4022d1] memchr("\t    DEBUG_PRINT2 ("EXECUTING du"..., '\n', 0) = NULL
[0x4023cc] fwrite("5436:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    DEBUG_PRINT2 ("EXECUTING du"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\t    /* Can't back reference a "..., 'I', 30362) = 0x0259eb90
[0x40cdf3] memchr("IRST_STRING_P (regstart[regno]) "..., '\n', 29787) = 0x0259ebb0
[0x4022d1] memchr("\n\t    /* Can't back reference a "..., '\n', 552) = 0x0259e951
[0x4022d1] memchr("\t    /* Can't back reference a g"..., '\n', 551) = 0x0259e995
[0x4022d1] memchr("            if (REG_UNSET (regst"..., '\n', 483) = 0x0259e9df
[0x4022d1] memchr("              goto fail;\n       "..., '\n', 409) = 0x0259e9f8
[0x4022d1] memchr("              \n            /* Wh"..., '\n', 384) = 0x0259ea07
[0x4022d1] memchr("            /* Where in input to"..., '\n', 369) = 0x0259ea43
[0x4022d1] memchr("            d2 = regstart[regno]"..., '\n', 309) = 0x0259ea65
[0x4022d1] memchr("            \n            /* Wher"..., '\n', 275) = 0x0259ea72
[0x4022d1] memchr("            /* Where to stop mat"..., '\n', 262) = 0x0259eab8
[0x4022d1] memchr("               the place to stop"..., '\n', 192) = 0x0259eaff
[0x4022d1] memchr("               set to the place "..., '\n', 121) = 0x0259eb47
[0x4022d1] memchr("               the end of the fi"..., '\n', 49) = 0x0259eb77
[0x4022d1] memchr("\n            dend2 = ((FIRST_STR"..., '\n', 1) = 0x0259eb78
[0x4022d1] memchr("            dend2 = ((FIRST_STRI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5450:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            dend2 = ((FIRST_STRI"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t      == FIRST_STRING_P (regen"..., 'I', 29754) = 0x0259ebbd
[0x40cdf3] memchr("IRST_STRING_P (regend[regno]))\n\t"..., '\n', 29742) = 0x0259ebdb
[0x4022d1] memchr("\t\t      == FIRST_STRING_P (regen"..., '\n', 0) = NULL
[0x4023cc] fwrite("5451:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t      == FIRST_STRING_P (regen"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t     ? regend[regno] : end_mat"..., 'I', 29711) = 0x0259ec1f
[0x40cdf3] memchr("If necessary, advance to next se"..., '\n', 29644) = 0x0259ec50
[0x4022d1] memchr("\t\t     ? regend[regno] : end_mat"..., '\n', 62) = 0x0259ec02
[0x4022d1] memchr("\t    for (;;)\n\t      {\n\t\t/* If n"..., '\n', 23) = 0x0259ec10
[0x4022d1] memchr("\t      {\n\t\t/* If necessary, adva"..., '\n', 9) = 0x0259ec19
[0x4022d1] memchr("\t\t/* If necessary, advance to ne"..., '\n', 0) = NULL
[0x4023cc] fwrite("5455:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t/* If necessary, advance to ne"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                   contents.  */"..., 'I', 29594) = 0x0259edc1
[0x40cdf3] memchr("If necessary, advance to next se"..., '\n', 29226) = 0x0259edf3
[0x4022d1] memchr("                   contents.  */"..., '\n', 363) = 0x0259ec71
[0x4022d1] memchr("\t\twhile (d2 == dend2)\n\t\t  {\n\t\t  "..., '\n', 330) = 0x0259ec87
[0x4022d1] memchr("\t\t  {\n\t\t    if (dend2 == end_mat"..., '\n', 308) = 0x0259ec8d
[0x4022d1] memchr("\t\t    if (dend2 == end_match_2) "..., '\n', 302) = 0x0259ecb4
[0x4022d1] memchr("\t\t    if (dend2 == regend[regno]"..., '\n', 263) = 0x0259ecdd
[0x4022d1] memchr("\n                    /* End of s"..., '\n', 222) = 0x0259ecde
[0x4022d1] memchr("                    /* End of st"..., '\n', 221) = 0x0259ed1e
[0x4022d1] memchr("                    d2 = string2"..., '\n', 157) = 0x0259ed40
[0x4022d1] memchr("                    dend2 = rege"..., '\n', 123) = 0x0259ed6b
[0x4022d1] memchr("\t\t  }\n\t\t/* At end of register co"..., '\n', 80) = 0x0259ed71
[0x4022d1] memchr("\t\t/* At end of register contents"..., '\n', 74) = 0x0259eda0
[0x4022d1] memchr("\t\tif (d2 == dend2) break;\n\n\t\t/* "..., '\n', 27) = 0x0259edba
[0x4022d1] memchr("\n\t\t/* If necessary, advance to n"..., '\n', 1) = 0x0259edbb
[0x4022d1] memchr("\t\t/* If necessary, advance to ne"..., '\n', 0) = NULL
[0x4023cc] fwrite("5469:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t/* If necessary, advance to ne"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\tPREFETCH ();\n\n\t\t/* How many ch"..., 'I', 29175) = 0x0259f125
[0x40cdf3] memchr("INT1 ("EXECUTING begline.\\n");\n "..., '\n', 28358) = 0x0259f143
[0x4022d1] memchr("\t\tPREFETCH ();\n\n\t\t/* How many ch"..., '\n', 799) = 0x0259ee02
[0x4022d1] memchr("\n\t\t/* How many characters left i"..., '\n', 784) = 0x0259ee03
[0x4022d1] memchr("\t\t/* How many characters left in"..., '\n', 783) = 0x0259ee3f
[0x4022d1] memchr("\t\tmcnt = dend - d;\n             "..., '\n', 723) = 0x0259ee52
[0x4022d1] memchr("                \n\t\t/* Want how m"..., '\n', 704) = 0x0259ee63
[0x4022d1] memchr("\t\t/* Want how many consecutive c"..., '\n', 687) = 0x0259ee9d
[0x4022d1] memchr("                   one shot, so,"..., '\n', 629) = 0x0259eee2
[0x4022d1] memchr("                if (mcnt > dend2"..., '\n', 560) = 0x0259ef09
[0x4022d1] memchr("\t\t  mcnt = dend2 - d2;\n         "..., '\n', 521) = 0x0259ef20
[0x4022d1] memchr("                  \n\t\t/* Compare "..., '\n', 498) = 0x0259ef33
[0x4022d1] memchr("\t\t/* Compare that many; failure "..., '\n', 479) = 0x0259ef6a
[0x4022d1] memchr("                   past them.  *"..., '\n', 424) = 0x0259ef8c
[0x4022d1] memchr("\t\tif (translate \n               "..., '\n', 390) = 0x0259ef9d
[0x4022d1] memchr("                    ? bcmp_trans"..., '\n', 373) = 0x0259efdc
[0x4022d1] memchr("                    : bcmp (d, d"..., '\n', 310) = 0x0259f006
[0x4022d1] memchr("\t\t  goto fail;\n\t\td += mcnt, d2 +"..., '\n', 268) = 0x0259f015
[0x4022d1] memchr("\t\td += mcnt, d2 += mcnt;\n\t      "..., '\n', 253) = 0x0259f02e
[0x4022d1] memchr("\t      }\n\t  }\n\t  break;\n\n\n      "..., '\n', 228) = 0x0259f037
[0x4022d1] memchr("\t  }\n\t  break;\n\n\n        /* begl"..., '\n', 219) = 0x0259f03c
[0x4022d1] memchr("\t  break;\n\n\n        /* begline m"..., '\n', 214) = 0x0259f046
[0x4022d1] memchr("\n\n        /* begline matches the"..., '\n', 204) = 0x0259f047
[0x4022d1] memchr("\n        /* begline matches the "..., '\n', 203) = 0x0259f048
[0x4022d1] memchr("        /* begline matches the e"..., '\n', 202) = 0x0259f093
[0x4022d1] memchr("           (unless `not_bol' is "..., '\n', 127) = 0x0259f0cb
[0x4022d1] memchr("           `newline_anchor' is s"..., '\n', 71) = 0x0259f103
[0x4022d1] memchr("\tcase begline:\n          DEBUG_P"..., '\n', 15) = 0x0259f112
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5496:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n          if (AT_STRI"..., 'I', 28327) = 0x0259f163
[0x40cdf3] memchr("INGS_BEG (d))\n            {\n    "..., '\n', 28296) = 0x0259f170
[0x4022d1] memchr("          \n          if (AT_STRI"..., '\n', 11) = 0x0259f14e
[0x4022d1] memchr("          if (AT_STRINGS_BEG (d)"..., '\n', 0) = NULL
[0x4023cc] fwrite("5498:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (AT_STRINGS_BEG (d)"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            {\n              if ("..., 'I', 28282) = 0x0259f22e
[0x40cdf3] memchr("In all other cases, we fail.  */"..., '\n', 28093) = 0x0259f24e
[0x4022d1] memchr("            {\n              if ("..., '\n', 176) = 0x0259f17e
[0x4022d1] memchr("              if (!bufp->not_bol"..., '\n', 162) = 0x0259f1a7
[0x4022d1] memchr("            }\n          else if "..., '\n', 121) = 0x0259f1b5
[0x4022d1] memchr("          else if (d[-1] == '\\n'"..., '\n', 107) = 0x0259f1ef
[0x4022d1] memchr("            {\n              brea"..., '\n', 49) = 0x0259f1fd
[0x4022d1] memchr("              break;\n           "..., '\n', 35) = 0x0259f212
[0x4022d1] memchr("            }\n          /* In al"..., '\n', 14) = 0x0259f220
[0x4022d1] memchr("          /* In all other cases,"..., '\n', 0) = NULL
[0x4023cc] fwrite("5506:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* In all other cases,"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          goto fail;\n\n\n        /"..., 'I', 28060) = 0x0259f2b6
[0x40cdf3] memchr("INT1 ("EXECUTING endline.\\n");\n\n"..., '\n', 27957) = 0x0259f2d4
[0x4022d1] memchr("          goto fail;\n\n\n        /"..., '\n', 85) = 0x0259f263
[0x4022d1] memchr("\n\n        /* endline is the dual"..., '\n', 64) = 0x0259f264
[0x4022d1] memchr("\n        /* endline is the dual "..., '\n', 63) = 0x0259f265
[0x4022d1] memchr("        /* endline is the dual o"..., '\n', 62) = 0x0259f294
[0x4022d1] memchr("\tcase endline:\n          DEBUG_P"..., '\n', 15) = 0x0259f2a3
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5512:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          if (AT_STRINGS_END (d"..., 'I', 27926) = 0x0259f2ea
[0x40cdf3] memchr("INGS_END (d))\n            {\n    "..., '\n', 27905) = 0x0259f2f7
[0x4022d1] memchr("\n          if (AT_STRINGS_END (d"..., '\n', 1) = 0x0259f2d5
[0x4022d1] memchr("          if (AT_STRINGS_END (d)"..., '\n', 0) = NULL
[0x4023cc] fwrite("5514:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (AT_STRINGS_END (d)"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            {\n              if ("..., 'I', 27891) = 0x0259f488
[0x40cdf3] memchr("INT1 ("EXECUTING begbuf.\\n");\n  "..., '\n', 27491) = 0x0259f4a5
[0x4022d1] memchr("            {\n              if ("..., '\n', 382) = 0x0259f305
[0x4022d1] memchr("              if (!bufp->not_eol"..., '\n', 368) = 0x0259f32e
[0x4022d1] memchr("            }\n          \n       "..., '\n', 327) = 0x0259f33c
[0x4022d1] memchr("          \n          /* We have "..., '\n', 313) = 0x0259f347
[0x4022d1] memchr("          /* We have to ``prefet"..., '\n', 302) = 0x0259f384
[0x4022d1] memchr("          else if ((d == end1 ? "..., '\n', 241) = 0x0259f3bb
[0x4022d1] memchr("                   && bufp->newl"..., '\n', 186) = 0x0259f3e7
[0x4022d1] memchr("            {\n              brea"..., '\n', 142) = 0x0259f3f5
[0x4022d1] memchr("              break;\n           "..., '\n', 128) = 0x0259f40a
[0x4022d1] memchr("            }\n          goto fai"..., '\n', 107) = 0x0259f418
[0x4022d1] memchr("          goto fail;\n\n\n\t/* Match"..., '\n', 93) = 0x0259f42d
[0x4022d1] memchr("\n\n\t/* Match at the very beginnin"..., '\n', 72) = 0x0259f42e
[0x4022d1] memchr("\n\t/* Match at the very beginning"..., '\n', 71) = 0x0259f42f
[0x4022d1] memchr("\t/* Match at the very beginning "..., '\n', 70) = 0x0259f460
[0x4022d1] memchr("        case begbuf:\n          D"..., '\n', 21) = 0x0259f475
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5530:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (AT_STRINGS_BEG (d)"..., 'I', 27461) = 0x0259f4ba
[0x40cdf3] memchr("INGS_BEG (d))\n            break;"..., '\n', 27441) = 0x0259f4c7
[0x4022d1] memchr("          if (AT_STRINGS_BEG (d)"..., '\n', 0) = NULL
[0x4023cc] fwrite("5531:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          if (AT_STRINGS_BEG (d)"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            break;\n          got"..., 'I', 27427) = 0x0259f544
[0x40cdf3] memchr("INT1 ("EXECUTING endbuf.\\n");\n\t "..., '\n', 27303) = 0x0259f561
[0x4022d1] memchr("            break;\n          got"..., '\n', 106) = 0x0259f4da
[0x4022d1] memchr("          goto fail;\n\n\n\t/* Match"..., '\n', 87) = 0x0259f4ef
[0x4022d1] memchr("\n\n\t/* Match at the very end of t"..., '\n', 66) = 0x0259f4f0
[0x4022d1] memchr("\n\t/* Match at the very end of th"..., '\n', 65) = 0x0259f4f1
[0x4022d1] memchr("\t/* Match at the very end of the"..., '\n', 64) = 0x0259f51c
[0x4022d1] memchr("        case endbuf:\n          D"..., '\n', 21) = 0x0259f531
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5538:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (AT_STRINGS_END (d))\n\t    "..., 'I', 27273) = 0x0259f56f
[0x40cdf3] memchr("INGS_END (d))\n\t    break;\n      "..., '\n', 27260) = 0x0259f57c
[0x4022d1] memchr("\t  if (AT_STRINGS_END (d))\n\t    "..., '\n', 0) = NULL
[0x4023cc] fwrite("5539:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (AT_STRINGS_END (d))\n\t    "..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n          goto fail;"..., 'I', 27246) = 0x0259f5e4
[0x40cdf3] memchr("It\n           pushes NULL as the"..., '\n', 27143) = 0x0259f5e6
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 35) = 0x0259f588
[0x4022d1] memchr("          goto fail;\n\n\n        /"..., '\n', 23) = 0x0259f59d
[0x4022d1] memchr("\n\n        /* on_failure_keep_str"..., '\n', 2) = 0x0259f59e
[0x4022d1] memchr("\n        /* on_failure_keep_stri"..., '\n', 1) = 0x0259f59f
[0x4022d1] memchr("        /* on_failure_keep_strin"..., '\n', 0) = NULL
[0x4023cc] fwrite("5544:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        /* on_failure_keep_strin"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("           pushes NULL as the va"..., 'I', 27140) = 0x0259f9d8
[0x40cdf3] memchr("INT1 ("EXECUTING on_failure_keep"..., '\n', 26131) = 0x0259fa07
[0x4022d1] memchr("           pushes NULL as the va"..., '\n', 991) = 0x0259f62d
[0x4022d1] memchr("           `pop_failure_point' w"..., '\n', 920) = 0x0259f670
[0x4022d1] memchr("           string, instead of re"..., '\n', 853) = 0x0259f6b2
[0x4022d1] memchr("           matching `foo\\nbar' a"..., '\n', 787) = 0x0259f6fa
[0x4022d1] memchr("           then the . fails agai"..., '\n', 715) = 0x0259f742
[0x4022d1] memchr("           to do is match the \\n"..., '\n', 643) = 0x0259f786
[0x4022d1] memchr("           string value, we woul"..., '\n', 575) = 0x0259f7bc
[0x4022d1] memchr("           \n           Because t"..., '\n', 521) = 0x0259f7c8
[0x4022d1] memchr("           Because this is used "..., '\n', 509) = 0x0259f811
[0x4022d1] memchr("           check all the things "..., '\n', 436) = 0x0259f856
[0x4022d1] memchr("           sure the right things"..., '\n', 367) = 0x0259f89f
[0x4022d1] memchr("           share its code.  The "..., '\n', 294) = 0x0259f8e3
[0x4022d1] memchr("           stack at all is that "..., '\n', 226) = 0x0259f925
[0x4022d1] memchr("           `anychar's code to do"..., '\n', 160) = 0x0259f96a
[0x4022d1] memchr("           case; that seems wors"..., '\n', 91) = 0x0259f99b
[0x4022d1] memchr("        case on_failure_keep_str"..., '\n', 42) = 0x0259f9c5
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5561:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n          EXTRACT_NUM"..., 'I', 26083) = 0x0259fa30
[0x40cdf3] memchr("INCR (mcnt, p);\n          DEBUG_"..., '\n', 26043) = 0x0259fa3f
[0x4022d1] memchr("          \n          EXTRACT_NUM"..., '\n', 11) = 0x0259fa12
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("5563:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          DEBUG_PRINT3 (" %d (to"..., 'I', 26027) = 0x0259fa52
[0x40cdf3] memchr("INT3 (" %d (to 0x%x):\\n", mcnt, "..., '\n', 26009) = 0x0259fa7c
[0x4022d1] memchr("          DEBUG_PRINT3 (" %d (to"..., '\n', 0) = NULL
[0x4023cc] fwrite("5564:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT3 (" %d (to"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          PUSH_FAILURE_POINT (p"..., 'I', 25966) = 0x0259fa8f
[0x40cdf3] memchr("ILURE_POINT (p + mcnt, NULL, -2)"..., '\n', 25948) = 0x0259fab0
[0x4022d1] memchr("\n          PUSH_FAILURE_POINT (p"..., '\n', 1) = 0x0259fa7d
[0x4022d1] memchr("          PUSH_FAILURE_POINT (p "..., '\n', 0) = NULL
[0x4023cc] fwrite("5566:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          PUSH_FAILURE_POINT (p "..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          break;\n\n\n\t/* Uses of o"..., 'I', 25914) = 0x0259fd71
[0x40cdf3] memchr("INT1 ("EXECUTING on_failure_jump"..., '\n', 25210) = 0x0259fd94
[0x4022d1] memchr("          break;\n\n\n\t/* Uses of o"..., '\n', 686) = 0x0259fac1
[0x4022d1] memchr("\n\n\t/* Uses of on_failure_jump:\n "..., '\n', 669) = 0x0259fac2
[0x4022d1] memchr("\n\t/* Uses of on_failure_jump:\n  "..., '\n', 668) = 0x0259fac3
[0x4022d1] memchr("\t/* Uses of on_failure_jump:\n   "..., '\n', 667) = 0x0259fae0
[0x4022d1] memchr("        \n           Each alterna"..., '\n', 638) = 0x0259fae9
[0x4022d1] memchr("           Each alternative star"..., '\n', 629) = 0x0259fb30
[0x4022d1] memchr("           to the beginning of t"..., '\n', 558) = 0x0259fb77
[0x4022d1] memchr("           except the last ends "..., '\n', 487) = 0x0259fbbd
[0x4022d1] memchr("           the rest of the alter"..., '\n', 417) = 0x0259fc00
[0x4022d1] memchr("           ending jump of the fo"..., '\n', 350) = 0x0259fc48
[0x4022d1] memchr("           these jumps is a hass"..., '\n', 278) = 0x0259fc6d
[0x4022d1] memchr("\n           Repeats start with a"..., '\n', 241) = 0x0259fc6e
[0x4022d1] memchr("           Repeats start with an"..., '\n', 240) = 0x0259fcb5
[0x4022d1] memchr("           the repetition text a"..., '\n', 169) = 0x0259fcf5
[0x4022d1] memchr("           pop_failure_jump back"..., '\n', 105) = 0x0259fd33
[0x4022d1] memchr("\tcase on_failure_jump:\n        o"..., '\n', 43) = 0x0259fd4a
[0x4022d1] memchr("        on_failure:\n          DE"..., '\n', 20) = 0x0259fd5e
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5584:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          EXTRACT_NUMBER_AND_IN"..., 'I', 25174) = 0x0259fdb3
[0x40cdf3] memchr("INCR (mcnt, p);\n          DEBUG_"..., '\n', 25144) = 0x0259fdc2
[0x4022d1] memchr("\n          EXTRACT_NUMBER_AND_IN"..., '\n', 1) = 0x0259fd95
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("5586:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          DEBUG_PRINT3 (" %d (to"..., 'I', 25128) = 0x0259fdd5
[0x40cdf3] memchr("INT3 (" %d (to 0x%x)", mcnt, p +"..., '\n', 25110) = 0x0259fdfc
[0x4022d1] memchr("          DEBUG_PRINT3 (" %d (to"..., '\n', 0) = NULL
[0x4023cc] fwrite("5587:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT3 (" %d (to"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* If this on_failure"..., 'I', 25070) = 0x0259fe0b
[0x40cdf3] memchr("If this on_failure_jump comes ri"..., '\n', 25056) = 0x0259fe44
[0x4022d1] memchr("\n          /* If this on_failure"..., '\n', 1) = 0x0259fdfd
[0x4022d1] memchr("          /* If this on_failure_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5589:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If this on_failure_"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             the original * appl"..., 'I', 24998) = 0x025a0331
[0x40cdf3] memchr("IVE_REG)\n                lowest_"..., '\n', 23738) = 0x025a0339
[0x4022d1] memchr("             the original * appl"..., '\n', 1208) = 0x0259fe8a
[0x4022d1] memchr("             for that group and "..., '\n', 1138) = 0x0259fed2
[0x4022d1] memchr("             to this point, the "..., '\n', 1066) = 0x0259ff17
[0x4022d1] memchr("             For example, in \\(a"..., '\n', 997) = 0x0259ff5c
[0x4022d1] memchr("             and in \\(\\(a*\\)b*\\)"..., '\n', 928) = 0x0259ff9d
[0x4022d1] memchr("\n          /* We can't use `p' t"..., '\n', 863) = 0x0259ff9e
[0x4022d1] memchr("          /* We can't use `p' to"..., '\n', 862) = 0x0259ffdb
[0x4022d1] memchr("             a failure point to "..., '\n', 801) = 0x025a001c
[0x4022d1] memchr("          p1 = p;\n\n          /* "..., '\n', 736) = 0x025a002e
[0x4022d1] memchr("\n          /* We need to skip no"..., '\n', 718) = 0x025a002f
[0x4022d1] memchr("          /* We need to skip no_"..., '\n', 717) = 0x025a006b
[0x4022d1] memchr("             start_memory in cas"..., '\n', 657) = 0x025a00b2
[0x4022d1] memchr("             the result of a com"..., '\n', 586) = 0x025a00fa
[0x4022d1] memchr("             against aba.  */\n  "..., '\n', 514) = 0x025a0118
[0x4022d1] memchr("          while (p1 < pend && (r"..., '\n', 484) = 0x025a0152
[0x4022d1] memchr("            p1++;\n\n          if "..., '\n', 426) = 0x025a0164
[0x4022d1] memchr("\n          if (p1 < pend && (re_"..., '\n', 408) = 0x025a0165
[0x4022d1] memchr("          if (p1 < pend && (re_o"..., '\n', 407) = 0x025a01a3
[0x4022d1] memchr("            {\n              /* W"..., '\n', 345) = 0x025a01b1
[0x4022d1] memchr("              /* We have a new h"..., '\n', 331) = 0x025a01f8
[0x4022d1] memchr("                 get reset at th"..., '\n', 260) = 0x025a023f
[0x4022d1] memchr("                 but we will hav"..., '\n', 189) = 0x025a0285
[0x4022d1] memchr("                 this repetition"..., '\n', 119) = 0x025a02c2
[0x4022d1] memchr("              highest_active_reg"..., '\n', 58) = 0x025a02fc
[0x4022d1] memchr("              if (lowest_active_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5614:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              if (lowest_active_"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                lowest_active_re"..., 'I', 23729) = 0x025a038a
[0x40cdf3] memchr("INT1 (":\\n");\n          PUSH_FAI"..., '\n', 23649) = 0x025a0397
[0x4022d1] memchr("                lowest_active_re"..., '\n', 62) = 0x025a0368
[0x4022d1] memchr("            }\n\n          DEBUG_P"..., '\n', 15) = 0x025a0376
[0x4022d1] memchr("\n          DEBUG_PRINT1 (":\\n");"..., '\n', 1) = 0x025a0377
[0x4022d1] memchr("          DEBUG_PRINT1 (":\\n");\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("5618:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 (":\\n");\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          PUSH_FAILURE_POINT (p "..., 'I', 23635) = 0x025a03a9
[0x40cdf3] memchr("ILURE_POINT (p + mcnt, d, -2);\n "..., '\n', 23618) = 0x025a03c7
[0x4022d1] memchr("          PUSH_FAILURE_POINT (p "..., '\n', 0) = NULL
[0x4023cc] fwrite("5619:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          PUSH_FAILURE_POINT (p "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          break;\n\n\n        /* A "..., 'I', 23587) = 0x025a0488
[0x40cdf3] memchr("INCR (mcnt, p);\n          DEBUG_"..., '\n', 23395) = 0x025a0497
[0x4022d1] memchr("          break;\n\n\n        /* A "..., '\n', 163) = 0x025a03d8
[0x4022d1] memchr("\n\n        /* A smart repeat ends"..., '\n', 146) = 0x025a03d9
[0x4022d1] memchr("\n        /* A smart repeat ends "..., '\n', 145) = 0x025a03da
[0x4022d1] memchr("        /* A smart repeat ends w"..., '\n', 144) = 0x025a0410
[0x4022d1] memchr("\t   We change it to either `pop_"..., '\n', 90) = 0x025a044d
[0x4022d1] memchr("        case maybe_pop_jump:\n   "..., '\n', 29) = 0x025a046a
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("5626:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          DEBUG_PRINT2 ("EXECUTI"..., 'I', 23379) = 0x025a04aa
[0x40cdf3] memchr("INT2 ("EXECUTING maybe_pop_jump "..., '\n', 23361) = 0x025a04d8
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5627:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          {\n\t    register unsign"..., 'I', 23314) = 0x025a0577
[0x40cdf3] memchr("If we can establish that there\n "..., '\n', 23156) = 0x025a0595
[0x4022d1] memchr("          {\n\t    register unsign"..., '\n', 118) = 0x025a04e4
[0x4022d1] memchr("\t    register unsigned char *p2 "..., '\n', 106) = 0x025a0509
[0x4022d1] memchr("\n            /* Compare the begi"..., '\n', 69) = 0x025a050a
[0x4022d1] memchr("            /* Compare the begin"..., '\n', 68) = 0x025a054e
[0x4022d1] memchr("               pattern follows i"..., '\n', 0) = NULL
[0x4023cc] fwrite("5632:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("               pattern follows i"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               is nothing that t"..., 'I', 23125) = 0x025a08df
[0x40cdf3] memchr("If we're at the end of the patte"..., '\n', 22284) = 0x025a0915
[0x4022d1] memchr("               is nothing that t"..., '\n', 826) = 0x025a05d9
[0x4022d1] memchr("               would have to bac"..., '\n', 758) = 0x025a0620
[0x4022d1] memchr("               then we can chang"..., '\n', 687) = 0x025a0665
[0x4022d1] memchr("               never have to bac"..., '\n', 618) = 0x025a068d
[0x4022d1] memchr("               \n               T"..., '\n', 578) = 0x025a069d
[0x4022d1] memchr("               This is not true "..., '\n', 562) = 0x025a06dd
[0x4022d1] memchr("               `(a|ab)*' we do n"..., '\n', 498) = 0x025a0726
[0x4022d1] memchr("               (e.g., if the str"..., '\n', 425) = 0x025a076f
[0x4022d1] memchr("               detect that here,"..., '\n', 352) = 0x025a07b3
[0x4022d1] memchr("               failure point whi"..., '\n', 284) = 0x025a07fa
[0x4022d1] memchr("\n\t    /* Skip over open/close-gr"..., '\n', 213) = 0x025a07fb
[0x4022d1] memchr("\t    /* Skip over open/close-gro"..., '\n', 212) = 0x025a082c
[0x4022d1] memchr("\t    while (p2 + 2 < pend\n\t\t   &"..., '\n', 163) = 0x025a0846
[0x4022d1] memchr("\t\t   && ((re_opcode_t) *p2 == st"..., '\n', 137) = 0x025a0870
[0x4022d1] memchr("\t\t       || (re_opcode_t) *p2 =="..., '\n', 95) = 0x025a08a0
[0x4022d1] memchr("\t      p2 += 3;\t\t\t/* Skip over a"..., '\n', 47) = 0x025a08ce
[0x4022d1] memchr("\n            /* If we're at the "..., '\n', 1) = 0x025a08cf
[0x4022d1] memchr("            /* If we're at the e"..., '\n', 0) = NULL
[0x4023cc] fwrite("5650:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            /* If we're at the e"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            if (p2 == pend)\n\t   "..., 'I', 22229) = 0x025a0982
[0x40cdf3] memchr("I don't really understand this c"..., '\n', 22121) = 0x025a09a5
[0x4022d1] memchr("            if (p2 == pend)\n\t   "..., '\n', 88) = 0x025a0931
[0x4022d1] memchr("\t      {\n\t\t/* Consider what happ"..., '\n', 60) = 0x025a093a
[0x4022d1] memchr("\t\t/* Consider what happens when "..., '\n', 51) = 0x025a096d
[0x4022d1] memchr("\t\t   against ":/".  I don't real"..., '\n', 0) = NULL
[0x4023cc] fwrite("5654:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t   against ":/".  I don't real"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   yet.  */\n  \t        p[-3] ="..., 'I', 22085) = 0x025a0a01
[0x40cdf3] memchr("INT1\n                  ("  End o"..., '\n', 21994) = 0x025a0a05
[0x4022d1] memchr("\t\t   yet.  */\n  \t        p[-3] ="..., '\n', 67) = 0x025a09b3
[0x4022d1] memchr("  \t        p[-3] = (unsigned cha"..., '\n', 53) = 0x025a09e8
[0x4022d1] memchr("                DEBUG_PRINT1\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("5657:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                DEBUG_PRINT1\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  ("  End of pat"..., 'I', 21989) = 0x025a0ca7
[0x40cdf3] memchr("INT3 ("  %c != %c => pop_failure"..., '\n', 21316) = 0x025a0cd1
[0x4022d1] memchr("                  ("  End of pat"..., '\n', 645) = 0x025a0a4e
[0x4022d1] memchr("              }\n\n            els"..., '\n', 572) = 0x025a0a5e
[0x4022d1] memchr("\n            else if ((re_opcode"..., '\n', 556) = 0x025a0a5f
[0x4022d1] memchr("            else if ((re_opcode_"..., '\n', 555) = 0x025a0a90
[0x4022d1] memchr("\t\t     || (bufp->newline_anchor "..., '\n', 506) = 0x025a0ad2
[0x4022d1] memchr("\t      {\n\t\tregister unsigned cha"..., '\n', 440) = 0x025a0adb
[0x4022d1] memchr("\t\tregister unsigned char c\n     "..., '\n', 431) = 0x025a0af6
[0x4022d1] memchr("                  = *p2 == (unsi"..., '\n', 404) = 0x025a0b39
[0x4022d1] memchr("\t\tp1 = p + mcnt;\n\n              "..., '\n', 337) = 0x025a0b4a
[0x4022d1] memchr("\n                /* p1[0] ... p1"..., '\n', 320) = 0x025a0b4b
[0x4022d1] memchr("                /* p1[0] ... p1["..., '\n', 319) = 0x025a0b96
[0x4022d1] memchr("                   to the `maybe"..., '\n', 244) = 0x025a0be3
[0x4022d1] memchr("                   follows.  */\n"..., '\n', 167) = 0x025a0c03
[0x4022d1] memchr("                if ((re_opcode_t"..., '\n', 135) = 0x025a0c44
[0x4022d1] memchr("                  {\n  \t\t    p[-3"..., '\n', 70) = 0x025a0c58
[0x4022d1] memchr("  \t\t    p[-3] = (unsigned char) "..., '\n', 50) = 0x025a0c8a
[0x4022d1] memchr("                    DEBUG_PRINT3"..., '\n', 0) = NULL
[0x4023cc] fwrite("5674:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                    DEBUG_PRINT3"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                                "..., 'I', 21273) = 0x025a0df6
[0x40cdf3] memchr("IDTH)\n\t\t\t&& p1[5 + c / BYTEWIDTH"..., '\n', 20981) = 0x025a0dfb
[0x4022d1] memchr("                                "..., '\n', 248) = 0x025a0cfe
[0x4022d1] memchr("                  }\n            "..., '\n', 203) = 0x025a0d12
[0x4022d1] memchr("                  \n\t\telse if ((r"..., '\n', 183) = 0x025a0d25
[0x4022d1] memchr("\t\telse if ((re_opcode_t) p1[3] ="..., '\n', 164) = 0x025a0d4f
[0x4022d1] memchr("\t\t\t || (re_opcode_t) p1[3] == ch"..., '\n', 122) = 0x025a0d7a
[0x4022d1] memchr("\t\t  {\n\t\t    int not = (re_opcode"..., '\n', 79) = 0x025a0d80
[0x4022d1] memchr("\t\t    int not = (re_opcode_t) p1"..., '\n', 73) = 0x025a0db4
[0x4022d1] memchr("                    \n\t\t    if (c"..., '\n', 21) = 0x025a0dc9
[0x4022d1] memchr("\t\t    if (c < (unsigned char) (p"..., '\n', 0) = NULL
[0x4023cc] fwrite("5683:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t    if (c < (unsigned char) (p"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., 'I', 20975) = 0x025a0e12
[0x40cdf3] memchr("IDTH] & (1 << (c % BYTEWIDTH)))\n"..., '\n', 20953) = 0x025a0e31
[0x4022d1] memchr("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., '\n', 0) = NULL
[0x4023cc] fwrite("5684:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t\t&& p1[5 + c / BYTEWIDTH] & (1"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t      not = !not;\n\n           "..., 'I', 20921) = 0x025a0f54
[0x40cdf3] memchr("INT1 ("  No match => pop_failure"..., '\n', 20631) = 0x025a0f7f
[0x4022d1] memchr("\t\t      not = !not;\n\n           "..., '\n', 258) = 0x025a0e45
[0x4022d1] memchr("\n                    /* `not' is"..., '\n', 238) = 0x025a0e46
[0x4022d1] memchr("                    /* `not' is "..., '\n', 237) = 0x025a0e8f
[0x4022d1] memchr("                        that we "..., '\n', 164) = 0x025a0ed5
[0x4022d1] memchr("\t\t    if (!not)\n                "..., '\n', 94) = 0x025a0ee5
[0x4022d1] memchr("                      {\n  \t\t    "..., '\n', 78) = 0x025a0efd
[0x4022d1] memchr("  \t\t        p[-3] = (unsigned ch"..., '\n', 54) = 0x025a0f33
[0x4022d1] memchr("                        DEBUG_PR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5692:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                        DEBUG_PR"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                      }\n\t\t  }\n\t "..., 'I', 20587) = 0x025a1052
[0x40cdf3] memchr("INT1 ("  Match => jump.\\n");\n\t  "..., '\n', 20377) = 0x025a106e
[0x4022d1] memchr("                      }\n\t\t  }\n\t "..., '\n', 188) = 0x025a0f97
[0x4022d1] memchr("\t\t  }\n\t      }\n\t  }\n\t  p -= 2;\t\t"..., '\n', 164) = 0x025a0f9d
[0x4022d1] memchr("\t      }\n\t  }\n\t  p -= 2;\t\t/* Poi"..., '\n', 158) = 0x025a0fa6
[0x4022d1] memchr("\t  }\n\t  p -= 2;\t\t/* Point at rel"..., '\n', 149) = 0x025a0fab
[0x4022d1] memchr("\t  p -= 2;\t\t/* Point at relative"..., '\n', 144) = 0x025a0fdf
[0x4022d1] memchr("\t  if ((re_opcode_t) p[-1] != po"..., '\n', 92) = 0x025a100f
[0x4022d1] memchr("\t    {\n\t      p[-1] = (unsigned "..., '\n', 44) = 0x025a1016
[0x4022d1] memchr("\t      p[-1] = (unsigned char) j"..., '\n', 37) = 0x025a103b
[0x4022d1] memchr("              DEBUG_PRINT1 ("  M"..., '\n', 0) = NULL
[0x4023cc] fwrite("5701:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              DEBUG_PRINT1 ("  M"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      goto unconditional_jump;\n"..., 'I', 20348) = 0x025a1431
[0x40cdf3] memchr("INT1 ("EXECUTING pop_failure_jum"..., '\n', 19386) = 0x025a1458
[0x4022d1] memchr("\t      goto unconditional_jump;\n"..., '\n', 942) = 0x025a108e
[0x4022d1] memchr("\t    }\n        /* Note fall thro"..., '\n', 910) = 0x025a1095
[0x4022d1] memchr("        /* Note fall through.  *"..., '\n', 903) = 0x025a10b7
[0x4022d1] memchr("\n\n\t/* The end of a simple repeat"..., '\n', 869) = 0x025a10b8
[0x4022d1] memchr("\n\t/* The end of a simple repeat "..., '\n', 868) = 0x025a10b9
[0x4022d1] memchr("\t/* The end of a simple repeat h"..., '\n', 867) = 0x025a10f7
[0x4022d1] memchr("           its matching on_failu"..., '\n', 805) = 0x025a113d
[0x4022d1] memchr("           failure point.  The p"..., '\n', 735) = 0x025a117f
[0x4022d1] memchr("           points put on by this"..., '\n', 669) = 0x025a11bc
[0x4022d1] memchr("           on_failure_jump; we g"..., '\n', 608) = 0x025a1204
[0x4022d1] memchr("           matching on_failure_j"..., '\n', 536) = 0x025a123d
[0x4022d1] memchr("        case pop_failure_jump:\n "..., '\n', 479) = 0x025a125c
[0x4022d1] memchr("          {\n            /* We ne"..., '\n', 448) = 0x025a1268
[0x4022d1] memchr("            /* We need to pass s"..., '\n', 436) = 0x025a12ab
[0x4022d1] memchr("               highest registers"..., '\n', 369) = 0x025a12f1
[0x4022d1] memchr("               actual values.  O"..., '\n', 299) = 0x025a1334
[0x4022d1] memchr("               register from the"..., '\n', 232) = 0x025a137c
[0x4022d1] memchr("               `pop_failure_poin"..., '\n', 160) = 0x025a13a4
[0x4022d1] memchr("            unsigned dummy_low_r"..., '\n', 120) = 0x025a13d8
[0x4022d1] memchr("            unsigned char *pdumm"..., '\n', 68) = 0x025a13fb
[0x4022d1] memchr("            const char *sdummy;\n"..., '\n', 33) = 0x025a141b
[0x4022d1] memchr("\n            DEBUG_PRINT1 ("EXEC"..., '\n', 1) = 0x025a141c
[0x4022d1] memchr("            DEBUG_PRINT1 ("EXECU"..., '\n', 0) = NULL
[0x4023cc] fwrite("5724:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT1 ("EXECU"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            POP_FAILURE_POINT (s"..., 'I', 19346) = 0x025a146b
[0x40cdf3] memchr("ILURE_POINT (sdummy, pdummy,\n   "..., '\n', 19328) = 0x025a1487
[0x4022d1] memchr("            POP_FAILURE_POINT (s"..., '\n', 0) = NULL
[0x4023cc] fwrite("5725:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            POP_FAILURE_POINT (s"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                               d"..., 'I', 19299) = 0x025a15d0
[0x40cdf3] memchr("INCR (mcnt, p);\t/* Get the amoun"..., '\n', 18971) = 0x025a15fe
[0x4022d1] memchr("                               d"..., '\n', 306) = 0x025a14c5
[0x4022d1] memchr("                               r"..., '\n', 244) = 0x025a150b
[0x4022d1] memchr("          }\n          /* Note fa"..., '\n', 174) = 0x025a1517
[0x4022d1] memchr("          /* Note fall through. "..., '\n', 162) = 0x025a153b
[0x4022d1] memchr("\n          \n        /* Unconditi"..., '\n', 126) = 0x025a153c
[0x4022d1] memchr("          \n        /* Unconditio"..., '\n', 125) = 0x025a1547
[0x4022d1] memchr("        /* Unconditionally jump "..., '\n', 114) = 0x025a1591
[0x4022d1] memchr("        case jump:\n\tunconditiona"..., '\n', 40) = 0x025a15a4
[0x4022d1] memchr("\tunconditional_jump:\n\t  EXTRACT_"..., '\n', 21) = 0x025a15b9
[0x4022d1] memchr("\t  EXTRACT_NUMBER_AND_INCR (mcnt"..., '\n', 0) = NULL
[0x4023cc] fwrite("5735:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  EXTRACT_NUMBER_AND_INCR (mcnt"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          DEBUG_PRINT2 ("EXECUTI"..., 'I', 18924) = 0x025a1611
[0x40cdf3] memchr("INT2 ("EXECUTING jump %d ", mcnt"..., '\n', 18906) = 0x025a1633
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5736:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  p += mcnt;\t\t\t\t/* Do the jump."..., 'I', 18871) = 0x025a166b
[0x40cdf3] memchr("INT2 ("(to 0x%x).\\n", p);\n\t  bre"..., '\n', 18816) = 0x025a1684
[0x4022d1] memchr("\t  p += mcnt;\t\t\t\t/* Do the jump."..., '\n', 37) = 0x025a1658
[0x4022d1] memchr("          DEBUG_PRINT2 ("(to 0x%"..., '\n', 0) = NULL
[0x4023cc] fwrite("5738:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("(to 0x%"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  break;\n\n\t\n        /* We need "..., 'I', 18790) = 0x025a173c
[0x40cdf3] memchr("INT1 ("EXECUTING jump_past_alt.\\"..., '\n', 18607) = 0x025a1760
[0x4022d1] memchr("\t  break;\n\n\t\n        /* We need "..., '\n', 165) = 0x025a168e
[0x4022d1] memchr("\n\t\n        /* We need this opcod"..., '\n', 155) = 0x025a168f
[0x4022d1] memchr("\t\n        /* We need this opcode"..., '\n', 154) = 0x025a1691
[0x4022d1] memchr("        /* We need this opcode s"..., '\n', 152) = 0x025a16d8
[0x4022d1] memchr("           in `group_match_null_"..., '\n', 81) = 0x025a170d
[0x4022d1] memchr("        case jump_past_alt:\n    "..., '\n', 28) = 0x025a1729
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5745:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          goto unconditional_jum"..., 'I', 18570) = 0x025a1913
[0x40cdf3] memchr("INT1 ("EXECUTING dummy_failure_j"..., '\n', 18136) = 0x025a193c
[0x4022d1] memchr("          goto unconditional_jum"..., '\n', 416) = 0x025a1783
[0x4022d1] memchr("\n\n        /* Normally, the on_fa"..., '\n', 381) = 0x025a1784
[0x4022d1] memchr("\n        /* Normally, the on_fai"..., '\n', 380) = 0x025a1785
[0x4022d1] memchr("        /* Normally, the on_fail"..., '\n', 379) = 0x025a17cc
[0x4022d1] memchr("           then gets popped at p"..., '\n', 308) = 0x025a1810
[0x4022d1] memchr("           pop_failure_jump, als"..., '\n', 240) = 0x025a1858
[0x4022d1] memchr("           are skipping over the"..., '\n', 168) = 0x025a189d
[0x4022d1] memchr("           something meaningless"..., '\n', 99) = 0x025a18df
[0x4022d1] memchr("        case dummy_failure_jump:"..., '\n', 33) = 0x025a1900
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5755:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          /* It doesn't matter w"..., 'I', 18094) = 0x025a194a
[0x40cdf3] memchr("It doesn't matter what we push f"..., '\n', 18081) = 0x025a1983
[0x4022d1] memchr("          /* It doesn't matter w"..., '\n', 0) = NULL
[0x4023cc] fwrite("5756:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* It doesn't matter w"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("             the code at `fail' "..., 'I', 18023) = 0x025a19dd
[0x40cdf3] memchr("ILURE_POINT (0, 0, -2);\n        "..., '\n', 17934) = 0x025a19f4
[0x4022d1] memchr("             the code at `fail' "..., '\n', 72) = 0x025a19cb
[0x4022d1] memchr("          PUSH_FAILURE_POINT (0,"..., '\n', 0) = NULL
[0x4023cc] fwrite("5758:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          PUSH_FAILURE_POINT (0,"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          goto unconditional_jum"..., 'I', 17910) = 0x025a1ba3
[0x40cdf3] memchr("INT1 ("EXECUTING push_dummy_fail"..., '\n', 17480) = 0x025a1bcc
[0x4022d1] memchr("          goto unconditional_jum"..., '\n', 412) = 0x025a1a17
[0x4022d1] memchr("\n\n        /* At the end of an al"..., '\n', 377) = 0x025a1a18
[0x4022d1] memchr("\n        /* At the end of an alt"..., '\n', 376) = 0x025a1a19
[0x4022d1] memchr("        /* At the end of an alte"..., '\n', 375) = 0x025a1a62
[0x4022d1] memchr("           point in case we are "..., '\n', 302) = 0x025a1aac
[0x4022d1] memchr("           we don't want the fai"..., '\n', 228) = 0x025a1af1
[0x4022d1] memchr("           popped.  For example,"..., '\n', 159) = 0x025a1b33
[0x4022d1] memchr("           requires that we matc"..., '\n', 93) = 0x025a1b6f
[0x4022d1] memchr("        case push_dummy_failure:"..., '\n', 33) = 0x025a1b90
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5768:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          /* See comments just a"..., 'I', 17438) = 0x025a1c42
[0x40cdf3] memchr("ILURE_POINT (0, 0, -2);\n        "..., '\n', 17321) = 0x025a1c59
[0x4022d1] memchr("          /* See comments just a"..., '\n', 100) = 0x025a1c13
[0x4022d1] memchr("             two zeroes.  */\n   "..., '\n', 29) = 0x025a1c30
[0x4022d1] memchr("          PUSH_FAILURE_POINT (0,"..., '\n', 0) = NULL
[0x4023cc] fwrite("5771:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          PUSH_FAILURE_POINT (0,"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          break;\n\n        /* Hav"..., 'I', 17297) = 0x025a1d3c
[0x40cdf3] memchr("INT2 ("EXECUTING succeed_n %d.\\n"..., '\n', 17071) = 0x025a1d65
[0x4022d1] memchr("          break;\n\n        /* Hav"..., '\n', 208) = 0x025a1c6a
[0x4022d1] memchr("\n        /* Have to succeed matc"..., '\n', 191) = 0x025a1c6b
[0x4022d1] memchr("        /* Have to succeed match"..., '\n', 190) = 0x025a1cae
[0x4022d1] memchr("           After that, handle li"..., '\n', 123) = 0x025a1ce8
[0x4022d1] memchr("        case succeed_n: \n       "..., '\n', 65) = 0x025a1d01
[0x4022d1] memchr("          EXTRACT_NUMBER (mcnt, "..., '\n', 40) = 0x025a1d29
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5778:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          assert (mcnt >= 0);\n "..., 'I', 17029) = 0x025a1e3a
[0x40cdf3] memchr("INCR (p, mcnt);\n               D"..., '\n', 16817) = 0x025a1e49
[0x4022d1] memchr("\n          assert (mcnt >= 0);\n "..., '\n', 180) = 0x025a1d66
[0x4022d1] memchr("          assert (mcnt >= 0);\n  "..., '\n', 179) = 0x025a1d84
[0x4022d1] memchr("          /* Originally, this is"..., '\n', 149) = 0x025a1dcc
[0x4022d1] memchr("          if (mcnt > 0)\n        "..., '\n', 77) = 0x025a1de4
[0x4022d1] memchr("            {\n               mcn"..., '\n', 53) = 0x025a1df2
[0x4022d1] memchr("               mcnt--;\n\t       p"..., '\n', 39) = 0x025a1e09
[0x4022d1] memchr("\t       p += 2;\n               S"..., '\n', 16) = 0x025a1e19
[0x4022d1] memchr("               STORE_NUMBER_AND_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5786:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("               STORE_NUMBER_AND_"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("               DEBUG_PRINT3 ("  "..., 'I', 16801) = 0x025a1e61
[0x40cdf3] memchr("INT3 ("  Setting 0x%x to %d.\\n","..., '\n', 16778) = 0x025a1e8b
[0x4022d1] memchr("               DEBUG_PRINT3 ("  "..., '\n', 0) = NULL
[0x4023cc] fwrite("5787:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("               DEBUG_PRINT3 ("  "..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            }\n\t  else if (mcnt ="..., 'I', 16735) = 0x025a1ed5
[0x40cdf3] memchr("INT2 ("  Setting two bytes from "..., '\n', 16662) = 0x025a1f0d
[0x4022d1] memchr("            }\n\t  else if (mcnt ="..., '\n', 51) = 0x025a1e99
[0x4022d1] memchr("\t  else if (mcnt == 0)\n         "..., '\n', 37) = 0x025a1eb0
[0x4022d1] memchr("            {\n              DEBU"..., '\n', 14) = 0x025a1ebe
[0x4022d1] memchr("              DEBUG_PRINT2 ("  S"..., '\n', 0) = NULL
[0x4023cc] fwrite("5791:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              DEBUG_PRINT2 ("  S"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      p[2] = (unsigned char) no"..., 'I', 16605) = 0x025a1ff6
[0x40cdf3] memchr("INT2 ("EXECUTING jump_n %d.\\n", "..., '\n', 16373) = 0x025a201c
[0x4022d1] memchr("\t      p[2] = (unsigned char) no"..., '\n', 214) = 0x025a1f32
[0x4022d1] memchr("              p[3] = (unsigned c"..., '\n', 177) = 0x025a1f5e
[0x4022d1] memchr("              goto on_failure;\n "..., '\n', 133) = 0x025a1f7d
[0x4022d1] memchr("            }\n          break;\n "..., '\n', 102) = 0x025a1f8b
[0x4022d1] memchr("          break;\n        \n      "..., '\n', 88) = 0x025a1f9c
[0x4022d1] memchr("        \n        case jump_n: \n "..., '\n', 71) = 0x025a1fa5
[0x4022d1] memchr("        case jump_n: \n          "..., '\n', 62) = 0x025a1fbb
[0x4022d1] memchr("          EXTRACT_NUMBER (mcnt, "..., '\n', 40) = 0x025a1fe3
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5800:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n          /* Originally, this i"..., 'I', 16334) = 0x025a2105
[0x40cdf3] memchr("If don't have to jump any more, "..., '\n', 16102) = 0x025a2147
[0x4022d1] memchr("\n          /* Originally, this i"..., '\n', 219) = 0x025a201d
[0x4022d1] memchr("          /* Originally, this is"..., '\n', 218) = 0x025a205e
[0x4022d1] memchr("          if (mcnt)\n            "..., '\n', 153) = 0x025a2072
[0x4022d1] memchr("            {\n               mcn"..., '\n', 133) = 0x025a2080
[0x4022d1] memchr("               mcnt--;\n         "..., '\n', 119) = 0x025a2097
[0x4022d1] memchr("               STORE_NUMBER (p +"..., '\n', 96) = 0x025a20c2
[0x4022d1] memchr("\t       goto unconditional_jump;"..., '\n', 53) = 0x025a20e9
[0x4022d1] memchr("            }\n          /* If do"..., '\n', 14) = 0x025a20f7
[0x4022d1] memchr("          /* If don't have to ju"..., '\n', 0) = NULL
[0x4023cc] fwrite("5809:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If don't have to ju"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  else      \n\t    p += 4;\t\t    "..., 'I', 16035) = 0x025a21b2
[0x40cdf3] memchr("INT1 ("EXECUTING set_number_at.\\"..., '\n', 15929) = 0x025a21d6
[0x4022d1] memchr("\t  else      \n\t    p += 4;\t\t    "..., '\n', 86) = 0x025a2155
[0x4022d1] memchr("\t    p += 4;\t\t     \n          br"..., '\n', 72) = 0x025a2169
[0x4022d1] memchr("          break;\n        \n\tcase "..., '\n', 52) = 0x025a217a
[0x4022d1] memchr("        \n\tcase set_number_at:\n\t "..., '\n', 35) = 0x025a2183
[0x4022d1] memchr("\tcase set_number_at:\n\t  {\n      "..., '\n', 26) = 0x025a2198
[0x4022d1] memchr("\t  {\n            DEBUG_PRINT1 (""..., '\n', 5) = 0x025a219d
[0x4022d1] memchr("            DEBUG_PRINT1 ("EXECU"..., '\n', 0) = NULL
[0x4023cc] fwrite("5816:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT1 ("EXECU"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n            EXTRACT_NUMBER_AND_"..., 'I', 15892) = 0x025a21f7
[0x40cdf3] memchr("INCR (mcnt, p);\n            p1 ="..., '\n', 15860) = 0x025a2206
[0x4022d1] memchr("\n            EXTRACT_NUMBER_AND_"..., '\n', 1) = 0x025a21d7
[0x4022d1] memchr("            EXTRACT_NUMBER_AND_I"..., '\n', 0) = NULL
[0x4023cc] fwrite("5818:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            EXTRACT_NUMBER_AND_I"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            p1 = p + mcnt;\n     "..., 'I', 15844) = 0x025a2241
[0x40cdf3] memchr("INCR (mcnt, p);\n            DEBU"..., '\n', 15786) = 0x025a2250
[0x4022d1] memchr("            p1 = p + mcnt;\n     "..., '\n', 27) = 0x025a2221
[0x4022d1] memchr("            EXTRACT_NUMBER_AND_I"..., '\n', 0) = NULL
[0x4023cc] fwrite("5820:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            EXTRACT_NUMBER_AND_I"..., 1, 47, 0x7f498147f260) = 47
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("            DEBUG_PRINT3 ("  Set"..., 'I', 15770) = 0x025a2265
[0x40cdf3] memchr("INT3 ("  Setting 0x%x to %d.\\n","..., '\n', 15750) = 0x025a2290
[0x4022d1] memchr("            DEBUG_PRINT3 ("  Set"..., '\n', 0) = NULL
[0x4023cc] fwrite("5821:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("            DEBUG_PRINT3 ("  Set"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    STORE_NUMBER (p1, mcnt);\n  "..., 'I', 15706) = 0x025a22f9
[0x40cdf3] memchr("INT1 ("EXECUTING wordbound.\\n");"..., '\n', 15602) = 0x025a2319
[0x4022d1] memchr("\t    STORE_NUMBER (p1, mcnt);\n  "..., '\n', 86) = 0x025a22ae
[0x4022d1] memchr("            break;\n          }\n\n"..., '\n', 56) = 0x025a22c1
[0x4022d1] memchr("          }\n\n        case wordbo"..., '\n', 37) = 0x025a22cd
[0x4022d1] memchr("\n        case wordbound:\n       "..., '\n', 25) = 0x025a22ce
[0x4022d1] memchr("        case wordbound:\n        "..., '\n', 24) = 0x025a22e6
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5827:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (AT_WORD_BOUNDARY ("..., 'I', 15569) = 0x025a2386
[0x40cdf3] memchr("INT1 ("EXECUTING notwordbound.\\n"..., '\n', 15461) = 0x025a23a9
[0x4022d1] memchr("          if (AT_WORD_BOUNDARY ("..., '\n', 90) = 0x025a233d
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 54) = 0x025a2349
[0x4022d1] memchr("          goto fail;\n\n\tcase notw"..., '\n', 42) = 0x025a235e
[0x4022d1] memchr("\n\tcase notwordbound:\n          D"..., '\n', 21) = 0x025a235f
[0x4022d1] memchr("\tcase notwordbound:\n          DE"..., '\n', 20) = 0x025a2373
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5833:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (AT_WORD_BOUNDARY (d))\n\t  "..., 'I', 15425) = 0x025a240a
[0x40cdf3] memchr("INT1 ("EXECUTING wordbeg.\\n");\n\t"..., '\n', 15329) = 0x025a2428
[0x4022d1] memchr("\t  if (AT_WORD_BOUNDARY (d))\n\t  "..., '\n', 78) = 0x025a23c6
[0x4022d1] memchr("\t    goto fail;\n          break;"..., '\n', 49) = 0x025a23d6
[0x4022d1] memchr("          break;\n\n\tcase wordbeg:"..., '\n', 33) = 0x025a23e7
[0x4022d1] memchr("\n\tcase wordbeg:\n          DEBUG_"..., '\n', 16) = 0x025a23e8
[0x4022d1] memchr("\tcase wordbeg:\n          DEBUG_P"..., '\n', 15) = 0x025a23f7
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5839:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (WORDCHAR_P (d) && (AT_STR"..., 'I', 15298) = 0x025a2449
[0x40cdf3] memchr("INGS_BEG (d) || !WORDCHAR_P (d -"..., '\n', 15266) = 0x025a246e
[0x4022d1] memchr("\t  if (WORDCHAR_P (d) && (AT_STR"..., '\n', 0) = NULL
[0x4023cc] fwrite("5840:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (WORDCHAR_P (d) && (AT_STR"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n          goto fail;"..., 'I', 15228) = 0x025a24b2
[0x40cdf3] memchr("INT1 ("EXECUTING wordend.\\n");\n\t"..., '\n', 15161) = 0x025a24d0
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 49) = 0x025a247a
[0x4022d1] memchr("          goto fail;\n\n\tcase word"..., '\n', 37) = 0x025a248f
[0x4022d1] memchr("\n\tcase wordend:\n          DEBUG_"..., '\n', 16) = 0x025a2490
[0x4022d1] memchr("\tcase wordend:\n          DEBUG_P"..., '\n', 15) = 0x025a249f
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5845:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (!AT_STRINGS_BEG (d) && WO"..., 'I', 15130) = 0x025a24df
[0x40cdf3] memchr("INGS_BEG (d) && WORDCHAR_P (d - "..., '\n', 15116) = 0x025a2501
[0x4022d1] memchr("\t  if (!AT_STRINGS_BEG (d) && WO"..., '\n', 0) = NULL
[0x4023cc] fwrite("5846:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!AT_STRINGS_BEG (d) && WO"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("              && (!WORDCHAR_P (d"..., 'I', 15081) = 0x025a252d
[0x40cdf3] memchr("INGS_END (d)))\n\t    break;\n     "..., '\n', 15038) = 0x025a253b
[0x4022d1] memchr("              && (!WORDCHAR_P (d"..., '\n', 0) = NULL
[0x4023cc] fwrite("5847:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              && (!WORDCHAR_P (d"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n          goto fail;"..., 'I', 15023) = 0x025a25a0
[0x40cdf3] memchr("INT1 ("EXECUTING before_dot.\\n")"..., '\n', 14923) = 0x025a25c1
[0x4022d1] memchr("\t    break;\n          goto fail;"..., '\n', 82) = 0x025a2547
[0x4022d1] memchr("          goto fail;\n\n#ifdef ema"..., '\n', 70) = 0x025a255c
[0x4022d1] memchr("\n#ifdef emacs\n#ifdef emacs19\n  \t"..., '\n', 49) = 0x025a255d
[0x4022d1] memchr("#ifdef emacs\n#ifdef emacs19\n  \tc"..., '\n', 48) = 0x025a256a
[0x4022d1] memchr("#ifdef emacs19\n  \tcase before_do"..., '\n', 35) = 0x025a2579
[0x4022d1] memchr("  \tcase before_dot:\n          DE"..., '\n', 20) = 0x025a258d
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5854:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., 'I', 14889) = 0x025a263a
[0x40cdf3] memchr("INT1 ("EXECUTING at_dot.\\n");\n \t"..., '\n', 14769) = 0x025a2657
[0x4022d1] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '\n', 102) = 0x025a25f6
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n  "..., '\n', 49) = 0x025a2608
[0x4022d1] memchr("  \t  break;\n  \n  \tcase at_dot:\n "..., '\n', 31) = 0x025a2614
[0x4022d1] memchr("  \n  \tcase at_dot:\n          DEB"..., '\n', 19) = 0x025a2617
[0x4022d1] memchr("  \tcase at_dot:\n          DEBUG_"..., '\n', 16) = 0x025a2627
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5860:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., 'I', 14739) = 0x025a26d3
[0x40cdf3] memchr("INT1 ("EXECUTING after_dot.\\n");"..., '\n', 14616) = 0x025a26f3
[0x4022d1] memchr(" \t  if (PTR_CHAR_POS ((unsigned "..., '\n', 105) = 0x025a268c
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n  "..., '\n', 52) = 0x025a269e
[0x4022d1] memchr("  \t  break;\n  \n  \tcase after_dot"..., '\n', 34) = 0x025a26aa
[0x4022d1] memchr("  \n  \tcase after_dot:\n          "..., '\n', 22) = 0x025a26ad
[0x4022d1] memchr("  \tcase after_dot:\n          DEB"..., '\n', 19) = 0x025a26c0
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5866:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (PTR_CHAR_POS ((uns"..., 'I', 14583) = 0x025a2785
[0x40cdf3] memchr("INT1 ("EXECUTING at_dot.\\n");\n\t "..., '\n', 14438) = 0x025a27a2
[0x4022d1] memchr("          if (PTR_CHAR_POS ((uns"..., '\n', 127) = 0x025a272e
[0x4022d1] memchr("  \t    goto fail;\n  \t  break;\n#e"..., '\n', 68) = 0x025a2740
[0x4022d1] memchr("  \t  break;\n#else /* not emacs19"..., '\n', 50) = 0x025a274c
[0x4022d1] memchr("#else /* not emacs19 */\n\tcase at"..., '\n', 38) = 0x025a2764
[0x4022d1] memchr("\tcase at_dot:\n          DEBUG_PR"..., '\n', 14) = 0x025a2772
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5872:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (PTR_CHAR_POS ((unsigned c"..., 'I', 14408) = 0x025a2833
[0x40cdf3] memchr("INT2 ("EXECUTING syntaxspec %d.\\"..., '\n', 14264) = 0x025a285d
[0x4022d1] memchr("\t  if (PTR_CHAR_POS ((unsigned c"..., '\n', 126) = 0x025a27da
[0x4022d1] memchr("\t    goto fail;\n\t  break;\n#endif"..., '\n', 70) = 0x025a27ea
[0x4022d1] memchr("\t  break;\n#endif /* not emacs19 "..., '\n', 54) = 0x025a27f4
[0x4022d1] memchr("#endif /* not emacs19 */\n\n\tcase "..., '\n', 44) = 0x025a280d
[0x4022d1] memchr("\n\tcase syntaxspec:\n          DEB"..., '\n', 19) = 0x025a280e
[0x4022d1] memchr("\tcase syntaxspec:\n          DEBU"..., '\n', 18) = 0x025a2820
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5879:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  mcnt = *p++;\n\t  goto matchsyn"..., 'I', 14221) = 0x025a28ad
[0x40cdf3] memchr("INT1 ("EXECUTING Emacs wordchar."..., '\n', 14142) = 0x025a28d2
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  goto matchsyn"..., '\n', 61) = 0x025a286d
[0x4022d1] memchr("\t  goto matchsyntax;\n\n        ca"..., '\n', 45) = 0x025a2882
[0x4022d1] memchr("\n        case wordchar:\n        "..., '\n', 24) = 0x025a2883
[0x4022d1] memchr("        case wordchar:\n         "..., '\n', 23) = 0x025a289a
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5884:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  mcnt = (int) Sword;\n        m"..., 'I', 14104) = 0x025a29a7
[0x40cdf3] memchr("INT2 ("EXECUTING notsyntaxspec %"..., '\n', 13892) = 0x025a29d4
[0x4022d1] memchr("\t  mcnt = (int) Sword;\n        m"..., '\n', 194) = 0x025a28e9
[0x4022d1] memchr("        matchsyntax:\n\t  PREFETCH"..., '\n', 171) = 0x025a28fe
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (SYNTAX (*"..., '\n', 150) = 0x025a290e
[0x4022d1] memchr("\t  if (SYNTAX (*d++) != (enum sy"..., '\n', 134) = 0x025a293e
[0x4022d1] memchr("            goto fail;\n         "..., '\n', 86) = 0x025a2955
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n\t"..., '\n', 63) = 0x025a2974
[0x4022d1] memchr("\t  break;\n\n\tcase notsyntaxspec:\n"..., '\n', 32) = 0x025a297e
[0x4022d1] memchr("\n\tcase notsyntaxspec:\n          "..., '\n', 22) = 0x025a297f
[0x4022d1] memchr("\tcase notsyntaxspec:\n          D"..., '\n', 21) = 0x025a2994
[0x4022d1] memchr("          DEBUG_PRINT2 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5894:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT2 ("EXECUTI"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  mcnt = *p++;\n\t  goto matchnot"..., 'I', 13846) = 0x025a2a2a
[0x40cdf3] memchr("INT1 ("EXECUTING Emacs notwordch"..., '\n', 13761) = 0x025a2a52
[0x4022d1] memchr("\t  mcnt = *p++;\n\t  goto matchnot"..., '\n', 67) = 0x025a29e4
[0x4022d1] memchr("\t  goto matchnotsyntax;\n\n       "..., '\n', 51) = 0x025a29fc
[0x4022d1] memchr("\n        case notwordchar:\n     "..., '\n', 27) = 0x025a29fd
[0x4022d1] memchr("        case notwordchar:\n      "..., '\n', 26) = 0x025a2a17
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5899:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  mcnt = (int) Sword;\n        m"..., 'I', 13720) = 0x025a2b3b
[0x40cdf3] memchr("INT1 ("EXECUTING non-Emacs wordc"..., '\n', 13488) = 0x025a2b64
[0x4022d1] memchr("\t  mcnt = (int) Sword;\n        m"..., '\n', 214) = 0x025a2a69
[0x4022d1] memchr("        matchnotsyntax:\n\t  PREFE"..., '\n', 191) = 0x025a2a81
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (SYNTAX (*"..., '\n', 167) = 0x025a2a91
[0x4022d1] memchr("\t  if (SYNTAX (*d++) == (enum sy"..., '\n', 151) = 0x025a2ac1
[0x4022d1] memchr("            goto fail;\n\t  SET_RE"..., '\n', 103) = 0x025a2ad8
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 80) = 0x025a2af0
[0x4022d1] memchr("          break;\n\n#else /* not e"..., '\n', 56) = 0x025a2b01
[0x4022d1] memchr("\n#else /* not emacs */\n\tcase wor"..., '\n', 39) = 0x025a2b02
[0x4022d1] memchr("#else /* not emacs */\n\tcase word"..., '\n', 38) = 0x025a2b18
[0x4022d1] memchr("\tcase wordchar:\n          DEBUG_"..., '\n', 16) = 0x025a2b28
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5910:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  PREFETCH ();\n          if (!W"..., 'I', 13446) = 0x025a2c05
[0x40cdf3] memchr("INT1 ("EXECUTING non-Emacs notwo"..., '\n', 13286) = 0x025a2c31
[0x4022d1] memchr("\t  PREFETCH ();\n          if (!W"..., '\n', 142) = 0x025a2b74
[0x4022d1] memchr("          if (!WORDCHAR_P (d))\n "..., '\n', 126) = 0x025a2b93
[0x4022d1] memchr("            goto fail;\n\t  SET_RE"..., '\n', 95) = 0x025a2baa
[0x4022d1] memchr("\t  SET_REGS_MATCHED ();\n        "..., '\n', 72) = 0x025a2bc2
[0x4022d1] memchr("          d++;\n\t  break;\n\t  \n\tca"..., '\n', 48) = 0x025a2bd1
[0x4022d1] memchr("\t  break;\n\t  \n\tcase notwordchar:"..., '\n', 33) = 0x025a2bdb
[0x4022d1] memchr("\t  \n\tcase notwordchar:\n         "..., '\n', 23) = 0x025a2bdf
[0x4022d1] memchr("\tcase notwordchar:\n          DEB"..., '\n', 19) = 0x025a2bf2
[0x4022d1] memchr("          DEBUG_PRINT1 ("EXECUTI"..., '\n', 0) = NULL
[0x4023cc] fwrite("5919:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("EXECUTI"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  PREFETCH ();\n\t  if (WORDCHAR_"..., 'I', 13241) = 0x025a2d90
[0x40cdf3] memchr("IL_STACK_EMPTY ())\n\t{ /* A resta"..., '\n', 12891) = 0x025a2da2
[0x4022d1] memchr("\t  PREFETCH ();\n\t  if (WORDCHAR_"..., '\n', 337) = 0x025a2c41
[0x4022d1] memchr("\t  if (WORDCHAR_P (d))\n         "..., '\n', 321) = 0x025a2c58
[0x4022d1] memchr("            goto fail;\n         "..., '\n', 298) = 0x025a2c6f
[0x4022d1] memchr("          SET_REGS_MATCHED ();\n "..., '\n', 275) = 0x025a2c8e
[0x4022d1] memchr("          d++;\n\t  break;\n#endif "..., '\n', 244) = 0x025a2c9d
[0x4022d1] memchr("\t  break;\n#endif /* not emacs */"..., '\n', 229) = 0x025a2ca7
[0x4022d1] memchr("#endif /* not emacs */\n         "..., '\n', 219) = 0x025a2cbe
[0x4022d1] memchr("          \n        default:\n    "..., '\n', 196) = 0x025a2cc9
[0x4022d1] memchr("        default:\n          abort"..., '\n', 185) = 0x025a2cda
[0x4022d1] memchr("          abort ();\n\t}\n      con"..., '\n', 168) = 0x025a2cee
[0x4022d1] memchr("\t}\n      continue;  /* Successfu"..., '\n', 148) = 0x025a2cf1
[0x4022d1] memchr("      continue;  /* Successfully"..., '\n', 145) = 0x025a2d40
[0x4022d1] memchr("\n\n    /* We goto here if a match"..., '\n', 66) = 0x025a2d41
[0x4022d1] memchr("\n    /* We goto here if a matchi"..., '\n', 65) = 0x025a2d42
[0x4022d1] memchr("    /* We goto here if a matchin"..., '\n', 64) = 0x025a2d78
[0x4022d1] memchr("    fail:\n      if (!FAIL_STACK_"..., '\n', 10) = 0x025a2d82
[0x4022d1] memchr("      if (!FAIL_STACK_EMPTY ())\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("5936:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      if (!FAIL_STACK_EMPTY ())\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t{ /* A restart point is known. "..., 'I', 12872) = 0x025a2df1
[0x40cdf3] memchr("INT1 ("\\nFAIL:\\n");\n          PO"..., '\n', 12794) = 0x025a2e04
[0x4022d1] memchr("\t{ /* A restart point is known. "..., '\n', 60) = 0x025a2dde
[0x4022d1] memchr("          DEBUG_PRINT1 ("\\nFAIL:"..., '\n', 0) = NULL
[0x4023cc] fwrite("5938:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          DEBUG_PRINT1 ("\\nFAIL:"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          POP_FAILURE_POINT (d, "..., 'I', 12774) = 0x025a2e15
[0x40cdf3] memchr("ILURE_POINT (d, p,\n             "..., '\n', 12758) = 0x025a2e27
[0x4022d1] memchr("          POP_FAILURE_POINT (d, "..., '\n', 0) = NULL
[0x4023cc] fwrite("5939:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          POP_FAILURE_POINT (d, "..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                             low"..., 'I', 12739) = 0x025a2eb4
[0x40cdf3] memchr("If this failure point is a dummy"..., '\n', 12599) = 0x025a2eeb
[0x4022d1] memchr("                             low"..., '\n', 127) = 0x025a2e6b
[0x4022d1] memchr("                             reg"..., '\n', 59) = 0x025a2ea5
[0x4022d1] memchr("\n          /* If this failure po"..., '\n', 1) = 0x025a2ea6
[0x4022d1] memchr("          /* If this failure poi"..., '\n', 0) = NULL
[0x4023cc] fwrite("5943:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If this failure poi"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          if (!p)\n\t    goto fail"..., 'I', 12543) = 0x025a2f1c
[0x40cdf3] memchr("If we failed to the end of the p"..., '\n', 12495) = 0x025a2f59
[0x4022d1] memchr("          if (!p)\n\t    goto fail"..., '\n', 35) = 0x025a2efd
[0x4022d1] memchr("\t    goto fail;\n\n          /* If"..., '\n', 17) = 0x025a2f0d
[0x4022d1] memchr("\n          /* If we failed to th"..., '\n', 1) = 0x025a2f0e
[0x4022d1] memchr("          /* If we failed to the"..., '\n', 0) = NULL
[0x4023cc] fwrite("5947:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If we failed to the"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  assert (p <= pend);\n         "..., 'I', 12433) = 0x025a2fe2
[0x40cdf3] memchr("If failed to a backwards jump th"..., '\n', 12297) = 0x025a301b
[0x4022d1] memchr("\t  assert (p <= pend);\n         "..., '\n', 119) = 0x025a2f70
[0x4022d1] memchr("          if (p < pend)\n        "..., '\n', 96) = 0x025a2f88
[0x4022d1] memchr("            {\n              bool"..., '\n', 72) = 0x025a2f96
[0x4022d1] memchr("              boolean is_a_jump_"..., '\n', 58) = 0x025a2fc1
[0x4022d1] memchr("              \n              /* "..., '\n', 15) = 0x025a2fd0
[0x4022d1] memchr("              /* If failed to a "..., '\n', 0) = NULL
[0x4023cc] fwrite("5953:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("              /* If failed to a "..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                 loop, need to p"..., 'I', 12239) = 0x025a3193
[0x40cdf3] memchr("INCR (mcnt, p1);\n               "..., '\n', 11864) = 0x025a31a3
[0x4022d1] memchr("                 loop, need to p"..., '\n', 338) = 0x025a306b
[0x4022d1] memchr("              switch ((re_opcode"..., '\n', 258) = 0x025a3093
[0x4022d1] memchr("                {\n              "..., '\n', 218) = 0x025a30a5
[0x4022d1] memchr("                case jump_n:\n   "..., '\n', 200) = 0x025a30c2
[0x4022d1] memchr("                  is_a_jump_n = "..., '\n', 171) = 0x025a30e8
[0x4022d1] memchr("                case maybe_pop_j"..., '\n', 133) = 0x025a310d
[0x4022d1] memchr("                case pop_failure"..., '\n', 96) = 0x025a3134
[0x4022d1] memchr("                case jump:\n     "..., '\n', 57) = 0x025a314f
[0x4022d1] memchr("                  p1 = p + 1;\n  "..., '\n', 30) = 0x025a316d
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("5963:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  p1 += mcnt;\t\n\n"..., 'I', 11847) = 0x025a33fb
[0x40cdf3] memchr("IABLES ();\n\n  return -1;        "..., '\n', 11248) = 0x025a3405
[0x4022d1] memchr("                  p1 += mcnt;\t\n\n"..., '\n', 589) = 0x025a31c2
[0x4022d1] memchr("\n                  if ((is_a_jum"..., '\n', 558) = 0x025a31c3
[0x4022d1] memchr("                  if ((is_a_jump"..., '\n', 557) = 0x025a3209
[0x4022d1] memchr("                      || (!is_a_"..., '\n', 487) = 0x025a3230
[0x4022d1] memchr("                          && (re"..., '\n', 448) = 0x025a3274
[0x4022d1] memchr("                    goto fail;\n "..., '\n', 380) = 0x025a3293
[0x4022d1] memchr("                  break;\n       "..., '\n', 349) = 0x025a32ac
[0x4022d1] memchr("                default:\n       "..., '\n', 324) = 0x025a32c5
[0x4022d1] memchr("                  /* do nothing "..., '\n', 299) = 0x025a32ea
[0x4022d1] memchr("                }\n            }\n"..., '\n', 262) = 0x025a32fc
[0x4022d1] memchr("            }\n\n          if (d >"..., '\n', 244) = 0x025a330a
[0x4022d1] memchr("\n          if (d >= string1 && d"..., '\n', 230) = 0x025a330b
[0x4022d1] memchr("          if (d >= string1 && d "..., '\n', 229) = 0x025a3334
[0x4022d1] memchr("\t    dend = end_match_1;\n       "..., '\n', 188) = 0x025a334d
[0x4022d1] memchr("        }\n      else\n        bre"..., '\n', 163) = 0x025a3357
[0x4022d1] memchr("      else\n        break;   /* M"..., '\n', 153) = 0x025a3362
[0x4022d1] memchr("        break;   /* Matching at "..., '\n', 142) = 0x025a33a8
[0x4022d1] memchr("    } /* for (;;) */\n\n  if (best"..., '\n', 72) = 0x025a33bd
[0x4022d1] memchr("\n  if (best_regs_set)\n    goto r"..., '\n', 51) = 0x025a33be
[0x4022d1] memchr("  if (best_regs_set)\n    goto re"..., '\n', 50) = 0x025a33d3
[0x4022d1] memchr("    goto restore_best_regs;\n\n  F"..., '\n', 29) = 0x025a33ef
[0x4022d1] memchr("\n  FREE_VARIABLES ();\n\n  return "..., '\n', 1) = 0x025a33f0
[0x4022d1] memchr("  FREE_VARIABLES ();\n\n  return -"..., '\n', 0) = NULL
[0x4023cc] fwrite("5986:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  FREE_VARIABLES ();\n\n  return -"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n  return -1;         \t\t\t/* Fail"..., 'I', 11237) = 0x025a3545
[0x40cdf3] memchr("If we find the matching stop_mem"..., '\n', 10918) = 0x025a3591
[0x4022d1] memchr("\n  return -1;         \t\t\t/* Fail"..., '\n', 316) = 0x025a3406
[0x4022d1] memchr("  return -1;         \t\t\t/* Failu"..., '\n', 315) = 0x025a3437
[0x4022d1] memchr("} /* re_match_2 */\n\014\n/* Subrouti"..., '\n', 266) = 0x025a344a
[0x4022d1] memchr("\014\n/* Subroutine definitions for "..., '\n', 247) = 0x025a344c
[0x4022d1] memchr("/* Subroutine definitions for re"..., '\n', 245) = 0x025a347a
[0x4022d1] memchr("\n\n/* We are passed P pointing to"..., '\n', 199) = 0x025a347b
[0x4022d1] memchr("\n/* We are passed P pointing to "..., '\n', 198) = 0x025a347c
[0x4022d1] memchr("/* We are passed P pointing to a"..., '\n', 197) = 0x025a34c3
[0x4022d1] memchr("   \n   Return true if the patter"..., '\n', 126) = 0x025a34c7
[0x4022d1] memchr("   Return true if the pattern up"..., '\n', 122) = 0x025a350d
[0x4022d1] memchr("   match the empty string, and f"..., '\n', 52) = 0x025a353d
[0x4022d1] memchr("   \n   If we find the matching s"..., '\n', 4) = 0x025a3541
[0x4022d1] memchr("   If we find the matching stop_"..., '\n', 0) = NULL
[0x4023cc] fwrite("5999:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If we find the matching stop_"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Otherwise, sets P to an undef"..., 'I', 10841) = 0x025a386f
[0x40cdf3] memchr("INCR (mcnt, p1);\n          \n    "..., '\n', 10108) = 0x025a387f
[0x4022d1] memchr("   Otherwise, sets P to an undef"..., '\n', 704) = 0x025a35d6
[0x4022d1] memchr("\n   We don't handle duplicates p"..., '\n', 635) = 0x025a35d7
[0x4022d1] memchr("   We don't handle duplicates pr"..., '\n', 634) = 0x025a3609
[0x4022d1] memchr("\nstatic boolean\ngroup_match_null"..., '\n', 584) = 0x025a360a
[0x4022d1] memchr("static boolean\ngroup_match_null_"..., '\n', 583) = 0x025a3619
[0x4022d1] memchr("group_match_null_string_p (p, en"..., '\n', 568) = 0x025a3646
[0x4022d1] memchr("    unsigned char **p, *end;\n   "..., '\n', 523) = 0x025a3663
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 494) = 0x025a3685
[0x4022d1] memchr("{\n  int mcnt;\n  /* Point to afte"..., '\n', 460) = 0x025a3687
[0x4022d1] memchr("  int mcnt;\n  /* Point to after "..., '\n', 458) = 0x025a3693
[0x4022d1] memchr("  /* Point to after the args to "..., '\n', 446) = 0x025a36c9
[0x4022d1] memchr("  unsigned char *p1 = *p + 2;\n  "..., '\n', 392) = 0x025a36e7
[0x4022d1] memchr("  \n  while (p1 < end)\n    {\n    "..., '\n', 362) = 0x025a36ea
[0x4022d1] memchr("  while (p1 < end)\n    {\n      /"..., '\n', 359) = 0x025a36fd
[0x4022d1] memchr("    {\n      /* Skip over opcodes"..., '\n', 340) = 0x025a3703
[0x4022d1] memchr("      /* Skip over opcodes that "..., '\n', 334) = 0x025a3749
[0x4022d1] memchr("\t false, as appropriate, when we"..., '\n', 264) = 0x025a378b
[0x4022d1] memchr("         matching stop_memory.  "..., '\n', 198) = 0x025a37ae
[0x4022d1] memchr("      \n      switch ((re_opcode_"..., '\n', 163) = 0x025a37b5
[0x4022d1] memchr("      switch ((re_opcode_t) *p1)"..., '\n', 156) = 0x025a37d6
[0x4022d1] memchr("        {\n        /* Could be ei"..., '\n', 123) = 0x025a37e0
[0x4022d1] memchr("        /* Could be either a loo"..., '\n', 113) = 0x025a3823
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 46) = 0x025a3841
[0x4022d1] memchr("          p1++;\n          EXTRAC"..., '\n', 16) = 0x025a3851
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6024:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          \n          /* If the n"..., 'I', 10091) = 0x025a3898
[0x40cdf3] memchr("If the next operation is not a j"..., '\n', 10067) = 0x025a38cc
[0x4022d1] memchr("          \n          /* If the n"..., '\n', 11) = 0x025a388a
[0x4022d1] memchr("          /* If the next operati"..., '\n', 0) = NULL
[0x4023cc] fwrite("6026:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          /* If the next operati"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t     pattern.  */\n\n\t  if (mcnt "..., 'I', 10014) = 0x025a3fda
[0x40cdf3] memchr("INCR (mcnt, p1);\n               "..., '\n', 8209) = 0x025a3fea
[0x4022d1] memchr("\t     pattern.  */\n\n\t  if (mcnt "..., '\n', 1768) = 0x025a38df
[0x4022d1] memchr("\n\t  if (mcnt >= 0)\n\t    {\n      "..., '\n', 1749) = 0x025a38e0
[0x4022d1] memchr("\t  if (mcnt >= 0)\n\t    {\n       "..., '\n', 1748) = 0x025a38f2
[0x4022d1] memchr("\t    {\n              /* Go throu"..., '\n', 1730) = 0x025a38f9
[0x4022d1] memchr("              /* Go through the "..., '\n', 1723) = 0x025a393f
[0x4022d1] memchr("                 seeing if any o"..., '\n', 1653) = 0x025a3988
[0x4022d1] memchr("                 The last altern"..., '\n', 1580) = 0x025a39c7
[0x4022d1] memchr("                 whereas the res"..., '\n', 1517) = 0x025a3a0c
[0x4022d1] memchr("                 with a jump, e."..., '\n', 1448) = 0x025a3a51
[0x4022d1] memchr("\n                 /on_failure_ju"..., '\n', 1379) = 0x025a3a52
[0x4022d1] memchr("                 /on_failure_jum"..., '\n', 1378) = 0x025a3a95
[0x4022d1] memchr("                 /on_failure_jum"..., '\n', 1311) = 0x025a3ad8
[0x4022d1] memchr("                 /exactn/1/c\t\t\t\t"..., '\n', 1244) = 0x025a3afb
[0x4022d1] memchr("\n                 So, we have to"..., '\n', 1209) = 0x025a3afc
[0x4022d1] memchr("                 So, we have to "..., '\n', 1208) = 0x025a3b3d
[0x4022d1] memchr("                 alternatives an"..., '\n', 1143) = 0x025a3b8b
[0x4022d1] memchr("\n\n              /* Deal with the"..., '\n', 1065) = 0x025a3b8c
[0x4022d1] memchr("\n              /* Deal with the "..., '\n', 1064) = 0x025a3b8d
[0x4022d1] memchr("              /* Deal with the f"..., '\n', 1063) = 0x025a3bd2
[0x4022d1] memchr("                 with an on_fail"..., '\n', 994) = 0x025a3c1b
[0x4022d1] memchr("                 past a jump_pas"..., '\n', 921) = 0x025a3c46
[0x4022d1] memchr("\n              while ((re_opcode"..., '\n', 878) = 0x025a3c47
[0x4022d1] memchr("              while ((re_opcode_"..., '\n', 877) = 0x025a3c87
[0x4022d1] memchr("                {\n              "..., '\n', 813) = 0x025a3c99
[0x4022d1] memchr("                  /* `mcnt' hold"..., '\n', 795) = 0x025a3cdf
[0x4022d1] memchr("                     is, includi"..., '\n', 725) = 0x025a3d21
[0x4022d1] memchr("                     its number."..., '\n', 659) = 0x025a3d46
[0x4022d1] memchr("\n                  if (!alt_matc"..., '\n', 622) = 0x025a3d47
[0x4022d1] memchr("                  if (!alt_match"..., '\n', 621) = 0x025a3d8b
[0x4022d1] memchr("\t\t\t\t                      reg_in"..., '\n', 553) = 0x025a3db0
[0x4022d1] memchr("                    return false"..., '\n', 516) = 0x025a3dd2
[0x4022d1] memchr("\n                  /* Move to ri"..., '\n', 482) = 0x025a3dd3
[0x4022d1] memchr("                  /* Move to rig"..., '\n', 481) = 0x025a3e1c
[0x4022d1] memchr("\t\t     jump_past_alt.  */\n      "..., '\n', 408) = 0x025a3e36
[0x4022d1] memchr("                  p1 += mcnt;\t\n\n"..., '\n', 382) = 0x025a3e55
[0x4022d1] memchr("\n                  /* Break if i"..., '\n', 351) = 0x025a3e56
[0x4022d1] memchr("                  /* Break if it"..., '\n', 350) = 0x025a3e9e
[0x4022d1] memchr("                     that doesn'"..., '\n', 278) = 0x025a3ee3
[0x4022d1] memchr("                  if ((re_opcode"..., '\n', 209) = 0x025a3f1f
[0x4022d1] memchr("                    break;\n\t\t\n\t\t"..., '\n', 149) = 0x025a3f3a
[0x4022d1] memchr("\t\t\n\t\t  /* Still have to check th"..., '\n', 122) = 0x025a3f3d
[0x4022d1] memchr("\t\t  /* Still have to check that "..., '\n', 119) = 0x025a3f6e
[0x4022d1] memchr("\t\t     alternative that starts w"..., '\n', 70) = 0x025a3faa
[0x4022d1] memchr("\t\t  p1++;\n                  EXTR"..., '\n', 10) = 0x025a3fb4
[0x4022d1] memchr("                  EXTRACT_NUMBER"..., '\n', 0) = NULL
[0x4023cc] fwrite("6071:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("                  EXTRACT_NUMBER"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("                  if ((re_opcode"..., 'I', 8192) = 0x025a443e
[0x40cdf3] memchr("It expects P to be the first byt"..., '\n', 7085) = 0x025a4483
[0x4022d1] memchr("                  if ((re_opcode"..., '\n', 1104) = 0x025a402b
[0x4022d1] memchr("                    {\n\t\t      /*"..., '\n', 1039) = 0x025a4041
[0x4022d1] memchr("\t\t      /* Get to the beginning "..., '\n', 1017) = 0x025a407e
[0x4022d1] memchr("                      p1 -= 3;\n "..., '\n', 956) = 0x025a409d
[0x4022d1] memchr("                      break;\n   "..., '\n', 925) = 0x025a40ba
[0x4022d1] memchr("                    }\n          "..., '\n', 896) = 0x025a40d0
[0x4022d1] memchr("                }\n\n             "..., '\n', 874) = 0x025a40e2
[0x4022d1] memchr("\n              /* Deal with the "..., '\n', 856) = 0x025a40e3
[0x4022d1] memchr("              /* Deal with the l"..., '\n', 855) = 0x025a412b
[0x4022d1] memchr("                 of the `jump_pa"..., '\n', 783) = 0x025a4174
[0x4022d1] memchr("                 the length of t"..., '\n', 710) = 0x025a41a8
[0x4022d1] memchr("              EXTRACT_NUMBER (mc"..., '\n', 658) = 0x025a41d5
[0x4022d1] memchr("\n              if (!alt_match_nu"..., '\n', 613) = 0x025a41d6
[0x4022d1] memchr("              if (!alt_match_nul"..., '\n', 612) = 0x025a421c
[0x4022d1] memchr("                return false;\n\n "..., '\n', 542) = 0x025a423a
[0x4022d1] memchr("\n              p1 += mcnt;\t/* Ge"..., '\n', 512) = 0x025a423b
[0x4022d1] memchr("              p1 += mcnt;\t/* Get"..., '\n', 511) = 0x025a427b
[0x4022d1] memchr("            } /* if mcnt > 0 */\n"..., '\n', 447) = 0x025a429b
[0x4022d1] memchr("          break;\n\n          \n   "..., '\n', 415) = 0x025a42ac
[0x4022d1] memchr("\n          \n        case stop_me"..., '\n', 398) = 0x025a42ad
[0x4022d1] memchr("          \n        case stop_mem"..., '\n', 397) = 0x025a42b8
[0x4022d1] memchr("        case stop_memory:\n\t  ass"..., '\n', 386) = 0x025a42d2
[0x4022d1] memchr("\t  assert (p1[1] == **p);\n      "..., '\n', 360) = 0x025a42ec
[0x4022d1] memchr("          *p = p1 + 2;\n         "..., '\n', 334) = 0x025a4303
[0x4022d1] memchr("          return true;\n\n        "..., '\n', 311) = 0x025a431a
[0x4022d1] memchr("\n        \n        default: \n    "..., '\n', 288) = 0x025a431b
[0x4022d1] memchr("        \n        default: \n     "..., '\n', 287) = 0x025a4324
[0x4022d1] memchr("        default: \n          if ("..., '\n', 278) = 0x025a4336
[0x4022d1] memchr("          if (!common_op_match_n"..., '\n', 260) = 0x025a4379
[0x4022d1] memchr("            return false;\n      "..., '\n', 193) = 0x025a4393
[0x4022d1] memchr("        }\n    } /* while p1 < en"..., '\n', 167) = 0x025a439d
[0x4022d1] memchr("    } /* while p1 < end */\n\n  re"..., '\n', 157) = 0x025a43b8
[0x4022d1] memchr("\n  return false;\n} /* group_matc"..., '\n', 130) = 0x025a43b9
[0x4022d1] memchr("  return false;\n} /* group_match"..., '\n', 129) = 0x025a43c9
[0x4022d1] memchr("} /* group_match_null_string_p *"..., '\n', 113) = 0x025a43eb
[0x4022d1] memchr("\n\n/* Similar to group_match_null"..., '\n', 79) = 0x025a43ec
[0x4022d1] memchr("\n/* Similar to group_match_null_"..., '\n', 78) = 0x025a43ed
[0x4022d1] memchr("/* Similar to group_match_null_s"..., '\n', 77) = 0x025a443a
[0x4022d1] memchr("   It expects P to be the first "..., '\n', 0) = NULL
[0x4023cc] fwrite("6110:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   It expects P to be the first "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   byte past the last. The alter"..., 'I', 7015) = 0x025a4622
[0x40cdf3] memchr("It's a loop.  */\n        case on"..., '\n', 6601) = 0x025a4632
[0x4022d1] memchr("   byte past the last. The alter"..., '\n', 410) = 0x025a44c2
[0x4022d1] memchr("   \nstatic boolean\nalt_match_nul"..., '\n', 347) = 0x025a44c6
[0x4022d1] memchr("static boolean\nalt_match_null_st"..., '\n', 343) = 0x025a44d5
[0x4022d1] memchr("alt_match_null_string_p (p, end,"..., '\n', 328) = 0x025a4500
[0x4022d1] memchr("    unsigned char *p, *end;\n    "..., '\n', 285) = 0x025a451c
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 257) = 0x025a453e
[0x4022d1] memchr("{\n  int mcnt;\n  unsigned char *p"..., '\n', 223) = 0x025a4540
[0x4022d1] memchr("  int mcnt;\n  unsigned char *p1 "..., '\n', 221) = 0x025a454c
[0x4022d1] memchr("  unsigned char *p1 = p;\n  \n  wh"..., '\n', 209) = 0x025a4565
[0x4022d1] memchr("  \n  while (p1 < end)\n    {\n    "..., '\n', 184) = 0x025a4568
[0x4022d1] memchr("  while (p1 < end)\n    {\n      /"..., '\n', 181) = 0x025a457b
[0x4022d1] memchr("    {\n      /* Skip over opcodes"..., '\n', 162) = 0x025a4581
[0x4022d1] memchr("      /* Skip over opcodes that "..., '\n', 156) = 0x025a45cb
[0x4022d1] memchr("         to one that can't.  */\n"..., '\n', 82) = 0x025a45eb
[0x4022d1] memchr("      \n      switch ((re_opcode_"..., '\n', 50) = 0x025a45f2
[0x4022d1] memchr("      switch ((re_opcode_t) *p1)"..., '\n', 43) = 0x025a4613
[0x4022d1] memchr("        {\n\t/* It's a loop.  */\n "..., '\n', 10) = 0x025a461d
[0x4022d1] memchr("\t/* It's a loop.  */\n        cas"..., '\n', 0) = NULL
[0x4023cc] fwrite("6128:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t/* It's a loop.  */\n        cas"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        case on_failure_jump:\n  "..., 'I', 6584) = 0x025a467e
[0x40cdf3] memchr("INCR (mcnt, p1);\n          p1 +="..., '\n', 6509) = 0x025a468e
[0x4022d1] memchr("        case on_failure_jump:\n  "..., '\n', 46) = 0x025a4650
[0x4022d1] memchr("          p1++;\n          EXTRAC"..., '\n', 16) = 0x025a4660
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6131:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          p1 += mcnt;\n          "..., 'I', 6492) = 0x025a4b46
[0x40cdf3] memchr("ING_P (reg_info[reg_no]) == MATC"..., '\n', 5285) = 0x025a4b79
[0x4022d1] memchr("          p1 += mcnt;\n          "..., '\n', 1179) = 0x025a46a4
[0x4022d1] memchr("          break;\n          \n\tdef"..., '\n', 1157) = 0x025a46b5
[0x4022d1] memchr("          \n\tdefault: \n          "..., '\n', 1140) = 0x025a46c0
[0x4022d1] memchr("\tdefault: \n          if (!common"..., '\n', 1129) = 0x025a46cb
[0x4022d1] memchr("          if (!common_op_match_n"..., '\n', 1118) = 0x025a470e
[0x4022d1] memchr("            return false;\n      "..., '\n', 1051) = 0x025a4728
[0x4022d1] memchr("        }\n    }  /* while p1 < e"..., '\n', 1025) = 0x025a4732
[0x4022d1] memchr("    }  /* while p1 < end */\n\n  r"..., '\n', 1015) = 0x025a474e
[0x4022d1] memchr("\n  return true;\n} /* alt_match_n"..., '\n', 987) = 0x025a474f
[0x4022d1] memchr("  return true;\n} /* alt_match_nu"..., '\n', 986) = 0x025a475e
[0x4022d1] memchr("} /* alt_match_null_string_p */\n"..., '\n', 971) = 0x025a477e
[0x4022d1] memchr("\n\n/* Deals with the ops common t"..., '\n', 939) = 0x025a477f
[0x4022d1] memchr("\n/* Deals with the ops common to"..., '\n', 938) = 0x025a4780
[0x4022d1] memchr("/* Deals with the ops common to "..., '\n', 937) = 0x025a47be
[0x4022d1] memchr("   alt_match_null_string_p.  \n  "..., '\n', 875) = 0x025a47dc
[0x4022d1] memchr("   \n   Sets P to one after the o"..., '\n', 845) = 0x025a47e0
[0x4022d1] memchr("   Sets P to one after the op an"..., '\n', 841) = 0x025a481d
[0x4022d1] memchr("\nstatic boolean\ncommon_op_match_"..., '\n', 780) = 0x025a481e
[0x4022d1] memchr("static boolean\ncommon_op_match_n"..., '\n', 779) = 0x025a482d
[0x4022d1] memchr("common_op_match_null_string_p (p"..., '\n', 764) = 0x025a485e
[0x4022d1] memchr("    unsigned char **p, *end;\n   "..., '\n', 715) = 0x025a487b
[0x4022d1] memchr("    register_info_type *reg_info"..., '\n', 686) = 0x025a489d
[0x4022d1] memchr("{\n  int mcnt;\n  boolean ret;\n  i"..., '\n', 652) = 0x025a489f
[0x4022d1] memchr("  int mcnt;\n  boolean ret;\n  int"..., '\n', 650) = 0x025a48ab
[0x4022d1] memchr("  boolean ret;\n  int reg_no;\n  u"..., '\n', 638) = 0x025a48ba
[0x4022d1] memchr("  int reg_no;\n  unsigned char *p"..., '\n', 623) = 0x025a48c8
[0x4022d1] memchr("  unsigned char *p1 = *p;\n\n  swi"..., '\n', 609) = 0x025a48e2
[0x4022d1] memchr("\n  switch ((re_opcode_t) *p1++)\n"..., '\n', 583) = 0x025a48e3
[0x4022d1] memchr("  switch ((re_opcode_t) *p1++)\n "..., '\n', 582) = 0x025a4902
[0x4022d1] memchr("    {\n    case no_op:\n    case b"..., '\n', 551) = 0x025a4908
[0x4022d1] memchr("    case no_op:\n    case begline"..., '\n', 545) = 0x025a4918
[0x4022d1] memchr("    case begline:\n    case endli"..., '\n', 529) = 0x025a492a
[0x4022d1] memchr("    case endline:\n    case begbu"..., '\n', 511) = 0x025a493c
[0x4022d1] memchr("    case begbuf:\n    case endbuf"..., '\n', 493) = 0x025a494d
[0x4022d1] memchr("    case endbuf:\n    case wordbe"..., '\n', 476) = 0x025a495e
[0x4022d1] memchr("    case wordbeg:\n    case worde"..., '\n', 459) = 0x025a4970
[0x4022d1] memchr("    case wordend:\n    case wordb"..., '\n', 441) = 0x025a4982
[0x4022d1] memchr("    case wordbound:\n    case not"..., '\n', 423) = 0x025a4996
[0x4022d1] memchr("    case notwordbound:\n#ifdef em"..., '\n', 403) = 0x025a49ad
[0x4022d1] memchr("#ifdef emacs\n    case before_dot"..., '\n', 380) = 0x025a49ba
[0x4022d1] memchr("    case before_dot:\n    case at"..., '\n', 367) = 0x025a49cf
[0x4022d1] memchr("    case at_dot:\n    case after_"..., '\n', 346) = 0x025a49e0
[0x4022d1] memchr("    case after_dot:\n#endif\n     "..., '\n', 329) = 0x025a49f4
[0x4022d1] memchr("#endif\n      break;\n\n    case st"..., '\n', 309) = 0x025a49fb
[0x4022d1] memchr("      break;\n\n    case start_mem"..., '\n', 302) = 0x025a4a08
[0x4022d1] memchr("\n    case start_memory:\n      re"..., '\n', 289) = 0x025a4a09
[0x4022d1] memchr("    case start_memory:\n      reg"..., '\n', 288) = 0x025a4a20
[0x4022d1] memchr("      reg_no = *p1;\n      assert"..., '\n', 265) = 0x025a4a34
[0x4022d1] memchr("      assert (reg_no > 0 && reg_"..., '\n', 245) = 0x025a4a67
[0x4022d1] memchr("      ret = group_match_null_str"..., '\n', 194) = 0x025a4aa3
[0x4022d1] memchr("      \n      /* Have to set this"..., '\n', 134) = 0x025a4aaa
[0x4022d1] memchr("      /* Have to set this here i"..., '\n', 127) = 0x025a4aee
[0x4022d1] memchr("         contains a group and a "..., '\n', 59) = 0x025a4b28
[0x4022d1] memchr("\n      if (REG_MATCH_NULL_STRING"..., '\n', 1) = 0x025a4b29
[0x4022d1] memchr("      if (REG_MATCH_NULL_STRING_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6186:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      if (REG_MATCH_NULL_STRING_"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        REG_MATCH_NULL_STRING_P "..., 'I', 5233) = 0x025a4b94
[0x40cdf3] memchr("ING_P (reg_info[reg_no]) = ret;\n"..., '\n', 5207) = 0x025a4bb3
[0x4022d1] memchr("        REG_MATCH_NULL_STRING_P "..., '\n', 0) = NULL
[0x4023cc] fwrite("6187:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        REG_MATCH_NULL_STRING_P "..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n      if (!ret)\n        return "..., 'I', 5175) = 0x025a4bfa
[0x40cdf3] memchr("If this is an optimized succeed_"..., '\n', 5105) = 0x025a4c3e
[0x4022d1] memchr("\n      if (!ret)\n        return "..., '\n', 63) = 0x025a4bb4
[0x4022d1] memchr("      if (!ret)\n        return f"..., '\n', 62) = 0x025a4bc4
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 46) = 0x025a4bda
[0x4022d1] memchr("      break;\n          \n    /* I"..., '\n', 24) = 0x025a4be7
[0x4022d1] memchr("          \n    /* If this is an "..., '\n', 11) = 0x025a4bf2
[0x4022d1] memchr("    /* If this is an optimized s"..., '\n', 0) = NULL
[0x4023cc] fwrite("6193:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    /* If this is an optimized s"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    case jump:\n      EXTRACT_NUM"..., 'I', 5036) = 0x025a4c67
[0x40cdf3] memchr("INCR (mcnt, p1);\n      if (mcnt "..., '\n', 4996) = 0x025a4c77
[0x4022d1] memchr("    case jump:\n      EXTRACT_NUM"..., '\n', 15) = 0x025a4c4d
[0x4022d1] memchr("      EXTRACT_NUMBER_AND_INCR (m"..., '\n', 0) = NULL
[0x4023cc] fwrite("6195:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      EXTRACT_NUMBER_AND_INCR (m"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (mcnt >= 0)\n        p1 "..., 'I', 4979) = 0x025a4d42
[0x40cdf3] memchr("INCR (mcnt, p1);\n\n      if (mcnt"..., '\n', 4777) = 0x025a4d52
[0x4022d1] memchr("      if (mcnt >= 0)\n        p1 "..., '\n', 177) = 0x025a4c8c
[0x4022d1] memchr("        p1 += mcnt;\n      else\n "..., '\n', 156) = 0x025a4ca0
[0x4022d1] memchr("      else\n        return false;"..., '\n', 136) = 0x025a4cab
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 125) = 0x025a4cc1
[0x4022d1] memchr("      break;\n\n    case succeed_n"..., '\n', 103) = 0x025a4cce
[0x4022d1] memchr("\n    case succeed_n:\n      /* Ge"..., '\n', 90) = 0x025a4ccf
[0x4022d1] memchr("    case succeed_n:\n      /* Get"..., '\n', 89) = 0x025a4ce3
[0x4022d1] memchr("      /* Get to the number of ti"..., '\n', 69) = 0x025a4d17
[0x4022d1] memchr("      p1 += 2;\t\t\n      EXTRACT_N"..., '\n', 17) = 0x025a4d28
[0x4022d1] memchr("      EXTRACT_NUMBER_AND_INCR (m"..., '\n', 0) = NULL
[0x4023cc] fwrite("6205:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      EXTRACT_NUMBER_AND_INCR (m"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n      if (mcnt == 0)\n        {\n"..., 'I', 4760) = 0x025a4da3
[0x40cdf3] memchr("INCR (mcnt, p1);\n          p1 +="..., '\n', 4680) = 0x025a4db3
[0x4022d1] memchr("\n      if (mcnt == 0)\n        {\n"..., '\n', 51) = 0x025a4d53
[0x4022d1] memchr("      if (mcnt == 0)\n        {\n "..., '\n', 50) = 0x025a4d68
[0x4022d1] memchr("        {\n          p1 -= 4;\n   "..., '\n', 29) = 0x025a4d72
[0x4022d1] memchr("          p1 -= 4;\n          EXT"..., '\n', 19) = 0x025a4d85
[0x4022d1] memchr("          EXTRACT_NUMBER_AND_INC"..., '\n', 0) = NULL
[0x4023cc] fwrite("6210:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("          EXTRACT_NUMBER_AND_INC"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("          p1 += mcnt;\n        }\n"..., 'I', 4663) = 0x025a4e35
[0x40cdf3] memchr("ING_P (reg_info[*p1]))\n        r"..., '\n', 4534) = 0x025a4e4b
[0x4022d1] memchr("          p1 += mcnt;\n        }\n"..., '\n', 100) = 0x025a4dc9
[0x4022d1] memchr("        }\n      else\n        ret"..., '\n', 78) = 0x025a4dd3
[0x4022d1] memchr("      else\n        return false;"..., '\n', 68) = 0x025a4dde
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 57) = 0x025a4df4
[0x4022d1] memchr("      break;\n\n    case duplicate"..., '\n', 35) = 0x025a4e01
[0x4022d1] memchr("\n    case duplicate: \n      if ("..., '\n', 22) = 0x025a4e02
[0x4022d1] memchr("    case duplicate: \n      if (!"..., '\n', 21) = 0x025a4e17
[0x4022d1] memchr("      if (!REG_MATCH_NULL_STRING"..., '\n', 0) = NULL
[0x4023cc] fwrite("6218:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      if (!REG_MATCH_NULL_STRING"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        return false;\n      brea"..., 'I', 4511) = 0x025a5154
[0x40cdf3] memchr("IZE) and puts the result in BUFP"..., '\n', 3735) = 0x025a5175
[0x4022d1] memchr("        return false;\n      brea"..., '\n', 744) = 0x025a4e61
[0x4022d1] memchr("      break;\n\n    case set_numbe"..., '\n', 722) = 0x025a4e6e
[0x4022d1] memchr("\n    case set_number_at:\n      p"..., '\n', 709) = 0x025a4e6f
[0x4022d1] memchr("    case set_number_at:\n      p1"..., '\n', 708) = 0x025a4e87
[0x4022d1] memchr("      p1 += 4;\n\n    default:\n   "..., '\n', 684) = 0x025a4e96
[0x4022d1] memchr("\n    default:\n      /* All other"..., '\n', 669) = 0x025a4e97
[0x4022d1] memchr("    default:\n      /* All other "..., '\n', 668) = 0x025a4ea4
[0x4022d1] memchr("      /* All other opcodes mean "..., '\n', 655) = 0x025a4eea
[0x4022d1] memchr("      return false;\n  }\n\n  *p = "..., '\n', 585) = 0x025a4efe
[0x4022d1] memchr("  }\n\n  *p = p1;\n  return true;\n}"..., '\n', 565) = 0x025a4f02
[0x4022d1] memchr("\n  *p = p1;\n  return true;\n} /* "..., '\n', 561) = 0x025a4f03
[0x4022d1] memchr("  *p = p1;\n  return true;\n} /* c"..., '\n', 560) = 0x025a4f0e
[0x4022d1] memchr("  return true;\n} /* common_op_ma"..., '\n', 549) = 0x025a4f1d
[0x4022d1] memchr("} /* common_op_match_null_string"..., '\n', 534) = 0x025a4f43
[0x4022d1] memchr("\n\n/* Return zero if TRANSLATE[S1"..., '\n', 496) = 0x025a4f44
[0x4022d1] memchr("\n/* Return zero if TRANSLATE[S1]"..., '\n', 495) = 0x025a4f45
[0x4022d1] memchr("/* Return zero if TRANSLATE[S1] "..., '\n', 494) = 0x025a4f8d
[0x4022d1] memchr("   bytes; nonzero otherwise.  */"..., '\n', 422) = 0x025a4fae
[0x4022d1] memchr("   \nstatic int\nbcmp_translate (s"..., '\n', 389) = 0x025a4fb2
[0x4022d1] memchr("static int\nbcmp_translate (s1, s"..., '\n', 385) = 0x025a4fbd
[0x4022d1] memchr("bcmp_translate (s1, s2, len, tra"..., '\n', 374) = 0x025a4fe5
[0x4022d1] memchr("     unsigned char *s1, *s2;\n   "..., '\n', 334) = 0x025a5002
[0x4022d1] memchr("     register int len;\n     char"..., '\n', 305) = 0x025a5019
[0x4022d1] memchr("     char *translate;\n{\n  regist"..., '\n', 282) = 0x025a502f
[0x4022d1] memchr("{\n  register unsigned char *p1 ="..., '\n', 260) = 0x025a5031
[0x4022d1] memchr("  register unsigned char *p1 = s"..., '\n', 258) = 0x025a505e
[0x4022d1] memchr("  while (len)\n    {\n      if (tr"..., '\n', 213) = 0x025a506c
[0x4022d1] memchr("    {\n      if (translate[*p1++]"..., '\n', 199) = 0x025a5072
[0x4022d1] memchr("      if (translate[*p1++] != tr"..., '\n', 193) = 0x025a50ac
[0x4022d1] memchr("      len--;\n    }\n  return 0;\n}"..., '\n', 135) = 0x025a50b9
[0x4022d1] memchr("    }\n  return 0;\n}\n\014\n/* Entry p"..., '\n', 122) = 0x025a50bf
[0x4022d1] memchr("  return 0;\n}\n\014\n/* Entry points "..., '\n', 116) = 0x025a50cb
[0x4022d1] memchr("}\n\014\n/* Entry points for GNU code"..., '\n', 104) = 0x025a50cd
[0x4022d1] memchr("\014\n/* Entry points for GNU code. "..., '\n', 102) = 0x025a50cf
[0x4022d1] memchr("/* Entry points for GNU code.  *"..., '\n', 100) = 0x025a50f1
[0x4022d1] memchr("\n/* re_compile_pattern is the GN"..., '\n', 66) = 0x025a50f2
[0x4022d1] memchr("/* re_compile_pattern is the GNU"..., '\n', 65) = 0x025a5133
[0x4022d1] memchr("   compiles PATTERN (of length S"..., '\n', 0) = NULL
[0x4023cc] fwrite("6256:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   compiles PATTERN (of length S"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Returns 0 if the pattern was "..., 'I', 3701) = 0x025a5582
[0x40cdf3] memchr("IX compilation.  */\n\n#if !define"..., '\n', 2665) = 0x025a5595
[0x4022d1] memchr("   Returns 0 if the pattern was "..., '\n', 1002) = 0x025a51b7
[0x4022d1] memchr("   \n   Assumes the `allocated' ("..., '\n', 936) = 0x025a51bb
[0x4022d1] memchr("   Assumes the `allocated' (and "..., '\n', 932) = 0x025a5204
[0x4022d1] memchr("   are set in BUFP on entry.\n   "..., '\n', 859) = 0x025a5221
[0x4022d1] memchr("   \n   We call regex_compile to "..., '\n', 830) = 0x025a5225
[0x4022d1] memchr("   We call regex_compile to do t"..., '\n', 826) = 0x025a5260
[0x4022d1] memchr("\nconst char *\nre_compile_pattern"..., '\n', 767) = 0x025a5261
[0x4022d1] memchr("const char *\nre_compile_pattern "..., '\n', 766) = 0x025a526e
[0x4022d1] memchr("re_compile_pattern (pattern, len"..., '\n', 753) = 0x025a5299
[0x4022d1] memchr("     const char *pattern;\n     i"..., '\n', 710) = 0x025a52b3
[0x4022d1] memchr("     int length;\n     struct re_"..., '\n', 684) = 0x025a52c4
[0x4022d1] memchr("     struct re_pattern_buffer *b"..., '\n', 667) = 0x025a52e9
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  \n  /* G"..., '\n', 630) = 0x025a52eb
[0x4022d1] memchr("  reg_errcode_t ret;\n  \n  /* GNU"..., '\n', 628) = 0x025a5300
[0x4022d1] memchr("  \n  /* GNU code is written to a"..., '\n', 607) = 0x025a5303
[0x4022d1] memchr("  /* GNU code is written to assu"..., '\n', 604) = 0x025a534e
[0x4022d1] memchr("     (and at least one extra wil"..., '\n', 529) = 0x025a537c
[0x4022d1] memchr("  bufp->regs_allocated = REGS_UN"..., '\n', 483) = 0x025a53a7
[0x4022d1] memchr("  \n  /* And GNU code determines "..., '\n', 440) = 0x025a53aa
[0x4022d1] memchr("  /* And GNU code determines whe"..., '\n', 437) = 0x025a53f2
[0x4022d1] memchr("     by passing null for the REG"..., '\n', 365) = 0x025a5437
[0x4022d1] memchr("     setting no_sub.  */\n  bufp-"..., '\n', 296) = 0x025a5450
[0x4022d1] memchr("  bufp->no_sub = 0;\n  \n  /* Matc"..., '\n', 271) = 0x025a5464
[0x4022d1] memchr("  \n  /* Match anchors at newline"..., '\n', 251) = 0x025a5467
[0x4022d1] memchr("  /* Match anchors at newline.  "..., '\n', 248) = 0x025a548a
[0x4022d1] memchr("  bufp->newline_anchor = 1;\n  \n "..., '\n', 213) = 0x025a54a6
[0x4022d1] memchr("  \n  ret = regex_compile (patter"..., '\n', 185) = 0x025a54a9
[0x4022d1] memchr("  ret = regex_compile (pattern, "..., '\n', 182) = 0x025a54eb
[0x4022d1] memchr("\n  return re_error_msg[(int) ret"..., '\n', 116) = 0x025a54ec
[0x4022d1] memchr("  return re_error_msg[(int) ret]"..., '\n', 115) = 0x025a550e
[0x4022d1] memchr("}     \n\014\n/* Entry points compati"..., '\n', 81) = 0x025a5515
[0x4022d1] memchr("\014\n/* Entry points compatible wit"..., '\n', 74) = 0x025a5517
[0x4022d1] memchr("/* Entry points compatible with "..., '\n', 72) = 0x025a555f
[0x4022d1] memchr("   them if this is an Emacs or P"..., '\n', 0) = NULL
[0x4023cc] fwrite("6290:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   them if this is an Emacs or P"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#if !defined (emacs) && !define"..., 'I', 2645) = 0x025a55bd
[0x40cdf3] memchr("IX_SOURCE)\n\n/* BSD has one and o"..., '\n', 2606) = 0x025a55c7
[0x4022d1] memchr("\n#if !defined (emacs) && !define"..., '\n', 1) = 0x025a5596
[0x4022d1] memchr("#if !defined (emacs) && !defined"..., '\n', 0) = NULL
[0x4023cc] fwrite("6292:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#if !defined (emacs) && !defined"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* BSD has one and only one pat"..., 'I', 2595) = 0x025a57d7
[0x40cdf3] memchr("IDTH);\n      if (re_comp_buf.fas"..., '\n', 2068) = 0x025a57dd
[0x4022d1] memchr("\n/* BSD has one and only one pat"..., '\n', 472) = 0x025a55c8
[0x4022d1] memchr("/* BSD has one and only one patt"..., '\n', 471) = 0x025a55f8
[0x4022d1] memchr("static struct re_pattern_buffer "..., '\n', 423) = 0x025a5625
[0x4022d1] memchr("\nchar *\nre_comp (s)\n    const ch"..., '\n', 378) = 0x025a5626
[0x4022d1] memchr("char *\nre_comp (s)\n    const cha"..., '\n', 377) = 0x025a562d
[0x4022d1] memchr("re_comp (s)\n    const char *s;\n{"..., '\n', 370) = 0x025a5639
[0x4022d1] memchr("    const char *s;\n{\n  reg_errco"..., '\n', 358) = 0x025a564c
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  \n  if ("..., '\n', 339) = 0x025a564e
[0x4022d1] memchr("  reg_errcode_t ret;\n  \n  if (!s"..., '\n', 337) = 0x025a5663
[0x4022d1] memchr("  \n  if (!s)\n    {\n      if (!re"..., '\n', 316) = 0x025a5666
[0x4022d1] memchr("  if (!s)\n    {\n      if (!re_co"..., '\n', 313) = 0x025a5670
[0x4022d1] memchr("    {\n      if (!re_comp_buf.buf"..., '\n', 303) = 0x025a5676
[0x4022d1] memchr("      if (!re_comp_buf.buffer)\n\t"..., '\n', 297) = 0x025a5695
[0x4022d1] memchr("\treturn "No previous regular exp"..., '\n', 266) = 0x025a56bf
[0x4022d1] memchr("      return 0;\n    }\n\n  if (!re"..., '\n', 224) = 0x025a56cf
[0x4022d1] memchr("    }\n\n  if (!re_comp_buf.buffer"..., '\n', 208) = 0x025a56d5
[0x4022d1] memchr("\n  if (!re_comp_buf.buffer)\n    "..., '\n', 202) = 0x025a56d6
[0x4022d1] memchr("  if (!re_comp_buf.buffer)\n    {"..., '\n', 201) = 0x025a56f1
[0x4022d1] memchr("    {\n      re_comp_buf.buffer ="..., '\n', 174) = 0x025a56f7
[0x4022d1] memchr("      re_comp_buf.buffer = (unsi"..., '\n', 168) = 0x025a5732
[0x4022d1] memchr("      if (re_comp_buf.buffer == "..., '\n', 109) = 0x025a5758
[0x4022d1] memchr("        return "Memory exhausted"..., '\n', 71) = 0x025a577b
[0x4022d1] memchr("      re_comp_buf.allocated = 20"..., '\n', 36) = 0x025a579e
[0x4022d1] memchr("\n      re_comp_buf.fastmap = (ch"..., '\n', 1) = 0x025a579f
[0x4022d1] memchr("      re_comp_buf.fastmap = (cha"..., '\n', 0) = NULL
[0x4023cc] fwrite("6317:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      re_comp_buf.fastmap = (cha"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (re_comp_buf.fastmap =="..., 'I', 2061) = 0x025a5a64
[0x40cdf3] memchr("IX_SOURCE */\n\014\n/* POSIX.2 functi"..., '\n', 1415) = 0x025a5a70
[0x4022d1] memchr("      if (re_comp_buf.fastmap =="..., '\n', 614) = 0x025a5804
[0x4022d1] memchr("\treturn "Memory exhausted";\n    "..., '\n', 575) = 0x025a5820
[0x4022d1] memchr("    }\n\n  /* Since `re_exec' alwa"..., '\n', 547) = 0x025a5826
[0x4022d1] memchr("\n  /* Since `re_exec' always pas"..., '\n', 541) = 0x025a5827
[0x4022d1] memchr("  /* Since `re_exec' always pass"..., '\n', 540) = 0x025a586b
[0x4022d1] memchr("     don't need to initialize th"..., '\n', 472) = 0x025a58b8
[0x4022d1] memchr("\n  /* Match anchors at newlines."..., '\n', 395) = 0x025a58b9
[0x4022d1] memchr("  /* Match anchors at newlines. "..., '\n', 394) = 0x025a58dd
[0x4022d1] memchr("  re_comp_buf.newline_anchor = 1"..., '\n', 358) = 0x025a58ff
[0x4022d1] memchr("\n  ret = regex_compile (s, strle"..., '\n', 324) = 0x025a5900
[0x4022d1] memchr("  ret = regex_compile (s, strlen"..., '\n', 323) = 0x025a5948
[0x4022d1] memchr("  \n  /* Yes, we're discarding `c"..., '\n', 251) = 0x025a594b
[0x4022d1] memchr("  /* Yes, we're discarding `cons"..., '\n', 248) = 0x025a5978
[0x4022d1] memchr("  return (char *) re_error_msg[("..., '\n', 203) = 0x025a59a3
[0x4022d1] memchr("}\n\n\nint\nre_exec (s)\n    const ch"..., '\n', 160) = 0x025a59a5
[0x4022d1] memchr("\n\nint\nre_exec (s)\n    const char"..., '\n', 158) = 0x025a59a6
[0x4022d1] memchr("\nint\nre_exec (s)\n    const char "..., '\n', 157) = 0x025a59a7
[0x4022d1] memchr("int\nre_exec (s)\n    const char *"..., '\n', 156) = 0x025a59ab
[0x4022d1] memchr("re_exec (s)\n    const char *s;\n{"..., '\n', 152) = 0x025a59b7
[0x4022d1] memchr("    const char *s;\n{\n  const int"..., '\n', 140) = 0x025a59ca
[0x4022d1] memchr("{\n  const int len = strlen (s);\n"..., '\n', 121) = 0x025a59cc
[0x4022d1] memchr("  const int len = strlen (s);\n  "..., '\n', 119) = 0x025a59ea
[0x4022d1] memchr("  return\n    0 <= re_search (&re"..., '\n', 89) = 0x025a59f3
[0x4022d1] memchr("    0 <= re_search (&re_comp_buf"..., '\n', 80) = 0x025a5a41
[0x4022d1] memchr("}\n#endif /* not emacs and not _P"..., '\n', 2) = 0x025a5a43
[0x4022d1] memchr("#endif /* not emacs and not _POS"..., '\n', 0) = NULL
[0x4023cc] fwrite("6343:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#endif /* not emacs and not _POS"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\014\n/* POSIX.2 functions.  Don't d"..., 'I', 1402) = 0x025a5a79
[0x40cdf3] memchr("IX.2 functions.  Don't define th"..., '\n', 1394) = 0x025a5aab
[0x4022d1] memchr("\014\n/* POSIX.2 functions.  Don't d"..., '\n', 2) = 0x025a5a72
[0x4022d1] memchr("/* POSIX.2 functions.  Don't def"..., '\n', 0) = NULL
[0x4023cc] fwrite("6345:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* POSIX.2 functions.  Don't def"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#ifndef emacs\n\n/* regcomp takes"..., 'I', 1343) = 0x025a5b54
[0x40cdf3] memchr("IX says we shouldn't.  Thus, we "..., '\n', 1175) = 0x025a5b77
[0x4022d1] memchr("\n#ifndef emacs\n\n/* regcomp takes"..., '\n', 156) = 0x025a5aac
[0x4022d1] memchr("#ifndef emacs\n\n/* regcomp takes "..., '\n', 155) = 0x025a5aba
[0x4022d1] memchr("\n/* regcomp takes a regular expr"..., '\n', 141) = 0x025a5abb
[0x4022d1] memchr("/* regcomp takes a regular expre"..., '\n', 140) = 0x025a5afe
[0x4022d1] memchr("\n   PREG is a regex_t *.  We do "..., '\n', 73) = 0x025a5aff
[0x4022d1] memchr("   PREG is a regex_t *.  We do n"..., '\n', 72) = 0x025a5b47
[0x4022d1] memchr("   since POSIX says we shouldn't"..., '\n', 0) = NULL
[0x4023cc] fwrite("6352:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   since POSIX says we shouldn't"..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n     `buffer' to the compiled p"..., 'I', 1139) = 0x025a5bf1
[0x40cdf3] memchr("IX_EXTENDED if the\n       REG_EX"..., '\n', 1018) = 0x025a5c03
[0x4022d1] memchr("\n     `buffer' to the compiled p"..., '\n', 91) = 0x025a5b78
[0x4022d1] memchr("     `buffer' to the compiled pa"..., '\n', 90) = 0x025a5b9f
[0x4022d1] memchr("     `used' to the length of the"..., '\n', 51) = 0x025a5bd2
[0x4022d1] memchr("     `syntax' to RE_SYNTAX_POSIX"..., '\n', 0) = NULL
[0x4023cc] fwrite("6356:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     `syntax' to RE_SYNTAX_POSIX"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("       REG_EXTENDED bit in CFLAG"..., 'I', 999) = 0x025a5c50
[0x40cdf3] memchr("IX_BASIC;\n     `newline_anchor' "..., '\n', 923) = 0x025a5c59
[0x4022d1] memchr("       REG_EXTENDED bit in CFLAG"..., '\n', 56) = 0x025a5c3b
[0x4022d1] memchr("       RE_SYNTAX_POSIX_BASIC;\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("6358:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("       RE_SYNTAX_POSIX_BASIC;\n  "..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     `newline_anchor' to REG_NEW"..., 'I', 913) = 0x025a5c7b
[0x40cdf3] memchr("INE being set in CFLAGS;\n     `f"..., '\n', 880) = 0x025a5c93
[0x4022d1] memchr("     `newline_anchor' to REG_NEW"..., '\n', 0) = NULL
[0x4023cc] fwrite("6359:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     `newline_anchor' to REG_NEW"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     `fastmap' and `fastmap_accu"..., 'I', 855) = 0x025a5d6f
[0x40cdf3] memchr("If REG_EXTENDED is set, we use P"..., '\n', 636) = 0x025a5db2
[0x4022d1] memchr("     `fastmap' and `fastmap_accu"..., '\n', 214) = 0x025a5cc2
[0x4022d1] memchr("     `re_nsub' to the number of "..., '\n', 167) = 0x025a5cfd
[0x4022d1] memchr("\n   PATTERN is the address of th"..., '\n', 108) = 0x025a5cfe
[0x4022d1] memchr("   PATTERN is the address of the"..., '\n', 107) = 0x025a5d2f
[0x4022d1] memchr("\n   CFLAGS is a series of bits w"..., '\n', 58) = 0x025a5d30
[0x4022d1] memchr("   CFLAGS is a series of bits wh"..., '\n', 57) = 0x025a5d68
[0x4022d1] memchr("\n     If REG_EXTENDED is set, we"..., '\n', 1) = 0x025a5d69
[0x4022d1] memchr("     If REG_EXTENDED is set, we "..., '\n', 0) = NULL
[0x4023cc] fwrite("6367:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     If REG_EXTENDED is set, we "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     use POSIX basic syntax.\n\n  "..., 'I', 568) = 0x025a5dbf
[0x40cdf3] memchr("IX basic syntax.\n\n     If REG_NE"..., '\n', 556) = 0x025a5dcf
[0x4022d1] memchr("     use POSIX basic syntax.\n\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("6368:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     use POSIX basic syntax.\n\n  "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n     If REG_NEWLINE is set, the"..., 'I', 539) = 0x025a5dd6
[0x40cdf3] memchr("If REG_NEWLINE is set, then . an"..., '\n', 533) = 0x025a5e13
[0x4022d1] memchr("\n     If REG_NEWLINE is set, the"..., '\n', 1) = 0x025a5dd0
[0x4022d1] memchr("     If REG_NEWLINE is set, then"..., '\n', 0) = NULL
[0x4023cc] fwrite("6370:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     If REG_NEWLINE is set, then"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     Also, regexec will try a ma"..., 'I', 471) = 0x025a5e5d
[0x40cdf3] memchr("If REG_ICASE is set, then we con"..., '\n', 398) = 0x025a5e98
[0x4022d1] memchr("     Also, regexec will try a ma"..., '\n', 68) = 0x025a5e56
[0x4022d1] memchr("\n     If REG_ICASE is set, then "..., '\n', 1) = 0x025a5e57
[0x4022d1] memchr("     If REG_ICASE is set, then w"..., '\n', 0) = NULL
[0x4023cc] fwrite("6373:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     If REG_ICASE is set, then w"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     versions of letters to be e"..., 'I', 338) = 0x025a5ed8
[0x40cdf3] memchr("If REG_NOSUB is set, then when P"..., '\n', 275) = 0x025a5f16
[0x4022d1] memchr("     versions of letters to be e"..., '\n', 58) = 0x025a5ed1
[0x4022d1] memchr("\n     If REG_NOSUB is set, then "..., '\n', 1) = 0x025a5ed2
[0x4022d1] memchr("     If REG_NOSUB is set, then w"..., '\n', 0) = NULL
[0x4023cc] fwrite("6376:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     If REG_NOSUB is set, then w"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     routine will report only su"..., 'I', 212) = 0x025a5f73
[0x40cdf3] memchr("It returns 0 if it succeeds, non"..., '\n', 120) = 0x025a5fb8
[0x4022d1] memchr("     routine will report only su"..., '\n', 89) = 0x025a5f5e
[0x4022d1] memchr("     registers.\n\n   It returns 0"..., '\n', 17) = 0x025a5f6e
[0x4022d1] memchr("\n   It returns 0 if it succeeds,"..., '\n', 1) = 0x025a5f6f
[0x4022d1] memchr("   It returns 0 if it succeeds, "..., '\n', 0) = NULL
[0x4023cc] fwrite("6380:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   It returns 0 if it succeeds, "..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   the return codes and their me"..., 'I', 50) = NULL
[0x4022d1] memchr("   the return codes and their me"..., '\n', 50) = 0x025a5fe5
[0x4022d1] memchr("\nint\nregcomp (preg, patter", '\n', 5) = 0x025a5fe6
[0x4022d1] memchr("int\nregcomp (preg, patter", '\n', 4) = 0x025a5fea
[0x4022d1] memchr("regcomp (preg, patter", '\n', 0) = NULL
[0x4020b3] memmove(0x259dfeb, 0x25a5feb, 21, 0x25a5feb, 0x7f498147f260) = 0x259dfeb
[0x402213] read(3, "n, cflags)\n    regex_t *preg;\n  "..., 32768) = 32768
[0x40bc2b] memchr("regcomp (preg, pattern, cflags)\n"..., 'I', 32728) = 0x0259e0a4
[0x40cdf3] memchr("IX_EXTENDED : RE_SYNTAX_POSIX_BA"..., '\n', 32543) = 0x0259e0c8
[0x4022d1] memchr("regcomp (preg, pattern, cflags)\n"..., '\n', 166) = 0x0259e00a
[0x4022d1] memchr("    regex_t *preg;\n    const cha"..., '\n', 134) = 0x0259e01d
[0x4022d1] memchr("    const char *pattern; \n    in"..., '\n', 115) = 0x0259e037
[0x4022d1] memchr("    int cflags;\n{\n  reg_errcode_"..., '\n', 89) = 0x0259e047
[0x4022d1] memchr("{\n  reg_errcode_t ret;\n  unsigne"..., '\n', 73) = 0x0259e049
[0x4022d1] memchr("  reg_errcode_t ret;\n  unsigned "..., '\n', 71) = 0x0259e05e
[0x4022d1] memchr("  unsigned syntax\n    = (cflags "..., '\n', 50) = 0x0259e070
[0x4022d1] memchr("    = (cflags & REG_EXTENDED) ?\n"..., '\n', 32) = 0x0259e090
[0x4022d1] memchr("      RE_SYNTAX_POSIX_EXTENDED :"..., '\n', 0) = NULL
[0x4023cc] fwrite("6392:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      RE_SYNTAX_POSIX_EXTENDED :"..., 1, 56, 0x7f498147f260) = 56
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n  /* regex_compile will allocat"..., 'I', 32506) = 0x0259e1a8
[0x40cdf3] memchr("INE case: if we used a fastmap, "..., '\n', 32283) = 0x0259e1e0
[0x4022d1] memchr("\n  /* regex_compile will allocat"..., '\n', 210) = 0x0259e0c9
[0x4022d1] memchr("  /* regex_compile will allocate"..., '\n', 209) = 0x0259e112
[0x4022d1] memchr("  preg->buffer = 0;\n  preg->allo"..., '\n', 136) = 0x0259e126
[0x4022d1] memchr("  preg->allocated = 0;\n  preg->u"..., '\n', 116) = 0x0259e13d
[0x4022d1] memchr("  preg->used = 0;\n  \n  /* Don't "..., '\n', 93) = 0x0259e14f
[0x4022d1] memchr("  \n  /* Don't bother to use a fa"..., '\n', 75) = 0x0259e152
[0x4022d1] memchr("  /* Don't bother to use a fastm"..., '\n', 72) = 0x0259e19a
[0x4022d1] memchr("     REG_NEWLINE case: if we use"..., '\n', 0) = NULL
[0x4023cc] fwrite("6400:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     REG_NEWLINE case: if we use"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     characters after newlines i"..., 'I', 32226) = 0x0259e26e
[0x40cdf3] memchr("ICASE)\n    {\n      unsigned i;\n "..., '\n', 32085) = 0x0259e274
[0x4022d1] memchr("     characters after newlines i"..., '\n', 122) = 0x0259e228
[0x4022d1] memchr("     every character.  */\n  preg"..., '\n', 50) = 0x0259e242
[0x4022d1] memchr("  preg->fastmap = 0;\n  \n  if (cf"..., '\n', 24) = 0x0259e257
[0x4022d1] memchr("  \n  if (cflags & REG_ICASE)\n   "..., '\n', 3) = 0x0259e25a
[0x4022d1] memchr("  if (cflags & REG_ICASE)\n    {\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6405:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (cflags & REG_ICASE)\n    {\n"..., 1, 26, 0x7f498147f260) = 26
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      unsigned i;\n      \n "..., 'I', 32078) = 0x0259e2c7
[0x40cdf3] memchr("IZE);\n      if (preg->translate "..., '\n', 31996) = 0x0259e2cc
[0x4022d1] memchr("    {\n      unsigned i;\n      \n "..., '\n', 31) = 0x0259e27a
[0x4022d1] memchr("      unsigned i;\n      \n      p"..., '\n', 25) = 0x0259e28c
[0x4022d1] memchr("      \n      preg->translate = ("..., '\n', 7) = 0x0259e293
[0x4022d1] memchr("      preg->translate = (char *)"..., '\n', 0) = NULL
[0x4023cc] fwrite("6409:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      preg->translate = (char *)"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (preg->translate == NUL"..., 'I', 31990) = 0x0259e379
[0x40cdf3] memchr("IZE; i++)\n        preg->translat"..., '\n', 31818) = 0x0259e382
[0x4022d1] memchr("      if (preg->translate == NUL"..., '\n', 140) = 0x0259e2ef
[0x4022d1] memchr("        return (int) REG_ESPACE;"..., '\n', 105) = 0x0259e310
[0x4022d1] memchr("\n      /* Map uppercase characte"..., '\n', 72) = 0x0259e311
[0x4022d1] memchr("      /* Map uppercase character"..., '\n', 71) = 0x0259e358
[0x4022d1] memchr("      for (i = 0; i < CHAR_SET_S"..., '\n', 0) = NULL
[0x4023cc] fwrite("6414:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      for (i = 0; i < CHAR_SET_S"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("        preg->translate[i] = ISU"..., 'I', 31808) = 0x0259e3a0
[0x40cdf3] memchr("ISUPPER (i) ? tolower (i) : i;\n "..., '\n', 31779) = 0x0259e3be
[0x4022d1] memchr("        preg->translate[i] = ISU"..., '\n', 0) = NULL
[0x4023cc] fwrite("6415:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("        preg->translate[i] = ISU"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n  else\n    preg->translate"..., 'I', 31748) = 0x0259e3ee
[0x40cdf3] memchr("If REG_NEWLINE is set, newlines "..., '\n', 31701) = 0x0259e42a
[0x4022d1] memchr("    }\n  else\n    preg->translate"..., '\n', 42) = 0x0259e3c4
[0x4022d1] memchr("  else\n    preg->translate = NUL"..., '\n', 36) = 0x0259e3cb
[0x4022d1] memchr("    preg->translate = NULL;\n\n  /"..., '\n', 29) = 0x0259e3e7
[0x4022d1] memchr("\n  /* If REG_NEWLINE is set, new"..., '\n', 1) = 0x0259e3e8
[0x4022d1] memchr("  /* If REG_NEWLINE is set, newl"..., '\n', 0) = NULL
[0x4023cc] fwrite("6420:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If REG_NEWLINE is set, newl"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (cflags & REG_NEWLINE)\n    "..., 'I', 31640) = 0x0259e442
[0x40cdf3] memchr("INE)\n    { /* REG_NEWLINE implie"..., '\n', 31617) = 0x0259e446
[0x4022d1] memchr("  if (cflags & REG_NEWLINE)\n    "..., '\n', 0) = NULL
[0x4023cc] fwrite("6421:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (cflags & REG_NEWLINE)\n    "..., 1, 28, 0x7f498147f260) = 28
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    { /* REG_NEWLINE implies nei"..., 'I', 31612) = 0x0259e458
[0x40cdf3] memchr("INE implies neither . nor [^...]"..., '\n', 31595) = 0x0259e48b
[0x4022d1] memchr("    { /* REG_NEWLINE implies nei"..., '\n', 0) = NULL
[0x4023cc] fwrite("6422:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    { /* REG_NEWLINE implies nei"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      syntax &= ~RE_DOT_NEWLINE;"..., 'I', 31543) = 0x0259e4a8
[0x40cdf3] memchr("INE;\n      syntax |= RE_HAT_LIST"..., '\n', 31515) = 0x0259e4ac
[0x4022d1] memchr("      syntax &= ~RE_DOT_NEWLINE;"..., '\n', 0) = NULL
[0x4023cc] fwrite("6423:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      syntax &= ~RE_DOT_NEWLINE;"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      syntax |= RE_HAT_LISTS_NOT"..., 'I', 31510) = 0x0259e4c5
[0x40cdf3] memchr("ISTS_NOT_NEWLINE;\n      /* It al"..., '\n', 31486) = 0x0259e4d6
[0x4022d1] memchr("      syntax |= RE_HAT_LISTS_NOT"..., '\n', 0) = NULL
[0x4023cc] fwrite("6424:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      syntax |= RE_HAT_LISTS_NOT"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      /* It also changes the mat"..., 'I', 31468) = 0x0259e4e0
[0x40cdf3] memchr("It also changes the matching beh"..., '\n', 31459) = 0x0259e50a
[0x4022d1] memchr("      /* It also changes the mat"..., '\n', 0) = NULL
[0x4023cc] fwrite("6425:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* It also changes the mat"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      preg->newline_anchor = 1;\n"..., 'I', 31416) = 0x0259e589
[0x40cdf3] memchr("IX says a null character in the "..., '\n', 31290) = 0x0259e5c6
[0x4022d1] memchr("      preg->newline_anchor = 1;\n"..., '\n', 118) = 0x0259e52a
[0x4022d1] memchr("    }\n  else\n    preg->newline_a"..., '\n', 86) = 0x0259e530
[0x4022d1] memchr("  else\n    preg->newline_anchor "..., '\n', 80) = 0x0259e537
[0x4022d1] memchr("    preg->newline_anchor = 0;\n\n "..., '\n', 73) = 0x0259e555
[0x4022d1] memchr("\n  preg->no_sub = !!(cflags & RE"..., '\n', 43) = 0x0259e556
[0x4022d1] memchr("  preg->no_sub = !!(cflags & REG"..., '\n', 42) = 0x0259e57f
[0x4022d1] memchr("\n  /* POSIX says a null characte"..., '\n', 1) = 0x0259e580
[0x4022d1] memchr("  /* POSIX says a null character"..., '\n', 0) = NULL
[0x4023cc] fwrite("6433:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* POSIX says a null character"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     can use strlen here in comp"..., 'I', 31228) = 0x0259e64a
[0x40cdf3] memchr("IX doesn't distinguish between a"..., '\n', 31097) = 0x0259e687
[0x4022d1] memchr("     can use strlen here in comp"..., '\n', 123) = 0x0259e5fd
[0x4022d1] memchr("  ret = regex_compile (pattern, "..., '\n', 68) = 0x0259e63e
[0x4022d1] memchr("  \n  /* POSIX doesn't distinguis"..., '\n', 3) = 0x0259e641
[0x4022d1] memchr("  /* POSIX doesn't distinguish b"..., '\n', 0) = NULL
[0x4023cc] fwrite("6437:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* POSIX doesn't distinguish b"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     unmatched close-group: both"..., 'I', 31035) = 0x0259e754
[0x40cdf3] memchr("ING.\n   \n   If NMATCH is zero or"..., '\n', 30831) = 0x0259e758
[0x4022d1] memchr("     unmatched close-group: both"..., '\n', 191) = 0x0259e6bc
[0x4022d1] memchr("  if (ret == REG_ERPAREN) ret = "..., '\n', 138) = 0x0259e6e8
[0x4022d1] memchr("  \n  return (int) ret;\n}\n\n\n/* re"..., '\n', 94) = 0x0259e6eb
[0x4022d1] memchr("  return (int) ret;\n}\n\n\n/* regex"..., '\n', 91) = 0x0259e6ff
[0x4022d1] memchr("}\n\n\n/* regexec searches for a gi"..., '\n', 71) = 0x0259e701
[0x4022d1] memchr("\n\n/* regexec searches for a give"..., '\n', 69) = 0x0259e702
[0x4022d1] memchr("\n/* regexec searches for a given"..., '\n', 68) = 0x0259e703
[0x4022d1] memchr("/* regexec searches for a given "..., '\n', 67) = 0x0259e746
[0x4022d1] memchr("   string STRING.\n   \n   If NMAT"..., '\n', 0) = NULL
[0x4023cc] fwrite("6446:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   string STRING.\n   \n   If NMAT"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   \n   If NMATCH is zero or REG_"..., 'I', 30826) = 0x0259e760
[0x40cdf3] memchr("If NMATCH is zero or REG_NOSUB w"..., '\n', 30819) = 0x0259e7a0
[0x4022d1] memchr("   \n   If NMATCH is zero or REG_"..., '\n', 4) = 0x0259e75c
[0x4022d1] memchr("   If NMATCH is zero or REG_NOSU"..., '\n', 0) = NULL
[0x4023cc] fwrite("6448:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If NMATCH is zero or REG_NOSU"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   `regcomp', we ignore PMATCH. "..., 'I', 30754) = 0x0259ebda
[0x40cdf3] memchr("IXED;\n  \n  if (want_reg_info)\n  "..., '\n', 29673) = 0x0259ebdf
[0x4022d1] memchr("   `regcomp', we ignore PMATCH. "..., '\n', 1043) = 0x0259e7e4
[0x4022d1] memchr("   least NMATCH elements, and we"..., '\n', 975) = 0x0259e824
[0x4022d1] memchr("   corresponding matched substri"..., '\n', 911) = 0x0259e849
[0x4022d1] memchr("   \n   EFLAGS specifies `executi"..., '\n', 874) = 0x0259e84d
[0x4022d1] memchr("   EFLAGS specifies `execution f"..., '\n', 870) = 0x0259e88d
[0x4022d1] memchr("   REG_NOTBOL is set, then ^ doe"..., '\n', 806) = 0x0259e8d1
[0x4022d1] memchr("   string; if REG_NOTEOL is set,"..., '\n', 738) = 0x0259e914
[0x4022d1] memchr("   \n   We return 0 if we find a "..., '\n', 671) = 0x0259e918
[0x4022d1] memchr("   We return 0 if we find a matc"..., '\n', 667) = 0x0259e956
[0x4022d1] memchr("\nint\nregexec (preg, string, nmat"..., '\n', 605) = 0x0259e957
[0x4022d1] memchr("int\nregexec (preg, string, nmatc"..., '\n', 604) = 0x0259e95b
[0x4022d1] memchr("regexec (preg, string, nmatch, p"..., '\n', 600) = 0x0259e98a
[0x4022d1] memchr("    const regex_t *preg;\n    con"..., '\n', 553) = 0x0259e9a3
[0x4022d1] memchr("    const char *string; \n    siz"..., '\n', 528) = 0x0259e9bc
[0x4022d1] memchr("    size_t nmatch; \n    regmatch"..., '\n', 503) = 0x0259e9d0
[0x4022d1] memchr("    regmatch_t pmatch[]; \n    in"..., '\n', 483) = 0x0259e9ea
[0x4022d1] memchr("    int eflags;\n{\n  int ret;\n  s"..., '\n', 457) = 0x0259e9fa
[0x4022d1] memchr("{\n  int ret;\n  struct re_registe"..., '\n', 441) = 0x0259e9fc
[0x4022d1] memchr("  int ret;\n  struct re_registers"..., '\n', 439) = 0x0259ea07
[0x4022d1] memchr("  struct re_registers regs;\n  re"..., '\n', 428) = 0x0259ea23
[0x4022d1] memchr("  regex_t private_preg;\n  int le"..., '\n', 400) = 0x0259ea3b
[0x4022d1] memchr("  int len = strlen (string);\n  b"..., '\n', 376) = 0x0259ea58
[0x4022d1] memchr("  boolean want_reg_info = !preg-"..., '\n', 347) = 0x0259ea8f
[0x4022d1] memchr("\n  private_preg = *preg;\n  \n  pr"..., '\n', 292) = 0x0259ea90
[0x4022d1] memchr("  private_preg = *preg;\n  \n  pri"..., '\n', 291) = 0x0259eaa8
[0x4022d1] memchr("  \n  private_preg.not_bol = !!(e"..., '\n', 267) = 0x0259eaab
[0x4022d1] memchr("  private_preg.not_bol = !!(efla"..., '\n', 264) = 0x0259eadd
[0x4022d1] memchr("  private_preg.not_eol = !!(efla"..., '\n', 214) = 0x0259eb0f
[0x4022d1] memchr("  \n  /* The user has told us exa"..., '\n', 164) = 0x0259eb12
[0x4022d1] memchr("  /* The user has told us exactl"..., '\n', 161) = 0x0259eb51
[0x4022d1] memchr("     information about, via `nma"..., '\n', 98) = 0x0259eb97
[0x4022d1] memchr("     matching routines.  */\n  pr"..., '\n', 28) = 0x0259ebb3
[0x4022d1] memchr("  private_preg.regs_allocated = "..., '\n', 0) = NULL
[0x4023cc] fwrite("6481:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  private_preg.regs_allocated = "..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  \n  if (want_reg_info)\n    {\n  "..., 'I', 29667) = 0x0259edd6
[0x40cdf3] memchr("IX structure.  */\n  if (want_reg"..., '\n', 29165) = 0x0259ede7
[0x4022d1] memchr("  \n  if (want_reg_info)\n    {\n  "..., '\n', 457) = 0x0259ebe2
[0x4022d1] memchr("  if (want_reg_info)\n    {\n     "..., '\n', 454) = 0x0259ebf7
[0x4022d1] memchr("    {\n      regs.num_regs = nmat"..., '\n', 433) = 0x0259ebfd
[0x4022d1] memchr("      regs.num_regs = nmatch;\n  "..., '\n', 427) = 0x0259ec1b
[0x4022d1] memchr("      regs.start = TALLOC (nmatc"..., '\n', 397) = 0x0259ec49
[0x4022d1] memchr("      regs.end = TALLOC (nmatch,"..., '\n', 351) = 0x0259ec75
[0x4022d1] memchr("      if (regs.start == NULL || "..., '\n', 307) = 0x0259eca7
[0x4022d1] memchr("        return (int) REG_NOMATCH"..., '\n', 257) = 0x0259ecc9
[0x4022d1] memchr("    }\n\n  /* Perform the searchin"..., '\n', 223) = 0x0259eccf
[0x4022d1] memchr("\n  /* Perform the searching oper"..., '\n', 217) = 0x0259ecd0
[0x4022d1] memchr("  /* Perform the searching opera"..., '\n', 216) = 0x0259ecfa
[0x4022d1] memchr("  ret = re_search (&private_preg"..., '\n', 174) = 0x0259ed29
[0x4022d1] memchr("                   /* start: */ "..., '\n', 127) = 0x0259ed5e
[0x4022d1] memchr("                   want_reg_info"..., '\n', 74) = 0x0259eda5
[0x4022d1] memchr("  \n  /* Copy the register inform"..., '\n', 3) = 0x0259eda8
[0x4022d1] memchr("  /* Copy the register informati"..., '\n', 0) = NULL
[0x4023cc] fwrite("6497:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Copy the register informati"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (want_reg_info)\n    {\n     "..., 'I', 29147) = 0x0259eeeb
[0x40cdf3] memchr("If we needed the temporary regis"..., '\n', 28888) = 0x0259ef2c
[0x4022d1] memchr("  if (want_reg_info)\n    {\n     "..., '\n', 250) = 0x0259edfc
[0x4022d1] memchr("    {\n      if (ret >= 0)\n      "..., '\n', 229) = 0x0259ee02
[0x4022d1] memchr("      if (ret >= 0)\n        {\n  "..., '\n', 223) = 0x0259ee16
[0x4022d1] memchr("        {\n          unsigned r;\n"..., '\n', 203) = 0x0259ee20
[0x4022d1] memchr("          unsigned r;\n\n         "..., '\n', 193) = 0x0259ee36
[0x4022d1] memchr("\n          for (r = 0; r < nmatc"..., '\n', 171) = 0x0259ee37
[0x4022d1] memchr("          for (r = 0; r < nmatch"..., '\n', 170) = 0x0259ee5e
[0x4022d1] memchr("            {\n              pmat"..., '\n', 131) = 0x0259ee6c
[0x4022d1] memchr("              pmatch[r].rm_so = "..., '\n', 117) = 0x0259ee9b
[0x4022d1] memchr("              pmatch[r].rm_eo = "..., '\n', 70) = 0x0259eec8
[0x4022d1] memchr("            }\n        }\n\n      /"..., '\n', 25) = 0x0259eed6
[0x4022d1] memchr("        }\n\n      /* If we needed"..., '\n', 11) = 0x0259eee0
[0x4022d1] memchr("\n      /* If we needed the tempo"..., '\n', 1) = 0x0259eee1
[0x4022d1] memchr("      /* If we needed the tempor"..., '\n', 0) = NULL
[0x4023cc] fwrite("6511:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If we needed the tempor"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      free (regs.start);\n      f"..., 'I', 28822) = 0x0259f1de
[0x40cdf3] memchr("If we are given anything else, o"..., '\n', 28133) = 0x0259f20e
[0x4022d1] memchr("      free (regs.start);\n      f"..., '\n', 664) = 0x0259ef45
[0x4022d1] memchr("      free (regs.end);\n    }\n\n  "..., '\n', 639) = 0x0259ef5c
[0x4022d1] memchr("    }\n\n  /* We want zero return "..., '\n', 616) = 0x0259ef62
[0x4022d1] memchr("\n  /* We want zero return to mea"..., '\n', 610) = 0x0259ef63
[0x4022d1] memchr("  /* We want zero return to mean"..., '\n', 609) = 0x0259efa5
[0x4022d1] memchr("  return ret >= 0 ? (int) REG_NO"..., '\n', 543) = 0x0259efe0
[0x4022d1] memchr("}\n\n\n/* Returns a message corresp"..., '\n', 484) = 0x0259efe2
[0x4022d1] memchr("\n\n/* Returns a message correspon"..., '\n', 482) = 0x0259efe3
[0x4022d1] memchr("\n/* Returns a message correspond"..., '\n', 481) = 0x0259efe4
[0x4022d1] memchr("/* Returns a message correspondi"..., '\n', 480) = 0x0259f02b
[0x4022d1] memchr("   from either regcomp or regexe"..., '\n', 409) = 0x0259f06c
[0x4022d1] memchr("\nsize_t\nregerror (errcode, preg,"..., '\n', 344) = 0x0259f06d
[0x4022d1] memchr("size_t\nregerror (errcode, preg, "..., '\n', 343) = 0x0259f074
[0x4022d1] memchr("regerror (errcode, preg, errbuf,"..., '\n', 336) = 0x0259f0a2
[0x4022d1] memchr("    int errcode;\n    const regex"..., '\n', 290) = 0x0259f0b3
[0x4022d1] memchr("    const regex_t *preg;\n    cha"..., '\n', 273) = 0x0259f0cc
[0x4022d1] memchr("    char *errbuf;\n    size_t err"..., '\n', 248) = 0x0259f0de
[0x4022d1] memchr("    size_t errbuf_size;\n{\n  cons"..., '\n', 230) = 0x0259f0f6
[0x4022d1] memchr("{\n  const char *msg;\n  size_t ms"..., '\n', 206) = 0x0259f0f8
[0x4022d1] memchr("  const char *msg;\n  size_t msg_"..., '\n', 204) = 0x0259f10b
[0x4022d1] memchr("  size_t msg_size;\n\n  if (errcod"..., '\n', 185) = 0x0259f11e
[0x4022d1] memchr("\n  if (errcode < 0\n      || errc"..., '\n', 166) = 0x0259f11f
[0x4022d1] memchr("  if (errcode < 0\n      || errco"..., '\n', 165) = 0x0259f131
[0x4022d1] memchr("      || errcode >= (sizeof (re_"..., '\n', 147) = 0x0259f179
[0x4022d1] memchr("    /* Only error codes returned"..., '\n', 75) = 0x0259f1c4
[0x4022d1] memchr("       to this routine.  If we a"..., '\n', 0) = NULL
[0x4023cc] fwrite("6537:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("       to this routine.  If we a"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("       code generates an invalid"..., 'I', 28084) = 0x0259f2b6
[0x40cdf3] memchr("IX doesn't require that we do an"..., '\n', 27917) = 0x0259f2f2
[0x4022d1] memchr("       code generates an invalid"..., '\n', 159) = 0x0259f257
[0x4022d1] memchr("       Dump core so we can fix i"..., '\n', 86) = 0x0259f27e
[0x4022d1] memchr("    abort ();\n\n  msg = re_error_"..., '\n', 47) = 0x0259f28c
[0x4022d1] memchr("\n  msg = re_error_msg[errcode];\n"..., '\n', 33) = 0x0259f28d
[0x4022d1] memchr("  msg = re_error_msg[errcode];\n\n"..., '\n', 32) = 0x0259f2ac
[0x4022d1] memchr("\n  /* POSIX doesn't require that"..., '\n', 1) = 0x0259f2ad
[0x4022d1] memchr("  /* POSIX doesn't require that "..., '\n', 0) = NULL
[0x4023cc] fwrite("6544:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* POSIX doesn't require that "..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     not be nice.  */\n  if (! ms"..., 'I', 27856) = 0x0259f34e
[0x40cdf3] memchr("Includes the null.  */\n  \n  if ("..., '\n', 27765) = 0x0259f364
[0x4022d1] memchr("     not be nice.  */\n  if (! ms"..., '\n', 57) = 0x0259f308
[0x4022d1] memchr("  if (! msg)\n    msg = "Success""..., '\n', 35) = 0x0259f315
[0x4022d1] memchr("    msg = "Success";\n\n  msg_size"..., '\n', 22) = 0x0259f32a
[0x4022d1] memchr("\n  msg_size = strlen (msg) + 1; "..., '\n', 1) = 0x0259f32b
[0x4022d1] memchr("  msg_size = strlen (msg) + 1; /"..., '\n', 0) = NULL
[0x4023cc] fwrite("6549:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  msg_size = strlen (msg) + 1; /"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  \n  if (errbuf_size != 0)\n    {"..., 'I', 27742) = 0x0259f6e5
[0x40cdf3] memchr("Inc.\n\n   This program is free so"..., '\n', 26846) = 0x0259f6e9
[0x4022d1] memchr("  \n  if (errbuf_size != 0)\n    {"..., '\n', 848) = 0x0259f367
[0x4022d1] memchr("  if (errbuf_size != 0)\n    {\n  "..., '\n', 845) = 0x0259f37f
[0x4022d1] memchr("    {\n      if (msg_size > errbu"..., '\n', 821) = 0x0259f385
[0x4022d1] memchr("      if (msg_size > errbuf_size"..., '\n', 815) = 0x0259f3a7
[0x4022d1] memchr("        {\n          strncpy (err"..., '\n', 781) = 0x0259f3b1
[0x4022d1] memchr("          strncpy (errbuf, msg, "..., '\n', 771) = 0x0259f3e3
[0x4022d1] memchr("          errbuf[errbuf_size - 1"..., '\n', 721) = 0x0259f40a
[0x4022d1] memchr("        }\n      else\n        str"..., '\n', 682) = 0x0259f414
[0x4022d1] memchr("      else\n        strcpy (errbu"..., '\n', 672) = 0x0259f41f
[0x4022d1] memchr("        strcpy (errbuf, msg);\n  "..., '\n', 661) = 0x0259f43d
[0x4022d1] memchr("    }\n\n  return msg_size;\n}\n\n\n/*"..., '\n', 631) = 0x0259f443
[0x4022d1] memchr("\n  return msg_size;\n}\n\n\n/* Free "..., '\n', 625) = 0x0259f444
[0x4022d1] memchr("  return msg_size;\n}\n\n\n/* Free d"..., '\n', 624) = 0x0259f457
[0x4022d1] memchr("}\n\n\n/* Free dynamically allocate"..., '\n', 605) = 0x0259f459
[0x4022d1] memchr("\n\n/* Free dynamically allocated "..., '\n', 603) = 0x0259f45a
[0x4022d1] memchr("\n/* Free dynamically allocated s"..., '\n', 602) = 0x0259f45b
[0x4022d1] memchr("/* Free dynamically allocated sp"..., '\n', 601) = 0x0259f491
[0x4022d1] memchr("\nvoid\nregfree (preg)\n    regex_t"..., '\n', 547) = 0x0259f492
[0x4022d1] memchr("void\nregfree (preg)\n    regex_t "..., '\n', 546) = 0x0259f497
[0x4022d1] memchr("regfree (preg)\n    regex_t *preg"..., '\n', 541) = 0x0259f4a6
[0x4022d1] memchr("    regex_t *preg;\n{\n  if (preg-"..., '\n', 526) = 0x0259f4b9
[0x4022d1] memchr("{\n  if (preg->buffer != NULL)\n  "..., '\n', 507) = 0x0259f4bb
[0x4022d1] memchr("  if (preg->buffer != NULL)\n    "..., '\n', 505) = 0x0259f4d7
[0x4022d1] memchr("    free (preg->buffer);\n  preg-"..., '\n', 477) = 0x0259f4f0
[0x4022d1] memchr("  preg->buffer = NULL;\n  \n  preg"..., '\n', 452) = 0x0259f507
[0x4022d1] memchr("  \n  preg->allocated = 0;\n  preg"..., '\n', 429) = 0x0259f50a
[0x4022d1] memchr("  preg->allocated = 0;\n  preg->u"..., '\n', 426) = 0x0259f521
[0x4022d1] memchr("  preg->used = 0;\n\n  if (preg->f"..., '\n', 403) = 0x0259f533
[0x4022d1] memchr("\n  if (preg->fastmap != NULL)\n  "..., '\n', 385) = 0x0259f534
[0x4022d1] memchr("  if (preg->fastmap != NULL)\n   "..., '\n', 384) = 0x0259f551
[0x4022d1] memchr("    free (preg->fastmap);\n  preg"..., '\n', 355) = 0x0259f56b
[0x4022d1] memchr("  preg->fastmap = NULL;\n  preg->"..., '\n', 329) = 0x0259f583
[0x4022d1] memchr("  preg->fastmap_accurate = 0;\n\n "..., '\n', 305) = 0x0259f5a1
[0x4022d1] memchr("\n  if (preg->translate != NULL)\n"..., '\n', 275) = 0x0259f5a2
[0x4022d1] memchr("  if (preg->translate != NULL)\n "..., '\n', 274) = 0x0259f5c1
[0x4022d1] memchr("    free (preg->translate);\n  pr"..., '\n', 243) = 0x0259f5dd
[0x4022d1] memchr("  preg->translate = NULL;\n}\n\n#en"..., '\n', 215) = 0x0259f5f7
[0x4022d1] memchr("}\n\n#endif /* not emacs  */\n\014\n/*\n"..., '\n', 189) = 0x0259f5f9
[0x4022d1] memchr("\n#endif /* not emacs  */\n\014\n/*\nLo"..., '\n', 187) = 0x0259f5fa
[0x4022d1] memchr("#endif /* not emacs  */\n\014\n/*\nLoc"..., '\n', 186) = 0x0259f612
[0x4022d1] memchr("\014\n/*\nLocal variables:\nmake-backu"..., '\n', 162) = 0x0259f614
[0x4022d1] memchr("/*\nLocal variables:\nmake-backup-"..., '\n', 160) = 0x0259f617
[0x4022d1] memchr("Local variables:\nmake-backup-fil"..., '\n', 157) = 0x0259f628
[0x4022d1] memchr("make-backup-files: t\nversion-con"..., '\n', 140) = 0x0259f63d
[0x4022d1] memchr("version-control: t\ntrim-versions"..., '\n', 119) = 0x0259f650
[0x4022d1] memchr("trim-versions-without-asking: ni"..., '\n', 100) = 0x0259f672
[0x4022d1] memchr("End:\n*/\n/* dfa.c - deterministic"..., '\n', 66) = 0x0259f677
[0x4022d1] memchr("*/\n/* dfa.c - deterministic exte"..., '\n', 61) = 0x0259f67a
[0x4022d1] memchr("/* dfa.c - deterministic extende"..., '\n', 58) = 0x0259f6b4
[0x4022d1] memchr("   Copyright (C) 1988 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("6599:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Copyright (C) 1988 Free Softw"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., 'I', 26841) = 0x0259f824
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 26527) = 0x0259f85d
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x0259f6ea
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x0259f732
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 233) = 0x0259f77a
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 161) = 0x0259f7c1
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 90) = 0x0259f7d7
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x0259f7d8
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x0259f81b
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("6607:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 26469) = 0x0259f86b
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 26456) = 0x0259f89e
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("6608:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 26404) = 0x0259f963
[0x40cdf3] memchr("Inc., 675 Mass Ave, Cambridge, M"..., '\n', 26208) = 0x0259f994
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x0259f8ce
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x0259f8cf
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x0259f914
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x0259f953
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("6613:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* Written June, 1988 by Mike H"..., 'I', 26158) = 0x0259fb57
[0x40cdf3] memchr("ING_H) || defined(STDC_HEADERS)\n"..., '\n', 25708) = 0x0259fb76
[0x4022d1] memchr("\n/* Written June, 1988 by Mike H"..., '\n', 430) = 0x0259f995
[0x4022d1] memchr("/* Written June, 1988 by Mike Ha"..., '\n', 429) = 0x0259f9bb
[0x4022d1] memchr("   Modified July, 1988 by Arthur"..., '\n', 391) = 0x0259fa03
[0x4022d1] memchr("\n/*#include <assert.h> */\n/*#inc"..., '\n', 319) = 0x0259fa04
[0x4022d1] memchr("/*#include <assert.h> */\n/*#incl"..., '\n', 318) = 0x0259fa1d
[0x4022d1] memchr("/*#include <ctype.h> */\n/*#inclu"..., '\n', 293) = 0x0259fa35
[0x4022d1] memchr("/*#include <stdio.h> */\n\n#ifdef "..., '\n', 269) = 0x0259fa4d
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_st"..., '\n', 245) = 0x0259fa4e
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_std"..., '\n', 244) = 0x0259fa62
[0x4022d1] memchr("#if flag_stdlib==0\n#include <std"..., '\n', 224) = 0x0259fa75
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 205) = 0x0259fa89
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 185) = 0x0259fa9f
[0x4022d1] memchr("#endif\n#else\n#if flag_systypes=="..., '\n', 163) = 0x0259faa6
[0x4022d1] memchr("#else\n#if flag_systypes==0 \n#inc"..., '\n', 156) = 0x0259faac
[0x4022d1] memchr("#if flag_systypes==0 \n#include <"..., '\n', 150) = 0x0259fac2
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 128) = 0x0259fad9
[0x4022d1] memchr("#define flag_systypes 1\n#endif\ne"..., '\n', 105) = 0x0259faf1
[0x4022d1] memchr("#endif\nextern char *calloc(), *m"..., '\n', 81) = 0x0259faf8
[0x4022d1] memchr("extern char *calloc(), *malloc()"..., '\n', 74) = 0x0259fb26
[0x4022d1] memchr("extern void free();\n#endif\n\n#if "..., '\n', 28) = 0x0259fb3a
[0x4022d1] memchr("#endif\n\n#if defined(HAVE_STRING_"..., '\n', 8) = 0x0259fb41
[0x4022d1] memchr("\n#if defined(HAVE_STRING_H) || d"..., '\n', 1) = 0x0259fb42
[0x4022d1] memchr("#if defined(HAVE_STRING_H) || de"..., '\n', 0) = NULL
[0x4023cc] fwrite("6636:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#if defined(HAVE_STRING_H) || de"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#if flag_string==0\n#include <str"..., 'I', 25676) = 0x0259fc80
[0x40cdf3] memchr("ISALPHA\n#undef ISUPPER\n#undef IS"..., '\n', 25411) = 0x0259fc87
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 258) = 0x0259fb89
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 239) = 0x0259fb9d
[0x4022d1] memchr("#define flag_string 1\n#endif\n#un"..., '\n', 219) = 0x0259fbb3
[0x4022d1] memchr("#endif\n#undef index\n#define inde"..., '\n', 197) = 0x0259fbba
[0x4022d1] memchr("#undef index\n#define index strch"..., '\n', 190) = 0x0259fbc7
[0x4022d1] memchr("#define index strchr\n#else\n#if f"..., '\n', 177) = 0x0259fbdc
[0x4022d1] memchr("#else\n#if flag_strings==0\n#inclu"..., '\n', 156) = 0x0259fbe2
[0x4022d1] memchr("#if flag_strings==0\n#include <st"..., '\n', 150) = 0x0259fbf6
[0x4022d1] memchr("#include <strings.h>\n#define fla"..., '\n', 130) = 0x0259fc0b
[0x4022d1] memchr("#define flag_strings 1\n#endif\n#e"..., '\n', 109) = 0x0259fc22
[0x4022d1] memchr("#endif\n#endif\n\n#ifndef isgraph\n#"..., '\n', 86) = 0x0259fc29
[0x4022d1] memchr("#endif\n\n#ifndef isgraph\n#define "..., '\n', 79) = 0x0259fc30
[0x4022d1] memchr("\n#ifndef isgraph\n#define isgraph"..., '\n', 72) = 0x0259fc31
[0x4022d1] memchr("#ifndef isgraph\n#define isgraph("..., '\n', 71) = 0x0259fc41
[0x4022d1] memchr("#define isgraph(C) (isprint(C) &"..., '\n', 55) = 0x0259fc70
[0x4022d1] memchr("#endif\n\n#undef ISALPHA\n#undef IS"..., '\n', 8) = 0x0259fc77
[0x4022d1] memchr("\n#undef ISALPHA\n#undef ISUPPER\n#"..., '\n', 1) = 0x0259fc78
[0x4022d1] memchr("#undef ISALPHA\n#undef ISUPPER\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6654:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISALPHA\n#undef ISUPPER\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISUPPER\n#undef ISLOWER\n#u"..., 'I', 25403) = 0x0259fc8f
[0x40cdf3] memchr("ISUPPER\n#undef ISLOWER\n#undef IS"..., '\n', 25396) = 0x0259fc96
[0x4022d1] memchr("#undef ISUPPER\n#undef ISLOWER\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6655:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISUPPER\n#undef ISLOWER\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISLOWER\n#undef ISDIGIT\n#u"..., 'I', 25388) = 0x0259fc9e
[0x40cdf3] memchr("ISLOWER\n#undef ISDIGIT\n#undef IS"..., '\n', 25381) = 0x0259fca5
[0x4022d1] memchr("#undef ISLOWER\n#undef ISDIGIT\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6656:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISLOWER\n#undef ISDIGIT\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISDIGIT\n#undef ISXDIGIT\n#"..., 'I', 25373) = 0x0259fcad
[0x40cdf3] memchr("ISDIGIT\n#undef ISXDIGIT\n#undef I"..., '\n', 25366) = 0x0259fcb4
[0x4022d1] memchr("#undef ISDIGIT\n#undef ISXDIGIT\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("6657:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISDIGIT\n#undef ISXDIGIT\n#"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISXDIGIT\n#undef ISSPACE\n#"..., 'I', 25358) = 0x0259fcbc
[0x40cdf3] memchr("ISXDIGIT\n#undef ISSPACE\n#undef I"..., '\n', 25351) = 0x0259fcc4
[0x4022d1] memchr("#undef ISXDIGIT\n#undef ISSPACE\n#"..., '\n', 0) = NULL
[0x4023cc] fwrite("6658:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISXDIGIT\n#undef ISSPACE\n#"..., 1, 16, 0x7f498147f260) = 16
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISSPACE\n#undef ISPUNCT\n#u"..., 'I', 25342) = 0x0259fccc
[0x40cdf3] memchr("ISSPACE\n#undef ISPUNCT\n#undef IS"..., '\n', 25335) = 0x0259fcd3
[0x4022d1] memchr("#undef ISSPACE\n#undef ISPUNCT\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6659:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISSPACE\n#undef ISPUNCT\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISPUNCT\n#undef ISALNUM\n#u"..., 'I', 25327) = 0x0259fcdb
[0x40cdf3] memchr("ISPUNCT\n#undef ISALNUM\n#undef IS"..., '\n', 25320) = 0x0259fce2
[0x4022d1] memchr("#undef ISPUNCT\n#undef ISALNUM\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6660:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISPUNCT\n#undef ISALNUM\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISALNUM\n#undef ISPRINT\n#u"..., 'I', 25312) = 0x0259fcea
[0x40cdf3] memchr("ISALNUM\n#undef ISPRINT\n#undef IS"..., '\n', 25305) = 0x0259fcf1
[0x4022d1] memchr("#undef ISALNUM\n#undef ISPRINT\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6661:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISALNUM\n#undef ISPRINT\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISPRINT\n#undef ISGRAPH\n#u"..., 'I', 25297) = 0x0259fcf9
[0x40cdf3] memchr("ISPRINT\n#undef ISGRAPH\n#undef IS"..., '\n', 25290) = 0x0259fd00
[0x4022d1] memchr("#undef ISPRINT\n#undef ISGRAPH\n#u"..., '\n', 0) = NULL
[0x4023cc] fwrite("6662:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISPRINT\n#undef ISGRAPH\n#u"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISGRAPH\n#undef ISCNTRL\n\n\n"..., 'I', 25282) = 0x0259fd08
[0x40cdf3] memchr("ISGRAPH\n#undef ISCNTRL\n\n\n#ifdef "..., '\n', 25275) = 0x0259fd0f
[0x4022d1] memchr("#undef ISGRAPH\n#undef ISCNTRL\n\n\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6663:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISGRAPH\n#undef ISCNTRL\n\n\n"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef ISCNTRL\n\n\n#ifdef isascii\n"..., 'I', 25267) = 0x0259fd17
[0x40cdf3] memchr("ISCNTRL\n\n\n#ifdef isascii\n#define"..., '\n', 25260) = 0x0259fd1e
[0x4022d1] memchr("#undef ISCNTRL\n\n\n#ifdef isascii\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6664:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#undef ISCNTRL\n\n\n#ifdef isascii\n"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n#ifdef isascii\n#define ISALPHA"..., 'I', 25252) = 0x0259fd38
[0x40cdf3] memchr("ISALPHA(C) (isascii(C) && isalph"..., '\n', 25227) = 0x0259fd5d
[0x4022d1] memchr("\n\n#ifdef isascii\n#define ISALPHA"..., '\n', 17) = 0x0259fd1f
[0x4022d1] memchr("\n#ifdef isascii\n#define ISALPHA("..., '\n', 16) = 0x0259fd20
[0x4022d1] memchr("#ifdef isascii\n#define ISALPHA(C"..., '\n', 15) = 0x0259fd2f
[0x4022d1] memchr("#define ISALPHA(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6668:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALPHA(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISUPPER(C) (isascii(C) &"..., 'I', 25189) = 0x0259fd66
[0x40cdf3] memchr("ISUPPER(C) (isascii(C) && isuppe"..., '\n', 25181) = 0x0259fd8b
[0x4022d1] memchr("#define ISUPPER(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6669:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISUPPER(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISLOWER(C) (isascii(C) &"..., 'I', 25143) = 0x0259fd94
[0x40cdf3] memchr("ISLOWER(C) (isascii(C) && islowe"..., '\n', 25135) = 0x0259fdb9
[0x4022d1] memchr("#define ISLOWER(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6670:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISLOWER(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISDIGIT(C) (isascii(C) &"..., 'I', 25097) = 0x0259fdc2
[0x40cdf3] memchr("ISDIGIT(C) (isascii(C) && isdigi"..., '\n', 25089) = 0x0259fde7
[0x4022d1] memchr("#define ISDIGIT(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6671:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISDIGIT(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISXDIGIT(C) (isascii(C) "..., 'I', 25051) = 0x0259fdf0
[0x40cdf3] memchr("ISXDIGIT(C) (isascii(C) && isxdi"..., '\n', 25043) = 0x0259fe17
[0x4022d1] memchr("#define ISXDIGIT(C) (isascii(C) "..., '\n', 0) = NULL
[0x4023cc] fwrite("6672:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISXDIGIT(C) (isascii(C) "..., 1, 48, 0x7f498147f260) = 48
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISSPACE(C) (isascii(C) &"..., 'I', 25003) = 0x0259fe20
[0x40cdf3] memchr("ISSPACE(C) (isascii(C) && isspac"..., '\n', 24995) = 0x0259fe45
[0x4022d1] memchr("#define ISSPACE(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6673:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISSPACE(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISPUNCT(C) (isascii(C) &"..., 'I', 24957) = 0x0259fe4e
[0x40cdf3] memchr("ISPUNCT(C) (isascii(C) && ispunc"..., '\n', 24949) = 0x0259fe73
[0x4022d1] memchr("#define ISPUNCT(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6674:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPUNCT(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISALNUM(C) (isascii(C) &"..., 'I', 24911) = 0x0259fe7c
[0x40cdf3] memchr("ISALNUM(C) (isascii(C) && isalnu"..., '\n', 24903) = 0x0259fea1
[0x4022d1] memchr("#define ISALNUM(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6675:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALNUM(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISPRINT(C) (isascii(C) &"..., 'I', 24865) = 0x0259feaa
[0x40cdf3] memchr("ISPRINT(C) (isascii(C) && isprin"..., '\n', 24857) = 0x0259fecf
[0x4022d1] memchr("#define ISPRINT(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6676:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPRINT(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISGRAPH(C) (isascii(C) &"..., 'I', 24819) = 0x0259fed8
[0x40cdf3] memchr("ISGRAPH(C) (isascii(C) && isgrap"..., '\n', 24811) = 0x0259fefd
[0x4022d1] memchr("#define ISGRAPH(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6677:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISGRAPH(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISCNTRL(C) (isascii(C) &"..., 'I', 24773) = 0x0259ff06
[0x40cdf3] memchr("ISCNTRL(C) (isascii(C) && iscntr"..., '\n', 24765) = 0x0259ff2b
[0x4022d1] memchr("#define ISCNTRL(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("6678:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISCNTRL(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define ISALPHA(C) isalpha"..., 'I', 24727) = 0x0259ff3a
[0x40cdf3] memchr("ISALPHA(C) isalpha(C)\n#define IS"..., '\n', 24713) = 0x0259ff4f
[0x4022d1] memchr("#else\n#define ISALPHA(C) isalpha"..., '\n', 6) = 0x0259ff31
[0x4022d1] memchr("#define ISALPHA(C) isalpha(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6680:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALPHA(C) isalpha(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISUPPER(C) isupper(C)\n#d"..., 'I', 24691) = 0x0259ff58
[0x40cdf3] memchr("ISUPPER(C) isupper(C)\n#define IS"..., '\n', 24683) = 0x0259ff6d
[0x4022d1] memchr("#define ISUPPER(C) isupper(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6681:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISUPPER(C) isupper(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISLOWER(C) islower(C)\n#d"..., 'I', 24661) = 0x0259ff76
[0x40cdf3] memchr("ISLOWER(C) islower(C)\n#define IS"..., '\n', 24653) = 0x0259ff8b
[0x4022d1] memchr("#define ISLOWER(C) islower(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6682:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISLOWER(C) islower(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISDIGIT(C) isdigit(C)\n#d"..., 'I', 24631) = 0x0259ff94
[0x40cdf3] memchr("ISDIGIT(C) isdigit(C)\n#define IS"..., '\n', 24623) = 0x0259ffa9
[0x4022d1] memchr("#define ISDIGIT(C) isdigit(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6683:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISDIGIT(C) isdigit(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISXDIGIT(C) isxdigit(C)\n"..., 'I', 24601) = 0x0259ffb2
[0x40cdf3] memchr("ISXDIGIT(C) isxdigit(C)\n#define "..., '\n', 24593) = 0x0259ffc9
[0x4022d1] memchr("#define ISXDIGIT(C) isxdigit(C)\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("6684:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISXDIGIT(C) isxdigit(C)\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISSPACE(C) isspace(C)\n#d"..., 'I', 24569) = 0x0259ffd2
[0x40cdf3] memchr("ISSPACE(C) isspace(C)\n#define IS"..., '\n', 24561) = 0x0259ffe7
[0x4022d1] memchr("#define ISSPACE(C) isspace(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6685:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISSPACE(C) isspace(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISPUNCT(C) ispunct(C)\n#d"..., 'I', 24539) = 0x0259fff0
[0x40cdf3] memchr("ISPUNCT(C) ispunct(C)\n#define IS"..., '\n', 24531) = 0x025a0005
[0x4022d1] memchr("#define ISPUNCT(C) ispunct(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6686:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPUNCT(C) ispunct(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISALNUM(C) isalnum(C)\n#d"..., 'I', 24509) = 0x025a000e
[0x40cdf3] memchr("ISALNUM(C) isalnum(C)\n#define IS"..., '\n', 24501) = 0x025a0023
[0x4022d1] memchr("#define ISALNUM(C) isalnum(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6687:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISALNUM(C) isalnum(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISPRINT(C) isprint(C)\n#d"..., 'I', 24479) = 0x025a002c
[0x40cdf3] memchr("ISPRINT(C) isprint(C)\n#define IS"..., '\n', 24471) = 0x025a0041
[0x4022d1] memchr("#define ISPRINT(C) isprint(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6688:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISPRINT(C) isprint(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISGRAPH(C) isgraph(C)\n#d"..., 'I', 24449) = 0x025a004a
[0x40cdf3] memchr("ISGRAPH(C) isgraph(C)\n#define IS"..., '\n', 24441) = 0x025a005f
[0x4022d1] memchr("#define ISGRAPH(C) isgraph(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("6689:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISGRAPH(C) isgraph(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISCNTRL(C) iscntrl(C)\n#e"..., 'I', 24419) = 0x025a0068
[0x40cdf3] memchr("ISCNTRL(C) iscntrl(C)\n#endif\n\n#i"..., '\n', 24411) = 0x025a007d
[0x4022d1] memchr("#define ISCNTRL(C) iscntrl(C)\n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("6690:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define ISCNTRL(C) iscntrl(C)\n#e"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n#include "dfa.h"\n/*#incl"..., 'I', 24389) = 0x025a03f9
[0x40cdf3] memchr("IF_NECESSARY(p, t, nalloc, index"..., '\n', 23498) = 0x025a041c
[0x4022d1] memchr("#endif\n\n#include "dfa.h"\n/*#incl"..., '\n', 875) = 0x025a0084
[0x4022d1] memchr("\n#include "dfa.h"\n/*#include "re"..., '\n', 868) = 0x025a0085
[0x4022d1] memchr("#include "dfa.h"\n/*#include "reg"..., '\n', 867) = 0x025a0096
[0x4022d1] memchr("/*#include "regex.h"*/\n\n#if __ST"..., '\n', 850) = 0x025a00ad
[0x4022d1] memchr("\n#if __STDC__\ntypedef void *ptr_"..., '\n', 827) = 0x025a00ae
[0x4022d1] memchr("#if __STDC__\ntypedef void *ptr_t"..., '\n', 826) = 0x025a00bb
[0x4022d1] memchr("typedef void *ptr_t;\n#else\ntyped"..., '\n', 813) = 0x025a00d0
[0x4022d1] memchr("#else\ntypedef char *ptr_t;\n#endi"..., '\n', 792) = 0x025a00d6
[0x4022d1] memchr("typedef char *ptr_t;\n#endif\n\nsta"..., '\n', 786) = 0x025a00eb
[0x4022d1] memchr("#endif\n\nstatic void\tdfamust();\n\n"..., '\n', 765) = 0x025a00f2
[0x4022d1] memchr("\nstatic void\tdfamust();\n\nstatic "..., '\n', 758) = 0x025a00f3
[0x4022d1] memchr("static void\tdfamust();\n\nstatic p"..., '\n', 757) = 0x025a010a
[0x4022d1] memchr("\nstatic ptr_t\nxcalloc(n, s)\n    "..., '\n', 734) = 0x025a010b
[0x4022d1] memchr("static ptr_t\nxcalloc(n, s)\n     "..., '\n', 733) = 0x025a0118
[0x4022d1] memchr("xcalloc(n, s)\n     int n;\n     s"..., '\n', 720) = 0x025a0126
[0x4022d1] memchr("     int n;\n     size_t s;\n{\n  p"..., '\n', 706) = 0x025a0132
[0x4022d1] memchr("     size_t s;\n{\n  ptr_t r = cal"..., '\n', 694) = 0x025a0141
[0x4022d1] memchr("{\n  ptr_t r = calloc(n, s);\n\n  i"..., '\n', 679) = 0x025a0143
[0x4022d1] memchr("  ptr_t r = calloc(n, s);\n\n  if "..., '\n', 677) = 0x025a015d
[0x4022d1] memchr("\n  if (!r)\n    dfaerror("Memory "..., '\n', 651) = 0x025a015e
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 650) = 0x025a0168
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 640) = 0x025a018a
[0x4022d1] memchr("  return r;\n}\n\nstatic ptr_t\nxmal"..., '\n', 606) = 0x025a0196
[0x4022d1] memchr("}\n\nstatic ptr_t\nxmalloc_1(n)\n   "..., '\n', 594) = 0x025a0198
[0x4022d1] memchr("\nstatic ptr_t\nxmalloc_1(n)\n     "..., '\n', 592) = 0x025a0199
[0x4022d1] memchr("static ptr_t\nxmalloc_1(n)\n     s"..., '\n', 591) = 0x025a01a6
[0x4022d1] memchr("xmalloc_1(n)\n     size_t n;\n{\n  "..., '\n', 578) = 0x025a01b3
[0x4022d1] memchr("     size_t n;\n{\n  ptr_t r = mal"..., '\n', 565) = 0x025a01c2
[0x4022d1] memchr("{\n  ptr_t r = malloc(n);\n\n  asse"..., '\n', 550) = 0x025a01c4
[0x4022d1] memchr("  ptr_t r = malloc(n);\n\n  assert"..., '\n', 548) = 0x025a01db
[0x4022d1] memchr("\n  assert(n != 0);\n  if (!r)\n   "..., '\n', 525) = 0x025a01dc
[0x4022d1] memchr("  assert(n != 0);\n  if (!r)\n    "..., '\n', 524) = 0x025a01ee
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 506) = 0x025a01f8
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 496) = 0x025a021a
[0x4022d1] memchr("  return r;\n}\n\nstatic ptr_t\nxrea"..., '\n', 462) = 0x025a0226
[0x4022d1] memchr("}\n\nstatic ptr_t\nxrealloc_1(p, n)"..., '\n', 450) = 0x025a0228
[0x4022d1] memchr("\nstatic ptr_t\nxrealloc_1(p, n)\n "..., '\n', 448) = 0x025a0229
[0x4022d1] memchr("static ptr_t\nxrealloc_1(p, n)\n  "..., '\n', 447) = 0x025a0236
[0x4022d1] memchr("xrealloc_1(p, n)\n     ptr_t p;\n "..., '\n', 434) = 0x025a0247
[0x4022d1] memchr("     ptr_t p;\n     size_t n;\n{\n "..., '\n', 417) = 0x025a0255
[0x4022d1] memchr("     size_t n;\n{\n  ptr_t r = rea"..., '\n', 403) = 0x025a0264
[0x4022d1] memchr("{\n  ptr_t r = realloc(p, n);\n\n  "..., '\n', 388) = 0x025a0266
[0x4022d1] memchr("  ptr_t r = realloc(p, n);\n\n  as"..., '\n', 386) = 0x025a0281
[0x4022d1] memchr("\n  assert(n != 0);\n  if (!r)\n   "..., '\n', 359) = 0x025a0282
[0x4022d1] memchr("  assert(n != 0);\n  if (!r)\n    "..., '\n', 358) = 0x025a0294
[0x4022d1] memchr("  if (!r)\n    dfaerror("Memory e"..., '\n', 340) = 0x025a029e
[0x4022d1] memchr("    dfaerror("Memory exhausted")"..., '\n', 330) = 0x025a02c0
[0x4022d1] memchr("  return r;\n}\n\n#define CALLOC(p,"..., '\n', 296) = 0x025a02cc
[0x4022d1] memchr("}\n\n#define CALLOC(p, t, n) ((p) "..., '\n', 284) = 0x025a02ce
[0x4022d1] memchr("\n#define CALLOC(p, t, n) ((p) = "..., '\n', 282) = 0x025a02cf
[0x4022d1] memchr("#define CALLOC(p, t, n) ((p) = ("..., '\n', 281) = 0x025a030e
[0x4022d1] memchr("#define MALLOC(p, t, n) ((p) = ("..., '\n', 218) = 0x025a0350
[0x4022d1] memchr("#define REALLOC(p, t, n) ((p) = "..., '\n', 152) = 0x025a03a1
[0x4022d1] memchr("\n/* Reallocate an array of type "..., '\n', 71) = 0x025a03a2
[0x4022d1] memchr("/* Reallocate an array of type t"..., '\n', 70) = 0x025a03e8
[0x4022d1] memchr("#define REALLOC_IF_NECESSARY(p, "..., '\n', 0) = NULL
[0x4023cc] fwrite("6746:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define REALLOC_IF_NECESSARY(p, "..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if ((index) >= (nalloc))\t\t\t  \\"..., 'I', 23462) = 0x025a05c4
[0x40cdf3] memchr("INE: s = "BEGLINE"; break;\n\tcase"..., '\n', 23039) = 0x025a05de
[0x4022d1] memchr("  if ((index) >= (nalloc))\t\t\t  \\"..., '\n', 413) = 0x025a043d
[0x4022d1] memchr("    {\t\t\t\t\t\t  \\\n      while ((ind"..., '\n', 380) = 0x025a044c
[0x4022d1] memchr("      while ((index) >= (nalloc)"..., '\n', 365) = 0x025a0473
[0x4022d1] memchr("\t(nalloc) *= 2;\t\t\t\t  \\\n      REA"..., '\n', 326) = 0x025a048a
[0x4022d1] memchr("      REALLOC(p, t, nalloc);\t\t\t "..., '\n', 303) = 0x025a04ad
[0x4022d1] memchr("    }\n\n#ifdef DEBUG\n\nstatic void"..., '\n', 268) = 0x025a04b3
[0x4022d1] memchr("\n#ifdef DEBUG\n\nstatic void\nprtok"..., '\n', 262) = 0x025a04b4
[0x4022d1] memchr("#ifdef DEBUG\n\nstatic void\nprtok("..., '\n', 261) = 0x025a04c1
[0x4022d1] memchr("\nstatic void\nprtok(t)\n     token"..., '\n', 248) = 0x025a04c2
[0x4022d1] memchr("static void\nprtok(t)\n     token "..., '\n', 247) = 0x025a04ce
[0x4022d1] memchr("prtok(t)\n     token t;\n{\n  char "..., '\n', 235) = 0x025a04d7
[0x4022d1] memchr("     token t;\n{\n  char *s;\n\n  if"..., '\n', 226) = 0x025a04e5
[0x4022d1] memchr("{\n  char *s;\n\n  if (t < 0)\n    f"..., '\n', 212) = 0x025a04e7
[0x4022d1] memchr("  char *s;\n\n  if (t < 0)\n    fpr"..., '\n', 210) = 0x025a04f2
[0x4022d1] memchr("\n  if (t < 0)\n    fprintf(stderr"..., '\n', 199) = 0x025a04f3
[0x4022d1] memchr("  if (t < 0)\n    fprintf(stderr,"..., '\n', 198) = 0x025a0500
[0x4022d1] memchr("    fprintf(stderr, "END");\n  el"..., '\n', 185) = 0x025a051c
[0x4022d1] memchr("  else if (t < NOTCHAR)\n    fpri"..., '\n', 157) = 0x025a0534
[0x4022d1] memchr("    fprintf(stderr, "%c", t);\n  "..., '\n', 133) = 0x025a0552
[0x4022d1] memchr("  else\n    {\n      switch (t)\n\t{"..., '\n', 103) = 0x025a0559
[0x4022d1] memchr("    {\n      switch (t)\n\t{\n\tcase "..., '\n', 96) = 0x025a055f
[0x4022d1] memchr("      switch (t)\n\t{\n\tcase EMPTY:"..., '\n', 90) = 0x025a0570
[0x4022d1] memchr("\t{\n\tcase EMPTY: s = "EMPTY"; bre"..., '\n', 73) = 0x025a0573
[0x4022d1] memchr("\tcase EMPTY: s = "EMPTY"; break;"..., '\n', 70) = 0x025a0594
[0x4022d1] memchr("\tcase BACKREF: s = "BACKREF"; br"..., '\n', 37) = 0x025a05b9
[0x4022d1] memchr("\tcase BEGLINE: s = "BEGLINE"; br"..., '\n', 0) = NULL
[0x4023cc] fwrite("6772:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase BEGLINE: s = "BEGLINE"; br"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase ENDLINE: s = "ENDLINE"; br"..., 'I', 23012) = 0x025a05e9
[0x40cdf3] memchr("INE: s = "ENDLINE"; break;\n\tcase"..., '\n', 23002) = 0x025a0603
[0x4022d1] memchr("\tcase ENDLINE: s = "ENDLINE"; br"..., '\n', 0) = NULL
[0x4023cc] fwrite("6773:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase ENDLINE: s = "ENDLINE"; br"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase BEGWORD: s = "BEGWORD"; br"..., 'I', 22975) = 0x025a0655
[0x40cdf3] memchr("IMWORD: s = "LIMWORD"; break;\n\tc"..., '\n', 22894) = 0x025a0672
[0x4022d1] memchr("\tcase BEGWORD: s = "BEGWORD"; br"..., '\n', 74) = 0x025a0628
[0x4022d1] memchr("\tcase ENDWORD: s = "ENDWORD"; br"..., '\n', 37) = 0x025a064d
[0x4022d1] memchr("\tcase LIMWORD: s = "LIMWORD"; br"..., '\n', 0) = NULL
[0x4023cc] fwrite("6776:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase LIMWORD: s = "LIMWORD"; br"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase NOTLIMWORD: s = "NOTLIMWOR"..., 'I', 22864) = 0x025a067d
[0x40cdf3] memchr("IMWORD: s = "NOTLIMWORD"; break;"..., '\n', 22854) = 0x025a069d
[0x4022d1] memchr("\tcase NOTLIMWORD: s = "NOTLIMWOR"..., '\n', 0) = NULL
[0x4023cc] fwrite("6777:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase NOTLIMWORD: s = "NOTLIMWOR"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase QMARK: s = "QMARK"; break;"..., 'I', 22821) = 0x025a0867
[0x40cdf3] memchr("INTBITS] & 1 << b % INTBITS;\n}\n\n"..., '\n', 22364) = 0x025a0883
[0x4022d1] memchr("\tcase QMARK: s = "QMARK"; break;"..., '\n', 442) = 0x025a06be
[0x4022d1] memchr("\tcase STAR: s = "STAR"; break;\n\t"..., '\n', 409) = 0x025a06dd
[0x4022d1] memchr("\tcase PLUS: s = "PLUS"; break;\n\t"..., '\n', 378) = 0x025a06fc
[0x4022d1] memchr("\tcase CAT: s = "CAT"; break;\n\tca"..., '\n', 347) = 0x025a0719
[0x4022d1] memchr("\tcase OR: s = "OR"; break;\n\tcase"..., '\n', 318) = 0x025a0734
[0x4022d1] memchr("\tcase ORTOP: s = "ORTOP"; break;"..., '\n', 291) = 0x025a0755
[0x4022d1] memchr("\tcase LPAREN: s = "LPAREN"; brea"..., '\n', 258) = 0x025a0778
[0x4022d1] memchr("\tcase RPAREN: s = "RPAREN"; brea"..., '\n', 223) = 0x025a079b
[0x4022d1] memchr("\tdefault: s = "CSET"; break;\n\t}\n"..., '\n', 188) = 0x025a07b8
[0x4022d1] memchr("\t}\n      fprintf(stderr, "%s", s"..., '\n', 159) = 0x025a07bb
[0x4022d1] memchr("      fprintf(stderr, "%s", s);\n"..., '\n', 156) = 0x025a07db
[0x4022d1] memchr("    }\n}\n#endif /* DEBUG */\n\n/* S"..., '\n', 124) = 0x025a07e1
[0x4022d1] memchr("}\n#endif /* DEBUG */\n\n/* Stuff p"..., '\n', 118) = 0x025a07e3
[0x4022d1] memchr("#endif /* DEBUG */\n\n/* Stuff per"..., '\n', 116) = 0x025a07f6
[0x4022d1] memchr("\n/* Stuff pertaining to charclas"..., '\n', 97) = 0x025a07f7
[0x4022d1] memchr("/* Stuff pertaining to charclass"..., '\n', 96) = 0x025a081e
[0x4022d1] memchr("\nstatic int\ntstbit(b, c)\n     in"..., '\n', 57) = 0x025a081f
[0x4022d1] memchr("static int\ntstbit(b, c)\n     int"..., '\n', 56) = 0x025a082a
[0x4022d1] memchr("tstbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x025a0837
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x025a0843
[0x4022d1] memchr("     charclass c;\n{\n  return c[b"..., '\n', 20) = 0x025a0855
[0x4022d1] memchr("{\n  return c[b / INTBITS] & 1 <<"..., '\n', 2) = 0x025a0857
[0x4022d1] memchr("  return c[b / INTBITS] & 1 << b"..., '\n', 0) = NULL
[0x4023cc] fwrite("6800:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  return c[b / INTBITS] & 1 << b"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\nsetbit(b, c)\n    "..., 'I', 22335) = 0x025a08c8
[0x40cdf3] memchr("INTBITS] |= 1 << b % INTBITS;\n}\n"..., '\n', 22267) = 0x025a08e5
[0x4022d1] memchr("}\n\nstatic void\nsetbit(b, c)\n    "..., '\n', 60) = 0x025a0885
[0x4022d1] memchr("\nstatic void\nsetbit(b, c)\n     i"..., '\n', 58) = 0x025a0886
[0x4022d1] memchr("static void\nsetbit(b, c)\n     in"..., '\n', 57) = 0x025a0892
[0x4022d1] memchr("setbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x025a089f
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x025a08ab
[0x4022d1] memchr("     charclass c;\n{\n  c[b / INTB"..., '\n', 20) = 0x025a08bd
[0x4022d1] memchr("{\n  c[b / INTBITS] |= 1 << b % I"..., '\n', 2) = 0x025a08bf
[0x4022d1] memchr("  c[b / INTBITS] |= 1 << b % INT"..., '\n', 0) = NULL
[0x4023cc] fwrite("6808:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  c[b / INTBITS] |= 1 << b % INT"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\nclrbit(b, c)\n    "..., 'I', 22237) = 0x025a092a
[0x40cdf3] memchr("INTBITS] &= ~(1 << b % INTBITS);"..., '\n', 22169) = 0x025a094a
[0x4022d1] memchr("}\n\nstatic void\nclrbit(b, c)\n    "..., '\n', 60) = 0x025a08e7
[0x4022d1] memchr("\nstatic void\nclrbit(b, c)\n     i"..., '\n', 58) = 0x025a08e8
[0x4022d1] memchr("static void\nclrbit(b, c)\n     in"..., '\n', 57) = 0x025a08f4
[0x4022d1] memchr("clrbit(b, c)\n     int b;\n     ch"..., '\n', 45) = 0x025a0901
[0x4022d1] memchr("     int b;\n     charclass c;\n{\n"..., '\n', 32) = 0x025a090d
[0x4022d1] memchr("     charclass c;\n{\n  c[b / INTB"..., '\n', 20) = 0x025a091f
[0x4022d1] memchr("{\n  c[b / INTBITS] &= ~(1 << b %"..., '\n', 2) = 0x025a0921
[0x4022d1] memchr("  c[b / INTBITS] &= ~(1 << b % I"..., '\n', 0) = NULL
[0x4023cc] fwrite("6816:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  c[b / INTBITS] &= ~(1 << b % I"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("}\n\nstatic void\ncopyset(src, dst)"..., 'I', 22136) = 0x025a09bc
[0x40cdf3] memchr("INTS; ++i)\n    dst[i] = src[i];\n"..., '\n', 22023) = 0x025a09c6
[0x4022d1] memchr("}\n\nstatic void\ncopyset(src, dst)"..., '\n', 85) = 0x025a094c
[0x4022d1] memchr("\nstatic void\ncopyset(src, dst)\n "..., '\n', 83) = 0x025a094d
[0x4022d1] memchr("static void\ncopyset(src, dst)\n  "..., '\n', 82) = 0x025a0959
[0x4022d1] memchr("copyset(src, dst)\n     charclass"..., '\n', 70) = 0x025a096b
[0x4022d1] memchr("     charclass src;\n     charcla"..., '\n', 52) = 0x025a097f
[0x4022d1] memchr("     charclass dst;\n{\n  int i;\n\n"..., '\n', 32) = 0x025a0993
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 12) = 0x025a0995
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 10) = 0x025a099e
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 1) = 0x025a099f
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 0) = NULL
[0x4023cc] fwrite("6826:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  for (i = 0; i < CHARCLASS_INTS"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    dst[i] = src[i];\n}\n\nstatic v"..., 'I', 22012) = 0x025a0a30
[0x40cdf3] memchr("INTS; ++i)\n    s[i] = 0;\n}\n\nstat"..., '\n', 21907) = 0x025a0a3a
[0x4022d1] memchr("    dst[i] = src[i];\n}\n\nstatic v"..., '\n', 77) = 0x025a09db
[0x4022d1] memchr("}\n\nstatic void\nzeroset(s)\n     c"..., '\n', 56) = 0x025a09dd
[0x4022d1] memchr("\nstatic void\nzeroset(s)\n     cha"..., '\n', 54) = 0x025a09de
[0x4022d1] memchr("static void\nzeroset(s)\n     char"..., '\n', 53) = 0x025a09ea
[0x4022d1] memchr("zeroset(s)\n     charclass s;\n{\n "..., '\n', 41) = 0x025a09f5
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 30) = 0x025a0a07
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 12) = 0x025a0a09
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 10) = 0x025a0a12
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 1) = 0x025a0a13
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 0) = NULL
[0x4023cc] fwrite("6836:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  for (i = 0; i < CHARCLASS_INTS"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    s[i] = 0;\n}\n\nstatic void\nnot"..., 'I', 21896) = 0x025a0a9c
[0x40cdf3] memchr("INTS; ++i)\n    s[i] = ~s[i];\n}\n\n"..., '\n', 21799) = 0x025a0aa6
[0x4022d1] memchr("    s[i] = 0;\n}\n\nstatic void\nnot"..., '\n', 69) = 0x025a0a48
[0x4022d1] memchr("}\n\nstatic void\nnotset(s)\n     ch"..., '\n', 55) = 0x025a0a4a
[0x4022d1] memchr("\nstatic void\nnotset(s)\n     char"..., '\n', 53) = 0x025a0a4b
[0x4022d1] memchr("static void\nnotset(s)\n     charc"..., '\n', 52) = 0x025a0a57
[0x4022d1] memchr("notset(s)\n     charclass s;\n{\n  "..., '\n', 40) = 0x025a0a61
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 30) = 0x025a0a73
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 12) = 0x025a0a75
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 10) = 0x025a0a7e
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 1) = 0x025a0a7f
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 0) = NULL
[0x4023cc] fwrite("6846:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  for (i = 0; i < CHARCLASS_INTS"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    s[i] = ~s[i];\n}\n\nstatic int\n"..., 'I', 21788) = 0x025a0b23
[0x40cdf3] memchr("INTS; ++i)\n    if (s1[i] != s2[i"..., '\n', 21664) = 0x025a0b2d
[0x4022d1] memchr("    s[i] = ~s[i];\n}\n\nstatic int\n"..., '\n', 96) = 0x025a0ab8
[0x4022d1] memchr("}\n\nstatic int\nequal(s1, s2)\n    "..., '\n', 78) = 0x025a0aba
[0x4022d1] memchr("\nstatic int\nequal(s1, s2)\n     c"..., '\n', 76) = 0x025a0abb
[0x4022d1] memchr("static int\nequal(s1, s2)\n     ch"..., '\n', 75) = 0x025a0ac6
[0x4022d1] memchr("equal(s1, s2)\n     charclass s1;"..., '\n', 64) = 0x025a0ad4
[0x4022d1] memchr("     charclass s1;\n     charclas"..., '\n', 50) = 0x025a0ae7
[0x4022d1] memchr("     charclass s2;\n{\n  int i;\n\n "..., '\n', 31) = 0x025a0afa
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < CH"..., '\n', 12) = 0x025a0afc
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < CHAR"..., '\n', 10) = 0x025a0b05
[0x4022d1] memchr("\n  for (i = 0; i < CHARCLASS_INT"..., '\n', 1) = 0x025a0b06
[0x4022d1] memchr("  for (i = 0; i < CHARCLASS_INTS"..., '\n', 0) = NULL
[0x4023cc] fwrite("6857:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  for (i = 0; i < CHARCLASS_INTS"..., 1, 39, 0x7f498147f260) = 39
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    if (s1[i] != s2[i])\n      re"..., 'I', 21653) = 0x025a0cb5
[0x40cdf3] memchr("IF_NECESSARY(dfa->charclasses, c"..., '\n', 21262) = 0x025a0cf9
[0x4022d1] memchr("    if (s1[i] != s2[i])\n      re"..., '\n', 381) = 0x025a0b45
[0x4022d1] memchr("      return 0;\n  return 1;\n}\n\n/"..., '\n', 357) = 0x025a0b55
[0x4022d1] memchr("  return 1;\n}\n\n/* A pointer to t"..., '\n', 341) = 0x025a0b61
[0x4022d1] memchr("}\n\n/* A pointer to the current d"..., '\n', 329) = 0x025a0b63
[0x4022d1] memchr("\n/* A pointer to the current dfa"..., '\n', 327) = 0x025a0b64
[0x4022d1] memchr("/* A pointer to the current dfa "..., '\n', 326) = 0x025a0ba4
[0x4022d1] memchr("static struct dfa *dfa;\n\n/* Find"..., '\n', 262) = 0x025a0bbc
[0x4022d1] memchr("\n/* Find the index of charclass "..., '\n', 238) = 0x025a0bbd
[0x4022d1] memchr("/* Find the index of charclass s"..., '\n', 237) = 0x025a0c13
[0x4022d1] memchr("static int\ncharclass_index(s)\n  "..., '\n', 151) = 0x025a0c1e
[0x4022d1] memchr("charclass_index(s)\n     charclas"..., '\n', 140) = 0x025a0c31
[0x4022d1] memchr("     charclass s;\n{\n  int i;\n\n  "..., '\n', 121) = 0x025a0c43
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < df"..., '\n', 103) = 0x025a0c45
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < dfa-"..., '\n', 101) = 0x025a0c4e
[0x4022d1] memchr("\n  for (i = 0; i < dfa->cindex; "..., '\n', 92) = 0x025a0c4f
[0x4022d1] memchr("  for (i = 0; i < dfa->cindex; +"..., '\n', 91) = 0x025a0c73
[0x4022d1] memchr("    if (equal(s, dfa->charclasse"..., '\n', 55) = 0x025a0c9a
[0x4022d1] memchr("      return i;\n  REALLOC_IF_NEC"..., '\n', 16) = 0x025a0caa
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(dfa->char"..., '\n', 0) = NULL
[0x4023cc] fwrite("6876:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  REALLOC_IF_NECESSARY(dfa->char"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  ++dfa->cindex;\n  copyset(s, df"..., 'I', 21193) = 0x025a12f7
[0x40cdf3] memchr("ISALPHA)\nFUNC(is_upper, ISUPPER)"..., '\n', 19660) = 0x025a12ff
[0x4022d1] memchr("  ++dfa->cindex;\n  copyset(s, df"..., '\n', 1518) = 0x025a0d0a
[0x4022d1] memchr("  copyset(s, dfa->charclasses[i]"..., '\n', 1501) = 0x025a0d2d
[0x4022d1] memchr("  return i;\n}\n\n/* Syntax bits co"..., '\n', 1466) = 0x025a0d39
[0x4022d1] memchr("}\n\n/* Syntax bits controlling th"..., '\n', 1454) = 0x025a0d3b
[0x4022d1] memchr("\n/* Syntax bits controlling the "..., '\n', 1452) = 0x025a0d3c
[0x4022d1] memchr("/* Syntax bits controlling the b"..., '\n', 1451) = 0x025a0d80
[0x4022d1] memchr("static int syntax_bits, syntax_b"..., '\n', 1383) = 0x025a0da9
[0x4022d1] memchr("\n/* Flag for case-folding letter"..., '\n', 1342) = 0x025a0daa
[0x4022d1] memchr("/* Flag for case-folding letters"..., '\n', 1341) = 0x025a0dd9
[0x4022d1] memchr("static int case_fold;\n\n/* Entry "..., '\n', 1294) = 0x025a0def
[0x4022d1] memchr("\n/* Entry point to set syntax op"..., '\n', 1272) = 0x025a0df0
[0x4022d1] memchr("/* Entry point to set syntax opt"..., '\n', 1271) = 0x025a0e19
[0x4022d1] memchr("void\ndfasyntax(bits, fold)\n     "..., '\n', 1230) = 0x025a0e1e
[0x4022d1] memchr("dfasyntax(bits, fold)\n     int b"..., '\n', 1225) = 0x025a0e34
[0x4022d1] memchr("     int bits;\n     int fold;\n{\n"..., '\n', 1203) = 0x025a0e43
[0x4022d1] memchr("     int fold;\n{\n  syntax_bits_s"..., '\n', 1188) = 0x025a0e52
[0x4022d1] memchr("{\n  syntax_bits_set = 1;\n  synta"..., '\n', 1173) = 0x025a0e54
[0x4022d1] memchr("  syntax_bits_set = 1;\n  syntax_"..., '\n', 1171) = 0x025a0e6b
[0x4022d1] memchr("  syntax_bits = bits;\n  case_fol"..., '\n', 1148) = 0x025a0e81
[0x4022d1] memchr("  case_fold = fold;\n}\n\n/* Lexica"..., '\n', 1126) = 0x025a0e95
[0x4022d1] memchr("}\n\n/* Lexical analyzer.  All the"..., '\n', 1106) = 0x025a0e97
[0x4022d1] memchr("\n/* Lexical analyzer.  All the d"..., '\n', 1104) = 0x025a0e98
[0x4022d1] memchr("/* Lexical analyzer.  All the dr"..., '\n', 1103) = 0x025a0eda
[0x4022d1] memchr("   GNU Regex syntax bits is loca"..., '\n', 1037) = 0x025a0f19
[0x4022d1] memchr("   reader is referred to the GNU"..., '\n', 974) = 0x025a0f56
[0x4022d1] memchr("   meaning of the @#%!@#%^!@ syn"..., '\n', 913) = 0x025a0f83
[0x4022d1] memchr("\nstatic char *lexstart;\t\t/* Poin"..., '\n', 868) = 0x025a0f84
[0x4022d1] memchr("static char *lexstart;\t\t/* Point"..., '\n', 867) = 0x025a0fc8
[0x4022d1] memchr("static char *lexptr;\t\t/* Pointer"..., '\n', 799) = 0x025a1005
[0x4022d1] memchr("static lexleft;\t\t\t/* Number of c"..., '\n', 738) = 0x025a103d
[0x4022d1] memchr("static token lasttok;\t\t/* Previo"..., '\n', 682) = 0x025a1082
[0x4022d1] memchr("static int laststart;\t\t/* True i"..., '\n', 613) = 0x025a10cb
[0x4022d1] memchr("\t\t\t\t   only by zero-width charac"..., '\n', 540) = 0x025a10f4
[0x4022d1] memchr("static int parens;\t\t/* Count of "..., '\n', 499) = 0x025a1130
[0x4022d1] memchr("static int minrep, maxrep;\t/* Re"..., '\n', 439) = 0x025a116a
[0x4022d1] memchr("\n/* Note that characters become "..., '\n', 381) = 0x025a116b
[0x4022d1] memchr("/* Note that characters become u"..., '\n', 380) = 0x025a119c
[0x4022d1] memchr("#define FETCH(c, eoferr)   \t    "..., '\n', 331) = 0x025a11c0
[0x4022d1] memchr("  {\t\t\t   \t      \\\n    if (! lexl"..., '\n', 295) = 0x025a11d2
[0x4022d1] memchr("    if (! lexleft)\t   \t      \\\n "..., '\n', 277) = 0x025a11f1
[0x4022d1] memchr("      if (eoferr != 0)\t   \t     "..., '\n', 246) = 0x025a1214
[0x4022d1] memchr("\tdfaerror(eoferr);  \t      \\\n   "..., '\n', 211) = 0x025a1231
[0x4022d1] memchr("      else\t\t   \t      \\\n\treturn "..., '\n', 182) = 0x025a1249
[0x4022d1] memchr("\treturn END;\t   \t      \\\n    (c)"..., '\n', 158) = 0x025a1262
[0x4022d1] memchr("    (c) = (unsigned char) *lexpt"..., '\n', 133) = 0x025a128a
[0x4022d1] memchr("    --lexleft;\t\t   \t      \\\n  }\n"..., '\n', 93) = 0x025a12a6
[0x4022d1] memchr("  }\n\n#define FUNC(F, P) static i"..., '\n', 65) = 0x025a12aa
[0x4022d1] memchr("\n#define FUNC(F, P) static int F"..., '\n', 61) = 0x025a12ab
[0x4022d1] memchr("#define FUNC(F, P) static int F("..., '\n', 60) = 0x025a12e6
[0x4022d1] memchr("\nFUNC(is_alpha, ISALPHA)\nFUNC(is"..., '\n', 1) = 0x025a12e7
[0x4022d1] memchr("FUNC(is_alpha, ISALPHA)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6927:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_alpha, ISALPHA)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_upper, ISUPPER)\nFUNC(is_"..., 'I', 19651) = 0x025a130f
[0x40cdf3] memchr("ISUPPER)\nFUNC(is_lower, ISLOWER)"..., '\n', 19636) = 0x025a1317
[0x4022d1] memchr("FUNC(is_upper, ISUPPER)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6928:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_upper, ISUPPER)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_lower, ISLOWER)\nFUNC(is_"..., 'I', 19627) = 0x025a1327
[0x40cdf3] memchr("ISLOWER)\nFUNC(is_digit, ISDIGIT)"..., '\n', 19612) = 0x025a132f
[0x4022d1] memchr("FUNC(is_lower, ISLOWER)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6929:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_lower, ISLOWER)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_digit, ISDIGIT)\nFUNC(is_"..., 'I', 19603) = 0x025a133f
[0x40cdf3] memchr("ISDIGIT)\nFUNC(is_xdigit, ISXDIGI"..., '\n', 19588) = 0x025a1347
[0x4022d1] memchr("FUNC(is_digit, ISDIGIT)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6930:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_digit, ISDIGIT)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_xdigit, ISXDIGIT)\nFUNC(i"..., 'I', 19579) = 0x025a1358
[0x40cdf3] memchr("ISXDIGIT)\nFUNC(is_space, ISSPACE"..., '\n', 19563) = 0x025a1361
[0x4022d1] memchr("FUNC(is_xdigit, ISXDIGIT)\nFUNC(i"..., '\n', 0) = NULL
[0x4023cc] fwrite("6931:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_xdigit, ISXDIGIT)\nFUNC(i"..., 1, 26, 0x7f498147f260) = 26
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_space, ISSPACE)\nFUNC(is_"..., 'I', 19553) = 0x025a1371
[0x40cdf3] memchr("ISSPACE)\nFUNC(is_punct, ISPUNCT)"..., '\n', 19538) = 0x025a1379
[0x4022d1] memchr("FUNC(is_space, ISSPACE)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6932:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_space, ISSPACE)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_punct, ISPUNCT)\nFUNC(is_"..., 'I', 19529) = 0x025a1389
[0x40cdf3] memchr("ISPUNCT)\nFUNC(is_alnum, ISALNUM)"..., '\n', 19514) = 0x025a1391
[0x4022d1] memchr("FUNC(is_punct, ISPUNCT)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6933:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_punct, ISPUNCT)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_alnum, ISALNUM)\nFUNC(is_"..., 'I', 19505) = 0x025a13a1
[0x40cdf3] memchr("ISALNUM)\nFUNC(is_print, ISPRINT)"..., '\n', 19490) = 0x025a13a9
[0x4022d1] memchr("FUNC(is_alnum, ISALNUM)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6934:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_alnum, ISALNUM)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_print, ISPRINT)\nFUNC(is_"..., 'I', 19481) = 0x025a13b9
[0x40cdf3] memchr("ISPRINT)\nFUNC(is_graph, ISGRAPH)"..., '\n', 19466) = 0x025a13c1
[0x4022d1] memchr("FUNC(is_print, ISPRINT)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6935:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_print, ISPRINT)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_graph, ISGRAPH)\nFUNC(is_"..., 'I', 19457) = 0x025a13d1
[0x40cdf3] memchr("ISGRAPH)\nFUNC(is_cntrl, ISCNTRL)"..., '\n', 19442) = 0x025a13d9
[0x4022d1] memchr("FUNC(is_graph, ISGRAPH)\nFUNC(is_"..., '\n', 0) = NULL
[0x4023cc] fwrite("6936:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_graph, ISGRAPH)\nFUNC(is_"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("FUNC(is_cntrl, ISCNTRL)\n\n/* The "..., 'I', 19433) = 0x025a13e9
[0x40cdf3] memchr("ISCNTRL)\n\n/* The following list "..., '\n', 19418) = 0x025a13f1
[0x4022d1] memchr("FUNC(is_cntrl, ISCNTRL)\n\n/* The "..., '\n', 0) = NULL
[0x4023cc] fwrite("6937:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("FUNC(is_cntrl, ISCNTRL)\n\n/* The "..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* The following list maps the "..., 'I', 19409) = 0x025a1746
[0x40cdf3] memchr("If it's a backslash,\n     we set"..., '\n', 18557) = 0x025a175a
[0x4022d1] memchr("\n/* The following list maps the "..., '\n', 812) = 0x025a13f2
[0x4022d1] memchr("/* The following list maps the n"..., '\n', 811) = 0x025a143c
[0x4022d1] memchr("   to predicate functions that d"..., '\n', 737) = 0x025a1485
[0x4022d1] memchr("   the class.  The leading [ has"..., '\n', 664) = 0x025a14d5
[0x4022d1] memchr("static struct {\n  char *name;\n  "..., '\n', 584) = 0x025a14e5
[0x4022d1] memchr("  char *name;\n  int (*pred)();\n}"..., '\n', 568) = 0x025a14f3
[0x4022d1] memchr("  int (*pred)();\n} prednames[] ="..., '\n', 554) = 0x025a1504
[0x4022d1] memchr("} prednames[] = {\n  ":alpha:]", "..., '\n', 537) = 0x025a1516
[0x4022d1] memchr("  ":alpha:]", is_alpha,\n  ":uppe"..., '\n', 519) = 0x025a152e
[0x4022d1] memchr("  ":upper:]", is_upper,\n  ":lowe"..., '\n', 495) = 0x025a1546
[0x4022d1] memchr("  ":lower:]", is_lower,\n  ":digi"..., '\n', 471) = 0x025a155e
[0x4022d1] memchr("  ":digit:]", is_digit,\n  ":xdig"..., '\n', 447) = 0x025a1576
[0x4022d1] memchr("  ":xdigit:]", is_xdigit,\n  ":sp"..., '\n', 423) = 0x025a1590
[0x4022d1] memchr("  ":space:]", is_space,\n  ":punc"..., '\n', 397) = 0x025a15a8
[0x4022d1] memchr("  ":punct:]", is_punct,\n  ":alnu"..., '\n', 373) = 0x025a15c0
[0x4022d1] memchr("  ":alnum:]", is_alnum,\n  ":prin"..., '\n', 349) = 0x025a15d8
[0x4022d1] memchr("  ":print:]", is_print,\n  ":grap"..., '\n', 325) = 0x025a15f0
[0x4022d1] memchr("  ":graph:]", is_graph,\n  ":cntr"..., '\n', 301) = 0x025a1608
[0x4022d1] memchr("  ":cntrl:]", is_cntrl,\n  0\n};\n\n"..., '\n', 277) = 0x025a1620
[0x4022d1] memchr("  0\n};\n\nstatic int\nlooking_at(s)"..., '\n', 253) = 0x025a1624
[0x4022d1] memchr("};\n\nstatic int\nlooking_at(s)\n   "..., '\n', 249) = 0x025a1627
[0x4022d1] memchr("\nstatic int\nlooking_at(s)\n     c"..., '\n', 246) = 0x025a1628
[0x4022d1] memchr("static int\nlooking_at(s)\n     ch"..., '\n', 245) = 0x025a1633
[0x4022d1] memchr("looking_at(s)\n     char *s;\n{\n  "..., '\n', 234) = 0x025a1641
[0x4022d1] memchr("     char *s;\n{\n  int len;\n\n  le"..., '\n', 220) = 0x025a164f
[0x4022d1] memchr("{\n  int len;\n\n  len = strlen(s);"..., '\n', 206) = 0x025a1651
[0x4022d1] memchr("  int len;\n\n  len = strlen(s);\n "..., '\n', 204) = 0x025a165c
[0x4022d1] memchr("\n  len = strlen(s);\n  if (lexlef"..., '\n', 193) = 0x025a165d
[0x4022d1] memchr("  len = strlen(s);\n  if (lexleft"..., '\n', 192) = 0x025a1670
[0x4022d1] memchr("  if (lexleft < len)\n    return "..., '\n', 173) = 0x025a1685
[0x4022d1] memchr("    return 0;\n  return strncmp(s"..., '\n', 152) = 0x025a1693
[0x4022d1] memchr("  return strncmp(s, lexptr, len)"..., '\n', 138) = 0x025a16ba
[0x4022d1] memchr("}\n\nstatic token\nlex()\n{\n  token "..., '\n', 99) = 0x025a16bc
[0x4022d1] memchr("\nstatic token\nlex()\n{\n  token c,"..., '\n', 97) = 0x025a16bd
[0x4022d1] memchr("static token\nlex()\n{\n  token c, "..., '\n', 96) = 0x025a16ca
[0x4022d1] memchr("lex()\n{\n  token c, c1, c2;\n  int"..., '\n', 83) = 0x025a16d0
[0x4022d1] memchr("{\n  token c, c1, c2;\n  int backs"..., '\n', 77) = 0x025a16d2
[0x4022d1] memchr("  token c, c1, c2;\n  int backsla"..., '\n', 75) = 0x025a16e5
[0x4022d1] memchr("  int backslash = 0, invert;\n  c"..., '\n', 56) = 0x025a1702
[0x4022d1] memchr("  charclass ccl;\n  int i;\n\n  /* "..., '\n', 27) = 0x025a1713
[0x4022d1] memchr("  int i;\n\n  /* Basic plan: We fe"..., '\n', 10) = 0x025a171c
[0x4022d1] memchr("\n  /* Basic plan: We fetch a cha"..., '\n', 1) = 0x025a171d
[0x4022d1] memchr("  /* Basic plan: We fetch a char"..., '\n', 0) = NULL
[0x4023cc] fwrite("6980:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Basic plan: We fetch a char"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     we set the backslash flag a"..., 'I', 18536) = 0x025a1993
[0x40cdf3] memchr("INDEP_ANCHORS\n\t      || lasttok "..., '\n', 17968) = 0x025a19a0
[0x4022d1] memchr("     we set the backslash flag a"..., '\n', 536) = 0x025a1798
[0x4022d1] memchr("     On the plus side, this avoi"..., '\n', 474) = 0x025a17d5
[0x4022d1] memchr("     main switch inside the back"..., '\n', 413) = 0x025a1815
[0x4022d1] memchr("     it means that just about ev"..., '\n', 349) = 0x025a184a
[0x4022d1] memchr("     "if (backslash) ...".  */\n "..., '\n', 296) = 0x025a1869
[0x4022d1] memchr("  for (i = 0; i < 2; ++i)\n    {\n"..., '\n', 265) = 0x025a1883
[0x4022d1] memchr("    {\n      FETCH(c, 0);\n      s"..., '\n', 239) = 0x025a1889
[0x4022d1] memchr("      FETCH(c, 0);\n      switch "..., '\n', 233) = 0x025a189c
[0x4022d1] memchr("      switch (c)\n\t{\n\tcase '\\\\':\n"..., '\n', 214) = 0x025a18ad
[0x4022d1] memchr("\t{\n\tcase '\\\\':\n\t  if (backslash)"..., '\n', 197) = 0x025a18b0
[0x4022d1] memchr("\tcase '\\\\':\n\t  if (backslash)\n\t "..., '\n', 194) = 0x025a18bc
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 182) = 0x025a18ce
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (le"..., '\n', 164) = 0x025a18e5
[0x4022d1] memchr("\t  if (lexleft == 0)\n\t    dfaerr"..., '\n', 141) = 0x025a18fa
[0x4022d1] memchr("\t    dfaerror("Unfinished \\\\ esc"..., '\n', 120) = 0x025a1921
[0x4022d1] memchr("\t  backslash = 1;\n\t  break;\n\n\tca"..., '\n', 81) = 0x025a1933
[0x4022d1] memchr("\t  break;\n\n\tcase '^':\n\t  if (bac"..., '\n', 63) = 0x025a193d
[0x4022d1] memchr("\n\tcase '^':\n\t  if (backslash)\n\t "..., '\n', 53) = 0x025a193e
[0x4022d1] memchr("\tcase '^':\n\t  if (backslash)\n\t  "..., '\n', 52) = 0x025a1949
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 41) = 0x025a195b
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (sy"..., '\n', 23) = 0x025a1972
[0x4022d1] memchr("\t  if (syntax_bits & RE_CONTEXT_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7002:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_CONTEXT_"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      || lasttok == END\n\t      "..., 'I', 17954) = 0x025a1a09
[0x40cdf3] memchr("INE;\n\t  goto normal_char;\n\n\tcase"..., '\n', 17850) = 0x025a1a0d
[0x4022d1] memchr("\t      || lasttok == END\n\t      "..., '\n', 78) = 0x025a19b9
[0x4022d1] memchr("\t      || lasttok == LPAREN\n\t   "..., '\n', 53) = 0x025a19d5
[0x4022d1] memchr("\t      || lasttok == OR)\n\t    re"..., '\n', 25) = 0x025a19ee
[0x4022d1] memchr("\t    return lasttok = BEGLINE;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7006:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    return lasttok = BEGLINE;\n\t"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  goto normal_char;\n\n\tcase '$':"..., 'I', 17845) = 0x025a1a78
[0x40cdf3] memchr("INDEP_ANCHORS\n\t      || lexleft "..., '\n', 17739) = 0x025a1a85
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '$':"..., '\n', 74) = 0x025a1a22
[0x4022d1] memchr("\n\tcase '$':\n\t  if (backslash)\n\t "..., '\n', 53) = 0x025a1a23
[0x4022d1] memchr("\tcase '$':\n\t  if (backslash)\n\t  "..., '\n', 52) = 0x025a1a2e
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 41) = 0x025a1a40
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (sy"..., '\n', 23) = 0x025a1a57
[0x4022d1] memchr("\t  if (syntax_bits & RE_CONTEXT_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7012:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_CONTEXT_"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      || lexleft == 0\n\t      ||"..., 'I', 17725) = 0x025a1bce
[0x40cdf3] memchr("INE_ALT)\n\t          && lexleft >"..., '\n', 17397) = 0x025a1bd6
[0x4022d1] memchr("\t      || lexleft == 0\n\t      ||"..., '\n', 295) = 0x025a1a9c
[0x4022d1] memchr("\t      || (syntax_bits & RE_NO_B"..., '\n', 272) = 0x025a1ac5
[0x4022d1] memchr("\t\t  ? lexleft > 0 && *lexptr == "..., '\n', 231) = 0x025a1ae9
[0x4022d1] memchr("\t\t  : lexleft > 1 && lexptr[0] ="..., '\n', 195) = 0x025a1b25
[0x4022d1] memchr("\t      || (syntax_bits & RE_NO_B"..., '\n', 135) = 0x025a1b4c
[0x4022d1] memchr("\t\t  ? lexleft > 0 && *lexptr == "..., '\n', 96) = 0x025a1b70
[0x4022d1] memchr("\t\t  : lexleft > 1 && lexptr[0] ="..., '\n', 60) = 0x025a1bac
[0x4022d1] memchr("\t      || ((syntax_bits & RE_NEW"..., '\n', 0) = NULL
[0x4023cc] fwrite("7020:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      || ((syntax_bits & RE_NEW"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t          && lexleft > 0 && *le"..., 'I', 17388) = 0x025a1c20
[0x40cdf3] memchr("INE;\n\t  goto normal_char;\n\n\tcase"..., '\n', 17315) = 0x025a1c24
[0x4022d1] memchr("\t          && lexleft > 0 && *le"..., '\n', 47) = 0x025a1c05
[0x4022d1] memchr("\t    return lasttok = ENDLINE;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7022:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    return lasttok = ENDLINE;\n\t"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  goto normal_char;\n\n\tcase '1':"..., 'I', 17310) = 0x025a1e05
[0x40cdf3] memchr("IMWORD;\n\t  goto normal_char;\n\n\tc"..., '\n', 16830) = 0x025a1e0c
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '1':"..., '\n', 457) = 0x025a1c39
[0x4022d1] memchr("\n\tcase '1':\n\tcase '2':\n\tcase '3'"..., '\n', 436) = 0x025a1c3a
[0x4022d1] memchr("\tcase '1':\n\tcase '2':\n\tcase '3':"..., '\n', 435) = 0x025a1c45
[0x4022d1] memchr("\tcase '2':\n\tcase '3':\n\tcase '4':"..., '\n', 424) = 0x025a1c50
[0x4022d1] memchr("\tcase '3':\n\tcase '4':\n\tcase '5':"..., '\n', 413) = 0x025a1c5b
[0x4022d1] memchr("\tcase '4':\n\tcase '5':\n\tcase '6':"..., '\n', 402) = 0x025a1c66
[0x4022d1] memchr("\tcase '5':\n\tcase '6':\n\tcase '7':"..., '\n', 391) = 0x025a1c71
[0x4022d1] memchr("\tcase '6':\n\tcase '7':\n\tcase '8':"..., '\n', 380) = 0x025a1c7c
[0x4022d1] memchr("\tcase '7':\n\tcase '8':\n\tcase '9':"..., '\n', 369) = 0x025a1c87
[0x4022d1] memchr("\tcase '8':\n\tcase '9':\n\t  if (bac"..., '\n', 358) = 0x025a1c92
[0x4022d1] memchr("\tcase '9':\n\t  if (backslash && !"..., '\n', 347) = 0x025a1c9d
[0x4022d1] memchr("\t  if (backslash && !(syntax_bit"..., '\n', 336) = 0x025a1cd1
[0x4022d1] memchr("\t    {\n\t      laststart = 0;\n\t  "..., '\n', 284) = 0x025a1cd8
[0x4022d1] memchr("\t      laststart = 0;\n\t      ret"..., '\n', 277) = 0x025a1cee
[0x4022d1] memchr("\t      return lasttok = BACKREF;"..., '\n', 255) = 0x025a1d0f
[0x4022d1] memchr("\t    }\n\t  goto normal_char;\n\n\tca"..., '\n', 222) = 0x025a1d16
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '<':"..., '\n', 215) = 0x025a1d2b
[0x4022d1] memchr("\n\tcase '<':\n\t  if (backslash)\n\t "..., '\n', 194) = 0x025a1d2c
[0x4022d1] memchr("\tcase '<':\n\t  if (backslash)\n\t  "..., '\n', 193) = 0x025a1d37
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 182) = 0x025a1d49
[0x4022d1] memchr("\t    return lasttok = BEGWORD;\n\t"..., '\n', 164) = 0x025a1d68
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '>':"..., '\n', 133) = 0x025a1d7d
[0x4022d1] memchr("\n\tcase '>':\n\t  if (backslash)\n\t "..., '\n', 112) = 0x025a1d7e
[0x4022d1] memchr("\tcase '>':\n\t  if (backslash)\n\t  "..., '\n', 111) = 0x025a1d89
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 100) = 0x025a1d9b
[0x4022d1] memchr("\t    return lasttok = ENDWORD;\n\t"..., '\n', 82) = 0x025a1dba
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase 'b':"..., '\n', 51) = 0x025a1dcf
[0x4022d1] memchr("\n\tcase 'b':\n\t  if (backslash)\n\t "..., '\n', 30) = 0x025a1dd0
[0x4022d1] memchr("\tcase 'b':\n\t  if (backslash)\n\t  "..., '\n', 29) = 0x025a1ddb
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 18) = 0x025a1ded
[0x4022d1] memchr("\t    return lasttok = LIMWORD;\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7053:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    return lasttok = LIMWORD;\n\t"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  goto normal_char;\n\n\tcase 'B':"..., 'I', 16822) = 0x025a1e5a
[0x40cdf3] memchr("IMWORD;\n\t  goto normal_char;\n\n\tc"..., '\n', 16745) = 0x025a1e61
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase 'B':"..., '\n', 51) = 0x025a1e21
[0x4022d1] memchr("\n\tcase 'B':\n\t  if (backslash)\n\t "..., '\n', 30) = 0x025a1e22
[0x4022d1] memchr("\tcase 'B':\n\t  if (backslash)\n\t  "..., '\n', 29) = 0x025a1e2d
[0x4022d1] memchr("\t  if (backslash)\n\t    return la"..., '\n', 18) = 0x025a1e3f
[0x4022d1] memchr("\t    return lasttok = NOTLIMWORD"..., '\n', 0) = NULL
[0x4023cc] fwrite("7058:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    return lasttok = NOTLIMWORD"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  goto normal_char;\n\n\tcase '?':"..., 'I', 16737) = 0x025a1e9c
[0x40cdf3] memchr("IMITED_OPS)\n\t    goto normal_cha"..., '\n', 16679) = 0x025a1ea7
[0x4022d1] memchr("\t  goto normal_char;\n\n\tcase '?':"..., '\n', 33) = 0x025a1e76
[0x4022d1] memchr("\n\tcase '?':\n\t  if (syntax_bits &"..., '\n', 12) = 0x025a1e77
[0x4022d1] memchr("\tcase '?':\n\t  if (syntax_bits & "..., '\n', 11) = 0x025a1e82
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7062:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_LIMITED_"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  if (ba"..., 'I', 16667) = 0x025a1f32
[0x40cdf3] memchr("INDEP_OPS) && laststart)\n\t    go"..., '\n', 16529) = 0x025a1f4a
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 104) = 0x025a1ebe
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 81) = 0x025a1ef8
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 23) = 0x025a1f0f
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 0) = NULL
[0x4023cc] fwrite("7066:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!(syntax_bits & RE_CONTEX"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  return"..., 'I', 16504) = 0x025a1fd4
[0x40cdf3] memchr("INDEP_OPS) && laststart)\n\t    go"..., '\n', 16367) = 0x025a1fec
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 103) = 0x025a1f61
[0x4022d1] memchr("\t  return lasttok = QMARK;\n\n\tcas"..., '\n', 80) = 0x025a1f7c
[0x4022d1] memchr("\n\tcase '*':\n\t  if (backslash)\n\t "..., '\n', 53) = 0x025a1f7d
[0x4022d1] memchr("\tcase '*':\n\t  if (backslash)\n\t  "..., '\n', 52) = 0x025a1f88
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 41) = 0x025a1f9a
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 23) = 0x025a1fb1
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 0) = NULL
[0x4023cc] fwrite("7073:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!(syntax_bits & RE_CONTEX"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  return"..., 'I', 16342) = 0x025a2043
[0x40cdf3] memchr("IMITED_OPS)\n\t    goto normal_cha"..., '\n', 16256) = 0x025a204e
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 61) = 0x025a2003
[0x4022d1] memchr("\t  return lasttok = STAR;\n\n\tcase"..., '\n', 38) = 0x025a201d
[0x4022d1] memchr("\n\tcase '+':\n\t  if (syntax_bits &"..., '\n', 12) = 0x025a201e
[0x4022d1] memchr("\tcase '+':\n\t  if (syntax_bits & "..., '\n', 11) = 0x025a2029
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7078:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_LIMITED_"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  if (ba"..., 'I', 16244) = 0x025a20d9
[0x40cdf3] memchr("INDEP_OPS) && laststart)\n\t    go"..., '\n', 16106) = 0x025a20f1
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 104) = 0x025a2065
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 81) = 0x025a209f
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (!("..., '\n', 23) = 0x025a20b6
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_CONTEX"..., '\n', 0) = NULL
[0x4023cc] fwrite("7082:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!(syntax_bits & RE_CONTEX"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  return"..., 'I', 16081) = 0x025a2149
[0x40cdf3] memchr("INTERVALS))\n\t    goto normal_cha"..., '\n', 15994) = 0x025a2154
[0x4022d1] memchr("\t    goto normal_char;\n\t  return"..., '\n', 61) = 0x025a2108
[0x4022d1] memchr("\t  return lasttok = PLUS;\n\n\tcase"..., '\n', 38) = 0x025a2122
[0x4022d1] memchr("\n\tcase '{':\n\t  if (!(syntax_bits"..., '\n', 12) = 0x025a2123
[0x4022d1] memchr("\tcase '{':\n\t  if (!(syntax_bits "..., '\n', 11) = 0x025a212e
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_INTERV"..., '\n', 0) = NULL
[0x4023cc] fwrite("7087:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!(syntax_bits & RE_INTERV"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  if (ba"..., 'I', 15982) = 0x025a2291
[0x40cdf3] memchr("ISDIGIT(c))\n\t    {\n\t      minrep"..., '\n', 15666) = 0x025a229c
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 309) = 0x025a216b
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 286) = 0x025a21a7
[0x4022d1] memchr("\t    goto normal_char;\n\t  minrep"..., '\n', 226) = 0x025a21be
[0x4022d1] memchr("\t  minrep = maxrep = 0;\n\t  /* Ca"..., '\n', 203) = 0x025a21d6
[0x4022d1] memchr("\t  /* Cases:\n\t     {M} - exact c"..., '\n', 179) = 0x025a21e3
[0x4022d1] memchr("\t     {M} - exact count\n\t     {M"..., '\n', 166) = 0x025a21fb
[0x4022d1] memchr("\t     {M,} - minimum count, maxi"..., '\n', 142) = 0x025a222b
[0x4022d1] memchr("\t     {,M} - 0 through M\n\t     {"..., '\n', 94) = 0x025a2244
[0x4022d1] memchr("\t     {M,N} - M through N */\n\t  "..., '\n', 69) = 0x025a2261
[0x4022d1] memchr("\t  FETCH(c, "unfinished repeat c"..., '\n', 40) = 0x025a2289
[0x4022d1] memchr("\t  if (ISDIGIT(c))\n\t    {\n\t     "..., '\n', 0) = NULL
[0x4023cc] fwrite("7098:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (ISDIGIT(c))\n\t    {\n\t     "..., 1, 19, 0x7f498147f260) = 19
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    {\n\t      minrep = c - '0';\n"..., 'I', 15654) = 0x025a2303
[0x40cdf3] memchr("ISDIGIT(c))\n\t\t    break;\n\t\t  min"..., '\n', 15552) = 0x025a230e
[0x4022d1] memchr("\t    {\n\t      minrep = c - '0';\n"..., '\n', 93) = 0x025a22a3
[0x4022d1] memchr("\t      minrep = c - '0';\n\t      "..., '\n', 86) = 0x025a22bc
[0x4022d1] memchr("\t      for (;;)\n\t\t{\n\t\t  FETCH(c,"..., '\n', 61) = 0x025a22cc
[0x4022d1] memchr("\t\t{\n\t\t  FETCH(c, "unfinished rep"..., '\n', 45) = 0x025a22d0
[0x4022d1] memchr("\t\t  FETCH(c, "unfinished repeat "..., '\n', 41) = 0x025a22f9
[0x4022d1] memchr("\t\t  if (!ISDIGIT(c))\n\t\t    break"..., '\n', 0) = NULL
[0x4023cc] fwrite("7104:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t  if (!ISDIGIT(c))\n\t\t    break"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t    break;\n\t\t  minrep = 10 * m"..., 'I', 15540) = 0x025a23e0
[0x40cdf3] memchr("ISDIGIT(c))\n\t\t  break;\n\t\tmaxrep "..., '\n', 15331) = 0x025a23eb
[0x4022d1] memchr("\t\t    break;\n\t\t  minrep = 10 * m"..., '\n', 202) = 0x025a231b
[0x4022d1] memchr("\t\t  minrep = 10 * minrep + c - '"..., '\n', 189) = 0x025a233f
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else if (c != ',')"..., '\n', 153) = 0x025a2343
[0x4022d1] memchr("\t    }\n\t  else if (c != ',')\n\t  "..., '\n', 149) = 0x025a234a
[0x4022d1] memchr("\t  else if (c != ',')\n\t    dfaer"..., '\n', 142) = 0x025a2360
[0x4022d1] memchr("\t    dfaerror("malformed repeat "..., '\n', 120) = 0x025a2389
[0x4022d1] memchr("\t  if (c == ',')\n\t    for (;;)\n\t"..., '\n', 79) = 0x025a239a
[0x4022d1] memchr("\t    for (;;)\n\t      {\n\t\tFETCH(c"..., '\n', 62) = 0x025a23a8
[0x4022d1] memchr("\t      {\n\t\tFETCH(c, "unfinished "..., '\n', 48) = 0x025a23b1
[0x4022d1] memchr("\t\tFETCH(c, "unfinished repeat co"..., '\n', 39) = 0x025a23d8
[0x4022d1] memchr("\t\tif (!ISDIGIT(c))\n\t\t  break;\n\t\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("7115:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\tif (!ISDIGIT(c))\n\t\t  break;\n\t\t"..., 1, 19, 0x7f498147f260) = 19
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t  break;\n\t\tmaxrep = 10 * maxre"..., 'I', 15319) = 0x025a256b
[0x40cdf3] memchr("IMITED_OPS)\n\t    goto normal_cha"..., '\n', 14936) = 0x025a2576
[0x4022d1] memchr("\t\t  break;\n\t\tmaxrep = 10 * maxre"..., '\n', 358) = 0x025a23f6
[0x4022d1] memchr("\t\tmaxrep = 10 * maxrep + c - '0'"..., '\n', 347) = 0x025a2418
[0x4022d1] memchr("\t      }\n\t  else\n\t    maxrep = m"..., '\n', 313) = 0x025a2421
[0x4022d1] memchr("\t  else\n\t    maxrep = minrep;\n\t "..., '\n', 304) = 0x025a2429
[0x4022d1] memchr("\t    maxrep = minrep;\n\t  if (!(s"..., '\n', 296) = 0x025a243f
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_NO_BK_"..., '\n', 274) = 0x025a2468
[0x4022d1] memchr("\t    {\n\t      if (c != '\\\\')\n\t\td"..., '\n', 233) = 0x025a246f
[0x4022d1] memchr("\t      if (c != '\\\\')\n\t\tdfaerror"..., '\n', 226) = 0x025a2485
[0x4022d1] memchr("\t\tdfaerror("malformed repeat cou"..., '\n', 204) = 0x025a24ab
[0x4022d1] memchr("\t      FETCH(c, "unfinished repe"..., '\n', 166) = 0x025a24d7
[0x4022d1] memchr("\t    }\n\t  if (c != '}')\n\t    dfa"..., '\n', 122) = 0x025a24de
[0x4022d1] memchr("\t  if (c != '}')\n\t    dfaerror(""..., '\n', 115) = 0x025a24ef
[0x4022d1] memchr("\t    dfaerror("malformed repeat "..., '\n', 98) = 0x025a2518
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 57) = 0x025a252a
[0x4022d1] memchr("\t  return lasttok = REPMN;\n\n\tcas"..., '\n', 39) = 0x025a2545
[0x4022d1] memchr("\n\tcase '|':\n\t  if (syntax_bits &"..., '\n', 12) = 0x025a2546
[0x4022d1] memchr("\tcase '|':\n\t  if (syntax_bits & "..., '\n', 11) = 0x025a2551
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7133:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_LIMITED_"..., 1, 37, 0x7f498147f260) = 37
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  if (ba"..., 'I', 14924) = 0x025a262f
[0x40cdf3] memchr("IMITED_OPS\n\t      || backslash\n\t"..., '\n', 14740) = 0x025a2639
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (ba"..., '\n', 159) = 0x025a258d
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 136) = 0x025a25c7
[0x4022d1] memchr("\t    goto normal_char;\n\t  lastst"..., '\n', 78) = 0x025a25de
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 55) = 0x025a25f0
[0x4022d1] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '\n', 37) = 0x025a2608
[0x4022d1] memchr("\n\tcase '\\n':\n\t  if (syntax_bits "..., '\n', 13) = 0x025a2609
[0x4022d1] memchr("\tcase '\\n':\n\t  if (syntax_bits &"..., '\n', 12) = 0x025a2615
[0x4022d1] memchr("\t  if (syntax_bits & RE_LIMITED_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7141:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (syntax_bits & RE_LIMITED_"..., 1, 36, 0x7f498147f260) = 36
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      || backslash\n\t      || !("..., 'I', 14729) = 0x025a266f
[0x40cdf3] memchr("INE_ALT))\n\t    goto normal_char;"..., '\n', 14676) = 0x025a2678
[0x4022d1] memchr("\t      || backslash\n\t      || !("..., '\n', 20) = 0x025a264d
[0x4022d1] memchr("\t      || !(syntax_bits & RE_NEW"..., '\n', 0) = NULL
[0x4023cc] fwrite("7143:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      || !(syntax_bits & RE_NEW"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  lastst"..., 'I', 14666) = 0x025a27e5
[0x40cdf3] memchr("IGHT_PAREN_ORD)\n\t    goto normal"..., '\n', 14302) = 0x025a27f4
[0x4022d1] memchr("\t    goto normal_char;\n\t  lastst"..., '\n', 314) = 0x025a268f
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 291) = 0x025a26a1
[0x4022d1] memchr("\t  return lasttok = OR;\n\n\tcase '"..., '\n', 273) = 0x025a26b9
[0x4022d1] memchr("\n\tcase '(':\n\t  if (backslash != "..., '\n', 249) = 0x025a26ba
[0x4022d1] memchr("\tcase '(':\n\t  if (backslash != ("..., '\n', 248) = 0x025a26c5
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 237) = 0x025a2701
[0x4022d1] memchr("\t    goto normal_char;\n\t  ++pare"..., '\n', 177) = 0x025a2718
[0x4022d1] memchr("\t  ++parens;\n\t  laststart = 1;\n\t"..., '\n', 154) = 0x025a2725
[0x4022d1] memchr("\t  laststart = 1;\n\t  return last"..., '\n', 141) = 0x025a2737
[0x4022d1] memchr("\t  return lasttok = LPAREN;\n\n\tca"..., '\n', 123) = 0x025a2753
[0x4022d1] memchr("\n\tcase ')':\n\t  if (backslash != "..., '\n', 95) = 0x025a2754
[0x4022d1] memchr("\tcase ')':\n\t  if (backslash != ("..., '\n', 94) = 0x025a275f
[0x4022d1] memchr("\t  if (backslash != ((syntax_bit"..., '\n', 83) = 0x025a279b
[0x4022d1] memchr("\t    goto normal_char;\n\t  if (pa"..., '\n', 23) = 0x025a27b2
[0x4022d1] memchr("\t  if (parens == 0 && syntax_bit"..., '\n', 0) = NULL
[0x4023cc] fwrite("7158:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (parens == 0 && syntax_bit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    goto normal_char;\n\t  --pare"..., 'I', 14286) = 0x025a28bf
[0x40cdf3] memchr("INE))\n\t    clrbit('\\n', ccl);\n\t "..., '\n', 14084) = 0x025a28c4
[0x4022d1] memchr("\t    goto normal_char;\n\t  --pare"..., '\n', 168) = 0x025a280b
[0x4022d1] memchr("\t  --parens;\n\t  laststart = 0;\n\t"..., '\n', 145) = 0x025a2818
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 132) = 0x025a282a
[0x4022d1] memchr("\t  return lasttok = RPAREN;\n\n\tca"..., '\n', 114) = 0x025a2846
[0x4022d1] memchr("\n\tcase '.':\n\t  if (backslash)\n\t "..., '\n', 86) = 0x025a2847
[0x4022d1] memchr("\tcase '.':\n\t  if (backslash)\n\t  "..., '\n', 85) = 0x025a2852
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 74) = 0x025a2864
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 56) = 0x025a287b
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  notset(ccl);"..., '\n', 33) = 0x025a288c
[0x4022d1] memchr("\t  notset(ccl);\n\t  if (!(syntax_"..., '\n', 16) = 0x025a289c
[0x4022d1] memchr("\t  if (!(syntax_bits & RE_DOT_NE"..., '\n', 0) = NULL
[0x4023cc] fwrite("7169:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (!(syntax_bits & RE_DOT_NE"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    clrbit('\\n', ccl);\n\t  if (s"..., 'I', 14078) = 0x025a29dd
[0x40cdf3] memchr("ISALNUM(c2))\n\t      setbit(c2, c"..., '\n', 13798) = 0x025a29e9
[0x4022d1] memchr("\t    clrbit('\\n', ccl);\n\t  if (s"..., '\n', 271) = 0x025a28dc
[0x4022d1] memchr("\t  if (syntax_bits & RE_DOT_NOT_"..., '\n', 247) = 0x025a2902
[0x4022d1] memchr("\t    clrbit('\\0', ccl);\n\t  lasts"..., '\n', 209) = 0x025a291a
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 185) = 0x025a292c
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 167) = 0x025a295d
[0x4022d1] memchr("\n\tcase 'w':\n\tcase 'W':\n\t  if (!b"..., '\n', 118) = 0x025a295e
[0x4022d1] memchr("\tcase 'w':\n\tcase 'W':\n\t  if (!ba"..., '\n', 117) = 0x025a2969
[0x4022d1] memchr("\tcase 'W':\n\t  if (!backslash)\n\t "..., '\n', 106) = 0x025a2974
[0x4022d1] memchr("\t  if (!backslash)\n\t    goto nor"..., '\n', 95) = 0x025a2987
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 76) = 0x025a299e
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  for (c2 = 0;"..., '\n', 53) = 0x025a29af
[0x4022d1] memchr("\t  for (c2 = 0; c2 < NOTCHAR; ++"..., '\n', 36) = 0x025a29d3
[0x4022d1] memchr("\t    if (ISALNUM(c2))\n\t      set"..., '\n', 0) = NULL
[0x4023cc] fwrite("7182:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    if (ISALNUM(c2))\n\t      set"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      setbit(c2, ccl);\n\t  if (c"..., 'I', 13785) = 0x025a2e24
[0x40cdf3] memchr("IN_LISTS))\n\t\tFETCH(c, "Unbalance"..., '\n', 12703) = 0x025a2e2e
[0x4022d1] memchr("\t      setbit(c2, ccl);\n\t  if (c"..., '\n', 1023) = 0x025a2a01
[0x4022d1] memchr("\t  if (c == 'W')\n\t    notset(ccl"..., '\n', 999) = 0x025a2a12
[0x4022d1] memchr("\t    notset(ccl);\n\t  laststart ="..., '\n', 982) = 0x025a2a24
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 964) = 0x025a2a36
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 946) = 0x025a2a67
[0x4022d1] memchr("\t\n\tcase '[':\n\t  if (backslash)\n\t"..., '\n', 897) = 0x025a2a69
[0x4022d1] memchr("\tcase '[':\n\t  if (backslash)\n\t  "..., '\n', 895) = 0x025a2a74
[0x4022d1] memchr("\t  if (backslash)\n\t    goto norm"..., '\n', 884) = 0x025a2a86
[0x4022d1] memchr("\t    goto normal_char;\n\t  zerose"..., '\n', 866) = 0x025a2a9d
[0x4022d1] memchr("\t  zeroset(ccl);\n\t  FETCH(c, "Un"..., '\n', 843) = 0x025a2aae
[0x4022d1] memchr("\t  FETCH(c, "Unbalanced [");\n\t  "..., '\n', 826) = 0x025a2acb
[0x4022d1] memchr("\t  if (c == '^')\n\t    {\n\t      F"..., '\n', 797) = 0x025a2adc
[0x4022d1] memchr("\t    {\n\t      FETCH(c, "Unbalanc"..., '\n', 780) = 0x025a2ae3
[0x4022d1] memchr("\t      FETCH(c, "Unbalanced [");"..., '\n', 773) = 0x025a2b04
[0x4022d1] memchr("\t      invert = 1;\n\t    }\n\t  els"..., '\n', 740) = 0x025a2b17
[0x4022d1] memchr("\t    }\n\t  else\n\t    invert = 0;\n"..., '\n', 721) = 0x025a2b1e
[0x4022d1] memchr("\t  else\n\t    invert = 0;\n\t  do\n\t"..., '\n', 714) = 0x025a2b26
[0x4022d1] memchr("\t    invert = 0;\n\t  do\n\t    {\n\t "..., '\n', 706) = 0x025a2b37
[0x4022d1] memchr("\t  do\n\t    {\n\t      /* Nobody ev"..., '\n', 689) = 0x025a2b3d
[0x4022d1] memchr("\t    {\n\t      /* Nobody ever sai"..., '\n', 683) = 0x025a2b44
[0x4022d1] memchr("\t      /* Nobody ever said this "..., '\n', 676) = 0x025a2b78
[0x4022d1] memchr("\t\t Note that if we're looking at"..., '\n', 624) = 0x025a2bac
[0x4022d1] memchr("\t\t construct, we just treat it a"..., '\n', 572) = 0x025a2be2
[0x4022d1] memchr("\t\t characters.  We can do this b"..., '\n', 518) = 0x025a2c13
[0x4022d1] memchr("\t\t regex has checked for syntax "..., '\n', 469) = 0x025a2c41
[0x4022d1] memchr("\t\t dfa is ever called. */\n\t     "..., '\n', 423) = 0x025a2c5b
[0x4022d1] memchr("\t      if (c == '[' && (syntax_b"..., '\n', 397) = 0x025a2c93
[0x4022d1] memchr("\t\tfor (c1 = 0; prednames[c1].nam"..., '\n', 341) = 0x025a2cbc
[0x4022d1] memchr("\t\t  if (looking_at(prednames[c1]"..., '\n', 300) = 0x025a2ce4
[0x4022d1] memchr("\t\t    {\n\t\t      for (c2 = 0; c2 "..., '\n', 260) = 0x025a2cec
[0x4022d1] memchr("\t\t      for (c2 = 0; c2 < NOTCHA"..., '\n', 252) = 0x025a2d15
[0x4022d1] memchr("\t\t\tif ((*prednames[c1].pred)(c2)"..., '\n', 211) = 0x025a2d37
[0x4022d1] memchr("\t\t\t  setbit(c2, ccl);\n\t\t      le"..., '\n', 177) = 0x025a2d4d
[0x4022d1] memchr("\t\t      lexptr += strlen(prednam"..., '\n', 155) = 0x025a2d7b
[0x4022d1] memchr("\t\t      lexleft -= strlen(predna"..., '\n', 109) = 0x025a2daa
[0x4022d1] memchr("\t\t      FETCH(c1, "Unbalanced [""..., '\n', 62) = 0x025a2dcd
[0x4022d1] memchr("\t\t      goto skip;\n\t\t    }\n\t    "..., '\n', 27) = 0x025a2de0
[0x4022d1] memchr("\t\t    }\n\t      if (c == '\\\\' && "..., '\n', 8) = 0x025a2de8
[0x4022d1] memchr("\t      if (c == '\\\\' && (syntax_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7221:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      if (c == '\\\\' && (syntax_"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\tFETCH(c, "Unbalanced [");\n\t   "..., 'I', 12692) = 0x025a2ecc
[0x40cdf3] memchr("In the case [x-], the - is an or"..., '\n', 12535) = 0x025a2efa
[0x4022d1] memchr("\t\tFETCH(c, "Unbalanced [");\n\t   "..., '\n', 146) = 0x025a2e4a
[0x4022d1] memchr("\t      FETCH(c1, "Unbalanced [")"..., '\n', 118) = 0x025a2e6c
[0x4022d1] memchr("\t      if (c1 == '-')\n\t\t{\n\t\t  FE"..., '\n', 84) = 0x025a2e82
[0x4022d1] memchr("\t\t{\n\t\t  FETCH(c2, "Unbalanced [""..., '\n', 62) = 0x025a2e86
[0x4022d1] memchr("\t\t  FETCH(c2, "Unbalanced [");\n\t"..., '\n', 58) = 0x025a2ea5
[0x4022d1] memchr("\t\t  if (c2 == ']')\n\t\t    {\n\t\t   "..., '\n', 27) = 0x025a2eb8
[0x4022d1] memchr("\t\t    {\n\t\t      /* In the case ["..., '\n', 8) = 0x025a2ec0
[0x4022d1] memchr("\t\t      /* In the case [x-], the"..., '\n', 0) = NULL
[0x4023cc] fwrite("7229:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t      /* In the case [x-], the"..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t which is left in c1, the loo"..., 'I', 12488) = 0x025a2fc0
[0x40cdf3] memchr("IN_LISTS))\n\t\t\tFETCH(c2, "Unbalan"..., '\n', 12291) = 0x025a2fca
[0x4022d1] memchr("\t\t\t which is left in c1, the loo"..., '\n', 154) = 0x025a2f2f
[0x4022d1] memchr("\t\t      --lexptr;\n\t\t      ++lexl"..., '\n', 101) = 0x025a2f41
[0x4022d1] memchr("\t\t      ++lexleft;\n\t\t      c2 = "..., '\n', 83) = 0x025a2f54
[0x4022d1] memchr("\t\t      c2 = c;\n\t\t    }\n\t\t  else"..., '\n', 64) = 0x025a2f64
[0x4022d1] memchr("\t\t    }\n\t\t  else\n\t\t    {\n\t\t     "..., '\n', 48) = 0x025a2f6c
[0x4022d1] memchr("\t\t  else\n\t\t    {\n\t\t      if (c2 "..., '\n', 40) = 0x025a2f75
[0x4022d1] memchr("\t\t    {\n\t\t      if (c2 == '\\\\'\n\t"..., '\n', 31) = 0x025a2f7d
[0x4022d1] memchr("\t\t      if (c2 == '\\\\'\n\t\t\t  && ("..., '\n', 23) = 0x025a2f94
[0x4022d1] memchr("\t\t\t  && (syntax_bits & RE_BACKSL"..., '\n', 0) = NULL
[0x4023cc] fwrite("7238:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t\t  && (syntax_bits & RE_BACKSL"..., 1, 54, 0x7f498147f260) = 54
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\tFETCH(c2, "Unbalanced [");\n\t\t"..., 'I', 12280) = 0x025a307a
[0x40cdf3] memchr("ISUPPER(c))\n\t\t      setbit(tolow"..., '\n', 12105) = 0x025a3085
[0x4022d1] memchr("\t\t\tFETCH(c2, "Unbalanced [");\n\t\t"..., '\n', 165) = 0x025a2fe8
[0x4022d1] memchr("\t\t      FETCH(c1, "Unbalanced [""..., '\n', 135) = 0x025a300b
[0x4022d1] memchr("\t\t    }\n\t\t}\n\t      else\n\t\tc2 = c"..., '\n', 100) = 0x025a3013
[0x4022d1] memchr("\t\t}\n\t      else\n\t\tc2 = c;\n\t     "..., '\n', 92) = 0x025a3017
[0x4022d1] memchr("\t      else\n\t\tc2 = c;\n\t      whi"..., '\n', 88) = 0x025a3023
[0x4022d1] memchr("\t\tc2 = c;\n\t      while (c <= c2)"..., '\n', 76) = 0x025a302d
[0x4022d1] memchr("\t      while (c <= c2)\n\t\t{\n\t\t  s"..., '\n', 66) = 0x025a3044
[0x4022d1] memchr("\t\t{\n\t\t  setbit(c, ccl);\n\t\t  if ("..., '\n', 43) = 0x025a3048
[0x4022d1] memchr("\t\t  setbit(c, ccl);\n\t\t  if (case"..., '\n', 39) = 0x025a305c
[0x4022d1] memchr("\t\t  if (case_fold)\n\t\t    if (ISU"..., '\n', 19) = 0x025a306f
[0x4022d1] memchr("\t\t    if (ISUPPER(c))\n\t\t      se"..., '\n', 0) = NULL
[0x4023cc] fwrite("7249:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t    if (ISUPPER(c))\n\t\t      se"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t      setbit(tolower(c), ccl);"..., 'I', 12093) = 0x025a30b6
[0x40cdf3] memchr("ISLOWER(c))\n\t\t      setbit(toupp"..., '\n', 12045) = 0x025a30c1
[0x4022d1] memchr("\t\t      setbit(tolower(c), ccl);"..., '\n', 33) = 0x025a30a6
[0x4022d1] memchr("\t\t    else if (ISLOWER(c))\n\t\t   "..., '\n', 0) = NULL
[0x4023cc] fwrite("7251:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t\t    else if (ISLOWER(c))\n\t\t   "..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t      setbit(toupper(c), ccl);"..., 'I', 12033) = 0x025a3172
[0x40cdf3] memchr("ISTS_NOT_NEWLINE)\n\t\tclrbit('\\n',"..., '\n', 11857) = 0x025a3183
[0x4022d1] memchr("\t\t      setbit(toupper(c), ccl);"..., '\n', 143) = 0x025a30e2
[0x4022d1] memchr("\t\t  ++c;\n\t\t}\n\t    skip:\n\t      ;"..., '\n', 110) = 0x025a30eb
[0x4022d1] memchr("\t\t}\n\t    skip:\n\t      ;\n\t    }\n\t"..., '\n', 101) = 0x025a30ef
[0x4022d1] memchr("\t    skip:\n\t      ;\n\t    }\n\t  wh"..., '\n', 97) = 0x025a30fa
[0x4022d1] memchr("\t      ;\n\t    }\n\t  while ((c = c"..., '\n', 86) = 0x025a3103
[0x4022d1] memchr("\t    }\n\t  while ((c = c1) != ']'"..., '\n', 77) = 0x025a310a
[0x4022d1] memchr("\t  while ((c = c1) != ']');\n\t  i"..., '\n', 70) = 0x025a3126
[0x4022d1] memchr("\t  if (invert)\n\t    {\n\t      not"..., '\n', 42) = 0x025a3135
[0x4022d1] memchr("\t    {\n\t      notset(ccl);\n\t    "..., '\n', 27) = 0x025a313c
[0x4022d1] memchr("\t      notset(ccl);\n\t      if (s"..., '\n', 20) = 0x025a3150
[0x4022d1] memchr("\t      if (syntax_bits & RE_HAT_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7262:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      if (syntax_bits & RE_HAT_"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\tclrbit('\\n', ccl);\n\t    }\n\t  l"..., 'I', 11839) = 0x025a3222
[0x40cdf3] memchr("ISALPHA(c))\n\t    {\n\t      zerose"..., '\n', 11681) = 0x025a322d
[0x4022d1] memchr("\t\tclrbit('\\n', ccl);\n\t    }\n\t  l"..., '\n', 138) = 0x025a3198
[0x4022d1] memchr("\t    }\n\t  laststart = 0;\n\t  retu"..., '\n', 117) = 0x025a319f
[0x4022d1] memchr("\t  laststart = 0;\n\t  return last"..., '\n', 110) = 0x025a31b1
[0x4022d1] memchr("\t  return lasttok = CSET + charc"..., '\n', 92) = 0x025a31e2
[0x4022d1] memchr("\n\tdefault:\n\tnormal_char:\n\t  last"..., '\n', 43) = 0x025a31e3
[0x4022d1] memchr("\tdefault:\n\tnormal_char:\n\t  lasts"..., '\n', 42) = 0x025a31ed
[0x4022d1] memchr("\tnormal_char:\n\t  laststart = 0;\n"..., '\n', 32) = 0x025a31fb
[0x4022d1] memchr("\t  laststart = 0;\n\t  if (case_fo"..., '\n', 18) = 0x025a320d
[0x4022d1] memchr("\t  if (case_fold && ISALPHA(c))\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("7271:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (case_fold && ISALPHA(c))\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    {\n\t      zeroset(ccl);\n\t   "..., 'I', 11669) = 0x025a355e
[0x40cdf3] memchr("IF_NECESSARY(dfa->tokens, token,"..., '\n', 10853) = 0x025a3599
[0x4022d1] memchr("\t    {\n\t      zeroset(ccl);\n\t   "..., '\n', 806) = 0x025a3234
[0x4022d1] memchr("\t      zeroset(ccl);\n\t      setb"..., '\n', 799) = 0x025a3249
[0x4022d1] memchr("\t      setbit(c, ccl);\n\t      if"..., '\n', 778) = 0x025a3260
[0x4022d1] memchr("\t      if (isupper(c))\n\t\tsetbit("..., '\n', 755) = 0x025a3277
[0x4022d1] memchr("\t\tsetbit(tolower(c), ccl);\n\t    "..., '\n', 732) = 0x025a3292
[0x4022d1] memchr("\t      else\n\t\tsetbit(toupper(c),"..., '\n', 705) = 0x025a329e
[0x4022d1] memchr("\t\tsetbit(toupper(c), ccl);\n\t    "..., '\n', 693) = 0x025a32b9
[0x4022d1] memchr("\t      return lasttok = CSET + c"..., '\n', 666) = 0x025a32ee
[0x4022d1] memchr("\t    }\n\t  return c;\n\t}\n    }\n\n  "..., '\n', 613) = 0x025a32f5
[0x4022d1] memchr("\t  return c;\n\t}\n    }\n\n  /* The "..., '\n', 606) = 0x025a3302
[0x4022d1] memchr("\t}\n    }\n\n  /* The above loop sh"..., '\n', 593) = 0x025a3305
[0x4022d1] memchr("    }\n\n  /* The above loop shoul"..., '\n', 590) = 0x025a330b
[0x4022d1] memchr("\n  /* The above loop should cons"..., '\n', 584) = 0x025a330c
[0x4022d1] memchr("  /* The above loop should consu"..., '\n', 583) = 0x025a3343
[0x4022d1] memchr("     and some other character. *"..., '\n', 528) = 0x025a3365
[0x4022d1] memchr("  abort();\n}\n\n/* Recursive desce"..., '\n', 494) = 0x025a3370
[0x4022d1] memchr("}\n\n/* Recursive descent parser f"..., '\n', 483) = 0x025a3372
[0x4022d1] memchr("\n/* Recursive descent parser for"..., '\n', 481) = 0x025a3373
[0x4022d1] memchr("/* Recursive descent parser for "..., '\n', 480) = 0x025a33ab
[0x4022d1] memchr("\nstatic token tok;\t\t/* Lookahead"..., '\n', 424) = 0x025a33ac
[0x4022d1] memchr("static token tok;\t\t/* Lookahead "..., '\n', 423) = 0x025a33d6
[0x4022d1] memchr("static depth;\t\t\t/* Current depth"..., '\n', 381) = 0x025a340f
[0x4022d1] memchr("\t\t\t\t   holding deferred producti"..., '\n', 324) = 0x025a343d
[0x4022d1] memchr("\t\t\t\t   used to determine the dep"..., '\n', 278) = 0x025a346d
[0x4022d1] memchr("\t\t\t\t   required of the real stac"..., '\n', 230) = 0x025a349b
[0x4022d1] memchr("\t\t\t\t   dfaanalyze(). */\n\n/* Add "..., '\n', 184) = 0x025a34b3
[0x4022d1] memchr("\n/* Add the given token to the p"..., '\n', 160) = 0x025a34b4
[0x4022d1] memchr("/* Add the given token to the pa"..., '\n', 159) = 0x025a34fe
[0x4022d1] memchr("   updating the maximum depth if"..., '\n', 85) = 0x025a352d
[0x4022d1] memchr("static void\naddtok(t)\n     token"..., '\n', 38) = 0x025a3539
[0x4022d1] memchr("addtok(t)\n     token t;\n{\n  REAL"..., '\n', 26) = 0x025a3543
[0x4022d1] memchr("     token t;\n{\n  REALLOC_IF_NEC"..., '\n', 16) = 0x025a3551
[0x4022d1] memchr("{\n  REALLOC_IF_NECESSARY(dfa->to"..., '\n', 2) = 0x025a3553
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(dfa->toke"..., '\n', 0) = NULL
[0x4023cc] fwrite("7305:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  REALLOC_IF_NECESSARY(dfa->toke"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  dfa->tokens[dfa->tindex++] = t"..., 'I', 10793) = 0x025a3800
[0x40cdf3] memchr("INE\n     ENDLINE\n     BEGWORD\n  "..., '\n', 10179) = 0x025a3803
[0x4022d1] memchr("  dfa->tokens[dfa->tindex++] = t"..., '\n', 605) = 0x025a35bb
[0x4022d1] memchr("\n  switch (t)\n    {\n    case QMA"..., '\n', 571) = 0x025a35bc
[0x4022d1] memchr("  switch (t)\n    {\n    case QMAR"..., '\n', 570) = 0x025a35c9
[0x4022d1] memchr("    {\n    case QMARK:\n    case S"..., '\n', 557) = 0x025a35cf
[0x4022d1] memchr("    case QMARK:\n    case STAR:\n "..., '\n', 551) = 0x025a35df
[0x4022d1] memchr("    case STAR:\n    case PLUS:\n  "..., '\n', 535) = 0x025a35ee
[0x4022d1] memchr("    case PLUS:\n      break;\n\n   "..., '\n', 520) = 0x025a35fd
[0x4022d1] memchr("      break;\n\n    case CAT:\n    "..., '\n', 505) = 0x025a360a
[0x4022d1] memchr("\n    case CAT:\n    case OR:\n    "..., '\n', 492) = 0x025a360b
[0x4022d1] memchr("    case CAT:\n    case OR:\n    c"..., '\n', 491) = 0x025a3619
[0x4022d1] memchr("    case OR:\n    case ORTOP:\n   "..., '\n', 477) = 0x025a3626
[0x4022d1] memchr("    case ORTOP:\n      --depth;\n "..., '\n', 464) = 0x025a3636
[0x4022d1] memchr("      --depth;\n      break;\n\n   "..., '\n', 448) = 0x025a3645
[0x4022d1] memchr("      break;\n\n    default:\n     "..., '\n', 433) = 0x025a3652
[0x4022d1] memchr("\n    default:\n      ++dfa->nleav"..., '\n', 420) = 0x025a3653
[0x4022d1] memchr("    default:\n      ++dfa->nleave"..., '\n', 419) = 0x025a3660
[0x4022d1] memchr("      ++dfa->nleaves;\n    case E"..., '\n', 406) = 0x025a3676
[0x4022d1] memchr("    case EMPTY:\n      ++depth;\n "..., '\n', 384) = 0x025a3686
[0x4022d1] memchr("      ++depth;\n      break;\n    "..., '\n', 368) = 0x025a3695
[0x4022d1] memchr("      break;\n    }\n  if (depth >"..., '\n', 353) = 0x025a36a2
[0x4022d1] memchr("    }\n  if (depth > dfa->depth)\n"..., '\n', 340) = 0x025a36a8
[0x4022d1] memchr("  if (depth > dfa->depth)\n    df"..., '\n', 334) = 0x025a36c2
[0x4022d1] memchr("    dfa->depth = depth;\n}\n\n/* Th"..., '\n', 308) = 0x025a36da
[0x4022d1] memchr("}\n\n/* The grammar understood by "..., '\n', 284) = 0x025a36dc
[0x4022d1] memchr("\n/* The grammar understood by th"..., '\n', 282) = 0x025a36dd
[0x4022d1] memchr("/* The grammar understood by the"..., '\n', 281) = 0x025a3714
[0x4022d1] memchr("\n   regexp:\n     regexp OR branc"..., '\n', 226) = 0x025a3715
[0x4022d1] memchr("   regexp:\n     regexp OR branch"..., '\n', 225) = 0x025a3720
[0x4022d1] memchr("     regexp OR branch\n     branc"..., '\n', 214) = 0x025a3736
[0x4022d1] memchr("     branch\n\n   branch:\n     bra"..., '\n', 192) = 0x025a3742
[0x4022d1] memchr("\n   branch:\n     branch closure\n"..., '\n', 180) = 0x025a3743
[0x4022d1] memchr("   branch:\n     branch closure\n "..., '\n', 179) = 0x025a374e
[0x4022d1] memchr("     branch closure\n     closure"..., '\n', 168) = 0x025a3762
[0x4022d1] memchr("     closure\n\n   closure:\n     c"..., '\n', 148) = 0x025a376f
[0x4022d1] memchr("\n   closure:\n     closure QMARK\n"..., '\n', 135) = 0x025a3770
[0x4022d1] memchr("   closure:\n     closure QMARK\n "..., '\n', 134) = 0x025a377c
[0x4022d1] memchr("     closure QMARK\n     closure "..., '\n', 122) = 0x025a378f
[0x4022d1] memchr("     closure STAR\n     closure P"..., '\n', 103) = 0x025a37a1
[0x4022d1] memchr("     closure PLUS\n     atom\n\n   "..., '\n', 85) = 0x025a37b3
[0x4022d1] memchr("     atom\n\n   atom:\n     <normal"..., '\n', 67) = 0x025a37bd
[0x4022d1] memchr("\n   atom:\n     <normal character"..., '\n', 57) = 0x025a37be
[0x4022d1] memchr("   atom:\n     <normal character>"..., '\n', 56) = 0x025a37c7
[0x4022d1] memchr("     <normal character>\n     CSE"..., '\n', 47) = 0x025a37df
[0x4022d1] memchr("     CSET\n     BACKREF\n     BEGL"..., '\n', 23) = 0x025a37e9
[0x4022d1] memchr("     BACKREF\n     BEGLINE\n     E"..., '\n', 13) = 0x025a37f6
[0x4022d1] memchr("     BEGLINE\n     ENDLINE\n     B"..., '\n', 0) = NULL
[0x4023cc] fwrite("7351:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     BEGLINE\n     ENDLINE\n     B"..., 1, 13, 0x7f498147f260) = 13
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     ENDLINE\n     BEGWORD\n     E"..., 'I', 10175) = 0x025a380d
[0x40cdf3] memchr("INE\n     BEGWORD\n     ENDWORD\n  "..., '\n', 10166) = 0x025a3810
[0x4022d1] memchr("     ENDLINE\n     BEGWORD\n     E"..., '\n', 0) = NULL
[0x4023cc] fwrite("7352:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     ENDLINE\n     BEGWORD\n     E"..., 1, 13, 0x7f498147f260) = 13
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     BEGWORD\n     ENDWORD\n     L"..., 'I', 10162) = 0x025a3831
[0x40cdf3] memchr("IMWORD\n     NOTLIMWORD\n     <emp"..., '\n', 10130) = 0x025a3837
[0x4022d1] memchr("     BEGWORD\n     ENDWORD\n     L"..., '\n', 26) = 0x025a381d
[0x4022d1] memchr("     ENDWORD\n     LIMWORD\n     N"..., '\n', 13) = 0x025a382a
[0x4022d1] memchr("     LIMWORD\n     NOTLIMWORD\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("7355:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     LIMWORD\n     NOTLIMWORD\n   "..., 1, 13, 0x7f498147f260) = 13
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     NOTLIMWORD\n     <empty>\n\n  "..., 'I', 10123) = 0x025a3841
[0x40cdf3] memchr("IMWORD\n     <empty>\n\n   The pars"..., '\n', 10114) = 0x025a3847
[0x4022d1] memchr("     NOTLIMWORD\n     <empty>\n\n  "..., '\n', 0) = NULL
[0x4023cc] fwrite("7356:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("     NOTLIMWORD\n     <empty>\n\n  "..., 1, 16, 0x7f498147f260) = 16
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     <empty>\n\n   The parser buil"..., 'I', 10107) = 0x025a3959
[0x40cdf3] memchr("INE || tok == ENDLINE || tok == "..., '\n', 9834) = 0x025a3980
[0x4022d1] memchr("     <empty>\n\n   The parser buil"..., '\n', 253) = 0x025a3854
[0x4022d1] memchr("\n   The parser builds a parse tr"..., '\n', 240) = 0x025a3855
[0x4022d1] memchr("   The parser builds a parse tre"..., '\n', 239) = 0x025a38a1
[0x4022d1] memchr("\n#if __STDC__\nstatic void regexp"..., '\n', 163) = 0x025a38a2
[0x4022d1] memchr("#if __STDC__\nstatic void regexp("..., '\n', 162) = 0x025a38af
[0x4022d1] memchr("static void regexp(int);\n#else\ns"..., '\n', 149) = 0x025a38c8
[0x4022d1] memchr("#else\nstatic void regexp();\n#end"..., '\n', 124) = 0x025a38ce
[0x4022d1] memchr("static void regexp();\n#endif\n\nst"..., '\n', 118) = 0x025a38e4
[0x4022d1] memchr("#endif\n\nstatic void\natom()\n{\n  i"..., '\n', 96) = 0x025a38eb
[0x4022d1] memchr("\nstatic void\natom()\n{\n  if ((tok"..., '\n', 89) = 0x025a38ec
[0x4022d1] memchr("static void\natom()\n{\n  if ((tok "..., '\n', 88) = 0x025a38f8
[0x4022d1] memchr("atom()\n{\n  if ((tok >= 0 && tok "..., '\n', 76) = 0x025a38ff
[0x4022d1] memchr("{\n  if ((tok >= 0 && tok < NOTCH"..., '\n', 69) = 0x025a3901
[0x4022d1] memchr("  if ((tok >= 0 && tok < NOTCHAR"..., '\n', 67) = 0x025a3944
[0x4022d1] memchr("      || tok == BEGLINE || tok ="..., '\n', 0) = NULL
[0x4023cc] fwrite("7371:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      || tok == BEGLINE || tok ="..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      || tok == ENDWORD || tok ="..., 'I', 9794) = 0x025a39a4
[0x40cdf3] memchr("IMWORD || tok == NOTLIMWORD)\n   "..., '\n', 9759) = 0x025a39c0
[0x4022d1] memchr("      || tok == ENDWORD || tok ="..., '\n', 0) = NULL
[0x4023cc] fwrite("7372:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      || tok == ENDWORD || tok ="..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      addtok(tok);\n      t"..., 'I', 9730) = 0x025a4445
[0x40cdf3] memchr("Insert a position in a set.  Pos"..., '\n', 7038) = 0x025a4488
[0x4022d1] memchr("    {\n      addtok(tok);\n      t"..., '\n', 2689) = 0x025a39c6
[0x4022d1] memchr("      addtok(tok);\n      tok = l"..., '\n', 2683) = 0x025a39d9
[0x4022d1] memchr("      tok = lex();\n    }\n  else "..., '\n', 2664) = 0x025a39ec
[0x4022d1] memchr("    }\n  else if (tok == LPAREN)\n"..., '\n', 2645) = 0x025a39f2
[0x4022d1] memchr("  else if (tok == LPAREN)\n    {\n"..., '\n', 2639) = 0x025a3a0c
[0x4022d1] memchr("    {\n      tok = lex();\n      r"..., '\n', 2613) = 0x025a3a12
[0x4022d1] memchr("      tok = lex();\n      regexp("..., '\n', 2607) = 0x025a3a25
[0x4022d1] memchr("      regexp(0);\n      if (tok !"..., '\n', 2588) = 0x025a3a36
[0x4022d1] memchr("      if (tok != RPAREN)\n\tdfaerr"..., '\n', 2571) = 0x025a3a4f
[0x4022d1] memchr("\tdfaerror("Unbalanced (");\n     "..., '\n', 2546) = 0x025a3a6a
[0x4022d1] memchr("      tok = lex();\n    }\n  else\n"..., '\n', 2519) = 0x025a3a7d
[0x4022d1] memchr("    }\n  else\n    addtok(EMPTY);\n"..., '\n', 2500) = 0x025a3a83
[0x4022d1] memchr("  else\n    addtok(EMPTY);\n}\n\n/* "..., '\n', 2494) = 0x025a3a8a
[0x4022d1] memchr("    addtok(EMPTY);\n}\n\n/* Return "..., '\n', 2487) = 0x025a3a9d
[0x4022d1] memchr("}\n\n/* Return the number of token"..., '\n', 2468) = 0x025a3a9f
[0x4022d1] memchr("\n/* Return the number of tokens "..., '\n', 2466) = 0x025a3aa0
[0x4022d1] memchr("/* Return the number of tokens i"..., '\n', 2465) = 0x025a3ade
[0x4022d1] memchr("static int\nnsubtoks(tindex)\n{\n  "..., '\n', 2403) = 0x025a3ae9
[0x4022d1] memchr("nsubtoks(tindex)\n{\n  int ntoks1;"..., '\n', 2392) = 0x025a3afa
[0x4022d1] memchr("{\n  int ntoks1;\n\n  switch (dfa->"..., '\n', 2375) = 0x025a3afc
[0x4022d1] memchr("  int ntoks1;\n\n  switch (dfa->to"..., '\n', 2373) = 0x025a3b0a
[0x4022d1] memchr("\n  switch (dfa->tokens[tindex - "..., '\n', 2359) = 0x025a3b0b
[0x4022d1] memchr("  switch (dfa->tokens[tindex - 1"..., '\n', 2358) = 0x025a3b2e
[0x4022d1] memchr("    {\n    default:\n      return "..., '\n', 2323) = 0x025a3b34
[0x4022d1] memchr("    default:\n      return 1;\n   "..., '\n', 2317) = 0x025a3b41
[0x4022d1] memchr("      return 1;\n    case QMARK:\n"..., '\n', 2304) = 0x025a3b51
[0x4022d1] memchr("    case QMARK:\n    case STAR:\n "..., '\n', 2288) = 0x025a3b61
[0x4022d1] memchr("    case STAR:\n    case PLUS:\n  "..., '\n', 2272) = 0x025a3b70
[0x4022d1] memchr("    case PLUS:\n      return 1 + "..., '\n', 2257) = 0x025a3b7f
[0x4022d1] memchr("      return 1 + nsubtoks(tindex"..., '\n', 2242) = 0x025a3ba6
[0x4022d1] memchr("    case CAT:\n    case OR:\n    c"..., '\n', 2203) = 0x025a3bb4
[0x4022d1] memchr("    case OR:\n    case ORTOP:\n   "..., '\n', 2189) = 0x025a3bc1
[0x4022d1] memchr("    case ORTOP:\n      ntoks1 = n"..., '\n', 2176) = 0x025a3bd1
[0x4022d1] memchr("      ntoks1 = nsubtoks(tindex -"..., '\n', 2160) = 0x025a3bf6
[0x4022d1] memchr("      return 1 + ntoks1 + nsubto"..., '\n', 2123) = 0x025a3c2f
[0x4022d1] memchr("    }\n}\n\n/* Copy the given subex"..., '\n', 2066) = 0x025a3c35
[0x4022d1] memchr("}\n\n/* Copy the given subexpressi"..., '\n', 2060) = 0x025a3c37
[0x4022d1] memchr("\n/* Copy the given subexpression"..., '\n', 2058) = 0x025a3c38
[0x4022d1] memchr("/* Copy the given subexpression "..., '\n', 2057) = 0x025a3c73
[0x4022d1] memchr("static void\ncopytoks(tindex, nto"..., '\n', 1998) = 0x025a3c7f
[0x4022d1] memchr("copytoks(tindex, ntokens)\n     i"..., '\n', 1986) = 0x025a3c99
[0x4022d1] memchr("     int tindex, ntokens;\n{\n  in"..., '\n', 1960) = 0x025a3cb3
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < nt"..., '\n', 1934) = 0x025a3cb5
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < ntok"..., '\n', 1932) = 0x025a3cbe
[0x4022d1] memchr("\n  for (i = 0; i < ntokens; ++i)"..., '\n', 1923) = 0x025a3cbf
[0x4022d1] memchr("  for (i = 0; i < ntokens; ++i)\n"..., '\n', 1922) = 0x025a3cdf
[0x4022d1] memchr("    addtok(dfa->tokens[tindex + "..., '\n', 1890) = 0x025a3d04
[0x4022d1] memchr("}\n\nstatic void\nclosure()\n{\n  int"..., '\n', 1853) = 0x025a3d06
[0x4022d1] memchr("\nstatic void\nclosure()\n{\n  int t"..., '\n', 1851) = 0x025a3d07
[0x4022d1] memchr("static void\nclosure()\n{\n  int ti"..., '\n', 1850) = 0x025a3d13
[0x4022d1] memchr("closure()\n{\n  int tindex, ntoken"..., '\n', 1838) = 0x025a3d1d
[0x4022d1] memchr("{\n  int tindex, ntokens, i;\n\n  a"..., '\n', 1828) = 0x025a3d1f
[0x4022d1] memchr("  int tindex, ntokens, i;\n\n  ato"..., '\n', 1826) = 0x025a3d39
[0x4022d1] memchr("\n  atom();\n  while (tok == QMARK"..., '\n', 1800) = 0x025a3d3a
[0x4022d1] memchr("  atom();\n  while (tok == QMARK "..., '\n', 1799) = 0x025a3d44
[0x4022d1] memchr("  while (tok == QMARK || tok == "..., '\n', 1789) = 0x025a3d89
[0x4022d1] memchr("    if (tok == REPMN)\n      {\n\tn"..., '\n', 1720) = 0x025a3d9f
[0x4022d1] memchr("      {\n\tntokens = nsubtoks(dfa-"..., '\n', 1698) = 0x025a3da7
[0x4022d1] memchr("\tntokens = nsubtoks(dfa->tindex)"..., '\n', 1690) = 0x025a3dc9
[0x4022d1] memchr("\ttindex = dfa->tindex - ntokens;"..., '\n', 1656) = 0x025a3dea
[0x4022d1] memchr("\tif (maxrep == 0)\n\t  addtok(PLUS"..., '\n', 1623) = 0x025a3dfc
[0x4022d1] memchr("\t  addtok(PLUS);\n\tif (minrep == "..., '\n', 1605) = 0x025a3e0d
[0x4022d1] memchr("\tif (minrep == 0)\n\t  addtok(QMAR"..., '\n', 1588) = 0x025a3e1f
[0x4022d1] memchr("\t  addtok(QMARK);\n\tfor (i = 1; i"..., '\n', 1570) = 0x025a3e31
[0x4022d1] memchr("\tfor (i = 1; i < minrep; ++i)\n\t "..., '\n', 1552) = 0x025a3e4f
[0x4022d1] memchr("\t  {\n\t    copytoks(tindex, ntoke"..., '\n', 1522) = 0x025a3e54
[0x4022d1] memchr("\t    copytoks(tindex, ntokens);\n"..., '\n', 1517) = 0x025a3e74
[0x4022d1] memchr("\t    addtok(CAT);\n\t  }\n\tfor (; i"..., '\n', 1485) = 0x025a3e86
[0x4022d1] memchr("\t  }\n\tfor (; i < maxrep; ++i)\n\t "..., '\n', 1467) = 0x025a3e8b
[0x4022d1] memchr("\tfor (; i < maxrep; ++i)\n\t  {\n\t "..., '\n', 1462) = 0x025a3ea4
[0x4022d1] memchr("\t  {\n\t    copytoks(tindex, ntoke"..., '\n', 1437) = 0x025a3ea9
[0x4022d1] memchr("\t    copytoks(tindex, ntokens);\n"..., '\n', 1432) = 0x025a3ec9
[0x4022d1] memchr("\t    addtok(QMARK);\n\t    addtok("..., '\n', 1400) = 0x025a3edd
[0x4022d1] memchr("\t    addtok(CAT);\n\t  }\n\ttok = le"..., '\n', 1380) = 0x025a3eef
[0x4022d1] memchr("\t  }\n\ttok = lex();\n      }\n    e"..., '\n', 1362) = 0x025a3ef4
[0x4022d1] memchr("\ttok = lex();\n      }\n    else\n "..., '\n', 1357) = 0x025a3f02
[0x4022d1] memchr("      }\n    else\n      {\n\taddtok"..., '\n', 1343) = 0x025a3f0a
[0x4022d1] memchr("    else\n      {\n\taddtok(tok);\n\t"..., '\n', 1335) = 0x025a3f13
[0x4022d1] memchr("      {\n\taddtok(tok);\n\ttok = lex"..., '\n', 1326) = 0x025a3f1b
[0x4022d1] memchr("\taddtok(tok);\n\ttok = lex();\n    "..., '\n', 1318) = 0x025a3f29
[0x4022d1] memchr("\ttok = lex();\n      }\n}\n\nstatic "..., '\n', 1304) = 0x025a3f37
[0x4022d1] memchr("      }\n}\n\nstatic void\nbranch()\n"..., '\n', 1290) = 0x025a3f3f
[0x4022d1] memchr("}\n\nstatic void\nbranch()\n{\n  clos"..., '\n', 1282) = 0x025a3f41
[0x4022d1] memchr("\nstatic void\nbranch()\n{\n  closur"..., '\n', 1280) = 0x025a3f42
[0x4022d1] memchr("static void\nbranch()\n{\n  closure"..., '\n', 1279) = 0x025a3f4e
[0x4022d1] memchr("branch()\n{\n  closure();\n  while "..., '\n', 1267) = 0x025a3f57
[0x4022d1] memchr("{\n  closure();\n  while (tok != R"..., '\n', 1258) = 0x025a3f59
[0x4022d1] memchr("  closure();\n  while (tok != RPA"..., '\n', 1256) = 0x025a3f66
[0x4022d1] memchr("  while (tok != RPAREN && tok !="..., '\n', 1243) = 0x025a3f97
[0x4022d1] memchr("    {\n      closure();\n      add"..., '\n', 1194) = 0x025a3f9d
[0x4022d1] memchr("      closure();\n      addtok(CA"..., '\n', 1188) = 0x025a3fae
[0x4022d1] memchr("      addtok(CAT);\n    }\n}\n\nstat"..., '\n', 1171) = 0x025a3fc1
[0x4022d1] memchr("    }\n}\n\nstatic void\nregexp(topl"..., '\n', 1152) = 0x025a3fc7
[0x4022d1] memchr("}\n\nstatic void\nregexp(toplevel)\n"..., '\n', 1146) = 0x025a3fc9
[0x4022d1] memchr("\nstatic void\nregexp(toplevel)\n  "..., '\n', 1144) = 0x025a3fca
[0x4022d1] memchr("static void\nregexp(toplevel)\n   "..., '\n', 1143) = 0x025a3fd6
[0x4022d1] memchr("regexp(toplevel)\n     int toplev"..., '\n', 1131) = 0x025a3fe7
[0x4022d1] memchr("     int toplevel;\n{\n  branch();"..., '\n', 1114) = 0x025a3ffa
[0x4022d1] memchr("{\n  branch();\n  while (tok == OR"..., '\n', 1095) = 0x025a3ffc
[0x4022d1] memchr("  branch();\n  while (tok == OR)\n"..., '\n', 1093) = 0x025a4008
[0x4022d1] memchr("  while (tok == OR)\n    {\n      "..., '\n', 1081) = 0x025a401c
[0x4022d1] memchr("    {\n      tok = lex();\n      b"..., '\n', 1061) = 0x025a4022
[0x4022d1] memchr("      tok = lex();\n      branch("..., '\n', 1055) = 0x025a4035
[0x4022d1] memchr("      branch();\n      if (toplev"..., '\n', 1036) = 0x025a4045
[0x4022d1] memchr("      if (toplevel)\n\taddtok(ORTO"..., '\n', 1020) = 0x025a4059
[0x4022d1] memchr("\taddtok(ORTOP);\n      else\n\taddt"..., '\n', 1000) = 0x025a4069
[0x4022d1] memchr("      else\n\taddtok(OR);\n    }\n}\n"..., '\n', 984) = 0x025a4074
[0x4022d1] memchr("\taddtok(OR);\n    }\n}\n\n/* Main en"..., '\n', 973) = 0x025a4081
[0x4022d1] memchr("    }\n}\n\n/* Main entry point for"..., '\n', 960) = 0x025a4087
[0x4022d1] memchr("}\n\n/* Main entry point for the p"..., '\n', 954) = 0x025a4089
[0x4022d1] memchr("\n/* Main entry point for the par"..., '\n', 952) = 0x025a408a
[0x4022d1] memchr("/* Main entry point for the pars"..., '\n', 951) = 0x025a40d6
[0x4022d1] memchr("   length of the string, so s ca"..., '\n', 875) = 0x025a4123
[0x4022d1] memchr("   the struct dfa to parse into."..., '\n', 798) = 0x025a4147
[0x4022d1] memchr("void\ndfaparse(s, len, d)\n     ch"..., '\n', 762) = 0x025a414c
[0x4022d1] memchr("dfaparse(s, len, d)\n     char *s"..., '\n', 757) = 0x025a4160
[0x4022d1] memchr("     char *s;\n     size_t len;\n "..., '\n', 737) = 0x025a416e
[0x4022d1] memchr("     size_t len;\n     struct dfa"..., '\n', 723) = 0x025a417f
[0x4022d1] memchr("     struct dfa *d;\n\n{\n  dfa = d"..., '\n', 706) = 0x025a4193
[0x4022d1] memchr("\n{\n  dfa = d;\n  lexstart = lexpt"..., '\n', 686) = 0x025a4194
[0x4022d1] memchr("{\n  dfa = d;\n  lexstart = lexptr"..., '\n', 685) = 0x025a4196
[0x4022d1] memchr("  dfa = d;\n  lexstart = lexptr ="..., '\n', 683) = 0x025a41a1
[0x4022d1] memchr("  lexstart = lexptr = s;\n  lexle"..., '\n', 672) = 0x025a41ba
[0x4022d1] memchr("  lexleft = len;\n  lasttok = END"..., '\n', 647) = 0x025a41cb
[0x4022d1] memchr("  lasttok = END;\n  laststart = 1"..., '\n', 630) = 0x025a41dc
[0x4022d1] memchr("  laststart = 1;\n  parens = 0;\n\n"..., '\n', 613) = 0x025a41ed
[0x4022d1] memchr("  parens = 0;\n\n  if (! syntax_bi"..., '\n', 596) = 0x025a41fb
[0x4022d1] memchr("\n  if (! syntax_bits_set)\n    df"..., '\n', 582) = 0x025a41fc
[0x4022d1] memchr("  if (! syntax_bits_set)\n    dfa"..., '\n', 581) = 0x025a4215
[0x4022d1] memchr("    dfaerror("No syntax specifie"..., '\n', 556) = 0x025a423a
[0x4022d1] memchr("\n  tok = lex();\n  depth = d->dep"..., '\n', 519) = 0x025a423b
[0x4022d1] memchr("  tok = lex();\n  depth = d->dept"..., '\n', 518) = 0x025a424a
[0x4022d1] memchr("  depth = d->depth;\n\n  regexp(1)"..., '\n', 503) = 0x025a425e
[0x4022d1] memchr("\n  regexp(1);\n\n  if (tok != END)"..., '\n', 483) = 0x025a425f
[0x4022d1] memchr("  regexp(1);\n\n  if (tok != END)\n"..., '\n', 482) = 0x025a426c
[0x4022d1] memchr("\n  if (tok != END)\n    dfaerror("..., '\n', 469) = 0x025a426d
[0x4022d1] memchr("  if (tok != END)\n    dfaerror(""..., '\n', 468) = 0x025a427f
[0x4022d1] memchr("    dfaerror("Unbalanced )");\n\n "..., '\n', 450) = 0x025a429d
[0x4022d1] memchr("\n  addtok(END - d->nregexps);\n  "..., '\n', 420) = 0x025a429e
[0x4022d1] memchr("  addtok(END - d->nregexps);\n  a"..., '\n', 419) = 0x025a42bb
[0x4022d1] memchr("  addtok(CAT);\n\n  if (d->nregexp"..., '\n', 390) = 0x025a42ca
[0x4022d1] memchr("\n  if (d->nregexps)\n    addtok(O"..., '\n', 375) = 0x025a42cb
[0x4022d1] memchr("  if (d->nregexps)\n    addtok(OR"..., '\n', 374) = 0x025a42de
[0x4022d1] memchr("    addtok(ORTOP);\n\n  ++d->nrege"..., '\n', 355) = 0x025a42f1
[0x4022d1] memchr("\n  ++d->nregexps;\n}\n\n/* Some pri"..., '\n', 336) = 0x025a42f2
[0x4022d1] memchr("  ++d->nregexps;\n}\n\n/* Some prim"..., '\n', 335) = 0x025a4303
[0x4022d1] memchr("}\n\n/* Some primitives for operat"..., '\n', 318) = 0x025a4305
[0x4022d1] memchr("\n/* Some primitives for operatin"..., '\n', 316) = 0x025a4306
[0x4022d1] memchr("/* Some primitives for operating"..., '\n', 315) = 0x025a4340
[0x4022d1] memchr("\n/* Copy one set to another; the"..., '\n', 257) = 0x025a4341
[0x4022d1] memchr("/* Copy one set to another; the "..., '\n', 256) = 0x025a4386
[0x4022d1] memchr("static void\ncopy(src, dst)\n     "..., '\n', 187) = 0x025a4392
[0x4022d1] memchr("copy(src, dst)\n     position_set"..., '\n', 175) = 0x025a43a1
[0x4022d1] memchr("     position_set *src;\n     pos"..., '\n', 160) = 0x025a43b9
[0x4022d1] memchr("     position_set *dst;\n{\n  int "..., '\n', 136) = 0x025a43d1
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < sr"..., '\n', 112) = 0x025a43d3
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < src-"..., '\n', 110) = 0x025a43dc
[0x4022d1] memchr("\n  for (i = 0; i < src->nelem; +"..., '\n', 101) = 0x025a43dd
[0x4022d1] memchr("  for (i = 0; i < src->nelem; ++"..., '\n', 100) = 0x025a4400
[0x4022d1] memchr("    dst->elems[i] = src->elems[i"..., '\n', 65) = 0x025a4423
[0x4022d1] memchr("  dst->nelem = src->nelem;\n}\n\n/*"..., '\n', 30) = 0x025a443e
[0x4022d1] memchr("}\n\n/* Insert a position in a set"..., '\n', 3) = 0x025a4440
[0x4022d1] memchr("\n/* Insert a position in a set. "..., '\n', 1) = 0x025a4441
[0x4022d1] memchr("/* Insert a position in a set.  "..., '\n', 0) = NULL
[0x4023cc] fwrite("7536:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Insert a position in a set.  "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   order according to index.  If"..., 'I', 6970) = 0x025a44a7
[0x40cdf3] memchr("If position already exists in th"..., '\n', 6940) = 0x025a44d1
[0x4022d1] memchr("   order according to index.  If"..., '\n', 0) = NULL
[0x4023cc] fwrite("7537:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   order according to index.  If"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   the same index then their con"..., 'I', 6897) = 0x025a4f8c
[0x40cdf3] memchr("IF_NECESSARY(d->states, dfa_stat"..., '\n', 4151) = 0x025a4fc5
[0x4022d1] memchr("   the same index then their con"..., '\n', 2736) = 0x025a4517
[0x4022d1] memchr("   S->elems must point to an arr"..., '\n', 2666) = 0x025a4565
[0x4022d1] memchr("static void\ninsert(p, s)\n     po"..., '\n', 2588) = 0x025a4571
[0x4022d1] memchr("insert(p, s)\n     position p;\n  "..., '\n', 2576) = 0x025a457e
[0x4022d1] memchr("     position p;\n     position_s"..., '\n', 2563) = 0x025a458f
[0x4022d1] memchr("     position_set *s;\n{\n  int i;"..., '\n', 2546) = 0x025a45a5
[0x4022d1] memchr("{\n  int i;\n  position t1, t2;\n\n "..., '\n', 2524) = 0x025a45a7
[0x4022d1] memchr("  int i;\n  position t1, t2;\n\n  f"..., '\n', 2522) = 0x025a45b0
[0x4022d1] memchr("  position t1, t2;\n\n  for (i = 0"..., '\n', 2513) = 0x025a45c3
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem && p"..., '\n', 2494) = 0x025a45c4
[0x4022d1] memchr("  for (i = 0; i < s->nelem && p."..., '\n', 2493) = 0x025a4604
[0x4022d1] memchr("    ;\n  if (i < s->nelem && p.in"..., '\n', 2429) = 0x025a460a
[0x4022d1] memchr("  if (i < s->nelem && p.index =="..., '\n', 2423) = 0x025a463e
[0x4022d1] memchr("    s->elems[i].constraint |= p."..., '\n', 2371) = 0x025a466a
[0x4022d1] memchr("  else\n    {\n      t1 = p;\n     "..., '\n', 2327) = 0x025a4671
[0x4022d1] memchr("    {\n      t1 = p;\n      ++s->n"..., '\n', 2320) = 0x025a4677
[0x4022d1] memchr("      t1 = p;\n      ++s->nelem;\n"..., '\n', 2314) = 0x025a4685
[0x4022d1] memchr("      ++s->nelem;\n      while (i"..., '\n', 2300) = 0x025a4697
[0x4022d1] memchr("      while (i < s->nelem)\n\t{\n\t "..., '\n', 2282) = 0x025a46b2
[0x4022d1] memchr("\t{\n\t  t2 = s->elems[i];\n\t  s->el"..., '\n', 2255) = 0x025a46b5
[0x4022d1] memchr("\t  t2 = s->elems[i];\n\t  s->elems"..., '\n', 2252) = 0x025a46ca
[0x4022d1] memchr("\t  s->elems[i++] = t1;\n\t  t1 = t"..., '\n', 2231) = 0x025a46e1
[0x4022d1] memchr("\t  t1 = t2;\n\t}\n    }\n}\n\n/* Merge"..., '\n', 2208) = 0x025a46ed
[0x4022d1] memchr("\t}\n    }\n}\n\n/* Merge two sets of"..., '\n', 2196) = 0x025a46f0
[0x4022d1] memchr("    }\n}\n\n/* Merge two sets of po"..., '\n', 2193) = 0x025a46f6
[0x4022d1] memchr("}\n\n/* Merge two sets of position"..., '\n', 2187) = 0x025a46f8
[0x4022d1] memchr("\n/* Merge two sets of positions "..., '\n', 2185) = 0x025a46f9
[0x4022d1] memchr("/* Merge two sets of positions i"..., '\n', 2184) = 0x025a4743
[0x4022d1] memchr("   the positions of both sets we"..., '\n', 2110) = 0x025a478f
[0x4022d1] memchr("static void\nmerge(s1, s2, m)\n   "..., '\n', 2034) = 0x025a479b
[0x4022d1] memchr("merge(s1, s2, m)\n     position_s"..., '\n', 2022) = 0x025a47ac
[0x4022d1] memchr("     position_set *s1;\n     posi"..., '\n', 2005) = 0x025a47c3
[0x4022d1] memchr("     position_set *s2;\n     posi"..., '\n', 1982) = 0x025a47da
[0x4022d1] memchr("     position_set *m;\n{\n  int i "..., '\n', 1959) = 0x025a47f0
[0x4022d1] memchr("{\n  int i = 0, j = 0;\n\n  m->nele"..., '\n', 1937) = 0x025a47f2
[0x4022d1] memchr("  int i = 0, j = 0;\n\n  m->nelem "..., '\n', 1935) = 0x025a4806
[0x4022d1] memchr("\n  m->nelem = 0;\n  while (i < s1"..., '\n', 1915) = 0x025a4807
[0x4022d1] memchr("  m->nelem = 0;\n  while (i < s1-"..., '\n', 1914) = 0x025a4817
[0x4022d1] memchr("  while (i < s1->nelem && j < s2"..., '\n', 1898) = 0x025a4840
[0x4022d1] memchr("    if (s1->elems[i].index > s2-"..., '\n', 1857) = 0x025a4871
[0x4022d1] memchr("      m->elems[m->nelem++] = s1-"..., '\n', 1808) = 0x025a489e
[0x4022d1] memchr("    else if (s1->elems[i].index "..., '\n', 1763) = 0x025a48d4
[0x4022d1] memchr("      m->elems[m->nelem++] = s2-"..., '\n', 1709) = 0x025a4901
[0x4022d1] memchr("    else\n      {\n\tm->elems[m->ne"..., '\n', 1664) = 0x025a490a
[0x4022d1] memchr("      {\n\tm->elems[m->nelem] = s1"..., '\n', 1655) = 0x025a4912
[0x4022d1] memchr("\tm->elems[m->nelem] = s1->elems["..., '\n', 1647) = 0x025a4938
[0x4022d1] memchr("\tm->elems[m->nelem++].constraint"..., '\n', 1609) = 0x025a4977
[0x4022d1] memchr("      }\n  while (i < s1->nelem)\n"..., '\n', 1546) = 0x025a497f
[0x4022d1] memchr("  while (i < s1->nelem)\n    m->e"..., '\n', 1538) = 0x025a4997
[0x4022d1] memchr("    m->elems[m->nelem++] = s1->e"..., '\n', 1514) = 0x025a49c2
[0x4022d1] memchr("  while (j < s2->nelem)\n    m->e"..., '\n', 1471) = 0x025a49da
[0x4022d1] memchr("    m->elems[m->nelem++] = s2->e"..., '\n', 1447) = 0x025a4a05
[0x4022d1] memchr("}\n\n/* Delete a position from a s"..., '\n', 1404) = 0x025a4a07
[0x4022d1] memchr("\n/* Delete a position from a set"..., '\n', 1402) = 0x025a4a08
[0x4022d1] memchr("/* Delete a position from a set."..., '\n', 1401) = 0x025a4a2c
[0x4022d1] memchr("static void\ndelete(p, s)\n     po"..., '\n', 1365) = 0x025a4a38
[0x4022d1] memchr("delete(p, s)\n     position p;\n  "..., '\n', 1353) = 0x025a4a45
[0x4022d1] memchr("     position p;\n     position_s"..., '\n', 1340) = 0x025a4a56
[0x4022d1] memchr("     position_set *s;\n{\n  int i;"..., '\n', 1323) = 0x025a4a6c
[0x4022d1] memchr("{\n  int i;\n\n  for (i = 0; i < s-"..., '\n', 1301) = 0x025a4a6e
[0x4022d1] memchr("  int i;\n\n  for (i = 0; i < s->n"..., '\n', 1299) = 0x025a4a77
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 1290) = 0x025a4a78
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 1289) = 0x025a4a99
[0x4022d1] memchr("    if (p.index == s->elems[i].i"..., '\n', 1256) = 0x025a4abf
[0x4022d1] memchr("      break;\n  if (i < s->nelem)"..., '\n', 1218) = 0x025a4acc
[0x4022d1] memchr("  if (i < s->nelem)\n    for (--s"..., '\n', 1205) = 0x025a4ae0
[0x4022d1] memchr("    for (--s->nelem; i < s->nele"..., '\n', 1185) = 0x025a4b08
[0x4022d1] memchr("      s->elems[i] = s->elems[i +"..., '\n', 1145) = 0x025a4b2d
[0x4022d1] memchr("}\n\n/* Find the index of the stat"..., '\n', 1108) = 0x025a4b2f
[0x4022d1] memchr("\n/* Find the index of the state "..., '\n', 1106) = 0x025a4b30
[0x4022d1] memchr("/* Find the index of the state c"..., '\n', 1105) = 0x025a4b7c
[0x4022d1] memchr("   the given preceding context, "..., '\n', 1029) = 0x025a4bc6
[0x4022d1] memchr("   state.  Newline and letter te"..., '\n', 955) = 0x025a4c0d
[0x4022d1] memchr("   letter, respectively. */\nstat"..., '\n', 884) = 0x025a4c29
[0x4022d1] memchr("static int\nstate_index(d, s, new"..., '\n', 856) = 0x025a4c34
[0x4022d1] memchr("state_index(d, s, newline, lette"..., '\n', 845) = 0x025a4c57
[0x4022d1] memchr("     struct dfa *d;\n     positio"..., '\n', 810) = 0x025a4c6b
[0x4022d1] memchr("     position_set *s;\n     int n"..., '\n', 790) = 0x025a4c81
[0x4022d1] memchr("     int newline;\n     int lette"..., '\n', 768) = 0x025a4c93
[0x4022d1] memchr("     int letter;\n{\n  int hash = "..., '\n', 750) = 0x025a4ca4
[0x4022d1] memchr("{\n  int hash = 0;\n  int constrai"..., '\n', 733) = 0x025a4ca6
[0x4022d1] memchr("  int hash = 0;\n  int constraint"..., '\n', 731) = 0x025a4cb6
[0x4022d1] memchr("  int constraint;\n  int i, j;\n\n "..., '\n', 715) = 0x025a4cc8
[0x4022d1] memchr("  int i, j;\n\n  newline = newline"..., '\n', 697) = 0x025a4cd4
[0x4022d1] memchr("\n  newline = newline ? 1 : 0;\n  "..., '\n', 685) = 0x025a4cd5
[0x4022d1] memchr("  newline = newline ? 1 : 0;\n  l"..., '\n', 684) = 0x025a4cf2
[0x4022d1] memchr("  letter = letter ? 1 : 0;\n\n  fo"..., '\n', 655) = 0x025a4d0d
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 628) = 0x025a4d0e
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 627) = 0x025a4d2f
[0x4022d1] memchr("    hash ^= s->elems[i].index + "..., '\n', 594) = 0x025a4d67
[0x4022d1] memchr("\n  /* Try to find a state that e"..., '\n', 538) = 0x025a4d68
[0x4022d1] memchr("  /* Try to find a state that ex"..., '\n', 537) = 0x025a4dab
[0x4022d1] memchr("  for (i = 0; i < d->sindex; ++i"..., '\n', 470) = 0x025a4dcd
[0x4022d1] memchr("    {\n      if (hash != d->state"..., '\n', 436) = 0x025a4dd3
[0x4022d1] memchr("      if (hash != d->states[i].h"..., '\n', 430) = 0x025a4e1f
[0x4022d1] memchr("\t  || newline != d->states[i].ne"..., '\n', 354) = 0x025a4e67
[0x4022d1] memchr("\tcontinue;\n      for (j = 0; j <"..., '\n', 282) = 0x025a4e72
[0x4022d1] memchr("      for (j = 0; j < s->nelem; "..., '\n', 271) = 0x025a4e97
[0x4022d1] memchr("\tif (s->elems[j].constraint\n\t   "..., '\n', 234) = 0x025a4eb3
[0x4022d1] memchr("\t    != d->states[i].elems.elems"..., '\n', 206) = 0x025a4ee2
[0x4022d1] memchr("\t    || s->elems[j].index != d->"..., '\n', 159) = 0x025a4f22
[0x4022d1] memchr("\t  break;\n      if (j == s->nele"..., '\n', 95) = 0x025a4f2c
[0x4022d1] memchr("      if (j == s->nelem)\n\treturn"..., '\n', 85) = 0x025a4f45
[0x4022d1] memchr("\treturn i;\n    }\n\n  /* We'll hav"..., '\n', 60) = 0x025a4f50
[0x4022d1] memchr("    }\n\n  /* We'll have to create"..., '\n', 49) = 0x025a4f56
[0x4022d1] memchr("\n  /* We'll have to create a new"..., '\n', 43) = 0x025a4f57
[0x4022d1] memchr("  /* We'll have to create a new "..., '\n', 42) = 0x025a4f81
[0x4022d1] memchr("  REALLOC_IF_NECESSARY(d->states"..., '\n', 0) = NULL
[0x4023cc] fwrite("7645:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  REALLOC_IF_NECESSARY(d->states"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  d->states[i].hash = hash;\n  MA"..., 'I', 4093) = 0x025a515c
[0x40cdf3] memchr("IN_CONTEXT(constraint, newline, "..., '\n', 3687) = 0x025a5189
[0x4022d1] memchr("  d->states[i].hash = hash;\n  MA"..., '\n', 392) = 0x025a4fe1
[0x4022d1] memchr("  MALLOC(d->states[i].elems.elem"..., '\n', 364) = 0x025a5019
[0x4022d1] memchr("  copy(s, &d->states[i].elems);\n"..., '\n', 308) = 0x025a5039
[0x4022d1] memchr("  d->states[i].newline = newline"..., '\n', 276) = 0x025a505b
[0x4022d1] memchr("  d->states[i].letter = letter;\n"..., '\n', 242) = 0x025a507b
[0x4022d1] memchr("  d->states[i].backref = 0;\n  d-"..., '\n', 210) = 0x025a5097
[0x4022d1] memchr("  d->states[i].constraint = 0;\n "..., '\n', 182) = 0x025a50b6
[0x4022d1] memchr("  d->states[i].first_end = 0;\n  "..., '\n', 151) = 0x025a50d4
[0x4022d1] memchr("  for (j = 0; j < s->nelem; ++j)"..., '\n', 121) = 0x025a50f5
[0x4022d1] memchr("    if (d->tokens[s->elems[j].in"..., '\n', 88) = 0x025a511f
[0x4022d1] memchr("      {\n\tconstraint = s->elems[j"..., '\n', 46) = 0x025a5127
[0x4022d1] memchr("\tconstraint = s->elems[j].constr"..., '\n', 38) = 0x025a514d
[0x4022d1] memchr("\tif (SUCCEEDS_IN_CONTEXT(constra"..., '\n', 0) = NULL
[0x4023cc] fwrite("7658:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tif (SUCCEEDS_IN_CONTEXT(constra"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 'I', 3641) = 0x025a519b
[0x40cdf3] memchr("IN_CONTEXT(constraint, newline, "..., '\n', 3624) = 0x025a51c8
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7659:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 'I', 3578) = 0x025a51da
[0x40cdf3] memchr("IN_CONTEXT(constraint, newline, "..., '\n', 3561) = 0x025a5207
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7660:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 'I', 3515) = 0x025a5219
[0x40cdf3] memchr("IN_CONTEXT(constraint, newline, "..., '\n', 3498) = 0x025a5247
[0x4022d1] memchr("\t    || SUCCEEDS_IN_CONTEXT(cons"..., '\n', 0) = NULL
[0x4023cc] fwrite("7661:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    || SUCCEEDS_IN_CONTEXT(cons"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  d->states[i].constraint |= co"..., 'I', 3451) = 0x025a5336
[0x40cdf3] memchr("INT;\n\td->states[i].backref = 1;\n"..., '\n', 3213) = 0x025a533a
[0x4022d1] memchr("\t  d->states[i].constraint |= co"..., '\n', 201) = 0x025a5271
[0x4022d1] memchr("\tif (! d->states[i].first_end)\n\t"..., '\n', 159) = 0x025a5290
[0x4022d1] memchr("\t  d->states[i].first_end = d->t"..., '\n', 128) = 0x025a52ca
[0x4022d1] memchr("      }\n    else if (d->tokens[s"..., '\n', 70) = 0x025a52d2
[0x4022d1] memchr("    else if (d->tokens[s->elems["..., '\n', 62) = 0x025a5308
[0x4022d1] memchr("      {\n\td->states[i].constraint"..., '\n', 8) = 0x025a5310
[0x4022d1] memchr("\td->states[i].constraint = NO_CO"..., '\n', 0) = NULL
[0x4023cc] fwrite("7668:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\td->states[i].constraint = NO_CO"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\td->states[i].backref = 1;\n     "..., 'I', 3208) = 0x025a53b2
[0x40cdf3] memchr("If any position of the set\n   co"..., '\n', 3089) = 0x025a53cc
[0x4022d1] memchr("\td->states[i].backref = 1;\n     "..., '\n', 67) = 0x025a5355
[0x4022d1] memchr("      }\n\n  ++d->sindex;\n\n  retur"..., '\n', 40) = 0x025a535d
[0x4022d1] memchr("\n  ++d->sindex;\n\n  return i;\n}\n\n"..., '\n', 32) = 0x025a535e
[0x4022d1] memchr("  ++d->sindex;\n\n  return i;\n}\n\n/"..., '\n', 31) = 0x025a536d
[0x4022d1] memchr("\n  return i;\n}\n\n/* Find the epsi"..., '\n', 16) = 0x025a536e
[0x4022d1] memchr("  return i;\n}\n\n/* Find the epsil"..., '\n', 15) = 0x025a537a
[0x4022d1] memchr("}\n\n/* Find the epsilon closure o"..., '\n', 3) = 0x025a537c
[0x4022d1] memchr("\n/* Find the epsilon closure of "..., '\n', 1) = 0x025a537d
[0x4022d1] memchr("/* Find the epsilon closure of a"..., '\n', 0) = NULL
[0x4023cc] fwrite("7677:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Find the epsilon closure of a"..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   contains a symbol that matche"..., 'I', 3062) = 0x025a5731
[0x40cdf3] memchr("INE:\n\t    p.constraint &= BEGLIN"..., '\n', 2194) = 0x025a5735
[0x4022d1] memchr("   contains a symbol that matche"..., '\n', 856) = 0x025a5418
[0x4022d1] memchr("   that position with the elemen"..., '\n', 780) = 0x025a5465
[0x4022d1] memchr("   constraint.  Repeat exhaustiv"..., '\n', 703) = 0x025a54ac
[0x4022d1] memchr("   S->elems must be large enough"..., '\n', 632) = 0x025a54e4
[0x4022d1] memchr("void\nepsclosure(s, d)\n     posit"..., '\n', 576) = 0x025a54e9
[0x4022d1] memchr("epsclosure(s, d)\n     position_s"..., '\n', 571) = 0x025a54fa
[0x4022d1] memchr("     position_set *s;\n     struc"..., '\n', 554) = 0x025a5510
[0x4022d1] memchr("     struct dfa *d;\n{\n  int i, j"..., '\n', 532) = 0x025a5524
[0x4022d1] memchr("{\n  int i, j;\n  int *visited;\n  "..., '\n', 512) = 0x025a5526
[0x4022d1] memchr("  int i, j;\n  int *visited;\n  po"..., '\n', 510) = 0x025a5532
[0x4022d1] memchr("  int *visited;\n  position p, ol"..., '\n', 498) = 0x025a5542
[0x4022d1] memchr("  position p, old;\n\n  MALLOC(vis"..., '\n', 482) = 0x025a5555
[0x4022d1] memchr("\n  MALLOC(visited, int, d->tinde"..., '\n', 463) = 0x025a5556
[0x4022d1] memchr("  MALLOC(visited, int, d->tindex"..., '\n', 462) = 0x025a5579
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 427) = 0x025a559b
[0x4022d1] memchr("    visited[i] = 0;\n\n  for (i = "..., '\n', 393) = 0x025a55af
[0x4022d1] memchr("\n  for (i = 0; i < s->nelem; ++i"..., '\n', 373) = 0x025a55b0
[0x4022d1] memchr("  for (i = 0; i < s->nelem; ++i)"..., '\n', 372) = 0x025a55d1
[0x4022d1] memchr("    if (d->tokens[s->elems[i].in"..., '\n', 339) = 0x025a5601
[0x4022d1] memchr("\t&& d->tokens[s->elems[i].index]"..., '\n', 291) = 0x025a562d
[0x4022d1] memchr("\t&& d->tokens[s->elems[i].index]"..., '\n', 247) = 0x025a5656
[0x4022d1] memchr("      {\n\told = s->elems[i];\n\tp.c"..., '\n', 206) = 0x025a565e
[0x4022d1] memchr("\told = s->elems[i];\n\tp.constrain"..., '\n', 198) = 0x025a5672
[0x4022d1] memchr("\tp.constraint = old.constraint;\n"..., '\n', 178) = 0x025a5692
[0x4022d1] memchr("\tdelete(s->elems[i], s);\n\tif (vi"..., '\n', 146) = 0x025a56ab
[0x4022d1] memchr("\tif (visited[old.index])\n\t  {\n\t "..., '\n', 121) = 0x025a56c4
[0x4022d1] memchr("\t  {\n\t    --i;\n\t    continue;\n\t "..., '\n', 96) = 0x025a56c9
[0x4022d1] memchr("\t    --i;\n\t    continue;\n\t  }\n\tv"..., '\n', 91) = 0x025a56d3
[0x4022d1] memchr("\t    continue;\n\t  }\n\tvisited[old"..., '\n', 81) = 0x025a56e2
[0x4022d1] memchr("\t  }\n\tvisited[old.index] = 1;\n\ts"..., '\n', 66) = 0x025a56e7
[0x4022d1] memchr("\tvisited[old.index] = 1;\n\tswitch"..., '\n', 61) = 0x025a5700
[0x4022d1] memchr("\tswitch (d->tokens[old.index])\n\t"..., '\n', 36) = 0x025a571f
[0x4022d1] memchr("\t  {\n\t  case BEGLINE:\n\t    p.con"..., '\n', 5) = 0x025a5724
[0x4022d1] memchr("\t  case BEGLINE:\n\t    p.constrai"..., '\n', 0) = NULL
[0x4023cc] fwrite("7711:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  case BEGLINE:\n\t    p.constrai"..., 1, 17, 0x7f498147f260) = 17
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    p.constraint &= BEGLINE_CON"..., 'I', 2189) = 0x025a574f
[0x40cdf3] memchr("INE_CONSTRAINT;\n\t    break;\n\t  c"..., '\n', 2164) = 0x025a575e
[0x4022d1] memchr("\t    p.constraint &= BEGLINE_CON"..., '\n', 0) = NULL
[0x4023cc] fwrite("7712:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= BEGLINE_CON"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  case ENDLINE:\n\t  "..., 'I', 2148) = 0x025a5777
[0x40cdf3] memchr("INE:\n\t    p.constraint &= ENDLIN"..., '\n', 2124) = 0x025a577b
[0x4022d1] memchr("\t    break;\n\t  case ENDLINE:\n\t  "..., '\n', 12) = 0x025a576a
[0x4022d1] memchr("\t  case ENDLINE:\n\t    p.constrai"..., '\n', 0) = NULL
[0x4023cc] fwrite("7714:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  case ENDLINE:\n\t    p.constrai"..., 1, 17, 0x7f498147f260) = 17
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    p.constraint &= ENDLINE_CON"..., 'I', 2119) = 0x025a5795
[0x40cdf3] memchr("INE_CONSTRAINT;\n\t    break;\n\t  c"..., '\n', 2094) = 0x025a57a4
[0x4022d1] memchr("\t    p.constraint &= ENDLINE_CON"..., '\n', 0) = NULL
[0x4023cc] fwrite("7715:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= ENDLINE_CON"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  case BEGWORD:\n\t  "..., 'I', 2078) = 0x025a57e6
[0x40cdf3] memchr("INT;\n\t    break;\n\t  case ENDWORD"..., '\n', 2013) = 0x025a57ea
[0x4022d1] memchr("\t    break;\n\t  case BEGWORD:\n\t  "..., '\n', 29) = 0x025a57b0
[0x4022d1] memchr("\t  case BEGWORD:\n\t    p.constrai"..., '\n', 17) = 0x025a57c1
[0x4022d1] memchr("\t    p.constraint &= BEGWORD_CON"..., '\n', 0) = NULL
[0x4023cc] fwrite("7718:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= BEGWORD_CON"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  case ENDWORD:\n\t  "..., 'I', 2008) = 0x025a582c
[0x40cdf3] memchr("INT;\n\t    break;\n\t  case LIMWORD"..., '\n', 1943) = 0x025a5830
[0x4022d1] memchr("\t    break;\n\t  case ENDWORD:\n\t  "..., '\n', 29) = 0x025a57f6
[0x4022d1] memchr("\t  case ENDWORD:\n\t    p.constrai"..., '\n', 17) = 0x025a5807
[0x4022d1] memchr("\t    p.constraint &= ENDWORD_CON"..., '\n', 0) = NULL
[0x4023cc] fwrite("7721:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= ENDWORD_CON"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  case LIMWORD:\n\t  "..., 'I', 1938) = 0x025a5846
[0x40cdf3] memchr("IMWORD:\n\t    p.constraint &= LIM"..., '\n', 1917) = 0x025a584d
[0x4022d1] memchr("\t    break;\n\t  case LIMWORD:\n\t  "..., '\n', 12) = 0x025a583c
[0x4022d1] memchr("\t  case LIMWORD:\n\t    p.constrai"..., '\n', 0) = NULL
[0x4023cc] fwrite("7723:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  case LIMWORD:\n\t    p.constrai"..., 1, 17, 0x7f498147f260) = 17
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    p.constraint &= LIMWORD_CON"..., 'I', 1909) = 0x025a5864
[0x40cdf3] memchr("IMWORD_CONSTRAINT;\n\t    break;\n\t"..., '\n', 1887) = 0x025a5876
[0x4022d1] memchr("\t    p.constraint &= LIMWORD_CON"..., '\n', 0) = NULL
[0x4023cc] fwrite("7724:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= LIMWORD_CON"..., 1, 41, 0x7f498147f260) = 41
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  case NOTLIMWORD:\n"..., 'I', 1868) = 0x025a588f
[0x40cdf3] memchr("IMWORD:\n\t    p.constraint &= NOT"..., '\n', 1844) = 0x025a5896
[0x4022d1] memchr("\t    break;\n\t  case NOTLIMWORD:\n"..., '\n', 12) = 0x025a5882
[0x4022d1] memchr("\t  case NOTLIMWORD:\n\t    p.const"..., '\n', 0) = NULL
[0x4023cc] fwrite("7726:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  case NOTLIMWORD:\n\t    p.const"..., 1, 20, 0x7f498147f260) = 20
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    p.constraint &= NOTLIMWORD_"..., 'I', 1836) = 0x025a58b0
[0x40cdf3] memchr("IMWORD_CONSTRAINT;\n\t    break;\n\t"..., '\n', 1811) = 0x025a58c2
[0x4022d1] memchr("\t    p.constraint &= NOTLIMWORD_"..., '\n', 0) = NULL
[0x4023cc] fwrite("7727:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    p.constraint &= NOTLIMWORD_"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    break;\n\t  default:\n\t    bre"..., 'I', 1792) = NULL
[0x4022d1] memchr("\t    break;\n\t  default:\n\t    bre"..., '\n', 1792) = 0x025a58ce
[0x4022d1] memchr("\t  default:\n\t    break;\n\t  }\n\tfo"..., '\n', 1780) = 0x025a58da
[0x4022d1] memchr("\t    break;\n\t  }\n\tfor (j = 0; j "..., '\n', 1768) = 0x025a58e6
[0x4022d1] memchr("\t  }\n\tfor (j = 0; j < d->follows"..., '\n', 1756) = 0x025a58eb
[0x4022d1] memchr("\tfor (j = 0; j < d->follows[old."..., '\n', 1751) = 0x025a591e
[0x4022d1] memchr("\t  {\n\t    p.index = d->follows[o"..., '\n', 1700) = 0x025a5923
[0x4022d1] memchr("\t    p.index = d->follows[old.in"..., '\n', 1695) = 0x025a5958
[0x4022d1] memchr("\t    insert(p, s);\n\t  }\n\t/* Forc"..., '\n', 1642) = 0x025a596b
[0x4022d1] memchr("\t  }\n\t/* Force rescan to start a"..., '\n', 1623) = 0x025a5970
[0x4022d1] memchr("\t/* Force rescan to start at the"..., '\n', 1618) = 0x025a599f
[0x4022d1] memchr("\ti = -1;\n      }\n\n  free(visited"..., '\n', 1571) = 0x025a59a8
[0x4022d1] memchr("      }\n\n  free(visited);\n}\n\n/* "..., '\n', 1562) = 0x025a59b0
[0x4022d1] memchr("\n  free(visited);\n}\n\n/* Perform "..., '\n', 1554) = 0x025a59b1
[0x4022d1] memchr("  free(visited);\n}\n\n/* Perform b"..., '\n', 1553) = 0x025a59c2
[0x4022d1] memchr("}\n\n/* Perform bottom-up analysis"..., '\n', 1536) = 0x025a59c4
[0x4022d1] memchr("\n/* Perform bottom-up analysis o"..., '\n', 1534) = 0x025a59c5
[0x4022d1] memchr("/* Perform bottom-up analysis on"..., '\n', 1533) = 0x025a5a13
[0x4022d1] memchr("   Note that at this point, we'r"..., '\n', 1455) = 0x025a5a5c
[0x4022d1] memchr("   characters rather than constr"..., '\n', 1382) = 0x025a5a9b
[0x4022d1] memchr("\n   Nullable:  A node is nullabl"..., '\n', 1319) = 0x025a5a9c
[0x4022d1] memchr("   Nullable:  A node is nullable"..., '\n', 1318) = 0x025a5ae7
[0x4022d1] memchr("   match the empty string.\n   * "..., '\n', 1243) = 0x025a5b02
[0x4022d1] memchr("   *  EMPTY leaves are nullable."..., '\n', 1216) = 0x025a5b23
[0x4022d1] memchr("   * No other leaf is nullable.\n"..., '\n', 1183) = 0x025a5b43
[0x4022d1] memchr("   * A QMARK or STAR node is nul"..., '\n', 1151) = 0x025a5b6a
[0x4022d1] memchr("   * A PLUS node is nullable if "..., '\n', 1112) = 0x025a5ba4
[0x4022d1] memchr("   * A CAT node is nullable if b"..., '\n', 1054) = 0x025a5be4
[0x4022d1] memchr("   * An OR node is nullable if e"..., '\n', 990) = 0x025a5c20
[0x4022d1] memchr("\n   Firstpos:  The firstpos of a"..., '\n', 930) = 0x025a5c21
[0x4022d1] memchr("   Firstpos:  The firstpos of a "..., '\n', 929) = 0x025a5c70
[0x4022d1] memchr("   that could correspond to the "..., '\n', 850) = 0x025a5cb9
[0x4022d1] memchr("   regexp rooted at the given no"..., '\n', 777) = 0x025a5cdd
[0x4022d1] memchr("   * EMPTY leaves have empty fir"..., '\n', 741) = 0x025a5d04
[0x4022d1] memchr("   * The firstpos of a nonempty "..., '\n', 702) = 0x025a5d3e
[0x4022d1] memchr("   * The firstpos of a QMARK, ST"..., '\n', 644) = 0x025a5d86
[0x4022d1] memchr("     argument.\n   * The firstpos"..., '\n', 572) = 0x025a5d95
[0x4022d1] memchr("   * The firstpos of a CAT node "..., '\n', 557) = 0x025a5de1
[0x4022d1] memchr("     the firstpos of the right i"..., '\n', 481) = 0x025a5e22
[0x4022d1] memchr("   * The firstpos of an OR node "..., '\n', 416) = 0x025a5e6d
[0x4022d1] memchr("\n   Lastpos:  The lastpos of a n"..., '\n', 341) = 0x025a5e6e
[0x4022d1] memchr("   Lastpos:  The lastpos of a no"..., '\n', 340) = 0x025a5eb4
[0x4022d1] memchr("   correspond to the last charac"..., '\n', 270) = 0x025a5efb
[0x4022d1] memchr("   the given node.\n   * EMPTY le"..., '\n', 199) = 0x025a5f0e
[0x4022d1] memchr("   * EMPTY leaves have empty las"..., '\n', 180) = 0x025a5f34
[0x4022d1] memchr("   * The lastpos of a nonempty l"..., '\n', 142) = 0x025a5f6d
[0x4022d1] memchr("   * The lastpos of a QMARK, STA"..., '\n', 85) = 0x025a5fb3
[0x4022d1] memchr("     argument.\n   * The lastpos "..., '\n', 15) = 0x025a5fc2
[0x4022d1] memchr("   * The lastpos of a CAT node i"..., '\n', 0) = NULL
[0x4020b3] memmove(0x259dfc3, 0x25a5fc3, 61, 0x25a5fc3, 0x7f498147f260) = 0x259dfc3
[0x402213] read(3, "gument, union\n     the lastpos o"..., 32768) = 32768
[0x40bc2b] memchr("   * The lastpos of a CAT node i"..., 'I', 32814) = 0x0259ed29
[0x40cdf3] memchr("IF_NECESSARY(d->follows[pos[j].i"..., '\n', 29384) = 0x0259ed5f
[0x4022d1] memchr("   * The lastpos of a CAT node i"..., '\n', 3417) = 0x0259e00d
[0x4022d1] memchr("     the lastpos of the left if "..., '\n', 3342) = 0x0259e04d
[0x4022d1] memchr("   * The lastpos of an OR node i"..., '\n', 3278) = 0x0259e09a
[0x4022d1] memchr("\n   Follow:  The follow of a pos"..., '\n', 3201) = 0x0259e09b
[0x4022d1] memchr("   Follow:  The follow of a posi"..., '\n', 3200) = 0x0259e0e3
[0x4022d1] memchr("   correspond to the character f"..., '\n', 3128) = 0x0259e12d
[0x4022d1] memchr("   a string matching the regexp."..., '\n', 3054) = 0x0259e179
[0x4022d1] memchr("   that match the empty string i"..., '\n', 2978) = 0x0259e1c6
[0x4022d1] memchr("   Later, if we find that a spec"..., '\n', 2901) = 0x0259e20d
[0x4022d1] memchr("   replace it with the elements "..., '\n', 2830) = 0x0259e258
[0x4022d1] memchr("   constraint.\n   * Every node i"..., '\n', 2755) = 0x0259e267
[0x4022d1] memchr("   * Every node in the firstpos "..., '\n', 2740) = 0x0259e2b4
[0x4022d1] memchr("     the follow of every node in"..., '\n', 2663) = 0x0259e2e2
[0x4022d1] memchr("   * Every node in the firstpos "..., '\n', 2617) = 0x0259e32d
[0x4022d1] memchr("     the follow of every node in"..., '\n', 2542) = 0x0259e371
[0x4022d1] memchr("\n   Because of the postfix repre"..., '\n', 2474) = 0x0259e372
[0x4022d1] memchr("   Because of the postfix repres"..., '\n', 2473) = 0x0259e3be
[0x4022d1] memchr("   analysis is conveniently done"..., '\n', 2397) = 0x0259e409
[0x4022d1] memchr("   Sets are stored as arrays of "..., '\n', 2322) = 0x0259e457
[0x4022d1] memchr("   scheme; the number of element"..., '\n', 2244) = 0x0259e4a0
[0x4022d1] memchr("   used to determine the address"..., '\n', 2171) = 0x0259e4e1
[0x4022d1] memchr("void\ndfaanalyze(d, searchflag)\n "..., '\n', 2106) = 0x0259e4e6
[0x4022d1] memchr("dfaanalyze(d, searchflag)\n     s"..., '\n', 2101) = 0x0259e500
[0x4022d1] memchr("     struct dfa *d;\n     int sea"..., '\n', 2075) = 0x0259e514
[0x4022d1] memchr("     int searchflag;\n{\n  int *nu"..., '\n', 2055) = 0x0259e529
[0x4022d1] memchr("{\n  int *nullable;\t\t/* Nullable "..., '\n', 2034) = 0x0259e52b
[0x4022d1] memchr("  int *nullable;\t\t/* Nullable st"..., '\n', 2032) = 0x0259e553
[0x4022d1] memchr("  int *nfirstpos;\t\t/* Element co"..., '\n', 1992) = 0x0259e593
[0x4022d1] memchr("  position *firstpos;\t\t/* Array "..., '\n', 1928) = 0x0259e5da
[0x4022d1] memchr("  int *nlastpos;\t\t/* Element cou"..., '\n', 1857) = 0x0259e618
[0x4022d1] memchr("  position *lastpos;\t\t/* Array w"..., '\n', 1795) = 0x0259e65d
[0x4022d1] memchr("  int *nalloc;\t\t\t/* Sizes of arr"..., '\n', 1726) = 0x0259e69e
[0x4022d1] memchr("  position_set tmp;\t\t/* Temporar"..., '\n', 1661) = 0x0259e6d9
[0x4022d1] memchr("  position_set merged;\t\t/* Resul"..., '\n', 1602) = 0x0259e70f
[0x4022d1] memchr("  int wants_newline;\t\t/* True if"..., '\n', 1548) = 0x0259e755
[0x4022d1] memchr("  int *o_nullable;\n  int *o_nfir"..., '\n', 1478) = 0x0259e768
[0x4022d1] memchr("  int *o_nfirst, *o_nlast;\n  pos"..., '\n', 1459) = 0x0259e783
[0x4022d1] memchr("  position *o_firstpos, *o_lastp"..., '\n', 1432) = 0x0259e7a7
[0x4022d1] memchr("  int i, j;\n  position *pos;\n\n#i"..., '\n', 1396) = 0x0259e7b3
[0x4022d1] memchr("  position *pos;\n\n#ifdef DEBUG\n "..., '\n', 1384) = 0x0259e7c4
[0x4022d1] memchr("\n#ifdef DEBUG\n  fprintf(stderr, "..., '\n', 1367) = 0x0259e7c5
[0x4022d1] memchr("#ifdef DEBUG\n  fprintf(stderr, ""..., '\n', 1366) = 0x0259e7d2
[0x4022d1] memchr("  fprintf(stderr, "dfaanalyze:\\n"..., '\n', 1353) = 0x0259e7f6
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 1317) = 0x0259e818
[0x4022d1] memchr("    {\n      fprintf(stderr, " %d"..., '\n', 1283) = 0x0259e81e
[0x4022d1] memchr("      fprintf(stderr, " %d:", i)"..., '\n', 1277) = 0x0259e840
[0x4022d1] memchr("      prtok(d->tokens[i]);\n    }"..., '\n', 1243) = 0x0259e85b
[0x4022d1] memchr("    }\n  putc('\\n', stderr);\n#end"..., '\n', 1216) = 0x0259e861
[0x4022d1] memchr("  putc('\\n', stderr);\n#endif\n\n  "..., '\n', 1210) = 0x0259e877
[0x4022d1] memchr("#endif\n\n  d->searchflag = search"..., '\n', 1188) = 0x0259e87e
[0x4022d1] memchr("\n  d->searchflag = searchflag;\n\n"..., '\n', 1181) = 0x0259e87f
[0x4022d1] memchr("  d->searchflag = searchflag;\n\n "..., '\n', 1180) = 0x0259e89d
[0x4022d1] memchr("\n  MALLOC(nullable, int, d->dept"..., '\n', 1150) = 0x0259e89e
[0x4022d1] memchr("  MALLOC(nullable, int, d->depth"..., '\n', 1149) = 0x0259e8c1
[0x4022d1] memchr("  o_nullable = nullable;\n  MALLO"..., '\n', 1114) = 0x0259e8da
[0x4022d1] memchr("  MALLOC(nfirstpos, int, d->dept"..., '\n', 1089) = 0x0259e8fe
[0x4022d1] memchr("  o_nfirst = nfirstpos;\n  MALLOC"..., '\n', 1053) = 0x0259e916
[0x4022d1] memchr("  MALLOC(firstpos, position, d->"..., '\n', 1029) = 0x0259e940
[0x4022d1] memchr("  o_firstpos = firstpos, firstpo"..., '\n', 987) = 0x0259e971
[0x4022d1] memchr("  MALLOC(nlastpos, int, d->depth"..., '\n', 938) = 0x0259e994
[0x4022d1] memchr("  o_nlast = nlastpos;\n  MALLOC(l"..., '\n', 903) = 0x0259e9aa
[0x4022d1] memchr("  MALLOC(lastpos, position, d->n"..., '\n', 881) = 0x0259e9d3
[0x4022d1] memchr("  o_lastpos = lastpos, lastpos +"..., '\n', 840) = 0x0259ea01
[0x4022d1] memchr("  MALLOC(nalloc, int, d->tindex)"..., '\n', 794) = 0x0259ea23
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 760) = 0x0259ea45
[0x4022d1] memchr("    nalloc[i] = 0;\n  MALLOC(merg"..., '\n', 726) = 0x0259ea58
[0x4022d1] memchr("  MALLOC(merged.elems, position,"..., '\n', 707) = 0x0259ea86
[0x4022d1] memchr("\n  CALLOC(d->follows, position_s"..., '\n', 661) = 0x0259ea87
[0x4022d1] memchr("  CALLOC(d->follows, position_se"..., '\n', 660) = 0x0259eab6
[0x4022d1] memchr("\n  for (i = 0; i < d->tindex; ++"..., '\n', 613) = 0x0259eab7
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 612) = 0x0259ead9
[0x4022d1] memchr("#ifdef DEBUG\n    {\t\t\t\t/* Nonsynt"..., '\n', 578) = 0x0259eae6
[0x4022d1] memchr("    {\t\t\t\t/* Nonsyntactic #ifdef "..., '\n', 565) = 0x0259eb10
[0x4022d1] memchr("#endif\n    switch (d->tokens[i])"..., '\n', 523) = 0x0259eb17
[0x4022d1] memchr("    switch (d->tokens[i])\n      "..., '\n', 516) = 0x0259eb31
[0x4022d1] memchr("      {\n      case EMPTY:\n\t/* Th"..., '\n', 490) = 0x0259eb39
[0x4022d1] memchr("      case EMPTY:\n\t/* The empty "..., '\n', 482) = 0x0259eb4b
[0x4022d1] memchr("\t/* The empty set is nullable. *"..., '\n', 464) = 0x0259eb6d
[0x4022d1] memchr("\t*nullable++ = 1;\n\n\t/* The first"..., '\n', 430) = 0x0259eb7f
[0x4022d1] memchr("\n\t/* The firstpos and lastpos of"..., '\n', 412) = 0x0259eb80
[0x4022d1] memchr("\t/* The firstpos and lastpos of "..., '\n', 411) = 0x0259ebc2
[0x4022d1] memchr("\t*nfirstpos++ = *nlastpos++ = 0;"..., '\n', 345) = 0x0259ebe3
[0x4022d1] memchr("\tbreak;\n\n      case STAR:\n      "..., '\n', 312) = 0x0259ebeb
[0x4022d1] memchr("\n      case STAR:\n      case PLU"..., '\n', 304) = 0x0259ebec
[0x4022d1] memchr("      case STAR:\n      case PLUS"..., '\n', 303) = 0x0259ebfd
[0x4022d1] memchr("      case PLUS:\n\t/* Every eleme"..., '\n', 286) = 0x0259ec0e
[0x4022d1] memchr("\t/* Every element in the firstpo"..., '\n', 269) = 0x0259ec51
[0x4022d1] memchr("\t   of every element in the last"..., '\n', 202) = 0x0259ec79
[0x4022d1] memchr("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., '\n', 162) = 0x0259ec95
[0x4022d1] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '\n', 134) = 0x0259ecac
[0x4022d1] memchr("\tpos = lastpos;\n\tfor (j = 0; j <"..., '\n', 111) = 0x0259ecbc
[0x4022d1] memchr("\tfor (j = 0; j < nlastpos[-1]; +"..., '\n', 95) = 0x0259ece0
[0x4022d1] memchr("\t  {\n\t    merge(&tmp, &d->follow"..., '\n', 59) = 0x0259ece5
[0x4022d1] memchr("\t    merge(&tmp, &d->follows[pos"..., '\n', 54) = 0x0259ed1b
[0x4022d1] memchr("\t    REALLOC_IF_NECESSARY(d->fol"..., '\n', 0) = NULL
[0x4023cc] fwrite("7869:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    REALLOC_IF_NECESSARY(d->fol"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., 'I', 29329) = 0x0259ef9b
[0x40cdf3] memchr("IF_NECESSARY(d->follows[pos[j].i"..., '\n', 28758) = 0x0259efd1
[0x4022d1] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., '\n', 558) = 0x0259ed8d
[0x4022d1] memchr("\t    copy(&merged, &d->follows[p"..., '\n', 512) = 0x0259edbc
[0x4022d1] memchr("\t  }\n\n      case QMARK:\n\t/* A QM"..., '\n', 465) = 0x0259edc1
[0x4022d1] memchr("\n      case QMARK:\n\t/* A QMARK o"..., '\n', 460) = 0x0259edc2
[0x4022d1] memchr("      case QMARK:\n\t/* A QMARK or"..., '\n', 459) = 0x0259edd4
[0x4022d1] memchr("\t/* A QMARK or STAR node is auto"..., '\n', 441) = 0x0259ee0b
[0x4022d1] memchr("\tif (d->tokens[i] != PLUS)\n\t  nu"..., '\n', 386) = 0x0259ee26
[0x4022d1] memchr("\t  nullable[-1] = 1;\n\tbreak;\n\n  "..., '\n', 359) = 0x0259ee3b
[0x4022d1] memchr("\tbreak;\n\n      case CAT:\n\t/* Eve"..., '\n', 338) = 0x0259ee43
[0x4022d1] memchr("\n      case CAT:\n\t/* Every eleme"..., '\n', 330) = 0x0259ee44
[0x4022d1] memchr("      case CAT:\n\t/* Every elemen"..., '\n', 329) = 0x0259ee54
[0x4022d1] memchr("\t/* Every element in the firstpo"..., '\n', 313) = 0x0259ee97
[0x4022d1] memchr("\t   follow of every element in t"..., '\n', 246) = 0x0259eedc
[0x4022d1] memchr("\ttmp.nelem = nfirstpos[-1];\n\ttmp"..., '\n', 177) = 0x0259eef8
[0x4022d1] memchr("\ttmp.elems = firstpos;\n\tpos = la"..., '\n', 149) = 0x0259ef0f
[0x4022d1] memchr("\tpos = lastpos + nlastpos[-1];\n\t"..., '\n', 126) = 0x0259ef2e
[0x4022d1] memchr("\tfor (j = 0; j < nlastpos[-2]; +"..., '\n', 95) = 0x0259ef52
[0x4022d1] memchr("\t  {\n\t    merge(&tmp, &d->follow"..., '\n', 59) = 0x0259ef57
[0x4022d1] memchr("\t    merge(&tmp, &d->follows[pos"..., '\n', 54) = 0x0259ef8d
[0x4022d1] memchr("\t    REALLOC_IF_NECESSARY(d->fol"..., '\n', 0) = NULL
[0x4023cc] fwrite("7889:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    REALLOC_IF_NECESSARY(d->fol"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., 'I', 28703) = 0x0259f6f1
[0x40cdf3] memchr("INT;\n\n\t/* Allocate the follow se"..., '\n', 26880) = 0x0259f6f5
[0x4022d1] memchr("\t\t\t\t nalloc[pos[j].index], merge"..., '\n', 1767) = 0x0259efff
[0x4022d1] memchr("\t    copy(&merged, &d->follows[p"..., '\n', 1721) = 0x0259f02e
[0x4022d1] memchr("\t  }\n\n\t/* The firstpos of a CAT "..., '\n', 1674) = 0x0259f033
[0x4022d1] memchr("\n\t/* The firstpos of a CAT node "..., '\n', 1669) = 0x0259f034
[0x4022d1] memchr("\t/* The firstpos of a CAT node i"..., '\n', 1668) = 0x0259f07a
[0x4022d1] memchr("\t   union that of the second arg"..., '\n', 1598) = 0x0259f0bd
[0x4022d1] memchr("\tif (nullable[-2])\n\t  nfirstpos["..., '\n', 1531) = 0x0259f0d0
[0x4022d1] memchr("\t  nfirstpos[-2] += nfirstpos[-1"..., '\n', 1512) = 0x0259f0f3
[0x4022d1] memchr("\telse\n\t  firstpos += nfirstpos[-"..., '\n', 1477) = 0x0259f0f9
[0x4022d1] memchr("\t  firstpos += nfirstpos[-1];\n\t-"..., '\n', 1471) = 0x0259f117
[0x4022d1] memchr("\t--nfirstpos;\n\n\t/* The lastpos o"..., '\n', 1441) = 0x0259f125
[0x4022d1] memchr("\n\t/* The lastpos of a CAT node i"..., '\n', 1427) = 0x0259f126
[0x4022d1] memchr("\t/* The lastpos of a CAT node is"..., '\n', 1426) = 0x0259f16b
[0x4022d1] memchr("\t   union that of the first argu"..., '\n', 1357) = 0x0259f1ae
[0x4022d1] memchr("\tif (nullable[-1])\n\t  nlastpos[-"..., '\n', 1290) = 0x0259f1c1
[0x4022d1] memchr("\t  nlastpos[-2] += nlastpos[-1];"..., '\n', 1271) = 0x0259f1e2
[0x4022d1] memchr("\telse\n\t  {\n\t    pos = lastpos + "..., '\n', 1238) = 0x0259f1e8
[0x4022d1] memchr("\t  {\n\t    pos = lastpos + nlastp"..., '\n', 1232) = 0x0259f1ed
[0x4022d1] memchr("\t    pos = lastpos + nlastpos[-2"..., '\n', 1227) = 0x0259f210
[0x4022d1] memchr("\t    for (j = nlastpos[-1] - 1; "..., '\n', 1192) = 0x0259f23d
[0x4022d1] memchr("\t      pos[j] = lastpos[j];\n\t   "..., '\n', 1147) = 0x0259f259
[0x4022d1] memchr("\t    lastpos += nlastpos[-2];\n\t "..., '\n', 1119) = 0x0259f277
[0x4022d1] memchr("\t    nlastpos[-2] = nlastpos[-1]"..., '\n', 1089) = 0x0259f299
[0x4022d1] memchr("\t  }\n\t--nlastpos;\n\n\t/* A CAT nod"..., '\n', 1055) = 0x0259f29e
[0x4022d1] memchr("\t--nlastpos;\n\n\t/* A CAT node is "..., '\n', 1050) = 0x0259f2ab
[0x4022d1] memchr("\n\t/* A CAT node is nullable if b"..., '\n', 1037) = 0x0259f2ac
[0x4022d1] memchr("\t/* A CAT node is nullable if bo"..., '\n', 1036) = 0x0259f2ea
[0x4022d1] memchr("\tnullable[-2] = nullable[-1] && "..., '\n', 974) = 0x0259f318
[0x4022d1] memchr("\t--nullable;\n\tbreak;\n\n      case"..., '\n', 928) = 0x0259f325
[0x4022d1] memchr("\tbreak;\n\n      case OR:\n      ca"..., '\n', 915) = 0x0259f32d
[0x4022d1] memchr("\n      case OR:\n      case ORTOP"..., '\n', 907) = 0x0259f32e
[0x4022d1] memchr("      case OR:\n      case ORTOP:"..., '\n', 906) = 0x0259f33d
[0x4022d1] memchr("      case ORTOP:\n\t/* The firstp"..., '\n', 891) = 0x0259f34f
[0x4022d1] memchr("\t/* The firstpos is the union of"..., '\n', 873) = 0x0259f392
[0x4022d1] memchr("\tnfirstpos[-2] += nfirstpos[-1];"..., '\n', 806) = 0x0259f3b3
[0x4022d1] memchr("\t--nfirstpos;\n\n\t/* The lastpos i"..., '\n', 773) = 0x0259f3c1
[0x4022d1] memchr("\n\t/* The lastpos is the union of"..., '\n', 759) = 0x0259f3c2
[0x4022d1] memchr("\t/* The lastpos is the union of "..., '\n', 758) = 0x0259f403
[0x4022d1] memchr("\tnlastpos[-2] += nlastpos[-1];\n\t"..., '\n', 693) = 0x0259f422
[0x4022d1] memchr("\t--nlastpos;\n\n\t/* An OR node is "..., '\n', 662) = 0x0259f42f
[0x4022d1] memchr("\n\t/* An OR node is nullable if e"..., '\n', 649) = 0x0259f430
[0x4022d1] memchr("\t/* An OR node is nullable if ei"..., '\n', 648) = 0x0259f46e
[0x4022d1] memchr("\tnullable[-2] = nullable[-1] || "..., '\n', 586) = 0x0259f49c
[0x4022d1] memchr("\t--nullable;\n\tbreak;\n\n      defa"..., '\n', 540) = 0x0259f4a9
[0x4022d1] memchr("\tbreak;\n\n      default:\n\t/* Anyt"..., '\n', 527) = 0x0259f4b1
[0x4022d1] memchr("\n      default:\n\t/* Anything els"..., '\n', 519) = 0x0259f4b2
[0x4022d1] memchr("      default:\n\t/* Anything else"..., '\n', 518) = 0x0259f4c1
[0x4022d1] memchr("\t/* Anything else is a nonempty "..., '\n', 503) = 0x0259f4ff
[0x4022d1] memchr("\t   constructs like \\< are treat"..., '\n', 441) = 0x0259f53c
[0x4022d1] memchr("\t   an "epsilon closure" effecti"..., '\n', 380) = 0x0259f57c
[0x4022d1] memchr("\t   Backreferences have to get a"..., '\n', 316) = 0x0259f5bc
[0x4022d1] memchr("\t   transitions on them later.  "..., '\n', 252) = 0x0259f5f6
[0x4022d1] memchr("\t*nullable++ = d->tokens[i] == B"..., '\n', 194) = 0x0259f61e
[0x4022d1] memchr("\n\t/* This position is in its own"..., '\n', 154) = 0x0259f61f
[0x4022d1] memchr("\t/* This position is in its own "..., '\n', 153) = 0x0259f658
[0x4022d1] memchr("\t*nfirstpos++ = *nlastpos++ = 1;"..., '\n', 96) = 0x0259f679
[0x4022d1] memchr("\t--firstpos, --lastpos;\n\tfirstpo"..., '\n', 63) = 0x0259f691
[0x4022d1] memchr("\tfirstpos->index = lastpos->inde"..., '\n', 39) = 0x0259f6b8
[0x4022d1] memchr("\tfirstpos->constraint = lastpos-"..., '\n', 0) = NULL
[0x4023cc] fwrite("7948:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tfirstpos->constraint = lastpos-"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\t/* Allocate the follow set for"..., 'I', 26875) = 0x0259fe55
[0x40cdf3] memchr("INE_DEPENDENT(merged.elems[i].co"..., '\n', 24988) = 0x0259fe7f
[0x4022d1] memchr("\n\t/* Allocate the follow set for"..., '\n', 1870) = 0x0259f6f6
[0x4022d1] memchr("\t/* Allocate the follow set for "..., '\n', 1869) = 0x0259f728
[0x4022d1] memchr("\tnalloc[i] = 1;\n\tMALLOC(d->follo"..., '\n', 1819) = 0x0259f738
[0x4022d1] memchr("\tMALLOC(d->follows[i].elems, pos"..., '\n', 1803) = 0x0259f76b
[0x4022d1] memchr("\tbreak;\n      }\n#ifdef DEBUG\n   "..., '\n', 1752) = 0x0259f773
[0x4022d1] memchr("      }\n#ifdef DEBUG\n    /* ... "..., '\n', 1744) = 0x0259f77b
[0x4022d1] memchr("#ifdef DEBUG\n    /* ... balance "..., '\n', 1736) = 0x0259f788
[0x4022d1] memchr("    /* ... balance the above non"..., '\n', 1723) = 0x0259f7c3
[0x4022d1] memchr("      fprintf(stderr, "node %d:""..., '\n', 1664) = 0x0259f7e9
[0x4022d1] memchr("      prtok(d->tokens[i]);\n     "..., '\n', 1626) = 0x0259f804
[0x4022d1] memchr("      putc('\\n', stderr);\n      "..., '\n', 1599) = 0x0259f81e
[0x4022d1] memchr("      fprintf(stderr, nullable[-"..., '\n', 1573) = 0x0259f86c
[0x4022d1] memchr("      fprintf(stderr, " firstpos"..., '\n', 1495) = 0x0259f891
[0x4022d1] memchr("      for (j = nfirstpos[-1] - 1"..., '\n', 1458) = 0x0259f8c0
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, " %d:", fi"..., '\n', 1411) = 0x0259f8c3
[0x4022d1] memchr("\t  fprintf(stderr, " %d:", first"..., '\n', 1408) = 0x0259f8f2
[0x4022d1] memchr("\t  prtok(d->tokens[firstpos[j].i"..., '\n', 1361) = 0x0259f91a
[0x4022d1] memchr("\t}\n      fprintf(stderr, "\\n las"..., '\n', 1321) = 0x0259f91d
[0x4022d1] memchr("      fprintf(stderr, "\\n lastpo"..., '\n', 1318) = 0x0259f943
[0x4022d1] memchr("      for (j = nlastpos[-1] - 1;"..., '\n', 1280) = 0x0259f971
[0x4022d1] memchr("\t{\n\t  fprintf(stderr, " %d:", la"..., '\n', 1234) = 0x0259f974
[0x4022d1] memchr("\t  fprintf(stderr, " %d:", lastp"..., '\n', 1231) = 0x0259f9a2
[0x4022d1] memchr("\t  prtok(d->tokens[lastpos[j].in"..., '\n', 1185) = 0x0259f9c9
[0x4022d1] memchr("\t}\n      putc('\\n', stderr);\n   "..., '\n', 1146) = 0x0259f9cc
[0x4022d1] memchr("      putc('\\n', stderr);\n    }\n"..., '\n', 1143) = 0x0259f9e6
[0x4022d1] memchr("    }\n#endif\n\n  /* For each foll"..., '\n', 1117) = 0x0259f9ec
[0x4022d1] memchr("#endif\n\n  /* For each follow set"..., '\n', 1111) = 0x0259f9f3
[0x4022d1] memchr("\n  /* For each follow set that i"..., '\n', 1104) = 0x0259f9f4
[0x4022d1] memchr("  /* For each follow set that is"..., '\n', 1103) = 0x0259fa40
[0x4022d1] memchr("     it with its epsilon closure"..., '\n', 1027) = 0x0259fa65
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 990) = 0x0259fa87
[0x4022d1] memchr("    if (d->tokens[i] < NOTCHAR |"..., '\n', 956) = 0x0259fac1
[0x4022d1] memchr("\t|| d->tokens[i] >= CSET)\n      "..., '\n', 898) = 0x0259fadb
[0x4022d1] memchr("      {\n#ifdef DEBUG\n\tfprintf(st"..., '\n', 872) = 0x0259fae3
[0x4022d1] memchr("#ifdef DEBUG\n\tfprintf(stderr, "f"..., '\n', 864) = 0x0259faf0
[0x4022d1] memchr("\tfprintf(stderr, "follows(%d:", "..., '\n', 851) = 0x0259fb14
[0x4022d1] memchr("\tprtok(d->tokens[i]);\n\tfprintf(s"..., '\n', 815) = 0x0259fb2a
[0x4022d1] memchr("\tfprintf(stderr, "):");\n\tfor (j "..., '\n', 793) = 0x0259fb42
[0x4022d1] memchr("\tfor (j = d->follows[i].nelem - "..., '\n', 769) = 0x0259fb72
[0x4022d1] memchr("\t  {\n\t    fprintf(stderr, " %d:""..., '\n', 721) = 0x0259fb77
[0x4022d1] memchr("\t    fprintf(stderr, " %d:", d->"..., '\n', 716) = 0x0259fbb3
[0x4022d1] memchr("\t    prtok(d->tokens[d->follows["..., '\n', 656) = 0x0259fbe8
[0x4022d1] memchr("\t  }\n\tputc('\\n', stderr);\n#endif"..., '\n', 603) = 0x0259fbed
[0x4022d1] memchr("\tputc('\\n', stderr);\n#endif\n\tcop"..., '\n', 598) = 0x0259fc02
[0x4022d1] memchr("#endif\n\tcopy(&d->follows[i], &me"..., '\n', 577) = 0x0259fc09
[0x4022d1] memchr("\tcopy(&d->follows[i], &merged);\n"..., '\n', 570) = 0x0259fc29
[0x4022d1] memchr("\tepsclosure(&merged, d);\n\tif (d-"..., '\n', 538) = 0x0259fc42
[0x4022d1] memchr("\tif (d->follows[i].nelem < merge"..., '\n', 513) = 0x0259fc6b
[0x4022d1] memchr("\t  REALLOC(d->follows[i].elems, "..., '\n', 472) = 0x0259fca4
[0x4022d1] memchr("\tcopy(&merged, &d->follows[i]);\n"..., '\n', 415) = 0x0259fcc4
[0x4022d1] memchr("      }\n\n  /* Get the epsilon cl"..., '\n', 383) = 0x0259fccc
[0x4022d1] memchr("\n  /* Get the epsilon closure of"..., '\n', 375) = 0x0259fccd
[0x4022d1] memchr("  /* Get the epsilon closure of "..., '\n', 374) = 0x0259fd1a
[0x4022d1] memchr("     be the set of positions of "..., '\n', 297) = 0x0259fd46
[0x4022d1] memchr("  merged.nelem = 0;\n  for (i = 0"..., '\n', 253) = 0x0259fd5a
[0x4022d1] memchr("  for (i = 0; i < nfirstpos[-1];"..., '\n', 233) = 0x0259fd80
[0x4022d1] memchr("    insert(firstpos[i], &merged)"..., '\n', 195) = 0x0259fda2
[0x4022d1] memchr("  epsclosure(&merged, d);\n\n  /* "..., '\n', 161) = 0x0259fdbc
[0x4022d1] memchr("\n  /* Check if any of the positi"..., '\n', 135) = 0x0259fdbd
[0x4022d1] memchr("  /* Check if any of the positio"..., '\n', 134) = 0x0259fe09
[0x4022d1] memchr("  wants_newline = 0;\n  for (i = "..., '\n', 58) = 0x0259fe1e
[0x4022d1] memchr("  for (i = 0; i < merged.nelem; "..., '\n', 37) = 0x0259fe43
[0x4022d1] memchr("    if (PREV_NEWLINE_DEPENDENT(m"..., '\n', 0) = NULL
[0x4023cc] fwrite("8011:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("    if (PREV_NEWLINE_DEPENDENT(m"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      wants_newline = 1;\n\n  /* B"..., 'I', 24945) = 0x025a027e
[0x40cdf3] memchr("If we are building a searching m"..., '\n', 23923) = 0x025a02c7
[0x4022d1] memchr("      wants_newline = 1;\n\n  /* B"..., '\n', 1019) = 0x0259fe98
[0x4022d1] memchr("\n  /* Build the initial state. *"..., '\n', 994) = 0x0259fe99
[0x4022d1] memchr("  /* Build the initial state. */"..., '\n', 993) = 0x0259feba
[0x4022d1] memchr("  d->salloc = 1;\n  d->sindex = 0"..., '\n', 960) = 0x0259fecb
[0x4022d1] memchr("  d->sindex = 0;\n  MALLOC(d->sta"..., '\n', 943) = 0x0259fedc
[0x4022d1] memchr("  MALLOC(d->states, dfa_state, d"..., '\n', 926) = 0x0259ff07
[0x4022d1] memchr("  state_index(d, &merged, wants_"..., '\n', 883) = 0x0259ff34
[0x4022d1] memchr("\n  free(o_nullable);\n  free(o_nf"..., '\n', 838) = 0x0259ff35
[0x4022d1] memchr("  free(o_nullable);\n  free(o_nfi"..., '\n', 837) = 0x0259ff49
[0x4022d1] memchr("  free(o_nfirst);\n  free(o_first"..., '\n', 817) = 0x0259ff5b
[0x4022d1] memchr("  free(o_firstpos);\n  free(o_nla"..., '\n', 799) = 0x0259ff6f
[0x4022d1] memchr("  free(o_nlast);\n  free(o_lastpo"..., '\n', 779) = 0x0259ff80
[0x4022d1] memchr("  free(o_lastpos);\n  free(nalloc"..., '\n', 762) = 0x0259ff93
[0x4022d1] memchr("  free(nalloc);\n  free(merged.el"..., '\n', 743) = 0x0259ffa3
[0x4022d1] memchr("  free(merged.elems);\n}\n\n/* Find"..., '\n', 727) = 0x0259ffb9
[0x4022d1] memchr("}\n\n/* Find, for each character, "..., '\n', 705) = 0x0259ffbb
[0x4022d1] memchr("\n/* Find, for each character, th"..., '\n', 703) = 0x0259ffbc
[0x4022d1] memchr("/* Find, for each character, the"..., '\n', 702) = 0x025a0007
[0x4022d1] memchr("   it in the appropriate slot of"..., '\n', 627) = 0x025a002f
[0x4022d1] memchr("\n   We divide the positions of s"..., '\n', 587) = 0x025a0030
[0x4022d1] memchr("   We divide the positions of s "..., '\n', 586) = 0x025a007a
[0x4022d1] memchr("   than one group).  Each group "..., '\n', 512) = 0x025a00c3
[0x4022d1] memchr("   every position in the group m"..., '\n', 439) = 0x025a010e
[0x4022d1] memchr("   preceding context information"..., '\n', 364) = 0x025a0156
[0x4022d1] memchr("   of the its elements' follows."..., '\n', 292) = 0x025a01a0
[0x4022d1] memchr("   new state.  For each characte"..., '\n', 218) = 0x025a01eb
[0x4022d1] memchr("   on this character to be to a "..., '\n', 143) = 0x025a0237
[0x4022d1] memchr("   and its associated backward c"..., '\n', 67) = 0x025a0279
[0x4022d1] memchr("\n   If we are building a searchi"..., '\n', 1) = 0x025a027a
[0x4022d1] memchr("   If we are building a searchin"..., '\n', 0) = NULL
[0x4023cc] fwrite("8041:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If we are building a searchin"..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   0 in every state.\n\n   The col"..., 'I', 23849) = 0x025a0448
[0x40cdf3] memchr("If L - C is nonempty, create a n"..., '\n', 23465) = 0x025a0478
[0x4022d1] memchr("   0 in every state.\n\n   The col"..., '\n', 359) = 0x025a02dc
[0x4022d1] memchr("\n   The collection of groups is "..., '\n', 338) = 0x025a02dd
[0x4022d1] memchr("   The collection of groups is c"..., '\n', 337) = 0x025a0329
[0x4022d1] memchr("   partition of the positions of"..., '\n', 261) = 0x025a034d
[0x4022d1] memchr("\n   For each position, find the "..., '\n', 225) = 0x025a034e
[0x4022d1] memchr("   For each position, find the s"..., '\n', 224) = 0x025a039d
[0x4022d1] memchr("   any characters from C that fa"..., '\n', 145) = 0x025a03e0
[0x4022d1] memchr("\n   Search through the groups, l"..., '\n', 78) = 0x025a03e1
[0x4022d1] memchr("   Search through the groups, lo"..., '\n', 77) = 0x025a042e
[0x4022d1] memchr("   intersection with C.  If L - "..., '\n', 0) = NULL
[0x4023cc] fwrite("8051:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   intersection with C.  If L - "..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   L - C and having the same pos"..., 'I', 23416) = 0x025a04e4
[0x40cdf3] memchr("Insert the position in this grou"..., '\n', 23309) = 0x025a050a
[0x4022d1] memchr("   L - C and having the same pos"..., '\n', 74) = 0x025a04c2
[0x4022d1] memchr("   the intersection of L and C. "..., '\n', 0) = NULL
[0x4023cc] fwrite("8053:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   the intersection of L and C. "..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   C = C - L, and resume scannin"..., 'I', 23270) = 0x025a0532
[0x40cdf3] memchr("If after comparing with every gr"..., '\n', 23231) = 0x025a057a
[0x4022d1] memchr("   C = C - L, and resume scannin"..., '\n', 36) = 0x025a052d
[0x4022d1] memchr("\n   If after comparing with ever"..., '\n', 1) = 0x025a052e
[0x4022d1] memchr("   If after comparing with every"..., '\n', 0) = NULL
[0x4023cc] fwrite("8056:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If after comparing with every"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   create a new group labeled wi"..., 'I', 23158) = 0x025a07b5
[0x40cdf3] memchr("Intersection with some label set"..., '\n', 22588) = 0x025a07d9
[0x4022d1] memchr("   create a new group labeled wi"..., '\n', 543) = 0x025a05c1
[0x4022d1] memchr("   position in that group. */\nvo"..., '\n', 472) = 0x025a05df
[0x4022d1] memchr("void\ndfastate(s, d, trans)\n     "..., '\n', 442) = 0x025a05e4
[0x4022d1] memchr("dfastate(s, d, trans)\n     int s"..., '\n', 437) = 0x025a05fa
[0x4022d1] memchr("     int s;\n     struct dfa *d;\n"..., '\n', 415) = 0x025a0606
[0x4022d1] memchr("     struct dfa *d;\n     int tra"..., '\n', 403) = 0x025a061a
[0x4022d1] memchr("     int trans[];\n{\n  position_s"..., '\n', 383) = 0x025a062c
[0x4022d1] memchr("{\n  position_set grps[NOTCHAR];\t"..., '\n', 365) = 0x025a062e
[0x4022d1] memchr("  position_set grps[NOTCHAR];\t/*"..., '\n', 363) = 0x025a0672
[0x4022d1] memchr("  charclass labels[NOTCHAR];\t/* "..., '\n', 295) = 0x025a06b9
[0x4022d1] memchr("  int ngrps = 0;\t\t/* Number of g"..., '\n', 224) = 0x025a06f1
[0x4022d1] memchr("  position pos;\t\t\t/* Current pos"..., '\n', 168) = 0x025a072c
[0x4022d1] memchr("  charclass matches;\t\t/* Set of "..., '\n', 109) = 0x025a0764
[0x4022d1] memchr("  int matchesf;\t\t\t/* True if mat"..., '\n', 53) = 0x025a0799
[0x4022d1] memchr("  charclass intersect;\t\t/* Inter"..., '\n', 0) = NULL
[0x4023cc] fwrite("8071:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  charclass intersect;\t\t/* Inter"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  int intersectf;\t\t/* True if in"..., 'I', 22551) = 0x025a0b15
[0x40cdf3] memchr("Initialize the set of letters, i"..., '\n', 21724) = 0x025a0b44
[0x4022d1] memchr("  int intersectf;\t\t/* True if in"..., '\n', 822) = 0x025a0811
[0x4022d1] memchr("  charclass leftovers;\t\t/* Stuff"..., '\n', 766) = 0x025a0855
[0x4022d1] memchr("  int leftoversf;\t\t/* True if le"..., '\n', 698) = 0x025a088d
[0x4022d1] memchr("  static charclass letters;\t/* S"..., '\n', 642) = 0x025a08d5
[0x4022d1] memchr("  static charclass newline;\t/* S"..., '\n', 570) = 0x025a091e
[0x4022d1] memchr("  position_set follows;\t\t/* Unio"..., '\n', 497) = 0x025a0961
[0x4022d1] memchr("  position_set tmp;\t\t/* Temporar"..., '\n', 430) = 0x025a099e
[0x4022d1] memchr("  int state;\t\t\t/* New state. */\n"..., '\n', 369) = 0x025a09be
[0x4022d1] memchr("  int wants_newline;\t\t/* New sta"..., '\n', 337) = 0x025a0a03
[0x4022d1] memchr("  int state_newline;\t\t/* New sta"..., '\n', 268) = 0x025a0a42
[0x4022d1] memchr("  int wants_letter;\t\t/* New stat"..., '\n', 205) = 0x025a0a85
[0x4022d1] memchr("  int state_letter;\t\t/* New stat"..., '\n', 138) = 0x025a0ac2
[0x4022d1] memchr("  static initialized;\t\t/* Flag f"..., '\n', 77) = 0x025a0aff
[0x4022d1] memchr("  int i, j, k;\n\n  /* Initialize "..., '\n', 16) = 0x025a0b0e
[0x4022d1] memchr("\n  /* Initialize the set of lett"..., '\n', 1) = 0x025a0b0f
[0x4022d1] memchr("  /* Initialize the set of lette"..., '\n', 0) = NULL
[0x4023cc] fwrite("8087:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize the set of lette"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (! initialized)\n    {\n     "..., 'I', 21676) = 0x025a0ba0
[0x40cdf3] memchr("ISALNUM(i))\n\t  setbit(i, letters"..., '\n', 21585) = 0x025a0bab
[0x4022d1] memchr("  if (! initialized)\n    {\n     "..., '\n', 86) = 0x025a0b59
[0x4022d1] memchr("    {\n      initialized = 1;\n   "..., '\n', 65) = 0x025a0b5f
[0x4022d1] memchr("      initialized = 1;\n      for"..., '\n', 59) = 0x025a0b76
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 36) = 0x025a0b9a
[0x4022d1] memchr("\tif (ISALNUM(i))\n\t  setbit(i, le"..., '\n', 0) = NULL
[0x4023cc] fwrite("8092:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tif (ISALNUM(i))\n\t  setbit(i, le"..., 1, 17, 0x7f498147f260) = 17
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  setbit(i, letters);\n      set"..., 'I', 21573) = 0x025a0df8
[0x40cdf3] memchr("INE_CONTEXT(pos.constraint,\n\t\t\t\t"..., '\n', 20985) = 0x025a0e13
[0x4022d1] memchr("\t  setbit(i, letters);\n      set"..., '\n', 567) = 0x025a0bc2
[0x4022d1] memchr("      setbit('\\n', newline);\n   "..., '\n', 544) = 0x025a0bdf
[0x4022d1] memchr("    }\n\n  zeroset(matches);\n\n  fo"..., '\n', 515) = 0x025a0be5
[0x4022d1] memchr("\n  zeroset(matches);\n\n  for (i ="..., '\n', 509) = 0x025a0be6
[0x4022d1] memchr("  zeroset(matches);\n\n  for (i = "..., '\n', 508) = 0x025a0bfa
[0x4022d1] memchr("\n  for (i = 0; i < d->states[s]."..., '\n', 488) = 0x025a0bfb
[0x4022d1] memchr("  for (i = 0; i < d->states[s].e"..., '\n', 487) = 0x025a0c2c
[0x4022d1] memchr("    {\n      pos = d->states[s].e"..., '\n', 438) = 0x025a0c32
[0x4022d1] memchr("      pos = d->states[s].elems.e"..., '\n', 432) = 0x025a0c5b
[0x4022d1] memchr("      if (d->tokens[pos.index] >"..., '\n', 391) = 0x025a0ca2
[0x4022d1] memchr("\tsetbit(d->tokens[pos.index], ma"..., '\n', 320) = 0x025a0cca
[0x4022d1] memchr("      else if (d->tokens[pos.ind"..., '\n', 280) = 0x025a0cf7
[0x4022d1] memchr("\tcopyset(d->charclasses[d->token"..., '\n', 235) = 0x025a0d37
[0x4022d1] memchr("      else\n\tcontinue;\n\n      /* "..., '\n', 171) = 0x025a0d42
[0x4022d1] memchr("\tcontinue;\n\n      /* Some charac"..., '\n', 160) = 0x025a0d4d
[0x4022d1] memchr("\n      /* Some characters may ne"..., '\n', 149) = 0x025a0d4e
[0x4022d1] memchr("      /* Some characters may nee"..., '\n', 148) = 0x025a0d96
[0x4022d1] memchr("\t they fail in the current conte"..., '\n', 76) = 0x025a0dbd
[0x4022d1] memchr("      if (pos.constraint != 0xFF"..., '\n', 37) = 0x025a0ddf
[0x4022d1] memchr("\t{\n\t  if (! MATCHES_NEWLINE_CONT"..., '\n', 3) = 0x025a0de2
[0x4022d1] memchr("\t  if (! MATCHES_NEWLINE_CONTEXT"..., '\n', 0) = NULL
[0x4023cc] fwrite("8113:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (! MATCHES_NEWLINE_CONTEXT"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t d->states[s].newline, 1))\n"..., 'I', 20957) = 0x025a0e65
[0x40cdf3] memchr("INE_CONTEXT(pos.constraint,\n\t\t\t\t"..., '\n', 20876) = 0x025a0e80
[0x4022d1] memchr("\t\t\t\t\t d->states[s].newline, 1))\n"..., '\n', 60) = 0x025a0e33
[0x4022d1] memchr("\t    clrbit('\\n', matches);\n\t  i"..., '\n', 28) = 0x025a0e4f
[0x4022d1] memchr("\t  if (! MATCHES_NEWLINE_CONTEXT"..., '\n', 0) = NULL
[0x4023cc] fwrite("8116:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (! MATCHES_NEWLINE_CONTEXT"..., 1, 49, 0x7f498147f260) = 49
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t\t d->states[s].newline, 0))\n"..., 'I', 20848) = 0x025a0ec0
[0x40cdf3] memchr("INTS; ++j)\n\t      matches[j] &= "..., '\n', 20785) = 0x025a0eca
[0x4022d1] memchr("\t\t\t\t\t d->states[s].newline, 0))\n"..., '\n', 32) = 0x025a0ea0
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 0) = NULL
[0x4023cc] fwrite("8118:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    for (j = 0; j < CHARCLASS_I"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      matches[j] &= newline[j];"..., 'I', 20774) = 0x025a0f59
[0x40cdf3] memchr("INTS; ++j)\n\t      matches[j] &= "..., '\n', 20632) = 0x025a0f63
[0x4022d1] memchr("\t      matches[j] &= newline[j];"..., '\n', 111) = 0x025a0eeb
[0x4022d1] memchr("\t  if (! MATCHES_LETTER_CONTEXT("..., '\n', 78) = 0x025a0f1b
[0x4022d1] memchr("\t\t\t\t\td->states[s].letter, 1))\n\t "..., '\n', 30) = 0x025a0f39
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 0) = NULL
[0x4023cc] fwrite("8122:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    for (j = 0; j < CHARCLASS_I"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      matches[j] &= ~letters[j]"..., 'I', 20621) = 0x025a0ff3
[0x40cdf3] memchr("INTS; ++j)\n\t      matches[j] &= "..., '\n', 20478) = 0x025a0ffd
[0x4022d1] memchr("\t      matches[j] &= ~letters[j]"..., '\n', 112) = 0x025a0f85
[0x4022d1] memchr("\t  if (! MATCHES_LETTER_CONTEXT("..., '\n', 78) = 0x025a0fb5
[0x4022d1] memchr("\t\t\t\t\td->states[s].letter, 0))\n\t "..., '\n', 30) = 0x025a0fd3
[0x4022d1] memchr("\t    for (j = 0; j < CHARCLASS_I"..., '\n', 0) = NULL
[0x4023cc] fwrite("8126:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    for (j = 0; j < CHARCLASS_I"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t      matches[j] &= letters[j];"..., 'I', 20467) = 0x025a1026
[0x40cdf3] memchr("If there are no characters left,"..., '\n', 20427) = 0x025a1067
[0x4022d1] memchr("\t      matches[j] &= letters[j];"..., '\n', 34) = 0x025a101e
[0x4022d1] memchr("\n\t  /* If there are no character"..., '\n', 1) = 0x025a101f
[0x4022d1] memchr("\t  /* If there are no characters"..., '\n', 0) = NULL
[0x4023cc] fwrite("8129:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If there are no characters"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  for (j = 0; j < CHARCLASS_INT"..., 'I', 20361) = 0x025a1085
[0x40cdf3] memchr("INTS && !matches[j]; ++j)\n\t    ;"..., '\n', 20332) = 0x025a109e
[0x4022d1] memchr("\t  for (j = 0; j < CHARCLASS_INT"..., '\n', 0) = NULL
[0x4023cc] fwrite("8130:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (j = 0; j < CHARCLASS_INT"..., 1, 55, 0x7f498147f260) = 55
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    ;\n\t  if (j == CHARCLASS_INT"..., 'I', 20306) = 0x025a10bc
[0x40cdf3] memchr("INTS)\n\t    continue;\n\t}\n\n      f"..., '\n', 20277) = 0x025a10c1
[0x4022d1] memchr("\t    ;\n\t  if (j == CHARCLASS_INT"..., '\n', 7) = 0x025a10a5
[0x4022d1] memchr("\t  if (j == CHARCLASS_INTS)\n\t   "..., '\n', 0) = NULL
[0x4023cc] fwrite("8132:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (j == CHARCLASS_INTS)\n\t   "..., 1, 28, 0x7f498147f260) = 28
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    continue;\n\t}\n\n      for (j "..., 'I', 20271) = 0x025a1100
[0x40cdf3] memchr("If matches contains a single cha"..., '\n', 20209) = 0x025a113c
[0x4022d1] memchr("\t    continue;\n\t}\n\n      for (j "..., '\n', 56) = 0x025a10d0
[0x4022d1] memchr("\t}\n\n      for (j = 0; j < ngrps;"..., '\n', 41) = 0x025a10d3
[0x4022d1] memchr("\n      for (j = 0; j < ngrps; ++"..., '\n', 38) = 0x025a10d4
[0x4022d1] memchr("      for (j = 0; j < ngrps; ++j"..., '\n', 37) = 0x025a10f6
[0x4022d1] memchr("\t{\n\t  /* If matches contains a s"..., '\n', 3) = 0x025a10f9
[0x4022d1] memchr("\t  /* If matches contains a sing"..., '\n', 0) = NULL
[0x4023cc] fwrite("8138:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If matches contains a sing"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t     group's label doesn't cont"..., 'I', 20148) = 0x025a129f
[0x40cdf3] memchr("INTS; ++k)\n\t    (intersect[k] = "..., '\n', 19794) = 0x025a12a9
[0x4022d1] memchr("\t     group's label doesn't cont"..., '\n', 325) = 0x025a117d
[0x4022d1] memchr("\t     next group. */\n\t  if (d->t"..., '\n', 260) = 0x025a1192
[0x4022d1] memchr("\t  if (d->tokens[pos.index] >= 0"..., '\n', 239) = 0x025a11d5
[0x4022d1] memchr("\t      && !tstbit(d->tokens[pos."..., '\n', 172) = 0x025a1209
[0x4022d1] memchr("\t    continue;\n\n\t  /* Check if t"..., '\n', 120) = 0x025a1218
[0x4022d1] memchr("\n\t  /* Check if this group's lab"..., '\n', 105) = 0x025a1219
[0x4022d1] memchr("\t  /* Check if this group's labe"..., '\n', 104) = 0x025a125c
[0x4022d1] memchr("\t     matches. */\n\t  intersectf "..., '\n', 37) = 0x025a126e
[0x4022d1] memchr("\t  intersectf = 0;\n\t  for (k = 0"..., '\n', 19) = 0x025a1281
[0x4022d1] memchr("\t  for (k = 0; k < CHARCLASS_INT"..., '\n', 0) = NULL
[0x4023cc] fwrite("8148:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (k = 0; k < CHARCLASS_INT"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    (intersect[k] = matches[k] "..., 'I', 19783) = 0x025a131b
[0x40cdf3] memchr("It does; now find the set differ"..., '\n', 19670) = 0x025a134e
[0x4022d1] memchr("\t    (intersect[k] = matches[k] "..., '\n', 107) = 0x025a12ef
[0x4022d1] memchr("\t  if (! intersectf)\n\t    contin"..., '\n', 37) = 0x025a1304
[0x4022d1] memchr("\t    continue;\n\n\t  /* It does; n"..., '\n', 16) = 0x025a1313
[0x4022d1] memchr("\n\t  /* It does; now find the set"..., '\n', 1) = 0x025a1314
[0x4022d1] memchr("\t  /* It does; now find the set "..., '\n', 0) = NULL
[0x4023cc] fwrite("8153:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* It does; now find the set "..., 1, 58, 0x7f498147f260) = 58
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  leftoversf = matchesf = 0;\n\t "..., 'I', 19618) = 0x025a138a
[0x40cdf3] memchr("INTS; ++k)\n\t    {\n\t      /* Even"..., '\n', 19559) = 0x025a1394
[0x4022d1] memchr("\t  leftoversf = matchesf = 0;\n\t "..., '\n', 30) = 0x025a136c
[0x4022d1] memchr("\t  for (k = 0; k < CHARCLASS_INT"..., '\n', 0) = NULL
[0x4023cc] fwrite("8155:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  for (k = 0; k < CHARCLASS_INT"..., 1, 40, 0x7f498147f260) = 40
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    {\n\t      /* Even an optimiz"..., 'I', 19548) = 0x025a1499
[0x40cdf3] memchr("If there were leftovers, create "..., '\n', 19288) = 0x025a14da
[0x4022d1] memchr("\t    {\n\t      /* Even an optimiz"..., '\n', 254) = 0x025a139b
[0x4022d1] memchr("\t      /* Even an optimizing com"..., '\n', 247) = 0x025a13de
[0x4022d1] memchr("\t      int match = matches[k], l"..., '\n', 180) = 0x025a1413
[0x4022d1] memchr("\n\t      (leftovers[k] = ~match &"..., '\n', 127) = 0x025a1414
[0x4022d1] memchr("\t      (leftovers[k] = ~match & "..., '\n', 126) = 0x025a1451
[0x4022d1] memchr("\t      (matches[k] = match & ~la"..., '\n', 65) = 0x025a148a
[0x4022d1] memchr("\t    }\n\n\t  /* If there were left"..., '\n', 8) = 0x025a1491
[0x4022d1] memchr("\n\t  /* If there were leftovers, "..., '\n', 1) = 0x025a1492
[0x4022d1] memchr("\t  /* If there were leftovers, c"..., '\n', 0) = NULL
[0x4023cc] fwrite("8164:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If there were leftovers, c"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (leftoversf)\n\t    {\n\t     "..., 'I', 19222) = 0x025a1655
[0x40cdf3] memchr("If every character matching the "..., '\n', 18844) = 0x025a168e
[0x4022d1] memchr("\t  if (leftoversf)\n\t    {\n\t     "..., '\n', 372) = 0x025a14ed
[0x4022d1] memchr("\t    {\n\t      copyset(leftovers,"..., '\n', 353) = 0x025a14f4
[0x4022d1] memchr("\t      copyset(leftovers, labels"..., '\n', 346) = 0x025a151e
[0x4022d1] memchr("\t      copyset(intersect, labels"..., '\n', 304) = 0x025a1544
[0x4022d1] memchr("\t      MALLOC(grps[ngrps].elems,"..., '\n', 266) = 0x025a157c
[0x4022d1] memchr("\t      copy(&grps[j], &grps[ngrp"..., '\n', 210) = 0x025a15a1
[0x4022d1] memchr("\t      ++ngrps;\n\t    }\n\n\t  /* Pu"..., '\n', 173) = 0x025a15b1
[0x4022d1] memchr("\t    }\n\n\t  /* Put the position i"..., '\n', 157) = 0x025a15b8
[0x4022d1] memchr("\n\t  /* Put the position in the c"..., '\n', 150) = 0x025a15b9
[0x4022d1] memchr("\t  /* Put the position in the cu"..., '\n', 149) = 0x025a15fd
[0x4022d1] memchr("\t     reason to call insert() he"..., '\n', 81) = 0x025a1624
[0x4022d1] memchr("\t  grps[j].elems[grps[j].nelem++"..., '\n', 42) = 0x025a164d
[0x4022d1] memchr("\n\t  /* If every character matchi"..., '\n', 1) = 0x025a164e
[0x4022d1] memchr("\t  /* If every character matchin"..., '\n', 0) = NULL
[0x4023cc] fwrite("8178:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* If every character matchin"..., 1, 64, 0x7f498147f260) = 64
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t     accounted for, we're done."..., 'I', 18786) = 0x025a16df
[0x40cdf3] memchr("If we've passed the last group, "..., '\n', 18706) = 0x025a171d
[0x4022d1] memchr("\t     accounted for, we're done."..., '\n', 71) = 0x025a16b2
[0x4022d1] memchr("\t  if (! matchesf)\n\t    break;\n\t"..., '\n', 35) = 0x025a16c5
[0x4022d1] memchr("\t    break;\n\t}\n\n      /* If we'v"..., '\n', 16) = 0x025a16d1
[0x4022d1] memchr("\t}\n\n      /* If we've passed the"..., '\n', 4) = 0x025a16d4
[0x4022d1] memchr("\n      /* If we've passed the la"..., '\n', 1) = 0x025a16d5
[0x4022d1] memchr("      /* If we've passed the las"..., '\n', 0) = NULL
[0x4023cc] fwrite("8184:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If we've passed the las"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t unaccounted for, then we'll ha"..., 'I', 18643) = 0x025a1890
[0x40cdf3] memchr("If we are a searching matcher, t"..., '\n', 18273) = 0x025a18d3
[0x4022d1] memchr("\t unaccounted for, then we'll ha"..., '\n', 365) = 0x025a175a
[0x4022d1] memchr("      if (j == ngrps)\n\t{\n\t  copy"..., '\n', 304) = 0x025a1770
[0x4022d1] memchr("\t{\n\t  copyset(matches, labels[ng"..., '\n', 282) = 0x025a1773
[0x4022d1] memchr("\t  copyset(matches, labels[ngrps"..., '\n', 279) = 0x025a1797
[0x4022d1] memchr("\t  zeroset(matches);\n\t  MALLOC(g"..., '\n', 243) = 0x025a17ac
[0x4022d1] memchr("\t  MALLOC(grps[ngrps].elems, pos"..., '\n', 222) = 0x025a17e0
[0x4022d1] memchr("\t  grps[ngrps].nelem = 1;\n\t  grp"..., '\n', 170) = 0x025a17fa
[0x4022d1] memchr("\t  grps[ngrps].elems[0] = pos;\n\t"..., '\n', 144) = 0x025a1819
[0x4022d1] memchr("\t  ++ngrps;\n\t}\n    }\n\n  MALLOC(f"..., '\n', 113) = 0x025a1825
[0x4022d1] memchr("\t}\n    }\n\n  MALLOC(follows.elems"..., '\n', 101) = 0x025a1828
[0x4022d1] memchr("    }\n\n  MALLOC(follows.elems, p"..., '\n', 98) = 0x025a182e
[0x4022d1] memchr("\n  MALLOC(follows.elems, positio"..., '\n', 92) = 0x025a182f
[0x4022d1] memchr("  MALLOC(follows.elems, position"..., '\n', 91) = 0x025a185e
[0x4022d1] memchr("  MALLOC(tmp.elems, position, d-"..., '\n', 44) = 0x025a1889
[0x4022d1] memchr("\n  /* If we are a searching matc"..., '\n', 1) = 0x025a188a
[0x4022d1] memchr("  /* If we are a searching match"..., '\n', 0) = NULL
[0x4023cc] fwrite("8200:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* If we are a searching match"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     containing the positions of"..., 'I', 18205) = 0x025a19d1
[0x40cdf3] memchr("INE_DEPENDENT(d->states[0].elems"..., '\n', 17952) = 0x025a1a07
[0x4022d1] memchr("     containing the positions of"..., '\n', 237) = 0x025a191e
[0x4022d1] memchr("     is to fail miserably. */\n  "..., '\n', 162) = 0x025a193c
[0x4022d1] memchr("  if (d->searchflag)\n    {\n     "..., '\n', 132) = 0x025a1951
[0x4022d1] memchr("    {\n      wants_newline = 0;\n "..., '\n', 111) = 0x025a1957
[0x4022d1] memchr("      wants_newline = 0;\n      w"..., '\n', 105) = 0x025a1970
[0x4022d1] memchr("      wants_letter = 0;\n      fo"..., '\n', 80) = 0x025a1988
[0x4022d1] memchr("      for (i = 0; i < d->states["..., '\n', 56) = 0x025a19bd
[0x4022d1] memchr("\t{\n\t  if (PREV_NEWLINE_DEPENDENT"..., '\n', 3) = 0x025a19c0
[0x4022d1] memchr("\t  if (PREV_NEWLINE_DEPENDENT(d-"..., '\n', 0) = NULL
[0x4023cc] fwrite("8209:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (PREV_NEWLINE_DEPENDENT(d-"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    wants_newline = 1;\n\t  if (P"..., 'I', 17897) = 0x025a1c0b
[0x40cdf3] memchr("ISALNUM(i))\n\t  trans[i] = state_"..., '\n', 17382) = 0x025a1c16
[0x4022d1] memchr("\t    wants_newline = 1;\n\t  if (P"..., '\n', 505) = 0x025a1a1f
[0x4022d1] memchr("\t  if (PREV_LETTER_DEPENDENT(d->"..., '\n', 481) = 0x025a1a65
[0x4022d1] memchr("\t    wants_letter = 1;\n\t}\n      "..., '\n', 411) = 0x025a1a7c
[0x4022d1] memchr("\t}\n      copy(&d->states[0].elem"..., '\n', 388) = 0x025a1a7f
[0x4022d1] memchr("      copy(&d->states[0].elems, "..., '\n', 385) = 0x025a1aaa
[0x4022d1] memchr("      state = state_index(d, &fo"..., '\n', 342) = 0x025a1ad8
[0x4022d1] memchr("      if (wants_newline)\n\tstate_"..., '\n', 296) = 0x025a1af1
[0x4022d1] memchr("\tstate_newline = state_index(d, "..., '\n', 271) = 0x025a1b22
[0x4022d1] memchr("      else\n\tstate_newline = stat"..., '\n', 222) = 0x025a1b2d
[0x4022d1] memchr("\tstate_newline = state;\n      if"..., '\n', 211) = 0x025a1b45
[0x4022d1] memchr("      if (wants_letter)\n\tstate_l"..., '\n', 187) = 0x025a1b5d
[0x4022d1] memchr("\tstate_letter = state_index(d, &"..., '\n', 163) = 0x025a1b8d
[0x4022d1] memchr("      else\n\tstate_letter = state"..., '\n', 115) = 0x025a1b98
[0x4022d1] memchr("\tstate_letter = state;\n      for"..., '\n', 104) = 0x025a1baf
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 81) = 0x025a1bd3
[0x4022d1] memchr("\tif (i == '\\n')\n\t  trans[i] = st"..., '\n', 45) = 0x025a1be3
[0x4022d1] memchr("\t  trans[i] = state_newline;\n\tel"..., '\n', 29) = 0x025a1c00
[0x4022d1] memchr("\telse if (ISALNUM(i))\n\t  trans[i"..., '\n', 0) = NULL
[0x4023cc] fwrite("8227:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\telse if (ISALNUM(i))\n\t  trans[i"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  trans[i] = state_letter;\n\tels"..., 'I', 17370) = 0x025a1e09
[0x40cdf3] memchr("If we are building a searching m"..., '\n', 16872) = 0x025a1e47
[0x4022d1] memchr("\t  trans[i] = state_letter;\n\tels"..., '\n', 489) = 0x025a1c32
[0x4022d1] memchr("\telse\n\t  trans[i] = state;\n    }"..., '\n', 461) = 0x025a1c38
[0x4022d1] memchr("\t  trans[i] = state;\n    }\n  els"..., '\n', 455) = 0x025a1c4d
[0x4022d1] memchr("    }\n  else\n    for (i = 0; i <"..., '\n', 434) = 0x025a1c53
[0x4022d1] memchr("  else\n    for (i = 0; i < NOTCH"..., '\n', 428) = 0x025a1c5a
[0x4022d1] memchr("    for (i = 0; i < NOTCHAR; ++i"..., '\n', 421) = 0x025a1c7c
[0x4022d1] memchr("      trans[i] = -1;\n\n  for (i ="..., '\n', 387) = 0x025a1c91
[0x4022d1] memchr("\n  for (i = 0; i < ngrps; ++i)\n "..., '\n', 366) = 0x025a1c92
[0x4022d1] memchr("  for (i = 0; i < ngrps; ++i)\n  "..., '\n', 365) = 0x025a1cb0
[0x4022d1] memchr("    {\n      follows.nelem = 0;\n\n"..., '\n', 335) = 0x025a1cb6
[0x4022d1] memchr("      follows.nelem = 0;\n\n      "..., '\n', 329) = 0x025a1ccf
[0x4022d1] memchr("\n      /* Find the union of the "..., '\n', 304) = 0x025a1cd0
[0x4022d1] memchr("      /* Find the union of the f"..., '\n', 303) = 0x025a1d16
[0x4022d1] memchr("\t This is a hideously inefficien"..., '\n', 233) = 0x025a1d52
[0x4022d1] memchr("      for (j = 0; j < grps[i].ne"..., '\n', 173) = 0x025a1d7c
[0x4022d1] memchr("\tfor (k = 0; k < d->follows[grps"..., '\n', 131) = 0x025a1dbc
[0x4022d1] memchr("\t  insert(d->follows[grps[i].ele"..., '\n', 67) = 0x025a1dfe
[0x4022d1] memchr("\n      /* If we are building a s"..., '\n', 1) = 0x025a1dff
[0x4022d1] memchr("      /* If we are building a se"..., '\n', 0) = NULL
[0x4023cc] fwrite("8246:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If we are building a se"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t of state 0 as well. */\n      i"..., 'I', 16809) = 0x025a1f97
[0x40cdf3] memchr("INE_DEPENDENT(follows.elems[j].c"..., '\n', 16474) = 0x025a1fc2
[0x4022d1] memchr("\t of state 0 as well. */\n      i"..., '\n', 319) = 0x025a1e60
[0x4022d1] memchr("      if (d->searchflag)\n\tfor (j"..., '\n', 294) = 0x025a1e79
[0x4022d1] memchr("\tfor (j = 0; j < d->states[0].el"..., '\n', 269) = 0x025a1ea9
[0x4022d1] memchr("\t  insert(d->states[0].elems.ele"..., '\n', 221) = 0x025a1edb
[0x4022d1] memchr("\n      /* Find out if the new st"..., '\n', 171) = 0x025a1edc
[0x4022d1] memchr("      /* Find out if the new sta"..., '\n', 170) = 0x025a1f25
[0x4022d1] memchr("      wants_newline = 0;\n      i"..., '\n', 97) = 0x025a1f3e
[0x4022d1] memchr("      if (tstbit('\\n', labels[i]"..., '\n', 72) = 0x025a1f61
[0x4022d1] memchr("\tfor (j = 0; j < follows.nelem; "..., '\n', 37) = 0x025a1f86
[0x4022d1] memchr("\t  if (PREV_NEWLINE_DEPENDENT(fo"..., '\n', 0) = NULL
[0x4023cc] fwrite("8256:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  if (PREV_NEWLINE_DEPENDENT(fo"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t    wants_newline = 1;\n\n      w"..., 'I', 16430) = 0x025a2014
[0x40cdf3] memchr("INTS; ++j)\n\tif (labels[i][j] & l"..., '\n', 16349) = 0x025a201e
[0x4022d1] memchr("\t    wants_newline = 1;\n\n      w"..., '\n', 49) = 0x025a1fda
[0x4022d1] memchr("\n      wants_letter = 0;\n      f"..., '\n', 25) = 0x025a1fdb
[0x4022d1] memchr("      wants_letter = 0;\n      fo"..., '\n', 24) = 0x025a1ff3
[0x4022d1] memchr("      for (j = 0; j < CHARCLASS_"..., '\n', 0) = NULL
[0x4023cc] fwrite("8260:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      for (j = 0; j < CHARCLASS_"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tif (labels[i][j] & letters[j])\n"..., 'I', 16338) = 0x025a2061
[0x40cdf3] memchr("INTS)\n\tfor (j = 0; j < follows.n"..., '\n', 16272) = 0x025a2066
[0x4022d1] memchr("\tif (labels[i][j] & letters[j])\n"..., '\n', 42) = 0x025a203e
[0x4022d1] memchr("\t  break;\n      if (j < CHARCLAS"..., '\n', 10) = 0x025a2048
[0x4022d1] memchr("      if (j < CHARCLASS_INTS)\n\tf"..., '\n', 0) = NULL
[0x4023cc] fwrite("8263:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      if (j < CHARCLASS_INTS)\n\tf"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tfor (j = 0; j < follows.nelem; "..., 'I', 16266) = 0x025a2297
[0x40cdf3] memchr("INTS; ++j)\n\tfor (k = 0; k < INTB"..., '\n', 15706) = 0x025a22a1
[0x4022d1] memchr("\tfor (j = 0; j < follows.nelem; "..., '\n', 528) = 0x025a208b
[0x4022d1] memchr("\t  if (PREV_LETTER_DEPENDENT(fol"..., '\n', 491) = 0x025a20c6
[0x4022d1] memchr("\t    wants_letter = 1;\n\n      /*"..., '\n', 432) = 0x025a20dd
[0x4022d1] memchr("\n      /* Find the state(s) corr"..., '\n', 409) = 0x025a20de
[0x4022d1] memchr("      /* Find the state(s) corre"..., '\n', 408) = 0x025a2127
[0x4022d1] memchr("      state = state_index(d, &fo"..., '\n', 335) = 0x025a2155
[0x4022d1] memchr("      if (wants_newline)\n\tstate_"..., '\n', 289) = 0x025a216e
[0x4022d1] memchr("\tstate_newline = state_index(d, "..., '\n', 264) = 0x025a219f
[0x4022d1] memchr("      else\n\tstate_newline = stat"..., '\n', 215) = 0x025a21aa
[0x4022d1] memchr("\tstate_newline = state;\n      if"..., '\n', 204) = 0x025a21c2
[0x4022d1] memchr("      if (wants_letter)\n\tstate_l"..., '\n', 180) = 0x025a21da
[0x4022d1] memchr("\tstate_letter = state_index(d, &"..., '\n', 156) = 0x025a220a
[0x4022d1] memchr("      else\n\tstate_letter = state"..., '\n', 108) = 0x025a2215
[0x4022d1] memchr("\tstate_letter = state;\n\n      /*"..., '\n', 97) = 0x025a222c
[0x4022d1] memchr("\n      /* Set the transitions fo"..., '\n', 74) = 0x025a222d
[0x4022d1] memchr("      /* Set the transitions for"..., '\n', 73) = 0x025a2276
[0x4022d1] memchr("      for (j = 0; j < CHARCLASS_"..., '\n', 0) = NULL
[0x4023cc] fwrite("8280:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      for (j = 0; j < CHARCLASS_"..., 1, 43, 0x7f498147f260) = 43
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tfor (k = 0; k < INTBITS; ++k)\n\t"..., 'I', 15695) = 0x025a22b3
[0x40cdf3] memchr("INTBITS; ++k)\n\t  if (labels[i][j"..., '\n', 15678) = 0x025a22c0
[0x4022d1] memchr("\tfor (k = 0; k < INTBITS; ++k)\n\t"..., '\n', 0) = NULL
[0x4023cc] fwrite("8281:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tfor (k = 0; k < INTBITS; ++k)\n\t"..., 1, 31, 0x7f498147f260) = 31
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (labels[i][j] & 1 << k)\n\t "..., 'I', 15664) = 0x025a22f9
[0x40cdf3] memchr("INTBITS + k;\n\n\t      if (c == '\\"..., '\n', 15608) = 0x025a2305
[0x4022d1] memchr("\t  if (labels[i][j] & 1 << k)\n\t "..., '\n', 37) = 0x025a22de
[0x4022d1] memchr("\t    {\n\t      int c = j * INTBIT"..., '\n', 7) = 0x025a22e5
[0x4022d1] memchr("\t      int c = j * INTBITS + k;\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("8284:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      int c = j * INTBITS + k;\n"..., 1, 32, 0x7f498147f260) = 32
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\t      if (c == '\\n')\n\t\ttrans[c"..., 'I', 15595) = 0x025a2349
[0x40cdf3] memchr("ISALNUM(c))\n\t\ttrans[c] = state_l"..., '\n', 15528) = 0x025a2354
[0x4022d1] memchr("\n\t      if (c == '\\n')\n\t\ttrans[c"..., '\n', 51) = 0x025a2306
[0x4022d1] memchr("\t      if (c == '\\n')\n\t\ttrans[c]"..., '\n', 50) = 0x025a231c
[0x4022d1] memchr("\t\ttrans[c] = state_newline;\n\t   "..., '\n', 28) = 0x025a2338
[0x4022d1] memchr("\t      else if (ISALNUM(c))\n\t\ttr"..., '\n', 0) = NULL
[0x4023cc] fwrite("8288:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      else if (ISALNUM(c))\n\t\ttr"..., 1, 28, 0x7f498147f260) = 28
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\ttrans[c] = state_letter;\n\t    "..., 'I', 15516) = 0x025a24ec
[0x40cdf3] memchr("If it is an accepting state then"..., '\n', 15109) = 0x025a2531
[0x4022d1] memchr("\t\ttrans[c] = state_letter;\n\t    "..., '\n', 404) = 0x025a236f
[0x4022d1] memchr("\t      else if (c < NOTCHAR)\n\t\tt"..., '\n', 377) = 0x025a238c
[0x4022d1] memchr("\t\ttrans[c] = state;\n\t    }\n    }"..., '\n', 348) = 0x025a23a0
[0x4022d1] memchr("\t    }\n    }\n\n  for (i = 0; i < "..., '\n', 328) = 0x025a23a7
[0x4022d1] memchr("    }\n\n  for (i = 0; i < ngrps; "..., '\n', 321) = 0x025a23ad
[0x4022d1] memchr("\n  for (i = 0; i < ngrps; ++i)\n "..., '\n', 315) = 0x025a23ae
[0x4022d1] memchr("  for (i = 0; i < ngrps; ++i)\n  "..., '\n', 314) = 0x025a23cc
[0x4022d1] memchr("    free(grps[i].elems);\n  free("..., '\n', 284) = 0x025a23e5
[0x4022d1] memchr("  free(follows.elems);\n  free(tm"..., '\n', 259) = 0x025a23fc
[0x4022d1] memchr("  free(tmp.elems);\n}\n\n/* Some ro"..., '\n', 236) = 0x025a240f
[0x4022d1] memchr("}\n\n/* Some routines for manipula"..., '\n', 217) = 0x025a2411
[0x4022d1] memchr("\n/* Some routines for manipulati"..., '\n', 215) = 0x025a2412
[0x4022d1] memchr("/* Some routines for manipulatin"..., '\n', 214) = 0x025a2458
[0x4022d1] memchr("   Each state may or may not hav"..., '\n', 144) = 0x025a24a1
[0x4022d1] memchr("   is a non-accepting state, the"..., '\n', 71) = 0x025a24e8
[0x4022d1] memchr("   If it is an accepting state t"..., '\n', 0) = NULL
[0x4023cc] fwrite("8304:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If it is an accepting state t"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   If it has no table at all, th"..., 'I', 15039) = 0x025a2535
[0x40cdf3] memchr("If it has no table at all, then "..., '\n', 15036) = 0x025a256d
[0x4022d1] memchr("   If it has no table at all, th"..., '\n', 0) = NULL
[0x4023cc] fwrite("8305:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If it has no table at all, th"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   TODO: Improve this comment, g"..., 'I', 14979) = 0x025a2577
[0x40cdf3] memchr("Improve this comment, get rid of"..., '\n', 14970) = 0x025a25b6
[0x4022d1] memchr("   TODO: Improve this comment, g"..., '\n', 0) = NULL
[0x4023cc] fwrite("8306:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   TODO: Improve this comment, g"..., 1, 73, 0x7f498147f260) = 73
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nstatic void\nbuild_state(s, d)\n "..., 'I', 14906) = 0x025a28c4
[0x40cdf3] memchr("IN_CONTEXT(d->states[s].newline,"..., '\n', 14125) = 0x025a28ff
[0x4022d1] memchr("\nstatic void\nbuild_state(s, d)\n "..., '\n', 767) = 0x025a25b7
[0x4022d1] memchr("static void\nbuild_state(s, d)\n  "..., '\n', 766) = 0x025a25c3
[0x4022d1] memchr("build_state(s, d)\n     int s;\n  "..., '\n', 754) = 0x025a25d5
[0x4022d1] memchr("     int s;\n     struct dfa *d;\n"..., '\n', 736) = 0x025a25e1
[0x4022d1] memchr("     struct dfa *d;\n{\n  int *tra"..., '\n', 724) = 0x025a25f5
[0x4022d1] memchr("{\n  int *trans;\t\t\t/* The new tra"..., '\n', 704) = 0x025a25f7
[0x4022d1] memchr("  int *trans;\t\t\t/* The new trans"..., '\n', 702) = 0x025a2627
[0x4022d1] memchr("  int i;\n\n  /* Set an upper limi"..., '\n', 654) = 0x025a2630
[0x4022d1] memchr("\n  /* Set an upper limit on the "..., '\n', 645) = 0x025a2631
[0x4022d1] memchr("  /* Set an upper limit on the n"..., '\n', 644) = 0x025a267b
[0x4022d1] memchr("     exist at once.  1024 is arb"..., '\n', 570) = 0x025a26c4
[0x4022d1] memchr("     used transition tables will"..., '\n', 497) = 0x025a270f
[0x4022d1] memchr("     were only needed once or tw"..., '\n', 422) = 0x025a274c
[0x4022d1] memchr("  if (d->trcount >= 1024)\n    {\n"..., '\n', 361) = 0x025a2766
[0x4022d1] memchr("    {\n      for (i = 0; i < d->t"..., '\n', 335) = 0x025a276c
[0x4022d1] memchr("      for (i = 0; i < d->tralloc"..., '\n', 329) = 0x025a2793
[0x4022d1] memchr("\tif (d->trans[i])\n\t  {\n\t    free"..., '\n', 290) = 0x025a27a5
[0x4022d1] memchr("\t  {\n\t    free((ptr_t) d->trans["..., '\n', 272) = 0x025a27aa
[0x4022d1] memchr("\t    free((ptr_t) d->trans[i]);\n"..., '\n', 267) = 0x025a27ca
[0x4022d1] memchr("\t    d->trans[i] = NULL;\n\t  }\n\te"..., '\n', 235) = 0x025a27e3
[0x4022d1] memchr("\t  }\n\telse if (d->fails[i])\n\t  {"..., '\n', 210) = 0x025a27e8
[0x4022d1] memchr("\telse if (d->fails[i])\n\t  {\n\t   "..., '\n', 205) = 0x025a27ff
[0x4022d1] memchr("\t  {\n\t    free((ptr_t) d->fails["..., '\n', 182) = 0x025a2804
[0x4022d1] memchr("\t    free((ptr_t) d->fails[i]);\n"..., '\n', 177) = 0x025a2824
[0x4022d1] memchr("\t    d->fails[i] = NULL;\n\t  }\n  "..., '\n', 145) = 0x025a283d
[0x4022d1] memchr("\t  }\n      d->trcount = 0;\n    }"..., '\n', 120) = 0x025a2842
[0x4022d1] memchr("      d->trcount = 0;\n    }\n\n  +"..., '\n', 115) = 0x025a2858
[0x4022d1] memchr("    }\n\n  ++d->trcount;\n\n  /* Set"..., '\n', 93) = 0x025a285e
[0x4022d1] memchr("\n  ++d->trcount;\n\n  /* Set up th"..., '\n', 87) = 0x025a285f
[0x4022d1] memchr("  ++d->trcount;\n\n  /* Set up the"..., '\n', 86) = 0x025a286f
[0x4022d1] memchr("\n  /* Set up the success bits fo"..., '\n', 70) = 0x025a2870
[0x4022d1] memchr("  /* Set up the success bits for"..., '\n', 69) = 0x025a28a0
[0x4022d1] memchr("  d->success[s] = 0;\n  if (ACCEP"..., '\n', 21) = 0x025a28b5
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 0) = NULL
[0x4023cc] fwrite("8340:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (ACCEPTS_IN_CONTEXT(d->stat"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      s, *d))\n    d->success[s] "..., 'I', 14065) = 0x025a2934
[0x40cdf3] memchr("IN_CONTEXT(d->states[s].newline,"..., '\n', 14013) = 0x025a296f
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 38) = 0x025a290d
[0x4022d1] memchr("    d->success[s] |= 4;\n  if (AC"..., '\n', 24) = 0x025a2925
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 0) = NULL
[0x4023cc] fwrite("8343:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (ACCEPTS_IN_CONTEXT(d->stat"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      s, *d))\n    d->success[s] "..., 'I', 13953) = 0x025a29a4
[0x40cdf3] memchr("IN_CONTEXT(d->states[s].newline,"..., '\n', 13901) = 0x025a29df
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 38) = 0x025a297d
[0x4022d1] memchr("    d->success[s] |= 2;\n  if (AC"..., '\n', 24) = 0x025a2995
[0x4022d1] memchr("  if (ACCEPTS_IN_CONTEXT(d->stat"..., '\n', 0) = NULL
[0x4023cc] fwrite("8346:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (ACCEPTS_IN_CONTEXT(d->stat"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      s, *d))\n    d->success[s] "..., 'I', 13841) = 0x025a2d70
[0x40cdf3] memchr("ING(s, *d))\n    d->fails[s] = tr"..., '\n', 12929) = 0x025a2d7b
[0x4022d1] memchr("      s, *d))\n    d->success[s] "..., '\n', 900) = 0x025a29ed
[0x4022d1] memchr("    d->success[s] |= 1;\n\n  MALLO"..., '\n', 886) = 0x025a2a05
[0x4022d1] memchr("\n  MALLOC(trans, int, NOTCHAR);\n"..., '\n', 862) = 0x025a2a06
[0x4022d1] memchr("  MALLOC(trans, int, NOTCHAR);\n "..., '\n', 861) = 0x025a2a25
[0x4022d1] memchr("  dfastate(s, d, trans);\n\n  /* N"..., '\n', 830) = 0x025a2a3e
[0x4022d1] memchr("\n  /* Now go through the new tra"..., '\n', 805) = 0x025a2a3f
[0x4022d1] memchr("  /* Now go through the new tran"..., '\n', 804) = 0x025a2a8a
[0x4022d1] memchr("     and fail arrays are allocat"..., '\n', 729) = 0x025a2ad4
[0x4022d1] memchr("     largest state mentioned in "..., '\n', 655) = 0x025a2b02
[0x4022d1] memchr("  for (i = 0; i < NOTCHAR; ++i)\n"..., '\n', 609) = 0x025a2b22
[0x4022d1] memchr("    if (trans[i] >= d->tralloc)\n"..., '\n', 577) = 0x025a2b42
[0x4022d1] memchr("      {\n\tint oldalloc = d->trall"..., '\n', 545) = 0x025a2b4a
[0x4022d1] memchr("\tint oldalloc = d->tralloc;\n\n\twh"..., '\n', 537) = 0x025a2b66
[0x4022d1] memchr("\n\twhile (trans[i] >= d->tralloc)"..., '\n', 509) = 0x025a2b67
[0x4022d1] memchr("\twhile (trans[i] >= d->tralloc)\n"..., '\n', 508) = 0x025a2b87
[0x4022d1] memchr("\t  d->tralloc *= 2;\n\tREALLOC(d->"..., '\n', 476) = 0x025a2b9b
[0x4022d1] memchr("\tREALLOC(d->realtrans, int *, d-"..., '\n', 456) = 0x025a2bca
[0x4022d1] memchr("\td->trans = d->realtrans + 1;\n\tR"..., '\n', 409) = 0x025a2be8
[0x4022d1] memchr("\tREALLOC(d->fails, int *, d->tra"..., '\n', 379) = 0x025a2c0f
[0x4022d1] memchr("\tREALLOC(d->success, int, d->tra"..., '\n', 340) = 0x025a2c36
[0x4022d1] memchr("\tREALLOC(d->newlines, int, d->tr"..., '\n', 301) = 0x025a2c5e
[0x4022d1] memchr("\twhile (oldalloc < d->tralloc)\n\t"..., '\n', 261) = 0x025a2c7d
[0x4022d1] memchr("\t  {\n\t    d->trans[oldalloc] = N"..., '\n', 230) = 0x025a2c82
[0x4022d1] memchr("\t    d->trans[oldalloc] = NULL;\n"..., '\n', 225) = 0x025a2ca2
[0x4022d1] memchr("\t    d->fails[oldalloc++] = NULL"..., '\n', 193) = 0x025a2cc4
[0x4022d1] memchr("\t  }\n      }\n\n  /* Keep the newl"..., '\n', 159) = 0x025a2cc9
[0x4022d1] memchr("      }\n\n  /* Keep the newline t"..., '\n', 154) = 0x025a2cd1
[0x4022d1] memchr("\n  /* Keep the newline transitio"..., '\n', 146) = 0x025a2cd2
[0x4022d1] memchr("  /* Keep the newline transition"..., '\n', 145) = 0x025a2d1a
[0x4022d1] memchr("     a sentinel. */\n  d->newline"..., '\n', 73) = 0x025a2d2e
[0x4022d1] memchr("  d->newlines[s] = trans['\\n'];\n"..., '\n', 53) = 0x025a2d4e
[0x4022d1] memchr("  trans['\\n'] = -1;\n\n  if (ACCEP"..., '\n', 21) = 0x025a2d62
[0x4022d1] memchr("\n  if (ACCEPTING(s, *d))\n    d->"..., '\n', 1) = 0x025a2d63
[0x4022d1] memchr("  if (ACCEPTING(s, *d))\n    d->f"..., '\n', 0) = NULL
[0x4023cc] fwrite("8380:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  if (ACCEPTING(s, *d))\n    d->f"..., 1, 24, 0x7f498147f260) = 24
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    d->fails[s] = trans;\n  else\n"..., 'I', 12917) = 0x025a3128
[0x40cdf3] memchr("If count is non-\n   NULL it poin"..., '\n', 11977) = 0x025a3138
[0x4022d1] memchr("    d->fails[s] = trans;\n  else\n"..., '\n', 891) = 0x025a2d94
[0x4022d1] memchr("  else\n    d->trans[s] = trans;\n"..., '\n', 866) = 0x025a2d9b
[0x4022d1] memchr("    d->trans[s] = trans;\n}\n\nstat"..., '\n', 859) = 0x025a2db4
[0x4022d1] memchr("}\n\nstatic void\nbuild_state_zero("..., '\n', 834) = 0x025a2db6
[0x4022d1] memchr("\nstatic void\nbuild_state_zero(d)"..., '\n', 832) = 0x025a2db7
[0x4022d1] memchr("static void\nbuild_state_zero(d)\n"..., '\n', 831) = 0x025a2dc3
[0x4022d1] memchr("build_state_zero(d)\n     struct "..., '\n', 819) = 0x025a2dd7
[0x4022d1] memchr("     struct dfa *d;\n{\n  d->trall"..., '\n', 799) = 0x025a2deb
[0x4022d1] memchr("{\n  d->tralloc = 1;\n  d->trcount"..., '\n', 779) = 0x025a2ded
[0x4022d1] memchr("  d->tralloc = 1;\n  d->trcount ="..., '\n', 777) = 0x025a2dff
[0x4022d1] memchr("  d->trcount = 0;\n  CALLOC(d->re"..., '\n', 759) = 0x025a2e11
[0x4022d1] memchr("  CALLOC(d->realtrans, int *, d-"..., '\n', 741) = 0x025a2e40
[0x4022d1] memchr("  d->trans = d->realtrans + 1;\n "..., '\n', 694) = 0x025a2e5f
[0x4022d1] memchr("  CALLOC(d->fails, int *, d->tra"..., '\n', 663) = 0x025a2e86
[0x4022d1] memchr("  MALLOC(d->success, int, d->tra"..., '\n', 624) = 0x025a2ead
[0x4022d1] memchr("  MALLOC(d->newlines, int, d->tr"..., '\n', 585) = 0x025a2ed5
[0x4022d1] memchr("  build_state(0, d);\n}\n\n/* Searc"..., '\n', 545) = 0x025a2eea
[0x4022d1] memchr("}\n\n/* Search through a buffer lo"..., '\n', 524) = 0x025a2eec
[0x4022d1] memchr("\n/* Search through a buffer look"..., '\n', 522) = 0x025a2eed
[0x4022d1] memchr("/* Search through a buffer looki"..., '\n', 521) = 0x025a2f35
[0x4022d1] memchr("   Find the first occurrence of "..., '\n', 449) = 0x025a2f81
[0x4022d1] memchr("   and the shortest possible ver"..., '\n', 373) = 0x025a2fce
[0x4022d1] memchr("   character after the match, or"..., '\n', 296) = 0x025a3017
[0x4022d1] memchr("   the beginning of the buffer, "..., '\n', 223) = 0x025a3063
[0x4022d1] memchr("   its end.  We store a newline "..., '\n', 147) = 0x025a30ac
[0x4022d1] memchr("   better point somewhere valid."..., '\n', 74) = 0x025a30f6
[0x4022d1] memchr("   allow newlines to be in the m"..., '\n', 0) = NULL
[0x4023cc] fwrite("8407:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   allow newlines to be in the m"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   NULL it points to a place we'"..., 'I', 11960) = 0x025a34c1
[0x40cdf3] memchr("ISALNUM(i))\n\t  sbit[i] = 2;\n\tels"..., '\n', 11056) = 0x025a34cc
[0x4022d1] memchr("   NULL it points to a place we'"..., '\n', 894) = 0x025a317f
[0x4022d1] memchr("   see a newline.  Finally, if b"..., '\n', 823) = 0x025a31c7
[0x4022d1] memchr("   where we're supposed to store"..., '\n', 751) = 0x025a3210
[0x4022d1] memchr("   match needs to be verified by"..., '\n', 678) = 0x025a3254
[0x4022d1] memchr("   we store a 0 in *backref. */\n"..., '\n', 610) = 0x025a3274
[0x4022d1] memchr("char *\ndfaexec(d, begin, end, ne"..., '\n', 578) = 0x025a327b
[0x4022d1] memchr("dfaexec(d, begin, end, newline, "..., '\n', 571) = 0x025a32ab
[0x4022d1] memchr("     struct dfa *d;\n     char *b"..., '\n', 523) = 0x025a32bf
[0x4022d1] memchr("     char *begin;\n     char *end"..., '\n', 503) = 0x025a32d1
[0x4022d1] memchr("     char *end;\n     int newline"..., '\n', 485) = 0x025a32e1
[0x4022d1] memchr("     int newline;\n     int *coun"..., '\n', 469) = 0x025a32f3
[0x4022d1] memchr("     int *count;\n     int *backr"..., '\n', 451) = 0x025a3304
[0x4022d1] memchr("     int *backref;\n{\n  register "..., '\n', 434) = 0x025a3317
[0x4022d1] memchr("{\n  register s, s1, tmp;\t\t/* Cur"..., '\n', 415) = 0x025a3319
[0x4022d1] memchr("  register s, s1, tmp;\t\t/* Curre"..., '\n', 413) = 0x025a3346
[0x4022d1] memchr("  register unsigned char *p;\t/* "..., '\n', 368) = 0x025a3382
[0x4022d1] memchr("  register **trans, *t;\t\t/* Copy"..., '\n', 308) = 0x025a33c6
[0x4022d1] memchr("\t\t\t\t   into a register. */\n  sta"..., '\n', 240) = 0x025a33e1
[0x4022d1] memchr("  static sbit[NOTCHAR];\t/* Table"..., '\n', 213) = 0x025a3421
[0x4022d1] memchr("  static sbit_init;\n\n  if (! sbi"..., '\n', 149) = 0x025a3435
[0x4022d1] memchr("\n  if (! sbit_init)\n    {\n      "..., '\n', 129) = 0x025a3436
[0x4022d1] memchr("  if (! sbit_init)\n    {\n      i"..., '\n', 128) = 0x025a3449
[0x4022d1] memchr("    {\n      int i;\n\n      sbit_i"..., '\n', 109) = 0x025a344f
[0x4022d1] memchr("      int i;\n\n      sbit_init = "..., '\n', 103) = 0x025a345c
[0x4022d1] memchr("\n      sbit_init = 1;\n      for "..., '\n', 90) = 0x025a345d
[0x4022d1] memchr("      sbit_init = 1;\n      for ("..., '\n', 89) = 0x025a3472
[0x4022d1] memchr("      for (i = 0; i < NOTCHAR; +"..., '\n', 68) = 0x025a3496
[0x4022d1] memchr("\tif (i == '\\n')\n\t  sbit[i] = 4;\n"..., '\n', 32) = 0x025a34a6
[0x4022d1] memchr("\t  sbit[i] = 4;\n\telse if (ISALNU"..., '\n', 16) = 0x025a34b6
[0x4022d1] memchr("\telse if (ISALNUM(i))\n\t  sbit[i]"..., '\n', 0) = NULL
[0x4023cc] fwrite("8437:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\telse if (ISALNUM(i))\n\t  sbit[i]"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  sbit[i] = 2;\n\telse\n\t  sbit[i]"..., 'I', 11044) = 0x025a37da
[0x40cdf3] memchr("If the previous character was a "..., '\n', 10263) = 0x025a380f
[0x4022d1] memchr("\t  sbit[i] = 2;\n\telse\n\t  sbit[i]"..., '\n', 772) = 0x025a34dc
[0x4022d1] memchr("\telse\n\t  sbit[i] = 1;\n    }\n\n  i"..., '\n', 756) = 0x025a34e2
[0x4022d1] memchr("\t  sbit[i] = 1;\n    }\n\n  if (! d"..., '\n', 750) = 0x025a34f2
[0x4022d1] memchr("    }\n\n  if (! d->tralloc)\n    b"..., '\n', 734) = 0x025a34f8
[0x4022d1] memchr("\n  if (! d->tralloc)\n    build_s"..., '\n', 728) = 0x025a34f9
[0x4022d1] memchr("  if (! d->tralloc)\n    build_st"..., '\n', 727) = 0x025a350d
[0x4022d1] memchr("    build_state_zero(d);\n\n  s = "..., '\n', 707) = 0x025a3526
[0x4022d1] memchr("\n  s = s1 = 0;\n  p = (unsigned c"..., '\n', 682) = 0x025a3527
[0x4022d1] memchr("  s = s1 = 0;\n  p = (unsigned ch"..., '\n', 681) = 0x025a3535
[0x4022d1] memchr("  p = (unsigned char *) begin;\n "..., '\n', 667) = 0x025a3554
[0x4022d1] memchr("  trans = d->trans;\n  *end = '\\n"..., '\n', 636) = 0x025a3568
[0x4022d1] memchr("  *end = '\\n';\n\n  for (;;)\n    {"..., '\n', 616) = 0x025a3577
[0x4022d1] memchr("\n  for (;;)\n    {\n      /* The d"..., '\n', 601) = 0x025a3578
[0x4022d1] memchr("  for (;;)\n    {\n      /* The dr"..., '\n', 600) = 0x025a3583
[0x4022d1] memchr("    {\n      /* The dreaded inner"..., '\n', 589) = 0x025a3589
[0x4022d1] memchr("      /* The dreaded inner loop."..., '\n', 583) = 0x025a35ad
[0x4022d1] memchr("      if ((t = trans[s]) != 0)\n\t"..., '\n', 547) = 0x025a35cc
[0x4022d1] memchr("\tdo\n\t  {\n\t    s1 = t[*p++];\n\t   "..., '\n', 516) = 0x025a35d0
[0x4022d1] memchr("\t  {\n\t    s1 = t[*p++];\n\t    if "..., '\n', 512) = 0x025a35d5
[0x4022d1] memchr("\t    s1 = t[*p++];\n\t    if (! (t"..., '\n', 507) = 0x025a35e8
[0x4022d1] memchr("\t    if (! (t = trans[s1]))\n\t   "..., '\n', 488) = 0x025a3604
[0x4022d1] memchr("\t      goto last_was_s;\n\t    s ="..., '\n', 460) = 0x025a361c
[0x4022d1] memchr("\t    s = t[*p++];\n\t  }\n        w"..., '\n', 436) = 0x025a362e
[0x4022d1] memchr("\t  }\n        while ((t = trans[s"..., '\n', 418) = 0x025a3633
[0x4022d1] memchr("        while ((t = trans[s]) !="..., '\n', 413) = 0x025a3658
[0x4022d1] memchr("      goto last_was_s1;\n    last"..., '\n', 376) = 0x025a3670
[0x4022d1] memchr("    last_was_s:\n      tmp = s, s"..., '\n', 352) = 0x025a3680
[0x4022d1] memchr("      tmp = s, s = s1, s1 = tmp;"..., '\n', 336) = 0x025a36a1
[0x4022d1] memchr("    last_was_s1:\n\n      if (s >="..., '\n', 303) = 0x025a36b2
[0x4022d1] memchr("\n      if (s >= 0 && p <= (unsig"..., '\n', 286) = 0x025a36b3
[0x4022d1] memchr("      if (s >= 0 && p <= (unsign"..., '\n', 285) = 0x025a36f2
[0x4022d1] memchr("\t{\n\t  if (d->success[s] & sbit[*"..., '\n', 222) = 0x025a36f5
[0x4022d1] memchr("\t  if (d->success[s] & sbit[*p])"..., '\n', 219) = 0x025a3716
[0x4022d1] memchr("\t    {\n\t      if (backref)\n\t\tif "..., '\n', 186) = 0x025a371d
[0x4022d1] memchr("\t      if (backref)\n\t\tif (d->sta"..., '\n', 179) = 0x025a3731
[0x4022d1] memchr("\t\tif (d->states[s].backref)\n\t\t  "..., '\n', 159) = 0x025a374d
[0x4022d1] memchr("\t\t  *backref = 1;\n\t\telse\n\t\t  *ba"..., '\n', 131) = 0x025a375f
[0x4022d1] memchr("\t\telse\n\t\t  *backref = 0;\n\t      "..., '\n', 113) = 0x025a3766
[0x4022d1] memchr("\t\t  *backref = 0;\n\t      return "..., '\n', 106) = 0x025a3778
[0x4022d1] memchr("\t      return (char *) p;\n\t    }"..., '\n', 88) = 0x025a3792
[0x4022d1] memchr("\t    }\n\n\t  s1 = s;\n\t  s = d->fai"..., '\n', 62) = 0x025a3799
[0x4022d1] memchr("\n\t  s1 = s;\n\t  s = d->fails[s][*"..., '\n', 55) = 0x025a379a
[0x4022d1] memchr("\t  s1 = s;\n\t  s = d->fails[s][*p"..., '\n', 54) = 0x025a37a5
[0x4022d1] memchr("\t  s = d->fails[s][*p++];\n\t  con"..., '\n', 43) = 0x025a37bf
[0x4022d1] memchr("\t  continue;\n\t}\n\n      /* If the"..., '\n', 17) = 0x025a37cc
[0x4022d1] memchr("\t}\n\n      /* If the previous cha"..., '\n', 4) = 0x025a37cf
[0x4022d1] memchr("\n      /* If the previous charac"..., '\n', 1) = 0x025a37d0
[0x4022d1] memchr("      /* If the previous charact"..., '\n', 0) = NULL
[0x4023cc] fwrite("8485:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("      /* If the previous charact"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      if (count && (char *) p <="..., 'I', 10209) = 0x025a3972
[0x40cdf3] memchr("Initialize the components of a d"..., '\n', 9855) = 0x025a39b2
[0x4022d1] memchr("      if (count && (char *) p <="..., '\n', 351) = 0x025a3846
[0x4022d1] memchr("\t++*count;\n\n      /* Check if we"..., '\n', 296) = 0x025a3851
[0x4022d1] memchr("\n      /* Check if we've run off"..., '\n', 285) = 0x025a3852
[0x4022d1] memchr("      /* Check if we've run off "..., '\n', 284) = 0x025a388c
[0x4022d1] memchr("      if ((char *) p > end)\n\tret"..., '\n', 226) = 0x025a38a8
[0x4022d1] memchr("\treturn NULL;\n\n      if (s >= 0)"..., '\n', 198) = 0x025a38b6
[0x4022d1] memchr("\n      if (s >= 0)\n\t{\n\t  build_s"..., '\n', 184) = 0x025a38b7
[0x4022d1] memchr("      if (s >= 0)\n\t{\n\t  build_st"..., '\n', 183) = 0x025a38c9
[0x4022d1] memchr("\t{\n\t  build_state(s, d);\n\t  tran"..., '\n', 165) = 0x025a38cc
[0x4022d1] memchr("\t  build_state(s, d);\n\t  trans ="..., '\n', 162) = 0x025a38e2
[0x4022d1] memchr("\t  trans = d->trans;\n\t  continue"..., '\n', 140) = 0x025a38f7
[0x4022d1] memchr("\t  continue;\n\t}\n\n      if (p[-1]"..., '\n', 119) = 0x025a3904
[0x4022d1] memchr("\t}\n\n      if (p[-1] == '\\n' && n"..., '\n', 106) = 0x025a3907
[0x4022d1] memchr("\n      if (p[-1] == '\\n' && newl"..., '\n', 103) = 0x025a3908
[0x4022d1] memchr("      if (p[-1] == '\\n' && newli"..., '\n', 102) = 0x025a392c
[0x4022d1] memchr("\t{\n\t  s = d->newlines[s1];\n\t  co"..., '\n', 66) = 0x025a392f
[0x4022d1] memchr("\t  s = d->newlines[s1];\n\t  conti"..., '\n', 63) = 0x025a3947
[0x4022d1] memchr("\t  continue;\n\t}\n\n      s = 0;\n  "..., '\n', 39) = 0x025a3954
[0x4022d1] memchr("\t}\n\n      s = 0;\n    }\n}\n\n/* Ini"..., '\n', 26) = 0x025a3957
[0x4022d1] memchr("\n      s = 0;\n    }\n}\n\n/* Initia"..., '\n', 23) = 0x025a3958
[0x4022d1] memchr("      s = 0;\n    }\n}\n\n/* Initial"..., '\n', 22) = 0x025a3965
[0x4022d1] memchr("    }\n}\n\n/* Initialize the compo"..., '\n', 9) = 0x025a396b
[0x4022d1] memchr("}\n\n/* Initialize the components "..., '\n', 3) = 0x025a396d
[0x4022d1] memchr("\n/* Initialize the components of"..., '\n', 1) = 0x025a396e
[0x4022d1] memchr("/* Initialize the components of "..., '\n', 0) = NULL
[0x4023cc] fwrite("8510:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* Initialize the components of "..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   initialize for themselves. */"..., 'I', 9790) = 0x025a3cac
[0x40cdf3] memchr("ISUPPER(s[i]))\n\t  copy[i] = tolo"..., '\n', 9029) = 0x025a3cba
[0x4022d1] memchr("   initialize for themselves. */"..., '\n', 756) = 0x025a39d3
[0x4022d1] memchr("void\ndfainit(d)\n     struct dfa "..., '\n', 723) = 0x025a39d8
[0x4022d1] memchr("dfainit(d)\n     struct dfa *d;\n{"..., '\n', 718) = 0x025a39e3
[0x4022d1] memchr("     struct dfa *d;\n{\n  d->callo"..., '\n', 707) = 0x025a39f7
[0x4022d1] memchr("{\n  d->calloc = 1;\n  MALLOC(d->c"..., '\n', 687) = 0x025a39f9
[0x4022d1] memchr("  d->calloc = 1;\n  MALLOC(d->cha"..., '\n', 685) = 0x025a3a0a
[0x4022d1] memchr("  MALLOC(d->charclasses, charcla"..., '\n', 668) = 0x025a3a3a
[0x4022d1] memchr("  d->cindex = 0;\n\n  d->talloc = "..., '\n', 620) = 0x025a3a4b
[0x4022d1] memchr("\n  d->talloc = 1;\n  MALLOC(d->to"..., '\n', 603) = 0x025a3a4c
[0x4022d1] memchr("  d->talloc = 1;\n  MALLOC(d->tok"..., '\n', 602) = 0x025a3a5d
[0x4022d1] memchr("  MALLOC(d->tokens, token, d->ta"..., '\n', 585) = 0x025a3a84
[0x4022d1] memchr("  d->tindex = d->depth = d->nlea"..., '\n', 546) = 0x025a3abb
[0x4022d1] memchr("\n  d->searchflag = 0;\n  d->trall"..., '\n', 491) = 0x025a3abc
[0x4022d1] memchr("  d->searchflag = 0;\n  d->trallo"..., '\n', 490) = 0x025a3ad1
[0x4022d1] memchr("  d->tralloc = 0;\n\n  d->musts = "..., '\n', 469) = 0x025a3ae3
[0x4022d1] memchr("\n  d->musts = 0;\n}\n\n/* Parse and"..., '\n', 451) = 0x025a3ae4
[0x4022d1] memchr("  d->musts = 0;\n}\n\n/* Parse and "..., '\n', 450) = 0x025a3af4
[0x4022d1] memchr("}\n\n/* Parse and analyze a single"..., '\n', 434) = 0x025a3af6
[0x4022d1] memchr("\n/* Parse and analyze a single s"..., '\n', 432) = 0x025a3af7
[0x4022d1] memchr("/* Parse and analyze a single st"..., '\n', 431) = 0x025a3b34
[0x4022d1] memchr("void\ndfacomp(s, len, d, searchfl"..., '\n', 370) = 0x025a3b39
[0x4022d1] memchr("dfacomp(s, len, d, searchflag)\n "..., '\n', 365) = 0x025a3b58
[0x4022d1] memchr("     char *s;\n     size_t len;\n "..., '\n', 334) = 0x025a3b66
[0x4022d1] memchr("     size_t len;\n     struct dfa"..., '\n', 320) = 0x025a3b77
[0x4022d1] memchr("     struct dfa *d;\n     int sea"..., '\n', 303) = 0x025a3b8b
[0x4022d1] memchr("     int searchflag;\n{\n  if (cas"..., '\n', 283) = 0x025a3ba0
[0x4022d1] memchr("{\n  if (case_fold)\t/* dummy fold"..., '\n', 262) = 0x025a3ba2
[0x4022d1] memchr("  if (case_fold)\t/* dummy foldin"..., '\n', 260) = 0x025a3bdf
[0x4022d1] memchr("    {\n      char *copy;\n      in"..., '\n', 199) = 0x025a3be5
[0x4022d1] memchr("      char *copy;\n      int i;\n\n"..., '\n', 193) = 0x025a3bf7
[0x4022d1] memchr("      int i;\n\n      copy = mallo"..., '\n', 175) = 0x025a3c04
[0x4022d1] memchr("\n      copy = malloc(len);\n     "..., '\n', 162) = 0x025a3c05
[0x4022d1] memchr("      copy = malloc(len);\n      "..., '\n', 161) = 0x025a3c1f
[0x4022d1] memchr("      if (!copy)\n\tdfaerror("out "..., '\n', 135) = 0x025a3c30
[0x4022d1] memchr("\tdfaerror("out of memory");\n    "..., '\n', 118) = 0x025a3c4c
[0x4022d1] memchr("      \n      /* This is a kludge"..., '\n', 90) = 0x025a3c53
[0x4022d1] memchr("      /* This is a kludge. */\n  "..., '\n', 83) = 0x025a3c71
[0x4022d1] memchr("      case_fold = 0;\n      for ("..., '\n', 53) = 0x025a3c86
[0x4022d1] memchr("      for (i = 0; i < len; ++i)\n"..., '\n', 32) = 0x025a3ca6
[0x4022d1] memchr("\tif (ISUPPER(s[i]))\n\t  copy[i] ="..., '\n', 0) = NULL
[0x4023cc] fwrite("8550:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tif (ISUPPER(s[i]))\n\t  copy[i] ="..., 1, 20, 0x7f498147f260) = 20
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  copy[i] = tolower(s[i]);\n\tels"..., 'I', 9014) = 0x025a4597
[0x40cdf3] memchr("I c)\n   are shown below.  "p" is"..., '\n', 6746) = 0x025a459b
[0x4022d1] memchr("\t  copy[i] = tolower(s[i]);\n\tels"..., '\n', 2196) = 0x025a3cd6
[0x4022d1] memchr("\telse\n\t  copy[i] = s[i];\n\n      "..., '\n', 2168) = 0x025a3cdc
[0x4022d1] memchr("\t  copy[i] = s[i];\n\n      dfaini"..., '\n', 2162) = 0x025a3cef
[0x4022d1] memchr("\n      dfainit(d);\n      dfapars"..., '\n', 2143) = 0x025a3cf0
[0x4022d1] memchr("      dfainit(d);\n      dfaparse"..., '\n', 2142) = 0x025a3d02
[0x4022d1] memchr("      dfaparse(copy, len, d);\n  "..., '\n', 2124) = 0x025a3d20
[0x4022d1] memchr("      free(copy);\n      dfamust("..., '\n', 2094) = 0x025a3d32
[0x4022d1] memchr("      dfamust(d);\n      d->cinde"..., '\n', 2076) = 0x025a3d44
[0x4022d1] memchr("      d->cindex = d->tindex = d-"..., '\n', 2058) = 0x025a3d8b
[0x4022d1] memchr("      case_fold = 1;\n      dfapa"..., '\n', 1987) = 0x025a3da0
[0x4022d1] memchr("      dfaparse(s, len, d);\n     "..., '\n', 1966) = 0x025a3dbb
[0x4022d1] memchr("      dfaanalyze(d, searchflag);"..., '\n', 1939) = 0x025a3ddc
[0x4022d1] memchr("    }\n  else\n    {\n        dfain"..., '\n', 1906) = 0x025a3de2
[0x4022d1] memchr("  else\n    {\n        dfainit(d);"..., '\n', 1900) = 0x025a3de9
[0x4022d1] memchr("    {\n        dfainit(d);\n      "..., '\n', 1893) = 0x025a3def
[0x4022d1] memchr("        dfainit(d);\n        dfap"..., '\n', 1887) = 0x025a3e03
[0x4022d1] memchr("        dfaparse(s, len, d);\n\tdf"..., '\n', 1867) = 0x025a3e20
[0x4022d1] memchr("\tdfamust(d);\n        dfaanalyze("..., '\n', 1838) = 0x025a3e2d
[0x4022d1] memchr("        dfaanalyze(d, searchflag"..., '\n', 1825) = 0x025a3e50
[0x4022d1] memchr("    }\n}\n\n/* Free the storage hel"..., '\n', 1790) = 0x025a3e56
[0x4022d1] memchr("}\n\n/* Free the storage held by t"..., '\n', 1784) = 0x025a3e58
[0x4022d1] memchr("\n/* Free the storage held by the"..., '\n', 1782) = 0x025a3e59
[0x4022d1] memchr("/* Free the storage held by the "..., '\n', 1781) = 0x025a3e91
[0x4022d1] memchr("void\ndfafree(d)\n     struct dfa "..., '\n', 1725) = 0x025a3e96
[0x4022d1] memchr("dfafree(d)\n     struct dfa *d;\n{"..., '\n', 1720) = 0x025a3ea1
[0x4022d1] memchr("     struct dfa *d;\n{\n  int i;\n "..., '\n', 1709) = 0x025a3eb5
[0x4022d1] memchr("{\n  int i;\n  struct dfamust *dm,"..., '\n', 1689) = 0x025a3eb7
[0x4022d1] memchr("  int i;\n  struct dfamust *dm, *"..., '\n', 1687) = 0x025a3ec0
[0x4022d1] memchr("  struct dfamust *dm, *ndm;\n\n  f"..., '\n', 1678) = 0x025a3edc
[0x4022d1] memchr("\n  free((ptr_t) d->charclasses);"..., '\n', 1650) = 0x025a3edd
[0x4022d1] memchr("  free((ptr_t) d->charclasses);\n"..., '\n', 1649) = 0x025a3efd
[0x4022d1] memchr("  free((ptr_t) d->tokens);\n  for"..., '\n', 1617) = 0x025a3f18
[0x4022d1] memchr("  for (i = 0; i < d->sindex; ++i"..., '\n', 1590) = 0x025a3f3a
[0x4022d1] memchr("    free((ptr_t) d->states[i].el"..., '\n', 1556) = 0x025a3f66
[0x4022d1] memchr("  free((ptr_t) d->states);\n  for"..., '\n', 1512) = 0x025a3f81
[0x4022d1] memchr("  for (i = 0; i < d->tindex; ++i"..., '\n', 1485) = 0x025a3fa3
[0x4022d1] memchr("    if (d->follows[i].elems)\n   "..., '\n', 1451) = 0x025a3fc0
[0x4022d1] memchr("      free((ptr_t) d->follows[i]"..., '\n', 1422) = 0x025a3fe9
[0x4022d1] memchr("  free((ptr_t) d->follows);\n  fo"..., '\n', 1381) = 0x025a4005
[0x4022d1] memchr("  for (i = 0; i < d->tralloc; ++"..., '\n', 1353) = 0x025a4028
[0x4022d1] memchr("    if (d->trans[i])\n      free("..., '\n', 1318) = 0x025a403d
[0x4022d1] memchr("      free((ptr_t) d->trans[i]);"..., '\n', 1297) = 0x025a405e
[0x4022d1] memchr("    else if (d->fails[i])\n      "..., '\n', 1264) = 0x025a4078
[0x4022d1] memchr("      free((ptr_t) d->fails[i]);"..., '\n', 1238) = 0x025a4099
[0x4022d1] memchr("  free((ptr_t) d->realtrans);\n  "..., '\n', 1205) = 0x025a40b7
[0x4022d1] memchr("  free((ptr_t) d->fails);\n  free"..., '\n', 1175) = 0x025a40d1
[0x4022d1] memchr("  free((ptr_t) d->newlines);\n  f"..., '\n', 1149) = 0x025a40ee
[0x4022d1] memchr("  for (dm = d->musts; dm; dm = n"..., '\n', 1120) = 0x025a4112
[0x4022d1] memchr("    {\n      ndm = dm->next;\n    "..., '\n', 1084) = 0x025a4118
[0x4022d1] memchr("      ndm = dm->next;\n      free"..., '\n', 1078) = 0x025a412e
[0x4022d1] memchr("      free(dm->must);\n      free"..., '\n', 1056) = 0x025a4144
[0x4022d1] memchr("      free((ptr_t) dm);\n    }\n}\n"..., '\n', 1034) = 0x025a415c
[0x4022d1] memchr("    }\n}\n\n/* Having found the pos"..., '\n', 1010) = 0x025a4162
[0x4022d1] memchr("}\n\n/* Having found the postfix r"..., '\n', 1004) = 0x025a4164
[0x4022d1] memchr("\n/* Having found the postfix rep"..., '\n', 1002) = 0x025a4165
[0x4022d1] memchr("/* Having found the postfix repr"..., '\n', 1001) = 0x025a41ab
[0x4022d1] memchr("   try to find a long sequence o"..., '\n', 931) = 0x025a41f5
[0x4022d1] memchr("   containing the r.e.\n   Findin"..., '\n', 857) = 0x025a420c
[0x4022d1] memchr("   Finding a "longest" sequence "..., '\n', 834) = 0x025a4246
[0x4022d1] memchr("   we take an easy way out and h"..., '\n', 776) = 0x025a4278
[0x4022d1] memchr("   (Take "(ab|a)b"--please.)\n\n  "..., '\n', 726) = 0x025a4295
[0x4022d1] memchr("\n   We do a bottom-up calculatio"..., '\n', 697) = 0x025a4296
[0x4022d1] memchr("   We do a bottom-up calculation"..., '\n', 696) = 0x025a42e3
[0x4022d1] memchr("   in matches of r.e.'s represen"..., '\n', 619) = 0x025a4333
[0x4022d1] memchr("   representation:\n\tsequences th"..., '\n', 539) = 0x025a4346
[0x4022d1] memchr("\tsequences that must appear at t"..., '\n', 520) = 0x025a4384
[0x4022d1] memchr("\tsequences that must appear at t"..., '\n', 458) = 0x025a43c4
[0x4022d1] memchr("\tlists of sequences that must ap"..., '\n', 394) = 0x025a4407
[0x4022d1] memchr("\tsequences that must constitute "..., '\n', 327) = 0x025a4438
[0x4022d1] memchr("\n   When we get to the root of t"..., '\n', 278) = 0x025a4439
[0x4022d1] memchr("   When we get to the root of th"..., '\n', 277) = 0x025a4482
[0x4022d1] memchr("   calculated "in" sequences as "..., '\n', 204) = 0x025a44d3
[0x4022d1] memchr("   d->must (where "d" is the sin"..., '\n', 123) = 0x025a4516
[0x4022d1] memchr("   the length of the sequence is"..., '\n', 56) = 0x025a454d
[0x4022d1] memchr("\n   The sequences calculated for"..., '\n', 1) = 0x025a454e
[0x4022d1] memchr("   The sequences calculated for "..., '\n', 0) = NULL
[0x4023cc] fwrite("8626:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   The sequences calculated for "..., 1, 77, 0x7f498147f260) = 77
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   are shown below.  "p" is the "..., 'I', 6741) = 0x025a48fc
[0x40cdf3] memchr("If there's anything else we reco"..., '\n', 5877) = 0x025a4949
[0x4022d1] memchr("   are shown below.  "p" is the "..., '\n', 861) = 0x025a45e9
[0x4022d1] memchr("   operand of binary operators);"..., '\n', 783) = 0x025a4632
[0x4022d1] memchr("   operators.\n\n   "ZERO" means ""..., '\n', 710) = 0x025a4640
[0x4022d1] memchr("\n   "ZERO" means "a zero-length "..., '\n', 696) = 0x025a4641
[0x4022d1] memchr("   "ZERO" means "a zero-length s"..., '\n', 695) = 0x025a4671
[0x4022d1] memchr("\n\tType\tleft\t\tright\t\tis\t\tin\n\t----"..., '\n', 647) = 0x025a4672
[0x4022d1] memchr("\tType\tleft\t\tright\t\tis\t\tin\n\t----\t"..., '\n', 646) = 0x025a468c
[0x4022d1] memchr("\t----\t----\t\t-----\t\t--\t\t--\n\tchar "..., '\n', 620) = 0x025a46a6
[0x4022d1] memchr("\tchar c\t# c\t\t# c\t\t# c\t\t# c\n\t\n\tCS"..., '\n', 594) = 0x025a46c1
[0x4022d1] memchr("\t\n\tCSET\tZERO\t\tZERO\t\tZERO\t\tZERO\n\t"..., '\n', 567) = 0x025a46c3
[0x4022d1] memchr("\tCSET\tZERO\t\tZERO\t\tZERO\t\tZERO\n\t\n\t"..., '\n', 565) = 0x025a46e0
[0x4022d1] memchr("\t\n\tSTAR\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n"..., '\n', 536) = 0x025a46e2
[0x4022d1] memchr("\tSTAR\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n\tQ"..., '\n', 534) = 0x025a46ff
[0x4022d1] memchr("\n\tQMARK\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n"..., '\n', 505) = 0x025a4700
[0x4022d1] memchr("\tQMARK\tZERO\t\tZERO\t\tZERO\t\tZERO\n\n\t"..., '\n', 504) = 0x025a471e
[0x4022d1] memchr("\n\tPLUS\tp->left\t\tp->right\tZERO\t\tp"..., '\n', 474) = 0x025a471f
[0x4022d1] memchr("\tPLUS\tp->left\t\tp->right\tZERO\t\tp-"..., '\n', 473) = 0x025a4743
[0x4022d1] memchr("\n\tCAT\t(p->is==ZERO)?\t(q->is==ZER"..., '\n', 437) = 0x025a4744
[0x4022d1] memchr("\tCAT\t(p->is==ZERO)?\t(q->is==ZERO"..., '\n', 436) = 0x025a4782
[0x4022d1] memchr("\t\tp->left :\tq->right :\tq->is!=ZE"..., '\n', 374) = 0x025a47b3
[0x4022d1] memchr("\t\tp->is##q->left\tp->right##q->is"..., '\n', 325) = 0x025a47f5
[0x4022d1] memchr("\t\t\t\t\t\tZERO\n\t\t\t\t\t\n\tOR\tlongest com"..., '\n', 259) = 0x025a4800
[0x4022d1] memchr("\t\t\t\t\t\n\tOR\tlongest common\tlongest"..., '\n', 248) = 0x025a4806
[0x4022d1] memchr("\tOR\tlongest common\tlongest commo"..., '\n', 242) = 0x025a484b
[0x4022d1] memchr("\t\tleading\t\ttrailing\tq->is have s"..., '\n', 173) = 0x025a487f
[0x4022d1] memchr("\t\t(sub)sequence\t(sub)sequence\tle"..., '\n', 121) = 0x025a48a9
[0x4022d1] memchr("\t\tof p->left\tof p->right\tcontent"..., '\n', 79) = 0x025a48ce
[0x4022d1] memchr("\t\tand q->left\tand q->right\tp->is"..., '\n', 42) = 0x025a48f7
[0x4022d1] memchr("\n   If there's anything else we "..., '\n', 1) = 0x025a48f8
[0x4022d1] memchr("   If there's anything else we r"..., '\n', 0) = NULL
[0x4023cc] fwrite("8656:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   If there's anything else we r"..., 1, 81, 0x7f498147f260) = 81
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   to zero-length sequences.  If"..., 'I', 5799) = 0x025a4968
[0x40cdf3] memchr("If there's something we don't re"..., '\n', 5769) = 0x025a499c
[0x4022d1] memchr("   to zero-length sequences.  If"..., '\n', 0) = NULL
[0x4023cc] fwrite("8657:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   to zero-length sequences.  If"..., 1, 83, 0x7f498147f260) = 83
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   we just return a zero-length "..., 'I', 5716) = 0x025a4bca
[0x40cdf3] memchr("Is optimization easy (enough)?\n\n"..., '\n', 5159) = 0x025a4be8
[0x4022d1] memchr("   we just return a zero-length "..., '\n', 554) = 0x025a49c6
[0x4022d1] memchr("\n   Break ties in favor of infre"..., '\n', 512) = 0x025a49c7
[0x4022d1] memchr("   Break ties in favor of infreq"..., '\n', 511) = 0x025a4a15
[0x4022d1] memchr("   'aaa')?\n\n   And. . .is it her"..., '\n', 433) = 0x025a4a20
[0x4022d1] memchr("\n   And. . .is it here or somepl"..., '\n', 422) = 0x025a4a21
[0x4022d1] memchr("   And. . .is it here or somepla"..., '\n', 421) = 0x025a4a71
[0x4022d1] memchr("\tegrep 'psi|epsilon'\t->\tegrep 'p"..., '\n', 341) = 0x025a4a95
[0x4022d1] memchr("\tegrep 'pepsi|epsilon'\t->\tegrep "..., '\n', 305) = 0x025a4abc
[0x4022d1] memchr("\t\t\t\t\t(Yes, we now find "epsi" as"..., '\n', 266) = 0x025a4ae7
[0x4022d1] memchr("\t\t\t\t\tthat must occur", but we mi"..., '\n', 223) = 0x025a4b10
[0x4022d1] memchr("\t\t\t\t\tsimplify the *entire* r.e. "..., '\n', 182) = 0x025a4b3e
[0x4022d1] memchr("\tgrep '[c]'\t\t->\tgrep 'c'\n\tgrep '"..., '\n', 136) = 0x025a4b57
[0x4022d1] memchr("\tgrep '(ab|a)b'\t\t->\tgrep 'ab'\n\tg"..., '\n', 111) = 0x025a4b75
[0x4022d1] memchr("\tgrep 'ab*'\t\t->\tgrep 'a'\n\tgrep '"..., '\n', 81) = 0x025a4b8e
[0x4022d1] memchr("\tgrep 'a*b'\t\t->\tgrep 'b'\n\n   The"..., '\n', 56) = 0x025a4ba7
[0x4022d1] memchr("\n   There are several issues:\n\n "..., '\n', 31) = 0x025a4ba8
[0x4022d1] memchr("   There are several issues:\n\n  "..., '\n', 30) = 0x025a4bc5
[0x4022d1] memchr("\n   Is optimization easy (enough"..., '\n', 1) = 0x025a4bc6
[0x4022d1] memchr("   Is optimization easy (enough)"..., '\n', 0) = NULL
[0x4023cc] fwrite("8676:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Is optimization easy (enough)"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Does optimization actually a"..., 'I', 5128) = 0x025a527c
[0x40cdf3] memchr("Is there already something in th"..., '\n', 3445) = 0x025a52bd
[0x4022d1] memchr("\n   Does optimization actually a"..., '\n', 1678) = 0x025a4be9
[0x4022d1] memchr("   Does optimization actually ac"..., '\n', 1677) = 0x025a4c1c
[0x4022d1] memchr("   or is the automaton you get f"..., '\n', 1626) = 0x025a4c5c
[0x4022d1] memchr("   the same as the one you get f"..., '\n', 1562) = 0x025a4c95
[0x4022d1] memchr("  \n   Are optimizable r.e.'s lik"..., '\n', 1505) = 0x025a4c98
[0x4022d1] memchr("   Are optimizable r.e.'s likely"..., '\n', 1502) = 0x025a4cdc
[0x4022d1] memchr("   (something like 'ab*' is prob"..., '\n', 1434) = 0x025a4d1d
[0x4022d1] memchr("   'psi|epsilon' is likelier)? *"..., '\n', 1369) = 0x025a4d3f
[0x4022d1] memchr("\nstatic char *\nicatalloc(old, ne"..., '\n', 1335) = 0x025a4d40
[0x4022d1] memchr("static char *\nicatalloc(old, new"..., '\n', 1334) = 0x025a4d4e
[0x4022d1] memchr("icatalloc(old, new)\n     char *o"..., '\n', 1320) = 0x025a4d62
[0x4022d1] memchr("     char *old;\n     char *new;\n"..., '\n', 1300) = 0x025a4d72
[0x4022d1] memchr("     char *new;\n{\n  char *result"..., '\n', 1284) = 0x025a4d82
[0x4022d1] memchr("{\n  char *result;\n  int oldsize,"..., '\n', 1268) = 0x025a4d84
[0x4022d1] memchr("  char *result;\n  int oldsize, n"..., '\n', 1266) = 0x025a4d94
[0x4022d1] memchr("  int oldsize, newsize;\n\n  newsi"..., '\n', 1250) = 0x025a4dac
[0x4022d1] memchr("\n  newsize = (new == NULL) ? 0 :"..., '\n', 1226) = 0x025a4dad
[0x4022d1] memchr("  newsize = (new == NULL) ? 0 : "..., '\n', 1225) = 0x025a4dda
[0x4022d1] memchr("  if (old == NULL)\n    oldsize ="..., '\n', 1180) = 0x025a4ded
[0x4022d1] memchr("    oldsize = 0;\n  else if (news"..., '\n', 1161) = 0x025a4dfe
[0x4022d1] memchr("  else if (newsize == 0)\n    ret"..., '\n', 1144) = 0x025a4e17
[0x4022d1] memchr("    return old;\n  else\toldsize ="..., '\n', 1119) = 0x025a4e27
[0x4022d1] memchr("  else\toldsize = strlen(old);\n  "..., '\n', 1103) = 0x025a4e45
[0x4022d1] memchr("  if (old == NULL)\n    result = "..., '\n', 1073) = 0x025a4e58
[0x4022d1] memchr("    result = (char *) malloc(new"..., '\n', 1054) = 0x025a4e83
[0x4022d1] memchr("  else\n    result = (char *) rea"..., '\n', 1011) = 0x025a4e8a
[0x4022d1] memchr("    result = (char *) realloc((v"..., '\n', 1004) = 0x025a4ece
[0x4022d1] memchr("  if (result != NULL && new != N"..., '\n', 936) = 0x025a4ef3
[0x4022d1] memchr("    (void) strcpy(result + oldsi"..., '\n', 899) = 0x025a4f1d
[0x4022d1] memchr("  return result;\n}\n\nstatic char "..., '\n', 857) = 0x025a4f2e
[0x4022d1] memchr("}\n\nstatic char *\nicpyalloc(strin"..., '\n', 840) = 0x025a4f30
[0x4022d1] memchr("\nstatic char *\nicpyalloc(string)"..., '\n', 838) = 0x025a4f31
[0x4022d1] memchr("static char *\nicpyalloc(string)\n"..., '\n', 837) = 0x025a4f3f
[0x4022d1] memchr("icpyalloc(string)\n     char *str"..., '\n', 823) = 0x025a4f51
[0x4022d1] memchr("     char *string;\n{\n  return ic"..., '\n', 805) = 0x025a4f64
[0x4022d1] memchr("{\n  return icatalloc((char *) NU"..., '\n', 786) = 0x025a4f66
[0x4022d1] memchr("  return icatalloc((char *) NULL"..., '\n', 784) = 0x025a4f91
[0x4022d1] memchr("}\n\nstatic char *\nistrstr(lookin,"..., '\n', 741) = 0x025a4f93
[0x4022d1] memchr("\nstatic char *\nistrstr(lookin, l"..., '\n', 739) = 0x025a4f94
[0x4022d1] memchr("static char *\nistrstr(lookin, lo"..., '\n', 738) = 0x025a4fa2
[0x4022d1] memchr("istrstr(lookin, lookfor)\n     ch"..., '\n', 724) = 0x025a4fbb
[0x4022d1] memchr("     char *lookin;\n     char *lo"..., '\n', 699) = 0x025a4fce
[0x4022d1] memchr("     char *lookfor;\n{\n  char *cp"..., '\n', 680) = 0x025a4fe2
[0x4022d1] memchr("{\n  char *cp;\n  int len;\n\n  len "..., '\n', 660) = 0x025a4fe4
[0x4022d1] memchr("  char *cp;\n  int len;\n\n  len = "..., '\n', 658) = 0x025a4ff0
[0x4022d1] memchr("  int len;\n\n  len = strlen(lookf"..., '\n', 646) = 0x025a4ffb
[0x4022d1] memchr("\n  len = strlen(lookfor);\n  for "..., '\n', 635) = 0x025a4ffc
[0x4022d1] memchr("  len = strlen(lookfor);\n  for ("..., '\n', 634) = 0x025a5015
[0x4022d1] memchr("  for (cp = lookin; *cp != '\\0';"..., '\n', 609) = 0x025a503c
[0x4022d1] memchr("    if (strncmp(cp, lookfor, len"..., '\n', 570) = 0x025a5064
[0x4022d1] memchr("      return cp;\n  return NULL;\n"..., '\n', 530) = 0x025a5075
[0x4022d1] memchr("  return NULL;\n}\n\nstatic void\nif"..., '\n', 513) = 0x025a5084
[0x4022d1] memchr("}\n\nstatic void\nifree(cp)\n     ch"..., '\n', 498) = 0x025a5086
[0x4022d1] memchr("\nstatic void\nifree(cp)\n     char"..., '\n', 496) = 0x025a5087
[0x4022d1] memchr("static void\nifree(cp)\n     char "..., '\n', 495) = 0x025a5093
[0x4022d1] memchr("ifree(cp)\n     char *cp;\n{\n  if "..., '\n', 483) = 0x025a509d
[0x4022d1] memchr("     char *cp;\n{\n  if (cp != NUL"..., '\n', 473) = 0x025a50ac
[0x4022d1] memchr("{\n  if (cp != NULL)\n    free(cp)"..., '\n', 458) = 0x025a50ae
[0x4022d1] memchr("  if (cp != NULL)\n    free(cp);\n"..., '\n', 456) = 0x025a50c0
[0x4022d1] memchr("    free(cp);\n}\n\nstatic void\nfre"..., '\n', 438) = 0x025a50ce
[0x4022d1] memchr("}\n\nstatic void\nfreelist(cpp)\n   "..., '\n', 424) = 0x025a50d0
[0x4022d1] memchr("\nstatic void\nfreelist(cpp)\n     "..., '\n', 422) = 0x025a50d1
[0x4022d1] memchr("static void\nfreelist(cpp)\n     c"..., '\n', 421) = 0x025a50dd
[0x4022d1] memchr("freelist(cpp)\n     char **cpp;\n{"..., '\n', 409) = 0x025a50eb
[0x4022d1] memchr("     char **cpp;\n{\n  int i;\n\n  i"..., '\n', 395) = 0x025a50fc
[0x4022d1] memchr("{\n  int i;\n\n  if (cpp == NULL)\n "..., '\n', 378) = 0x025a50fe
[0x4022d1] memchr("  int i;\n\n  if (cpp == NULL)\n   "..., '\n', 376) = 0x025a5107
[0x4022d1] memchr("\n  if (cpp == NULL)\n    return;\n"..., '\n', 367) = 0x025a5108
[0x4022d1] memchr("  if (cpp == NULL)\n    return;\n "..., '\n', 366) = 0x025a511b
[0x4022d1] memchr("    return;\n  for (i = 0; cpp[i]"..., '\n', 347) = 0x025a5127
[0x4022d1] memchr("  for (i = 0; cpp[i] != NULL; ++"..., '\n', 335) = 0x025a514a
[0x4022d1] memchr("    {\n      free(cpp[i]);\n      "..., '\n', 300) = 0x025a5150
[0x4022d1] memchr("      free(cpp[i]);\n      cpp[i]"..., '\n', 294) = 0x025a5164
[0x4022d1] memchr("      cpp[i] = NULL;\n    }\n}\n\nst"..., '\n', 274) = 0x025a5179
[0x4022d1] memchr("    }\n}\n\nstatic char **\nenlist(c"..., '\n', 253) = 0x025a517f
[0x4022d1] memchr("}\n\nstatic char **\nenlist(cpp, ne"..., '\n', 247) = 0x025a5181
[0x4022d1] memchr("\nstatic char **\nenlist(cpp, new,"..., '\n', 245) = 0x025a5182
[0x4022d1] memchr("static char **\nenlist(cpp, new, "..., '\n', 244) = 0x025a5191
[0x4022d1] memchr("enlist(cpp, new, len)\n     char "..., '\n', 229) = 0x025a51a7
[0x4022d1] memchr("     char **cpp;\n     char *new;"..., '\n', 207) = 0x025a51b8
[0x4022d1] memchr("     char *new;\n     int len;\n{\n"..., '\n', 190) = 0x025a51c8
[0x4022d1] memchr("     int len;\n{\n  int i, j;\n\n  i"..., '\n', 174) = 0x025a51d6
[0x4022d1] memchr("{\n  int i, j;\n\n  if (cpp == NULL"..., '\n', 160) = 0x025a51d8
[0x4022d1] memchr("  int i, j;\n\n  if (cpp == NULL)\n"..., '\n', 158) = 0x025a51e4
[0x4022d1] memchr("\n  if (cpp == NULL)\n    return N"..., '\n', 146) = 0x025a51e5
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 145) = 0x025a51f8
[0x4022d1] memchr("    return NULL;\n  if ((new = ic"..., '\n', 126) = 0x025a5209
[0x4022d1] memchr("  if ((new = icpyalloc(new)) == "..., '\n', 109) = 0x025a522f
[0x4022d1] memchr("    {\n      freelist(cpp);\n     "..., '\n', 71) = 0x025a5235
[0x4022d1] memchr("      freelist(cpp);\n      retur"..., '\n', 65) = 0x025a524a
[0x4022d1] memchr("      return NULL;\n    }\n  new[l"..., '\n', 44) = 0x025a525d
[0x4022d1] memchr("    }\n  new[len] = '\\0';\n  /* Is"..., '\n', 25) = 0x025a5263
[0x4022d1] memchr("  new[len] = '\\0';\n  /* Is there"..., '\n', 19) = 0x025a5276
[0x4022d1] memchr("  /* Is there already something "..., '\n', 0) = NULL
[0x4023cc] fwrite("8770:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Is there already something "..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  for (i = 0; cpp[i] != NULL; ++"..., 'I', 3379) = NULL
[0x4022d1] memchr("  for (i = 0; cpp[i] != NULL; ++"..., '\n', 3379) = 0x025a52e0
[0x4022d1] memchr("    if (istrstr(cpp[i], new) != "..., '\n', 3344) = 0x025a5306
[0x4022d1] memchr("      {\n\tfree(new);\n\treturn cpp;"..., '\n', 3306) = 0x025a530e
[0x4022d1] memchr("\tfree(new);\n\treturn cpp;\n      }"..., '\n', 3298) = 0x025a531a
[0x4022d1] memchr("\treturn cpp;\n      }\n  /* Elimin"..., '\n', 3286) = 0x025a5327
[0x4022d1] memchr("      }\n  /* Eliminate any obsol"..., '\n', 3273) = 0x025a532f
[0x4022d1] memchr("  /* Eliminate any obsoleted str"..., '\n', 3265) = 0x025a5358
[0x4022d1] memchr("  j = 0;\n  while (cpp[j] != NULL"..., '\n', 3224) = 0x025a5361
[0x4022d1] memchr("  while (cpp[j] != NULL)\n    if "..., '\n', 3215) = 0x025a537a
[0x4022d1] memchr("    if (istrstr(new, cpp[j]) == "..., '\n', 3190) = 0x025a53a0
[0x4022d1] memchr("      ++j;\n    else\n      {\n\tfre"..., '\n', 3152) = 0x025a53ab
[0x4022d1] memchr("    else\n      {\n\tfree(cpp[j]);\n"..., '\n', 3141) = 0x025a53b4
[0x4022d1] memchr("      {\n\tfree(cpp[j]);\n\tif (--i "..., '\n', 3132) = 0x025a53bc
[0x4022d1] memchr("\tfree(cpp[j]);\n\tif (--i == j)\n\t "..., '\n', 3124) = 0x025a53cb
[0x4022d1] memchr("\tif (--i == j)\n\t  break;\n\tcpp[j]"..., '\n', 3109) = 0x025a53da
[0x4022d1] memchr("\t  break;\n\tcpp[j] = cpp[i];\n\tcpp"..., '\n', 3094) = 0x025a53e4
[0x4022d1] memchr("\tcpp[j] = cpp[i];\n\tcpp[i] = NULL"..., '\n', 3084) = 0x025a53f6
[0x4022d1] memchr("\tcpp[i] = NULL;\n      }\n  /* Add"..., '\n', 3066) = 0x025a5406
[0x4022d1] memchr("      }\n  /* Add the new string."..., '\n', 3050) = 0x025a540e
[0x4022d1] memchr("  /* Add the new string. */\n  cp"..., '\n', 3042) = 0x025a542a
[0x4022d1] memchr("  cpp = (char **) realloc((char "..., '\n', 3014) = 0x025a546a
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 2950) = 0x025a547d
[0x4022d1] memchr("    return NULL;\n  cpp[i] = new;"..., '\n', 2931) = 0x025a548e
[0x4022d1] memchr("  cpp[i] = new;\n  cpp[i + 1] = N"..., '\n', 2914) = 0x025a549e
[0x4022d1] memchr("  cpp[i + 1] = NULL;\n  return cp"..., '\n', 2898) = 0x025a54b3
[0x4022d1] memchr("  return cpp;\n}\n\n/* Given pointe"..., '\n', 2877) = 0x025a54c1
[0x4022d1] memchr("}\n\n/* Given pointers to two stri"..., '\n', 2863) = 0x025a54c3
[0x4022d1] memchr("\n/* Given pointers to two string"..., '\n', 2861) = 0x025a54c4
[0x4022d1] memchr("/* Given pointers to two strings"..., '\n', 2860) = 0x025a5507
[0x4022d1] memchr("   list of their distinct common"..., '\n', 2793) = 0x025a554d
[0x4022d1] memchr("   seems wild. */\nstatic char **"..., '\n', 2723) = 0x025a555f
[0x4022d1] memchr("static char **\ncomsubs(left, rig"..., '\n', 2705) = 0x025a556e
[0x4022d1] memchr("comsubs(left, right)\n     char *"..., '\n', 2690) = 0x025a5583
[0x4022d1] memchr("     char *left;\n     char *righ"..., '\n', 2669) = 0x025a5594
[0x4022d1] memchr("     char *right;\n{\n  char **cpp"..., '\n', 2652) = 0x025a55a6
[0x4022d1] memchr("{\n  char **cpp;\n  char *lcp;\n  c"..., '\n', 2634) = 0x025a55a8
[0x4022d1] memchr("  char **cpp;\n  char *lcp;\n  cha"..., '\n', 2632) = 0x025a55b6
[0x4022d1] memchr("  char *lcp;\n  char *rcp;\n  int "..., '\n', 2618) = 0x025a55c3
[0x4022d1] memchr("  char *rcp;\n  int i, len;\n\n  if"..., '\n', 2605) = 0x025a55d0
[0x4022d1] memchr("  int i, len;\n\n  if (left == NUL"..., '\n', 2592) = 0x025a55de
[0x4022d1] memchr("\n  if (left == NULL || right == "..., '\n', 2578) = 0x025a55df
[0x4022d1] memchr("  if (left == NULL || right == N"..., '\n', 2577) = 0x025a5604
[0x4022d1] memchr("    return NULL;\n  cpp = (char *"..., '\n', 2540) = 0x025a5615
[0x4022d1] memchr("  cpp = (char **) malloc(sizeof "..., '\n', 2523) = 0x025a563c
[0x4022d1] memchr("  if (cpp == NULL)\n    return NU"..., '\n', 2484) = 0x025a564f
[0x4022d1] memchr("    return NULL;\n  cpp[0] = NULL"..., '\n', 2465) = 0x025a5660
[0x4022d1] memchr("  cpp[0] = NULL;\n  for (lcp = le"..., '\n', 2448) = 0x025a5671
[0x4022d1] memchr("  for (lcp = left; *lcp != '\\0';"..., '\n', 2431) = 0x025a5699
[0x4022d1] memchr("    {\n      len = 0;\n      rcp ="..., '\n', 2391) = 0x025a569f
[0x4022d1] memchr("      len = 0;\n      rcp = index"..., '\n', 2385) = 0x025a56ae
[0x4022d1] memchr("      rcp = index(right, *lcp);\n"..., '\n', 2370) = 0x025a56ce
[0x4022d1] memchr("      while (rcp != NULL)\n\t{\n\t  "..., '\n', 2338) = 0x025a56e8
[0x4022d1] memchr("\t{\n\t  for (i = 1; lcp[i] != '\\0'"..., '\n', 2312) = 0x025a56eb
[0x4022d1] memchr("\t  for (i = 1; lcp[i] != '\\0' &&"..., '\n', 2309) = 0x025a5723
[0x4022d1] memchr("\t    ;\n\t  if (i > len)\n\t    len "..., '\n', 2253) = 0x025a572a
[0x4022d1] memchr("\t  if (i > len)\n\t    len = i;\n\t "..., '\n', 2246) = 0x025a573a
[0x4022d1] memchr("\t    len = i;\n\t  rcp = index(rcp"..., '\n', 2230) = 0x025a5748
[0x4022d1] memchr("\t  rcp = index(rcp + 1, *lcp);\n\t"..., '\n', 2216) = 0x025a5767
[0x4022d1] memchr("\t}\n      if (len == 0)\n\tcontinue"..., '\n', 2185) = 0x025a576a
[0x4022d1] memchr("      if (len == 0)\n\tcontinue;\n "..., '\n', 2182) = 0x025a577e
[0x4022d1] memchr("\tcontinue;\n      if ((cpp = enli"..., '\n', 2162) = 0x025a5789
[0x4022d1] memchr("      if ((cpp = enlist(cpp, lcp"..., '\n', 2151) = 0x025a57ba
[0x4022d1] memchr("\tbreak;\n    }\n  return cpp;\n}\n\ns"..., '\n', 2102) = 0x025a57c2
[0x4022d1] memchr("    }\n  return cpp;\n}\n\nstatic ch"..., '\n', 2094) = 0x025a57c8
[0x4022d1] memchr("  return cpp;\n}\n\nstatic char **\n"..., '\n', 2088) = 0x025a57d6
[0x4022d1] memchr("}\n\nstatic char **\naddlists(old, "..., '\n', 2074) = 0x025a57d8
[0x4022d1] memchr("\nstatic char **\naddlists(old, ne"..., '\n', 2072) = 0x025a57d9
[0x4022d1] memchr("static char **\naddlists(old, new"..., '\n', 2071) = 0x025a57e8
[0x4022d1] memchr("addlists(old, new)\nchar **old;\nc"..., '\n', 2056) = 0x025a57fb
[0x4022d1] memchr("char **old;\nchar **new;\n{\n  int "..., '\n', 2037) = 0x025a5807
[0x4022d1] memchr("char **new;\n{\n  int i;\n\n  if (ol"..., '\n', 2025) = 0x025a5813
[0x4022d1] memchr("{\n  int i;\n\n  if (old == NULL ||"..., '\n', 2013) = 0x025a5815
[0x4022d1] memchr("  int i;\n\n  if (old == NULL || n"..., '\n', 2011) = 0x025a581e
[0x4022d1] memchr("\n  if (old == NULL || new == NUL"..., '\n', 2002) = 0x025a581f
[0x4022d1] memchr("  if (old == NULL || new == NULL"..., '\n', 2001) = 0x025a5841
[0x4022d1] memchr("    return NULL;\n  for (i = 0; n"..., '\n', 1967) = 0x025a5852
[0x4022d1] memchr("  for (i = 0; new[i] != NULL; ++"..., '\n', 1950) = 0x025a5875
[0x4022d1] memchr("    {\n      old = enlist(old, ne"..., '\n', 1915) = 0x025a587b
[0x4022d1] memchr("      old = enlist(old, new[i], "..., '\n', 1909) = 0x025a58ac
[0x4022d1] memchr("      if (old == NULL)\n\tbreak;\n "..., '\n', 1860) = 0x025a58c3
[0x4022d1] memchr("\tbreak;\n    }\n  return old;\n}\n\n/"..., '\n', 1837) = 0x025a58cb
[0x4022d1] memchr("    }\n  return old;\n}\n\n/* Given "..., '\n', 1829) = 0x025a58d1
[0x4022d1] memchr("  return old;\n}\n\n/* Given two li"..., '\n', 1823) = 0x025a58df
[0x4022d1] memchr("}\n\n/* Given two lists of substri"..., '\n', 1809) = 0x025a58e1
[0x4022d1] memchr("\n/* Given two lists of substring"..., '\n', 1807) = 0x025a58e2
[0x4022d1] memchr("/* Given two lists of substrings"..., '\n', 1806) = 0x025a5928
[0x4022d1] memchr("   common to both. */\nstatic cha"..., '\n', 1736) = 0x025a593e
[0x4022d1] memchr("static char **\ninboth(left, righ"..., '\n', 1714) = 0x025a594d
[0x4022d1] memchr("inboth(left, right)\n     char **"..., '\n', 1699) = 0x025a5961
[0x4022d1] memchr("     char **left;\n     char **ri"..., '\n', 1679) = 0x025a5973
[0x4022d1] memchr("     char **right;\n{\n  char **bo"..., '\n', 1661) = 0x025a5986
[0x4022d1] memchr("{\n  char **both;\n  char **temp;\n"..., '\n', 1642) = 0x025a5988
[0x4022d1] memchr("  char **both;\n  char **temp;\n  "..., '\n', 1640) = 0x025a5997
[0x4022d1] memchr("  char **temp;\n  int lnum, rnum;"..., '\n', 1625) = 0x025a59a6
[0x4022d1] memchr("  int lnum, rnum;\n\n  if (left =="..., '\n', 1610) = 0x025a59b8
[0x4022d1] memchr("\n  if (left == NULL || right == "..., '\n', 1592) = 0x025a59b9
[0x4022d1] memchr("  if (left == NULL || right == N"..., '\n', 1591) = 0x025a59de
[0x4022d1] memchr("    return NULL;\n  both = (char "..., '\n', 1554) = 0x025a59ef
[0x4022d1] memchr("  both = (char **) malloc(sizeof"..., '\n', 1537) = 0x025a5a18
[0x4022d1] memchr("  if (both == NULL)\n    return N"..., '\n', 1496) = 0x025a5a2c
[0x4022d1] memchr("    return NULL;\n  both[0] = NUL"..., '\n', 1476) = 0x025a5a3d
[0x4022d1] memchr("  both[0] = NULL;\n  for (lnum = "..., '\n', 1459) = 0x025a5a4f
[0x4022d1] memchr("  for (lnum = 0; left[lnum] != N"..., '\n', 1441) = 0x025a5a7c
[0x4022d1] memchr("    {\n      for (rnum = 0; right"..., '\n', 1396) = 0x025a5a82
[0x4022d1] memchr("      for (rnum = 0; right[rnum]"..., '\n', 1390) = 0x025a5ab4
[0x4022d1] memchr("\t{\n\t  temp = comsubs(left[lnum],"..., '\n', 1340) = 0x025a5ab7
[0x4022d1] memchr("\t  temp = comsubs(left[lnum], ri"..., '\n', 1337) = 0x025a5ae3
[0x4022d1] memchr("\t  if (temp == NULL)\n\t    {\n\t   "..., '\n', 1293) = 0x025a5af8
[0x4022d1] memchr("\t    {\n\t      freelist(both);\n\t "..., '\n', 1272) = 0x025a5aff
[0x4022d1] memchr("\t      freelist(both);\n\t      re"..., '\n', 1265) = 0x025a5b16
[0x4022d1] memchr("\t      return NULL;\n\t    }\n\t  bo"..., '\n', 1242) = 0x025a5b2a
[0x4022d1] memchr("\t    }\n\t  both = addlists(both, "..., '\n', 1222) = 0x025a5b31
[0x4022d1] memchr("\t  both = addlists(both, temp);\n"..., '\n', 1215) = 0x025a5b51
[0x4022d1] memchr("\t  freelist(temp);\n\t  if (both ="..., '\n', 1183) = 0x025a5b64
[0x4022d1] memchr("\t  if (both == NULL)\n\t    return"..., '\n', 1164) = 0x025a5b79
[0x4022d1] memchr("\t    return NULL;\n\t}\n    }\n  ret"..., '\n', 1143) = 0x025a5b8b
[0x4022d1] memchr("\t}\n    }\n  return both;\n}\n\ntyped"..., '\n', 1125) = 0x025a5b8e
[0x4022d1] memchr("    }\n  return both;\n}\n\ntypedef "..., '\n', 1122) = 0x025a5b94
[0x4022d1] memchr("  return both;\n}\n\ntypedef struct"..., '\n', 1116) = 0x025a5ba3
[0x4022d1] memchr("}\n\ntypedef struct\n{\n  char **in;"..., '\n', 1101) = 0x025a5ba5
[0x4022d1] memchr("\ntypedef struct\n{\n  char **in;\n "..., '\n', 1099) = 0x025a5ba6
[0x4022d1] memchr("typedef struct\n{\n  char **in;\n  "..., '\n', 1098) = 0x025a5bb5
[0x4022d1] memchr("{\n  char **in;\n  char *left;\n  c"..., '\n', 1083) = 0x025a5bb7
[0x4022d1] memchr("  char **in;\n  char *left;\n  cha"..., '\n', 1081) = 0x025a5bc4
[0x4022d1] memchr("  char *left;\n  char *right;\n  c"..., '\n', 1068) = 0x025a5bd2
[0x4022d1] memchr("  char *right;\n  char *is;\n} mus"..., '\n', 1054) = 0x025a5be1
[0x4022d1] memchr("  char *is;\n} must;\n\nstatic void"..., '\n', 1039) = 0x025a5bed
[0x4022d1] memchr("} must;\n\nstatic void\nresetmust(m"..., '\n', 1027) = 0x025a5bf5
[0x4022d1] memchr("\nstatic void\nresetmust(mp)\nmust "..., '\n', 1019) = 0x025a5bf6
[0x4022d1] memchr("static void\nresetmust(mp)\nmust *"..., '\n', 1018) = 0x025a5c02
[0x4022d1] memchr("resetmust(mp)\nmust *mp;\n{\n  mp->"..., '\n', 1006) = 0x025a5c10
[0x4022d1] memchr("must *mp;\n{\n  mp->left[0] = mp->"..., '\n', 992) = 0x025a5c1a
[0x4022d1] memchr("{\n  mp->left[0] = mp->right[0] ="..., '\n', 982) = 0x025a5c1c
[0x4022d1] memchr("  mp->left[0] = mp->right[0] = m"..., '\n', 980) = 0x025a5c4d
[0x4022d1] memchr("  freelist(mp->in);\n}\n\nstatic vo"..., '\n', 931) = 0x025a5c61
[0x4022d1] memchr("}\n\nstatic void\ndfamust(dfa)\nstru"..., '\n', 911) = 0x025a5c63
[0x4022d1] memchr("\nstatic void\ndfamust(dfa)\nstruct"..., '\n', 909) = 0x025a5c64
[0x4022d1] memchr("static void\ndfamust(dfa)\nstruct "..., '\n', 908) = 0x025a5c70
[0x4022d1] memchr("dfamust(dfa)\nstruct dfa *dfa;\n{\n"..., '\n', 896) = 0x025a5c7d
[0x4022d1] memchr("struct dfa *dfa;\n{\n  must *musts"..., '\n', 883) = 0x025a5c8e
[0x4022d1] memchr("{\n  must *musts;\n  must *mp;\n  c"..., '\n', 866) = 0x025a5c90
[0x4022d1] memchr("  must *musts;\n  must *mp;\n  cha"..., '\n', 864) = 0x025a5c9f
[0x4022d1] memchr("  must *mp;\n  char *result;\n  in"..., '\n', 849) = 0x025a5cab
[0x4022d1] memchr("  char *result;\n  int ri;\n  int "..., '\n', 837) = 0x025a5cbb
[0x4022d1] memchr("  int ri;\n  int i;\n  int exact;\n"..., '\n', 821) = 0x025a5cc5
[0x4022d1] memchr("  int i;\n  int exact;\n  token t;"..., '\n', 811) = 0x025a5cce
[0x4022d1] memchr("  int exact;\n  token t;\n  static"..., '\n', 802) = 0x025a5cdb
[0x4022d1] memchr("  token t;\n  static must must0;\n"..., '\n', 789) = 0x025a5ce6
[0x4022d1] memchr("  static must must0;\n  struct df"..., '\n', 778) = 0x025a5cfb
[0x4022d1] memchr("  struct dfamust *dm;\n\n  result "..., '\n', 757) = 0x025a5d11
[0x4022d1] memchr("\n  result = "";\n  exact = 0;\n  m"..., '\n', 735) = 0x025a5d12
[0x4022d1] memchr("  result = "";\n  exact = 0;\n  mu"..., '\n', 734) = 0x025a5d21
[0x4022d1] memchr("  exact = 0;\n  musts = (must *) "..., '\n', 719) = 0x025a5d2e
[0x4022d1] memchr("  musts = (must *) malloc((dfa->"..., '\n', 706) = 0x025a5d6c
[0x4022d1] memchr("  if (musts == NULL)\n    return;"..., '\n', 644) = 0x025a5d81
[0x4022d1] memchr("    return;\n  mp = musts;\n  for "..., '\n', 623) = 0x025a5d8d
[0x4022d1] memchr("  mp = musts;\n  for (i = 0; i <="..., '\n', 611) = 0x025a5d9b
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 597) = 0x025a5dc0
[0x4022d1] memchr("    mp[i] = must0;\n  for (i = 0;"..., '\n', 560) = 0x025a5dd3
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 541) = 0x025a5df8
[0x4022d1] memchr("    {\n      mp[i].in = (char **)"..., '\n', 504) = 0x025a5dfe
[0x4022d1] memchr("      mp[i].in = (char **) mallo"..., '\n', 498) = 0x025a5e33
[0x4022d1] memchr("      mp[i].left = malloc(2);\n  "..., '\n', 445) = 0x025a5e51
[0x4022d1] memchr("      mp[i].right = malloc(2);\n "..., '\n', 415) = 0x025a5e70
[0x4022d1] memchr("      mp[i].is = malloc(2);\n    "..., '\n', 384) = 0x025a5e8c
[0x4022d1] memchr("      if (mp[i].in == NULL || mp"..., '\n', 356) = 0x025a5ec0
[0x4022d1] memchr("\t  mp[i].right == NULL || mp[i]."..., '\n', 304) = 0x025a5eec
[0x4022d1] memchr("\tgoto done;\n      mp[i].left[0] "..., '\n', 260) = 0x025a5ef8
[0x4022d1] memchr("      mp[i].left[0] = mp[i].righ"..., '\n', 248) = 0x025a5f33
[0x4022d1] memchr("      mp[i].in[0] = NULL;\n    }\n"..., '\n', 189) = 0x025a5f4d
[0x4022d1] memchr("    }\n#ifdef DEBUG\n  fprintf(std"..., '\n', 163) = 0x025a5f53
[0x4022d1] memchr("#ifdef DEBUG\n  fprintf(stderr, ""..., '\n', 157) = 0x025a5f60
[0x4022d1] memchr("  fprintf(stderr, "dfamust:\\n");"..., '\n', 144) = 0x025a5f81
[0x4022d1] memchr("  for (i = 0; i < dfa->tindex; +"..., '\n', 111) = 0x025a5fa5
[0x4022d1] memchr("    {\n      fprintf(stderr, " %d"..., '\n', 75) = 0x025a5fab
[0x4022d1] memchr("      fprintf(stderr, " %d:", i)"..., '\n', 69) = 0x025a5fcd
[0x4022d1] memchr("      prtok(dfa->tokens[i]);\n   "..., '\n', 35) = 0x025a5fea
[0x4022d1] memchr("    }\n  putc('\\n', st", '\n', 6) = 0x025a5ff0
[0x4022d1] memchr("  putc('\\n', st", '\n', 0)   = NULL
[0x4020b3] memmove(0x259dff1, 0x25a5ff1, 15, 0x25a5ff1, 0x7f498147f260) = 0x259dff1
[0x402213] read(3, "derr);\n#endif\n  for (ri = 0; ri "..., 32768) = 32768
[0x40bc2b] memchr("  putc('\\n', stderr);\n#endif\n  f"..., 'I', 32720) = 0x0259e0b9
[0x40cdf3] memchr("INE:\n\tcase ENDLINE:\n\tcase BEGWOR"..., '\n', 32520) = 0x0259e0bd
[0x4022d1] memchr("  putc('\\n', stderr);\n#endif\n  f"..., '\n', 190) = 0x0259e006
[0x4022d1] memchr("#endif\n  for (ri = 0; ri < dfa->"..., '\n', 168) = 0x0259e00d
[0x4022d1] memchr("  for (ri = 0; ri < dfa->tindex;"..., '\n', 161) = 0x0259e034
[0x4022d1] memchr("    {\n      switch (t = dfa->tok"..., '\n', 122) = 0x0259e03a
[0x4022d1] memchr("      switch (t = dfa->tokens[ri"..., '\n', 116) = 0x0259e05d
[0x4022d1] memchr("\t{\n\tcase LPAREN:\n\tcase RPAREN:\n\t"..., '\n', 81) = 0x0259e060
[0x4022d1] memchr("\tcase LPAREN:\n\tcase RPAREN:\n\t  g"..., '\n', 78) = 0x0259e06e
[0x4022d1] memchr("\tcase RPAREN:\n\t  goto done;\t\t/* "..., '\n', 64) = 0x0259e07c
[0x4022d1] memchr("\t  goto done;\t\t/* "cannot happen"..., '\n', 50) = 0x0259e0a1
[0x4022d1] memchr("\tcase EMPTY:\n\tcase BEGLINE:\n\tcas"..., '\n', 13) = 0x0259e0ae
[0x4022d1] memchr("\tcase BEGLINE:\n\tcase ENDLINE:\n\tc"..., '\n', 0) = NULL
[0x4023cc] fwrite("8959:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase BEGLINE:\n\tcase ENDLINE:\n\tc"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase ENDLINE:\n\tcase BEGWORD:\n\tc"..., 'I', 32515) = 0x0259e0c8
[0x40cdf3] memchr("INE:\n\tcase BEGWORD:\n\tcase ENDWOR"..., '\n', 32505) = 0x0259e0cc
[0x4022d1] memchr("\tcase ENDLINE:\n\tcase BEGWORD:\n\tc"..., '\n', 0) = NULL
[0x4023cc] fwrite("8960:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase ENDLINE:\n\tcase BEGWORD:\n\tc"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase BEGWORD:\n\tcase ENDWORD:\n\tc"..., 'I', 32500) = 0x0259e0f2
[0x40cdf3] memchr("IMWORD:\n\tcase NOTLIMWORD:\n\tcase "..., '\n', 32463) = 0x0259e0f9
[0x4022d1] memchr("\tcase BEGWORD:\n\tcase ENDWORD:\n\tc"..., '\n', 30) = 0x0259e0db
[0x4022d1] memchr("\tcase ENDWORD:\n\tcase LIMWORD:\n\tc"..., '\n', 15) = 0x0259e0ea
[0x4022d1] memchr("\tcase LIMWORD:\n\tcase NOTLIMWORD:"..., '\n', 0) = NULL
[0x4023cc] fwrite("8963:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase LIMWORD:\n\tcase NOTLIMWORD:"..., 1, 15, 0x7f498147f260) = 15
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase NOTLIMWORD:\n\tcase BACKREF:"..., 'I', 32455) = 0x0259e104
[0x40cdf3] memchr("IMWORD:\n\tcase BACKREF:\n\t  resetm"..., '\n', 32445) = 0x0259e10b
[0x4022d1] memchr("\tcase NOTLIMWORD:\n\tcase BACKREF:"..., '\n', 0) = NULL
[0x4023cc] fwrite("8964:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\tcase NOTLIMWORD:\n\tcase BACKREF:"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\tcase BACKREF:\n\t  resetmust(mp);"..., 'I', 32437) = 0x0259e77e
[0x40cdf3] memchr("In.  Everything in left, plus ev"..., '\n', 30787) = 0x0259e7a9
[0x4022d1] memchr("\tcase BACKREF:\n\t  resetmust(mp);"..., '\n', 1642) = 0x0259e11a
[0x4022d1] memchr("\t  resetmust(mp);\n\t  break;\n\tcas"..., '\n', 1627) = 0x0259e12c
[0x4022d1] memchr("\t  break;\n\tcase STAR:\n\tcase QMAR"..., '\n', 1609) = 0x0259e136
[0x4022d1] memchr("\tcase STAR:\n\tcase QMARK:\n\t  if ("..., '\n', 1599) = 0x0259e142
[0x4022d1] memchr("\tcase QMARK:\n\t  if (mp <= musts)"..., '\n', 1587) = 0x0259e14f
[0x4022d1] memchr("\t  if (mp <= musts)\n\t    goto do"..., '\n', 1574) = 0x0259e163
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 1554) = 0x0259e18a
[0x4022d1] memchr("\t  --mp;\n\t  resetmust(mp);\n\t  br"..., '\n', 1515) = 0x0259e193
[0x4022d1] memchr("\t  resetmust(mp);\n\t  break;\n\tcas"..., '\n', 1506) = 0x0259e1a5
[0x4022d1] memchr("\t  break;\n\tcase OR:\n\tcase ORTOP:"..., '\n', 1488) = 0x0259e1af
[0x4022d1] memchr("\tcase OR:\n\tcase ORTOP:\n\t  if (mp"..., '\n', 1478) = 0x0259e1b9
[0x4022d1] memchr("\tcase ORTOP:\n\t  if (mp < &musts["..., '\n', 1468) = 0x0259e1c6
[0x4022d1] memchr("\t  if (mp < &musts[2])\n\t    goto"..., '\n', 1455) = 0x0259e1dd
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 1432) = 0x0259e204
[0x4022d1] memchr("\t  {\n\t    char **new;\n\t    must "..., '\n', 1393) = 0x0259e209
[0x4022d1] memchr("\t    char **new;\n\t    must *lmp;"..., '\n', 1388) = 0x0259e21a
[0x4022d1] memchr("\t    must *lmp;\n\t    must *rmp;\n"..., '\n', 1371) = 0x0259e22a
[0x4022d1] memchr("\t    must *rmp;\n\t    int j, ln, "..., '\n', 1355) = 0x0259e23a
[0x4022d1] memchr("\t    int j, ln, rn, n;\n\n\t    rmp"..., '\n', 1339) = 0x0259e251
[0x4022d1] memchr("\n\t    rmp = --mp;\n\t    lmp = --m"..., '\n', 1316) = 0x0259e252
[0x4022d1] memchr("\t    rmp = --mp;\n\t    lmp = --mp"..., '\n', 1315) = 0x0259e263
[0x4022d1] memchr("\t    lmp = --mp;\n\t    /* Guarant"..., '\n', 1298) = 0x0259e274
[0x4022d1] memchr("\t    /* Guaranteed to be.  Unlik"..., '\n', 1281) = 0x0259e2a5
[0x4022d1] memchr("\t    if (strcmp(lmp->is, rmp->is"..., '\n', 1232) = 0x0259e2cd
[0x4022d1] memchr("\t      lmp->is[0] = '\\0';\n\t    /"..., '\n', 1192) = 0x0259e2e7
[0x4022d1] memchr("\t    /* Left side--easy */\n\t    "..., '\n', 1166) = 0x0259e302
[0x4022d1] memchr("\t    i = 0;\n\t    while (lmp->lef"..., '\n', 1139) = 0x0259e30e
[0x4022d1] memchr("\t    while (lmp->left[i] != '\\0'"..., '\n', 1127) = 0x0259e350
[0x4022d1] memchr("\t      ++i;\n\t    lmp->left[i] = "..., '\n', 1061) = 0x0259e35c
[0x4022d1] memchr("\t    lmp->left[i] = '\\0';\n\t    /"..., '\n', 1049) = 0x0259e376
[0x4022d1] memchr("\t    /* Right side */\n\t    ln = "..., '\n', 1023) = 0x0259e38c
[0x4022d1] memchr("\t    ln = strlen(lmp->right);\n\t "..., '\n', 1001) = 0x0259e3aa
[0x4022d1] memchr("\t    rn = strlen(rmp->right);\n\t "..., '\n', 971) = 0x0259e3c8
[0x4022d1] memchr("\t    n = ln;\n\t    if (n > rn)\n\t "..., '\n', 941) = 0x0259e3d5
[0x4022d1] memchr("\t    if (n > rn)\n\t      n = rn;\n"..., '\n', 928) = 0x0259e3e6
[0x4022d1] memchr("\t      n = rn;\n\t    for (i = 0; "..., '\n', 911) = 0x0259e3f5
[0x4022d1] memchr("\t    for (i = 0; i < n; ++i)\n\t  "..., '\n', 896) = 0x0259e412
[0x4022d1] memchr("\t      if (lmp->right[ln - i - 1"..., '\n', 867) = 0x0259e44f
[0x4022d1] memchr("\t\tbreak;\n\t    for (j = 0; j < i;"..., '\n', 806) = 0x0259e458
[0x4022d1] memchr("\t    for (j = 0; j < i; ++j)\n\t  "..., '\n', 797) = 0x0259e475
[0x4022d1] memchr("\t      lmp->right[j] = lmp->righ"..., '\n', 768) = 0x0259e4a6
[0x4022d1] memchr("\t    lmp->right[j] = '\\0';\n\t    "..., '\n', 719) = 0x0259e4c1
[0x4022d1] memchr("\t    new = inboth(lmp->in, rmp->"..., '\n', 692) = 0x0259e4e6
[0x4022d1] memchr("\t    if (new == NULL)\n\t      got"..., '\n', 655) = 0x0259e4fc
[0x4022d1] memchr("\t      goto done;\n\t    freelist("..., '\n', 633) = 0x0259e50e
[0x4022d1] memchr("\t    freelist(lmp->in);\n\t    fre"..., '\n', 615) = 0x0259e526
[0x4022d1] memchr("\t    free((char *) lmp->in);\n\t  "..., '\n', 591) = 0x0259e543
[0x4022d1] memchr("\t    lmp->in = new;\n\t  }\n\t  brea"..., '\n', 562) = 0x0259e557
[0x4022d1] memchr("\t  }\n\t  break;\n\tcase PLUS:\n\t  if"..., '\n', 542) = 0x0259e55c
[0x4022d1] memchr("\t  break;\n\tcase PLUS:\n\t  if (mp "..., '\n', 537) = 0x0259e566
[0x4022d1] memchr("\tcase PLUS:\n\t  if (mp <= musts)\n"..., '\n', 527) = 0x0259e572
[0x4022d1] memchr("\t  if (mp <= musts)\n\t    goto do"..., '\n', 515) = 0x0259e586
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 495) = 0x0259e5ad
[0x4022d1] memchr("\t  --mp;\n\t  mp->is[0] = '\\0';\n\t "..., '\n', 456) = 0x0259e5b6
[0x4022d1] memchr("\t  mp->is[0] = '\\0';\n\t  break;\n\t"..., '\n', 447) = 0x0259e5cb
[0x4022d1] memchr("\t  break;\n\tcase END:\n\t  if (mp !"..., '\n', 426) = 0x0259e5d5
[0x4022d1] memchr("\tcase END:\n\t  if (mp != &musts[1"..., '\n', 416) = 0x0259e5e0
[0x4022d1] memchr("\t  if (mp != &musts[1])\n\t    got"..., '\n', 405) = 0x0259e5f8
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 381) = 0x0259e61f
[0x4022d1] memchr("\t  for (i = 0; musts[0].in[i] !="..., '\n', 342) = 0x0259e64b
[0x4022d1] memchr("\t    if (strlen(musts[0].in[i]) "..., '\n', 298) = 0x0259e67d
[0x4022d1] memchr("\t      result = musts[0].in[i];\n"..., '\n', 248) = 0x0259e69d
[0x4022d1] memchr("\t  if (strcmp(result, musts[0].i"..., '\n', 216) = 0x0259e6c6
[0x4022d1] memchr("\t    exact = 1;\n\t  goto done;\n\tc"..., '\n', 175) = 0x0259e6d6
[0x4022d1] memchr("\t  goto done;\n\tcase CAT:\n\t  if ("..., '\n', 159) = 0x0259e6e4
[0x4022d1] memchr("\tcase CAT:\n\t  if (mp < &musts[2]"..., '\n', 145) = 0x0259e6ef
[0x4022d1] memchr("\t  if (mp < &musts[2])\n\t    goto"..., '\n', 134) = 0x0259e706
[0x4022d1] memchr("\t    goto done;\t\t/* "cannot happ"..., '\n', 111) = 0x0259e72d
[0x4022d1] memchr("\t  {\n\t    must *lmp;\n\t    must *"..., '\n', 72) = 0x0259e732
[0x4022d1] memchr("\t    must *lmp;\n\t    must *rmp;\n"..., '\n', 67) = 0x0259e742
[0x4022d1] memchr("\t    must *rmp;\n\n\t    rmp = --mp"..., '\n', 51) = 0x0259e752
[0x4022d1] memchr("\n\t    rmp = --mp;\n\t    lmp = --m"..., '\n', 35) = 0x0259e753
[0x4022d1] memchr("\t    rmp = --mp;\n\t    lmp = --mp"..., '\n', 34) = 0x0259e764
[0x4022d1] memchr("\t    lmp = --mp;\n\t    /* In.  Ev"..., '\n', 17) = 0x0259e775
[0x4022d1] memchr("\t    /* In.  Everything in left,"..., '\n', 0) = NULL
[0x4023cc] fwrite("9039:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t    /* In.  Everything in left,"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t       right, plus catenation o"..., 'I', 30743) = 0x0259f2ee
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 27859) = 0x0259f327
[0x4022d1] memchr("\t       right, plus catenation o"..., '\n', 2876) = 0x0259e7cb
[0x4022d1] memchr("\t       left's right and right's"..., '\n', 2842) = 0x0259e7f5
[0x4022d1] memchr("\t    lmp->in = addlists(lmp->in,"..., '\n', 2800) = 0x0259e820
[0x4022d1] memchr("\t    if (lmp->in == NULL)\n\t     "..., '\n', 2757) = 0x0259e83a
[0x4022d1] memchr("\t      goto done;\n\t    if (lmp->"..., '\n', 2731) = 0x0259e84c
[0x4022d1] memchr("\t    if (lmp->right[0] != '\\0' &"..., '\n', 2713) = 0x0259e86e
[0x4022d1] memchr("\t\trmp->left[0] != '\\0')\n\t      {"..., '\n', 2679) = 0x0259e886
[0x4022d1] memchr("\t      {\n\t\tchar *tp;\n\n\t\ttp = icp"..., '\n', 2655) = 0x0259e88f
[0x4022d1] memchr("\t\tchar *tp;\n\n\t\ttp = icpyalloc(lm"..., '\n', 2646) = 0x0259e89b
[0x4022d1] memchr("\n\t\ttp = icpyalloc(lmp->right);\n\t"..., '\n', 2634) = 0x0259e89c
[0x4022d1] memchr("\t\ttp = icpyalloc(lmp->right);\n\t\t"..., '\n', 2633) = 0x0259e8ba
[0x4022d1] memchr("\t\tif (tp == NULL)\n\t\t  goto done;"..., '\n', 2603) = 0x0259e8cc
[0x4022d1] memchr("\t\t  goto done;\n\t\ttp = icatalloc("..., '\n', 2585) = 0x0259e8db
[0x4022d1] memchr("\t\ttp = icatalloc(tp, rmp->left);"..., '\n', 2570) = 0x0259e8fc
[0x4022d1] memchr("\t\tif (tp == NULL)\n\t\t  goto done;"..., '\n', 2537) = 0x0259e90e
[0x4022d1] memchr("\t\t  goto done;\n\t\tlmp->in = enlis"..., '\n', 2519) = 0x0259e91d
[0x4022d1] memchr("\t\tlmp->in = enlist(lmp->in, tp,\n"..., '\n', 2504) = 0x0259e93d
[0x4022d1] memchr("\t\t\t\t strlen(tp));\n\t\tfree(tp);\n\t\t"..., '\n', 2472) = 0x0259e94f
[0x4022d1] memchr("\t\tfree(tp);\n\t\tif (lmp->in == NUL"..., '\n', 2454) = 0x0259e95b
[0x4022d1] memchr("\t\tif (lmp->in == NULL)\n\t\t  goto "..., '\n', 2442) = 0x0259e972
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    /* "..., '\n', 2419) = 0x0259e981
[0x4022d1] memchr("\t      }\n\t    /* Left-hand */\n\t "..., '\n', 2404) = 0x0259e98a
[0x4022d1] memchr("\t    /* Left-hand */\n\t    if (lm"..., '\n', 2395) = 0x0259e99f
[0x4022d1] memchr("\t    if (lmp->is[0] != '\\0')\n\t  "..., '\n', 2374) = 0x0259e9bc
[0x4022d1] memchr("\t      {\n\t\tlmp->left = icatalloc"..., '\n', 2345) = 0x0259e9c5
[0x4022d1] memchr("\t\tlmp->left = icatalloc(lmp->lef"..., '\n', 2336) = 0x0259e9e8
[0x4022d1] memchr("\t\t\t\t      rmp->left);\n\t\tif (lmp-"..., '\n', 2301) = 0x0259e9fe
[0x4022d1] memchr("\t\tif (lmp->left == NULL)\n\t\t  got"..., '\n', 2279) = 0x0259ea17
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    /* "..., '\n', 2254) = 0x0259ea26
[0x4022d1] memchr("\t      }\n\t    /* Right-hand */\n\t"..., '\n', 2239) = 0x0259ea2f
[0x4022d1] memchr("\t    /* Right-hand */\n\t    if (r"..., '\n', 2230) = 0x0259ea45
[0x4022d1] memchr("\t    if (rmp->is[0] == '\\0')\n\t  "..., '\n', 2208) = 0x0259ea62
[0x4022d1] memchr("\t      lmp->right[0] = '\\0';\n\t  "..., '\n', 2179) = 0x0259ea7f
[0x4022d1] memchr("\t    lmp->right = icatalloc(lmp-"..., '\n', 2150) = 0x0259eab4
[0x4022d1] memchr("\t    if (lmp->right == NULL)\n\t  "..., '\n', 2097) = 0x0259ead1
[0x4022d1] memchr("\t      goto done;\n\t    /* Guaran"..., '\n', 2068) = 0x0259eae3
[0x4022d1] memchr("\t    /* Guaranteed to be */\n\t   "..., '\n', 2050) = 0x0259eaff
[0x4022d1] memchr("\t    if (lmp->is[0] != '\\0' && r"..., '\n', 2022) = 0x0259eb32
[0x4022d1] memchr("\t      {\n\t\tlmp->is = icatalloc(l"..., '\n', 1971) = 0x0259eb3b
[0x4022d1] memchr("\t\tlmp->is = icatalloc(lmp->is, r"..., '\n', 1962) = 0x0259eb64
[0x4022d1] memchr("\t\tif (lmp->is == NULL)\n\t\t  goto "..., '\n', 1921) = 0x0259eb7b
[0x4022d1] memchr("\t\t  goto done;\n\t      }\n\t    els"..., '\n', 1898) = 0x0259eb8a
[0x4022d1] memchr("\t      }\n\t    else\n\t      lmp->i"..., '\n', 1883) = 0x0259eb93
[0x4022d1] memchr("\t    else\n\t      lmp->is[0] = '\\"..., '\n', 1874) = 0x0259eb9d
[0x4022d1] memchr("\t      lmp->is[0] = '\\0';\n\t  }\n\t"..., '\n', 1864) = 0x0259ebb7
[0x4022d1] memchr("\t  }\n\t  break;\n\tdefault:\n\t  if ("..., '\n', 1838) = 0x0259ebbc
[0x4022d1] memchr("\t  break;\n\tdefault:\n\t  if (t < E"..., '\n', 1833) = 0x0259ebc6
[0x4022d1] memchr("\tdefault:\n\t  if (t < END)\n\t    {"..., '\n', 1823) = 0x0259ebd0
[0x4022d1] memchr("\t  if (t < END)\n\t    {\n\t      /*"..., '\n', 1813) = 0x0259ebe0
[0x4022d1] memchr("\t    {\n\t      /* "cannot happen""..., '\n', 1797) = 0x0259ebe7
[0x4022d1] memchr("\t      /* "cannot happen" */\n\t  "..., '\n', 1790) = 0x0259ec04
[0x4022d1] memchr("\t      goto done;\n\t    }\n\t  else"..., '\n', 1761) = 0x0259ec16
[0x4022d1] memchr("\t    }\n\t  else if (t == '\\0')\n\t "..., '\n', 1743) = 0x0259ec1d
[0x4022d1] memchr("\t  else if (t == '\\0')\n\t    {\n\t "..., '\n', 1736) = 0x0259ec34
[0x4022d1] memchr("\t    {\n\t      /* not on *my* shi"..., '\n', 1713) = 0x0259ec3b
[0x4022d1] memchr("\t      /* not on *my* shift */\n\t"..., '\n', 1706) = 0x0259ec5a
[0x4022d1] memchr("\t      goto done;\n\t    }\n\t  else"..., '\n', 1675) = 0x0259ec6c
[0x4022d1] memchr("\t    }\n\t  else if (t >= CSET)\n\t "..., '\n', 1657) = 0x0259ec73
[0x4022d1] memchr("\t  else if (t >= CSET)\n\t    {\n\t "..., '\n', 1650) = 0x0259ec8a
[0x4022d1] memchr("\t    {\n\t      /* easy enough */\n"..., '\n', 1627) = 0x0259ec91
[0x4022d1] memchr("\t      /* easy enough */\n\t      "..., '\n', 1620) = 0x0259ecaa
[0x4022d1] memchr("\t      resetmust(mp);\n\t    }\n\t  "..., '\n', 1595) = 0x0259ecc0
[0x4022d1] memchr("\t    }\n\t  else\n\t    {\n\t      /* "..., '\n', 1573) = 0x0259ecc7
[0x4022d1] memchr("\t  else\n\t    {\n\t      /* plain c"..., '\n', 1566) = 0x0259eccf
[0x4022d1] memchr("\t    {\n\t      /* plain character"..., '\n', 1558) = 0x0259ecd6
[0x4022d1] memchr("\t      /* plain character */\n\t  "..., '\n', 1551) = 0x0259ecf3
[0x4022d1] memchr("\t      resetmust(mp);\n\t      mp-"..., '\n', 1522) = 0x0259ed09
[0x4022d1] memchr("\t      mp->is[0] = mp->left[0] ="..., '\n', 1500) = 0x0259ed3c
[0x4022d1] memchr("\t      mp->is[1] = mp->left[1] ="..., '\n', 1449) = 0x0259ed72
[0x4022d1] memchr("\t      mp->in = enlist(mp->in, m"..., '\n', 1395) = 0x0259ed9d
[0x4022d1] memchr("\t      if (mp->in == NULL)\n\t\tgot"..., '\n', 1352) = 0x0259edb8
[0x4022d1] memchr("\t\tgoto done;\n\t    }\n\t  break;\n\t}"..., '\n', 1325) = 0x0259edc5
[0x4022d1] memchr("\t    }\n\t  break;\n\t}\n#ifdef DEBUG"..., '\n', 1312) = 0x0259edcc
[0x4022d1] memchr("\t  break;\n\t}\n#ifdef DEBUG\n      "..., '\n', 1305) = 0x0259edd6
[0x4022d1] memchr("\t}\n#ifdef DEBUG\n      fprintf(st"..., '\n', 1295) = 0x0259edd9
[0x4022d1] memchr("#ifdef DEBUG\n      fprintf(stder"..., '\n', 1292) = 0x0259ede6
[0x4022d1] memchr("      fprintf(stderr, " node: %d"..., '\n', 1279) = 0x0259ee0f
[0x4022d1] memchr("      prtok(dfa->tokens[ri]);\n  "..., '\n', 1238) = 0x0259ee2d
[0x4022d1] memchr("      fprintf(stderr, "\\n  in:")"..., '\n', 1208) = 0x0259ee4f
[0x4022d1] memchr("      for (i = 0; mp->in[i]; ++i"..., '\n', 1174) = 0x0259ee71
[0x4022d1] memchr("\tfprintf(stderr, " \\"%s\\"", mp->"..., '\n', 1140) = 0x0259ee99
[0x4022d1] memchr("      fprintf(stderr, "\\n  is: \\"..., '\n', 1100) = 0x0259eecc
[0x4022d1] memchr("      fprintf(stderr, "  left: \\"..., '\n', 1049) = 0x0259ef01
[0x4022d1] memchr("      fprintf(stderr, "  right: "..., '\n', 996) = 0x0259ef38
[0x4022d1] memchr("#endif\n      ++mp;\n    }\n done:\n"..., '\n', 941) = 0x0259ef3f
[0x4022d1] memchr("      ++mp;\n    }\n done:\n  if (s"..., '\n', 934) = 0x0259ef4b
[0x4022d1] memchr("    }\n done:\n  if (strlen(result"..., '\n', 922) = 0x0259ef51
[0x4022d1] memchr(" done:\n  if (strlen(result))\n   "..., '\n', 916) = 0x0259ef58
[0x4022d1] memchr("  if (strlen(result))\n    {\n    "..., '\n', 909) = 0x0259ef6e
[0x4022d1] memchr("    {\n      dm = (struct dfamust"..., '\n', 887) = 0x0259ef74
[0x4022d1] memchr("      dm = (struct dfamust *) ma"..., '\n', 881) = 0x0259efb3
[0x4022d1] memchr("      dm->exact = exact;\n      d"..., '\n', 818) = 0x0259efcc
[0x4022d1] memchr("      dm->must = malloc(strlen(r"..., '\n', 793) = 0x0259eff9
[0x4022d1] memchr("      strcpy(dm->must, result);\n"..., '\n', 748) = 0x0259f019
[0x4022d1] memchr("      dm->next = dfa->musts;\n   "..., '\n', 716) = 0x0259f036
[0x4022d1] memchr("      dfa->musts = dm;\n    }\n  m"..., '\n', 687) = 0x0259f04d
[0x4022d1] memchr("    }\n  mp = musts;\n  for (i = 0"..., '\n', 664) = 0x0259f053
[0x4022d1] memchr("  mp = musts;\n  for (i = 0; i <="..., '\n', 658) = 0x0259f061
[0x4022d1] memchr("  for (i = 0; i <= dfa->tindex; "..., '\n', 644) = 0x0259f086
[0x4022d1] memchr("    {\n      freelist(mp[i].in);\n"..., '\n', 607) = 0x0259f08c
[0x4022d1] memchr("      freelist(mp[i].in);\n      "..., '\n', 601) = 0x0259f0a6
[0x4022d1] memchr("      ifree((char *) mp[i].in);\n"..., '\n', 575) = 0x0259f0c6
[0x4022d1] memchr("      ifree(mp[i].left);\n      i"..., '\n', 543) = 0x0259f0df
[0x4022d1] memchr("      ifree(mp[i].right);\n      "..., '\n', 518) = 0x0259f0f9
[0x4022d1] memchr("      ifree(mp[i].is);\n    }\n  f"..., '\n', 492) = 0x0259f110
[0x4022d1] memchr("    }\n  free((char *) mp);\n}\n/* "..., '\n', 469) = 0x0259f116
[0x4022d1] memchr("  free((char *) mp);\n}\n/* kwset."..., '\n', 463) = 0x0259f12b
[0x4022d1] memchr("}\n/* kwset.c - search for any of"..., '\n', 442) = 0x0259f12d
[0x4022d1] memchr("/* kwset.c - search for any of a"..., '\n', 440) = 0x0259f15f
[0x4022d1] memchr("   Copyright 1989 Free Software "..., '\n', 390) = 0x0259f18a
[0x4022d1] memchr("\t\t  Written August 1989 by Mike "..., '\n', 347) = 0x0259f1b3
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x0259f1b4
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x0259f1fc
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 233) = 0x0259f244
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 161) = 0x0259f28b
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 90) = 0x0259f2a1
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x0259f2a2
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x0259f2e5
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("9158:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 27801) = 0x0259f335
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 27788) = 0x0259f368
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("9159:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 27736) = 0x0259f42d
[0x40cdf3] memchr("Inc., 675 Mass Ave, Cambridge, M"..., '\n', 27540) = 0x0259f45a
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x0259f398
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x0259f399
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x0259f3de
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x0259f41d
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("9164:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   The author may be reached (E"..., 'I', 27494) = 0x0259f5cc
[0x40cdf3] memchr("IBM-Germany, Scientific Center H"..., '\n', 27125) = 0x0259f613
[0x4022d1] memchr("\n   The author may be reached (E"..., '\n', 366) = 0x0259f45b
[0x4022d1] memchr("   The author may be reached (Em"..., '\n', 365) = 0x0259f4a0
[0x4022d1] memchr("   or (US mail) as Mike Haertel "..., '\n', 296) = 0x0259f4e1
[0x4022d1] memchr("\n/* The algorithm implemented by"..., '\n', 231) = 0x0259f4e2
[0x4022d1] memchr("/* The algorithm implemented by "..., '\n', 230) = 0x0259f52f
[0x4022d1] memchr("   to one discovered by Beate Co"..., '\n', 153) = 0x0259f57c
[0x4022d1] memchr("   See "A String Matching Algori"..., '\n', 76) = 0x0259f5c8
[0x4022d1] memchr("   IBM-Germany, Scientific Cente"..., '\n', 0) = NULL
[0x4023cc] fwrite("9172:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   IBM-Germany, Scientific Cente"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Heidelberg, Germany.  See als"..., 'I', 27053) = 0x0259f78f
[0x40cdf3] memchr("INT_MAX 2147483647\n#define UCHAR"..., '\n', 26674) = 0x0259f7a1
[0x4022d1] memchr("   Heidelberg, Germany.  See als"..., '\n', 371) = 0x0259f65c
[0x4022d1] memchr("   String Matching:  An Aid to B"..., '\n', 298) = 0x0259f6a2
[0x4022d1] memchr("   Vol. 18, No. 6, which describ"..., '\n', 228) = 0x0259f6e9
[0x4022d1] memchr("\n\n#ifdef STDC_HEADERS\n#undef RE_"..., '\n', 157) = 0x0259f6ea
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#undef RE_D"..., '\n', 156) = 0x0259f6eb
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#undef RE_DU"..., '\n', 155) = 0x0259f6ff
[0x4022d1] memchr("#undef RE_DUP_MAX\n#include <limi"..., '\n', 135) = 0x0259f711
[0x4022d1] memchr("#include <limits.h>\n#define flag"..., '\n', 117) = 0x0259f725
[0x4022d1] memchr("#define flag_limits 1\n#if flag_s"..., '\n', 97) = 0x0259f73b
[0x4022d1] memchr("#if flag_stdlib==0 \n#include <st"..., '\n', 75) = 0x0259f74f
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 55) = 0x0259f763
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 35) = 0x0259f779
[0x4022d1] memchr("#endif\n#else\n#define INT_MAX 214"..., '\n', 13) = 0x0259f780
[0x4022d1] memchr("#else\n#define INT_MAX 2147483647"..., '\n', 6) = 0x0259f786
[0x4022d1] memchr("#define INT_MAX 2147483647\n#defi"..., '\n', 0) = NULL
[0x4023cc] fwrite("9187:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#define INT_MAX 2147483647\n#defi"..., 1, 27, 0x7f498147f260) = 27
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define UCHAR_MAX 255\n#ifdef __S"..., 'I', 26655) = 0x025a0344
[0x40cdf3] memchr("INT_MAX;\n  kwset->maxd = -1;\n  k"..., '\n', 23677) = 0x025a034c
[0x4022d1] memchr("#define UCHAR_MAX 255\n#ifdef __S"..., '\n', 2962) = 0x0259f7b7
[0x4022d1] memchr("#ifdef __STDC__\n#include <stddef"..., '\n', 2940) = 0x0259f7c7
[0x4022d1] memchr("#include <stddef.h>\n#else\n#if fl"..., '\n', 2924) = 0x0259f7db
[0x4022d1] memchr("#else\n#if flag_systypes==0\n#incl"..., '\n', 2904) = 0x0259f7e1
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 2898) = 0x0259f7f6
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 2877) = 0x0259f80d
[0x4022d1] memchr("#define flag_systypes 1\n#endif\n#"..., '\n', 2854) = 0x0259f825
[0x4022d1] memchr("#endif\n#endif\nextern char *mallo"..., '\n', 2830) = 0x0259f82c
[0x4022d1] memchr("#endif\nextern char *malloc();\nex"..., '\n', 2823) = 0x0259f833
[0x4022d1] memchr("extern char *malloc();\nextern vo"..., '\n', 2816) = 0x0259f84a
[0x4022d1] memchr("extern void free();\n#endif\n\n#ifd"..., '\n', 2793) = 0x0259f85e
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_MEMCHR\n#if f"..., '\n', 2773) = 0x0259f865
[0x4022d1] memchr("\n#ifdef HAVE_MEMCHR\n#if flag_str"..., '\n', 2766) = 0x0259f866
[0x4022d1] memchr("#ifdef HAVE_MEMCHR\n#if flag_stri"..., '\n', 2765) = 0x0259f879
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 2746) = 0x0259f88c
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 2727) = 0x0259f8a0
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 2707) = 0x0259f8b6
[0x4022d1] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '\n', 2685) = 0x0259f8bd
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#if flag_me"..., '\n', 2678) = 0x0259f8d2
[0x4022d1] memchr("#if flag_memory==0\n#include <mem"..., '\n', 2657) = 0x0259f8e5
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 2638) = 0x0259f8f9
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#en"..., '\n', 2618) = 0x0259f90f
[0x4022d1] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '\n', 2596) = 0x0259f916
[0x4022d1] memchr("#endif\n#else\n#ifdef __STDC__\next"..., '\n', 2589) = 0x0259f91d
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 2582) = 0x0259f923
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 2576) = 0x0259f933
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 2560) = 0x0259f94a
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 2537) = 0x0259f950
[0x4022d1] memchr("extern char *memchr();\n#endif\n#e"..., '\n', 2531) = 0x0259f967
[0x4022d1] memchr("#endif\n#endif\n\n#ifdef GREP\nexter"..., '\n', 2508) = 0x0259f96e
[0x4022d1] memchr("#endif\n\n#ifdef GREP\nextern char "..., '\n', 2501) = 0x0259f975
[0x4022d1] memchr("\n#ifdef GREP\nextern char *xmallo"..., '\n', 2494) = 0x0259f976
[0x4022d1] memchr("#ifdef GREP\nextern char *xmalloc"..., '\n', 2493) = 0x0259f982
[0x4022d1] memchr("extern char *xmalloc();\n#define "..., '\n', 2481) = 0x0259f99a
[0x4022d1] memchr("#define malloc xmalloc\n#endif\n\n#"..., '\n', 2457) = 0x0259f9b1
[0x4022d1] memchr("#endif\n\n#include "kwset.h"\n#incl"..., '\n', 2434) = 0x0259f9b8
[0x4022d1] memchr("\n#include "kwset.h"\n#include "ob"..., '\n', 2427) = 0x0259f9b9
[0x4022d1] memchr("#include "kwset.h"\n#include "obs"..., '\n', 2426) = 0x0259f9cc
[0x4022d1] memchr("#include "obstack.h"\n\n#define NC"..., '\n', 2407) = 0x0259f9e1
[0x4022d1] memchr("\n#define NCHAR (UCHAR_MAX + 1)\n#"..., '\n', 2386) = 0x0259f9e2
[0x4022d1] memchr("#define NCHAR (UCHAR_MAX + 1)\n#d"..., '\n', 2385) = 0x0259fa00
[0x4022d1] memchr("#define obstack_chunk_alloc mall"..., '\n', 2355) = 0x0259fa23
[0x4022d1] memchr("#define obstack_chunk_free free\n"..., '\n', 2320) = 0x0259fa43
[0x4022d1] memchr("\n/* Balanced tree of edges and l"..., '\n', 2288) = 0x0259fa44
[0x4022d1] memchr("/* Balanced tree of edges and la"..., '\n', 2287) = 0x0259fa87
[0x4022d1] memchr("struct tree\n{\n  struct tree *lli"..., '\n', 2220) = 0x0259fa93
[0x4022d1] memchr("{\n  struct tree *llink;\t\t/* Left"..., '\n', 2208) = 0x0259fa95
[0x4022d1] memchr("  struct tree *llink;\t\t/* Left l"..., '\n', 2206) = 0x0259fad2
[0x4022d1] memchr("  struct tree *rlink;\t\t/* Right "..., '\n', 2145) = 0x0259fb0e
[0x4022d1] memchr("  struct trie *trie;\t\t/* Trie no"..., '\n', 2085) = 0x0259fb4d
[0x4022d1] memchr("  unsigned char label;\t\t/* Label"..., '\n', 2022) = 0x0259fb7f
[0x4022d1] memchr("  char balance;\t\t\t/* Difference "..., '\n', 1972) = 0x0259fbb9
[0x4022d1] memchr("};\n\n/* Node of a trie representi"..., '\n', 1914) = 0x0259fbbc
[0x4022d1] memchr("\n/* Node of a trie representing "..., '\n', 1911) = 0x0259fbbd
[0x4022d1] memchr("/* Node of a trie representing a"..., '\n', 1910) = 0x0259fbfb
[0x4022d1] memchr("struct trie\n{\n  unsigned int acc"..., '\n', 1848) = 0x0259fc07
[0x4022d1] memchr("{\n  unsigned int accepting;\t/* W"..., '\n', 1836) = 0x0259fc09
[0x4022d1] memchr("  unsigned int accepting;\t/* Wor"..., '\n', 1834) = 0x0259fc4f
[0x4022d1] memchr("  struct tree *links;\t\t/* Tree o"..., '\n', 1764) = 0x0259fc8d
[0x4022d1] memchr("  struct trie *parent;\t\t/* Paren"..., '\n', 1702) = 0x0259fcc0
[0x4022d1] memchr("  struct trie *next;\t\t/* List of"..., '\n', 1651) = 0x0259fd03
[0x4022d1] memchr("  struct trie *fail;\t\t/* Aho-Cor"..., '\n', 1584) = 0x0259fd3e
[0x4022d1] memchr("  int depth;\t\t\t/* Depth of this "..., '\n', 1525) = 0x0259fd75
[0x4022d1] memchr("  int shift;\t\t\t/* Shift function"..., '\n', 1470) = 0x0259fdae
[0x4022d1] memchr("  int maxshift;\t\t\t/* Max shift o"..., '\n', 1413) = 0x0259fde9
[0x4022d1] memchr("};\n\n/* Structure returned opaque"..., '\n', 1354) = 0x0259fdec
[0x4022d1] memchr("\n/* Structure returned opaquely "..., '\n', 1351) = 0x0259fded
[0x4022d1] memchr("/* Structure returned opaquely t"..., '\n', 1350) = 0x0259fe35
[0x4022d1] memchr("struct kwset\n{\n  struct obstack "..., '\n', 1278) = 0x0259fe42
[0x4022d1] memchr("{\n  struct obstack obstack;\t/* O"..., '\n', 1265) = 0x0259fe44
[0x4022d1] memchr("  struct obstack obstack;\t/* Obs"..., '\n', 1263) = 0x0259fe81
[0x4022d1] memchr("  int words;\t\t\t/* Number of word"..., '\n', 1202) = 0x0259feb3
[0x4022d1] memchr("  struct trie *trie;\t\t/* The tri"..., '\n', 1152) = 0x0259fee0
[0x4022d1] memchr("  int mind;\t\t\t/* Minimum depth o"..., '\n', 1107) = 0x0259ff18
[0x4022d1] memchr("  int maxd;\t\t\t/* Maximum depth o"..., '\n', 1051) = 0x0259ff47
[0x4022d1] memchr("  unsigned char delta[NCHAR];\t/*"..., '\n', 1004) = 0x0259ff89
[0x4022d1] memchr("  struct trie *next[NCHAR];\t/* T"..., '\n', 938) = 0x0259ffca
[0x4022d1] memchr("  char *target;\t\t\t/* Target stri"..., '\n', 873) = 0x025a0005
[0x4022d1] memchr("  int mind2;\t\t\t/* Used in Boyer-"..., '\n', 814) = 0x025a0045
[0x4022d1] memchr("  char *trans;\t\t\t/* Character tr"..., '\n', 750) = 0x025a0079
[0x4022d1] memchr("};\n\n/* Allocate and initialize a"..., '\n', 698) = 0x025a007c
[0x4022d1] memchr("\n/* Allocate and initialize a ke"..., '\n', 695) = 0x025a007d
[0x4022d1] memchr("/* Allocate and initialize a key"..., '\n', 694) = 0x025a00c2
[0x4022d1] memchr("   pointer to it.  Return NULL i"..., '\n', 625) = 0x025a0100
[0x4022d1] memchr("kwset_t\nkwsalloc(trans)\n     cha"..., '\n', 563) = 0x025a0108
[0x4022d1] memchr("kwsalloc(trans)\n     char *trans"..., '\n', 555) = 0x025a0118
[0x4022d1] memchr("     char *trans;\n{\n  struct kws"..., '\n', 539) = 0x025a012a
[0x4022d1] memchr("{\n  struct kwset *kwset;\n\n  kwse"..., '\n', 521) = 0x025a012c
[0x4022d1] memchr("  struct kwset *kwset;\n\n  kwset "..., '\n', 519) = 0x025a0143
[0x4022d1] memchr("\n  kwset = (struct kwset *) mall"..., '\n', 496) = 0x025a0144
[0x4022d1] memchr("  kwset = (struct kwset *) mallo"..., '\n', 495) = 0x025a017e
[0x4022d1] memchr("  if (!kwset)\n    return 0;\n\n  o"..., '\n', 437) = 0x025a018c
[0x4022d1] memchr("    return 0;\n\n  obstack_init(&k"..., '\n', 423) = 0x025a019a
[0x4022d1] memchr("\n  obstack_init(&kwset->obstack)"..., '\n', 409) = 0x025a019b
[0x4022d1] memchr("  obstack_init(&kwset->obstack);"..., '\n', 408) = 0x025a01bc
[0x4022d1] memchr("  kwset->words = 0;\n  kwset->tri"..., '\n', 375) = 0x025a01d0
[0x4022d1] memchr("  kwset->trie\n    = (struct trie"..., '\n', 355) = 0x025a01de
[0x4022d1] memchr("    = (struct trie *) obstack_al"..., '\n', 341) = 0x025a022a
[0x4022d1] memchr("  if (!kwset->trie)\n    {\n      "..., '\n', 265) = 0x025a023e
[0x4022d1] memchr("    {\n      kwsfree((kwset_t) kw"..., '\n', 245) = 0x025a0244
[0x4022d1] memchr("      kwsfree((kwset_t) kwset);\n"..., '\n', 239) = 0x025a0264
[0x4022d1] memchr("      return 0;\n    }\n  kwset->t"..., '\n', 207) = 0x025a0274
[0x4022d1] memchr("    }\n  kwset->trie->accepting ="..., '\n', 191) = 0x025a027a
[0x4022d1] memchr("  kwset->trie->accepting = 0;\n  "..., '\n', 185) = 0x025a0298
[0x4022d1] memchr("  kwset->trie->links = 0;\n  kwse"..., '\n', 155) = 0x025a02b2
[0x4022d1] memchr("  kwset->trie->parent = 0;\n  kws"..., '\n', 129) = 0x025a02cd
[0x4022d1] memchr("  kwset->trie->next = 0;\n  kwset"..., '\n', 102) = 0x025a02e6
[0x4022d1] memchr("  kwset->trie->fail = 0;\n  kwset"..., '\n', 77) = 0x025a02ff
[0x4022d1] memchr("  kwset->trie->depth = 0;\n  kwse"..., '\n', 52) = 0x025a0319
[0x4022d1] memchr("  kwset->trie->shift = 0;\n  kwse"..., '\n', 26) = 0x025a0333
[0x4022d1] memchr("  kwset->mind = INT_MAX;\n  kwset"..., '\n', 0) = NULL
[0x4023cc] fwrite("9298:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  kwset->mind = INT_MAX;\n  kwset"..., 1, 25, 0x7f498147f260) = 25
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  kwset->maxd = -1;\n  kwset->tar"..., 'I', 23668) = 0x025a0b41
[0x40cdf3] memchr("Install the new tree node in its"..., '\n', 21632) = 0x025a0b6c
[0x4022d1] memchr("  kwset->maxd = -1;\n  kwset->tar"..., '\n', 2030) = 0x025a0360
[0x4022d1] memchr("  kwset->target = 0;\n  kwset->tr"..., '\n', 2010) = 0x025a0375
[0x4022d1] memchr("  kwset->trans = trans;\n\n  retur"..., '\n', 1989) = 0x025a038d
[0x4022d1] memchr("\n  return (kwset_t) kwset;\n}\n\n/*"..., '\n', 1965) = 0x025a038e
[0x4022d1] memchr("  return (kwset_t) kwset;\n}\n\n/* "..., '\n', 1964) = 0x025a03a8
[0x4022d1] memchr("}\n\n/* Add the given string to th"..., '\n', 1938) = 0x025a03aa
[0x4022d1] memchr("\n/* Add the given string to the "..., '\n', 1936) = 0x025a03ab
[0x4022d1] memchr("/* Add the given string to the c"..., '\n', 1935) = 0x025a03f4
[0x4022d1] memchr("   for success, an error message"..., '\n', 1862) = 0x025a0423
[0x4022d1] memchr("char *\nkwsincr(kws, text, len)\n "..., '\n', 1815) = 0x025a042a
[0x4022d1] memchr("kwsincr(kws, text, len)\n     kws"..., '\n', 1808) = 0x025a0442
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 1784) = 0x025a0454
[0x4022d1] memchr("     char *text;\n     size_t len"..., '\n', 1766) = 0x025a0465
[0x4022d1] memchr("     size_t len;\n{\n  struct kwse"..., '\n', 1749) = 0x025a0476
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  regis"..., '\n', 1732) = 0x025a0478
[0x4022d1] memchr("  struct kwset *kwset;\n  registe"..., '\n', 1730) = 0x025a048f
[0x4022d1] memchr("  register struct trie *trie;\n  "..., '\n', 1707) = 0x025a04ad
[0x4022d1] memchr("  register unsigned char label;\n"..., '\n', 1677) = 0x025a04cd
[0x4022d1] memchr("  register struct tree *link;\n  "..., '\n', 1645) = 0x025a04eb
[0x4022d1] memchr("  register int depth;\n  struct t"..., '\n', 1615) = 0x025a0501
[0x4022d1] memchr("  struct tree *links[12];\n  enum"..., '\n', 1593) = 0x025a051b
[0x4022d1] memchr("  enum { L, R } dirs[12];\n  stru"..., '\n', 1567) = 0x025a0535
[0x4022d1] memchr("  struct tree *t, *r, *l, *rl, *"..., '\n', 1541) = 0x025a0559
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 1505) = 0x025a055a
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 1504) = 0x025a057a
[0x4022d1] memchr("  trie = kwset->trie;\n  text += "..., '\n', 1472) = 0x025a0590
[0x4022d1] memchr("  text += len;\n\n  /* Descend the"..., '\n', 1450) = 0x025a059f
[0x4022d1] memchr("\n  /* Descend the trie (built of"..., '\n', 1435) = 0x025a05a0
[0x4022d1] memchr("  /* Descend the trie (built of "..., '\n', 1434) = 0x025a05eb
[0x4022d1] memchr("     installing new nodes when n"..., '\n', 1359) = 0x025a0618
[0x4022d1] memchr("  while (len--)\n    {\n      labe"..., '\n', 1314) = 0x025a0628
[0x4022d1] memchr("    {\n      label = kwset->trans"..., '\n', 1298) = 0x025a062e
[0x4022d1] memchr("      label = kwset->trans ? kws"..., '\n', 1292) = 0x025a067c
[0x4022d1] memchr("\n      /* Descend the tree of ou"..., '\n', 1214) = 0x025a067d
[0x4022d1] memchr("      /* Descend the tree of out"..., '\n', 1213) = 0x025a06bd
[0x4022d1] memchr("\t looking for the current charac"..., '\n', 1149) = 0x025a06f3
[0x4022d1] memchr("\t of the path followed. */\n     "..., '\n', 1095) = 0x025a070e
[0x4022d1] memchr("      link = trie->links;\n      "..., '\n', 1068) = 0x025a0728
[0x4022d1] memchr("      links[0] = (struct tree *)"..., '\n', 1042) = 0x025a0757
[0x4022d1] memchr("      dirs[0] = L;\n      depth ="..., '\n', 995) = 0x025a076a
[0x4022d1] memchr("      depth = 1;\n\n      while (l"..., '\n', 976) = 0x025a077b
[0x4022d1] memchr("\n      while (link && label != l"..., '\n', 959) = 0x025a077c
[0x4022d1] memchr("      while (link && label != li"..., '\n', 958) = 0x025a07a7
[0x4022d1] memchr("\t{\n\t  links[depth] = link;\n\t  if"..., '\n', 915) = 0x025a07aa
[0x4022d1] memchr("\t  links[depth] = link;\n\t  if (l"..., '\n', 912) = 0x025a07c2
[0x4022d1] memchr("\t  if (label < link->label)\n\t   "..., '\n', 888) = 0x025a07de
[0x4022d1] memchr("\t    dirs[depth++] = L, link = l"..., '\n', 860) = 0x025a080a
[0x4022d1] memchr("\t  else\n\t    dirs[depth++] = R, "..., '\n', 816) = 0x025a0812
[0x4022d1] memchr("\t    dirs[depth++] = R, link = l"..., '\n', 808) = 0x025a083e
[0x4022d1] memchr("\t}\n\n      /* The current charact"..., '\n', 764) = 0x025a0841
[0x4022d1] memchr("\n      /* The current character "..., '\n', 761) = 0x025a0842
[0x4022d1] memchr("      /* The current character d"..., '\n', 760) = 0x025a0882
[0x4022d1] memchr("\t this trie node, so build a new"..., '\n', 696) = 0x025a08b9
[0x4022d1] memchr("\t a link in the current trie nod"..., '\n', 641) = 0x025a08e6
[0x4022d1] memchr("      if (!link)\n\t{\n\t  link = (s"..., '\n', 596) = 0x025a08f7
[0x4022d1] memchr("\t{\n\t  link = (struct tree *) obs"..., '\n', 579) = 0x025a08fa
[0x4022d1] memchr("\t  link = (struct tree *) obstac"..., '\n', 576) = 0x025a0933
[0x4022d1] memchr("\t\t\t\t\t       sizeof (struct tree)"..., '\n', 519) = 0x025a0956
[0x4022d1] memchr("\t  if (!link)\n\t    return "memor"..., '\n', 484) = 0x025a0964
[0x4022d1] memchr("\t    return "memory exhausted";\n"..., '\n', 470) = 0x025a0984
[0x4022d1] memchr("\t  link->llink = 0;\n\t  link->rli"..., '\n', 438) = 0x025a0998
[0x4022d1] memchr("\t  link->rlink = 0;\n\t  link->tri"..., '\n', 418) = 0x025a09ac
[0x4022d1] memchr("\t  link->trie = (struct trie *) "..., '\n', 398) = 0x025a09eb
[0x4022d1] memchr("\t\t\t\t\t\t     sizeof (struct trie))"..., '\n', 335) = 0x025a0a0d
[0x4022d1] memchr("\t  if (!link->trie)\n\t    return "..., '\n', 301) = 0x025a0a21
[0x4022d1] memchr("\t    return "memory exhausted";\n"..., '\n', 281) = 0x025a0a41
[0x4022d1] memchr("\t  link->trie->accepting = 0;\n\t "..., '\n', 249) = 0x025a0a5f
[0x4022d1] memchr("\t  link->trie->links = 0;\n\t  lin"..., '\n', 219) = 0x025a0a79
[0x4022d1] memchr("\t  link->trie->parent = trie;\n\t "..., '\n', 193) = 0x025a0a97
[0x4022d1] memchr("\t  link->trie->next = 0;\n\t  link"..., '\n', 163) = 0x025a0ab0
[0x4022d1] memchr("\t  link->trie->fail = 0;\n\t  link"..., '\n', 138) = 0x025a0ac9
[0x4022d1] memchr("\t  link->trie->depth = trie->dep"..., '\n', 113) = 0x025a0af1
[0x4022d1] memchr("\t  link->trie->shift = 0;\n\t  lin"..., '\n', 73) = 0x025a0b0b
[0x4022d1] memchr("\t  link->label = label;\n\t  link-"..., '\n', 47) = 0x025a0b23
[0x4022d1] memchr("\t  link->balance = 0;\n\n\t  /* Ins"..., '\n', 23) = 0x025a0b39
[0x4022d1] memchr("\n\t  /* Install the new tree node"..., '\n', 1) = 0x025a0b3a
[0x4022d1] memchr("\t  /* Install the new tree node "..., '\n', 0) = NULL
[0x4023cc] fwrite("9375:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t  /* Install the new tree node "..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  if (dirs[--depth] == L)\n\t    "..., 'I', 21588) = 0x025a1e9f
[0x40cdf3] memchr("Initial values for the delta tab"..., '\n', 16674) = 0x025a1ede
[0x4022d1] memchr("\t  if (dirs[--depth] == L)\n\t    "..., '\n', 4909) = 0x025a0b87
[0x4022d1] memchr("\t    links[depth]->llink = link;"..., '\n', 4882) = 0x025a0ba8
[0x4022d1] memchr("\t  else\n\t    links[depth]->rlink"..., '\n', 4849) = 0x025a0bb0
[0x4022d1] memchr("\t    links[depth]->rlink = link;"..., '\n', 4841) = 0x025a0bd1
[0x4022d1] memchr("\n\t  /* Back up the tree fixing t"..., '\n', 4808) = 0x025a0bd2
[0x4022d1] memchr("\t  /* Back up the tree fixing th"..., '\n', 4807) = 0x025a0c06
[0x4022d1] memchr("\t  while (depth && !links[depth]"..., '\n', 4755) = 0x025a0c31
[0x4022d1] memchr("\t    {\n\t      if (dirs[depth] =="..., '\n', 4712) = 0x025a0c38
[0x4022d1] memchr("\t      if (dirs[depth] == L)\n\t\t-"..., '\n', 4705) = 0x025a0c55
[0x4022d1] memchr("\t\t--links[depth]->balance;\n\t    "..., '\n', 4676) = 0x025a0c70
[0x4022d1] memchr("\t      else\n\t\t++links[depth]->ba"..., '\n', 4649) = 0x025a0c7c
[0x4022d1] memchr("\t\t++links[depth]->balance;\n\t    "..., '\n', 4637) = 0x025a0c97
[0x4022d1] memchr("\t      --depth;\n\t    }\n\n\t  /* Re"..., '\n', 4610) = 0x025a0ca7
[0x4022d1] memchr("\t    }\n\n\t  /* Rebalance the tree"..., '\n', 4594) = 0x025a0cae
[0x4022d1] memchr("\n\t  /* Rebalance the tree by poi"..., '\n', 4587) = 0x025a0caf
[0x4022d1] memchr("\t  /* Rebalance the tree by poin"..., '\n', 4586) = 0x025a0cee
[0x4022d1] memchr("\t  if (depth && ((dirs[depth] =="..., '\n', 4523) = 0x025a0d2d
[0x4022d1] memchr("\t\t\t|| (dirs[depth] == R && ++lin"..., '\n', 4460) = 0x025a0d63
[0x4022d1] memchr("\t    {\n\t      switch (links[dept"..., '\n', 4406) = 0x025a0d6a
[0x4022d1] memchr("\t      switch (links[depth]->bal"..., '\n', 4399) = 0x025a0d90
[0x4022d1] memchr("\t\t{\n\t\tcase (char) -2:\n\t\t  switch"..., '\n', 4361) = 0x025a0d94
[0x4022d1] memchr("\t\tcase (char) -2:\n\t\t  switch (di"..., '\n', 4357) = 0x025a0da6
[0x4022d1] memchr("\t\t  switch (dirs[depth + 1])\n\t\t "..., '\n', 4339) = 0x025a0dc3
[0x4022d1] memchr("\t\t    {\n\t\t    case L:\n\t\t      r "..., '\n', 4310) = 0x025a0dcb
[0x4022d1] memchr("\t\t    case L:\n\t\t      r = links["..., '\n', 4302) = 0x025a0dd9
[0x4022d1] memchr("\t\t      r = links[depth], t = r-"..., '\n', 4288) = 0x025a0e10
[0x4022d1] memchr("\t\t      t->rlink = r, r->llink ="..., '\n', 4233) = 0x025a0e35
[0x4022d1] memchr("\t\t      t->balance = r->balance "..., '\n', 4196) = 0x025a0e5a
[0x4022d1] memchr("\t\t      break;\n\t\t    case R:\n\t\t "..., '\n', 4159) = 0x025a0e69
[0x4022d1] memchr("\t\t    case R:\n\t\t      r = links["..., '\n', 4144) = 0x025a0e77
[0x4022d1] memchr("\t\t      r = links[depth], l = r-"..., '\n', 4130) = 0x025a0ead
[0x4022d1] memchr("\t\t      rl = t->rlink, lr = t->l"..., '\n', 4076) = 0x025a0ed3
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 4038) = 0x025a0f15
[0x4022d1] memchr("\t\t      l->balance = t->balance "..., '\n', 3972) = 0x025a0f44
[0x4022d1] memchr("\t\t      r->balance = t->balance "..., '\n', 3925) = 0x025a0f7a
[0x4022d1] memchr("\t\t      t->balance = 0;\n\t\t      "..., '\n', 3871) = 0x025a0f92
[0x4022d1] memchr("\t\t      break;\n\t\t    }\n\t\t  break"..., '\n', 3847) = 0x025a0fa1
[0x4022d1] memchr("\t\t    }\n\t\t  break;\n\t\tcase 2:\n\t\t "..., '\n', 3832) = 0x025a0fa9
[0x4022d1] memchr("\t\t  break;\n\t\tcase 2:\n\t\t  switch "..., '\n', 3824) = 0x025a0fb4
[0x4022d1] memchr("\t\tcase 2:\n\t\t  switch (dirs[depth"..., '\n', 3813) = 0x025a0fbe
[0x4022d1] memchr("\t\t  switch (dirs[depth + 1])\n\t\t "..., '\n', 3803) = 0x025a0fdb
[0x4022d1] memchr("\t\t    {\n\t\t    case R:\n\t\t      l "..., '\n', 3774) = 0x025a0fe3
[0x4022d1] memchr("\t\t    case R:\n\t\t      l = links["..., '\n', 3766) = 0x025a0ff1
[0x4022d1] memchr("\t\t      l = links[depth], t = l-"..., '\n', 3752) = 0x025a1028
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 3697) = 0x025a104d
[0x4022d1] memchr("\t\t      t->balance = l->balance "..., '\n', 3660) = 0x025a1072
[0x4022d1] memchr("\t\t      break;\n\t\t    case L:\n\t\t "..., '\n', 3623) = 0x025a1081
[0x4022d1] memchr("\t\t    case L:\n\t\t      l = links["..., '\n', 3608) = 0x025a108f
[0x4022d1] memchr("\t\t      l = links[depth], r = l-"..., '\n', 3594) = 0x025a10c5
[0x4022d1] memchr("\t\t      lr = t->llink, rl = t->r"..., '\n', 3540) = 0x025a10eb
[0x4022d1] memchr("\t\t      t->llink = l, l->rlink ="..., '\n', 3502) = 0x025a112d
[0x4022d1] memchr("\t\t      l->balance = t->balance "..., '\n', 3436) = 0x025a115c
[0x4022d1] memchr("\t\t      r->balance = t->balance "..., '\n', 3389) = 0x025a1192
[0x4022d1] memchr("\t\t      t->balance = 0;\n\t\t      "..., '\n', 3335) = 0x025a11aa
[0x4022d1] memchr("\t\t      break;\n\t\t    }\n\t\t  break"..., '\n', 3311) = 0x025a11b9
[0x4022d1] memchr("\t\t    }\n\t\t  break;\n\t\t}\n\n\t      i"..., '\n', 3296) = 0x025a11c1
[0x4022d1] memchr("\t\t  break;\n\t\t}\n\n\t      if (dirs["..., '\n', 3288) = 0x025a11cc
[0x4022d1] memchr("\t\t}\n\n\t      if (dirs[depth - 1] "..., '\n', 3277) = 0x025a11d0
[0x4022d1] memchr("\n\t      if (dirs[depth - 1] == L"..., '\n', 3273) = 0x025a11d1
[0x4022d1] memchr("\t      if (dirs[depth - 1] == L)"..., '\n', 3272) = 0x025a11f2
[0x4022d1] memchr("\t\tlinks[depth - 1]->llink = t;\n\t"..., '\n', 3239) = 0x025a1211
[0x4022d1] memchr("\t      else\n\t\tlinks[depth - 1]->"..., '\n', 3208) = 0x025a121d
[0x4022d1] memchr("\t\tlinks[depth - 1]->rlink = t;\n\t"..., '\n', 3196) = 0x025a123c
[0x4022d1] memchr("\t    }\n\t}\n\n      trie = link->tr"..., '\n', 3165) = 0x025a1243
[0x4022d1] memchr("\t}\n\n      trie = link->trie;\n   "..., '\n', 3158) = 0x025a1246
[0x4022d1] memchr("\n      trie = link->trie;\n    }\n"..., '\n', 3155) = 0x025a1247
[0x4022d1] memchr("      trie = link->trie;\n    }\n\n"..., '\n', 3154) = 0x025a1260
[0x4022d1] memchr("    }\n\n  /* Mark the node we fin"..., '\n', 3129) = 0x025a1266
[0x4022d1] memchr("\n  /* Mark the node we finally r"..., '\n', 3123) = 0x025a1267
[0x4022d1] memchr("  /* Mark the node we finally re"..., '\n', 3122) = 0x025a12a8
[0x4022d1] memchr("     index number of this word i"..., '\n', 3057) = 0x025a12e5
[0x4022d1] memchr("  if (!trie->accepting)\n    trie"..., '\n', 2996) = 0x025a12fd
[0x4022d1] memchr("    trie->accepting = 1 + 2 * kw"..., '\n', 2972) = 0x025a1329
[0x4022d1] memchr("  ++kwset->words;\n\n  /* Keep tra"..., '\n', 2928) = 0x025a133b
[0x4022d1] memchr("\n  /* Keep track of the longest "..., '\n', 2910) = 0x025a133c
[0x4022d1] memchr("  /* Keep track of the longest a"..., '\n', 2909) = 0x025a1386
[0x4022d1] memchr("  if (trie->depth < kwset->mind)"..., '\n', 2835) = 0x025a13a7
[0x4022d1] memchr("    kwset->mind = trie->depth;\n "..., '\n', 2802) = 0x025a13c6
[0x4022d1] memchr("  if (trie->depth > kwset->maxd)"..., '\n', 2771) = 0x025a13e7
[0x4022d1] memchr("    kwset->maxd = trie->depth;\n\n"..., '\n', 2738) = 0x025a1406
[0x4022d1] memchr("\n  return 0;\n}\n\n/* Enqueue the t"..., '\n', 2707) = 0x025a1407
[0x4022d1] memchr("  return 0;\n}\n\n/* Enqueue the tr"..., '\n', 2706) = 0x025a1413
[0x4022d1] memchr("}\n\n/* Enqueue the trie nodes ref"..., '\n', 2694) = 0x025a1415
[0x4022d1] memchr("\n/* Enqueue the trie nodes refer"..., '\n', 2692) = 0x025a1416
[0x4022d1] memchr("/* Enqueue the trie nodes refere"..., '\n', 2691) = 0x025a1456
[0x4022d1] memchr("   given queue. */\nstatic void\ne"..., '\n', 2627) = 0x025a1469
[0x4022d1] memchr("static void\nenqueue(tree, last)\n"..., '\n', 2608) = 0x025a1475
[0x4022d1] memchr("enqueue(tree, last)\n     struct "..., '\n', 2596) = 0x025a1489
[0x4022d1] memchr("     struct tree *tree;\n     str"..., '\n', 2576) = 0x025a14a1
[0x4022d1] memchr("     struct trie **last;\n{\n  if "..., '\n', 2552) = 0x025a14ba
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  enq"..., '\n', 2527) = 0x025a14bc
[0x4022d1] memchr("  if (!tree)\n    return;\n  enque"..., '\n', 2525) = 0x025a14c9
[0x4022d1] memchr("    return;\n  enqueue(tree->llin"..., '\n', 2512) = 0x025a14d5
[0x4022d1] memchr("  enqueue(tree->llink, last);\n  "..., '\n', 2500) = 0x025a14f3
[0x4022d1] memchr("  enqueue(tree->rlink, last);\n  "..., '\n', 2470) = 0x025a1511
[0x4022d1] memchr("  (*last) = (*last)->next = tree"..., '\n', 2440) = 0x025a1539
[0x4022d1] memchr("}\n\n/* Compute the Aho-Corasick f"..., '\n', 2400) = 0x025a153b
[0x4022d1] memchr("\n/* Compute the Aho-Corasick fai"..., '\n', 2398) = 0x025a153c
[0x4022d1] memchr("/* Compute the Aho-Corasick fail"..., '\n', 2397) = 0x025a1587
[0x4022d1] memchr("   from the given tree, given th"..., '\n', 2322) = 0x025a15ce
[0x4022d1] memchr("   well as a last resort failure"..., '\n', 2251) = 0x025a15f8
[0x4022d1] memchr("static void\ntreefails(tree, fail"..., '\n', 2209) = 0x025a1604
[0x4022d1] memchr("treefails(tree, fail, recourse)\n"..., '\n', 2197) = 0x025a1624
[0x4022d1] memchr("     register struct tree *tree;"..., '\n', 2165) = 0x025a1645
[0x4022d1] memchr("     struct trie *fail;\n     str"..., '\n', 2132) = 0x025a165d
[0x4022d1] memchr("     struct trie *recourse;\n{\n  "..., '\n', 2108) = 0x025a1679
[0x4022d1] memchr("{\n  register struct tree *link;\n"..., '\n', 2080) = 0x025a167b
[0x4022d1] memchr("  register struct tree *link;\n\n "..., '\n', 2078) = 0x025a1699
[0x4022d1] memchr("\n  if (!tree)\n    return;\n\n  tre"..., '\n', 2048) = 0x025a169a
[0x4022d1] memchr("  if (!tree)\n    return;\n\n  tree"..., '\n', 2047) = 0x025a16a7
[0x4022d1] memchr("    return;\n\n  treefails(tree->l"..., '\n', 2034) = 0x025a16b3
[0x4022d1] memchr("\n  treefails(tree->llink, fail, "..., '\n', 2022) = 0x025a16b4
[0x4022d1] memchr("  treefails(tree->llink, fail, r"..., '\n', 2021) = 0x025a16de
[0x4022d1] memchr("  treefails(tree->rlink, fail, r"..., '\n', 1979) = 0x025a1708
[0x4022d1] memchr("\n  /* Find, in the chain of fail"..., '\n', 1937) = 0x025a1709
[0x4022d1] memchr("  /* Find, in the chain of fails"..., '\n', 1936) = 0x025a174c
[0x4022d1] memchr("     node that has a descendent "..., '\n', 1869) = 0x025a1785
[0x4022d1] memchr("  while (fail)\n    {\n      link "..., '\n', 1812) = 0x025a1794
[0x4022d1] memchr("    {\n      link = fail->links;\n"..., '\n', 1797) = 0x025a179a
[0x4022d1] memchr("      link = fail->links;\n      "..., '\n', 1791) = 0x025a17b4
[0x4022d1] memchr("      while (link && tree->label"..., '\n', 1765) = 0x025a17e5
[0x4022d1] memchr("\tif (tree->label < link->label)\n"..., '\n', 1716) = 0x025a1805
[0x4022d1] memchr("\t  link = link->llink;\n\telse\n\t  "..., '\n', 1684) = 0x025a181c
[0x4022d1] memchr("\telse\n\t  link = link->rlink;\n   "..., '\n', 1661) = 0x025a1822
[0x4022d1] memchr("\t  link = link->rlink;\n      if "..., '\n', 1655) = 0x025a1839
[0x4022d1] memchr("      if (link)\n\t{\n\t  tree->trie"..., '\n', 1632) = 0x025a1849
[0x4022d1] memchr("\t{\n\t  tree->trie->fail = link->t"..., '\n', 1616) = 0x025a184c
[0x4022d1] memchr("\t  tree->trie->fail = link->trie"..., '\n', 1613) = 0x025a186e
[0x4022d1] memchr("\t  return;\n\t}\n      fail = fail-"..., '\n', 1579) = 0x025a1879
[0x4022d1] memchr("\t}\n      fail = fail->fail;\n    "..., '\n', 1568) = 0x025a187c
[0x4022d1] memchr("      fail = fail->fail;\n    }\n\n"..., '\n', 1565) = 0x025a1895
[0x4022d1] memchr("    }\n\n  tree->trie->fail = reco"..., '\n', 1540) = 0x025a189b
[0x4022d1] memchr("\n  tree->trie->fail = recourse;\n"..., '\n', 1534) = 0x025a189c
[0x4022d1] memchr("  tree->trie->fail = recourse;\n}"..., '\n', 1533) = 0x025a18bb
[0x4022d1] memchr("}\n\n/* Set delta entries for the "..., '\n', 1502) = 0x025a18bd
[0x4022d1] memchr("\n/* Set delta entries for the li"..., '\n', 1500) = 0x025a18be
[0x4022d1] memchr("/* Set delta entries for the lin"..., '\n', 1499) = 0x025a18fd
[0x4022d1] memchr("   the preexisting delta value i"..., '\n', 1436) = 0x025a1941
[0x4022d1] memchr("static void\ntreedelta(tree, dept"..., '\n', 1368) = 0x025a194d
[0x4022d1] memchr("treedelta(tree, depth, delta)\n  "..., '\n', 1356) = 0x025a196b
[0x4022d1] memchr("     register struct tree *tree;"..., '\n', 1326) = 0x025a198c
[0x4022d1] memchr("     register unsigned int depth"..., '\n', 1293) = 0x025a19ae
[0x4022d1] memchr("     unsigned char delta[];\n{\n  "..., '\n', 1259) = 0x025a19ca
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  tre"..., '\n', 1231) = 0x025a19cc
[0x4022d1] memchr("  if (!tree)\n    return;\n  treed"..., '\n', 1229) = 0x025a19d9
[0x4022d1] memchr("    return;\n  treedelta(tree->ll"..., '\n', 1216) = 0x025a19e5
[0x4022d1] memchr("  treedelta(tree->llink, depth, "..., '\n', 1204) = 0x025a1a0d
[0x4022d1] memchr("  treedelta(tree->rlink, depth, "..., '\n', 1164) = 0x025a1a35
[0x4022d1] memchr("  if (depth < delta[tree->label]"..., '\n', 1124) = 0x025a1a57
[0x4022d1] memchr("    delta[tree->label] = depth;\n"..., '\n', 1090) = 0x025a1a77
[0x4022d1] memchr("}\n\n/* Return true if A has every"..., '\n', 1058) = 0x025a1a79
[0x4022d1] memchr("\n/* Return true if A has every l"..., '\n', 1056) = 0x025a1a7a
[0x4022d1] memchr("/* Return true if A has every la"..., '\n', 1055) = 0x025a1aa7
[0x4022d1] memchr("static int\nhasevery(a, b)\n     r"..., '\n', 1010) = 0x025a1ab2
[0x4022d1] memchr("hasevery(a, b)\n     register str"..., '\n', 999) = 0x025a1ac1
[0x4022d1] memchr("     register struct tree *a;\n  "..., '\n', 984) = 0x025a1adf
[0x4022d1] memchr("     register struct tree *b;\n{\n"..., '\n', 954) = 0x025a1afd
[0x4022d1] memchr("{\n  if (!b)\n    return 1;\n  if ("..., '\n', 924) = 0x025a1aff
[0x4022d1] memchr("  if (!b)\n    return 1;\n  if (!h"..., '\n', 922) = 0x025a1b09
[0x4022d1] memchr("    return 1;\n  if (!hasevery(a,"..., '\n', 912) = 0x025a1b17
[0x4022d1] memchr("  if (!hasevery(a, b->llink))\n  "..., '\n', 898) = 0x025a1b35
[0x4022d1] memchr("    return 0;\n  if (!hasevery(a,"..., '\n', 868) = 0x025a1b43
[0x4022d1] memchr("  if (!hasevery(a, b->rlink))\n  "..., '\n', 854) = 0x025a1b61
[0x4022d1] memchr("    return 0;\n  while (a && b->l"..., '\n', 824) = 0x025a1b6f
[0x4022d1] memchr("  while (a && b->label != a->lab"..., '\n', 810) = 0x025a1b93
[0x4022d1] memchr("    if (b->label < a->label)\n   "..., '\n', 774) = 0x025a1bb0
[0x4022d1] memchr("      a = a->llink;\n    else\n   "..., '\n', 745) = 0x025a1bc4
[0x4022d1] memchr("    else\n      a = a->rlink;\n  r"..., '\n', 725) = 0x025a1bcd
[0x4022d1] memchr("      a = a->rlink;\n  return !!a"..., '\n', 716) = 0x025a1be1
[0x4022d1] memchr("  return !!a;\n}\n\n/* Compute a ve"..., '\n', 696) = 0x025a1bef
[0x4022d1] memchr("}\n\n/* Compute a vector, indexed "..., '\n', 682) = 0x025a1bf1
[0x4022d1] memchr("\n/* Compute a vector, indexed by"..., '\n', 680) = 0x025a1bf2
[0x4022d1] memchr("/* Compute a vector, indexed by "..., '\n', 679) = 0x025a1c34
[0x4022d1] memchr("   referenced from the given tre"..., '\n', 613) = 0x025a1c5a
[0x4022d1] memchr("static void\ntreenext(tree, next)"..., '\n', 575) = 0x025a1c66
[0x4022d1] memchr("treenext(tree, next)\n     struct"..., '\n', 563) = 0x025a1c7b
[0x4022d1] memchr("     struct tree *tree;\n     str"..., '\n', 542) = 0x025a1c93
[0x4022d1] memchr("     struct trie *next[];\n{\n  if"..., '\n', 518) = 0x025a1cad
[0x4022d1] memchr("{\n  if (!tree)\n    return;\n  tre"..., '\n', 492) = 0x025a1caf
[0x4022d1] memchr("  if (!tree)\n    return;\n  treen"..., '\n', 490) = 0x025a1cbc
[0x4022d1] memchr("    return;\n  treenext(tree->lli"..., '\n', 477) = 0x025a1cc8
[0x4022d1] memchr("  treenext(tree->llink, next);\n "..., '\n', 465) = 0x025a1ce7
[0x4022d1] memchr("  treenext(tree->rlink, next);\n "..., '\n', 434) = 0x025a1d06
[0x4022d1] memchr("  next[tree->label] = tree->trie"..., '\n', 403) = 0x025a1d28
[0x4022d1] memchr("}\n\n/* Compute the shift for each"..., '\n', 369) = 0x025a1d2a
[0x4022d1] memchr("\n/* Compute the shift for each t"..., '\n', 367) = 0x025a1d2b
[0x4022d1] memchr("/* Compute the shift for each tr"..., '\n', 366) = 0x025a1d69
[0x4022d1] memchr("   table and next cache for the "..., '\n', 304) = 0x025a1d9f
[0x4022d1] memchr("char *\nkwsprep(kws)\n     kwset_t"..., '\n', 250) = 0x025a1da6
[0x4022d1] memchr("kwsprep(kws)\n     kwset_t kws;\n{"..., '\n', 243) = 0x025a1db3
[0x4022d1] memchr("     kwset_t kws;\n{\n  register s"..., '\n', 230) = 0x025a1dc5
[0x4022d1] memchr("{\n  register struct kwset *kwset"..., '\n', 212) = 0x025a1dc7
[0x4022d1] memchr("  register struct kwset *kwset;\n"..., '\n', 210) = 0x025a1de7
[0x4022d1] memchr("  register int i;\n  register str"..., '\n', 178) = 0x025a1df9
[0x4022d1] memchr("  register struct trie *curr, *f"..., '\n', 160) = 0x025a1e1e
[0x4022d1] memchr("  register char *trans;\n  unsign"..., '\n', 123) = 0x025a1e36
[0x4022d1] memchr("  unsigned char delta[NCHAR];\n  "..., '\n', 99) = 0x025a1e54
[0x4022d1] memchr("  struct trie *last, *next[NCHAR"..., '\n', 69) = 0x025a1e77
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 34) = 0x025a1e78
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 33) = 0x025a1e98
[0x4022d1] memchr("\n  /* Initial values for the del"..., '\n', 1) = 0x025a1e99
[0x4022d1] memchr("  /* Initial values for the delt"..., '\n', 0) = NULL
[0x4023cc] fwrite("9577:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initial values for the delt"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     delta entry for a given cha"..., 'I', 16610) = 0x025a26a0
[0x40cdf3] memchr("If the current node has some out"..., '\n', 14625) = 0x025a26d8
[0x4022d1] memchr("     delta entry for a given cha"..., '\n', 1975) = 0x025a1f22
[0x4022d1] memchr("     node at which an outgoing e"..., '\n', 1907) = 0x025a1f67
[0x4022d1] memchr("  if (kwset->mind < 256)\n    for"..., '\n', 1838) = 0x025a1f80
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 1813) = 0x025a1fa0
[0x4022d1] memchr("      delta[i] = kwset->mind;\n  "..., '\n', 1781) = 0x025a1fbe
[0x4022d1] memchr("  else\n    for (i = 0; i < NCHAR"..., '\n', 1751) = 0x025a1fc5
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 1744) = 0x025a1fe5
[0x4022d1] memchr("      delta[i] = 255;\n\n  /* Chec"..., '\n', 1712) = 0x025a1ffb
[0x4022d1] memchr("\n  /* Check if we can use the si"..., '\n', 1690) = 0x025a1ffc
[0x4022d1] memchr("  /* Check if we can use the sim"..., '\n', 1689) = 0x025a203f
[0x4022d1] memchr("     of the hairy commentz-walte"..., '\n', 1622) = 0x025a206f
[0x4022d1] memchr("  if (kwset->words == 1 && kwset"..., '\n', 1574) = 0x025a209d
[0x4022d1] memchr("    {\n      /* Looking for just "..., '\n', 1528) = 0x025a20a3
[0x4022d1] memchr("      /* Looking for just one st"..., '\n', 1522) = 0x025a20e7
[0x4022d1] memchr("      kwset->target = obstack_al"..., '\n', 1454) = 0x025a212a
[0x4022d1] memchr("      for (i = kwset->mind - 1, "..., '\n', 1387) = 0x025a216b
[0x4022d1] memchr("\t{\n\t  kwset->target[i] = curr->l"..., '\n', 1322) = 0x025a216e
[0x4022d1] memchr("\t  kwset->target[i] = curr->link"..., '\n', 1319) = 0x025a2198
[0x4022d1] memchr("\t  curr = curr->links->trie;\n\t}\n"..., '\n', 1277) = 0x025a21b5
[0x4022d1] memchr("\t}\n      /* Build the Boyer Moor"..., '\n', 1248) = 0x025a21b8
[0x4022d1] memchr("      /* Build the Boyer Moore d"..., '\n', 1245) = 0x025a2202
[0x4022d1] memchr("      for (i = 0; i < kwset->min"..., '\n', 1171) = 0x025a222a
[0x4022d1] memchr("\tdelta[(unsigned char) kwset->ta"..., '\n', 1131) = 0x025a226c
[0x4022d1] memchr("      kwset->mind2 = kwset->mind"..., '\n', 1065) = 0x025a228e
[0x4022d1] memchr("      /* Find the minimal delta2"..., '\n', 1031) = 0x025a22ce
[0x4022d1] memchr("\t a backwards match has failed. "..., '\n', 967) = 0x025a22f1
[0x4022d1] memchr("      for (i = 0; i < kwset->min"..., '\n', 932) = 0x025a231d
[0x4022d1] memchr("\tif (kwset->target[i] == kwset->"..., '\n', 888) = 0x025a2356
[0x4022d1] memchr("\t  kwset->mind2 = kwset->mind - "..., '\n', 831) = 0x025a237f
[0x4022d1] memchr("    }\n  else\n    {\n      /* Trav"..., '\n', 790) = 0x025a2385
[0x4022d1] memchr("  else\n    {\n      /* Traverse t"..., '\n', 784) = 0x025a238c
[0x4022d1] memchr("    {\n      /* Traverse the node"..., '\n', 777) = 0x025a2392
[0x4022d1] memchr("      /* Traverse the nodes of t"..., '\n', 771) = 0x025a23d9
[0x4022d1] memchr("\t computing the delta table, fai"..., '\n', 700) = 0x025a241f
[0x4022d1] memchr("      for (curr = last = kwset->"..., '\n', 630) = 0x025a245e
[0x4022d1] memchr("\t{\n\t  /* Enqueue the immediate d"..., '\n', 567) = 0x025a2461
[0x4022d1] memchr("\t  /* Enqueue the immediate desc"..., '\n', 564) = 0x025a24a6
[0x4022d1] memchr("\t  enqueue(curr->links, &last);\n"..., '\n', 495) = 0x025a24c6
[0x4022d1] memchr("\n\t  curr->shift = kwset->mind;\n\t"..., '\n', 463) = 0x025a24c7
[0x4022d1] memchr("\t  curr->shift = kwset->mind;\n\t "..., '\n', 462) = 0x025a24e5
[0x4022d1] memchr("\t  curr->maxshift = kwset->mind;"..., '\n', 432) = 0x025a2506
[0x4022d1] memchr("\n\t  /* Update the delta table fo"..., '\n', 399) = 0x025a2507
[0x4022d1] memchr("\t  /* Update the delta table for"..., '\n', 398) = 0x025a2549
[0x4022d1] memchr("\t  treedelta(curr->links, curr->"..., '\n', 332) = 0x025a2578
[0x4022d1] memchr("\n\t  /* Compute the failure funct"..., '\n', 285) = 0x025a2579
[0x4022d1] memchr("\t  /* Compute the failure functi"..., '\n', 284) = 0x025a25c0
[0x4022d1] memchr("\t  treefails(curr->links, curr->"..., '\n', 213) = 0x025a25f4
[0x4022d1] memchr("\n\t  /* Update the shifts at each"..., '\n', 161) = 0x025a25f5
[0x4022d1] memchr("\t  /* Update the shifts at each "..., '\n', 160) = 0x025a2636
[0x4022d1] memchr("\t     of fails back to the root."..., '\n', 95) = 0x025a265a
[0x4022d1] memchr("\t  for (fail = curr->fail; fail;"..., '\n', 59) = 0x025a268e
[0x4022d1] memchr("\t    {\n\t      /* If the current "..., '\n', 7) = 0x025a2695
[0x4022d1] memchr("\t      /* If the current node ha"..., '\n', 0) = NULL
[0x4023cc] fwrite("9630:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      /* If the current node ha"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t doesn't, then the shift at th"..., 'I', 14568) = 0x025a27d6
[0x40cdf3] memchr("If the current node is accepting"..., '\n', 14315) = 0x025a280c
[0x4022d1] memchr("\t\t doesn't, then the shift at th"..., '\n', 243) = 0x025a2713
[0x4022d1] memchr("\t\t than the difference of their "..., '\n', 184) = 0x025a273e
[0x4022d1] memchr("\t      if (!hasevery(fail->links"..., '\n', 141) = 0x025a276e
[0x4022d1] memchr("\t\tif (curr->depth - fail->depth "..., '\n', 93) = 0x025a279d
[0x4022d1] memchr("\t\t  fail->shift = curr->depth - "..., '\n', 46) = 0x025a27ca
[0x4022d1] memchr("\n\t      /* If the current node i"..., '\n', 1) = 0x025a27cb
[0x4022d1] memchr("\t      /* If the current node is"..., '\n', 0) = NULL
[0x4023cc] fwrite("9637:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("\t      /* If the current node is"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t fail and its descendents shou"..., 'I', 14260) = 0x025a35ad
[0x40cdf3] memchr("Initialize register copies and l"..., '\n', 10772) = 0x025a35e6
[0x4022d1] memchr("\t\t fail and its descendents shou"..., '\n', 3483) = 0x025a2845
[0x4022d1] memchr("\t\t difference of their depths. *"..., '\n', 3426) = 0x025a2867
[0x4022d1] memchr("\t      if (curr->accepting && fa"..., '\n', 3392) = 0x025a28b1
[0x4022d1] memchr("\t\tfail->maxshift = curr->depth -"..., '\n', 3318) = 0x025a28df
[0x4022d1] memchr("\t    }\n\t}\n\n      /* Traverse the"..., '\n', 3272) = 0x025a28e6
[0x4022d1] memchr("\t}\n\n      /* Traverse the trie i"..., '\n', 3265) = 0x025a28e9
[0x4022d1] memchr("\n      /* Traverse the trie in l"..., '\n', 3262) = 0x025a28ea
[0x4022d1] memchr("      /* Traverse the trie in le"..., '\n', 3261) = 0x025a2935
[0x4022d1] memchr("\t shift exceeds their inherited "..., '\n', 3186) = 0x025a2962
[0x4022d1] memchr("      for (curr = kwset->trie->n"..., '\n', 3141) = 0x025a29a0
[0x4022d1] memchr("\t{\n\t  if (curr->maxshift > curr-"..., '\n', 3079) = 0x025a29a3
[0x4022d1] memchr("\t  if (curr->maxshift > curr->pa"..., '\n', 3076) = 0x025a29d3
[0x4022d1] memchr("\t    curr->maxshift = curr->pare"..., '\n', 3028) = 0x025a2a01
[0x4022d1] memchr("\t  if (curr->shift > curr->maxsh"..., '\n', 2982) = 0x025a2a26
[0x4022d1] memchr("\t    curr->shift = curr->maxshif"..., '\n', 2945) = 0x025a2a49
[0x4022d1] memchr("\t}\n\n      /* Create a vector, in"..., '\n', 2910) = 0x025a2a4c
[0x4022d1] memchr("\n      /* Create a vector, index"..., '\n', 2907) = 0x025a2a4d
[0x4022d1] memchr("      /* Create a vector, indexe"..., '\n', 2906) = 0x025a2a98
[0x4022d1] memchr("\t from the root node. */\n      f"..., '\n', 2831) = 0x025a2ab1
[0x4022d1] memchr("      for (i = 0; i < NCHAR; ++i"..., '\n', 2806) = 0x025a2ad3
[0x4022d1] memchr("\tnext[i] = 0;\n      treenext(kws"..., '\n', 2772) = 0x025a2ae1
[0x4022d1] memchr("      treenext(kwset->trie->link"..., '\n', 2758) = 0x025a2b0b
[0x4022d1] memchr("\n      if ((trans = kwset->trans"..., '\n', 2716) = 0x025a2b0c
[0x4022d1] memchr("      if ((trans = kwset->trans)"..., '\n', 2715) = 0x025a2b33
[0x4022d1] memchr("\tfor (i = 0; i < NCHAR; ++i)\n\t  "..., '\n', 2676) = 0x025a2b50
[0x4022d1] memchr("\t  kwset->next[i] = next[(unsign"..., '\n', 2647) = 0x025a2b84
[0x4022d1] memchr("      else\n\tfor (i = 0; i < NCHA"..., '\n', 2595) = 0x025a2b8f
[0x4022d1] memchr("\tfor (i = 0; i < NCHAR; ++i)\n\t  "..., '\n', 2584) = 0x025a2bac
[0x4022d1] memchr("\t  kwset->next[i] = next[i];\n   "..., '\n', 2555) = 0x025a2bc9
[0x4022d1] memchr("    }\n\n  /* Fix things up for an"..., '\n', 2526) = 0x025a2bcf
[0x4022d1] memchr("\n  /* Fix things up for any tran"..., '\n', 2520) = 0x025a2bd0
[0x4022d1] memchr("  /* Fix things up for any trans"..., '\n', 2519) = 0x025a2c01
[0x4022d1] memchr("  if ((trans = kwset->trans) != "..., '\n', 2470) = 0x025a2c24
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 2435) = 0x025a2c44
[0x4022d1] memchr("      kwset->delta[i] = delta[(u"..., '\n', 2403) = 0x025a2c7d
[0x4022d1] memchr("  else\n    for (i = 0; i < NCHAR"..., '\n', 2346) = 0x025a2c84
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 2339) = 0x025a2ca4
[0x4022d1] memchr("      kwset->delta[i] = delta[i]"..., '\n', 2307) = 0x025a2cc6
[0x4022d1] memchr("\n  return 0;\n}\n\n#define U(C) ((u"..., '\n', 2273) = 0x025a2cc7
[0x4022d1] memchr("  return 0;\n}\n\n#define U(C) ((un"..., '\n', 2272) = 0x025a2cd3
[0x4022d1] memchr("}\n\n#define U(C) ((unsigned char)"..., '\n', 2260) = 0x025a2cd5
[0x4022d1] memchr("\n#define U(C) ((unsigned char) ("..., '\n', 2258) = 0x025a2cd6
[0x4022d1] memchr("#define U(C) ((unsigned char) (C"..., '\n', 2257) = 0x025a2cf9
[0x4022d1] memchr("\n/* Fast boyer-moore search. */\n"..., '\n', 2222) = 0x025a2cfa
[0x4022d1] memchr("/* Fast boyer-moore search. */\ns"..., '\n', 2221) = 0x025a2d19
[0x4022d1] memchr("static char *\nbmexec(kws, text, "..., '\n', 2190) = 0x025a2d27
[0x4022d1] memchr("bmexec(kws, text, size)\n     kws"..., '\n', 2176) = 0x025a2d3f
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 2152) = 0x025a2d51
[0x4022d1] memchr("     char *text;\n     size_t siz"..., '\n', 2134) = 0x025a2d62
[0x4022d1] memchr("     size_t size;\n{\n  struct kws"..., '\n', 2117) = 0x025a2d74
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  regis"..., '\n', 2099) = 0x025a2d76
[0x4022d1] memchr("  struct kwset *kwset;\n  registe"..., '\n', 2097) = 0x025a2d8d
[0x4022d1] memchr("  register unsigned char *d1;\n  "..., '\n', 2074) = 0x025a2dab
[0x4022d1] memchr("  register char *ep, *sp, *tp;\n "..., '\n', 2044) = 0x025a2dca
[0x4022d1] memchr("  register int d, gc, i, len, md"..., '\n', 2013) = 0x025a2ded
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 1978) = 0x025a2dee
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 1977) = 0x025a2e0e
[0x4022d1] memchr("  len = kwset->mind;\n\n  if (len "..., '\n', 1945) = 0x025a2e23
[0x4022d1] memchr("\n  if (len == 0)\n    return text"..., '\n', 1924) = 0x025a2e24
[0x4022d1] memchr("  if (len == 0)\n    return text;"..., '\n', 1923) = 0x025a2e34
[0x4022d1] memchr("    return text;\n  if (len > siz"..., '\n', 1907) = 0x025a2e45
[0x4022d1] memchr("  if (len > size)\n    return 0;\n"..., '\n', 1890) = 0x025a2e57
[0x4022d1] memchr("    return 0;\n  if (len == 1)\n  "..., '\n', 1872) = 0x025a2e65
[0x4022d1] memchr("  if (len == 1)\n    return memch"..., '\n', 1858) = 0x025a2e75
[0x4022d1] memchr("    return memchr(text, kwset->t"..., '\n', 1842) = 0x025a2ea6
[0x4022d1] memchr("\n  d1 = kwset->delta;\n  sp = kws"..., '\n', 1793) = 0x025a2ea7
[0x4022d1] memchr("  d1 = kwset->delta;\n  sp = kwse"..., '\n', 1792) = 0x025a2ebc
[0x4022d1] memchr("  sp = kwset->target + len;\n  gc"..., '\n', 1771) = 0x025a2ed8
[0x4022d1] memchr("  gc = U(sp[-2]);\n  md2 = kwset-"..., '\n', 1743) = 0x025a2eea
[0x4022d1] memchr("  md2 = kwset->mind2;\n  tp = tex"..., '\n', 1725) = 0x025a2f00
[0x4022d1] memchr("  tp = text + len;\n\n  /* Signifi"..., '\n', 1703) = 0x025a2f13
[0x4022d1] memchr("\n  /* Significance of 12: 1 (ini"..., '\n', 1684) = 0x025a2f14
[0x4022d1] memchr("  /* Significance of 12: 1 (init"..., '\n', 1683) = 0x025a2f5f
[0x4022d1] memchr("  if (size > 12 * len)\n    /* 11"..., '\n', 1608) = 0x025a2f76
[0x4022d1] memchr("    /* 11 is not a bug, the init"..., '\n', 1585) = 0x025a2fb7
[0x4022d1] memchr("    for (ep = text + size - 11 *"..., '\n', 1520) = 0x025a2fdf
[0x4022d1] memchr("      {\n\twhile (tp <= ep)\n\t  {\n\t"..., '\n', 1480) = 0x025a2fe7
[0x4022d1] memchr("\twhile (tp <= ep)\n\t  {\n\t    d = "..., '\n', 1472) = 0x025a2ff9
[0x4022d1] memchr("\t  {\n\t    d = d1[U(tp[-1])], tp "..., '\n', 1454) = 0x025a2ffe
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1449) = 0x025a301f
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1416) = 0x025a3040
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 1383) = 0x025a3051
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 1366) = 0x025a3064
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1347) = 0x025a3085
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1314) = 0x025a30a6
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1281) = 0x025a30c7
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 1248) = 0x025a30d8
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 1231) = 0x025a30eb
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1212) = 0x025a310c
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1179) = 0x025a312d
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1146) = 0x025a314e
[0x4022d1] memchr("\t    if (d == 0)\n\t      goto fou"..., '\n', 1113) = 0x025a315f
[0x4022d1] memchr("\t      goto found;\n\t    d = d1[U"..., '\n', 1096) = 0x025a3172
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1077) = 0x025a3193
[0x4022d1] memchr("\t    d = d1[U(tp[-1])], tp += d;"..., '\n', 1044) = 0x025a31b4
[0x4022d1] memchr("\t  }\n\tbreak;\n      found:\n\tif (U"..., '\n', 1011) = 0x025a31b9
[0x4022d1] memchr("\tbreak;\n      found:\n\tif (U(tp[-"..., '\n', 1006) = 0x025a31c1
[0x4022d1] memchr("      found:\n\tif (U(tp[-2]) == g"..., '\n', 998) = 0x025a31ce
[0x4022d1] memchr("\tif (U(tp[-2]) == gc)\n\t  {\n\t    "..., '\n', 985) = 0x025a31e4
[0x4022d1] memchr("\t  {\n\t    for (i = 3; i <= len &"..., '\n', 963) = 0x025a31e9
[0x4022d1] memchr("\t    for (i = 3; i <= len && U(t"..., '\n', 958) = 0x025a3223
[0x4022d1] memchr("\t      ;\n\t    if (i > len)\n\t    "..., '\n', 900) = 0x025a322c
[0x4022d1] memchr("\t    if (i > len)\n\t      return "..., '\n', 891) = 0x025a323e
[0x4022d1] memchr("\t      return tp - len;\n\t  }\n\ttp"..., '\n', 873) = 0x025a3256
[0x4022d1] memchr("\t  }\n\ttp += md2;\n      }\n\n  /* N"..., '\n', 849) = 0x025a325b
[0x4022d1] memchr("\ttp += md2;\n      }\n\n  /* Now we"..., '\n', 844) = 0x025a3267
[0x4022d1] memchr("      }\n\n  /* Now we have only a"..., '\n', 832) = 0x025a326f
[0x4022d1] memchr("\n  /* Now we have only a few cha"..., '\n', 824) = 0x025a3270
[0x4022d1] memchr("  /* Now we have only a few char"..., '\n', 823) = 0x025a32ab
[0x4022d1] memchr("     carefully avoid ever produc"..., '\n', 764) = 0x025a32ec
[0x4022d1] memchr("  ep = text + size;\n  d = d1[U(t"..., '\n', 699) = 0x025a3300
[0x4022d1] memchr("  d = d1[U(tp[-1])];\n  while (d "..., '\n', 679) = 0x025a3315
[0x4022d1] memchr("  while (d <= ep - tp)\n    {\n   "..., '\n', 658) = 0x025a332c
[0x4022d1] memchr("    {\n      d = d1[U((tp += d)[-"..., '\n', 635) = 0x025a3332
[0x4022d1] memchr("      d = d1[U((tp += d)[-1])];\n"..., '\n', 629) = 0x025a3352
[0x4022d1] memchr("      if (d != 0)\n\tcontinue;\n   "..., '\n', 597) = 0x025a3364
[0x4022d1] memchr("\tcontinue;\n      if (tp[-2] == g"..., '\n', 579) = 0x025a336f
[0x4022d1] memchr("      if (tp[-2] == gc)\n\t{\n\t  fo"..., '\n', 568) = 0x025a3387
[0x4022d1] memchr("\t{\n\t  for (i = 3; i <= len && U("..., '\n', 544) = 0x025a338a
[0x4022d1] memchr("\t  for (i = 3; i <= len && U(tp["..., '\n', 541) = 0x025a33c2
[0x4022d1] memchr("\t    ;\n\t  if (i > len)\n\t    retu"..., '\n', 485) = 0x025a33c9
[0x4022d1] memchr("\t  if (i > len)\n\t    return tp -"..., '\n', 478) = 0x025a33d9
[0x4022d1] memchr("\t    return tp - len;\n\t}\n      d"..., '\n', 462) = 0x025a33ef
[0x4022d1] memchr("\t}\n      d = md2;\n    }\n\n  retur"..., '\n', 440) = 0x025a33f2
[0x4022d1] memchr("      d = md2;\n    }\n\n  return 0"..., '\n', 437) = 0x025a3401
[0x4022d1] memchr("    }\n\n  return 0;\n}\n\n/* Hairy m"..., '\n', 422) = 0x025a3407
[0x4022d1] memchr("\n  return 0;\n}\n\n/* Hairy multipl"..., '\n', 416) = 0x025a3408
[0x4022d1] memchr("  return 0;\n}\n\n/* Hairy multiple"..., '\n', 415) = 0x025a3414
[0x4022d1] memchr("}\n\n/* Hairy multiple string sear"..., '\n', 403) = 0x025a3416
[0x4022d1] memchr("\n/* Hairy multiple string search"..., '\n', 401) = 0x025a3417
[0x4022d1] memchr("/* Hairy multiple string search."..., '\n', 400) = 0x025a343b
[0x4022d1] memchr("static char *\ncwexec(kws, text, "..., '\n', 364) = 0x025a3449
[0x4022d1] memchr("cwexec(kws, text, len, kwsmatch)"..., '\n', 350) = 0x025a346a
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 317) = 0x025a347c
[0x4022d1] memchr("     char *text;\n     size_t len"..., '\n', 299) = 0x025a348d
[0x4022d1] memchr("     size_t len;\n     struct kws"..., '\n', 282) = 0x025a349e
[0x4022d1] memchr("     struct kwsmatch *kwsmatch;\n"..., '\n', 265) = 0x025a34be
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  struc"..., '\n', 233) = 0x025a34c0
[0x4022d1] memchr("  struct kwset *kwset;\n  struct "..., '\n', 231) = 0x025a34d7
[0x4022d1] memchr("  struct trie **next, *trie, *ac"..., '\n', 208) = 0x025a34fd
[0x4022d1] memchr("  char *beg, *lim, *mch, *lmch;\n"..., '\n', 170) = 0x025a351d
[0x4022d1] memchr("  register unsigned char c, *del"..., '\n', 138) = 0x025a3541
[0x4022d1] memchr("  register int d;\n  register cha"..., '\n', 102) = 0x025a3553
[0x4022d1] memchr("  register char *end, *qlim;\n  r"..., '\n', 84) = 0x025a3570
[0x4022d1] memchr("  register struct tree *tree;\n  "..., '\n', 55) = 0x025a358e
[0x4022d1] memchr("  register char *trans;\n\n  /* In"..., '\n', 25) = 0x025a35a6
[0x4022d1] memchr("\n  /* Initialize register copies"..., '\n', 1) = 0x025a35a7
[0x4022d1] memchr("  /* Initialize register copies "..., '\n', 0) = NULL
[0x4023cc] fwrite("9785:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("  /* Initialize register copies "..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  kwset = (struct kwset *) kws;\n"..., 'I', 10714) = 0x025a405a
[0x40cdf3] memchr("If FOUNDLEN\n   is non-NULL store"..., '\n', 8039) = 0x025a4065
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 2617) = 0x025a3606
[0x4022d1] memchr("  if (len < kwset->mind)\n    ret"..., '\n', 2585) = 0x025a361f
[0x4022d1] memchr("    return 0;\n  next = kwset->ne"..., '\n', 2560) = 0x025a362d
[0x4022d1] memchr("  next = kwset->next;\n  delta = "..., '\n', 2546) = 0x025a3643
[0x4022d1] memchr("  delta = kwset->delta;\n  trans "..., '\n', 2524) = 0x025a365b
[0x4022d1] memchr("  trans = kwset->trans;\n  lim = "..., '\n', 2500) = 0x025a3673
[0x4022d1] memchr("  lim = text + len;\n  end = text"..., '\n', 2476) = 0x025a3687
[0x4022d1] memchr("  end = text;\n  if ((d = kwset->"..., '\n', 2456) = 0x025a3695
[0x4022d1] memchr("  if ((d = kwset->mind) != 0)\n  "..., '\n', 2442) = 0x025a36b3
[0x4022d1] memchr("    mch = 0;\n  else\n    {\n      "..., '\n', 2412) = 0x025a36c0
[0x4022d1] memchr("  else\n    {\n      mch = text, a"..., '\n', 2399) = 0x025a36c7
[0x4022d1] memchr("    {\n      mch = text, accept ="..., '\n', 2392) = 0x025a36cd
[0x4022d1] memchr("      mch = text, accept = kwset"..., '\n', 2386) = 0x025a36f5
[0x4022d1] memchr("      goto match;\n    }\n\n  if (l"..., '\n', 2346) = 0x025a3707
[0x4022d1] memchr("    }\n\n  if (len >= 4 * kwset->m"..., '\n', 2328) = 0x025a370d
[0x4022d1] memchr("\n  if (len >= 4 * kwset->mind)\n "..., '\n', 2322) = 0x025a370e
[0x4022d1] memchr("  if (len >= 4 * kwset->mind)\n  "..., '\n', 2321) = 0x025a372c
[0x4022d1] memchr("    qlim = lim - 4 * kwset->mind"..., '\n', 2291) = 0x025a374e
[0x4022d1] memchr("  else\n    qlim = 0;\n\n  while (l"..., '\n', 2257) = 0x025a3755
[0x4022d1] memchr("    qlim = 0;\n\n  while (lim - en"..., '\n', 2250) = 0x025a3763
[0x4022d1] memchr("\n  while (lim - end >= d)\n    {\n"..., '\n', 2236) = 0x025a3764
[0x4022d1] memchr("  while (lim - end >= d)\n    {\n "..., '\n', 2235) = 0x025a377d
[0x4022d1] memchr("    {\n      if (qlim && end <= q"..., '\n', 2210) = 0x025a3783
[0x4022d1] memchr("      if (qlim && end <= qlim)\n\t"..., '\n', 2204) = 0x025a37a2
[0x4022d1] memchr("\t{\n\t  end += d - 1;\n\t  while ((d"..., '\n', 2173) = 0x025a37a5
[0x4022d1] memchr("\t  end += d - 1;\n\t  while ((d = "..., '\n', 2170) = 0x025a37b6
[0x4022d1] memchr("\t  while ((d = delta[c = *end]) "..., '\n', 2153) = 0x025a37e5
[0x4022d1] memchr("\t    {\n\t      end += d;\n\t      e"..., '\n', 2106) = 0x025a37ec
[0x4022d1] memchr("\t      end += d;\n\t      end += d"..., '\n', 2099) = 0x025a37fd
[0x4022d1] memchr("\t      end += delta[(unsigned ch"..., '\n', 2082) = 0x025a3828
[0x4022d1] memchr("\t      end += delta[(unsigned ch"..., '\n', 2039) = 0x025a3853
[0x4022d1] memchr("\t    }\n\t  ++end;\n\t}\n      else\n\t"..., '\n', 1996) = 0x025a385a
[0x4022d1] memchr("\t  ++end;\n\t}\n      else\n\td = del"..., '\n', 1989) = 0x025a3864
[0x4022d1] memchr("\t}\n      else\n\td = delta[c = (en"..., '\n', 1979) = 0x025a3867
[0x4022d1] memchr("      else\n\td = delta[c = (end +"..., '\n', 1976) = 0x025a3872
[0x4022d1] memchr("\td = delta[c = (end += d)[-1]];\n"..., '\n', 1965) = 0x025a3892
[0x4022d1] memchr("      if (d)\n\tcontinue;\n      be"..., '\n', 1933) = 0x025a389f
[0x4022d1] memchr("\tcontinue;\n      beg = end - 1;\n"..., '\n', 1920) = 0x025a38aa
[0x4022d1] memchr("      beg = end - 1;\n      trie "..., '\n', 1909) = 0x025a38bf
[0x4022d1] memchr("      trie = next[c];\n      if ("..., '\n', 1888) = 0x025a38d5
[0x4022d1] memchr("      if (trie->accepting)\n\t{\n\t "..., '\n', 1866) = 0x025a38f0
[0x4022d1] memchr("\t{\n\t  mch = beg;\n\t  accept = tri"..., '\n', 1839) = 0x025a38f3
[0x4022d1] memchr("\t  mch = beg;\n\t  accept = trie;\n"..., '\n', 1836) = 0x025a3901
[0x4022d1] memchr("\t  accept = trie;\n\t}\n      d = t"..., '\n', 1822) = 0x025a3913
[0x4022d1] memchr("\t}\n      d = trie->shift;\n      "..., '\n', 1804) = 0x025a3916
[0x4022d1] memchr("      d = trie->shift;\n      whi"..., '\n', 1801) = 0x025a392d
[0x4022d1] memchr("      while (beg > text)\n\t{\n\t  c"..., '\n', 1778) = 0x025a3946
[0x4022d1] memchr("\t{\n\t  c = trans ? trans[(unsigne"..., '\n', 1753) = 0x025a3949
[0x4022d1] memchr("\t  c = trans ? trans[(unsigned c"..., '\n', 1750) = 0x025a3980
[0x4022d1] memchr("\t  tree = trie->links;\n\t  while "..., '\n', 1695) = 0x025a3997
[0x4022d1] memchr("\t  while (tree && c != tree->lab"..., '\n', 1672) = 0x025a39bb
[0x4022d1] memchr("\t    if (c < tree->label)\n\t     "..., '\n', 1636) = 0x025a39d5
[0x4022d1] memchr("\t      tree = tree->llink;\n\t    "..., '\n', 1610) = 0x025a39f0
[0x4022d1] memchr("\t    else\n\t      tree = tree->rl"..., '\n', 1583) = 0x025a39fa
[0x4022d1] memchr("\t      tree = tree->rlink;\n\t  if"..., '\n', 1573) = 0x025a3a15
[0x4022d1] memchr("\t  if (tree)\n\t    {\n\t      trie "..., '\n', 1546) = 0x025a3a22
[0x4022d1] memchr("\t    {\n\t      trie = tree->trie;"..., '\n', 1533) = 0x025a3a29
[0x4022d1] memchr("\t      trie = tree->trie;\n\t     "..., '\n', 1526) = 0x025a3a43
[0x4022d1] memchr("\t      if (trie->accepting)\n\t\t{\n"..., '\n', 1500) = 0x025a3a5f
[0x4022d1] memchr("\t\t{\n\t\t  mch = beg;\n\t\t  accept = "..., '\n', 1472) = 0x025a3a63
[0x4022d1] memchr("\t\t  mch = beg;\n\t\t  accept = trie"..., '\n', 1468) = 0x025a3a72
[0x4022d1] memchr("\t\t  accept = trie;\n\t\t}\n\t    }\n\t "..., '\n', 1453) = 0x025a3a85
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else\n\t    break;\n\t"..., '\n', 1434) = 0x025a3a89
[0x4022d1] memchr("\t    }\n\t  else\n\t    break;\n\t  d "..., '\n', 1430) = 0x025a3a90
[0x4022d1] memchr("\t  else\n\t    break;\n\t  d = trie-"..., '\n', 1423) = 0x025a3a98
[0x4022d1] memchr("\t    break;\n\t  d = trie->shift;\n"..., '\n', 1415) = 0x025a3aa4
[0x4022d1] memchr("\t  d = trie->shift;\n\t}\n      if "..., '\n', 1403) = 0x025a3ab8
[0x4022d1] memchr("\t}\n      if (mch)\n\tgoto match;\n "..., '\n', 1383) = 0x025a3abb
[0x4022d1] memchr("      if (mch)\n\tgoto match;\n    "..., '\n', 1380) = 0x025a3aca
[0x4022d1] memchr("\tgoto match;\n    }\n  return 0;\n\n"..., '\n', 1365) = 0x025a3ad7
[0x4022d1] memchr("    }\n  return 0;\n\n match:\n  /* "..., '\n', 1352) = 0x025a3add
[0x4022d1] memchr("  return 0;\n\n match:\n  /* Given "..., '\n', 1346) = 0x025a3ae9
[0x4022d1] memchr("\n match:\n  /* Given a known matc"..., '\n', 1334) = 0x025a3aea
[0x4022d1] memchr(" match:\n  /* Given a known match"..., '\n', 1333) = 0x025a3af2
[0x4022d1] memchr("  /* Given a known match, find t"..., '\n', 1325) = 0x025a3b35
[0x4022d1] memchr("     at or before its starting p"..., '\n', 1258) = 0x025a3b76
[0x4022d1] memchr("     copy of the preceding main "..., '\n', 1193) = 0x025a3ba7
[0x4022d1] memchr("  if (lim - mch > kwset->maxd)\n "..., '\n', 1144) = 0x025a3bc6
[0x4022d1] memchr("    lim = mch + kwset->maxd;\n  l"..., '\n', 1113) = 0x025a3be3
[0x4022d1] memchr("  lmch = 0;\n  d = 1;\n  while (li"..., '\n', 1084) = 0x025a3bef
[0x4022d1] memchr("  d = 1;\n  while (lim - end >= d"..., '\n', 1072) = 0x025a3bf8
[0x4022d1] memchr("  while (lim - end >= d)\n    {\n "..., '\n', 1063) = 0x025a3c11
[0x4022d1] memchr("    {\n      if ((d = delta[c = ("..., '\n', 1038) = 0x025a3c17
[0x4022d1] memchr("      if ((d = delta[c = (end +="..., '\n', 1032) = 0x025a3c47
[0x4022d1] memchr("\tcontinue;\n      beg = end - 1;\n"..., '\n', 984) = 0x025a3c52
[0x4022d1] memchr("      beg = end - 1;\n      if (!"..., '\n', 973) = 0x025a3c67
[0x4022d1] memchr("      if (!(trie = next[c]))\n\t{\n"..., '\n', 952) = 0x025a3c84
[0x4022d1] memchr("\t{\n\t  d = 1;\n\t  continue;\n\t}\n   "..., '\n', 923) = 0x025a3c87
[0x4022d1] memchr("\t  d = 1;\n\t  continue;\n\t}\n      "..., '\n', 920) = 0x025a3c91
[0x4022d1] memchr("\t  continue;\n\t}\n      if (trie->"..., '\n', 910) = 0x025a3c9e
[0x4022d1] memchr("\t}\n      if (trie->accepting && "..., '\n', 897) = 0x025a3ca1
[0x4022d1] memchr("      if (trie->accepting && beg"..., '\n', 894) = 0x025a3cca
[0x4022d1] memchr("\t{\n\t  lmch = beg;\n\t  accept = tr"..., '\n', 853) = 0x025a3ccd
[0x4022d1] memchr("\t  lmch = beg;\n\t  accept = trie;"..., '\n', 850) = 0x025a3cdc
[0x4022d1] memchr("\t  accept = trie;\n\t}\n      d = t"..., '\n', 835) = 0x025a3cee
[0x4022d1] memchr("\t}\n      d = trie->shift;\n      "..., '\n', 817) = 0x025a3cf1
[0x4022d1] memchr("      d = trie->shift;\n      whi"..., '\n', 814) = 0x025a3d08
[0x4022d1] memchr("      while (beg > text)\n\t{\n\t  c"..., '\n', 791) = 0x025a3d21
[0x4022d1] memchr("\t{\n\t  c = trans ? trans[(unsigne"..., '\n', 766) = 0x025a3d24
[0x4022d1] memchr("\t  c = trans ? trans[(unsigned c"..., '\n', 763) = 0x025a3d5b
[0x4022d1] memchr("\t  tree = trie->links;\n\t  while "..., '\n', 708) = 0x025a3d72
[0x4022d1] memchr("\t  while (tree && c != tree->lab"..., '\n', 685) = 0x025a3d96
[0x4022d1] memchr("\t    if (c < tree->label)\n\t     "..., '\n', 649) = 0x025a3db0
[0x4022d1] memchr("\t      tree = tree->llink;\n\t    "..., '\n', 623) = 0x025a3dcb
[0x4022d1] memchr("\t    else\n\t      tree = tree->rl"..., '\n', 596) = 0x025a3dd5
[0x4022d1] memchr("\t      tree = tree->rlink;\n\t  if"..., '\n', 586) = 0x025a3df0
[0x4022d1] memchr("\t  if (tree)\n\t    {\n\t      trie "..., '\n', 559) = 0x025a3dfd
[0x4022d1] memchr("\t    {\n\t      trie = tree->trie;"..., '\n', 546) = 0x025a3e04
[0x4022d1] memchr("\t      trie = tree->trie;\n\t     "..., '\n', 539) = 0x025a3e1e
[0x4022d1] memchr("\t      if (trie->accepting && be"..., '\n', 513) = 0x025a3e48
[0x4022d1] memchr("\t\t{\n\t\t  lmch = beg;\n\t\t  accept ="..., '\n', 471) = 0x025a3e4c
[0x4022d1] memchr("\t\t  lmch = beg;\n\t\t  accept = tri"..., '\n', 467) = 0x025a3e5c
[0x4022d1] memchr("\t\t  accept = trie;\n\t\t}\n\t    }\n\t "..., '\n', 451) = 0x025a3e6f
[0x4022d1] memchr("\t\t}\n\t    }\n\t  else\n\t    break;\n\t"..., '\n', 432) = 0x025a3e73
[0x4022d1] memchr("\t    }\n\t  else\n\t    break;\n\t  d "..., '\n', 428) = 0x025a3e7a
[0x4022d1] memchr("\t  else\n\t    break;\n\t  d = trie-"..., '\n', 421) = 0x025a3e82
[0x4022d1] memchr("\t    break;\n\t  d = trie->shift;\n"..., '\n', 413) = 0x025a3e8e
[0x4022d1] memchr("\t  d = trie->shift;\n\t}\n      if "..., '\n', 401) = 0x025a3ea2
[0x4022d1] memchr("\t}\n      if (lmch)\n\t{\n\t  mch = l"..., '\n', 381) = 0x025a3ea5
[0x4022d1] memchr("      if (lmch)\n\t{\n\t  mch = lmch"..., '\n', 378) = 0x025a3eb5
[0x4022d1] memchr("\t{\n\t  mch = lmch;\n\t  goto match;"..., '\n', 362) = 0x025a3eb8
[0x4022d1] memchr("\t  mch = lmch;\n\t  goto match;\n\t}"..., '\n', 359) = 0x025a3ec7
[0x4022d1] memchr("\t  goto match;\n\t}\n      if (!d)\n"..., '\n', 344) = 0x025a3ed6
[0x4022d1] memchr("\t}\n      if (!d)\n\td = 1;\n    }\n\n"..., '\n', 329) = 0x025a3ed9
[0x4022d1] memchr("      if (!d)\n\td = 1;\n    }\n\n  i"..., '\n', 326) = 0x025a3ee7
[0x4022d1] memchr("\td = 1;\n    }\n\n  if (kwsmatch)\n "..., '\n', 312) = 0x025a3eef
[0x4022d1] memchr("    }\n\n  if (kwsmatch)\n    {\n   "..., '\n', 304) = 0x025a3ef5
[0x4022d1] memchr("\n  if (kwsmatch)\n    {\n      kws"..., '\n', 298) = 0x025a3ef6
[0x4022d1] memchr("  if (kwsmatch)\n    {\n      kwsm"..., '\n', 297) = 0x025a3f06
[0x4022d1] memchr("    {\n      kwsmatch->index = ac"..., '\n', 281) = 0x025a3f0c
[0x4022d1] memchr("      kwsmatch->index = accept->"..., '\n', 275) = 0x025a3f3b
[0x4022d1] memchr("      kwsmatch->beg[0] = mch;\n  "..., '\n', 228) = 0x025a3f59
[0x4022d1] memchr("      kwsmatch->size[0] = accept"..., '\n', 198) = 0x025a3f82
[0x4022d1] memchr("    }\n  return mch;\n}\n  \n/* Sear"..., '\n', 157) = 0x025a3f88
[0x4022d1] memchr("  return mch;\n}\n  \n/* Search thr"..., '\n', 151) = 0x025a3f96
[0x4022d1] memchr("}\n  \n/* Search through the given"..., '\n', 137) = 0x025a3f98
[0x4022d1] memchr("  \n/* Search through the given t"..., '\n', 135) = 0x025a3f9b
[0x4022d1] memchr("/* Search through the given text"..., '\n', 132) = 0x025a3fdd
[0x4022d1] memchr("   given keyword set.  Return a "..., '\n', 66) = 0x025a401f
[0x4022d1] memchr("   the matching substring, or NU"..., '\n', 0) = NULL
[0x4023cc] fwrite("9925:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   the matching substring, or NU"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   is non-NULL store in the refe"..., 'I', 8027) = 0x025a40d3
[0x40cdf3] memchr("IDX is non-NULL, store\n   in the"..., '\n', 7918) = 0x025a40e9
[0x4022d1] memchr("   is non-NULL store in the refe"..., '\n', 66) = 0x025a40a7
[0x4022d1] memchr("   matching substring.  Similarl"..., '\n', 0) = NULL
[0x4023cc] fwrite("9927:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   matching substring.  Similarl"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   in the referenced location th"..., 'I', 7895) = 0x025a4470
[0x40cdf3] memchr("Inc.\n\nThis program is free softw"..., '\n', 6993) = 0x025a4474
[0x4022d1] memchr("   in the referenced location th"..., '\n', 848) = 0x025a412a
[0x4022d1] memchr("   keyword matched. */\nchar *\nkw"..., '\n', 783) = 0x025a4141
[0x4022d1] memchr("char *\nkwsexec(kws, text, size, "..., '\n', 760) = 0x025a4148
[0x4022d1] memchr("kwsexec(kws, text, size, kwsmatc"..., '\n', 753) = 0x025a416b
[0x4022d1] memchr("     kwset_t kws;\n     char *tex"..., '\n', 718) = 0x025a417d
[0x4022d1] memchr("     char *text;\n     size_t siz"..., '\n', 700) = 0x025a418e
[0x4022d1] memchr("     size_t size;\n     struct kw"..., '\n', 683) = 0x025a41a0
[0x4022d1] memchr("     struct kwsmatch *kwsmatch;\n"..., '\n', 665) = 0x025a41c0
[0x4022d1] memchr("{\n  struct kwset *kwset;\n  char "..., '\n', 633) = 0x025a41c2
[0x4022d1] memchr("  struct kwset *kwset;\n  char *r"..., '\n', 631) = 0x025a41d9
[0x4022d1] memchr("  char *ret;\n\n  kwset = (struct "..., '\n', 608) = 0x025a41e6
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 595) = 0x025a41e7
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 594) = 0x025a4207
[0x4022d1] memchr("  if (kwset->words == 1 && kwset"..., '\n', 562) = 0x025a4235
[0x4022d1] memchr("    {\n      ret = bmexec(kws, te"..., '\n', 516) = 0x025a423b
[0x4022d1] memchr("      ret = bmexec(kws, text, si"..., '\n', 510) = 0x025a4260
[0x4022d1] memchr("      if (kwsmatch != 0 && ret !"..., '\n', 473) = 0x025a4285
[0x4022d1] memchr("\t{\n\t  kwsmatch->index = 0;\n\t  kw"..., '\n', 436) = 0x025a4288
[0x4022d1] memchr("\t  kwsmatch->index = 0;\n\t  kwsma"..., '\n', 433) = 0x025a42a0
[0x4022d1] memchr("\t  kwsmatch->beg[0] = ret;\n\t  kw"..., '\n', 409) = 0x025a42bb
[0x4022d1] memchr("\t  kwsmatch->size[0] = kwset->mi"..., '\n', 382) = 0x025a42df
[0x4022d1] memchr("\t}\n      return ret;\n    }\n  els"..., '\n', 346) = 0x025a42e2
[0x4022d1] memchr("      return ret;\n    }\n  else\n "..., '\n', 343) = 0x025a42f4
[0x4022d1] memchr("    }\n  else\n    return cwexec(k"..., '\n', 325) = 0x025a42fa
[0x4022d1] memchr("  else\n    return cwexec(kws, te"..., '\n', 319) = 0x025a4301
[0x4022d1] memchr("    return cwexec(kws, text, siz"..., '\n', 312) = 0x025a432f
[0x4022d1] memchr("}\n\n/* Free the components of the"..., '\n', 266) = 0x025a4331
[0x4022d1] memchr("\n/* Free the components of the g"..., '\n', 264) = 0x025a4332
[0x4022d1] memchr("/* Free the components of the gi"..., '\n', 263) = 0x025a4366
[0x4022d1] memchr("void\nkwsfree(kws)\n     kwset_t k"..., '\n', 211) = 0x025a436b
[0x4022d1] memchr("kwsfree(kws)\n     kwset_t kws;\n{"..., '\n', 206) = 0x025a4378
[0x4022d1] memchr("     kwset_t kws;\n{\n  struct kws"..., '\n', 193) = 0x025a438a
[0x4022d1] memchr("{\n  struct kwset *kwset;\n\n  kwse"..., '\n', 175) = 0x025a438c
[0x4022d1] memchr("  struct kwset *kwset;\n\n  kwset "..., '\n', 173) = 0x025a43a3
[0x4022d1] memchr("\n  kwset = (struct kwset *) kws;"..., '\n', 150) = 0x025a43a4
[0x4022d1] memchr("  kwset = (struct kwset *) kws;\n"..., '\n', 149) = 0x025a43c4
[0x4022d1] memchr("  obstack_free(&kwset->obstack, "..., '\n', 117) = 0x025a43e8
[0x4022d1] memchr("  free(kws);\n}\n/* obstack.c - su"..., '\n', 81) = 0x025a43f5
[0x4022d1] memchr("}\n/* obstack.c - subroutines use"..., '\n', 68) = 0x025a43f7
[0x4022d1] memchr("/* obstack.c - subroutines used "..., '\n', 66) = 0x025a4439
[0x4022d1] memchr("   Copyright (C) 1988, 1993 Free"..., '\n', 0) = NULL
[0x4023cc] fwrite("9968:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("   Copyright (C) 1988, 1993 Free"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nThis program is free software; "..., 'I', 6988) = 0x025a459d
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 6692) = 0x025a45d6
[0x4022d1] memchr("\nThis program is free software; "..., '\n', 291) = 0x025a4475
[0x4022d1] memchr("This program is free software; y"..., '\n', 290) = 0x025a44bd
[0x4022d1] memchr("under the terms of the GNU Gener"..., '\n', 218) = 0x025a4503
[0x4022d1] memchr("Free Software Foundation; either"..., '\n', 148) = 0x025a4547
[0x4022d1] memchr("later version.\n\nThis program is "..., '\n', 80) = 0x025a4556
[0x4022d1] memchr("\nThis program is distributed in "..., '\n', 65) = 0x025a4557
[0x4022d1] memchr("This program is distributed in t"..., '\n', 64) = 0x025a4597
[0x4022d1] memchr("but WITHOUT ANY WARRANTY; withou"..., '\n', 0) = NULL
[0x4023cc] fwrite("9976:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("but WITHOUT ANY WARRANTY; withou"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("MERCHANTABILITY or FITNESS FOR A"..., 'I', 6634) = 0x025a45e1
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 6624) = 0x025a4614
[0x4022d1] memchr("MERCHANTABILITY or FITNESS FOR A"..., '\n', 0) = NULL
[0x4023cc] fwrite("9977:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("MERCHANTABILITY or FITNESS FOR A"..., 1, 62, 0x7f498147f260) = 62
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("GNU General Public License for m"..., 'I', 6572) = 0x025a4732
[0x40cdf3] memchr("IBRARY__ defined.  */\n/*#include"..., '\n', 6287) = 0x025a4747
[0x4022d1] memchr("GNU General Public License for m"..., '\n', 255) = 0x025a4641
[0x4022d1] memchr("\nYou should have received a copy"..., '\n', 210) = 0x025a4642
[0x4022d1] memchr("You should have received a copy "..., '\n', 209) = 0x025a4684
[0x4022d1] memchr("along with this program; if not,"..., '\n', 143) = 0x025a46c0
[0x4022d1] memchr("Foundation, 675 Mass Ave, Cambri"..., '\n', 83) = 0x025a46f8
[0x4022d1] memchr("\n/*#include "obstack.h"*/\n\n/* Th"..., '\n', 27) = 0x025a46f9
[0x4022d1] memchr("/*#include "obstack.h"*/\n\n/* Thi"..., '\n', 26) = 0x025a4712
[0x4022d1] memchr("\n/* This is just to get __GNU_LI"..., '\n', 1) = 0x025a4713
[0x4022d1] memchr("/* This is just to get __GNU_LIB"..., '\n', 0) = NULL
[0x4023cc] fwrite("9986:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("/* This is just to get __GNU_LIB"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/*#include <stdio.h>*/\n\n/* Comme"..., 'I', 6265) = 0x025a4971
[0x40cdf3] memchr("IBC) || !defined (__GNU_LIBRARY_"..., '\n', 5712) = 0x025a4993
[0x4022d1] memchr("/*#include <stdio.h>*/\n\n/* Comme"..., '\n', 538) = 0x025a475e
[0x4022d1] memchr("\n/* Comment out all this code if"..., '\n', 515) = 0x025a475f
[0x4022d1] memchr("/* Comment out all this code if "..., '\n', 514) = 0x025a47ab
[0x4022d1] memchr("   actually compiling the librar"..., '\n', 438) = 0x025a47f5
[0x4022d1] memchr("   Library, but also included in"..., '\n', 364) = 0x025a483f
[0x4022d1] memchr("   and linking in this code is a"..., '\n', 290) = 0x025a4883
[0x4022d1] memchr("   (especially if it is a shared"..., '\n', 222) = 0x025a48cc
[0x4022d1] memchr("   program understand `configure"..., '\n', 149) = 0x025a4919
[0x4022d1] memchr("   it is simpler to just do this"..., '\n', 72) = 0x025a4960
[0x4022d1] memchr("\n#if defined (_LIBC) || !defined"..., '\n', 1) = 0x025a4961
[0x4022d1] memchr("#if defined (_LIBC) || !defined "..., '\n', 0) = NULL
[0x4023cc] fwrite("9997:", 1, 5, 0x7f498147f260) = 5
[0x4024d9] fwrite("#if defined (_LIBC) || !defined "..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n\n#ifdef __STDC__\n#define POINTE"..., 'I', 5677) = 0x025a49b0
[0x40cdf3] memchr("INTER void *\n#else\n#define POINT"..., '\n', 5649) = 0x025a49bc
[0x4022d1] memchr("\n\n#ifdef __STDC__\n#define POINTE"..., '\n', 18) = 0x025a4994
[0x4022d1] memchr("\n#ifdef __STDC__\n#define POINTER"..., '\n', 17) = 0x025a4995
[0x4022d1] memchr("#ifdef __STDC__\n#define POINTER "..., '\n', 16) = 0x025a49a5
[0x4022d1] memchr("#define POINTER void *\n#else\n#de"..., '\n', 0) = NULL
[0x4023cc] fwrite("10001:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define POINTER void *\n#else\n#de"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define POINTER char *\n#en"..., 'I', 5636) = 0x025a49cd
[0x40cdf3] memchr("INTER char *\n#endif\n\n/* Determin"..., '\n', 5620) = 0x025a49d9
[0x4022d1] memchr("#else\n#define POINTER char *\n#en"..., '\n', 6) = 0x025a49c2
[0x4022d1] memchr("#define POINTER char *\n#endif\n\n/"..., '\n', 0) = NULL
[0x4023cc] fwrite("10003:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define POINTER char *\n#endif\n\n/"..., 1, 23, 0x7f498147f260) = 23
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n/* Determine default ali"..., 'I', 5607) = 0x025a4a3d
[0x40cdf3] memchr("IGNMENT  \\\n  ((PTR_INT_TYPE) ((c"..., '\n', 5508) = 0x025a4a47
[0x4022d1] memchr("#endif\n\n/* Determine default ali"..., '\n', 81) = 0x025a49e0
[0x4022d1] memchr("\n/* Determine default alignment."..., '\n', 74) = 0x025a49e1
[0x4022d1] memchr("/* Determine default alignment. "..., '\n', 73) = 0x025a4a05
[0x4022d1] memchr("struct fooalign {char x; double "..., '\n', 37) = 0x025a4a2a
[0x4022d1] memchr("#define DEFAULT_ALIGNMENT  \\\n  ("..., '\n', 0) = NULL
[0x4023cc] fwrite("10008:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define DEFAULT_ALIGNMENT  \\\n  ("..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  ((PTR_INT_TYPE) ((char *)&((st"..., 'I', 5497) = 0x025a4a50
[0x40cdf3] memchr("INT_TYPE) ((char *)&((struct foo"..., '\n', 5489) = 0x025a4a8c
[0x4022d1] memchr("  ((PTR_INT_TYPE) ((char *)&((st"..., '\n', 0) = NULL
[0x4023cc] fwrite("10009:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  ((PTR_INT_TYPE) ((char *)&((st"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/* If malloc were really smart, "..., 'I', 5428) = 0x025a4a90
[0x40cdf3] memchr("If malloc were really smart, it "..., '\n', 5425) = 0x025a4adb
[0x4022d1] memchr("/* If malloc were really smart, "..., '\n', 0) = NULL
[0x4023cc] fwrite("10010:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("/* If malloc were really smart, "..., 1, 79, 0x7f498147f260) = 79
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   But in fact it might be less "..., 'I', 5349) = 0x025a4b34
[0x40cdf3] memchr("ING.  So we prepare for it to do"..., '\n', 5261) = 0x025a4b5e
[0x4022d1] memchr("   But in fact it might be less "..., '\n', 72) = 0x025a4b23
[0x4022d1] memchr("   DEFAULT_ROUNDING.  So we prep"..., '\n', 0) = NULL
[0x4023cc] fwrite("10012:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   DEFAULT_ROUNDING.  So we prep"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("union fooround {long x; double d"..., 'I', 5218) = 0x025a4b98
[0x40cdf3] memchr("ING (sizeof (union fooround))\n\n/"..., '\n', 5161) = 0x025a4bb5
[0x4022d1] memchr("union fooround {long x; double d"..., '\n', 36) = 0x025a4b82
[0x4022d1] memchr("#define DEFAULT_ROUNDING (sizeof"..., '\n', 0) = NULL
[0x4023cc] fwrite("10014:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define DEFAULT_ROUNDING (sizeof"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* When we copy a long block of"..., 'I', 5131) = 0x025a4c59
[0x40cdf3] memchr("ING_UNIT to `long' (if that work"..., '\n', 4968) = 0x025a4c7b
[0x4022d1] memchr("\n/* When we copy a long block of"..., '\n', 131) = 0x025a4bb6
[0x4022d1] memchr("/* When we copy a long block of "..., '\n', 130) = 0x025a4bfc
[0x4022d1] memchr("   On some machines, copying suc"..., '\n', 60) = 0x025a4c38
[0x4022d1] memchr("   in such a case, redefine COPY"..., '\n', 0) = NULL
[0x4023cc] fwrite("10018:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   in such a case, redefine COPY"..., 1, 67, 0x7f498147f260) = 67
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   or `char' as a last resort.  "..., 'I', 4933) = 0x025a4cab
[0x40cdf3] memchr("ING_UNIT\n#define COPYING_UNIT in"..., '\n', 4886) = 0x025a4cb3
[0x4022d1] memchr("   or `char' as a last resort.  "..., '\n', 35) = 0x025a4c9e
[0x4022d1] memchr("#ifndef COPYING_UNIT\n#define COP"..., '\n', 0) = NULL
[0x4023cc] fwrite("10020:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#ifndef COPYING_UNIT\n#define COP"..., 1, 21, 0x7f498147f260) = 21
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define COPYING_UNIT int\n#endif\n"..., 'I', 4877) = 0x025a4cc0
[0x40cdf3] memchr("ING_UNIT int\n#endif\n\n/* The non-"..., '\n', 4865) = 0x025a4ccc
[0x4022d1] memchr("#define COPYING_UNIT int\n#endif\n"..., '\n', 0) = NULL
[0x4023cc] fwrite("10021:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define COPYING_UNIT int\n#endif\n"..., 1, 25, 0x7f498147f260) = 25
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n/* The non-GNU-C macros "..., 'I', 4852) = 0x025a4e7b
[0x40cdf3] memchr("IPS compilers,\n   do not allow ("..., '\n', 4422) = 0x025a4e89
[0x4022d1] memchr("#endif\n\n/* The non-GNU-C macros "..., '\n', 370) = 0x025a4cd3
[0x4022d1] memchr("\n/* The non-GNU-C macros copy th"..., '\n', 363) = 0x025a4cd4
[0x4022d1] memchr("/* The non-GNU-C macros copy the"..., '\n', 362) = 0x025a4d17
[0x4022d1] memchr("   to avoid multiple evaluation."..., '\n', 295) = 0x025a4d3c
[0x4022d1] memchr("\nstruct obstack *_obstack;\n\n/* D"..., '\n', 258) = 0x025a4d3d
[0x4022d1] memchr("struct obstack *_obstack;\n\n/* De"..., '\n', 257) = 0x025a4d57
[0x4022d1] memchr("\n/* Define a macro that either c"..., '\n', 231) = 0x025a4d58
[0x4022d1] memchr("/* Define a macro that either ca"..., '\n', 230) = 0x025a4da7
[0x4022d1] memchr("   calling interface, or calls f"..., '\n', 151) = 0x025a4df1
[0x4022d1] memchr("   (that adds an extra first arg"..., '\n', 77) = 0x025a4e3e
[0x4022d1] memchr("   For free, do not use ?:, sinc"..., '\n', 0) = NULL
[0x4023cc] fwrite("10032:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   For free, do not use ?:, sinc"..., 1, 75, 0x7f498147f260) = 75
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   do not allow (expr) ? void : "..., 'I', 4407) = 0x025a500f
[0x40cdf3] memchr("Initialize an obstack H for use."..., '\n', 4018) = 0x025a505b
[0x4022d1] memchr("   do not allow (expr) ? void : "..., '\n', 386) = 0x025a4eb3
[0x4022d1] memchr("\n#define CALL_CHUNKFUN(h, size) "..., '\n', 344) = 0x025a4eb4
[0x4022d1] memchr("#define CALL_CHUNKFUN(h, size) \\"..., '\n', 343) = 0x025a4ed5
[0x4022d1] memchr("  (((h) -> use_extra_arg) \\\n   ?"..., '\n', 310) = 0x025a4ef1
[0x4022d1] memchr("   ? (*(h)->chunkfun) ((h)->extr"..., '\n', 282) = 0x025a4f22
[0x4022d1] memchr("   : (*(h)->chunkfun) ((size)))\n"..., '\n', 233) = 0x025a4f42
[0x4022d1] memchr("\n#define CALL_FREEFUN(h, old_chu"..., '\n', 201) = 0x025a4f43
[0x4022d1] memchr("#define CALL_FREEFUN(h, old_chun"..., '\n', 200) = 0x025a4f68
[0x4022d1] memchr("  do { \\\n    if ((h) -> use_extr"..., '\n', 163) = 0x025a4f71
[0x4022d1] memchr("    if ((h) -> use_extra_arg) \\\n"..., '\n', 154) = 0x025a4f91
[0x4022d1] memchr("      (*(h)->freefun) ((h)->extr"..., '\n', 122) = 0x025a4fc8
[0x4022d1] memchr("    else \\\n      (*(h)->freefun)"..., '\n', 67) = 0x025a4fd3
[0x4022d1] memchr("      (*(h)->freefun) ((old_chun"..., '\n', 56) = 0x025a4ffa
[0x4022d1] memchr("  } while (0)\n\n\014\n/* Initialize a"..., '\n', 17) = 0x025a5008
[0x4022d1] memchr("\n\014\n/* Initialize an obstack H fo"..., '\n', 3) = 0x025a5009
[0x4022d1] memchr("\014\n/* Initialize an obstack H for"..., '\n', 2) = 0x025a500b
[0x4022d1] memchr("/* Initialize an obstack H for u"..., '\n', 0) = NULL
[0x4023cc] fwrite("10049:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("/* Initialize an obstack H for u"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   Objects start on multiples of"..., 'I', 3941) = 0x025a507f
[0x40cdf3] memchr("IGNMENT (0 means use default).\n "..., '\n', 3906) = 0x025a509d
[0x4022d1] memchr("   Objects start on multiples of"..., '\n', 0) = NULL
[0x4023cc] fwrite("10050:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   Objects start on multiples of"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   CHUNKFUN is the function to u"..., 'I', 3875) = 0x025a5182
[0x40cdf3] memchr("INTER (*chunkfun) ();\n     void "..., '\n', 3647) = 0x025a5197
[0x4022d1] memchr("   CHUNKFUN is the function to u"..., '\n', 221) = 0x025a50d4
[0x4022d1] memchr("   and FREEFUN the function to f"..., '\n', 166) = 0x025a5102
[0x4022d1] memchr("\nvoid\n_obstack_begin (h, size, a"..., '\n', 120) = 0x025a5103
[0x4022d1] memchr("void\n_obstack_begin (h, size, al"..., '\n', 119) = 0x025a5108
[0x4022d1] memchr("_obstack_begin (h, size, alignme"..., '\n', 114) = 0x025a513f
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 59) = 0x025a5157
[0x4022d1] memchr("     int size;\n     int alignmen"..., '\n', 35) = 0x025a5166
[0x4022d1] memchr("     int alignment;\n     POINTER"..., '\n', 20) = 0x025a517a
[0x4022d1] memchr("     POINTER (*chunkfun) ();\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("10059:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER (*chunkfun) ();\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     void (*freefun) ();\n{\n  reg"..., 'I', 3625) = 0x025a5227
[0x40cdf3] memchr("IGNMENT;\n  if (size == 0)\n    /*"..., '\n', 3482) = 0x025a522f
[0x4022d1] memchr("     void (*freefun) ();\n{\n  reg"..., '\n', 117) = 0x025a51b0
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 92) = 0x025a51b2
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 90) = 0x025a51f5
[0x4022d1] memchr("\n  if (alignment == 0)\n    align"..., '\n', 23) = 0x025a51f6
[0x4022d1] memchr("  if (alignment == 0)\n    alignm"..., '\n', 22) = 0x025a520c
[0x4022d1] memchr("    alignment = DEFAULT_ALIGNMEN"..., '\n', 0) = NULL
[0x4023cc] fwrite("10065:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("    alignment = DEFAULT_ALIGNMEN"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (size == 0)\n    /* Default "..., 'I', 3473) = 0x025a53e3
[0x40cdf3] memchr("I suspect it is\n\t less sensitive"..., '\n', 3038) = 0x025a53f2
[0x4022d1] memchr("  if (size == 0)\n    /* Default "..., '\n', 381) = 0x025a5240
[0x4022d1] memchr("    /* Default size is what GNU "..., '\n', 364) = 0x025a5289
[0x4022d1] memchr("    {\n      /* 12 is sizeof (mhe"..., '\n', 291) = 0x025a528f
[0x4022d1] memchr("      /* 12 is sizeof (mhead) an"..., '\n', 285) = 0x025a52cd
[0x4022d1] memchr("\t Use the values for range check"..., '\n', 223) = 0x025a5314
[0x4022d1] memchr("\t the extra bytes won't be misse"..., '\n', 152) = 0x025a535c
[0x4022d1] memchr("\t and we used a larger request, "..., '\n', 80) = 0x025a539e
[0x4022d1] memchr("\t allocated.\n\n\t These number are"..., '\n', 14) = 0x025a53ab
[0x4022d1] memchr("\n\t These number are irrelevant t"..., '\n', 1) = 0x025a53ac
[0x4022d1] memchr("\t These number are irrelevant to"..., '\n', 0) = NULL
[0x4023cc] fwrite("10075:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t These number are irrelevant to"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t less sensitive to the size of "..., 'I', 3022) = 0x025a544c
[0x40cdf3] memchr("ING - 1) & ~(DEFAULT_ROUNDING - "..., '\n', 2933) = 0x025a546f
[0x4022d1] memchr("\t less sensitive to the size of "..., '\n', 49) = 0x025a5423
[0x4022d1] memchr("      int extra = ((((12 + DEFAU"..., '\n', 0) = NULL
[0x4023cc] fwrite("10077:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      int extra = ((((12 + DEFAU"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 'I', 2897) = 0x025a5489
[0x40cdf3] memchr("ING - 1)\n\t\t   & ~(DEFAULT_ROUNDI"..., '\n', 2872) = 0x025a5491
[0x4022d1] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("10078:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 'I', 2863) = 0x025a54a8
[0x40cdf3] memchr("ING - 1));\n      size = 4096 - e"..., '\n', 2841) = 0x025a54b2
[0x4022d1] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '\n', 0) = NULL
[0x4023cc] fwrite("10079:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      size = 4096 - extra;\n    }"..., 'I', 2830) = 0x025a5720
[0x40cdf3] memchr("INTER (*chunkfun) ();\n     void "..., '\n', 2209) = 0x025a5735
[0x4022d1] memchr("      size = 4096 - extra;\n    }"..., '\n', 614) = 0x025a54cd
[0x4022d1] memchr("    }\n\n  h->chunkfun = (struct _"..., '\n', 587) = 0x025a54d3
[0x4022d1] memchr("\n  h->chunkfun = (struct _obstac"..., '\n', 581) = 0x025a54d4
[0x4022d1] memchr("  h->chunkfun = (struct _obstack"..., '\n', 580) = 0x025a550e
[0x4022d1] memchr("  h->freefun = freefun;\n  h->chu"..., '\n', 522) = 0x025a5526
[0x4022d1] memchr("  h->chunk_size = size;\n  h->ali"..., '\n', 498) = 0x025a553e
[0x4022d1] memchr("  h->alignment_mask = alignment "..., '\n', 474) = 0x025a5563
[0x4022d1] memchr("  h->use_extra_arg = 0;\n\n  chunk"..., '\n', 437) = 0x025a557b
[0x4022d1] memchr("\n  chunk = h->chunk = CALL_CHUNK"..., '\n', 413) = 0x025a557c
[0x4022d1] memchr("  chunk = h->chunk = CALL_CHUNKF"..., '\n', 412) = 0x025a55b5
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 355) = 0x025a55e8
[0x4022d1] memchr("  h->chunk_limit = chunk->limit\n"..., '\n', 304) = 0x025a5608
[0x4022d1] memchr("    = (char *) chunk + h->chunk_"..., '\n', 272) = 0x025a562e
[0x4022d1] memchr("  chunk->prev = 0;\n  /* The init"..., '\n', 234) = 0x025a5641
[0x4022d1] memchr("  /* The initial chunk now conta"..., '\n', 215) = 0x025a567a
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 158) = 0x025a5697
[0x4022d1] memchr("}\n\nvoid\n_obstack_begin_1 (h, siz"..., '\n', 129) = 0x025a5699
[0x4022d1] memchr("\nvoid\n_obstack_begin_1 (h, size,"..., '\n', 127) = 0x025a569a
[0x4022d1] memchr("void\n_obstack_begin_1 (h, size, "..., '\n', 126) = 0x025a569f
[0x4022d1] memchr("_obstack_begin_1 (h, size, align"..., '\n', 121) = 0x025a56dd
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 59) = 0x025a56f5
[0x4022d1] memchr("     int size;\n     int alignmen"..., '\n', 35) = 0x025a5704
[0x4022d1] memchr("     int alignment;\n     POINTER"..., '\n', 20) = 0x025a5718
[0x4022d1] memchr("     POINTER (*chunkfun) ();\n   "..., '\n', 0) = NULL
[0x4023cc] fwrite("10103:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER (*chunkfun) ();\n   "..., 1, 29, 0x7f498147f260) = 29
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     void (*freefun) ();\n     PO"..., 'I', 2187) = 0x025a5756
[0x40cdf3] memchr("INTER arg;\n{\n  register struct _"..., '\n', 2155) = 0x025a5760
[0x4022d1] memchr("     void (*freefun) ();\n     PO"..., '\n', 25) = 0x025a574e
[0x4022d1] memchr("     POINTER arg;\n{\n  register s"..., '\n', 0) = NULL
[0x4023cc] fwrite("10105:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER arg;\n{\n  register s"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("{\n  register struct _obstack_chu"..., 'I', 2144) = 0x025a57d7
[0x40cdf3] memchr("IGNMENT;\n  if (size == 0)\n    /*"..., '\n', 2026) = 0x025a57df
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 92) = 0x025a5762
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 90) = 0x025a57a5
[0x4022d1] memchr("\n  if (alignment == 0)\n    align"..., '\n', 23) = 0x025a57a6
[0x4022d1] memchr("  if (alignment == 0)\n    alignm"..., '\n', 22) = 0x025a57bc
[0x4022d1] memchr("    alignment = DEFAULT_ALIGNMEN"..., '\n', 0) = NULL
[0x4023cc] fwrite("10110:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("    alignment = DEFAULT_ALIGNMEN"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  if (size == 0)\n    /* Default "..., 'I', 2017) = 0x025a5993
[0x40cdf3] memchr("I suspect it is\n\t less sensitive"..., '\n', 1582) = 0x025a59a2
[0x4022d1] memchr("  if (size == 0)\n    /* Default "..., '\n', 381) = 0x025a57f0
[0x4022d1] memchr("    /* Default size is what GNU "..., '\n', 364) = 0x025a5839
[0x4022d1] memchr("    {\n      /* 12 is sizeof (mhe"..., '\n', 291) = 0x025a583f
[0x4022d1] memchr("      /* 12 is sizeof (mhead) an"..., '\n', 285) = 0x025a587d
[0x4022d1] memchr("\t Use the values for range check"..., '\n', 223) = 0x025a58c4
[0x4022d1] memchr("\t the extra bytes won't be misse"..., '\n', 152) = 0x025a590c
[0x4022d1] memchr("\t and we used a larger request, "..., '\n', 80) = 0x025a594e
[0x4022d1] memchr("\t allocated.\n\n\t These number are"..., '\n', 14) = 0x025a595b
[0x4022d1] memchr("\n\t These number are irrelevant t"..., '\n', 1) = 0x025a595c
[0x4022d1] memchr("\t These number are irrelevant to"..., '\n', 0) = NULL
[0x4023cc] fwrite("10120:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t These number are irrelevant to"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t less sensitive to the size of "..., 'I', 1566) = 0x025a59fc
[0x40cdf3] memchr("ING - 1) & ~(DEFAULT_ROUNDING - "..., '\n', 1477) = 0x025a5a1f
[0x4022d1] memchr("\t less sensitive to the size of "..., '\n', 49) = 0x025a59d3
[0x4022d1] memchr("      int extra = ((((12 + DEFAU"..., '\n', 0) = NULL
[0x4023cc] fwrite("10122:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      int extra = ((((12 + DEFAU"..., 1, 76, 0x7f498147f260) = 76
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 'I', 1441) = 0x025a5a39
[0x40cdf3] memchr("ING - 1)\n\t\t   & ~(DEFAULT_ROUNDI"..., '\n', 1416) = 0x025a5a41
[0x4022d1] memchr("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., '\n', 0) = NULL
[0x4023cc] fwrite("10123:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t\t    + 4 + DEFAULT_ROUNDING - 1"..., 1, 34, 0x7f498147f260) = 34
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 'I', 1407) = 0x025a5a58
[0x40cdf3] memchr("ING - 1));\n      size = 4096 - e"..., '\n', 1385) = 0x025a5a62
[0x4022d1] memchr("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., '\n', 0) = NULL
[0x4023cc] fwrite("10124:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t\t   & ~(DEFAULT_ROUNDING - 1));"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      size = 4096 - extra;\n    }"..., 'I', 1374) = NULL
[0x4022d1] memchr("      size = 4096 - extra;\n    }"..., '\n', 1374) = 0x025a5a7d
[0x4022d1] memchr("    }\n\n  h->chunkfun = (struct _"..., '\n', 1347) = 0x025a5a83
[0x4022d1] memchr("\n  h->chunkfun = (struct _obstac"..., '\n', 1341) = 0x025a5a84
[0x4022d1] memchr("  h->chunkfun = (struct _obstack"..., '\n', 1340) = 0x025a5abe
[0x4022d1] memchr("  h->freefun = freefun;\n  h->chu"..., '\n', 1282) = 0x025a5ad6
[0x4022d1] memchr("  h->chunk_size = size;\n  h->ali"..., '\n', 1258) = 0x025a5aee
[0x4022d1] memchr("  h->alignment_mask = alignment "..., '\n', 1234) = 0x025a5b13
[0x4022d1] memchr("  h->extra_arg = arg;\n  h->use_e"..., '\n', 1197) = 0x025a5b29
[0x4022d1] memchr("  h->use_extra_arg = 1;\n\n  chunk"..., '\n', 1175) = 0x025a5b41
[0x4022d1] memchr("\n  chunk = h->chunk = CALL_CHUNK"..., '\n', 1151) = 0x025a5b42
[0x4022d1] memchr("  chunk = h->chunk = CALL_CHUNKF"..., '\n', 1150) = 0x025a5b7b
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 1093) = 0x025a5bae
[0x4022d1] memchr("  h->chunk_limit = chunk->limit\n"..., '\n', 1042) = 0x025a5bce
[0x4022d1] memchr("    = (char *) chunk + h->chunk_"..., '\n', 1010) = 0x025a5bf4
[0x4022d1] memchr("  chunk->prev = 0;\n  /* The init"..., '\n', 972) = 0x025a5c07
[0x4022d1] memchr("  /* The initial chunk now conta"..., '\n', 953) = 0x025a5c40
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 896) = 0x025a5c5d
[0x4022d1] memchr("}\n\n/* Allocate a new current chu"..., '\n', 867) = 0x025a5c5f
[0x4022d1] memchr("\n/* Allocate a new current chunk"..., '\n', 865) = 0x025a5c60
[0x4022d1] memchr("/* Allocate a new current chunk "..., '\n', 864) = 0x025a5c93
[0x4022d1] memchr("   on the assumption that LENGTH"..., '\n', 813) = 0x025a5ccb
[0x4022d1] memchr("   to the current object, or a n"..., '\n', 757) = 0x025a5d11
[0x4022d1] memchr("   Copies any partial object fro"..., '\n', 687) = 0x025a5d4c
[0x4022d1] memchr("   to the beginning of the new o"..., '\n', 628) = 0x025a5d74
[0x4022d1] memchr("\nvoid\n_obstack_newchunk (h, leng"..., '\n', 588) = 0x025a5d75
[0x4022d1] memchr("void\n_obstack_newchunk (h, lengt"..., '\n', 587) = 0x025a5d7a
[0x4022d1] memchr("_obstack_newchunk (h, length)\n  "..., '\n', 582) = 0x025a5d98
[0x4022d1] memchr("     struct obstack *h;\n     int"..., '\n', 552) = 0x025a5db0
[0x4022d1] memchr("     int length;\n{\n  register st"..., '\n', 528) = 0x025a5dc1
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 511) = 0x025a5dc3
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 509) = 0x025a5dfb
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 453) = 0x025a5e28
[0x4022d1] memchr("  register long\tnew_size;\n  regi"..., '\n', 408) = 0x025a5e42
[0x4022d1] memchr("  register int obj_size = h->nex"..., '\n', 382) = 0x025a5e7b
[0x4022d1] memchr("  register int i;\n  int already;"..., '\n', 325) = 0x025a5e8d
[0x4022d1] memchr("  int already;\n\n  /* Compute siz"..., '\n', 307) = 0x025a5e9c
[0x4022d1] memchr("\n  /* Compute size for new chunk"..., '\n', 292) = 0x025a5e9d
[0x4022d1] memchr("  /* Compute size for new chunk."..., '\n', 291) = 0x025a5ec2
[0x4022d1] memchr("  new_size = (obj_size + length)"..., '\n', 254) = 0x025a5efc
[0x4022d1] memchr("  if (new_size < h->chunk_size)\n"..., '\n', 196) = 0x025a5f1c
[0x4022d1] memchr("    new_size = h->chunk_size;\n\n "..., '\n', 164) = 0x025a5f3a
[0x4022d1] memchr("\n  /* Allocate and initialize th"..., '\n', 134) = 0x025a5f3b
[0x4022d1] memchr("  /* Allocate and initialize the"..., '\n', 133) = 0x025a5f6b
[0x4022d1] memchr("  new_chunk = h->chunk = CALL_CH"..., '\n', 85) = 0x025a5fa1
[0x4022d1] memchr("  new_chunk->prev = old_chunk;\n "..., '\n', 31) = 0x025a5fc0
[0x4022d1] memchr("  new_chunk->limit = h->chunk_li"..., '\n', 0) = NULL
[0x4020b3] memmove(0x259dfc1, 0x25a5fc1, 63, 0x25a5fc1, 0x7f498147f260) = 0x259dfc1
[0x402213] read(3, "size;\n\n  /* Move the existing ob"..., 32768) = 19280
[0x40bc2b] memchr("  new_chunk->limit = h->chunk_li"..., 'I', 19338) = 0x0259e0b8
[0x40cdf3] memchr("IGNMENT)\n    {\n      for (i = ob"..., '\n', 19091) = 0x0259e0c0
[0x4022d1] memchr("  new_chunk->limit = h->chunk_li"..., '\n', 206) = 0x0259e005
[0x4022d1] memchr("\n  /* Move the existing object t"..., '\n', 137) = 0x0259e006
[0x4022d1] memchr("  /* Move the existing object to"..., '\n', 136) = 0x0259e036
[0x4022d1] memchr("     Word at a time is fast and "..., '\n', 88) = 0x0259e06c
[0x4022d1] memchr("     is sufficiently aligned.  *"..., '\n', 34) = 0x0259e08e
[0x4022d1] memchr("  if (h->alignment_mask + 1 >= D"..., '\n', 0) = NULL
[0x4023cc] fwrite("10175:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  if (h->alignment_mask + 1 >= D"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      for (i = obj_size / "..., 'I', 19082) = 0x0259e0ed
[0x40cdf3] memchr("ING_UNIT) - 1;\n\t   i >= 0; i--)\n"..., '\n', 19038) = 0x0259e0fb
[0x4022d1] memchr("    {\n      for (i = obj_size / "..., '\n', 6) = 0x0259e0c6
[0x4022d1] memchr("      for (i = obj_size / sizeof"..., '\n', 0) = NULL
[0x4023cc] fwrite("10177:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      for (i = obj_size / sizeof"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t   i >= 0; i--)\n\t((COPYING_UNIT"..., 'I', 19023) = 0x0259e114
[0x40cdf3] memchr("ING_UNIT *)new_chunk->contents)["..., '\n', 18999) = 0x0259e136
[0x4022d1] memchr("\t   i >= 0; i--)\n\t((COPYING_UNIT"..., '\n', 17) = 0x0259e10c
[0x4022d1] memchr("\t((COPYING_UNIT *)new_chunk->con"..., '\n', 0) = NULL
[0x4023cc] fwrite("10179:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t((COPYING_UNIT *)new_chunk->con"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t  = ((COPYING_UNIT *)h->object_"..., 'I', 18964) = 0x0259e142
[0x40cdf3] memchr("ING_UNIT *)h->object_base)[i];\n "..., '\n', 18953) = 0x0259e160
[0x4022d1] memchr("\t  = ((COPYING_UNIT *)h->object_"..., '\n', 0) = NULL
[0x4023cc] fwrite("10180:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t  = ((COPYING_UNIT *)h->object_"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      /* We used to copy the odd"..., 'I', 18922) = 0x0259e1a7
[0x40cdf3] memchr("ING_UNIT,\n\t but that can cross a"..., '\n', 18852) = 0x0259e1b0
[0x4022d1] memchr("      /* We used to copy the odd"..., '\n', 0) = NULL
[0x4023cc] fwrite("10181:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* We used to copy the odd"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t but that can cross a page boun"..., 'I', 18842) = 0x0259e210
[0x40cdf3] memchr("ING_UNITS.  */\n      already = o"..., '\n', 18747) = 0x0259e21e
[0x4022d1] memchr("\t but that can cross a page boun"..., '\n', 50) = 0x0259e1e2
[0x4022d1] memchr("\t which does not do strict align"..., '\n', 0) = NULL
[0x4023cc] fwrite("10183:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t which does not do strict align"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      already = obj_size / sizeo"..., 'I', 18732) = 0x0259e246
[0x40cdf3] memchr("ING_UNIT) * sizeof (COPYING_UNIT"..., '\n', 18693) = 0x0259e268
[0x4022d1] memchr("      already = obj_size / sizeo"..., '\n', 0) = NULL
[0x4023cc] fwrite("10184:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      already = obj_size / sizeo"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n  else\n    already = 0;\n  "..., 'I', 18658) = 0x0259e30e
[0x40cdf3] memchr("If the object just copied was th"..., '\n', 18493) = 0x0259e347
[0x4022d1] memchr("    }\n  else\n    already = 0;\n  "..., '\n', 160) = 0x0259e26e
[0x4022d1] memchr("  else\n    already = 0;\n  /* Cop"..., '\n', 154) = 0x0259e275
[0x4022d1] memchr("    already = 0;\n  /* Copy remai"..., '\n', 147) = 0x0259e286
[0x4022d1] memchr("  /* Copy remaining bytes one by"..., '\n', 130) = 0x0259e2b0
[0x4022d1] memchr("  for (i = already; i < obj_size"..., '\n', 88) = 0x0259e2d7
[0x4022d1] memchr("    new_chunk->contents[i] = h->"..., '\n', 49) = 0x0259e307
[0x4022d1] memchr("\n  /* If the object just copied "..., '\n', 1) = 0x0259e308
[0x4022d1] memchr("  /* If the object just copied w"..., '\n', 0) = NULL
[0x4023cc] fwrite("10192:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  /* If the object just copied w"..., 1, 63, 0x7f498147f260) = 63
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     free that chunk and remove "..., 'I', 18435) = 0x0259e572
[0x40cdf3] memchr("If you use it in a program, you "..., '\n', 17881) = 0x0259e5aa
[0x4022d1] memchr("     free that chunk and remove "..., '\n', 551) = 0x0259e37a
[0x4022d1] memchr("     But not if that chunk might"..., '\n', 500) = 0x0259e3b8
[0x4022d1] memchr("  if (h->object_base == old_chun"..., '\n', 438) = 0x0259e400
[0x4022d1] memchr("    {\n      new_chunk->prev = ol"..., '\n', 366) = 0x0259e406
[0x4022d1] memchr("      new_chunk->prev = old_chun"..., '\n', 360) = 0x0259e42f
[0x4022d1] memchr("      CALL_FREEFUN (h, old_chunk"..., '\n', 319) = 0x0259e452
[0x4022d1] memchr("    }\n\n  h->object_base = new_ch"..., '\n', 284) = 0x0259e458
[0x4022d1] memchr("\n  h->object_base = new_chunk->c"..., '\n', 278) = 0x0259e459
[0x4022d1] memchr("  h->object_base = new_chunk->co"..., '\n', 277) = 0x0259e481
[0x4022d1] memchr("  h->next_free = h->object_base "..., '\n', 237) = 0x0259e4ad
[0x4022d1] memchr("  /* The new chunk certainly con"..., '\n', 193) = 0x0259e4ec
[0x4022d1] memchr("  h->maybe_empty_object = 0;\n}\n\n"..., '\n', 130) = 0x0259e509
[0x4022d1] memchr("}\n\n/* Return nonzero if object O"..., '\n', 101) = 0x0259e50b
[0x4022d1] memchr("\n/* Return nonzero if object OBJ"..., '\n', 99) = 0x0259e50c
[0x4022d1] memchr("/* Return nonzero if object OBJ "..., '\n', 98) = 0x0259e54f
[0x4022d1] memchr("   This is here for debugging.\n "..., '\n', 31) = 0x0259e56e
[0x4022d1] memchr("   If you use it in a program, y"..., '\n', 0) = NULL
[0x4023cc] fwrite("10209:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   If you use it in a program, y"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nint\n_obstack_allocated_p (h, ob"..., 'I', 17824) = 0x0259e5ed
[0x40cdf3] memchr("INTER obj;\n{\n  register struct _"..., '\n', 17758) = 0x0259e5f7
[0x4022d1] memchr("\nint\n_obstack_allocated_p (h, ob"..., '\n', 59) = 0x0259e5ab
[0x4022d1] memchr("int\n_obstack_allocated_p (h, obj"..., '\n', 58) = 0x0259e5af
[0x4022d1] memchr("_obstack_allocated_p (h, obj)\n  "..., '\n', 54) = 0x0259e5cd
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 24) = 0x0259e5e5
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 0) = NULL
[0x4023cc] fwrite("10214:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER obj;\n{\n  register s"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("{\n  register struct _obstack_chu"..., 'I', 17747) = 0x0259e779
[0x40cdf3] memchr("INTER)lp >= obj || (POINTER)(lp)"..., '\n', 17362) = 0x0259e7a8
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 361) = 0x0259e5f9
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 359) = 0x0259e64e
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 274) = 0x0259e69b
[0x4022d1] memchr("\n  lp = (h)->chunk;\n  /* We use "..., '\n', 197) = 0x0259e69c
[0x4022d1] memchr("  lp = (h)->chunk;\n  /* We use >"..., '\n', 196) = 0x0259e6af
[0x4022d1] memchr("  /* We use >= rather than > sin"..., '\n', 177) = 0x0259e6f2
[0x4022d1] memchr("     the beginning of the chunk "..., '\n', 110) = 0x0259e737
[0x4022d1] memchr("     at the end of an adjacent c"..., '\n', 41) = 0x0259e760
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 0) = NULL
[0x4023cc] fwrite("10223:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  while (lp != 0 && ((POINTER)lp"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      plp = lp->prev;\n    "..., 'I', 17314) = 0x0259e851
[0x40cdf3] memchr("If OBJ is zero, free everything "..., '\n', 17146) = 0x0259e87a
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 140) = 0x0259e7ae
[0x4022d1] memchr("      plp = lp->prev;\n      lp ="..., '\n', 134) = 0x0259e7c4
[0x4022d1] memchr("      lp = plp;\n    }\n  return l"..., '\n', 112) = 0x0259e7d4
[0x4022d1] memchr("    }\n  return lp != 0;\n}\n\014\n/* F"..., '\n', 96) = 0x0259e7da
[0x4022d1] memchr("  return lp != 0;\n}\n\014\n/* Free ob"..., '\n', 90) = 0x0259e7ec
[0x4022d1] memchr("}\n\014\n/* Free objects in obstack H"..., '\n', 72) = 0x0259e7ee
[0x4022d1] memchr("\014\n/* Free objects in obstack H, "..., '\n', 70) = 0x0259e7f0
[0x4022d1] memchr("/* Free objects in obstack H, in"..., '\n', 68) = 0x0259e834
[0x4022d1] memchr("   more recently than OBJ.  If O"..., '\n', 0) = NULL
[0x4023cc] fwrite("10232:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   more recently than OBJ.  If O"..., 1, 70, 0x7f498147f260) = 70
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n#undef obstack_free\n\n/* This fu"..., 'I', 17104) = 0x0259e8f9
[0x40cdf3] memchr("I code.  */\n\nvoid\n_obstack_free "..., '\n', 16978) = 0x0259e904
[0x4022d1] memchr("\n#undef obstack_free\n\n/* This fu"..., '\n', 81) = 0x0259e87b
[0x4022d1] memchr("#undef obstack_free\n\n/* This fun"..., '\n', 80) = 0x0259e88f
[0x4022d1] memchr("\n/* This function has two names "..., '\n', 60) = 0x0259e890
[0x4022d1] memchr("/* This function has two names w"..., '\n', 59) = 0x0259e8cb
[0x4022d1] memchr("   This is the first one, called"..., '\n', 0) = NULL
[0x4023cc] fwrite("10237:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   This is the first one, called"..., 1, 57, 0x7f498147f260) = 57
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nvoid\n_obstack_free (h, obj)\n   "..., 'I', 16966) = 0x0259e941
[0x40cdf3] memchr("INTER obj;\n{\n  register struct _"..., '\n', 16906) = 0x0259e94b
[0x4022d1] memchr("\nvoid\n_obstack_free (h, obj)\n   "..., '\n', 53) = 0x0259e905
[0x4022d1] memchr("void\n_obstack_free (h, obj)\n    "..., '\n', 52) = 0x0259e90a
[0x4022d1] memchr("_obstack_free (h, obj)\n     stru"..., '\n', 47) = 0x0259e921
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 24) = 0x0259e939
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 0) = NULL
[0x4023cc] fwrite("10242:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER obj;\n{\n  register s"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("{\n  register struct _obstack_chu"..., 'I', 16895) = 0x0259eac4
[0x40cdf3] memchr("INTER)lp >= obj || (POINTER)(lp)"..., '\n', 16519) = 0x0259eaf3
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 352) = 0x0259e94d
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 350) = 0x0259e9a2
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 265) = 0x0259e9ef
[0x4022d1] memchr("\n  lp = h->chunk;\n  /* We use >="..., '\n', 188) = 0x0259e9f0
[0x4022d1] memchr("  lp = h->chunk;\n  /* We use >= "..., '\n', 187) = 0x0259ea01
[0x4022d1] memchr("  /* We use >= because there can"..., '\n', 170) = 0x0259ea4f
[0x4022d1] memchr("     But there can be an empty o"..., '\n', 92) = 0x0259ea85
[0x4022d1] memchr("     at the end of another chunk"..., '\n', 38) = 0x0259eaab
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 0) = NULL
[0x4023cc] fwrite("10251:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  while (lp != 0 && ((POINTER)lp"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      plp = lp->prev;\n    "..., 'I', 16471) = 0x0259eb45
[0x40cdf3] memchr("If we switch chunks, we can't te"..., '\n', 16390) = 0x0259eb7f
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 72) = 0x0259eaf9
[0x4022d1] memchr("      plp = lp->prev;\n      CALL"..., '\n', 66) = 0x0259eb0f
[0x4022d1] memchr("      CALL_FREEFUN (h, lp);\n    "..., '\n', 44) = 0x0259eb2b
[0x4022d1] memchr("      lp = plp;\n      /* If we s"..., '\n', 16) = 0x0259eb3b
[0x4022d1] memchr("      /* If we switch chunks, we"..., '\n', 0) = NULL
[0x4023cc] fwrite("10256:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* If we switch chunks, we"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t chunk contains an empty object"..., 'I', 16331) = 0x0259ecd8
[0x40cdf3] memchr("I code.  */\n\nvoid\nobstack_free ("..., '\n', 15987) = 0x0259ece3
[0x4022d1] memchr("\t chunk contains an empty object"..., '\n', 311) = 0x0259ebbc
[0x4022d1] memchr("      h->maybe_empty_object = 1;"..., '\n', 250) = 0x0259ebdd
[0x4022d1] memchr("    }\n  if (lp)\n    {\n      h->o"..., '\n', 217) = 0x0259ebe3
[0x4022d1] memchr("  if (lp)\n    {\n      h->object_"..., '\n', 211) = 0x0259ebed
[0x4022d1] memchr("    {\n      h->object_base = h->"..., '\n', 201) = 0x0259ebf3
[0x4022d1] memchr("      h->object_base = h->next_f"..., '\n', 195) = 0x0259ec28
[0x4022d1] memchr("      h->chunk_limit = lp->limit"..., '\n', 142) = 0x0259ec4a
[0x4022d1] memchr("      h->chunk = lp;\n    }\n  els"..., '\n', 108) = 0x0259ec5f
[0x4022d1] memchr("    }\n  else if (obj != 0)\n    /"..., '\n', 87) = 0x0259ec65
[0x4022d1] memchr("  else if (obj != 0)\n    /* obj "..., '\n', 81) = 0x0259ec7a
[0x4022d1] memchr("    /* obj is not in any of the "..., '\n', 60) = 0x0259eca5
[0x4022d1] memchr("    abort ();\n}\n\n/* This functio"..., '\n', 17) = 0x0259ecb3
[0x4022d1] memchr("}\n\n/* This function is used from"..., '\n', 3) = 0x0259ecb5
[0x4022d1] memchr("\n/* This function is used from A"..., '\n', 1) = 0x0259ecb6
[0x4022d1] memchr("/* This function is used from AN"..., '\n', 0) = NULL
[0x4023cc] fwrite("10271:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("/* This function is used from AN"..., 1, 45, 0x7f498147f260) = 45
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\nvoid\nobstack_free (h, obj)\n    "..., 'I', 15975) = 0x0259ed1f
[0x40cdf3] memchr("INTER obj;\n{\n  register struct _"..., '\n', 15916) = 0x0259ed29
[0x4022d1] memchr("\nvoid\nobstack_free (h, obj)\n    "..., '\n', 52) = 0x0259ece4
[0x4022d1] memchr("void\nobstack_free (h, obj)\n     "..., '\n', 51) = 0x0259ece9
[0x4022d1] memchr("obstack_free (h, obj)\n     struc"..., '\n', 46) = 0x0259ecff
[0x4022d1] memchr("     struct obstack *h;\n     POI"..., '\n', 24) = 0x0259ed17
[0x4022d1] memchr("     POINTER obj;\n{\n  register s"..., '\n', 0) = NULL
[0x4023cc] fwrite("10276:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER obj;\n{\n  register s"..., 1, 18, 0x7f498147f260) = 18
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("{\n  register struct _obstack_chu"..., 'I', 15905) = 0x0259eea2
[0x40cdf3] memchr("INTER)lp >= obj || (POINTER)(lp)"..., '\n', 15529) = 0x0259eed1
[0x4022d1] memchr("{\n  register struct _obstack_chu"..., '\n', 352) = 0x0259ed2b
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 350) = 0x0259ed80
[0x4022d1] memchr("  register struct _obstack_chunk"..., '\n', 265) = 0x0259edcd
[0x4022d1] memchr("\n  lp = h->chunk;\n  /* We use >="..., '\n', 188) = 0x0259edce
[0x4022d1] memchr("  lp = h->chunk;\n  /* We use >= "..., '\n', 187) = 0x0259eddf
[0x4022d1] memchr("  /* We use >= because there can"..., '\n', 170) = 0x0259ee2d
[0x4022d1] memchr("     But there can be an empty o"..., '\n', 92) = 0x0259ee63
[0x4022d1] memchr("     at the end of another chunk"..., '\n', 38) = 0x0259ee89
[0x4022d1] memchr("  while (lp != 0 && ((POINTER)lp"..., '\n', 0) = NULL
[0x4023cc] fwrite("10285:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  while (lp != 0 && ((POINTER)lp"..., 1, 72, 0x7f498147f260) = 72
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    {\n      plp = lp->prev;\n    "..., 'I', 15481) = 0x0259ef23
[0x40cdf3] memchr("If we switch chunks, we can't te"..., '\n', 15400) = 0x0259ef5d
[0x4022d1] memchr("    {\n      plp = lp->prev;\n    "..., '\n', 72) = 0x0259eed7
[0x4022d1] memchr("      plp = lp->prev;\n      CALL"..., '\n', 66) = 0x0259eeed
[0x4022d1] memchr("      CALL_FREEFUN (h, lp);\n    "..., '\n', 44) = 0x0259ef09
[0x4022d1] memchr("      lp = plp;\n      /* If we s"..., '\n', 16) = 0x0259ef19
[0x4022d1] memchr("      /* If we switch chunks, we"..., '\n', 0) = NULL
[0x4023cc] fwrite("10290:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* If we switch chunks, we"..., 1, 68, 0x7f498147f260) = 68
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t chunk contains an empty object"..., 'I', 15341) = 0x0259f1f6
[0x40cdf3] memchr("I preprocessors;\n   they won't p"..., '\n', 14677) = 0x0259f206
[0x4022d1] memchr("\t chunk contains an empty object"..., '\n', 610) = 0x0259ef9a
[0x4022d1] memchr("      h->maybe_empty_object = 1;"..., '\n', 549) = 0x0259efbb
[0x4022d1] memchr("    }\n  if (lp)\n    {\n      h->o"..., '\n', 516) = 0x0259efc1
[0x4022d1] memchr("  if (lp)\n    {\n      h->object_"..., '\n', 510) = 0x0259efcb
[0x4022d1] memchr("    {\n      h->object_base = h->"..., '\n', 500) = 0x0259efd1
[0x4022d1] memchr("      h->object_base = h->next_f"..., '\n', 494) = 0x0259f006
[0x4022d1] memchr("      h->chunk_limit = lp->limit"..., '\n', 441) = 0x0259f028
[0x4022d1] memchr("      h->chunk = lp;\n    }\n  els"..., '\n', 407) = 0x0259f03d
[0x4022d1] memchr("    }\n  else if (obj != 0)\n    /"..., '\n', 386) = 0x0259f043
[0x4022d1] memchr("  else if (obj != 0)\n    /* obj "..., '\n', 380) = 0x0259f058
[0x4022d1] memchr("    /* obj is not in any of the "..., '\n', 359) = 0x0259f083
[0x4022d1] memchr("    abort ();\n}\n\014\n#if 0\n/* These"..., '\n', 316) = 0x0259f091
[0x4022d1] memchr("}\n\014\n#if 0\n/* These are now turne"..., '\n', 302) = 0x0259f093
[0x4022d1] memchr("\014\n#if 0\n/* These are now turned "..., '\n', 300) = 0x0259f095
[0x4022d1] memchr("#if 0\n/* These are now turned of"..., '\n', 298) = 0x0259f09b
[0x4022d1] memchr("/* These are now turned off beca"..., '\n', 292) = 0x0259f0de
[0x4022d1] memchr("   and it uses bcopy via obstack"..., '\n', 225) = 0x0259f127
[0x4022d1] memchr("\n/* Now define the functional ve"..., '\n', 152) = 0x0259f128
[0x4022d1] memchr("/* Now define the functional ver"..., '\n', 151) = 0x0259f165
[0x4022d1] memchr("   Define them to simply use the"..., '\n', 90) = 0x0259f1ae
[0x4022d1] memchr("\n#ifdef __STDC__\n/* These functi"..., '\n', 17) = 0x0259f1af
[0x4022d1] memchr("#ifdef __STDC__\n/* These functio"..., '\n', 16) = 0x0259f1bf
[0x4022d1] memchr("/* These function definitions do"..., '\n', 0) = NULL
[0x4023cc] fwrite("10313:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("/* These function definitions do"..., 1, 71, 0x7f498147f260) = 71
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   they won't pass through the m"..., 'I', 14660) = 0x0259f2cf
[0x40cdf3] memchr("INTER (obstack_base) (obstack)\n "..., '\n', 14460) = 0x0259f2ed
[0x4022d1] memchr("   they won't pass through the m"..., '\n', 198) = 0x0259f245
[0x4022d1] memchr("\n/* The function names appear in"..., '\n', 135) = 0x0259f246
[0x4022d1] memchr("/* The function names appear in "..., '\n', 134) = 0x0259f286
[0x4022d1] memchr("   the macro-definitions of the "..., '\n', 70) = 0x0259f2cb
[0x4022d1] memchr("\nPOINTER (obstack_base) (obstack"..., '\n', 1) = 0x0259f2cc
[0x4022d1] memchr("POINTER (obstack_base) (obstack)"..., '\n', 0) = NULL
[0x4023cc] fwrite("10319:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_base) (obstack)"..., 1, 33, 0x7f498147f260) = 33
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n{\n"..., 'I', 14429) = 0x0259f334
[0x40cdf3] memchr("INTER (obstack_next_free) (obsta"..., '\n', 14359) = 0x0259f357
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 68) = 0x0259f30b
[0x4022d1] memchr("{\n  return obstack_base (obstack"..., '\n', 38) = 0x0259f30d
[0x4022d1] memchr("  return obstack_base (obstack);"..., '\n', 36) = 0x0259f32e
[0x4022d1] memchr("}\n\nPOINTER (obstack_next_free) ("..., '\n', 3) = 0x0259f330
[0x4022d1] memchr("\nPOINTER (obstack_next_free) (ob"..., '\n', 1) = 0x0259f331
[0x4022d1] memchr("POINTER (obstack_next_free) (obs"..., '\n', 0) = NULL
[0x4023cc] fwrite("10325:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_next_free) (obs"..., 1, 38, 0x7f498147f260) = 38
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n{\n"..., 'I', 14323) = 0x0259f4c5
[0x40cdf3] memchr("INTER pointer;\n     int length;\n"..., '\n', 13958) = 0x0259f4d3
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 358) = 0x0259f375
[0x4022d1] memchr("{\n  return obstack_next_free (ob"..., '\n', 328) = 0x0259f377
[0x4022d1] memchr("  return obstack_next_free (obst"..., '\n', 326) = 0x0259f39d
[0x4022d1] memchr("}\n\nint (obstack_object_size) (ob"..., '\n', 288) = 0x0259f39f
[0x4022d1] memchr("\nint (obstack_object_size) (obst"..., '\n', 286) = 0x0259f3a0
[0x4022d1] memchr("int (obstack_object_size) (obsta"..., '\n', 285) = 0x0259f3c4
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 249) = 0x0259f3e2
[0x4022d1] memchr("{\n  return obstack_object_size ("..., '\n', 219) = 0x0259f3e4
[0x4022d1] memchr("  return obstack_object_size (ob"..., '\n', 217) = 0x0259f40c
[0x4022d1] memchr("}\n\nint (obstack_room) (obstack)\n"..., '\n', 177) = 0x0259f40e
[0x4022d1] memchr("\nint (obstack_room) (obstack)\n  "..., '\n', 175) = 0x0259f40f
[0x4022d1] memchr("int (obstack_room) (obstack)\n   "..., '\n', 174) = 0x0259f42c
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 145) = 0x0259f44a
[0x4022d1] memchr("{\n  return obstack_room (obstack"..., '\n', 115) = 0x0259f44c
[0x4022d1] memchr("  return obstack_room (obstack);"..., '\n', 113) = 0x0259f46d
[0x4022d1] memchr("}\n\nvoid (obstack_grow) (obstack,"..., '\n', 80) = 0x0259f46f
[0x4022d1] memchr("\nvoid (obstack_grow) (obstack, p"..., '\n', 78) = 0x0259f470
[0x4022d1] memchr("void (obstack_grow) (obstack, po"..., '\n', 77) = 0x0259f49f
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 30) = 0x0259f4bd
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 0) = NULL
[0x4023cc] fwrite("10345:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER pointer;\n     int l"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     int length;\n{\n  obstack_gro"..., 'I', 13943) = 0x0259f56a
[0x40cdf3] memchr("INTER pointer;\n     int length;\n"..., '\n', 13793) = 0x0259f578
[0x4022d1] memchr("     int length;\n{\n  obstack_gro"..., '\n', 143) = 0x0259f4e4
[0x4022d1] memchr("{\n  obstack_grow (obstack, point"..., '\n', 126) = 0x0259f4e6
[0x4022d1] memchr("  obstack_grow (obstack, pointer"..., '\n', 124) = 0x0259f511
[0x4022d1] memchr("}\n\nvoid (obstack_grow0) (obstack"..., '\n', 81) = 0x0259f513
[0x4022d1] memchr("\nvoid (obstack_grow0) (obstack, "..., '\n', 79) = 0x0259f514
[0x4022d1] memchr("void (obstack_grow0) (obstack, p"..., '\n', 78) = 0x0259f544
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 30) = 0x0259f562
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 0) = NULL
[0x4023cc] fwrite("10353:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER pointer;\n     int l"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     int length;\n{\n  obstack_gro"..., 'I', 13778) = 0x0259f7db
[0x40cdf3] memchr("INTER (obstack_finish) (obstack)"..., '\n', 13168) = 0x0259f7fb
[0x4022d1] memchr("     int length;\n{\n  obstack_gro"..., '\n', 608) = 0x0259f589
[0x4022d1] memchr("{\n  obstack_grow0 (obstack, poin"..., '\n', 591) = 0x0259f58b
[0x4022d1] memchr("  obstack_grow0 (obstack, pointe"..., '\n', 589) = 0x0259f5b7
[0x4022d1] memchr("}\n\nvoid (obstack_1grow) (obstack"..., '\n', 545) = 0x0259f5b9
[0x4022d1] memchr("\nvoid (obstack_1grow) (obstack, "..., '\n', 543) = 0x0259f5ba
[0x4022d1] memchr("void (obstack_1grow) (obstack, c"..., '\n', 542) = 0x0259f5e4
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 500) = 0x0259f602
[0x4022d1] memchr("     int character;\n{\n  obstack_"..., '\n', 470) = 0x0259f616
[0x4022d1] memchr("{\n  obstack_1grow (obstack, char"..., '\n', 450) = 0x0259f618
[0x4022d1] memchr("  obstack_1grow (obstack, charac"..., '\n', 448) = 0x0259f63e
[0x4022d1] memchr("}\n\nvoid (obstack_blank) (obstack"..., '\n', 410) = 0x0259f640
[0x4022d1] memchr("\nvoid (obstack_blank) (obstack, "..., '\n', 408) = 0x0259f641
[0x4022d1] memchr("void (obstack_blank) (obstack, l"..., '\n', 407) = 0x0259f668
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 368) = 0x0259f686
[0x4022d1] memchr("     int length;\n{\n  obstack_bla"..., '\n', 338) = 0x0259f697
[0x4022d1] memchr("{\n  obstack_blank (obstack, leng"..., '\n', 321) = 0x0259f699
[0x4022d1] memchr("  obstack_blank (obstack, length"..., '\n', 319) = 0x0259f6bc
[0x4022d1] memchr("}\n\nvoid (obstack_1grow_fast) (ob"..., '\n', 284) = 0x0259f6be
[0x4022d1] memchr("\nvoid (obstack_1grow_fast) (obst"..., '\n', 282) = 0x0259f6bf
[0x4022d1] memchr("void (obstack_1grow_fast) (obsta"..., '\n', 281) = 0x0259f6ee
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 234) = 0x0259f70c
[0x4022d1] memchr("     int character;\n{\n  obstack_"..., '\n', 204) = 0x0259f720
[0x4022d1] memchr("{\n  obstack_1grow_fast (obstack,"..., '\n', 184) = 0x0259f722
[0x4022d1] memchr("  obstack_1grow_fast (obstack, c"..., '\n', 182) = 0x0259f74d
[0x4022d1] memchr("}\n\nvoid (obstack_blank_fast) (ob"..., '\n', 139) = 0x0259f74f
[0x4022d1] memchr("\nvoid (obstack_blank_fast) (obst"..., '\n', 137) = 0x0259f750
[0x4022d1] memchr("void (obstack_blank_fast) (obsta"..., '\n', 136) = 0x0259f77c
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 92) = 0x0259f79a
[0x4022d1] memchr("     int length;\n{\n  obstack_bla"..., '\n', 62) = 0x0259f7ab
[0x4022d1] memchr("{\n  obstack_blank_fast (obstack,"..., '\n', 45) = 0x0259f7ad
[0x4022d1] memchr("  obstack_blank_fast (obstack, l"..., '\n', 43) = 0x0259f7d5
[0x4022d1] memchr("}\n\nPOINTER (obstack_finish) (obs"..., '\n', 3) = 0x0259f7d7
[0x4022d1] memchr("\nPOINTER (obstack_finish) (obsta"..., '\n', 1) = 0x0259f7d8
[0x4022d1] memchr("POINTER (obstack_finish) (obstac"..., '\n', 0) = NULL
[0x4023cc] fwrite("10387:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_finish) (obstac"..., 1, 35, 0x7f498147f260) = 35
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n{\n"..., 'I', 13135) = 0x0259f844
[0x40cdf3] memchr("INTER (obstack_alloc) (obstack, "..., '\n', 13063) = 0x0259f86b
[0x4022d1] memchr("     struct obstack *obstack;\n{\n"..., '\n', 70) = 0x0259f819
[0x4022d1] memchr("{\n  return obstack_finish (obsta"..., '\n', 40) = 0x0259f81b
[0x4022d1] memchr("  return obstack_finish (obstack"..., '\n', 38) = 0x0259f83e
[0x4022d1] memchr("}\n\nPOINTER (obstack_alloc) (obst"..., '\n', 3) = 0x0259f840
[0x4022d1] memchr("\nPOINTER (obstack_alloc) (obstac"..., '\n', 1) = 0x0259f841
[0x4022d1] memchr("POINTER (obstack_alloc) (obstack"..., '\n', 0) = NULL
[0x4023cc] fwrite("10393:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_alloc) (obstack"..., 1, 42, 0x7f498147f260) = 42
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n  "..., 'I', 13023) = 0x0259f8cc
[0x40cdf3] memchr("INTER (obstack_copy) (obstack, p"..., '\n', 12927) = 0x0259f8fb
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 94) = 0x0259f889
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 64) = 0x0259f89a
[0x4022d1] memchr("{\n  return obstack_alloc (obstac"..., '\n', 47) = 0x0259f89c
[0x4022d1] memchr("  return obstack_alloc (obstack,"..., '\n', 45) = 0x0259f8c6
[0x4022d1] memchr("}\n\nPOINTER (obstack_copy) (obsta"..., '\n', 3) = 0x0259f8c8
[0x4022d1] memchr("\nPOINTER (obstack_copy) (obstack"..., '\n', 1) = 0x0259f8c9
[0x4022d1] memchr("POINTER (obstack_copy) (obstack,"..., '\n', 0) = NULL
[0x4023cc] fwrite("10400:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_copy) (obstack,"..., 1, 50, 0x7f498147f260) = 50
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n  "..., 'I', 12879) = 0x0259f921
[0x40cdf3] memchr("INTER pointer;\n     int length;\n"..., '\n', 12842) = 0x0259f92f
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 30) = 0x0259f919
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 0) = NULL
[0x4023cc] fwrite("10402:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER pointer;\n     int l"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     int length;\n{\n  return obst"..., 'I', 12827) = 0x0259f97a
[0x40cdf3] memchr("INTER (obstack_copy0) (obstack, "..., '\n', 12753) = 0x0259f9aa
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 72) = 0x0259f940
[0x4022d1] memchr("{\n  return obstack_copy (obstack"..., '\n', 55) = 0x0259f942
[0x4022d1] memchr("  return obstack_copy (obstack, "..., '\n', 53) = 0x0259f974
[0x4022d1] memchr("}\n\nPOINTER (obstack_copy0) (obst"..., '\n', 3) = 0x0259f976
[0x4022d1] memchr("\nPOINTER (obstack_copy0) (obstac"..., '\n', 1) = 0x0259f977
[0x4022d1] memchr("POINTER (obstack_copy0) (obstack"..., '\n', 0) = NULL
[0x4023cc] fwrite("10408:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("POINTER (obstack_copy0) (obstack"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     struct obstack *obstack;\n  "..., 'I', 12704) = 0x0259f9d0
[0x40cdf3] memchr("INTER pointer;\n     int length;\n"..., '\n', 12667) = 0x0259f9de
[0x4022d1] memchr("     struct obstack *obstack;\n  "..., '\n', 30) = 0x0259f9c8
[0x4022d1] memchr("     POINTER pointer;\n     int l"..., '\n', 0) = NULL
[0x4023cc] fwrite("10410:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("     POINTER pointer;\n     int l"..., 1, 22, 0x7f498147f260) = 22
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     int length;\n{\n  return obst"..., 'I', 12652) = 0x0259fa5b
[0x40cdf3] memchr("IBC or not __GNU_LIBRARY__.  */\n"..., '\n', 12528) = 0x0259fa7a
[0x4022d1] memchr("     int length;\n{\n  return obst"..., '\n', 112) = 0x0259f9ef
[0x4022d1] memchr("{\n  return obstack_copy0 (obstac"..., '\n', 95) = 0x0259f9f1
[0x4022d1] memchr("  return obstack_copy0 (obstack,"..., '\n', 93) = 0x0259fa24
[0x4022d1] memchr("}\n\n#endif /* __STDC__ */\n\n#endif"..., '\n', 42) = 0x0259fa26
[0x4022d1] memchr("\n#endif /* __STDC__ */\n\n#endif /"..., '\n', 40) = 0x0259fa27
[0x4022d1] memchr("#endif /* __STDC__ */\n\n#endif /*"..., '\n', 39) = 0x0259fa3d
[0x4022d1] memchr("\n#endif /* 0 */\n\n#endif\t/* _LIBC"..., '\n', 17) = 0x0259fa3e
[0x4022d1] memchr("#endif /* 0 */\n\n#endif\t/* _LIBC "..., '\n', 16) = 0x0259fa4d
[0x4022d1] memchr("\n#endif\t/* _LIBC or not __GNU_LI"..., '\n', 1) = 0x0259fa4e
[0x4022d1] memchr("#endif\t/* _LIBC or not __GNU_LIB"..., '\n', 0) = NULL
[0x4023cc] fwrite("10420:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#endif\t/* _LIBC or not __GNU_LIB"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("/* search.c - searching subrouti"..., 'I', 12496) = 0x0259faf4
[0x40cdf3] memchr("Inc.\n\n   This program is free so"..., '\n', 12375) = 0x0259faf8
[0x4022d1] memchr("/* search.c - searching subrouti"..., '\n', 73) = 0x0259fac3
[0x4022d1] memchr("   Copyright (C) 1992 Free Softw"..., '\n', 0) = NULL
[0x4023cc] fwrite("10422:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   Copyright (C) 1992 Free Softw"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   This program is free softwar"..., 'I', 12370) = 0x0259fc33
[0x40cdf3] memchr("ITHOUT ANY WARRANTY; without eve"..., '\n', 12056) = 0x0259fc6c
[0x4022d1] memchr("\n   This program is free softwar"..., '\n', 306) = 0x0259faf9
[0x4022d1] memchr("   This program is free software"..., '\n', 305) = 0x0259fb41
[0x4022d1] memchr("   it under the terms of the GNU"..., '\n', 233) = 0x0259fb89
[0x4022d1] memchr("   the Free Software Foundation;"..., '\n', 161) = 0x0259fbd0
[0x4022d1] memchr("   any later version.\n\n   This p"..., '\n', 90) = 0x0259fbe6
[0x4022d1] memchr("\n   This program is distributed "..., '\n', 68) = 0x0259fbe7
[0x4022d1] memchr("   This program is distributed i"..., '\n', 67) = 0x0259fc2a
[0x4022d1] memchr("   but WITHOUT ANY WARRANTY; wit"..., '\n', 0) = NULL
[0x4023cc] fwrite("10430:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   but WITHOUT ANY WARRANTY; wit"..., 1, 66, 0x7f498147f260) = 66
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   MERCHANTABILITY or FITNESS FO"..., 'I', 11998) = 0x0259fc7a
[0x40cdf3] memchr("ILITY or FITNESS FOR A PARTICULA"..., '\n', 11985) = 0x0259fcad
[0x4022d1] memchr("   MERCHANTABILITY or FITNESS FO"..., '\n', 0) = NULL
[0x4023cc] fwrite("10431:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   MERCHANTABILITY or FITNESS FO"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   GNU General Public License fo"..., 'I', 11933) = 0x0259fd72
[0x40cdf3] memchr("Inc., 675 Mass Ave, Cambridge, M"..., '\n', 11737) = 0x0259fd9f
[0x4022d1] memchr("   GNU General Public License fo"..., '\n', 181) = 0x0259fcdd
[0x4022d1] memchr("\n   You should have received a c"..., '\n', 133) = 0x0259fcde
[0x4022d1] memchr("   You should have received a co"..., '\n', 132) = 0x0259fd23
[0x4022d1] memchr("   along with this program; if n"..., '\n', 63) = 0x0259fd62
[0x4022d1] memchr("   Foundation, Inc., 675 Mass Av"..., '\n', 0) = NULL
[0x4023cc] fwrite("10436:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   Foundation, Inc., 675 Mass Av"..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n   Written August 1992 by Mike "..., 'I', 11691) = 0x025a003d
[0x40cdf3] memchr("ING_H) || defined(STDC_HEADERS)\n"..., '\n', 11022) = 0x025a005c
[0x4022d1] memchr("\n   Written August 1992 by Mike "..., '\n', 649) = 0x0259fda0
[0x4022d1] memchr("   Written August 1992 by Mike H"..., '\n', 648) = 0x0259fdcb
[0x4022d1] memchr("\n/*#include <ctype.h>*/\n\n#ifdef "..., '\n', 605) = 0x0259fdcc
[0x4022d1] memchr("/*#include <ctype.h>*/\n\n#ifdef S"..., '\n', 604) = 0x0259fde3
[0x4022d1] memchr("\n#ifdef STDC_HEADERS\n#if flag_li"..., '\n', 581) = 0x0259fde4
[0x4022d1] memchr("#ifdef STDC_HEADERS\n#if flag_lim"..., '\n', 580) = 0x0259fdf8
[0x4022d1] memchr("#if flag_limits==0\n#undef RE_DUP"..., '\n', 560) = 0x0259fe0b
[0x4022d1] memchr("#undef RE_DUP_MAX\n#include <limi"..., '\n', 541) = 0x0259fe1d
[0x4022d1] memchr("#include <limits.h>\n#define flag"..., '\n', 523) = 0x0259fe31
[0x4022d1] memchr("#define flag_limits 1\n#endif\n#if"..., '\n', 503) = 0x0259fe47
[0x4022d1] memchr("#endif\n#if flag_stdlib==0\n#inclu"..., '\n', 481) = 0x0259fe4e
[0x4022d1] memchr("#if flag_stdlib==0\n#include <std"..., '\n', 474) = 0x0259fe61
[0x4022d1] memchr("#include <stdlib.h>\n#define flag"..., '\n', 455) = 0x0259fe75
[0x4022d1] memchr("#define flag_stdlib 1\n#endif\n#el"..., '\n', 435) = 0x0259fe8b
[0x4022d1] memchr("#endif\n#else\n#define UCHAR_MAX 2"..., '\n', 413) = 0x0259fe92
[0x4022d1] memchr("#else\n#define UCHAR_MAX 255\n#if "..., '\n', 406) = 0x0259fe98
[0x4022d1] memchr("#define UCHAR_MAX 255\n#if flag_s"..., '\n', 400) = 0x0259feae
[0x4022d1] memchr("#if flag_systypes==0\n#include <s"..., '\n', 378) = 0x0259fec3
[0x4022d1] memchr("#include <sys/types.h>\n#define f"..., '\n', 357) = 0x0259feda
[0x4022d1] memchr("#define flag_systypes 1\n#endif\ne"..., '\n', 334) = 0x0259fef2
[0x4022d1] memchr("#endif\nextern char *malloc();\n#e"..., '\n', 310) = 0x0259fef9
[0x4022d1] memchr("extern char *malloc();\n#endif\n\n#"..., '\n', 303) = 0x0259ff10
[0x4022d1] memchr("#endif\n\n#ifdef HAVE_MEMCHR\n#if f"..., '\n', 280) = 0x0259ff17
[0x4022d1] memchr("\n#ifdef HAVE_MEMCHR\n#if flag_str"..., '\n', 273) = 0x0259ff18
[0x4022d1] memchr("#ifdef HAVE_MEMCHR\n#if flag_stri"..., '\n', 272) = 0x0259ff2b
[0x4022d1] memchr("#if flag_string==0\n#include <str"..., '\n', 253) = 0x0259ff3e
[0x4022d1] memchr("#include <string.h>\n#define flag"..., '\n', 234) = 0x0259ff52
[0x4022d1] memchr("#define flag_string 1\n#endif\n#if"..., '\n', 214) = 0x0259ff68
[0x4022d1] memchr("#endif\n#ifdef NEED_MEMORY_H\n#if "..., '\n', 192) = 0x0259ff6f
[0x4022d1] memchr("#ifdef NEED_MEMORY_H\n#if flag_me"..., '\n', 185) = 0x0259ff84
[0x4022d1] memchr("#if flag_memory==0\n#include <mem"..., '\n', 164) = 0x0259ff97
[0x4022d1] memchr("#include <memory.h>\n#define flag"..., '\n', 145) = 0x0259ffab
[0x4022d1] memchr("#define flag_memory 1\n#endif\n#en"..., '\n', 125) = 0x0259ffc1
[0x4022d1] memchr("#endif\n#endif\n#else\n#ifdef __STD"..., '\n', 103) = 0x0259ffc8
[0x4022d1] memchr("#endif\n#else\n#ifdef __STDC__\next"..., '\n', 96) = 0x0259ffcf
[0x4022d1] memchr("#else\n#ifdef __STDC__\nextern voi"..., '\n', 89) = 0x0259ffd5
[0x4022d1] memchr("#ifdef __STDC__\nextern void *mem"..., '\n', 83) = 0x0259ffe5
[0x4022d1] memchr("extern void *memchr();\n#else\next"..., '\n', 67) = 0x0259fffc
[0x4022d1] memchr("#else\nextern char *memchr();\n#en"..., '\n', 44) = 0x025a0002
[0x4022d1] memchr("extern char *memchr();\n#endif\n#e"..., '\n', 38) = 0x025a0019
[0x4022d1] memchr("#endif\n#endif\n\n#if defined(HAVE_"..., '\n', 15) = 0x025a0020
[0x4022d1] memchr("#endif\n\n#if defined(HAVE_STRING_"..., '\n', 8) = 0x025a0027
[0x4022d1] memchr("\n#if defined(HAVE_STRING_H) || d"..., '\n', 1) = 0x025a0028
[0x4022d1] memchr("#if defined(HAVE_STRING_H) || de"..., '\n', 0) = NULL
[0x4023cc] fwrite("10480:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#if defined(HAVE_STRING_H) || de"..., 1, 52, 0x7f498147f260) = 52
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#undef bcopy\n#define bcopy(s, d,"..., 'I', 10990) = 0x025a00b6
[0x40cdf3] memchr("ISALNUM(C) (isascii(C) && isalnu"..., '\n', 10901) = 0x025a00db
[0x4022d1] memchr("#undef bcopy\n#define bcopy(s, d,"..., '\n', 81) = 0x025a0069
[0x4022d1] memchr("#define bcopy(s, d, n) memcpy((d"..., '\n', 68) = 0x025a0096
[0x4022d1] memchr("#endif\n\n#ifdef isascii\n#define I"..., '\n', 23) = 0x025a009d
[0x4022d1] memchr("\n#ifdef isascii\n#define ISALNUM("..., '\n', 16) = 0x025a009e
[0x4022d1] memchr("#ifdef isascii\n#define ISALNUM(C"..., '\n', 15) = 0x025a00ad
[0x4022d1] memchr("#define ISALNUM(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("10486:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define ISALNUM(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISUPPER(C) (isascii(C) &"..., 'I', 10863) = 0x025a00e4
[0x40cdf3] memchr("ISUPPER(C) (isascii(C) && isuppe"..., '\n', 10855) = 0x025a0109
[0x4022d1] memchr("#define ISUPPER(C) (isascii(C) &"..., '\n', 0) = NULL
[0x4023cc] fwrite("10487:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define ISUPPER(C) (isascii(C) &"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#else\n#define ISALNUM(C) isalnum"..., 'I', 10817) = 0x025a0118
[0x40cdf3] memchr("ISALNUM(C) isalnum(C)\n#define IS"..., '\n', 10803) = 0x025a012d
[0x4022d1] memchr("#else\n#define ISALNUM(C) isalnum"..., '\n', 6) = 0x025a010f
[0x4022d1] memchr("#define ISALNUM(C) isalnum(C)\n#d"..., '\n', 0) = NULL
[0x4023cc] fwrite("10489:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define ISALNUM(C) isalnum(C)\n#d"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#define ISUPPER(C) isupper(C)\n#e"..., 'I', 10781) = 0x025a0136
[0x40cdf3] memchr("ISUPPER(C) isupper(C)\n#endif\n\n#d"..., '\n', 10773) = 0x025a014b
[0x4022d1] memchr("#define ISUPPER(C) isupper(C)\n#e"..., '\n', 0) = NULL
[0x4023cc] fwrite("10490:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define ISUPPER(C) isupper(C)\n#e"..., 1, 30, 0x7f498147f260) = 30
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("#endif\n\n#define TOLOWER(C) (ISUP"..., 'I', 10751) = 0x025a0168
[0x40cdf3] memchr("ISUPPER(C) ? tolower(C) : (C))\n\n"..., '\n', 10723) = 0x025a0186
[0x4022d1] memchr("#endif\n\n#define TOLOWER(C) (ISUP"..., '\n', 8) = 0x025a0152
[0x4022d1] memchr("\n#define TOLOWER(C) (ISUPPER(C) "..., '\n', 1) = 0x025a0153
[0x4022d1] memchr("#define TOLOWER(C) (ISUPPER(C) ?"..., '\n', 0) = NULL
[0x4023cc] fwrite("10493:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define TOLOWER(C) (ISUPPER(C) ?"..., 1, 51, 0x7f498147f260) = 51
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/*#include "grep.h"*/\n/*#includ"..., 'I', 10692) = 0x025a0546
[0x40cdf3] memchr("ISALNUM(C) || (C) == '_')\n\n/* DF"..., '\n', 9733) = 0x025a055f
[0x4022d1] memchr("\n/*#include "grep.h"*/\n/*#includ"..., '\n', 941) = 0x025a0187
[0x4022d1] memchr("/*#include "grep.h"*/\n/*#include"..., '\n', 940) = 0x025a019d
[0x4022d1] memchr("/*#include "dfa.h"*/\n/*#include "..., '\n', 918) = 0x025a01b2
[0x4022d1] memchr("/*#include "kwset.h"*/\n/*#includ"..., '\n', 897) = 0x025a01c9
[0x4022d1] memchr("/*#include "regex.h"*/\n\n#define "..., '\n', 874) = 0x025a01e0
[0x4022d1] memchr("\n#define NCHAR (UCHAR_MAX + 1)\n\n"..., '\n', 851) = 0x025a01e1
[0x4022d1] memchr("#define NCHAR (UCHAR_MAX + 1)\n\n#"..., '\n', 850) = 0x025a01ff
[0x4022d1] memchr("\n#if __STDC__\nstatic void Gcompi"..., '\n', 820) = 0x025a0200
[0x4022d1] memchr("#if __STDC__\nstatic void Gcompil"..., '\n', 819) = 0x025a020d
[0x4022d1] memchr("static void Gcompile(char *, siz"..., '\n', 806) = 0x025a0233
[0x4022d1] memchr("static void Ecompile(char *, siz"..., '\n', 768) = 0x025a0259
[0x4022d1] memchr("static char *EGexecute(char *, s"..., '\n', 730) = 0x025a028a
[0x4022d1] memchr("static void Fcompile(char *, siz"..., '\n', 681) = 0x025a02b0
[0x4022d1] memchr("static char *Fexecute(char *, si"..., '\n', 643) = 0x025a02e0
[0x4022d1] memchr("#else\nstatic void Gcompile();\nst"..., '\n', 595) = 0x025a02e6
[0x4022d1] memchr("static void Gcompile();\nstatic v"..., '\n', 589) = 0x025a02fe
[0x4022d1] memchr("static void Ecompile();\nstatic c"..., '\n', 565) = 0x025a0316
[0x4022d1] memchr("static char *EGexecute();\nstatic"..., '\n', 541) = 0x025a0330
[0x4022d1] memchr("static void Fcompile();\nstatic c"..., '\n', 515) = 0x025a0348
[0x4022d1] memchr("static char *Fexecute();\n#endif\n"..., '\n', 491) = 0x025a0361
[0x4022d1] memchr("#endif\n\n/* Here is the matchers "..., '\n', 466) = 0x025a0368
[0x4022d1] memchr("\n/* Here is the matchers vector "..., '\n', 459) = 0x025a0369
[0x4022d1] memchr("/* Here is the matchers vector f"..., '\n', 458) = 0x025a03a1
[0x4022d1] memchr("struct matcher matchers[] = {\n  "..., '\n', 402) = 0x025a03bf
[0x4022d1] memchr("  { "default", Gcompile, EGexecu"..., '\n', 372) = 0x025a03e5
[0x4022d1] memchr("  { "grep", Gcompile, EGexecute "..., '\n', 334) = 0x025a0408
[0x4022d1] memchr("  { "ggrep", Gcompile, EGexecute"..., '\n', 299) = 0x025a042c
[0x4022d1] memchr("  { "egrep", Ecompile, EGexecute"..., '\n', 263) = 0x025a0450
[0x4022d1] memchr("  { "posix-egrep", Ecompile, EGe"..., '\n', 227) = 0x025a047a
[0x4022d1] memchr("  { "gegrep", Ecompile, EGexecut"..., '\n', 185) = 0x025a049f
[0x4022d1] memchr("  { "fgrep", Fcompile, Fexecute "..., '\n', 148) = 0x025a04c2
[0x4022d1] memchr("  { "gfgrep", Fcompile, Fexecute"..., '\n', 113) = 0x025a04e6
[0x4022d1] memchr("  { 0, 0, 0 },\n};\n\n/* For -w, we"..., '\n', 77) = 0x025a04f5
[0x4022d1] memchr("};\n\n/* For -w, we also consider "..., '\n', 62) = 0x025a04f8
[0x4022d1] memchr("\n/* For -w, we also consider _ t"..., '\n', 59) = 0x025a04f9
[0x4022d1] memchr("/* For -w, we also consider _ to"..., '\n', 58) = 0x025a0533
[0x4022d1] memchr("#define WCHAR(C) (ISALNUM(C) || "..., '\n', 0) = NULL
[0x4023cc] fwrite("10530:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("#define WCHAR(C) (ISALNUM(C) || "..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n/* DFA compiled regexp. */\nstat"..., 'I', 9707) = 0x025a06df
[0x40cdf3] memchr("If kwsexec() returns < lastexact"..., '\n', 9324) = 0x025a0716
[0x4022d1] memchr("\n/* DFA compiled regexp. */\nstat"..., '\n', 380) = 0x025a0560
[0x4022d1] memchr("/* DFA compiled regexp. */\nstati"..., '\n', 379) = 0x025a057b
[0x4022d1] memchr("static struct dfa dfa_1;\n\n/* Reg"..., '\n', 352) = 0x025a0594
[0x4022d1] memchr("\n/* Regex compiled regexp. */\nst"..., '\n', 327) = 0x025a0595
[0x4022d1] memchr("/* Regex compiled regexp. */\nsta"..., '\n', 326) = 0x025a05b2
[0x4022d1] memchr("static struct re_pattern_buffer "..., '\n', 297) = 0x025a05d9
[0x4022d1] memchr("\n/* KWset compiled pattern.  For"..., '\n', 258) = 0x025a05da
[0x4022d1] memchr("/* KWset compiled pattern.  For "..., '\n', 257) = 0x025a061c
[0x4022d1] memchr("   a list of strings, at least o"..., '\n', 191) = 0x025a065d
[0x4022d1] memchr("   any string matching the regex"..., '\n', 126) = 0x025a0683
[0x4022d1] memchr("static kwset_t kwset;\n\n/* Last c"..., '\n', 88) = 0x025a0699
[0x4022d1] memchr("\n/* Last compiled fixed string k"..., '\n', 66) = 0x025a069a
[0x4022d1] memchr("/* Last compiled fixed string kn"..., '\n', 65) = 0x025a06db
[0x4022d1] memchr("   If kwsexec() returns < lastex"..., '\n', 0) = NULL
[0x4023cc] fwrite("10544:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("   If kwsexec() returns < lastex"..., 1, 59, 0x7f498147f260) = 59
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   call the regexp matcher at al"..., 'I', 9268) = 0x025a0886
[0x40cdf3] memchr("If the DFA turns out to have som"..., '\n', 8901) = 0x025a08c3
[0x4022d1] memchr("   call the regexp matcher at al"..., '\n', 364) = 0x025a073c
[0x4022d1] memchr("static int lastexact;\n\nvoid\ndfae"..., '\n', 326) = 0x025a0752
[0x4022d1] memchr("\nvoid\ndfaerror(mesg)\n     char *"..., '\n', 304) = 0x025a0753
[0x4022d1] memchr("void\ndfaerror(mesg)\n     char *m"..., '\n', 303) = 0x025a0758
[0x4022d1] memchr("dfaerror(mesg)\n     char *mesg;\n"..., '\n', 298) = 0x025a0767
[0x4022d1] memchr("     char *mesg;\n{\n  fatal(mesg,"..., '\n', 283) = 0x025a0778
[0x4022d1] memchr("{\n  fatal(mesg, 0);\n}\n\nstatic vo"..., '\n', 266) = 0x025a077a
[0x4022d1] memchr("  fatal(mesg, 0);\n}\n\nstatic void"..., '\n', 264) = 0x025a078c
[0x4022d1] memchr("}\n\nstatic void\nkwsinit()\n{\n  sta"..., '\n', 246) = 0x025a078e
[0x4022d1] memchr("\nstatic void\nkwsinit()\n{\n  stati"..., '\n', 244) = 0x025a078f
[0x4022d1] memchr("static void\nkwsinit()\n{\n  static"..., '\n', 243) = 0x025a079b
[0x4022d1] memchr("kwsinit()\n{\n  static char trans["..., '\n', 231) = 0x025a07a5
[0x4022d1] memchr("{\n  static char trans[NCHAR];\n  "..., '\n', 221) = 0x025a07a7
[0x4022d1] memchr("  static char trans[NCHAR];\n  in"..., '\n', 219) = 0x025a07c3
[0x4022d1] memchr("  int i;\n\n  if (match_icase)\n   "..., '\n', 191) = 0x025a07cc
[0x4022d1] memchr("\n  if (match_icase)\n    for (i ="..., '\n', 182) = 0x025a07cd
[0x4022d1] memchr("  if (match_icase)\n    for (i = "..., '\n', 181) = 0x025a07e0
[0x4022d1] memchr("    for (i = 0; i < NCHAR; ++i)\n"..., '\n', 162) = 0x025a0800
[0x4022d1] memchr("      trans[i] = TOLOWER(i);\n\n  "..., '\n', 130) = 0x025a081d
[0x4022d1] memchr("\n  if (!(kwset = kwsalloc(match_"..., '\n', 101) = 0x025a081e
[0x4022d1] memchr("  if (!(kwset = kwsalloc(match_i"..., '\n', 100) = 0x025a085b
[0x4022d1] memchr("    fatal("memory exhausted", 0)"..., '\n', 39) = 0x025a087d
[0x4022d1] memchr("}  \n\n/* If the DFA turns out to "..., '\n', 5) = 0x025a0881
[0x4022d1] memchr("\n/* If the DFA turns out to have"..., '\n', 1) = 0x025a0882
[0x4022d1] memchr("/* If the DFA turns out to have "..., '\n', 0) = NULL
[0x4023cc] fwrite("10569:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("/* If the DFA turns out to have "..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("   which must occur in the match"..., 'I', 8839) = 0x025a0d03
[0x40cdf3] memchr("ISTS_NOT_NEWLINE);\n  dfasyntax(R"..., '\n', 7752) = 0x025a0d15
[0x4022d1] memchr("   which must occur in the match"..., '\n', 1046) = 0x025a0903
[0x4022d1] memchr("   to find those strings, and th"..., '\n', 982) = 0x025a0944
[0x4022d1] memchr("   matches. */\nstatic void\nkwsmu"..., '\n', 917) = 0x025a0953
[0x4022d1] memchr("static void\nkwsmusts()\n{\n  struc"..., '\n', 902) = 0x025a095f
[0x4022d1] memchr("kwsmusts()\n{\n  struct dfamust *d"..., '\n', 890) = 0x025a096a
[0x4022d1] memchr("{\n  struct dfamust *dm;\n  char *"..., '\n', 879) = 0x025a096c
[0x4022d1] memchr("  struct dfamust *dm;\n  char *er"..., '\n', 877) = 0x025a0982
[0x4022d1] memchr("  char *err;\n\n  if (dfa_1.musts)"..., '\n', 855) = 0x025a098f
[0x4022d1] memchr("\n  if (dfa_1.musts)\n    {\n      "..., '\n', 842) = 0x025a0990
[0x4022d1] memchr("  if (dfa_1.musts)\n    {\n      k"..., '\n', 841) = 0x025a09a3
[0x4022d1] memchr("    {\n      kwsinit();\n      /* "..., '\n', 822) = 0x025a09a9
[0x4022d1] memchr("      kwsinit();\n      /* First,"..., '\n', 816) = 0x025a09ba
[0x4022d1] memchr("      /* First, we compile in th"..., '\n', 799) = 0x025a09f9
[0x4022d1] memchr("\t matches.  The kwset matcher wi"..., '\n', 736) = 0x025a0a2d
[0x4022d1] memchr("\t of the matching string that it"..., '\n', 684) = 0x025a0a5a
[0x4022d1] memchr("      for (dm = dfa_1.musts; dm;"..., '\n', 639) = 0x025a0a8a
[0x4022d1] memchr("\t{\n\t  if (!dm->exact)\n\t    conti"..., '\n', 591) = 0x025a0a8d
[0x4022d1] memchr("\t  if (!dm->exact)\n\t    continue"..., '\n', 588) = 0x025a0aa0
[0x4022d1] memchr("\t    continue;\n\t  ++lastexact;\n\t"..., '\n', 569) = 0x025a0aaf
[0x4022d1] memchr("\t  ++lastexact;\n\t  if ((err = kw"..., '\n', 554) = 0x025a0abf
[0x4022d1] memchr("\t  if ((err = kwsincr(kwset, dm-"..., '\n', 538) = 0x025a0aff
[0x4022d1] memchr("\t    fatal(err, 0);\n\t}\n      /* "..., '\n', 474) = 0x025a0b13
[0x4022d1] memchr("\t}\n      /* Now, we compile the "..., '\n', 454) = 0x025a0b16
[0x4022d1] memchr("      /* Now, we compile the sub"..., '\n', 451) = 0x025a0b50
[0x4022d1] memchr("\t the use of the regexp matcher."..., '\n', 393) = 0x025a0b75
[0x4022d1] memchr("      for (dm = dfa_1.musts; dm;"..., '\n', 356) = 0x025a0ba5
[0x4022d1] memchr("\t{\n\t  if (dm->exact)\n\t    contin"..., '\n', 308) = 0x025a0ba8
[0x4022d1] memchr("\t  if (dm->exact)\n\t    continue;"..., '\n', 305) = 0x025a0bba
[0x4022d1] memchr("\t    continue;\n\t  if ((err = kws"..., '\n', 287) = 0x025a0bc9
[0x4022d1] memchr("\t  if ((err = kwsincr(kwset, dm-"..., '\n', 272) = 0x025a0c09
[0x4022d1] memchr("\t    fatal(err, 0);\n\t}\n      if "..., '\n', 208) = 0x025a0c1d
[0x4022d1] memchr("\t}\n      if ((err = kwsprep(kwse"..., '\n', 188) = 0x025a0c20
[0x4022d1] memchr("      if ((err = kwsprep(kwset))"..., '\n', 185) = 0x025a0c47
[0x4022d1] memchr("\tfatal(err, 0);\n    }\n}\n\nstatic "..., '\n', 146) = 0x025a0c57
[0x4022d1] memchr("    }\n}\n\nstatic void\nGcompile(pa"..., '\n', 130) = 0x025a0c5d
[0x4022d1] memchr("}\n\nstatic void\nGcompile(pattern,"..., '\n', 124) = 0x025a0c5f
[0x4022d1] memchr("\nstatic void\nGcompile(pattern, s"..., '\n', 122) = 0x025a0c60
[0x4022d1] memchr("static void\nGcompile(pattern, si"..., '\n', 121) = 0x025a0c6c
[0x4022d1] memchr("Gcompile(pattern, size)\n     cha"..., '\n', 109) = 0x025a0c84
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 85) = 0x025a0c98
[0x4022d1] memchr("     size_t size;\n{\n#ifdef __STD"..., '\n', 65) = 0x025a0caa
[0x4022d1] memchr("{\n#ifdef __STDC__\n  const\n#endif"..., '\n', 47) = 0x025a0cac
[0x4022d1] memchr("#ifdef __STDC__\n  const\n#endif\n "..., '\n', 45) = 0x025a0cbc
[0x4022d1] memchr("  const\n#endif\n  char *err;\n\n  r"..., '\n', 29) = 0x025a0cc4
[0x4022d1] memchr("#endif\n  char *err;\n\n  re_set_sy"..., '\n', 21) = 0x025a0ccb
[0x4022d1] memchr("  char *err;\n\n  re_set_syntax(RE"..., '\n', 14) = 0x025a0cd8
[0x4022d1] memchr("\n  re_set_syntax(RE_SYNTAX_GREP "..., '\n', 1) = 0x025a0cd9
[0x4022d1] memchr("  re_set_syntax(RE_SYNTAX_GREP |"..., '\n', 0) = NULL
[0x4023cc] fwrite("10617:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  re_set_syntax(RE_SYNTAX_GREP |"..., 1, 60, 0x7f498147f260) = 60
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("  dfasyntax(RE_SYNTAX_GREP | RE_"..., 'I', 7733) = 0x025a0d3b
[0x40cdf3] memchr("ISTS_NOT_NEWLINE, match_icase);\n"..., '\n', 7696) = 0x025a0d5a
[0x4022d1] memchr("  dfasyntax(RE_SYNTAX_GREP | RE_"..., '\n', 0) = NULL
[0x4023cc] fwrite("10618:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  dfasyntax(RE_SYNTAX_GREP | RE_"..., 1, 69, 0x7f498147f260) = 69
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\n  if ((err = re_compile_pattern"..., 'I', 7664) = 0x025a0dc7
[0x40cdf3] memchr("In the match_words and match_lin"..., '\n', 7556) = 0x025a0e0b
[0x4022d1] memchr("\n  if ((err = re_compile_pattern"..., '\n', 103) = 0x025a0d5b
[0x4022d1] memchr("  if ((err = re_compile_pattern("..., '\n', 102) = 0x025a0d99
[0x4022d1] memchr("    fatal(err, 0);\n\n  dfainit(&d"..., '\n', 40) = 0x025a0dac
[0x4022d1] memchr("\n  dfainit(&dfa_1);\n\n  /* In the"..., '\n', 21) = 0x025a0dad
[0x4022d1] memchr("  dfainit(&dfa_1);\n\n  /* In the "..., '\n', 20) = 0x025a0dc0
[0x4022d1] memchr("\n  /* In the match_words and mat"..., '\n', 1) = 0x025a0dc1
[0x4022d1] memchr("  /* In the match_words and matc"..., '\n', 0) = NULL
[0x4023cc] fwrite("10625:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  /* In the match_words and matc"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     for the DFA matcher that wi"..., 'I', 7487) = 0x025a0f0b
[0x40cdf3] memchr("In the whole-word case, we use t"..., '\n', 7232) = 0x025a0f36
[0x4022d1] memchr("     for the DFA matcher that wi"..., '\n', 246) = 0x025a0e57
[0x4022d1] memchr("     Then if DFA succeeds we do "..., '\n', 170) = 0x025a0ea0
[0x4022d1] memchr("     to decide whether the match"..., '\n', 97) = 0x025a0ed9
[0x4022d1] memchr("  if (match_words || match_lines"..., '\n', 40) = 0x025a0efb
[0x4022d1] memchr("    {\n      /* In the whole-word"..., '\n', 6) = 0x025a0f01
[0x4022d1] memchr("      /* In the whole-word case,"..., '\n', 0) = NULL
[0x4023cc] fwrite("10631:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* In the whole-word case,"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., 'I', 7188) = 0x025a0f66
[0x40cdf3] memchr("In the whole-line case, we use t"..., '\n', 7141) = 0x025a0f91
[0x4022d1] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., '\n', 45) = 0x025a0f63
[0x4022d1] memchr("\t In the whole-line case, we use"..., '\n', 0) = NULL
[0x4023cc] fwrite("10633:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t In the whole-line case, we use"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., 'I', 7097) = 0x025a1298
[0x40cdf3] memchr("IX_EGREP);\n      dfasyntax(RE_SY"..., '\n', 6323) = 0x025a12a2
[0x4022d1] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., '\n', 741) = 0x025a0fa4
[0x4022d1] memchr("\t BUG: Using [A-Za-z_] is locale"..., '\n', 722) = 0x025a0fd4
[0x4022d1] memchr("\n      char *n = malloc(size + 5"..., '\n', 674) = 0x025a0fd5
[0x4022d1] memchr("      char *n = malloc(size + 50"..., '\n', 673) = 0x025a0ff8
[0x4022d1] memchr("      int i = 0;\n\n      strcpy(n"..., '\n', 638) = 0x025a1009
[0x4022d1] memchr("\n      strcpy(n, "");\n\n      if "..., '\n', 621) = 0x025a100a
[0x4022d1] memchr("      strcpy(n, "");\n\n      if ("..., '\n', 620) = 0x025a101f
[0x4022d1] memchr("\n      if (match_lines)\n\tstrcpy("..., '\n', 599) = 0x025a1020
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 598) = 0x025a1037
[0x4022d1] memchr("\tstrcpy(n, "^\\\\(");\n      if (ma"..., '\n', 575) = 0x025a104b
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 555) = 0x025a1062
[0x4022d1] memchr("\tstrcpy(n, "\\\\(^\\\\|[^0-9A-Za-z_]"..., '\n', 532) = 0x025a108c
[0x4022d1] memchr("\n      i = strlen(n);\n      bcop"..., '\n', 490) = 0x025a108d
[0x4022d1] memchr("      i = strlen(n);\n      bcopy"..., '\n', 489) = 0x025a10a2
[0x4022d1] memchr("      bcopy(pattern, n + i, size"..., '\n', 468) = 0x025a10c5
[0x4022d1] memchr("      i += size;\n\n      if (matc"..., '\n', 433) = 0x025a10d6
[0x4022d1] memchr("\n      if (match_words)\n\tstrcpy("..., '\n', 416) = 0x025a10d7
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 415) = 0x025a10ee
[0x4022d1] memchr("\tstrcpy(n + i, "\\\\)\\\\([^0-9A-Za-"..., '\n', 392) = 0x025a111c
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 346) = 0x025a1133
[0x4022d1] memchr("\tstrcpy(n + i, "\\\\)$");\n\n      i"..., '\n', 323) = 0x025a114b
[0x4022d1] memchr("\n      i += strlen(n + i);\n     "..., '\n', 299) = 0x025a114c
[0x4022d1] memchr("      i += strlen(n + i);\n      "..., '\n', 298) = 0x025a1166
[0x4022d1] memchr("      dfacomp(n, i, &dfa_1, 1);\n"..., '\n', 272) = 0x025a1186
[0x4022d1] memchr("    }\n  else\n    dfacomp(pattern"..., '\n', 240) = 0x025a118c
[0x4022d1] memchr("  else\n    dfacomp(pattern, size"..., '\n', 234) = 0x025a1193
[0x4022d1] memchr("    dfacomp(pattern, size, &dfa_"..., '\n', 227) = 0x025a11ba
[0x4022d1] memchr("\n  kwsmusts();\n}\n\nstatic void\nEc"..., '\n', 188) = 0x025a11bb
[0x4022d1] memchr("  kwsmusts();\n}\n\nstatic void\nEco"..., '\n', 187) = 0x025a11c9
[0x4022d1] memchr("}\n\nstatic void\nEcompile(pattern,"..., '\n', 173) = 0x025a11cb
[0x4022d1] memchr("\nstatic void\nEcompile(pattern, s"..., '\n', 171) = 0x025a11cc
[0x4022d1] memchr("static void\nEcompile(pattern, si"..., '\n', 170) = 0x025a11d8
[0x4022d1] memchr("Ecompile(pattern, size)\n     cha"..., '\n', 158) = 0x025a11f0
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 134) = 0x025a1204
[0x4022d1] memchr("     size_t size;\n{\n#ifdef __STD"..., '\n', 114) = 0x025a1216
[0x4022d1] memchr("{\n#ifdef __STDC__\n  const\n#endif"..., '\n', 96) = 0x025a1218
[0x4022d1] memchr("#ifdef __STDC__\n  const\n#endif\n "..., '\n', 94) = 0x025a1228
[0x4022d1] memchr("  const\n#endif\n  char *err;\n\n  i"..., '\n', 78) = 0x025a1230
[0x4022d1] memchr("#endif\n  char *err;\n\n  if (strcm"..., '\n', 70) = 0x025a1237
[0x4022d1] memchr("  char *err;\n\n  if (strcmp(match"..., '\n', 63) = 0x025a1244
[0x4022d1] memchr("\n  if (strcmp(matcher, "posix-eg"..., '\n', 50) = 0x025a1245
[0x4022d1] memchr("  if (strcmp(matcher, "posix-egr"..., '\n', 49) = 0x025a1270
[0x4022d1] memchr("    {\n      re_set_syntax(RE_SYN"..., '\n', 6) = 0x025a1276
[0x4022d1] memchr("      re_set_syntax(RE_SYNTAX_PO"..., '\n', 0) = NULL
[0x4023cc] fwrite("10677:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      re_set_syntax(RE_SYNTAX_PO"..., 1, 44, 0x7f498147f260) = 44
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("      dfasyntax(RE_SYNTAX_POSIX_"..., 'I', 6312) = 0x025a12c0
[0x40cdf3] memchr("IX_EGREP, match_icase);\n    }\n  "..., '\n', 6283) = 0x025a12d7
[0x4022d1] memchr("      dfasyntax(RE_SYNTAX_POSIX_"..., '\n', 0) = NULL
[0x4023cc] fwrite("10678:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      dfasyntax(RE_SYNTAX_POSIX_"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("    }\n  else\n    {\n      re_set_"..., 'I', 6259) = 0x025a13b2
[0x40cdf3] memchr("In the match_words and match_lin"..., '\n', 6041) = 0x025a13f6
[0x4022d1] memchr("    }\n  else\n    {\n      re_set_"..., '\n', 213) = 0x025a12dd
[0x4022d1] memchr("  else\n    {\n      re_set_syntax"..., '\n', 207) = 0x025a12e4
[0x4022d1] memchr("    {\n      re_set_syntax(RE_SYN"..., '\n', 200) = 0x025a12ea
[0x4022d1] memchr("      re_set_syntax(RE_SYNTAX_EG"..., '\n', 194) = 0x025a1310
[0x4022d1] memchr("      dfasyntax(RE_SYNTAX_EGREP,"..., '\n', 156) = 0x025a133f
[0x4022d1] memchr("    }\n\n  if ((err = re_compile_p"..., '\n', 109) = 0x025a1345
[0x4022d1] memchr("\n  if ((err = re_compile_pattern"..., '\n', 103) = 0x025a1346
[0x4022d1] memchr("  if ((err = re_compile_pattern("..., '\n', 102) = 0x025a1384
[0x4022d1] memchr("    fatal(err, 0);\n\n  dfainit(&d"..., '\n', 40) = 0x025a1397
[0x4022d1] memchr("\n  dfainit(&dfa_1);\n\n  /* In the"..., '\n', 21) = 0x025a1398
[0x4022d1] memchr("  dfainit(&dfa_1);\n\n  /* In the "..., '\n', 20) = 0x025a13ab
[0x4022d1] memchr("\n  /* In the match_words and mat"..., '\n', 1) = 0x025a13ac
[0x4022d1] memchr("  /* In the match_words and matc"..., '\n', 0) = NULL
[0x4023cc] fwrite("10691:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  /* In the match_words and matc"..., 1, 74, 0x7f498147f260) = 74
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("     for the DFA matcher that wi"..., 'I', 5972) = 0x025a14f6
[0x40cdf3] memchr("In the whole-word case, we use t"..., '\n', 5717) = 0x025a1521
[0x4022d1] memchr("     for the DFA matcher that wi"..., '\n', 246) = 0x025a1442
[0x4022d1] memchr("     Then if DFA succeeds we do "..., '\n', 170) = 0x025a148b
[0x4022d1] memchr("     to decide whether the match"..., '\n', 97) = 0x025a14c4
[0x4022d1] memchr("  if (match_words || match_lines"..., '\n', 40) = 0x025a14e6
[0x4022d1] memchr("    {\n      /* In the whole-word"..., '\n', 6) = 0x025a14ec
[0x4022d1] memchr("      /* In the whole-word case,"..., '\n', 0) = NULL
[0x4023cc] fwrite("10697:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* In the whole-word case,"..., 1, 53, 0x7f498147f260) = 53
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., 'I', 5673) = 0x025a1551
[0x40cdf3] memchr("In the whole-line case, we use t"..., '\n', 5626) = 0x025a157c
[0x4022d1] memchr("\t (^|[^A-Za-z_])(userpattern)([^"..., '\n', 45) = 0x025a154e
[0x4022d1] memchr("\t In the whole-line case, we use"..., '\n', 0) = NULL
[0x4023cc] fwrite("10699:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t In the whole-line case, we use"..., 1, 46, 0x7f498147f260) = 46
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., 'I', 5582) = 0x025a18a9
[0x40cdf3] memchr("IN-DEAD\n\t\t\t\t    Q@#%!# library i"..., '\n', 4770) = 0x025a18b0
[0x4022d1] memchr("\t ^(userpattern)$.\n\t BUG: Using "..., '\n', 740) = 0x025a158f
[0x4022d1] memchr("\t BUG: Using [A-Za-z_] is locale"..., '\n', 721) = 0x025a15bf
[0x4022d1] memchr("\n      char *n = malloc(size + 5"..., '\n', 673) = 0x025a15c0
[0x4022d1] memchr("      char *n = malloc(size + 50"..., '\n', 672) = 0x025a15e3
[0x4022d1] memchr("      int i = 0;\n\n      strcpy(n"..., '\n', 637) = 0x025a15f4
[0x4022d1] memchr("\n      strcpy(n, "");\n\n      if "..., '\n', 620) = 0x025a15f5
[0x4022d1] memchr("      strcpy(n, "");\n\n      if ("..., '\n', 619) = 0x025a160a
[0x4022d1] memchr("\n      if (match_lines)\n\tstrcpy("..., '\n', 598) = 0x025a160b
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 597) = 0x025a1622
[0x4022d1] memchr("\tstrcpy(n, "^(");\n      if (matc"..., '\n', 574) = 0x025a1634
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 556) = 0x025a164b
[0x4022d1] memchr("\tstrcpy(n, "(^|[^0-9A-Za-z_])(")"..., '\n', 533) = 0x025a166d
[0x4022d1] memchr("\n      i = strlen(n);\n      bcop"..., '\n', 499) = 0x025a166e
[0x4022d1] memchr("      i = strlen(n);\n      bcopy"..., '\n', 498) = 0x025a1683
[0x4022d1] memchr("      bcopy(pattern, n + i, size"..., '\n', 477) = 0x025a16a6
[0x4022d1] memchr("      i += size;\n\n      if (matc"..., '\n', 442) = 0x025a16b7
[0x4022d1] memchr("\n      if (match_words)\n\tstrcpy("..., '\n', 425) = 0x025a16b8
[0x4022d1] memchr("      if (match_words)\n\tstrcpy(n"..., '\n', 424) = 0x025a16cf
[0x4022d1] memchr("\tstrcpy(n + i, ")([^0-9A-Za-z_]|"..., '\n', 401) = 0x025a16f5
[0x4022d1] memchr("      if (match_lines)\n\tstrcpy(n"..., '\n', 363) = 0x025a170c
[0x4022d1] memchr("\tstrcpy(n + i, ")$");\n\n      i +"..., '\n', 340) = 0x025a1722
[0x4022d1] memchr("\n      i += strlen(n + i);\n     "..., '\n', 318) = 0x025a1723
[0x4022d1] memchr("      i += strlen(n + i);\n      "..., '\n', 317) = 0x025a173d
[0x4022d1] memchr("      dfacomp(n, i, &dfa_1, 1);\n"..., '\n', 291) = 0x025a175d
[0x4022d1] memchr("    }\n  else\n    dfacomp(pattern"..., '\n', 259) = 0x025a1763
[0x4022d1] memchr("  else\n    dfacomp(pattern, size"..., '\n', 253) = 0x025a176a
[0x4022d1] memchr("    dfacomp(pattern, size, &dfa_"..., '\n', 246) = 0x025a1791
[0x4022d1] memchr("\n  kwsmusts();\n}\n\nstatic char *\n"..., '\n', 207) = 0x025a1792
[0x4022d1] memchr("  kwsmusts();\n}\n\nstatic char *\nE"..., '\n', 206) = 0x025a17a0
[0x4022d1] memchr("}\n\nstatic char *\nEGexecute(buf, "..., '\n', 192) = 0x025a17a2
[0x4022d1] memchr("\nstatic char *\nEGexecute(buf, si"..., '\n', 190) = 0x025a17a3
[0x4022d1] memchr("static char *\nEGexecute(buf, siz"..., '\n', 189) = 0x025a17b1
[0x4022d1] memchr("EGexecute(buf, size, endp)\n     "..., '\n', 175) = 0x025a17cc
[0x4022d1] memchr("     char *buf;\n     size_t size"..., '\n', 148) = 0x025a17dc
[0x4022d1] memchr("     size_t size;\n     char **en"..., '\n', 132) = 0x025a17ee
[0x4022d1] memchr("     char **endp;\n{\n  register c"..., '\n', 114) = 0x025a1800
[0x4022d1] memchr("{\n  register char *buflim, *beg,"..., '\n', 96) = 0x025a1802
[0x4022d1] memchr("  register char *buflim, *beg, *"..., '\n', 94) = 0x025a182d
[0x4022d1] memchr("  int backref, start, len;\n  str"..., '\n', 51) = 0x025a1848
[0x4022d1] memchr("  struct kwsmatch kwsm;\n  static"..., '\n', 24) = 0x025a1860
[0x4022d1] memchr("  static struct re_registers reg"..., '\n', 0) = NULL
[0x4023cc] fwrite("10740:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("  static struct re_registers reg"..., 1, 80, 0x7f498147f260) = 80
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t\t\t\t    Q@#%!# library interface"..., 'I', 4762) = 0x025a1d9a
[0x40cdf3] memchr("If we've made it to this point, "..., '\n', 3505) = 0x025a1dd1
[0x4022d1] memchr("\t\t\t\t    Q@#%!# library interface"..., '\n', 1248) = 0x025a18e1
[0x4022d1] memchr("\n  buflim = buf + size;\n\n  for ("..., '\n', 1199) = 0x025a18e2
[0x4022d1] memchr("  buflim = buf + size;\n\n  for (b"..., '\n', 1198) = 0x025a18f9
[0x4022d1] memchr("\n  for (beg = end = buf; end < b"..., '\n', 1175) = 0x025a18fa
[0x4022d1] memchr("  for (beg = end = buf; end < bu"..., '\n', 1174) = 0x025a192f
[0x4022d1] memchr("    {\n      if (kwset)\n\t{\n\t  /* "..., '\n', 1121) = 0x025a1935
[0x4022d1] memchr("      if (kwset)\n\t{\n\t  /* Find a"..., '\n', 1115) = 0x025a1946
[0x4022d1] memchr("\t{\n\t  /* Find a possible match u"..., '\n', 1098) = 0x025a1949
[0x4022d1] memchr("\t  /* Find a possible match usin"..., '\n', 1095) = 0x025a1981
[0x4022d1] memchr("\t  beg = kwsexec(kwset, beg, buf"..., '\n', 1039) = 0x025a19b4
[0x4022d1] memchr("\t  if (!beg)\n\t    goto failure;\n"..., '\n', 988) = 0x025a19c1
[0x4022d1] memchr("\t    goto failure;\n\t  /* Narrow "..., '\n', 975) = 0x025a19d4
[0x4022d1] memchr("\t  /* Narrow down to the line co"..., '\n', 956) = 0x025a1a10
[0x4022d1] memchr("\t     run it through DFA. */\n\t  "..., '\n', 896) = 0x025a1a2d
[0x4022d1] memchr("\t  end = memchr(beg, '\\n', bufli"..., '\n', 867) = 0x025a1a57
[0x4022d1] memchr("\t  if (!end)\n\t    end = buflim;\n"..., '\n', 825) = 0x025a1a64
[0x4022d1] memchr("\t    end = buflim;\n\t  while (beg"..., '\n', 812) = 0x025a1a77
[0x4022d1] memchr("\t  while (beg > buf && beg[-1] !"..., '\n', 793) = 0x025a1a9f
[0x4022d1] memchr("\t    --beg;\n\t  save = *end;\n\t  i"..., '\n', 753) = 0x025a1aab
[0x4022d1] memchr("\t  save = *end;\n\t  if (kwsm.inde"..., '\n', 741) = 0x025a1abb
[0x4022d1] memchr("\t  if (kwsm.index < lastexact)\n\t"..., '\n', 725) = 0x025a1ada
[0x4022d1] memchr("\t    goto success;\n\t  if (!dfaex"..., '\n', 694) = 0x025a1aed
[0x4022d1] memchr("\t  if (!dfaexec(&dfa_1, beg, end"..., '\n', 675) = 0x025a1b28
[0x4022d1] memchr("\t    {\n\t      *end = save;\n\t    "..., '\n', 616) = 0x025a1b2f
[0x4022d1] memchr("\t      *end = save;\n\t      conti"..., '\n', 609) = 0x025a1b43
[0x4022d1] memchr("\t      continue;\n\t    }\n\t  *end "..., '\n', 589) = 0x025a1b54
[0x4022d1] memchr("\t    }\n\t  *end = save;\n\t  /* Suc"..., '\n', 572) = 0x025a1b5b
[0x4022d1] memchr("\t  *end = save;\n\t  /* Successful"..., '\n', 565) = 0x025a1b6b
[0x4022d1] memchr("\t  /* Successful, no backreferen"..., '\n', 549) = 0x025a1b9f
[0x4022d1] memchr("\t  if (!backref)\n\t    goto succe"..., '\n', 497) = 0x025a1bb0
[0x4022d1] memchr("\t    goto success;\n\t}\n      else"..., '\n', 480) = 0x025a1bc3
[0x4022d1] memchr("\t}\n      else\n\t{\n\t  /* No good f"..., '\n', 461) = 0x025a1bc6
[0x4022d1] memchr("      else\n\t{\n\t  /* No good fixe"..., '\n', 458) = 0x025a1bd1
[0x4022d1] memchr("\t{\n\t  /* No good fixed strings; "..., '\n', 447) = 0x025a1bd4
[0x4022d1] memchr("\t  /* No good fixed strings; sta"..., '\n', 444) = 0x025a1c04
[0x4022d1] memchr("\t  save = *buflim;\n\t  beg = dfae"..., '\n', 396) = 0x025a1c17
[0x4022d1] memchr("\t  beg = dfaexec(&dfa_1, beg, bu"..., '\n', 377) = 0x025a1c56
[0x4022d1] memchr("\t  *buflim = save;\n\t  if (!beg)\n"..., '\n', 314) = 0x025a1c69
[0x4022d1] memchr("\t  if (!beg)\n\t    goto failure;\n"..., '\n', 295) = 0x025a1c76
[0x4022d1] memchr("\t    goto failure;\n\t  /* Narrow "..., '\n', 282) = 0x025a1c89
[0x4022d1] memchr("\t  /* Narrow down to the line we"..., '\n', 263) = 0x025a1cb7
[0x4022d1] memchr("\t  end = memchr(beg, '\\n', bufli"..., '\n', 217) = 0x025a1ce1
[0x4022d1] memchr("\t  if (!end)\n\t    end = buflim;\n"..., '\n', 175) = 0x025a1cee
[0x4022d1] memchr("\t    end = buflim;\n\t  while (beg"..., '\n', 162) = 0x025a1d01
[0x4022d1] memchr("\t  while (beg > buf && beg[-1] !"..., '\n', 143) = 0x025a1d29
[0x4022d1] memchr("\t    --beg;\n\t  /* Successful, no"..., '\n', 103) = 0x025a1d35
[0x4022d1] memchr("\t  /* Successful, no backreferen"..., '\n', 91) = 0x025a1d69
[0x4022d1] memchr("\t  if (!backref)\n\t    goto succe"..., '\n', 39) = 0x025a1d7a
[0x4022d1] memchr("\t    goto success;\n\t}\n      /* I"..., '\n', 22) = 0x025a1d8d
[0x4022d1] memchr("\t}\n      /* If we've made it to "..., '\n', 3) = 0x025a1d90
[0x4022d1] memchr("      /* If we've made it to thi"..., '\n', 0) = NULL
[0x4023cc] fwrite("10791:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("      /* If we've made it to thi"..., 1, 65, 0x7f498147f260) = 65
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t a probable match, and we need "..., 'I', 3449) = 0x025a1efa
[0x40cdf3] memchr("If -w, check if the match aligns"..., '\n', 3153) = 0x025a1f30
[0x4022d1] memchr("\t a probable match, and we need "..., '\n', 290) = 0x025a1e0d
[0x4022d1] memchr("      regex.not_eol = 0;\n      i"..., '\n', 230) = 0x025a1e26
[0x4022d1] memchr("      if ((start = re_search(&re"..., '\n', 205) = 0x025a1e77
[0x4022d1] memchr("\t{\n\t  len = regs.end[0] - start;"..., '\n', 124) = 0x025a1e7a
[0x4022d1] memchr("\t  len = regs.end[0] - start;\n\t "..., '\n', 121) = 0x025a1e98
[0x4022d1] memchr("\t  if (!match_lines && !match_wo"..., '\n', 91) = 0x025a1ee0
[0x4022d1] memchr("\t    goto success;\n\t  /* If -w, "..., '\n', 19) = 0x025a1ef3
[0x4022d1] memchr("\t  /* If -w, check if the match "..., '\n', 0) = NULL
[0x4023cc] fwrite("10799:", 1, 6, 0x7f498147f260) = 6
[0x4024d9] fwrite("\t  /* If -w, check if the match "..., 1, 61, 0x7f498147f260) = 61
[0x4024e8] ferror(0x7f498147f260)                = 0
[0x40bc2b] memchr("\t     We do this iteratively bec"..., 'I', 3098) = NULL
[0x4022d1] memchr("\t     We do this iteratively bec"..., '\n', 3098) = 0x025a1f56
[0x4022d1] memchr("\t     (a) the line may contain m"..., '\n', 3060) = 0x025a1fa1
[0x4022d1] memchr("\t     (b) Several alternatives i"..., '\n', 2985) = 0x025a1fe9
[0x4022d1] memchr("\t     point, and we may need to "..., '\n', 2913) = 0x025a202f
[0x4022d1] memchr("\t     boundary. */\n\t  if (match_"..., '\n', 2843) = 0x025a2042
[0x4022d1] memchr("\t  if (match_words)\n\t    while ("..., '\n', 2824) = 0x025a2056
[0x4022d1] memchr("\t    while (start >= 0)\n\t      {"..., '\n', 2804) = 0x025a206e
[0x4022d1] memchr("\t      {\n\t\tif ((start == 0 || !W"..., '\n', 2780) = 0x025a2077
[0x4022d1] memchr("\t\tif ((start == 0 || !WCHAR(beg["..., '\n', 2771) = 0x025a20a4
[0x4022d1] memchr("\t\t    && (len == end - beg || !W"..., '\n', 2726) = 0x025a20dd
[0x4022d1] memchr("\t\t  goto success;\n\t\tif (len > 0)"..., '\n', 2669) = 0x025a20ef
[0x4022d1] memchr("\t\tif (len > 0)\n\t\t  {\n\t\t    /* Tr"..., '\n', 2651) = 0x025a20fe
[0x4022d1] memchr("\t\t  {\n\t\t    /* Try a shorter len"..., '\n', 2636) = 0x025a2104
[0x4022d1] memchr("\t\t    /* Try a shorter length an"..., '\n', 2630) = 0x025a2141
[0x4022d1] memchr("\t\t    --len;\n\t\t    regex.not_eol"..., '\n', 2569) = 0x025a214e
[0x4022d1] memchr("\t\t    regex.not_eol = 1;\n\t\t    l"..., '\n', 2556) = 0x025a2167
[0x4022d1] memchr("\t\t    len = re_match(&regex, beg"..., '\n', 2531) = 0x025a21a5
[0x4022d1] memchr("\t\t  }\n\t\tif (len <= 0)\n\t\t  {\n\t\t  "..., '\n', 2469) = 0x025a21ab
[0x4022d1] memchr("\t\tif (len <= 0)\n\t\t  {\n\t\t    /* T"..., '\n', 2463) = 0x025a21bb
[0x4022d1] memchr("\t\t  {\n\t\t    /* Try looking furth"..., '\n', 2447) = 0x025a21c1
[0x4022d1] memchr("\t\t    /* Try looking further on."..., '\n', 2441) = 0x025a21e5
[0x4022d1] memchr("\t\t    if (start == end - beg)\n\t\t"..., '\n', 2405) = 0x025a2203
[0x4022d1] memchr("\t\t      break;\n\t\t    ++start;\n\t\t"..., '\n', 2375) = 0x025a2212
[0x4022d1] memchr("\t\t    ++start;\n\t\t    regex.not_e"..., '\n', 2360) = 0x025a2221
[0x4022d1] memchr("\t\t    regex.not_eol = 0;\n\t\t    s"..., '\n', 2345) = 0x025a223a
[0x4022d1] memchr("\t\t    start = re_search(&regex, "..., '\n', 2320) = 0x025a226a
[0x4022d1] memchr("\t\t\t\t      start, end - beg - sta"..., '\n', 2272) = 0x025a2296
[0x4022d1] memchr("\t\t    len = regs.end[0] - start;"..., '\n', 2228) = 0x025a22b7
[0x4022d1] memchr("\t\t  }\n\t      }\n\t}\n    }\n\n failur"..., '\n', 2195) = 0x025a22bd
[0x4022d1] memchr("\t      }\n\t}\n    }\n\n failure:\n  r"..., '\n', 2189) = 0x025a22c6
[0x4022d1] memchr("\t}\n    }\n\n failure:\n  return 0;\n"..., '\n', 2180) = 0x025a22c9
[0x4022d1] memchr("    }\n\n failure:\n  return 0;\n\n s"..., '\n', 2177) = 0x025a22cf
[0x4022d1] memchr("\n failure:\n  return 0;\n\n success"..., '\n', 2171) = 0x025a22d0
[0x4022d1] memchr(" failure:\n  return 0;\n\n success:"..., '\n', 2170) = 0x025a22da
[0x4022d1] memchr("  return 0;\n\n success:\n  *endp ="..., '\n', 2160) = 0x025a22e6
[0x4022d1] memchr("\n success:\n  *endp = end < bufli"..., '\n', 2148) = 0x025a22e7
[0x4022d1] memchr(" success:\n  *endp = end < buflim"..., '\n', 2147) = 0x025a22f1
[0x4022d1] memchr("  *endp = end < buflim ? end + 1"..., '\n', 2137) = 0x025a2319
[0x4022d1] memchr("  return beg;\n}\n\nstatic void\nFco"..., '\n', 2097) = 0x025a2327
[0x4022d1] memchr("}\n\nstatic void\nFcompile(pattern,"..., '\n', 2083) = 0x025a2329
[0x4022d1] memchr("\nstatic void\nFcompile(pattern, s"..., '\n', 2081) = 0x025a232a
[0x4022d1] memchr("static void\nFcompile(pattern, si"..., '\n', 2080) = 0x025a2336
[0x4022d1] memchr("Fcompile(pattern, size)\n     cha"..., '\n', 2068) = 0x025a234e
[0x4022d1] memchr("     char *pattern;\n     size_t "..., '\n', 2044) = 0x025a2362
[0x4022d1] memchr("     size_t size;\n{\n  char *beg,"..., '\n', 2024) = 0x025a2374
[0x4022d1] memchr("{\n  char *beg, *lim, *err;\n\n  kw"..., '\n', 2006) = 0x025a2376
[0x4022d1] memchr("  char *beg, *lim, *err;\n\n  kwsi"..., '\n', 2004) = 0x025a238f
[0x4022d1] memchr("\n  kwsinit();\n  beg = pattern;\n "..., '\n', 1979) = 0x025a2390
[0x4022d1] memchr("  kwsinit();\n  beg = pattern;\n  "..., '\n', 1978) = 0x025a239d
[0x4022d1] memchr("  beg = pattern;\n  do\n    {\n    "..., '\n', 1965) = 0x025a23ae
[0x4022d1] memchr("  do\n    {\n      for (lim = beg;"..., '\n', 1948) = 0x025a23b3
[0x4022d1] memchr("    {\n      for (lim = beg; lim "..., '\n', 1943) = 0x025a23b9
[0x4022d1] memchr("      for (lim = beg; lim < patt"..., '\n', 1937) = 0x025a23fc
[0x4022d1] memchr("\t;\n      if ((err = kwsincr(kwse"..., '\n', 1870) = 0x025a23ff
[0x4022d1] memchr("      if ((err = kwsincr(kwset, "..., '\n', 1867) = 0x025a2436
[0x4022d1] memchr("\tfatal(err, 0);\n      if (lim < "..., '\n', 1812) = 0x025a2446
[0x4022d1] memchr("      if (lim < pattern + size)\n"..., '\n', 1796) = 0x025a2466
[0x4022d1] memchr("\t++lim;\n      beg = lim;\n    }\n "..., '\n', 1764) = 0x025a246e
[0x4022d1] memchr("      beg = lim;\n    }\n  while ("..., '\n', 1756) = 0x025a247f
[0x4022d1] memchr("    }\n  while (beg < pattern + s"..., '\n', 1739) = 0x025a2485
[0x4022d1] memchr("  while (beg < pattern + size);\n"..., '\n', 1733) = 0x025a24a5
[0x4022d1] memchr("\n  if ((err = kwsprep(kwset)) !="..., '\n', 1701) = 0x025a24a6
[0x4022d1] memchr("  if ((err = kwsprep(kwset)) != "..., '\n', 1700) = 0x025a24c9
[0x4022d1] memchr("    fatal(err, 0);\n}\n\nstatic cha"..., '\n', 1665) = 0x025a24dc
[0x4022d1] memchr("}\n\nstatic char *\nFexecute(buf, s"..., '\n', 1646) = 0x025a24de
[0x4022d1] memchr("\nstatic char *\nFexecute(buf, siz"..., '\n', 1644) = 0x025a24df
[0x4022d1] memchr("static char *\nFexecute(buf, size"..., '\n', 1643) = 0x025a24ed
[0x4022d1] memchr("Fexecute(buf, size, endp)\n     c"..., '\n', 1629) = 0x025a2507
[0x4022d1] memchr("     char *buf;\n     size_t size"..., '\n', 1603) = 0x025a2517
[0x4022d1] memchr("     size_t size;\n     char **en"..., '\n', 1587) = 0x025a2529
[0x4022d1] memchr("     char **endp;\n{\n  register c"..., '\n', 1569) = 0x025a253b
[0x4022d1] memchr("{\n  register char *beg, *try, *e"..., '\n', 1551) = 0x025a253d
[0x4022d1] memchr("  register char *beg, *try, *end"..., '\n', 1549) = 0x025a255f
[0x4022d1] memchr("  register size_t len;\n  struct "..., '\n', 1515) = 0x025a2576
[0x4022d1] memchr("  struct kwsmatch kwsmatch;\n\n  f"..., '\n', 1492) = 0x025a2592
[0x4022d1] memchr("\n  for (beg = buf; beg <= buf + "..., '\n', 1464) = 0x025a2593
[0x4022d1] memchr("  for (beg = buf; beg <= buf + s"..., '\n', 1463) = 0x025a25bf
[0x4022d1] memchr("    {\n      if (!(beg = kwsexec("..., '\n', 1419) = 0x025a25c5
[0x4022d1] memchr("      if (!(beg = kwsexec(kwset,"..., '\n', 1413) = 0x025a260a
[0x4022d1] memchr("\treturn 0;\n      len = kwsmatch."..., '\n', 1344) = 0x025a2615
[0x4022d1] memchr("      len = kwsmatch.size[0];\n  "..., '\n', 1333) = 0x025a2633
[0x4022d1] memchr("      if (match_lines)\n\t{\n\t  if "..., '\n', 1303) = 0x025a264a
[0x4022d1] memchr("\t{\n\t  if (beg > buf && beg[-1] !"..., '\n', 1280) = 0x025a264d
[0x4022d1] memchr("\t  if (beg > buf && beg[-1] != '"..., '\n', 1277) = 0x025a2672
[0x4022d1] memchr("\t    continue;\n\t  if (beg + len "..., '\n', 1240) = 0x025a2681
[0x4022d1] memchr("\t  if (beg + len < buf + size &&"..., '\n', 1225) = 0x025a26b4
[0x4022d1] memchr("\t    continue;\n\t  goto success;\n"..., '\n', 1174) = 0x025a26c3
[0x4022d1] memchr("\t  goto success;\n\t}\n      else i"..., '\n', 1159) = 0x025a26d4
[0x4022d1] memchr("\t}\n      else if (match_words)\n\t"..., '\n', 1142) = 0x025a26d7
[0x4022d1] memchr("      else if (match_words)\n\tfor"..., '\n', 1139) = 0x025a26f3
[0x4022d1] memchr("\tfor (try = beg; len && try;)\n\t "..., '\n', 1111) = 0x025a2711
[0x4022d1] memchr("\t  {\n\t    if (try > buf && WCHAR"..., '\n', 1081) = 0x025a2716
[0x4022d1] memchr("\t    if (try > buf && WCHAR((uns"..., '\n', 1076) = 0x025a274c
[0x4022d1] memchr("\t      break;\n\t    if (try + len"..., '\n', 1022) = 0x025a275a
[0x4022d1] memchr("\t    if (try + len < buf + size "..., '\n', 1008) = 0x025a279e
[0x4022d1] memchr("\t      {\n\t\ttry = kwsexec(kwset, "..., '\n', 940) = 0x025a27a7
[0x4022d1] memchr("\t\ttry = kwsexec(kwset, beg, --le"..., '\n', 931) = 0x025a27d6
[0x4022d1] memchr("\t\tlen = kwsmatch.size[0];\n\t     "..., '\n', 884) = 0x025a27f0
[0x4022d1] memchr("\t      }\n\t    else\n\t      goto s"..., '\n', 858) = 0x025a27f9
[0x4022d1] memchr("\t    else\n\t      goto success;\n\t"..., '\n', 849) = 0x025a2803
[0x4022d1] memchr("\t      goto success;\n\t  }\n      "..., '\n', 839) = 0x025a2818
[0x4022d1] memchr("\t  }\n      else\n\tgoto success;\n "..., '\n', 818) = 0x025a281d
[0x4022d1] memchr("      else\n\tgoto success;\n    }\n"..., '\n', 813) = 0x025a2828
[0x4022d1] memchr("\tgoto success;\n    }\n\n  return 0"..., '\n', 802) = 0x025a2837
[0x4022d1] memchr("    }\n\n  return 0;\n\n success:\n  "..., '\n', 787) = 0x025a283d
[0x4022d1] memchr("\n  return 0;\n\n success:\n  if ((e"..., '\n', 781) = 0x025a283e
[0x4022d1] memchr("  return 0;\n\n success:\n  if ((en"..., '\n', 780) = 0x025a284a
[0x4022d1] memchr("\n success:\n  if ((end = memchr(b"..., '\n', 768) = 0x025a284b
[0x4022d1] memchr(" success:\n  if ((end = memchr(be"..., '\n', 767) = 0x025a2855
[0x4022d1] memchr("  if ((end = memchr(beg + len, '"..., '\n', 757) = 0x025a289d
[0x4022d1] memchr("    ++end;\n  else\n    end = buf "..., '\n', 685) = 0x025a28a8
[0x4022d1] memchr("  else\n    end = buf + size;\n  *"..., '\n', 674) = 0x025a28af
[0x4022d1] memchr("    end = buf + size;\n  *endp = "..., '\n', 667) = 0x025a28c5
[0x4022d1] memchr("  *endp = end;\n  while (beg > bu"..., '\n', 645) = 0x025a28d4
[0x4022d1] memchr("  while (beg > buf && beg[-1] !="..., '\n', 630) = 0x025a28fb
[0x4022d1] memchr("    --beg;\n  return beg;\n}\n\nif ("..., '\n', 591) = 0x025a2906
[0x4022d1] memchr("  return beg;\n}\n\nif (out)\nif (go"..., '\n', 580) = 0x025a2914
[0x4022d1] memchr("}\n\nif (out)\nif (gout)\nif (gsth)\n"..., '\n', 566) = 0x025a2916
[0x4022d1] memchr("\nif (out)\nif (gout)\nif (gsth)\nif"..., '\n', 564) = 0x025a2917
[0x4022d1] memchr("if (out)\nif (gout)\nif (gsth)\nif "..., '\n', 563) = 0x025a2920
[0x4022d1] memchr("if (gout)\nif (gsth)\nif out\nif go"..., '\n', 554) = 0x025a292a
[0x4022d1] memchr("if (gsth)\nif out\nif gout\nif agou"..., '\n', 544) = 0x025a2934
[0x4022d1] memchr("if out\nif gout\nif agout\nif agout"..., '\n', 534) = 0x025a293b
[0x4022d1] memchr("if gout\nif agout\nif agout end = "..., '\n', 527) = 0x025a2943
[0x4022d1] memchr("if agout\nif agout end = buf + si"..., '\n', 519) = 0x025a294c
[0x4022d1] memchr("if agout end = buf + size;\nif ao"..., '\n', 510) = 0x025a2967
[0x4022d1] memchr("if aout\nif ag\nif g\nif a\n\nswswsif"..., '\n', 483) = 0x025a296f
[0x4022d1] memchr("if ag\nif g\nif a\n\nswswsif (out)\nw"..., '\n', 475) = 0x025a2975
[0x4022d1] memchr("if g\nif a\n\nswswsif (out)\nwwif (g"..., '\n', 469) = 0x025a297a
[0x4022d1] memchr("if a\n\nswswsif (out)\nwwif (gout)\n"..., '\n', 464) = 0x025a297f
[0x4022d1] memchr("\nswswsif (out)\nwwif (gout)\nwssif"..., '\n', 459) = 0x025a2980
[0x4022d1] memchr("swswsif (out)\nwwif (gout)\nwssif "..., '\n', 458) = 0x025a298e
[0x4022d1] memchr("wwif (gout)\nwssif (gsth)\nwswswsi"..., '\n', 444) = 0x025a299a
[0x4022d1] memchr("wssif (gsth)\nwswswsif out\n3if go"..., '\n', 432) = 0x025a29a7
[0x4022d1] memchr("wswswsif out\n3if gout\nwsif agout"..., '\n', 419) = 0x025a29b4
[0x4022d1] memchr("3if gout\nwsif agout\n3eif agout e"..., '\n', 406) = 0x025a29bd
[0x4022d1] memchr("wsif agout\n3eif agout end = buf "..., '\n', 397) = 0x025a29c8
[0x4022d1] memchr("3eif agout end = buf + size;\ndse"..., '\n', 386) = 0x025a29e5
[0x4022d1] memchr("dseif aout\ndsif ag\nisxsif g\nxxsx"..., '\n', 357) = 0x025a29f0
[0x4022d1] memchr("dsif ag\nisxsif g\nxxsxif awwsw\n\ns"..., '\n', 346) = 0x025a29f8
[0x4022d1] memchr("isxsif g\nxxsxif awwsw\n\nswswsif ("..., '\n', 338) = 0x025a2a01
[0x4022d1] memchr("xxsxif awwsw\n\nswswsif (out)fvvfv"..., '\n', 329) = 0x025a2a0e
[0x4022d1] memchr("\nswswsif (out)fvvfvf\nwwif (gout)"..., '\n', 316) = 0x025a2a0f
[0x4022d1] memchr("swswsif (out)fvvfvf\nwwif (gout)\n"..., '\n', 315) = 0x025a2a23
[0x4022d1] memchr("wwif (gout)\nwssif (gsth)\nwswswsi"..., '\n', 295) = 0x025a2a2f
[0x4022d1] memchr("wssif (gsth)\nwswswsif outvfvf\n3i"..., '\n', 283) = 0x025a2a3c
[0x4022d1] memchr("wswswsif outvfvf\n3if goutfvf\nwsi"..., '\n', 270) = 0x025a2a4d
[0x4022d1] memchr("3if goutfvf\nwsif agoutvfv\n3eif a"..., '\n', 253) = 0x025a2a59
[0x4022d1] memchr("wsif agoutvfv\n3eif agoutvf end ="..., '\n', 241) = 0x025a2a67
[0x4022d1] memchr("3eif agoutvf end = buf + size;\nd"..., '\n', 227) = 0x025a2a86
[0x4022d1] memchr("dseif aoutvfv\ndsif agvff\nisxsif "..., '\n', 196) = 0x025a2a94
[0x4022d1] memchr("dsif agvff\nisxsif gvfv\nxxsxif aw"..., '\n', 182) = 0x025a2a9f
[0x4022d1] memchr("isxsif gvfv\nxxsxif awwsw\n\ns  if "..., '\n', 171) = 0x025a2aab
[0x4022d1] memchr("xxsxif awwsw\n\ns  if (out)\n    if"..., '\n', 159) = 0x025a2ab8
[0x4022d1] memchr("\ns  if (out)\n    if (gout)\n sds "..., '\n', 146) = 0x025a2ab9
[0x4022d1] memchr("s  if (out)\n    if (gout)\n sds i"..., '\n', 145) = 0x025a2ac5
[0x4022d1] memchr("    if (gout)\n sds if (gsth)\n  i"..., '\n', 133) = 0x025a2ad3
[0x4022d1] memchr(" sds if (gsth)\n  if out\ndc if go"..., '\n', 119) = 0x025a2ae2
[0x4022d1] memchr("  if out\ndc if gout\ndv if agout\n"..., '\n', 104) = 0x025a2aeb
[0x4022d1] memchr("dc if gout\ndv if agout\nargue if "..., '\n', 95) = 0x025a2af6
[0x4022d1] memchr("dv if agout\nargue if agout end ="..., '\n', 84) = 0x025a2b02
[0x4022d1] memchr("argue if agout end = buf + size;"..., '\n', 72) = 0x025a2b23
[0x4022d1] memchr("  if aout\n          if ag\n  argu"..., '\n', 39) = 0x025a2b2d
[0x4022d1] memchr("          if ag\n  argue if g\n if"..., '\n', 29) = 0x025a2b3d
[0x4022d1] memchr("  argue if g\n if a\n\t  kwset->nex"..., '\n', 13) = 0x025a2b4a
[0x4022d1] memchr(" if a\n\t  kwset->next[i] = next[("..., '\n', 0) = NULL
[0x4020b3] memmove(0x259dffb, 0x25a2b4b, 5, 0x25a2b4b, 0x7f498147f260) = 0x259dffb
[0x402213] read(3, "", 32768)                    = 0
[0x40bc2b] memchr(" if a\nize;\n\n  /* Move the existi"..., 'I', 6) = NULL
[0x40304f] close(3)                              = 0
[0x404145] fclose(0x7f498147f260)                = 0
[0x404180] exit(0 <unfinished ...>
[0xffffffffffffffff] +++ exited (status 0) +++
